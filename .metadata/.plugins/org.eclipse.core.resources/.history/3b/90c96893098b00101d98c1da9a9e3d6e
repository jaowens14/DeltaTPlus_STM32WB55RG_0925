/* USER CODE BEGIN Header */

/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c.h"
#include "ipcc.h"
#include "memorymap.h"
#include "rf.h"
#include "rtc.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "usb_device.h"
#include "gpio.h"
//#include "dma.h"
#include "Adafruit_GFX.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "usbd_cdc_if.h"
#include "stm32_seq.h"
#include "TEMP_MAX31856.h"
#include "TFT_ST7789S.h"
#include "ST7789V_STM32.h"
#include "Screen.hpp"
#include "Accelerometer.hpp"
#include "Backlight.hpp"
#include "Thermocouples.hpp"
#include "DeltaT.h"
#include "screen.h"
#include "BatteryMonitor.hpp"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
char usbBuffer[256];
volatile bool spi_transfer_complete = false;

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
void SPI_Set_Mode(uint8_t mode)
{
  // Disable SPI
  hspi1.Instance->CR1 &= ~SPI_CR1_SPE;

  // Wait for SPI to finish current operation
  while (hspi1.Instance->SR & SPI_SR_BSY)
  {
    // Wait
  }

  // Clear existing CPOL and CPHA bits
  hspi1.Instance->CR1 &= ~(SPI_CR1_CPOL | SPI_CR1_CPHA);

  // Set new mode
  switch (mode)
  {
  case 0: // Mode 0: CPOL=0, CPHA=0
    // Both bits already cleared above
    break;

  case 1: // Mode 1: CPOL=0, CPHA=1
    hspi1.Instance->CR1 |= SPI_CR1_CPHA;
    break;

  case 2: // Mode 2: CPOL=1, CPHA=0
    hspi1.Instance->CR1 |= SPI_CR1_CPOL;
    break;

  case 3: // Mode 3: CPOL=1, CPHA=1
    hspi1.Instance->CR1 |= (SPI_CR1_CPOL | SPI_CR1_CPHA);
    break;

  default:
    // Invalid mode, don't change anything
    break;
  }

  // Re-enable SPI
  hspi1.Instance->CR1 |= SPI_CR1_SPE;
}

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void PeriphCommonClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
  if (hspi == &hspi1) // or &hspi2 depending on which SPI you're using
  {

    // spiState = HAL_SPI_STATE_READY;
    // HAL_SPI_GetState
    // HAL_SPI_SetState(HAL_SPI_STATE_READY);
    // spi_transfer_complete = true;
    //  Handle completion - start next chunk, update status, etc.
  }
}
volatile int timerCounter = 0;

//Accelerometer myAccelerometer;
Backlight myBacklight;
//Thermocouples myThermocouples;
Screen myScreen;
//BatteryMonitor myBatteryMonitor;

// main timer implementation
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{

  if (htim == &htim16)
  {
    // if(init_finished) {
    //  increment / decrement 0.1ms timers here.

    timerCounter++;

    if ((timerCounter % 10) == 0)
    {

      if (myScreen.renderDelay)
      {
        myScreen.renderDelay--;
      }

     // if (myThermocouples.delay)
    //  {
    //    myThermocouples.delay--;
    //  }
      // increment / decrement 1 ms timers here.
    }

    if ((timerCounter % 100) == 0)
    {
      // increment / decrement 10 ms timers here.
      // if (thermocoupleDelay)
      //{
      //  thermocoupleDelay--;
      //}
    }

    if ((timerCounter % 1000) == 0)
    {
      // increment / decrement 100 ms timers here.
      // if (helloWorldDelay)
      //{
      //  helloWorldDelay--;
      //}
    }

    if ((timerCounter % 10000) == 0)
    {
      // increment / decrement 1000 ms timers here.  Note this resets the timer variable.
      timerCounter = 0;
    //  if (myAccelerometer.delay)
    //  {
    //    myAccelerometer.delay--;
    //  }
    //  if (myAccelerometer.readDelay)
    //  {
    //    myAccelerometer.readDelay--;
    //  }

    //  if (myBatteryMonitor.delay)
    //  {
    //    myBatteryMonitor.delay--;
    //  }
    }
    //}
  }
}

/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();

  /* IPCC initialisation */
  MX_IPCC_Init();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  //MX_DMA_Init();
  MX_RTC_Init();
  MX_I2C1_Init();
  MX_SPI1_Init();
  MX_SPI2_Init();
  MX_TIM2_Init();
  MX_USART1_UART_Init();
  // MX_USB_Device_Init();
  MX_TIM16_Init();
  MX_RF_Init();
  /* USER CODE BEGIN 2 */
  MX_APPE_Init();

  HAL_Delay(1000);
  MX_USB_Device_Init();
  HAL_Delay(1000);
  HAL_TIM_Base_Start_IT(&htim16);
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  /* USER CODE END PV */

  //myAccelerometer.setup();
  myBacklight.setup();
  //myThermocouples.setup();
  //myBatteryMonitor.setup();

  myScreen.setup();

  // init_finished = 1;
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();

    /* USER CODE BEGIN 3 */
    // UTIL_SEQ_Run(UTIL_SEQ_RFU);
    // UTIL_SEQ_Run(~0);
    // printCrapStateMachine();

    //myAccelerometer.stateMachine();
    myBacklight.stateMachine();
    //myThermocouples.stateMachine();
    //myBatteryMonitor.stateMachine();
    myScreen.stateMachine();
  }
  /* USER CODE END 3 */
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Macro to configure the PLL multiplication factor
   */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);

  /** Macro to configure the PLL clock source
   */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);

  /** Configure LSE Drive Capability
   */
  HAL_PWR_EnableBkUpAccess();
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Enable MSI Auto calibration
   */
  HAL_RCCEx_EnableMSIPLLMode();
}

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /** Initializes the peripherals clock
   */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS | RCC_PERIPHCLK_RFWAKEUP;
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN Smps */
  LL_HSEM_1StepLock(HSEM, 5); // this here to keep across regens

  /* USER CODE END Smps */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef USE_FULL_ASSERT
/**
 * @brief  Reports the name of the source file and the source line number
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
