
DeltaTPlus_STM32WB55RG_090525.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cc70  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a38  0801cdb0  0801cdb0  0001ddb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801e7e8  0801e7e8  0001f7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0801e7f0  0801e7f0  0001f7f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000008  0801e7f8  0801e7f8  0001f7f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002e4  20000008  0801e800  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  200002ec  0801eae4  000202ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000324  0801eb19  00020324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017f4  20000338  0801eb2a  00020338  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  20001b2c  0801eb2a  00020b2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00022000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00022000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0801eb2a  000211e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0007f75d  00000000  00000000  00021a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000e023  00000000  00000000  000a11f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000043e0  00000000  00000000  000af218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000343e  00000000  00000000  000b35f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001cbfd  00000000  00000000  000b6a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0006132e  00000000  00000000  000d3633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0012247e  00000000  00000000  00134961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  00256ddf  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00012ffc  00000000  00000000  00256e24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000008f  00000000  00000000  00269e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000338 	.word	0x20000338
 800015c:	00000000 	.word	0x00000000
 8000160:	0801cd98 	.word	0x0801cd98

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000033c 	.word	0x2000033c
 800017c:	0801cd98 	.word	0x0801cd98

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr
	...

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	@ 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_d2f>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b80:	bf24      	itt	cs
 8000b82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b8a:	d90d      	bls.n	8000ba8 <__aeabi_d2f+0x30>
 8000b8c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b98:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba0:	bf08      	it	eq
 8000ba2:	f020 0001 	biceq.w	r0, r0, #1
 8000ba6:	4770      	bx	lr
 8000ba8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bac:	d121      	bne.n	8000bf2 <__aeabi_d2f+0x7a>
 8000bae:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bb2:	bfbc      	itt	lt
 8000bb4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	4770      	bxlt	lr
 8000bba:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bbe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc2:	f1c2 0218 	rsb	r2, r2, #24
 8000bc6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bce:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	f040 0001 	orrne.w	r0, r0, #1
 8000bd8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bdc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be4:	ea40 000c 	orr.w	r0, r0, ip
 8000be8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf0:	e7cc      	b.n	8000b8c <__aeabi_d2f+0x14>
 8000bf2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bf6:	d107      	bne.n	8000c08 <__aeabi_d2f+0x90>
 8000bf8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bfc:	bf1e      	ittt	ne
 8000bfe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c02:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c06:	4770      	bxne	lr
 8000c08:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b988 	b.w	8000f40 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	468e      	mov	lr, r1
 8000c50:	4604      	mov	r4, r0
 8000c52:	4688      	mov	r8, r1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d14a      	bne.n	8000cee <__udivmoddi4+0xa6>
 8000c58:	428a      	cmp	r2, r1
 8000c5a:	4617      	mov	r7, r2
 8000c5c:	d962      	bls.n	8000d24 <__udivmoddi4+0xdc>
 8000c5e:	fab2 f682 	clz	r6, r2
 8000c62:	b14e      	cbz	r6, 8000c78 <__udivmoddi4+0x30>
 8000c64:	f1c6 0320 	rsb	r3, r6, #32
 8000c68:	fa01 f806 	lsl.w	r8, r1, r6
 8000c6c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c70:	40b7      	lsls	r7, r6
 8000c72:	ea43 0808 	orr.w	r8, r3, r8
 8000c76:	40b4      	lsls	r4, r6
 8000c78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c7c:	fa1f fc87 	uxth.w	ip, r7
 8000c80:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c84:	0c23      	lsrs	r3, r4, #16
 8000c86:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c8a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c8e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0x62>
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c9c:	f080 80ea 	bcs.w	8000e74 <__udivmoddi4+0x22c>
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	f240 80e7 	bls.w	8000e74 <__udivmoddi4+0x22c>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	443b      	add	r3, r7
 8000caa:	1a9a      	subs	r2, r3, r2
 8000cac:	b2a3      	uxth	r3, r4
 8000cae:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cb2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cba:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cbe:	459c      	cmp	ip, r3
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0x8e>
 8000cc2:	18fb      	adds	r3, r7, r3
 8000cc4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cc8:	f080 80d6 	bcs.w	8000e78 <__udivmoddi4+0x230>
 8000ccc:	459c      	cmp	ip, r3
 8000cce:	f240 80d3 	bls.w	8000e78 <__udivmoddi4+0x230>
 8000cd2:	443b      	add	r3, r7
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cda:	eba3 030c 	sub.w	r3, r3, ip
 8000cde:	2100      	movs	r1, #0
 8000ce0:	b11d      	cbz	r5, 8000cea <__udivmoddi4+0xa2>
 8000ce2:	40f3      	lsrs	r3, r6
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d905      	bls.n	8000cfe <__udivmoddi4+0xb6>
 8000cf2:	b10d      	cbz	r5, 8000cf8 <__udivmoddi4+0xb0>
 8000cf4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	e7f5      	b.n	8000cea <__udivmoddi4+0xa2>
 8000cfe:	fab3 f183 	clz	r1, r3
 8000d02:	2900      	cmp	r1, #0
 8000d04:	d146      	bne.n	8000d94 <__udivmoddi4+0x14c>
 8000d06:	4573      	cmp	r3, lr
 8000d08:	d302      	bcc.n	8000d10 <__udivmoddi4+0xc8>
 8000d0a:	4282      	cmp	r2, r0
 8000d0c:	f200 8105 	bhi.w	8000f1a <__udivmoddi4+0x2d2>
 8000d10:	1a84      	subs	r4, r0, r2
 8000d12:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d16:	2001      	movs	r0, #1
 8000d18:	4690      	mov	r8, r2
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	d0e5      	beq.n	8000cea <__udivmoddi4+0xa2>
 8000d1e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d22:	e7e2      	b.n	8000cea <__udivmoddi4+0xa2>
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	f000 8090 	beq.w	8000e4a <__udivmoddi4+0x202>
 8000d2a:	fab2 f682 	clz	r6, r2
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	f040 80a4 	bne.w	8000e7c <__udivmoddi4+0x234>
 8000d34:	1a8a      	subs	r2, r1, r2
 8000d36:	0c03      	lsrs	r3, r0, #16
 8000d38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3c:	b280      	uxth	r0, r0
 8000d3e:	b2bc      	uxth	r4, r7
 8000d40:	2101      	movs	r1, #1
 8000d42:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d46:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d4e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x11e>
 8000d56:	18fb      	adds	r3, r7, r3
 8000d58:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x11c>
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	f200 80e0 	bhi.w	8000f24 <__udivmoddi4+0x2dc>
 8000d64:	46c4      	mov	ip, r8
 8000d66:	1a9b      	subs	r3, r3, r2
 8000d68:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d6c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d70:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d74:	fb02 f404 	mul.w	r4, r2, r4
 8000d78:	429c      	cmp	r4, r3
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x144>
 8000d7c:	18fb      	adds	r3, r7, r3
 8000d7e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x142>
 8000d84:	429c      	cmp	r4, r3
 8000d86:	f200 80ca 	bhi.w	8000f1e <__udivmoddi4+0x2d6>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	1b1b      	subs	r3, r3, r4
 8000d8e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d92:	e7a5      	b.n	8000ce0 <__udivmoddi4+0x98>
 8000d94:	f1c1 0620 	rsb	r6, r1, #32
 8000d98:	408b      	lsls	r3, r1
 8000d9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d9e:	431f      	orrs	r7, r3
 8000da0:	fa0e f401 	lsl.w	r4, lr, r1
 8000da4:	fa20 f306 	lsr.w	r3, r0, r6
 8000da8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000db0:	4323      	orrs	r3, r4
 8000db2:	fa00 f801 	lsl.w	r8, r0, r1
 8000db6:	fa1f fc87 	uxth.w	ip, r7
 8000dba:	fbbe f0f9 	udiv	r0, lr, r9
 8000dbe:	0c1c      	lsrs	r4, r3, #16
 8000dc0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000dc4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000dc8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	fa02 f201 	lsl.w	r2, r2, r1
 8000dd2:	d909      	bls.n	8000de8 <__udivmoddi4+0x1a0>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dda:	f080 809c 	bcs.w	8000f16 <__udivmoddi4+0x2ce>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	f240 8099 	bls.w	8000f16 <__udivmoddi4+0x2ce>
 8000de4:	3802      	subs	r0, #2
 8000de6:	443c      	add	r4, r7
 8000de8:	eba4 040e 	sub.w	r4, r4, lr
 8000dec:	fa1f fe83 	uxth.w	lr, r3
 8000df0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000df4:	fb09 4413 	mls	r4, r9, r3, r4
 8000df8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dfc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e00:	45a4      	cmp	ip, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x1ce>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e0a:	f080 8082 	bcs.w	8000f12 <__udivmoddi4+0x2ca>
 8000e0e:	45a4      	cmp	ip, r4
 8000e10:	d97f      	bls.n	8000f12 <__udivmoddi4+0x2ca>
 8000e12:	3b02      	subs	r3, #2
 8000e14:	443c      	add	r4, r7
 8000e16:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e1a:	eba4 040c 	sub.w	r4, r4, ip
 8000e1e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e22:	4564      	cmp	r4, ip
 8000e24:	4673      	mov	r3, lr
 8000e26:	46e1      	mov	r9, ip
 8000e28:	d362      	bcc.n	8000ef0 <__udivmoddi4+0x2a8>
 8000e2a:	d05f      	beq.n	8000eec <__udivmoddi4+0x2a4>
 8000e2c:	b15d      	cbz	r5, 8000e46 <__udivmoddi4+0x1fe>
 8000e2e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e32:	eb64 0409 	sbc.w	r4, r4, r9
 8000e36:	fa04 f606 	lsl.w	r6, r4, r6
 8000e3a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e3e:	431e      	orrs	r6, r3
 8000e40:	40cc      	lsrs	r4, r1
 8000e42:	e9c5 6400 	strd	r6, r4, [r5]
 8000e46:	2100      	movs	r1, #0
 8000e48:	e74f      	b.n	8000cea <__udivmoddi4+0xa2>
 8000e4a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e4e:	0c01      	lsrs	r1, r0, #16
 8000e50:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e54:	b280      	uxth	r0, r0
 8000e56:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	4638      	mov	r0, r7
 8000e5e:	463c      	mov	r4, r7
 8000e60:	46b8      	mov	r8, r7
 8000e62:	46be      	mov	lr, r7
 8000e64:	2620      	movs	r6, #32
 8000e66:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e6a:	eba2 0208 	sub.w	r2, r2, r8
 8000e6e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e72:	e766      	b.n	8000d42 <__udivmoddi4+0xfa>
 8000e74:	4601      	mov	r1, r0
 8000e76:	e718      	b.n	8000caa <__udivmoddi4+0x62>
 8000e78:	4610      	mov	r0, r2
 8000e7a:	e72c      	b.n	8000cd6 <__udivmoddi4+0x8e>
 8000e7c:	f1c6 0220 	rsb	r2, r6, #32
 8000e80:	fa2e f302 	lsr.w	r3, lr, r2
 8000e84:	40b7      	lsls	r7, r6
 8000e86:	40b1      	lsls	r1, r6
 8000e88:	fa20 f202 	lsr.w	r2, r0, r2
 8000e8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e90:	430a      	orrs	r2, r1
 8000e92:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e96:	b2bc      	uxth	r4, r7
 8000e98:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e9c:	0c11      	lsrs	r1, r2, #16
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb08 f904 	mul.w	r9, r8, r4
 8000ea6:	40b0      	lsls	r0, r6
 8000ea8:	4589      	cmp	r9, r1
 8000eaa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eae:	b280      	uxth	r0, r0
 8000eb0:	d93e      	bls.n	8000f30 <__udivmoddi4+0x2e8>
 8000eb2:	1879      	adds	r1, r7, r1
 8000eb4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000eb8:	d201      	bcs.n	8000ebe <__udivmoddi4+0x276>
 8000eba:	4589      	cmp	r9, r1
 8000ebc:	d81f      	bhi.n	8000efe <__udivmoddi4+0x2b6>
 8000ebe:	eba1 0109 	sub.w	r1, r1, r9
 8000ec2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ec6:	fb09 f804 	mul.w	r8, r9, r4
 8000eca:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ece:	b292      	uxth	r2, r2
 8000ed0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ed4:	4542      	cmp	r2, r8
 8000ed6:	d229      	bcs.n	8000f2c <__udivmoddi4+0x2e4>
 8000ed8:	18ba      	adds	r2, r7, r2
 8000eda:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ede:	d2c4      	bcs.n	8000e6a <__udivmoddi4+0x222>
 8000ee0:	4542      	cmp	r2, r8
 8000ee2:	d2c2      	bcs.n	8000e6a <__udivmoddi4+0x222>
 8000ee4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ee8:	443a      	add	r2, r7
 8000eea:	e7be      	b.n	8000e6a <__udivmoddi4+0x222>
 8000eec:	45f0      	cmp	r8, lr
 8000eee:	d29d      	bcs.n	8000e2c <__udivmoddi4+0x1e4>
 8000ef0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ef4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ef8:	3801      	subs	r0, #1
 8000efa:	46e1      	mov	r9, ip
 8000efc:	e796      	b.n	8000e2c <__udivmoddi4+0x1e4>
 8000efe:	eba7 0909 	sub.w	r9, r7, r9
 8000f02:	4449      	add	r1, r9
 8000f04:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f08:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0c:	fb09 f804 	mul.w	r8, r9, r4
 8000f10:	e7db      	b.n	8000eca <__udivmoddi4+0x282>
 8000f12:	4673      	mov	r3, lr
 8000f14:	e77f      	b.n	8000e16 <__udivmoddi4+0x1ce>
 8000f16:	4650      	mov	r0, sl
 8000f18:	e766      	b.n	8000de8 <__udivmoddi4+0x1a0>
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	e6fd      	b.n	8000d1a <__udivmoddi4+0xd2>
 8000f1e:	443b      	add	r3, r7
 8000f20:	3a02      	subs	r2, #2
 8000f22:	e733      	b.n	8000d8c <__udivmoddi4+0x144>
 8000f24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f28:	443b      	add	r3, r7
 8000f2a:	e71c      	b.n	8000d66 <__udivmoddi4+0x11e>
 8000f2c:	4649      	mov	r1, r9
 8000f2e:	e79c      	b.n	8000e6a <__udivmoddi4+0x222>
 8000f30:	eba1 0109 	sub.w	r1, r1, r9
 8000f34:	46c4      	mov	ip, r8
 8000f36:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3a:	fb09 f804 	mul.w	r8, r9, r4
 8000f3e:	e7c4      	b.n	8000eca <__udivmoddi4+0x282>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <__io_putchar>:
  * @brief  Retargets the C library __io_putchar function to the USART.
  * @param  None
  * @retval None
  */
int __io_putchar(int ch)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
    /* Implementation of __io_putchar */
	/* e.g. write a character to the UART1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFFFFFF);
 8000f4c:	1d39      	adds	r1, r7, #4
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f52:	2201      	movs	r2, #1
 8000f54:	4803      	ldr	r0, [pc, #12]	@ (8000f64 <__io_putchar+0x20>)
 8000f56:	f00e fa49 	bl	800f3ec <HAL_UART_Transmit>

    return ch;
 8000f5a:	687b      	ldr	r3, [r7, #4]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000a80 	.word	0x20000a80

08000f68 <__io_getchar>:
  * @brief  Retargets the C library __io_getchar function to the USART.
  * @param  None
  * @retval character read uart
  */
int __io_getchar(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
  /* Implementation of __io_getchar */
    char rxChar;

    // This loops in case of HAL timeout, but if an ok or error occurs, we continue
    while (HAL_UART_Receive(&huart1, (uint8_t *)&rxChar, 1, 0xFFFFFFFF) == HAL_TIMEOUT);
 8000f6e:	bf00      	nop
 8000f70:	1df9      	adds	r1, r7, #7
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295
 8000f76:	2201      	movs	r2, #1
 8000f78:	4805      	ldr	r0, [pc, #20]	@ (8000f90 <__io_getchar+0x28>)
 8000f7a:	f00e fac5 	bl	800f508 <HAL_UART_Receive>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b03      	cmp	r3, #3
 8000f82:	d0f5      	beq.n	8000f70 <__io_getchar+0x8>

    return rxChar;
 8000f84:	79fb      	ldrb	r3, [r7, #7]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000a80 	.word	0x20000a80

08000f94 <_ZN23Adafruit_MAX17048_STM32C1Ev>:

#include "Adafruit_MAX1704X.h"

#include <math.h>

Adafruit_MAX17048_STM32::Adafruit_MAX17048_STM32()
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
{
  _hi2c = nullptr;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
  _i2c_addr = MAX17048_I2CADDR_DEFAULT << 1; // STM32 HAL uses 8-bit address
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	226c      	movs	r2, #108	@ 0x6c
 8000fa6:	809a      	strh	r2, [r3, #4]
  _timeout = 1000;                           // 1 second timeout
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fae:	609a      	str	r2, [r3, #8]
}
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <_ZN23Adafruit_MAX17048_STM325beginEP19__I2C_HandleTypeDeft>:

bool Adafruit_MAX17048_STM32::begin(I2C_HandleTypeDef *hi2c, uint16_t i2c_addr)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b084      	sub	sp, #16
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	60f8      	str	r0, [r7, #12]
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	80fb      	strh	r3, [r7, #6]
  _hi2c = hi2c;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	601a      	str	r2, [r3, #0]
  _i2c_addr = i2c_addr << 1; // Convert to 8-bit address for HAL
 8000fd2:	88fb      	ldrh	r3, [r7, #6]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	809a      	strh	r2, [r3, #4]

  if (!isDeviceReady())
 8000fdc:	68f8      	ldr	r0, [r7, #12]
 8000fde:	f000 f92d 	bl	800123c <_ZN23Adafruit_MAX17048_STM3213isDeviceReadyEv>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	f083 0301 	eor.w	r3, r3, #1
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <_ZN23Adafruit_MAX17048_STM325beginEP19__I2C_HandleTypeDeft+0x34>
  {
    return false;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e013      	b.n	800101a <_ZN23Adafruit_MAX17048_STM325beginEP19__I2C_HandleTypeDeft+0x5c>
  }

  if (!reset())
 8000ff2:	68f8      	ldr	r0, [r7, #12]
 8000ff4:	f000 f937 	bl	8001266 <_ZN23Adafruit_MAX17048_STM325resetEv>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	f083 0301 	eor.w	r3, r3, #1
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <_ZN23Adafruit_MAX17048_STM325beginEP19__I2C_HandleTypeDeft+0x4a>
  {
    return false;
 8001004:	2300      	movs	r3, #0
 8001006:	e008      	b.n	800101a <_ZN23Adafruit_MAX17048_STM325beginEP19__I2C_HandleTypeDeft+0x5c>
  }

  enableSleep(false);
 8001008:	2100      	movs	r1, #0
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f000 f9f1 	bl	80013f2 <_ZN23Adafruit_MAX17048_STM3211enableSleepEb>
  sleep(false);
 8001010:	2100      	movs	r1, #0
 8001012:	68f8      	ldr	r0, [r7, #12]
 8001014:	f000 f9d6 	bl	80013c4 <_ZN23Adafruit_MAX17048_STM325sleepEb>

  return true;
 8001018:	2301      	movs	r3, #1
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <_ZN23Adafruit_MAX17048_STM3214writeRegister8Ehh>:

bool Adafruit_MAX17048_STM32::writeRegister8(uint8_t reg, uint8_t value)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b086      	sub	sp, #24
 8001026:	af02      	add	r7, sp, #8
 8001028:	6078      	str	r0, [r7, #4]
 800102a:	460b      	mov	r3, r1
 800102c:	70fb      	strb	r3, [r7, #3]
 800102e:	4613      	mov	r3, r2
 8001030:	70bb      	strb	r3, [r7, #2]
  uint8_t data[2] = {reg, value};
 8001032:	78fb      	ldrb	r3, [r7, #3]
 8001034:	733b      	strb	r3, [r7, #12]
 8001036:	78bb      	ldrb	r3, [r7, #2]
 8001038:	737b      	strb	r3, [r7, #13]
  HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(_hi2c, _i2c_addr, data, 2, _timeout);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	8899      	ldrh	r1, [r3, #4]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f107 020c 	add.w	r2, r7, #12
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2302      	movs	r3, #2
 800104e:	f007 fc39 	bl	80088c4 <HAL_I2C_Master_Transmit>
 8001052:	4603      	mov	r3, r0
 8001054:	73fb      	strb	r3, [r7, #15]
  return (status == HAL_OK);
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	2b00      	cmp	r3, #0
 800105a:	bf0c      	ite	eq
 800105c:	2301      	moveq	r3, #1
 800105e:	2300      	movne	r3, #0
 8001060:	b2db      	uxtb	r3, r3
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <_ZN23Adafruit_MAX17048_STM3215writeRegister16Eht>:

bool Adafruit_MAX17048_STM32::writeRegister16(uint8_t reg, uint16_t value)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b086      	sub	sp, #24
 800106e:	af02      	add	r7, sp, #8
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	460b      	mov	r3, r1
 8001074:	70fb      	strb	r3, [r7, #3]
 8001076:	4613      	mov	r3, r2
 8001078:	803b      	strh	r3, [r7, #0]
  uint8_t data[3] = {reg, (uint8_t)(value >> 8), (uint8_t)(value & 0xFF)};
 800107a:	78fb      	ldrb	r3, [r7, #3]
 800107c:	733b      	strb	r3, [r7, #12]
 800107e:	883b      	ldrh	r3, [r7, #0]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	b29b      	uxth	r3, r3
 8001084:	b2db      	uxtb	r3, r3
 8001086:	737b      	strb	r3, [r7, #13]
 8001088:	883b      	ldrh	r3, [r7, #0]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	73bb      	strb	r3, [r7, #14]
  HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(_hi2c, _i2c_addr, data, 3, _timeout);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6818      	ldr	r0, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	8899      	ldrh	r1, [r3, #4]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f107 020c 	add.w	r2, r7, #12
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	2303      	movs	r3, #3
 80010a2:	f007 fc0f 	bl	80088c4 <HAL_I2C_Master_Transmit>
 80010a6:	4603      	mov	r3, r0
 80010a8:	73fb      	strb	r3, [r7, #15]
  return (status == HAL_OK);
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	bf0c      	ite	eq
 80010b0:	2301      	moveq	r3, #1
 80010b2:	2300      	movne	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <_ZN23Adafruit_MAX17048_STM3213readRegister8Eh>:

uint8_t Adafruit_MAX17048_STM32::readRegister8(uint8_t reg)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af02      	add	r7, sp, #8
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	460b      	mov	r3, r1
 80010c8:	70fb      	strb	r3, [r7, #3]
  uint8_t data = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	73fb      	strb	r3, [r7, #15]

  // Write register address
  if (HAL_I2C_Master_Transmit(_hi2c, _i2c_addr, &reg, 1, _timeout) != HAL_OK)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6818      	ldr	r0, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	8899      	ldrh	r1, [r3, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	1cfa      	adds	r2, r7, #3
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2301      	movs	r3, #1
 80010e0:	f007 fbf0 	bl	80088c4 <HAL_I2C_Master_Transmit>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	bf14      	ite	ne
 80010ea:	2301      	movne	r3, #1
 80010ec:	2300      	moveq	r3, #0
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <_ZN23Adafruit_MAX17048_STM3213readRegister8Eh+0x3a>
  {
    return 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	e00c      	b.n	8001112 <_ZN23Adafruit_MAX17048_STM3213readRegister8Eh+0x54>
  }

  // Read data
  HAL_I2C_Master_Receive(_hi2c, _i2c_addr, &data, 1, _timeout);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6818      	ldr	r0, [r3, #0]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	8899      	ldrh	r1, [r3, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f107 020f 	add.w	r2, r7, #15
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2301      	movs	r3, #1
 800110c:	f007 fcf2 	bl	8008af4 <HAL_I2C_Master_Receive>

  return data;
 8001110:	7bfb      	ldrb	r3, [r7, #15]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <_ZN23Adafruit_MAX17048_STM3214readRegister16Eh>:

uint16_t Adafruit_MAX17048_STM32::readRegister16(uint8_t reg)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b086      	sub	sp, #24
 800111e:	af02      	add	r7, sp, #8
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	460b      	mov	r3, r1
 8001124:	70fb      	strb	r3, [r7, #3]
  uint8_t data[2] = {0, 0};
 8001126:	2300      	movs	r3, #0
 8001128:	81bb      	strh	r3, [r7, #12]

  // Write register address
  if (HAL_I2C_Master_Transmit(_hi2c, _i2c_addr, &reg, 1, _timeout) != HAL_OK)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6818      	ldr	r0, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	8899      	ldrh	r1, [r3, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	1cfa      	adds	r2, r7, #3
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2301      	movs	r3, #1
 800113c:	f007 fbc2 	bl	80088c4 <HAL_I2C_Master_Transmit>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	bf14      	ite	ne
 8001146:	2301      	movne	r3, #1
 8001148:	2300      	moveq	r3, #0
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <_ZN23Adafruit_MAX17048_STM3214readRegister16Eh+0x3a>
  {
    return 0;
 8001150:	2300      	movs	r3, #0
 8001152:	e01e      	b.n	8001192 <_ZN23Adafruit_MAX17048_STM3214readRegister16Eh+0x78>
  }

  // Read data
  if (HAL_I2C_Master_Receive(_hi2c, _i2c_addr, data, 2, _timeout) != HAL_OK)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6818      	ldr	r0, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	8899      	ldrh	r1, [r3, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f107 020c 	add.w	r2, r7, #12
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2302      	movs	r3, #2
 8001168:	f007 fcc4 	bl	8008af4 <HAL_I2C_Master_Receive>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	bf14      	ite	ne
 8001172:	2301      	movne	r3, #1
 8001174:	2300      	moveq	r3, #0
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <_ZN23Adafruit_MAX17048_STM3214readRegister16Eh+0x66>
  {
    return 0;
 800117c:	2300      	movs	r3, #0
 800117e:	e008      	b.n	8001192 <_ZN23Adafruit_MAX17048_STM3214readRegister16Eh+0x78>
  }

  return (data[0] << 8) | data[1]; // MSB first
 8001180:	7b3b      	ldrb	r3, [r7, #12]
 8001182:	b21b      	sxth	r3, r3
 8001184:	021b      	lsls	r3, r3, #8
 8001186:	b21a      	sxth	r2, r3
 8001188:	7b7b      	ldrb	r3, [r7, #13]
 800118a:	b21b      	sxth	r3, r3
 800118c:	4313      	orrs	r3, r2
 800118e:	b21b      	sxth	r3, r3
 8001190:	b29b      	uxth	r3, r3
}
 8001192:	4618      	mov	r0, r3
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <_ZN23Adafruit_MAX17048_STM329writeBitsEhhhh>:

bool Adafruit_MAX17048_STM32::writeBits(uint8_t reg, uint8_t bitStart, uint8_t length, uint8_t data)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b084      	sub	sp, #16
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
 80011a2:	4608      	mov	r0, r1
 80011a4:	4611      	mov	r1, r2
 80011a6:	461a      	mov	r2, r3
 80011a8:	4603      	mov	r3, r0
 80011aa:	70fb      	strb	r3, [r7, #3]
 80011ac:	460b      	mov	r3, r1
 80011ae:	70bb      	strb	r3, [r7, #2]
 80011b0:	4613      	mov	r3, r2
 80011b2:	707b      	strb	r3, [r7, #1]
  uint8_t regValue = readRegister8(reg);
 80011b4:	78fb      	ldrb	r3, [r7, #3]
 80011b6:	4619      	mov	r1, r3
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ff80 	bl	80010be <_ZN23Adafruit_MAX17048_STM3213readRegister8Eh>
 80011be:	4603      	mov	r3, r0
 80011c0:	73fb      	strb	r3, [r7, #15]
  uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 80011c2:	787b      	ldrb	r3, [r7, #1]
 80011c4:	2201      	movs	r2, #1
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	1e5a      	subs	r2, r3, #1
 80011cc:	78b9      	ldrb	r1, [r7, #2]
 80011ce:	787b      	ldrb	r3, [r7, #1]
 80011d0:	1acb      	subs	r3, r1, r3
 80011d2:	3301      	adds	r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	73bb      	strb	r3, [r7, #14]
  data <<= (bitStart - length + 1);
 80011da:	7e3a      	ldrb	r2, [r7, #24]
 80011dc:	78b9      	ldrb	r1, [r7, #2]
 80011de:	787b      	ldrb	r3, [r7, #1]
 80011e0:	1acb      	subs	r3, r1, r3
 80011e2:	3301      	adds	r3, #1
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	763b      	strb	r3, [r7, #24]
  data &= mask;
 80011ea:	7e3a      	ldrb	r2, [r7, #24]
 80011ec:	7bbb      	ldrb	r3, [r7, #14]
 80011ee:	4013      	ands	r3, r2
 80011f0:	763b      	strb	r3, [r7, #24]
  regValue &= ~mask;
 80011f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	b25a      	sxtb	r2, r3
 80011fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fe:	4013      	ands	r3, r2
 8001200:	b25b      	sxtb	r3, r3
 8001202:	73fb      	strb	r3, [r7, #15]
  regValue |= data;
 8001204:	7bfa      	ldrb	r2, [r7, #15]
 8001206:	7e3b      	ldrb	r3, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	73fb      	strb	r3, [r7, #15]
  return writeRegister8(reg, regValue);
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	78fb      	ldrb	r3, [r7, #3]
 8001210:	4619      	mov	r1, r3
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff ff05 	bl	8001022 <_ZN23Adafruit_MAX17048_STM3214writeRegister8Ehh>
 8001218:	4603      	mov	r3, r0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <_ZN23Adafruit_MAX17048_STM3212getICversionEv>:
  regValue >>= (bitStart - length + 1);
  return regValue;
}

uint16_t Adafruit_MAX17048_STM32::getICversion(void)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  return readRegister16(MAX1704X_VERSION_REG);
 800122a:	2108      	movs	r1, #8
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ff74 	bl	800111a <_ZN23Adafruit_MAX17048_STM3214readRegister16Eh>
 8001232:	4603      	mov	r3, r0
}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <_ZN23Adafruit_MAX17048_STM3213isDeviceReadyEv>:
{
  return readRegister8(MAX1704X_CHIPID_REG);
}

bool Adafruit_MAX17048_STM32::isDeviceReady(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  return (getICversion() & 0xFFF0) == 0x0010;
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ffec 	bl	8001222 <_ZN23Adafruit_MAX17048_STM3212getICversionEv>
 800124a:	4603      	mov	r3, r0
 800124c:	461a      	mov	r2, r3
 800124e:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8001252:	4013      	ands	r3, r2
 8001254:	2b10      	cmp	r3, #16
 8001256:	bf0c      	ite	eq
 8001258:	2301      	moveq	r3, #1
 800125a:	2300      	movne	r3, #0
 800125c:	b2db      	uxtb	r3, r3
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <_ZN23Adafruit_MAX17048_STM325resetEv>:

bool Adafruit_MAX17048_STM32::reset(void)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b084      	sub	sp, #16
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  // Send reset command - expect this to fail with NACK as chip resets
  writeRegister16(MAX1704X_CMD_REG, 0x5400);
 800126e:	f44f 42a8 	mov.w	r2, #21504	@ 0x5400
 8001272:	21fe      	movs	r1, #254	@ 0xfe
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff fef8 	bl	800106a <_ZN23Adafruit_MAX17048_STM3215writeRegister16Eht>

  // Wait for reset to complete
  HAL_Delay(100);
 800127a:	2064      	movs	r0, #100	@ 0x64
 800127c:	f004 f963 	bl	8005546 <HAL_Delay>

  // Try to clear reset flag
  for (uint8_t retries = 0; retries < 3; retries++)
 8001280:	2300      	movs	r3, #0
 8001282:	73fb      	strb	r3, [r7, #15]
 8001284:	e00e      	b.n	80012a4 <_ZN23Adafruit_MAX17048_STM325resetEv+0x3e>
  {
    if (clearAlertFlag(MAX1704X_ALERTFLAG_RESET_INDICATOR))
 8001286:	2101      	movs	r1, #1
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f000 f813 	bl	80012b4 <_ZN23Adafruit_MAX17048_STM3214clearAlertFlagEh>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <_ZN23Adafruit_MAX17048_STM325resetEv+0x32>
    {
      return true;
 8001294:	2301      	movs	r3, #1
 8001296:	e009      	b.n	80012ac <_ZN23Adafruit_MAX17048_STM325resetEv+0x46>
    }
    HAL_Delay(50);
 8001298:	2032      	movs	r0, #50	@ 0x32
 800129a:	f004 f954 	bl	8005546 <HAL_Delay>
  for (uint8_t retries = 0; retries < 3; retries++)
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	3301      	adds	r3, #1
 80012a2:	73fb      	strb	r3, [r7, #15]
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d9ed      	bls.n	8001286 <_ZN23Adafruit_MAX17048_STM325resetEv+0x20>
  }

  return false;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <_ZN23Adafruit_MAX17048_STM3214clearAlertFlagEh>:

bool Adafruit_MAX17048_STM32::clearAlertFlag(uint8_t flags)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	70fb      	strb	r3, [r7, #3]
  uint8_t status = readRegister8(MAX1704X_STATUS_REG);
 80012c0:	211a      	movs	r1, #26
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff fefb 	bl	80010be <_ZN23Adafruit_MAX17048_STM3213readRegister8Eh>
 80012c8:	4603      	mov	r3, r0
 80012ca:	73fb      	strb	r3, [r7, #15]
  status &= ~flags;
 80012cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	b25a      	sxtb	r2, r3
 80012d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d8:	4013      	ands	r3, r2
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	73fb      	strb	r3, [r7, #15]
  return writeRegister8(MAX1704X_STATUS_REG, status);
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	461a      	mov	r2, r3
 80012e2:	211a      	movs	r1, #26
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff fe9c 	bl	8001022 <_ZN23Adafruit_MAX17048_STM3214writeRegister8Ehh>
 80012ea:	4603      	mov	r3, r0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <_ZN23Adafruit_MAX17048_STM3211cellPercentEv>:
  uint16_t voltage = readRegister16(MAX1704X_VCELL_REG);
  return voltage * 78.125 / 1000000.0; // Convert to volts
}

float Adafruit_MAX17048_STM32::cellPercent(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  if (!isDeviceReady())
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ff9d 	bl	800123c <_ZN23Adafruit_MAX17048_STM3213isDeviceReadyEv>
 8001302:	4603      	mov	r3, r0
 8001304:	f083 0301 	eor.w	r3, r3, #1
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <_ZN23Adafruit_MAX17048_STM3211cellPercentEv+0x1e>
  {
    return NAN;
 800130e:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <_ZN23Adafruit_MAX17048_STM3211cellPercentEv+0x58>)
 8001310:	e015      	b.n	800133e <_ZN23Adafruit_MAX17048_STM3211cellPercentEv+0x4a>
  }

  uint16_t percent = readRegister16(MAX1704X_SOC_REG);
 8001312:	2104      	movs	r1, #4
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff ff00 	bl	800111a <_ZN23Adafruit_MAX17048_STM3214readRegister16Eh>
 800131a:	4603      	mov	r3, r0
 800131c:	81fb      	strh	r3, [r7, #14]
  return percent / 256.0; // Convert to percentage
 800131e:	89fb      	ldrh	r3, [r7, #14]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f8e7 	bl	80004f4 <__aeabi_i2d>
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	4b09      	ldr	r3, [pc, #36]	@ (8001350 <_ZN23Adafruit_MAX17048_STM3211cellPercentEv+0x5c>)
 800132c:	f7ff fa76 	bl	800081c <__aeabi_ddiv>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4610      	mov	r0, r2
 8001336:	4619      	mov	r1, r3
 8001338:	f7ff fc1e 	bl	8000b78 <__aeabi_d2f>
 800133c:	4603      	mov	r3, r0
}
 800133e:	ee07 3a90 	vmov	s15, r3
 8001342:	eeb0 0a67 	vmov.f32	s0, s15
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	7fc00000 	.word	0x7fc00000
 8001350:	40700000 	.word	0x40700000
 8001354:	00000000 	.word	0x00000000

08001358 <_ZN23Adafruit_MAX17048_STM3210chargeRateEv>:

float Adafruit_MAX17048_STM32::chargeRate(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if (!isDeviceReady())
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ff6b 	bl	800123c <_ZN23Adafruit_MAX17048_STM3213isDeviceReadyEv>
 8001366:	4603      	mov	r3, r0
 8001368:	f083 0301 	eor.w	r3, r3, #1
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <_ZN23Adafruit_MAX17048_STM3210chargeRateEv+0x1e>
  {
    return NAN;
 8001372:	4b13      	ldr	r3, [pc, #76]	@ (80013c0 <_ZN23Adafruit_MAX17048_STM3210chargeRateEv+0x68>)
 8001374:	e016      	b.n	80013a4 <_ZN23Adafruit_MAX17048_STM3210chargeRateEv+0x4c>
  }

  int16_t rate = (int16_t)readRegister16(MAX1704X_CRATE_REG);
 8001376:	2116      	movs	r1, #22
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff fece 	bl	800111a <_ZN23Adafruit_MAX17048_STM3214readRegister16Eh>
 800137e:	4603      	mov	r3, r0
 8001380:	81fb      	strh	r3, [r7, #14]
  return rate * 0.208; // Convert to %/hour
 8001382:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f8b4 	bl	80004f4 <__aeabi_i2d>
 800138c:	a30a      	add	r3, pc, #40	@ (adr r3, 80013b8 <_ZN23Adafruit_MAX17048_STM3210chargeRateEv+0x60>)
 800138e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001392:	f7ff f919 	bl	80005c8 <__aeabi_dmul>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4610      	mov	r0, r2
 800139c:	4619      	mov	r1, r3
 800139e:	f7ff fbeb 	bl	8000b78 <__aeabi_d2f>
 80013a2:	4603      	mov	r3, r0
}
 80013a4:	ee07 3a90 	vmov	s15, r3
 80013a8:	eeb0 0a67 	vmov.f32	s0, s15
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	f3af 8000 	nop.w
 80013b8:	76c8b439 	.word	0x76c8b439
 80013bc:	3fca9fbe 	.word	0x3fca9fbe
 80013c0:	7fc00000 	.word	0x7fc00000

080013c4 <_ZN23Adafruit_MAX17048_STM325sleepEb>:
  writeRegister8(MAX1704X_HIBRT_REG, 0x00);
  writeRegister8(MAX1704X_HIBRT_REG + 1, 0x00);
}

void Adafruit_MAX17048_STM32::sleep(bool s)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af02      	add	r7, sp, #8
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	70fb      	strb	r3, [r7, #3]
  writeBits(MAX1704X_CONFIG_REG, 7, 1, s ? 1 : 0);
 80013d0:	78fb      	ldrb	r3, [r7, #3]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <_ZN23Adafruit_MAX17048_STM325sleepEb+0x16>
 80013d6:	2301      	movs	r3, #1
 80013d8:	e000      	b.n	80013dc <_ZN23Adafruit_MAX17048_STM325sleepEb+0x18>
 80013da:	2300      	movs	r3, #0
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	2301      	movs	r3, #1
 80013e0:	2207      	movs	r2, #7
 80013e2:	210c      	movs	r1, #12
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff fed8 	bl	800119a <_ZN23Adafruit_MAX17048_STM329writeBitsEhhhh>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <_ZN23Adafruit_MAX17048_STM3211enableSleepEb>:

void Adafruit_MAX17048_STM32::enableSleep(bool en)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b084      	sub	sp, #16
 80013f6:	af02      	add	r7, sp, #8
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	460b      	mov	r3, r1
 80013fc:	70fb      	strb	r3, [r7, #3]
  writeBits(MAX1704X_MODE_REG, 5, 1, en ? 1 : 0);
 80013fe:	78fb      	ldrb	r3, [r7, #3]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <_ZN23Adafruit_MAX17048_STM3211enableSleepEb+0x16>
 8001404:	2301      	movs	r3, #1
 8001406:	e000      	b.n	800140a <_ZN23Adafruit_MAX17048_STM3211enableSleepEb+0x18>
 8001408:	2300      	movs	r3, #0
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	2301      	movs	r3, #1
 800140e:	2205      	movs	r2, #5
 8001410:	2106      	movs	r1, #6
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff fec1 	bl	800119a <_ZN23Adafruit_MAX17048_STM329writeBitsEhhhh>
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <_ZN23Adafruit_MAX17048_STM3210quickStartEv>:

void Adafruit_MAX17048_STM32::quickStart(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af02      	add	r7, sp, #8
 8001426:	6078      	str	r0, [r7, #4]
  writeBits(MAX1704X_MODE_REG, 6, 1, 1);
 8001428:	2301      	movs	r3, #1
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2301      	movs	r3, #1
 800142e:	2206      	movs	r2, #6
 8001430:	2106      	movs	r1, #6
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff feb1 	bl	800119a <_ZN23Adafruit_MAX17048_STM329writeBitsEhhhh>
  // Bit is automatically cleared by the chip
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	4a06      	ldr	r2, [pc, #24]	@ (8001464 <_ZN5PrintC1Ev+0x24>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4618      	mov	r0, r3
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	0801d6e0 	.word	0x0801d6e0

08001468 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overridden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	2300      	movs	r3, #0
 8001472:	4618      	mov	r0, r3
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <_ZN12Adafruit_GFX9setCursorEss>:
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	460b      	mov	r3, r1
 800149c:	807b      	strh	r3, [r7, #2]
 800149e:	4613      	mov	r3, r2
 80014a0:	803b      	strh	r3, [r7, #0]
    cursor_x = x;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	887a      	ldrh	r2, [r7, #2]
 80014a6:	821a      	strh	r2, [r3, #16]
    cursor_y = y;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	883a      	ldrh	r2, [r7, #0]
 80014ac:	825a      	strh	r2, [r3, #18]
  }
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <_ZN12Adafruit_GFX12setTextColorEt>:
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	460b      	mov	r3, r1
 80014c4:	807b      	strh	r3, [r7, #2]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	887a      	ldrh	r2, [r7, #2]
 80014ca:	82da      	strh	r2, [r3, #22]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	8ada      	ldrh	r2, [r3, #22]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	829a      	strh	r2, [r3, #20]
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <_ZNK12Adafruit_GFX5widthEv>:
  /*!
    @brief      Get width of the display, accounting for current rotation
    @returns    Width in pixels
  */
  /************************************************************************/
  int16_t width(void) const { return _width; };
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <_ZNK12Adafruit_GFX6heightEv>:
  /*!
    @brief      Get height of the display, accounting for current rotation
    @returns    Height in pixels
  */
  /************************************************************************/
  int16_t height(void) const { return _height; }
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001508:	4618      	mov	r0, r3
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <_ZNK12Adafruit_GFX11getRotationEv>:
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	7e9b      	ldrb	r3, [r3, #26]
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <_Z18pgm_read_glyph_ptrPK7GFXfonth>:
#define pgm_read_pointer(addr) ((void *)pgm_read_dword(addr))
#else
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	70fb      	strb	r3, [r7, #3]
#else
  // expression in __AVR__ section may generate "dereferencing type-punned
  // pointer will break strict-aliasing rules" warning In fact, on other
  // platforms (such as STM32) there is no need to do this pointer magic as
  // program memory may be read in a usual way So expression may be simplified
  return gfxFont->glyph + c;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	78fb      	ldrb	r3, [r7, #3]
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	4413      	add	r3, r2
#endif //__AVR__
}
 8001542:	4618      	mov	r0, r3
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <_Z19pgm_read_bitmap_ptrPK7GFXfont>:

inline uint8_t *pgm_read_bitmap_ptr(const GFXfont *gfxFont) {
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
#else
  // expression in __AVR__ section generates "dereferencing type-punned pointer
  // will break strict-aliasing rules" warning In fact, on other platforms (such
  // as STM32) there is no need to do this pointer magic as program memory may
  // be read in a usual way So expression may be simplified
  return gfxFont->bitmap;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
#endif //__AVR__
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <_ZN12Adafruit_GFXC1Ess>:
   superclass
   @param    w   Display width, in pixels
   @param    h   Display height, in pixels
*/
/**************************************************************************/
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	807b      	strh	r3, [r7, #2]
 8001574:	4613      	mov	r3, r2
 8001576:	803b      	strh	r3, [r7, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff ff60 	bl	8001440 <_ZN5PrintC1Ev>
 8001580:	4a1d      	ldr	r2, [pc, #116]	@ (80015f8 <_ZN12Adafruit_GFXC1Ess+0x90>)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	887a      	ldrh	r2, [r7, #2]
 800158a:	811a      	strh	r2, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	883a      	ldrh	r2, [r7, #0]
 8001590:	815a      	strh	r2, [r3, #10]
  _width = WIDTH;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	819a      	strh	r2, [r3, #12]
  _height = HEIGHT;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	81da      	strh	r2, [r3, #14]
  rotation = 0;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	769a      	strb	r2, [r3, #26]
  cursor_y = cursor_x = 0;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	821a      	strh	r2, [r3, #16]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	825a      	strh	r2, [r3, #18]
  textsize_x = textsize_y = 1;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	765a      	strb	r2, [r3, #25]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	7e5a      	ldrb	r2, [r3, #25]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	761a      	strb	r2, [r3, #24]
  textcolor = textbgcolor = 0xFFFF;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015d0:	82da      	strh	r2, [r3, #22]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	8ada      	ldrh	r2, [r3, #22]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	829a      	strh	r2, [r3, #20]
  wrap = true;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	76da      	strb	r2, [r3, #27]
  _cp437 = false;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	771a      	strb	r2, [r3, #28]
  gfxFont = NULL;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	621a      	str	r2, [r3, #32]
}
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	0801d688 	.word	0x0801d688

080015fc <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                             uint16_t color) {
 80015fc:	b590      	push	{r4, r7, lr}
 80015fe:	b08b      	sub	sp, #44	@ 0x2c
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	4608      	mov	r0, r1
 8001606:	4611      	mov	r1, r2
 8001608:	461a      	mov	r2, r3
 800160a:	4603      	mov	r3, r0
 800160c:	817b      	strh	r3, [r7, #10]
 800160e:	460b      	mov	r3, r1
 8001610:	813b      	strh	r3, [r7, #8]
 8001612:	4613      	mov	r3, r2
 8001614:	80fb      	strh	r3, [r7, #6]
#if defined(ESP8266)
  yield();
#endif
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8001616:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	@ 0x38
 800161a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001624:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001628:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800162c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001630:	1acb      	subs	r3, r1, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	bfb8      	it	lt
 8001636:	425b      	neglt	r3, r3
 8001638:	429a      	cmp	r2, r3
 800163a:	bfcc      	ite	gt
 800163c:	2301      	movgt	r3, #1
 800163e:	2300      	movle	r3, #0
 8001640:	b2db      	uxtb	r3, r3
 8001642:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (steep) {
 8001644:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00b      	beq.n	8001664 <_ZN12Adafruit_GFX9writeLineEsssst+0x68>
    _swap_int16_t(x0, y0);
 800164c:	897b      	ldrh	r3, [r7, #10]
 800164e:	843b      	strh	r3, [r7, #32]
 8001650:	893b      	ldrh	r3, [r7, #8]
 8001652:	817b      	strh	r3, [r7, #10]
 8001654:	8c3b      	ldrh	r3, [r7, #32]
 8001656:	813b      	strh	r3, [r7, #8]
    _swap_int16_t(x1, y1);
 8001658:	88fb      	ldrh	r3, [r7, #6]
 800165a:	83fb      	strh	r3, [r7, #30]
 800165c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800165e:	80fb      	strh	r3, [r7, #6]
 8001660:	8bfb      	ldrh	r3, [r7, #30]
 8001662:	873b      	strh	r3, [r7, #56]	@ 0x38
  }

  if (x0 > x1) {
 8001664:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001668:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800166c:	429a      	cmp	r2, r3
 800166e:	dd0b      	ble.n	8001688 <_ZN12Adafruit_GFX9writeLineEsssst+0x8c>
    _swap_int16_t(x0, x1);
 8001670:	897b      	ldrh	r3, [r7, #10]
 8001672:	83bb      	strh	r3, [r7, #28]
 8001674:	88fb      	ldrh	r3, [r7, #6]
 8001676:	817b      	strh	r3, [r7, #10]
 8001678:	8bbb      	ldrh	r3, [r7, #28]
 800167a:	80fb      	strh	r3, [r7, #6]
    _swap_int16_t(y0, y1);
 800167c:	893b      	ldrh	r3, [r7, #8]
 800167e:	837b      	strh	r3, [r7, #26]
 8001680:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001682:	813b      	strh	r3, [r7, #8]
 8001684:	8b7b      	ldrh	r3, [r7, #26]
 8001686:	873b      	strh	r3, [r7, #56]	@ 0x38
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8001688:	88fa      	ldrh	r2, [r7, #6]
 800168a:	897b      	ldrh	r3, [r7, #10]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	b29b      	uxth	r3, r3
 8001690:	833b      	strh	r3, [r7, #24]
  dy = abs(y1 - y0);
 8001692:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	@ 0x38
 8001696:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	bfb8      	it	lt
 80016a0:	425b      	neglt	r3, r3
 80016a2:	82fb      	strh	r3, [r7, #22]

  int16_t err = dx / 2;
 80016a4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80016a8:	0fda      	lsrs	r2, r3, #31
 80016aa:	4413      	add	r3, r2
 80016ac:	105b      	asrs	r3, r3, #1
 80016ae:	84fb      	strh	r3, [r7, #38]	@ 0x26
  int16_t ystep;

  if (y0 < y1) {
 80016b0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80016b4:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 80016b8:	429a      	cmp	r2, r3
 80016ba:	da02      	bge.n	80016c2 <_ZN12Adafruit_GFX9writeLineEsssst+0xc6>
    ystep = 1;
 80016bc:	2301      	movs	r3, #1
 80016be:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80016c0:	e037      	b.n	8001732 <_ZN12Adafruit_GFX9writeLineEsssst+0x136>
  } else {
    ystep = -1;
 80016c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016c6:	84bb      	strh	r3, [r7, #36]	@ 0x24
  }

  for (; x0 <= x1; x0++) {
 80016c8:	e033      	b.n	8001732 <_ZN12Adafruit_GFX9writeLineEsssst+0x136>
    if (steep) {
 80016ca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00b      	beq.n	80016ea <_ZN12Adafruit_GFX9writeLineEsssst+0xee>
      writePixel(y0, x0, color);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	3318      	adds	r3, #24
 80016d8:	681c      	ldr	r4, [r3, #0]
 80016da:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80016dc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80016e0:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 80016e4:	68f8      	ldr	r0, [r7, #12]
 80016e6:	47a0      	blx	r4
 80016e8:	e00a      	b.n	8001700 <_ZN12Adafruit_GFX9writeLineEsssst+0x104>
    } else {
      writePixel(x0, y0, color);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	3318      	adds	r3, #24
 80016f0:	681c      	ldr	r4, [r3, #0]
 80016f2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80016f4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80016f8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	47a0      	blx	r4
    }
    err -= dy;
 8001700:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001702:	8afb      	ldrh	r3, [r7, #22]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	b29b      	uxth	r3, r3
 8001708:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (err < 0) {
 800170a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800170e:	2b00      	cmp	r3, #0
 8001710:	da09      	bge.n	8001726 <_ZN12Adafruit_GFX9writeLineEsssst+0x12a>
      y0 += ystep;
 8001712:	893a      	ldrh	r2, [r7, #8]
 8001714:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001716:	4413      	add	r3, r2
 8001718:	b29b      	uxth	r3, r3
 800171a:	813b      	strh	r3, [r7, #8]
      err += dx;
 800171c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800171e:	8b3b      	ldrh	r3, [r7, #24]
 8001720:	4413      	add	r3, r2
 8001722:	b29b      	uxth	r3, r3
 8001724:	84fb      	strh	r3, [r7, #38]	@ 0x26
  for (; x0 <= x1; x0++) {
 8001726:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800172a:	b29b      	uxth	r3, r3
 800172c:	3301      	adds	r3, #1
 800172e:	b29b      	uxth	r3, r3
 8001730:	817b      	strh	r3, [r7, #10]
 8001732:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800173a:	429a      	cmp	r2, r3
 800173c:	ddc5      	ble.n	80016ca <_ZN12Adafruit_GFX9writeLineEsssst+0xce>
    }
  }
}
 800173e:	bf00      	nop
 8001740:	bf00      	nop
 8001742:	372c      	adds	r7, #44	@ 0x2c
 8001744:	46bd      	mov	sp, r7
 8001746:	bd90      	pop	{r4, r7, pc}

08001748 <_ZN12Adafruit_GFX10startWriteEv>:
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite() {}
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
 800175c:	b590      	push	{r4, r7, lr}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	4608      	mov	r0, r1
 8001766:	4611      	mov	r1, r2
 8001768:	461a      	mov	r2, r3
 800176a:	4603      	mov	r3, r0
 800176c:	817b      	strh	r3, [r7, #10]
 800176e:	460b      	mov	r3, r1
 8001770:	813b      	strh	r3, [r7, #8]
 8001772:	4613      	mov	r3, r2
 8001774:	80fb      	strh	r3, [r7, #6]
  drawPixel(x, y, color);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	3310      	adds	r3, #16
 800177c:	681c      	ldr	r4, [r3, #0]
 800177e:	88fb      	ldrh	r3, [r7, #6]
 8001780:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001784:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	47a0      	blx	r4
}
 800178c:	bf00      	nop
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	bd90      	pop	{r4, r7, pc}

08001794 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                  uint16_t color) {
 8001794:	b590      	push	{r4, r7, lr}
 8001796:	b087      	sub	sp, #28
 8001798:	af02      	add	r7, sp, #8
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	4608      	mov	r0, r1
 800179e:	4611      	mov	r1, r2
 80017a0:	461a      	mov	r2, r3
 80017a2:	4603      	mov	r3, r0
 80017a4:	817b      	strh	r3, [r7, #10]
 80017a6:	460b      	mov	r3, r1
 80017a8:	813b      	strh	r3, [r7, #8]
 80017aa:	4613      	mov	r3, r2
 80017ac:	80fb      	strh	r3, [r7, #6]
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
  drawFastVLine(x, y, h, color);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	3338      	adds	r3, #56	@ 0x38
 80017b4:	681c      	ldr	r4, [r3, #0]
 80017b6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80017ba:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80017be:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80017c2:	8c3b      	ldrh	r3, [r7, #32]
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	4603      	mov	r3, r0
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	47a0      	blx	r4
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd90      	pop	{r4, r7, pc}

080017d4 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                  uint16_t color) {
 80017d4:	b590      	push	{r4, r7, lr}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af02      	add	r7, sp, #8
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	4608      	mov	r0, r1
 80017de:	4611      	mov	r1, r2
 80017e0:	461a      	mov	r2, r3
 80017e2:	4603      	mov	r3, r0
 80017e4:	817b      	strh	r3, [r7, #10]
 80017e6:	460b      	mov	r3, r1
 80017e8:	813b      	strh	r3, [r7, #8]
 80017ea:	4613      	mov	r3, r2
 80017ec:	80fb      	strh	r3, [r7, #6]
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
  drawFastHLine(x, y, w, color);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	333c      	adds	r3, #60	@ 0x3c
 80017f4:	681c      	ldr	r4, [r3, #0]
 80017f6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80017fa:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80017fe:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001802:	8c3b      	ldrh	r3, [r7, #32]
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	4603      	mov	r3, r0
 8001808:	68f8      	ldr	r0, [r7, #12]
 800180a:	47a0      	blx	r4
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	bd90      	pop	{r4, r7, pc}

08001814 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 uint16_t color) {
 8001814:	b590      	push	{r4, r7, lr}
 8001816:	b087      	sub	sp, #28
 8001818:	af02      	add	r7, sp, #8
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	4608      	mov	r0, r1
 800181e:	4611      	mov	r1, r2
 8001820:	461a      	mov	r2, r3
 8001822:	4603      	mov	r3, r0
 8001824:	817b      	strh	r3, [r7, #10]
 8001826:	460b      	mov	r3, r1
 8001828:	813b      	strh	r3, [r7, #8]
 800182a:	4613      	mov	r3, r2
 800182c:	80fb      	strh	r3, [r7, #6]
  // Overwrite in subclasses if desired!
  fillRect(x, y, w, h, color);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	3340      	adds	r3, #64	@ 0x40
 8001834:	681c      	ldr	r4, [r3, #0]
 8001836:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800183a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800183e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001842:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001844:	9301      	str	r3, [sp, #4]
 8001846:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	4603      	mov	r3, r0
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	47a0      	blx	r4
}
 8001852:	bf00      	nop
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	bd90      	pop	{r4, r7, pc}

0800185a <_ZN12Adafruit_GFX8endWriteEv>:
/*!
   @brief    End a display-writing routine, overwrite in subclasses if
   startWrite is defined!
*/
/**************************************************************************/
void Adafruit_GFX::endWrite() {}
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                 uint16_t color) {
 800186e:	b5b0      	push	{r4, r5, r7, lr}
 8001870:	b086      	sub	sp, #24
 8001872:	af02      	add	r7, sp, #8
 8001874:	60f8      	str	r0, [r7, #12]
 8001876:	4608      	mov	r0, r1
 8001878:	4611      	mov	r1, r2
 800187a:	461a      	mov	r2, r3
 800187c:	4603      	mov	r3, r0
 800187e:	817b      	strh	r3, [r7, #10]
 8001880:	460b      	mov	r3, r1
 8001882:	813b      	strh	r3, [r7, #8]
 8001884:	4613      	mov	r3, r2
 8001886:	80fb      	strh	r3, [r7, #6]
  startWrite();
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	3314      	adds	r3, #20
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	4798      	blx	r3
  writeLine(x, y, x, y + h - 1, color);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	3328      	adds	r3, #40	@ 0x28
 800189a:	681c      	ldr	r4, [r3, #0]
 800189c:	893a      	ldrh	r2, [r7, #8]
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	4413      	add	r3, r2
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	3b01      	subs	r3, #1
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	b21b      	sxth	r3, r3
 80018aa:	f9b7 500a 	ldrsh.w	r5, [r7, #10]
 80018ae:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 80018b2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80018b6:	8c3a      	ldrh	r2, [r7, #32]
 80018b8:	9201      	str	r2, [sp, #4]
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	462b      	mov	r3, r5
 80018be:	4602      	mov	r2, r0
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	47a0      	blx	r4
  endWrite();
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	332c      	adds	r3, #44	@ 0x2c
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	4798      	blx	r3
}
 80018d0:	bf00      	nop
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bdb0      	pop	{r4, r5, r7, pc}

080018d8 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                 uint16_t color) {
 80018d8:	b590      	push	{r4, r7, lr}
 80018da:	b087      	sub	sp, #28
 80018dc:	af02      	add	r7, sp, #8
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	4608      	mov	r0, r1
 80018e2:	4611      	mov	r1, r2
 80018e4:	461a      	mov	r2, r3
 80018e6:	4603      	mov	r3, r0
 80018e8:	817b      	strh	r3, [r7, #10]
 80018ea:	460b      	mov	r3, r1
 80018ec:	813b      	strh	r3, [r7, #8]
 80018ee:	4613      	mov	r3, r2
 80018f0:	80fb      	strh	r3, [r7, #6]
  startWrite();
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	3314      	adds	r3, #20
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68f8      	ldr	r0, [r7, #12]
 80018fc:	4798      	blx	r3
  writeLine(x, y, x + w - 1, y, color);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	3328      	adds	r3, #40	@ 0x28
 8001904:	681c      	ldr	r4, [r3, #0]
 8001906:	897a      	ldrh	r2, [r7, #10]
 8001908:	88fb      	ldrh	r3, [r7, #6]
 800190a:	4413      	add	r3, r2
 800190c:	b29b      	uxth	r3, r3
 800190e:	3b01      	subs	r3, #1
 8001910:	b29b      	uxth	r3, r3
 8001912:	b218      	sxth	r0, r3
 8001914:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001918:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800191c:	8c3b      	ldrh	r3, [r7, #32]
 800191e:	9301      	str	r3, [sp, #4]
 8001920:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	4603      	mov	r3, r0
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	47a0      	blx	r4
  endWrite();
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	332c      	adds	r3, #44	@ 0x2c
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	4798      	blx	r3
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	bd90      	pop	{r4, r7, pc}

08001940 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
 8001940:	b590      	push	{r4, r7, lr}
 8001942:	b089      	sub	sp, #36	@ 0x24
 8001944:	af02      	add	r7, sp, #8
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	4608      	mov	r0, r1
 800194a:	4611      	mov	r1, r2
 800194c:	461a      	mov	r2, r3
 800194e:	4603      	mov	r3, r0
 8001950:	817b      	strh	r3, [r7, #10]
 8001952:	460b      	mov	r3, r1
 8001954:	813b      	strh	r3, [r7, #8]
 8001956:	4613      	mov	r3, r2
 8001958:	80fb      	strh	r3, [r7, #6]
  startWrite();
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	3314      	adds	r3, #20
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	4798      	blx	r3
  for (int16_t i = x; i < x + w; i++) {
 8001966:	897b      	ldrh	r3, [r7, #10]
 8001968:	82fb      	strh	r3, [r7, #22]
 800196a:	e014      	b.n	8001996 <_ZN12Adafruit_GFX8fillRectEsssst+0x56>
    writeFastVLine(i, y, h, color);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	3320      	adds	r3, #32
 8001972:	681c      	ldr	r4, [r3, #0]
 8001974:	f9b7 0028 	ldrsh.w	r0, [r7, #40]	@ 0x28
 8001978:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800197c:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8001980:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	4603      	mov	r3, r0
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	47a0      	blx	r4
  for (int16_t i = x; i < x + w; i++) {
 800198a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800198e:	b29b      	uxth	r3, r3
 8001990:	3301      	adds	r3, #1
 8001992:	b29b      	uxth	r3, r3
 8001994:	82fb      	strh	r3, [r7, #22]
 8001996:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800199a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800199e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019a2:	440b      	add	r3, r1
 80019a4:	429a      	cmp	r2, r3
 80019a6:	dbe1      	blt.n	800196c <_ZN12Adafruit_GFX8fillRectEsssst+0x2c>
  }
  endWrite();
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	332c      	adds	r3, #44	@ 0x2c
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	4798      	blx	r3
}
 80019b4:	bf00      	nop
 80019b6:	371c      	adds	r7, #28
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd90      	pop	{r4, r7, pc}

080019bc <_ZN12Adafruit_GFX10fillScreenEt>:
   @brief    Fill the screen completely with one color. Update in subclasses if
   desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
 80019bc:	b590      	push	{r4, r7, lr}
 80019be:	b085      	sub	sp, #20
 80019c0:	af02      	add	r7, sp, #8
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	807b      	strh	r3, [r7, #2]
  fillRect(0, 0, _width, _height, color);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	3340      	adds	r3, #64	@ 0x40
 80019ce:	681c      	ldr	r4, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80019dc:	887a      	ldrh	r2, [r7, #2]
 80019de:	9201      	str	r2, [sp, #4]
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	460b      	mov	r3, r1
 80019e4:	2200      	movs	r2, #0
 80019e6:	2100      	movs	r1, #0
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	47a0      	blx	r4
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd90      	pop	{r4, r7, pc}

080019f4 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                            uint16_t color) {
 80019f4:	b590      	push	{r4, r7, lr}
 80019f6:	b089      	sub	sp, #36	@ 0x24
 80019f8:	af02      	add	r7, sp, #8
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	4608      	mov	r0, r1
 80019fe:	4611      	mov	r1, r2
 8001a00:	461a      	mov	r2, r3
 8001a02:	4603      	mov	r3, r0
 8001a04:	817b      	strh	r3, [r7, #10]
 8001a06:	460b      	mov	r3, r1
 8001a08:	813b      	strh	r3, [r7, #8]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	80fb      	strh	r3, [r7, #6]
  // Update in subclasses if desired!
  if (x0 == x1) {
 8001a0e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001a12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d120      	bne.n	8001a5c <_ZN12Adafruit_GFX8drawLineEsssst+0x68>
    if (y0 > y1)
 8001a1a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001a1e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001a22:	429a      	cmp	r2, r3
 8001a24:	dd05      	ble.n	8001a32 <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
      _swap_int16_t(y0, y1);
 8001a26:	893b      	ldrh	r3, [r7, #8]
 8001a28:	82bb      	strh	r3, [r7, #20]
 8001a2a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001a2c:	813b      	strh	r3, [r7, #8]
 8001a2e:	8abb      	ldrh	r3, [r7, #20]
 8001a30:	853b      	strh	r3, [r7, #40]	@ 0x28
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	3338      	adds	r3, #56	@ 0x38
 8001a38:	681c      	ldr	r4, [r3, #0]
 8001a3a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001a3c:	893b      	ldrh	r3, [r7, #8]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	3301      	adds	r3, #1
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	b218      	sxth	r0, r3
 8001a48:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001a4c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001a50:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	4603      	mov	r3, r0
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	47a0      	blx	r4
  } else {
    startWrite();
    writeLine(x0, y0, x1, y1, color);
    endWrite();
  }
}
 8001a5a:	e044      	b.n	8001ae6 <_ZN12Adafruit_GFX8drawLineEsssst+0xf2>
  } else if (y0 == y1) {
 8001a5c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001a60:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d120      	bne.n	8001aaa <_ZN12Adafruit_GFX8drawLineEsssst+0xb6>
    if (x0 > x1)
 8001a68:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001a6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	dd05      	ble.n	8001a80 <_ZN12Adafruit_GFX8drawLineEsssst+0x8c>
      _swap_int16_t(x0, x1);
 8001a74:	897b      	ldrh	r3, [r7, #10]
 8001a76:	82fb      	strh	r3, [r7, #22]
 8001a78:	88fb      	ldrh	r3, [r7, #6]
 8001a7a:	817b      	strh	r3, [r7, #10]
 8001a7c:	8afb      	ldrh	r3, [r7, #22]
 8001a7e:	80fb      	strh	r3, [r7, #6]
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	333c      	adds	r3, #60	@ 0x3c
 8001a86:	681c      	ldr	r4, [r3, #0]
 8001a88:	88fa      	ldrh	r2, [r7, #6]
 8001a8a:	897b      	ldrh	r3, [r7, #10]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	b218      	sxth	r0, r3
 8001a96:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001a9a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001a9e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	47a0      	blx	r4
}
 8001aa8:	e01d      	b.n	8001ae6 <_ZN12Adafruit_GFX8drawLineEsssst+0xf2>
    startWrite();
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	3314      	adds	r3, #20
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	4798      	blx	r3
    writeLine(x0, y0, x1, y1, color);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	3328      	adds	r3, #40	@ 0x28
 8001abc:	681c      	ldr	r4, [r3, #0]
 8001abe:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001ac2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001ac6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001aca:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001acc:	9301      	str	r3, [sp, #4]
 8001ace:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	47a0      	blx	r4
    endWrite();
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	332c      	adds	r3, #44	@ 0x2c
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68f8      	ldr	r0, [r7, #12]
 8001ae4:	4798      	blx	r3
}
 8001ae6:	bf00      	nop
 8001ae8:	371c      	adds	r7, #28
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd90      	pop	{r4, r7, pc}

08001aee <_ZN12Adafruit_GFX10fillCircleEssst>:
    @param    r   Radius of circle
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillCircle(int16_t x0, int16_t y0, int16_t r,
                              uint16_t color) {
 8001aee:	b590      	push	{r4, r7, lr}
 8001af0:	b089      	sub	sp, #36	@ 0x24
 8001af2:	af04      	add	r7, sp, #16
 8001af4:	60f8      	str	r0, [r7, #12]
 8001af6:	4608      	mov	r0, r1
 8001af8:	4611      	mov	r1, r2
 8001afa:	461a      	mov	r2, r3
 8001afc:	4603      	mov	r3, r0
 8001afe:	817b      	strh	r3, [r7, #10]
 8001b00:	460b      	mov	r3, r1
 8001b02:	813b      	strh	r3, [r7, #8]
 8001b04:	4613      	mov	r3, r2
 8001b06:	80fb      	strh	r3, [r7, #6]
  startWrite();
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	3314      	adds	r3, #20
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	4798      	blx	r3
  writeFastVLine(x0, y0 - r, 2 * r + 1, color);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	3320      	adds	r3, #32
 8001b1a:	681c      	ldr	r4, [r3, #0]
 8001b1c:	893a      	ldrh	r2, [r7, #8]
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	b21a      	sxth	r2, r3
 8001b26:	88fb      	ldrh	r3, [r7, #6]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	b218      	sxth	r0, r3
 8001b32:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001b36:	8c3b      	ldrh	r3, [r7, #32]
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	47a0      	blx	r4
  fillCircleHelper(x0, y0, r, 3, 0, color);
 8001b40:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001b44:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001b48:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001b4c:	8c3b      	ldrh	r3, [r7, #32]
 8001b4e:	9302      	str	r3, [sp, #8]
 8001b50:	2300      	movs	r3, #0
 8001b52:	9301      	str	r3, [sp, #4]
 8001b54:	2303      	movs	r3, #3
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	4603      	mov	r3, r0
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 f80a 	bl	8001b74 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
  endWrite();
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	332c      	adds	r3, #44	@ 0x2c
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	4798      	blx	r3
}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd90      	pop	{r4, r7, pc}

08001b74 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>:
    @param  color    16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillCircleHelper(int16_t x0, int16_t y0, int16_t r,
                                    uint8_t corners, int16_t delta,
                                    uint16_t color) {
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	b08b      	sub	sp, #44	@ 0x2c
 8001b78:	af02      	add	r7, sp, #8
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	4608      	mov	r0, r1
 8001b7e:	4611      	mov	r1, r2
 8001b80:	461a      	mov	r2, r3
 8001b82:	4603      	mov	r3, r0
 8001b84:	817b      	strh	r3, [r7, #10]
 8001b86:	460b      	mov	r3, r1
 8001b88:	813b      	strh	r3, [r7, #8]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	80fb      	strh	r3, [r7, #6]

  int16_t f = 1 - r;
 8001b8e:	88fb      	ldrh	r3, [r7, #6]
 8001b90:	f1c3 0301 	rsb	r3, r3, #1
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	83fb      	strh	r3, [r7, #30]
  int16_t ddF_x = 1;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	83bb      	strh	r3, [r7, #28]
  int16_t ddF_y = -2 * r;
 8001b9c:	88fb      	ldrh	r3, [r7, #6]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	03d2      	lsls	r2, r2, #15
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	837b      	strh	r3, [r7, #26]
  int16_t x = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	833b      	strh	r3, [r7, #24]
  int16_t y = r;
 8001bae:	88fb      	ldrh	r3, [r7, #6]
 8001bb0:	82fb      	strh	r3, [r7, #22]
  int16_t px = x;
 8001bb2:	8b3b      	ldrh	r3, [r7, #24]
 8001bb4:	82bb      	strh	r3, [r7, #20]
  int16_t py = y;
 8001bb6:	8afb      	ldrh	r3, [r7, #22]
 8001bb8:	827b      	strh	r3, [r7, #18]

  delta++; // Avoid some +1's in the loop
 8001bba:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	86bb      	strh	r3, [r7, #52]	@ 0x34

  while (x < y) {
 8001bc6:	e0b5      	b.n	8001d34 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x1c0>
    if (f >= 0) {
 8001bc8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	db0e      	blt.n	8001bee <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x7a>
      y--;
 8001bd0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	82fb      	strh	r3, [r7, #22]
      ddF_y += 2;
 8001bdc:	8b7b      	ldrh	r3, [r7, #26]
 8001bde:	3302      	adds	r3, #2
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	837b      	strh	r3, [r7, #26]
      f += ddF_y;
 8001be4:	8bfa      	ldrh	r2, [r7, #30]
 8001be6:	8b7b      	ldrh	r3, [r7, #26]
 8001be8:	4413      	add	r3, r2
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	83fb      	strh	r3, [r7, #30]
    }
    x++;
 8001bee:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	833b      	strh	r3, [r7, #24]
    ddF_x += 2;
 8001bfa:	8bbb      	ldrh	r3, [r7, #28]
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	83bb      	strh	r3, [r7, #28]
    f += ddF_x;
 8001c02:	8bfa      	ldrh	r2, [r7, #30]
 8001c04:	8bbb      	ldrh	r3, [r7, #28]
 8001c06:	4413      	add	r3, r2
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	83fb      	strh	r3, [r7, #30]
    // These checks avoid double-drawing certain lines, important
    // for the SSD1306 library which has an INVERT drawing mode.
    if (x < (y + 1)) {
 8001c0c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001c10:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	db41      	blt.n	8001c9c <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x128>
      if (corners & 1)
 8001c18:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d01a      	beq.n	8001c5a <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xe6>
        writeFastVLine(x0 + x, y0 - y, 2 * y + delta, color);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	3320      	adds	r3, #32
 8001c2a:	681c      	ldr	r4, [r3, #0]
 8001c2c:	897a      	ldrh	r2, [r7, #10]
 8001c2e:	8b3b      	ldrh	r3, [r7, #24]
 8001c30:	4413      	add	r3, r2
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	b219      	sxth	r1, r3
 8001c36:	893a      	ldrh	r2, [r7, #8]
 8001c38:	8afb      	ldrh	r3, [r7, #22]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	b218      	sxth	r0, r3
 8001c40:	8afb      	ldrh	r3, [r7, #22]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001c48:	4413      	add	r3, r2
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	b21a      	sxth	r2, r3
 8001c4e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	4613      	mov	r3, r2
 8001c54:	4602      	mov	r2, r0
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	47a0      	blx	r4
      if (corners & 2)
 8001c5a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d01a      	beq.n	8001c9c <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x128>
        writeFastVLine(x0 - x, y0 - y, 2 * y + delta, color);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	3320      	adds	r3, #32
 8001c6c:	681c      	ldr	r4, [r3, #0]
 8001c6e:	897a      	ldrh	r2, [r7, #10]
 8001c70:	8b3b      	ldrh	r3, [r7, #24]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	b219      	sxth	r1, r3
 8001c78:	893a      	ldrh	r2, [r7, #8]
 8001c7a:	8afb      	ldrh	r3, [r7, #22]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	b218      	sxth	r0, r3
 8001c82:	8afb      	ldrh	r3, [r7, #22]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001c8a:	4413      	add	r3, r2
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	b21a      	sxth	r2, r3
 8001c90:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	4613      	mov	r3, r2
 8001c96:	4602      	mov	r2, r0
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	47a0      	blx	r4
    }
    if (y != py) {
 8001c9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001ca0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d043      	beq.n	8001d30 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x1bc>
      if (corners & 1)
 8001ca8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d01a      	beq.n	8001cea <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x176>
        writeFastVLine(x0 + py, y0 - px, 2 * px + delta, color);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	3320      	adds	r3, #32
 8001cba:	681c      	ldr	r4, [r3, #0]
 8001cbc:	897a      	ldrh	r2, [r7, #10]
 8001cbe:	8a7b      	ldrh	r3, [r7, #18]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	b219      	sxth	r1, r3
 8001cc6:	893a      	ldrh	r2, [r7, #8]
 8001cc8:	8abb      	ldrh	r3, [r7, #20]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	b218      	sxth	r0, r3
 8001cd0:	8abb      	ldrh	r3, [r7, #20]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001cd8:	4413      	add	r3, r2
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	b21a      	sxth	r2, r3
 8001cde:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	47a0      	blx	r4
      if (corners & 2)
 8001cea:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d01a      	beq.n	8001d2c <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x1b8>
        writeFastVLine(x0 - py, y0 - px, 2 * px + delta, color);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	3320      	adds	r3, #32
 8001cfc:	681c      	ldr	r4, [r3, #0]
 8001cfe:	897a      	ldrh	r2, [r7, #10]
 8001d00:	8a7b      	ldrh	r3, [r7, #18]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	b219      	sxth	r1, r3
 8001d08:	893a      	ldrh	r2, [r7, #8]
 8001d0a:	8abb      	ldrh	r3, [r7, #20]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	b218      	sxth	r0, r3
 8001d12:	8abb      	ldrh	r3, [r7, #20]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001d1a:	4413      	add	r3, r2
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	b21a      	sxth	r2, r3
 8001d20:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	4613      	mov	r3, r2
 8001d26:	4602      	mov	r2, r0
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	47a0      	blx	r4
      py = y;
 8001d2c:	8afb      	ldrh	r3, [r7, #22]
 8001d2e:	827b      	strh	r3, [r7, #18]
    }
    px = x;
 8001d30:	8b3b      	ldrh	r3, [r7, #24]
 8001d32:	82bb      	strh	r3, [r7, #20]
  while (x < y) {
 8001d34:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001d38:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	f6ff af43 	blt.w	8001bc8 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x54>
  }
}
 8001d42:	bf00      	nop
 8001d44:	bf00      	nop
 8001d46:	3724      	adds	r7, #36	@ 0x24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd90      	pop	{r4, r7, pc}

08001d4c <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
 8001d4c:	b590      	push	{r4, r7, lr}
 8001d4e:	b087      	sub	sp, #28
 8001d50:	af02      	add	r7, sp, #8
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	4608      	mov	r0, r1
 8001d56:	4611      	mov	r1, r2
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	817b      	strh	r3, [r7, #10]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	813b      	strh	r3, [r7, #8]
 8001d62:	4613      	mov	r3, r2
 8001d64:	80fb      	strh	r3, [r7, #6]
  startWrite();
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	3314      	adds	r3, #20
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	4798      	blx	r3
  writeFastHLine(x, y, w, color);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	3324      	adds	r3, #36	@ 0x24
 8001d78:	681c      	ldr	r4, [r3, #0]
 8001d7a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001d7e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001d82:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001d86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	47a0      	blx	r4
  writeFastHLine(x, y + h - 1, w, color);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	3324      	adds	r3, #36	@ 0x24
 8001d96:	681c      	ldr	r4, [r3, #0]
 8001d98:	893a      	ldrh	r2, [r7, #8]
 8001d9a:	8c3b      	ldrh	r3, [r7, #32]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	3b01      	subs	r3, #1
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	b21a      	sxth	r2, r3
 8001da6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001daa:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001dae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	4603      	mov	r3, r0
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	47a0      	blx	r4
  writeFastVLine(x, y, h, color);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	3320      	adds	r3, #32
 8001dbe:	681c      	ldr	r4, [r3, #0]
 8001dc0:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8001dc4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001dc8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001dcc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	47a0      	blx	r4
  writeFastVLine(x + w - 1, y, h, color);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	3320      	adds	r3, #32
 8001ddc:	681c      	ldr	r4, [r3, #0]
 8001dde:	897a      	ldrh	r2, [r7, #10]
 8001de0:	88fb      	ldrh	r3, [r7, #6]
 8001de2:	4413      	add	r3, r2
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	3b01      	subs	r3, #1
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	b219      	sxth	r1, r3
 8001dec:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8001df0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001df4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	4603      	mov	r3, r0
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	47a0      	blx	r4
  endWrite();
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	332c      	adds	r3, #44	@ 0x2c
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	4798      	blx	r3
}
 8001e0a:	bf00      	nop
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd90      	pop	{r4, r7, pc}

08001e12 <_ZN12Adafruit_GFX13fillRoundRectEssssst>:
    @param    r   Radius of corner rounding
    @param    color 16-bit 5-6-5 Color to draw/fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 int16_t r, uint16_t color) {
 8001e12:	b590      	push	{r4, r7, lr}
 8001e14:	b08b      	sub	sp, #44	@ 0x2c
 8001e16:	af04      	add	r7, sp, #16
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	4608      	mov	r0, r1
 8001e1c:	4611      	mov	r1, r2
 8001e1e:	461a      	mov	r2, r3
 8001e20:	4603      	mov	r3, r0
 8001e22:	817b      	strh	r3, [r7, #10]
 8001e24:	460b      	mov	r3, r1
 8001e26:	813b      	strh	r3, [r7, #8]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	80fb      	strh	r3, [r7, #6]
  int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8001e2c:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 8001e30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e34:	4293      	cmp	r3, r2
 8001e36:	bfa8      	it	ge
 8001e38:	4613      	movge	r3, r2
 8001e3a:	b21b      	sxth	r3, r3
 8001e3c:	0fda      	lsrs	r2, r3, #31
 8001e3e:	4413      	add	r3, r2
 8001e40:	105b      	asrs	r3, r3, #1
 8001e42:	82fb      	strh	r3, [r7, #22]
  if (r > max_radius)
 8001e44:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 8001e48:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	dd01      	ble.n	8001e54 <_ZN12Adafruit_GFX13fillRoundRectEssssst+0x42>
    r = max_radius;
 8001e50:	8afb      	ldrh	r3, [r7, #22]
 8001e52:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  // smarter version
  startWrite();
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	3314      	adds	r3, #20
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	4798      	blx	r3
  writeFillRect(x + r, y, w - 2 * r, h, color);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	331c      	adds	r3, #28
 8001e66:	681c      	ldr	r4, [r3, #0]
 8001e68:	897a      	ldrh	r2, [r7, #10]
 8001e6a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001e6c:	4413      	add	r3, r2
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	b219      	sxth	r1, r3
 8001e72:	88fa      	ldrh	r2, [r7, #6]
 8001e74:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	b218      	sxth	r0, r3
 8001e80:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001e84:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001e86:	9301      	str	r3, [sp, #4]
 8001e88:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	4603      	mov	r3, r0
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	47a0      	blx	r4
  // draw four corners
  fillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
 8001e94:	897a      	ldrh	r2, [r7, #10]
 8001e96:	88fb      	ldrh	r3, [r7, #6]
 8001e98:	4413      	add	r3, r2
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	b219      	sxth	r1, r3
 8001ea8:	893a      	ldrh	r2, [r7, #8]
 8001eaa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001eac:	4413      	add	r3, r2
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	b218      	sxth	r0, r3
 8001eb2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001eb4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	b21b      	sxth	r3, r3
 8001ec4:	f9b7 402c 	ldrsh.w	r4, [r7, #44]	@ 0x2c
 8001ec8:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001eca:	9202      	str	r2, [sp, #8]
 8001ecc:	9301      	str	r3, [sp, #4]
 8001ece:	2301      	movs	r3, #1
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	4623      	mov	r3, r4
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f7ff fe4c 	bl	8001b74 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
  fillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
 8001edc:	897a      	ldrh	r2, [r7, #10]
 8001ede:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001ee0:	4413      	add	r3, r2
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	b219      	sxth	r1, r3
 8001ee6:	893a      	ldrh	r2, [r7, #8]
 8001ee8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001eea:	4413      	add	r3, r2
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	b218      	sxth	r0, r3
 8001ef0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001ef2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	3b01      	subs	r3, #1
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	b21b      	sxth	r3, r3
 8001f02:	f9b7 402c 	ldrsh.w	r4, [r7, #44]	@ 0x2c
 8001f06:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001f08:	9202      	str	r2, [sp, #8]
 8001f0a:	9301      	str	r3, [sp, #4]
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	4623      	mov	r3, r4
 8001f12:	4602      	mov	r2, r0
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f7ff fe2d 	bl	8001b74 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
  endWrite();
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	332c      	adds	r3, #44	@ 0x2c
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	4798      	blx	r3
}
 8001f26:	bf00      	nop
 8001f28:	371c      	adds	r7, #28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd90      	pop	{r4, r7, pc}

08001f2e <_ZN12Adafruit_GFX8drawCharEsshtth>:
   no background)
    @param    size  Font magnification level, 1 is 'original' size
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
                            uint16_t color, uint16_t bg, uint8_t size) {
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b088      	sub	sp, #32
 8001f32:	af04      	add	r7, sp, #16
 8001f34:	60f8      	str	r0, [r7, #12]
 8001f36:	4608      	mov	r0, r1
 8001f38:	4611      	mov	r1, r2
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	817b      	strh	r3, [r7, #10]
 8001f40:	460b      	mov	r3, r1
 8001f42:	813b      	strh	r3, [r7, #8]
 8001f44:	4613      	mov	r3, r2
 8001f46:	71fb      	strb	r3, [r7, #7]
  drawChar(x, y, c, color, bg, size, size);
 8001f48:	79f8      	ldrb	r0, [r7, #7]
 8001f4a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001f4e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001f52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f56:	9303      	str	r3, [sp, #12]
 8001f58:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f5c:	9302      	str	r3, [sp, #8]
 8001f5e:	8bbb      	ldrh	r3, [r7, #28]
 8001f60:	9301      	str	r3, [sp, #4]
 8001f62:	8b3b      	ldrh	r3, [r7, #24]
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	4603      	mov	r3, r0
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f000 f805 	bl	8001f78 <_ZN12Adafruit_GFX8drawCharEsshtthh>
}
 8001f6e:	bf00      	nop
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
                            uint16_t color, uint16_t bg, uint8_t size_x,
                            uint8_t size_y) {
 8001f78:	b5b0      	push	{r4, r5, r7, lr}
 8001f7a:	b08e      	sub	sp, #56	@ 0x38
 8001f7c:	af02      	add	r7, sp, #8
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	4608      	mov	r0, r1
 8001f82:	4611      	mov	r1, r2
 8001f84:	461a      	mov	r2, r3
 8001f86:	4603      	mov	r3, r0
 8001f88:	817b      	strh	r3, [r7, #10]
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	813b      	strh	r3, [r7, #8]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	71fb      	strb	r3, [r7, #7]

  if (!gfxFont) { // 'Classic' built-in font
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f040 8153 	bne.w	8002242 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ca>

    if ((x >= _width) ||              // Clip right
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001fa2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	f280 8234 	bge.w	8002414 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x49c>
        (y >= _height) ||             // Clip bottom
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
    if ((x >= _width) ||              // Clip right
 8001fb2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	f280 822c 	bge.w	8002414 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x49c>
        ((x + 6 * size_x - 1) < 0) || // Clip left
 8001fbc:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001fc0:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4413      	add	r3, r2
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	440b      	add	r3, r1
        (y >= _height) ||             // Clip bottom
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f340 8220 	ble.w	8002414 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x49c>
        ((y + 8 * size_y - 1) < 0))   // Clip top
 8001fd4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001fd8:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	4413      	add	r3, r2
        ((x + 6 * size_x - 1) < 0) || // Clip left
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f340 8217 	ble.w	8002414 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x49c>
      return;

    if (!_cp437 && (c >= 176))
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	7f1b      	ldrb	r3, [r3, #28]
 8001fea:	f083 0301 	eor.w	r3, r3, #1
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d005      	beq.n	8002000 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x88>
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	2baf      	cmp	r3, #175	@ 0xaf
 8001ff8:	d902      	bls.n	8002000 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x88>
      c++; // Handle 'classic' charset behavior
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	71fb      	strb	r3, [r7, #7]

    startWrite();
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	3314      	adds	r3, #20
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	4798      	blx	r3
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 800200c:	2300      	movs	r3, #0
 800200e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002012:	e0c9      	b.n	80021a8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x230>
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 8002014:	79fa      	ldrb	r2, [r7, #7]
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	441a      	add	r2, r3
 800201c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8002020:	4413      	add	r3, r2
 8002022:	4aad      	ldr	r2, [pc, #692]	@ (80022d8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x360>)
 8002024:	5cd3      	ldrb	r3, [r2, r3]
 8002026:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 800202a:	2300      	movs	r3, #0
 800202c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8002030:	e0ae      	b.n	8002190 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x218>
        if (line & 1) {
 8002032:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d04b      	beq.n	80020d6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x15e>
          if (size_x == 1 && size_y == 1)
 800203e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002042:	2b01      	cmp	r3, #1
 8002044:	d11a      	bne.n	800207c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x104>
 8002046:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800204a:	2b01      	cmp	r3, #1
 800204c:	d116      	bne.n	800207c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x104>
            writePixel(x + i, y + j, color);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	3318      	adds	r3, #24
 8002054:	681c      	ldr	r4, [r3, #0]
 8002056:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800205a:	b29a      	uxth	r2, r3
 800205c:	897b      	ldrh	r3, [r7, #10]
 800205e:	4413      	add	r3, r2
 8002060:	b29b      	uxth	r3, r3
 8002062:	b219      	sxth	r1, r3
 8002064:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8002068:	b29a      	uxth	r2, r3
 800206a:	893b      	ldrh	r3, [r7, #8]
 800206c:	4413      	add	r3, r2
 800206e:	b29b      	uxth	r3, r3
 8002070:	b21a      	sxth	r2, r3
 8002072:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	47a0      	blx	r4
 800207a:	e07d      	b.n	8002178 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x200>
          else
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	331c      	adds	r3, #28
 8002082:	681c      	ldr	r4, [r3, #0]
 8002084:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8002088:	b29a      	uxth	r2, r3
 800208a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800208e:	b29b      	uxth	r3, r3
 8002090:	fb12 f303 	smulbb	r3, r2, r3
 8002094:	b29a      	uxth	r2, r3
 8002096:	897b      	ldrh	r3, [r7, #10]
 8002098:	4413      	add	r3, r2
 800209a:	b29b      	uxth	r3, r3
 800209c:	b219      	sxth	r1, r3
 800209e:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	fb12 f303 	smulbb	r3, r2, r3
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	893b      	ldrh	r3, [r7, #8]
 80020b2:	4413      	add	r3, r2
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	b218      	sxth	r0, r3
 80020b8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80020bc:	b21d      	sxth	r5, r3
 80020be:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80020c2:	b21b      	sxth	r3, r3
 80020c4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80020c8:	9201      	str	r2, [sp, #4]
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	462b      	mov	r3, r5
 80020ce:	4602      	mov	r2, r0
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	47a0      	blx	r4
 80020d4:	e050      	b.n	8002178 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x200>
                          color);
        } else if (bg != color) {
 80020d6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80020da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80020de:	429a      	cmp	r2, r3
 80020e0:	d04a      	beq.n	8002178 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x200>
          if (size_x == 1 && size_y == 1)
 80020e2:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d11a      	bne.n	8002120 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1a8>
 80020ea:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d116      	bne.n	8002120 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1a8>
            writePixel(x + i, y + j, bg);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	3318      	adds	r3, #24
 80020f8:	681c      	ldr	r4, [r3, #0]
 80020fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80020fe:	b29a      	uxth	r2, r3
 8002100:	897b      	ldrh	r3, [r7, #10]
 8002102:	4413      	add	r3, r2
 8002104:	b29b      	uxth	r3, r3
 8002106:	b219      	sxth	r1, r3
 8002108:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 800210c:	b29a      	uxth	r2, r3
 800210e:	893b      	ldrh	r3, [r7, #8]
 8002110:	4413      	add	r3, r2
 8002112:	b29b      	uxth	r3, r3
 8002114:	b21a      	sxth	r2, r3
 8002116:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	47a0      	blx	r4
 800211e:	e02b      	b.n	8002178 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x200>
          else
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	331c      	adds	r3, #28
 8002126:	681c      	ldr	r4, [r3, #0]
 8002128:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800212c:	b29a      	uxth	r2, r3
 800212e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002132:	b29b      	uxth	r3, r3
 8002134:	fb12 f303 	smulbb	r3, r2, r3
 8002138:	b29a      	uxth	r2, r3
 800213a:	897b      	ldrh	r3, [r7, #10]
 800213c:	4413      	add	r3, r2
 800213e:	b29b      	uxth	r3, r3
 8002140:	b219      	sxth	r1, r3
 8002142:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8002146:	b29a      	uxth	r2, r3
 8002148:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800214c:	b29b      	uxth	r3, r3
 800214e:	fb12 f303 	smulbb	r3, r2, r3
 8002152:	b29a      	uxth	r2, r3
 8002154:	893b      	ldrh	r3, [r7, #8]
 8002156:	4413      	add	r3, r2
 8002158:	b29b      	uxth	r3, r3
 800215a:	b218      	sxth	r0, r3
 800215c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002160:	b21d      	sxth	r5, r3
 8002162:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002166:	b21b      	sxth	r3, r3
 8002168:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800216c:	9201      	str	r2, [sp, #4]
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	462b      	mov	r3, r5
 8002172:	4602      	mov	r2, r0
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	47a0      	blx	r4
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8002178:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 800217c:	b2db      	uxtb	r3, r3
 800217e:	3301      	adds	r3, #1
 8002180:	b2db      	uxtb	r3, r3
 8002182:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8002186:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800218a:	085b      	lsrs	r3, r3, #1
 800218c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8002190:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8002194:	2b07      	cmp	r3, #7
 8002196:	f77f af4c 	ble.w	8002032 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xba>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 800219a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	3301      	adds	r3, #1
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80021a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	f77f af31 	ble.w	8002014 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x9c>
        }
      }
    }
    if (bg != color) { // If opaque, draw vertical line for last column
 80021b2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80021b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d03a      	beq.n	8002234 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2bc>
      if (size_x == 1 && size_y == 1)
 80021be:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d114      	bne.n	80021f0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x278>
 80021c6:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d110      	bne.n	80021f0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x278>
        writeFastVLine(x + 5, y, 8, bg);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	3320      	adds	r3, #32
 80021d4:	681c      	ldr	r4, [r3, #0]
 80021d6:	897b      	ldrh	r3, [r7, #10]
 80021d8:	3305      	adds	r3, #5
 80021da:	b29b      	uxth	r3, r3
 80021dc:	b219      	sxth	r1, r3
 80021de:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80021e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	2308      	movs	r3, #8
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	47a0      	blx	r4
 80021ee:	e021      	b.n	8002234 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2bc>
      else
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	331c      	adds	r3, #28
 80021f6:	681c      	ldr	r4, [r3, #0]
 80021f8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	461a      	mov	r2, r3
 8002200:	0092      	lsls	r2, r2, #2
 8002202:	4413      	add	r3, r2
 8002204:	b29a      	uxth	r2, r3
 8002206:	897b      	ldrh	r3, [r7, #10]
 8002208:	4413      	add	r3, r2
 800220a:	b29b      	uxth	r3, r3
 800220c:	b219      	sxth	r1, r3
 800220e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002212:	b21d      	sxth	r5, r3
 8002214:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002218:	b29b      	uxth	r3, r3
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	b29b      	uxth	r3, r3
 800221e:	b21b      	sxth	r3, r3
 8002220:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8002224:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8002228:	9201      	str	r2, [sp, #4]
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	462b      	mov	r3, r5
 800222e:	4602      	mov	r2, r0
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	47a0      	blx	r4
    }
    endWrite();
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	332c      	adds	r3, #44	@ 0x2c
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	4798      	blx	r3
 8002240:	e0e9      	b.n	8002416 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x49e>

    // Character is assumed previously filtered by write() to eliminate
    // newlines, returns, non-printable characters, etc.  Calling
    // drawChar() directly with 'bad' characters of font may cause mayhem!

    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	3308      	adds	r3, #8
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	79fa      	ldrb	r2, [r7, #7]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	71fb      	strb	r3, [r7, #7]
    GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	79fa      	ldrb	r2, [r7, #7]
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff f967 	bl	800152c <_Z18pgm_read_glyph_ptrPK7GFXfonth>
 800225e:	61f8      	str	r0, [r7, #28]
    uint8_t *bitmap = pgm_read_bitmap_ptr(gfxFont);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff f972 	bl	800154e <_Z19pgm_read_bitmap_ptrPK7GFXfont>
 800226a:	61b8      	str	r0, [r7, #24]

    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3302      	adds	r3, #2
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	75fb      	strb	r3, [r7, #23]
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3303      	adds	r3, #3
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	75bb      	strb	r3, [r7, #22]
    int8_t xo = pgm_read_byte(&glyph->xOffset),
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3305      	adds	r3, #5
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	757b      	strb	r3, [r7, #21]
           yo = pgm_read_byte(&glyph->yOffset);
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3306      	adds	r3, #6
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	753b      	strb	r3, [r7, #20]
    uint8_t xx, yy, bits = 0, bit = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002298:	2300      	movs	r3, #0
 800229a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int16_t xo16 = 0, yo16 = 0;
 800229e:	2300      	movs	r3, #0
 80022a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80022a2:	2300      	movs	r3, #0
 80022a4:	847b      	strh	r3, [r7, #34]	@ 0x22

    if (size_x > 1 || size_y > 1) {
 80022a6:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d803      	bhi.n	80022b6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x33e>
 80022ae:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d905      	bls.n	80022c2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x34a>
      xo16 = xo;
 80022b6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80022ba:	84bb      	strh	r3, [r7, #36]	@ 0x24
      yo16 = yo;
 80022bc:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80022c0:	847b      	strh	r3, [r7, #34]	@ 0x22
    // only creates a new set of problems.  Have an idea to work around
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    startWrite();
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	3314      	adds	r3, #20
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	4798      	blx	r3
    for (yy = 0; yy < h; yy++) {
 80022ce:	2300      	movs	r3, #0
 80022d0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80022d4:	e091      	b.n	80023fa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x482>
 80022d6:	bf00      	nop
 80022d8:	0801d128 	.word	0x0801d128
      for (xx = 0; xx < w; xx++) {
 80022dc:	2300      	movs	r3, #0
 80022de:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80022e2:	e07f      	b.n	80023e4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x46c>
        if (!(bit++ & 7)) {
 80022e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	bf0c      	ite	eq
 80022f6:	2301      	moveq	r3, #1
 80022f8:	2300      	movne	r3, #0
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d008      	beq.n	8002312 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x39a>
          bits = pgm_read_byte(&bitmap[bo++]);
 8002300:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	857a      	strh	r2, [r7, #42]	@ 0x2a
 8002306:	461a      	mov	r2, r3
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	4413      	add	r3, r2
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
        if (bits & 0x80) {
 8002312:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002316:	2b00      	cmp	r3, #0
 8002318:	da5a      	bge.n	80023d0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x458>
          if (size_x == 1 && size_y == 1) {
 800231a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800231e:	2b01      	cmp	r3, #1
 8002320:	d124      	bne.n	800236c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x3f4>
 8002322:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002326:	2b01      	cmp	r3, #1
 8002328:	d120      	bne.n	800236c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x3f4>
            writePixel(x + xo + xx, y + yo + yy, color);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	3318      	adds	r3, #24
 8002330:	681c      	ldr	r4, [r3, #0]
 8002332:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002336:	b29a      	uxth	r2, r3
 8002338:	897b      	ldrh	r3, [r7, #10]
 800233a:	4413      	add	r3, r2
 800233c:	b29a      	uxth	r2, r3
 800233e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002342:	b29b      	uxth	r3, r3
 8002344:	4413      	add	r3, r2
 8002346:	b29b      	uxth	r3, r3
 8002348:	b219      	sxth	r1, r3
 800234a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800234e:	b29a      	uxth	r2, r3
 8002350:	893b      	ldrh	r3, [r7, #8]
 8002352:	4413      	add	r3, r2
 8002354:	b29a      	uxth	r2, r3
 8002356:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800235a:	b29b      	uxth	r3, r3
 800235c:	4413      	add	r3, r2
 800235e:	b29b      	uxth	r3, r3
 8002360:	b21a      	sxth	r2, r3
 8002362:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	47a0      	blx	r4
 800236a:	e031      	b.n	80023d0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x458>
          } else {
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	331c      	adds	r3, #28
 8002372:	681c      	ldr	r4, [r3, #0]
 8002374:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8002378:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800237c:	4413      	add	r3, r2
 800237e:	b29a      	uxth	r2, r3
 8002380:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002384:	b29b      	uxth	r3, r3
 8002386:	fb12 f303 	smulbb	r3, r2, r3
 800238a:	b29a      	uxth	r2, r3
 800238c:	897b      	ldrh	r3, [r7, #10]
 800238e:	4413      	add	r3, r2
 8002390:	b29b      	uxth	r3, r3
 8002392:	b219      	sxth	r1, r3
 8002394:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8002398:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800239c:	4413      	add	r3, r2
 800239e:	b29a      	uxth	r2, r3
 80023a0:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	fb12 f303 	smulbb	r3, r2, r3
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	893b      	ldrh	r3, [r7, #8]
 80023ae:	4413      	add	r3, r2
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	b218      	sxth	r0, r3
 80023b4:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80023b8:	b21d      	sxth	r5, r3
 80023ba:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80023be:	b21b      	sxth	r3, r3
 80023c0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80023c4:	9201      	str	r2, [sp, #4]
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	462b      	mov	r3, r5
 80023ca:	4602      	mov	r2, r0
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	47a0      	blx	r4
                          size_x, size_y, color);
          }
        }
        bits <<= 1;
 80023d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      for (xx = 0; xx < w; xx++) {
 80023da:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80023de:	3301      	adds	r3, #1
 80023e0:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80023e4:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 80023e8:	7dfb      	ldrb	r3, [r7, #23]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	f4ff af7a 	bcc.w	80022e4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x36c>
    for (yy = 0; yy < h; yy++) {
 80023f0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80023f4:	3301      	adds	r3, #1
 80023f6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80023fa:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80023fe:	7dbb      	ldrb	r3, [r7, #22]
 8002400:	429a      	cmp	r2, r3
 8002402:	f4ff af6b 	bcc.w	80022dc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x364>
      }
    }
    endWrite();
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	332c      	adds	r3, #44	@ 0x2c
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	4798      	blx	r3
 8002412:	e000      	b.n	8002416 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x49e>
      return;
 8002414:	bf00      	nop

  } // End classic vs custom font
}
 8002416:	3730      	adds	r7, #48	@ 0x30
 8002418:	46bd      	mov	sp, r7
 800241a:	bdb0      	pop	{r4, r5, r7, pc}

0800241c <_ZN12Adafruit_GFX5writeEh>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
 800241c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800241e:	b08b      	sub	sp, #44	@ 0x2c
 8002420:	af04      	add	r7, sp, #16
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	70fb      	strb	r3, [r7, #3]
  if (!gfxFont) { // 'Classic' built-in font
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d166      	bne.n	80024fe <_ZN12Adafruit_GFX5writeEh+0xe2>

    if (c == '\n') {              // Newline?
 8002430:	78fb      	ldrb	r3, [r7, #3]
 8002432:	2b0a      	cmp	r3, #10
 8002434:	d110      	bne.n	8002458 <_ZN12Adafruit_GFX5writeEh+0x3c>
      cursor_x = 0;               // Reset x to zero,
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	821a      	strh	r2, [r3, #16]
      cursor_y += textsize_y * 8; // advance y one line
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002442:	b29a      	uxth	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	7e5b      	ldrb	r3, [r3, #25]
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	b29b      	uxth	r3, r3
 800244c:	4413      	add	r3, r2
 800244e:	b29b      	uxth	r3, r3
 8002450:	b21a      	sxth	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	825a      	strh	r2, [r3, #18]
 8002456:	e0f5      	b.n	8002644 <_ZN12Adafruit_GFX5writeEh+0x228>
    } else if (c != '\r') {       // Ignore carriage returns
 8002458:	78fb      	ldrb	r3, [r7, #3]
 800245a:	2b0d      	cmp	r3, #13
 800245c:	f000 80f2 	beq.w	8002644 <_ZN12Adafruit_GFX5writeEh+0x228>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	7edb      	ldrb	r3, [r3, #27]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d020      	beq.n	80024aa <_ZN12Adafruit_GFX5writeEh+0x8e>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800246e:	4619      	mov	r1, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	7e1b      	ldrb	r3, [r3, #24]
 8002474:	461a      	mov	r2, r3
 8002476:	4613      	mov	r3, r2
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	4413      	add	r3, r2
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	440b      	add	r3, r1
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8002486:	4293      	cmp	r3, r2
 8002488:	dd0f      	ble.n	80024aa <_ZN12Adafruit_GFX5writeEh+0x8e>
        cursor_x = 0;                                       // Reset x to zero,
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	821a      	strh	r2, [r3, #16]
        cursor_y += textsize_y * 8; // advance y one line
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002496:	b29a      	uxth	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	7e5b      	ldrb	r3, [r3, #25]
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	b29b      	uxth	r3, r3
 80024a0:	4413      	add	r3, r2
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	b21a      	sxth	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	825a      	strh	r2, [r3, #18]
      }
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f9b3 4010 	ldrsh.w	r4, [r3, #16]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f9b3 5012 	ldrsh.w	r5, [r3, #18]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	8a9b      	ldrh	r3, [r3, #20]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	8ad2      	ldrh	r2, [r2, #22]
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	7e09      	ldrb	r1, [r1, #24]
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	7e40      	ldrb	r0, [r0, #25]
 80024c6:	78fe      	ldrb	r6, [r7, #3]
 80024c8:	9003      	str	r0, [sp, #12]
 80024ca:	9102      	str	r1, [sp, #8]
 80024cc:	9201      	str	r2, [sp, #4]
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	4633      	mov	r3, r6
 80024d2:	462a      	mov	r2, r5
 80024d4:	4621      	mov	r1, r4
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7ff fd4e 	bl	8001f78 <_ZN12Adafruit_GFX8drawCharEsshtthh>
               textsize_y);
      cursor_x += textsize_x * 6; // Advance x one char
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	7e1b      	ldrb	r3, [r3, #24]
 80024e8:	4619      	mov	r1, r3
 80024ea:	0049      	lsls	r1, r1, #1
 80024ec:	440b      	add	r3, r1
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	4413      	add	r3, r2
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	b21a      	sxth	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	821a      	strh	r2, [r3, #16]
 80024fc:	e0a2      	b.n	8002644 <_ZN12Adafruit_GFX5writeEh+0x228>
    }

  } else { // Custom font

    if (c == '\n') {
 80024fe:	78fb      	ldrb	r3, [r7, #3]
 8002500:	2b0a      	cmp	r3, #10
 8002502:	d116      	bne.n	8002532 <_ZN12Adafruit_GFX5writeEh+0x116>
      cursor_x = 0;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	821a      	strh	r2, [r3, #16]
      cursor_y +=
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002510:	b29a      	uxth	r2, r3
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	7e5b      	ldrb	r3, [r3, #25]
 8002516:	4619      	mov	r1, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	330c      	adds	r3, #12
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	fb11 f303 	smulbb	r3, r1, r3
 8002524:	b29b      	uxth	r3, r3
      cursor_y +=
 8002526:	4413      	add	r3, r2
 8002528:	b29b      	uxth	r3, r3
 800252a:	b21a      	sxth	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	825a      	strh	r2, [r3, #18]
 8002530:	e088      	b.n	8002644 <_ZN12Adafruit_GFX5writeEh+0x228>
    } else if (c != '\r') {
 8002532:	78fb      	ldrb	r3, [r7, #3]
 8002534:	2b0d      	cmp	r3, #13
 8002536:	f000 8085 	beq.w	8002644 <_ZN12Adafruit_GFX5writeEh+0x228>
      uint8_t first = pgm_read_byte(&gfxFont->first);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	3308      	adds	r3, #8
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	75fb      	strb	r3, [r7, #23]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 8002544:	78fa      	ldrb	r2, [r7, #3]
 8002546:	7dfb      	ldrb	r3, [r7, #23]
 8002548:	429a      	cmp	r2, r3
 800254a:	d37b      	bcc.n	8002644 <_ZN12Adafruit_GFX5writeEh+0x228>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	330a      	adds	r3, #10
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	78fa      	ldrb	r2, [r7, #3]
 8002556:	429a      	cmp	r2, r3
 8002558:	d874      	bhi.n	8002644 <_ZN12Adafruit_GFX5writeEh+0x228>
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a18      	ldr	r0, [r3, #32]
 800255e:	78fa      	ldrb	r2, [r7, #3]
 8002560:	7dfb      	ldrb	r3, [r7, #23]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	b2db      	uxtb	r3, r3
 8002566:	4619      	mov	r1, r3
 8002568:	f7fe ffe0 	bl	800152c <_Z18pgm_read_glyph_ptrPK7GFXfonth>
 800256c:	6138      	str	r0, [r7, #16]
        uint8_t w = pgm_read_byte(&glyph->width),
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	3302      	adds	r3, #2
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	73fb      	strb	r3, [r7, #15]
                h = pgm_read_byte(&glyph->height);
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	3303      	adds	r3, #3
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	73bb      	strb	r3, [r7, #14]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d04d      	beq.n	8002620 <_ZN12Adafruit_GFX5writeEh+0x204>
 8002584:	7bbb      	ldrb	r3, [r7, #14]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d04a      	beq.n	8002620 <_ZN12Adafruit_GFX5writeEh+0x204>
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	3305      	adds	r3, #5
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	b25b      	sxtb	r3, r3
 8002592:	81bb      	strh	r3, [r7, #12]
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	7edb      	ldrb	r3, [r3, #27]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d028      	beq.n	80025ee <_ZN12Adafruit_GFX5writeEh+0x1d2>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80025a2:	4619      	mov	r1, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	7e1b      	ldrb	r3, [r3, #24]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
 80025b0:	4413      	add	r3, r2
 80025b2:	fb00 f303 	mul.w	r3, r0, r3
 80025b6:	440b      	add	r3, r1
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80025be:	4293      	cmp	r3, r2
 80025c0:	dd15      	ble.n	80025ee <_ZN12Adafruit_GFX5writeEh+0x1d2>
            cursor_x = 0;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	821a      	strh	r2, [r3, #16]
            cursor_y += (int16_t)textsize_y *
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	7e5b      	ldrb	r3, [r3, #25]
 80025d4:	4619      	mov	r1, r3
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	330c      	adds	r3, #12
 80025dc:	781b      	ldrb	r3, [r3, #0]
            cursor_y += (int16_t)textsize_y *
 80025de:	fb11 f303 	smulbb	r3, r1, r3
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	4413      	add	r3, r2
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	b21a      	sxth	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	825a      	strh	r2, [r3, #18]
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f9b3 4010 	ldrsh.w	r4, [r3, #16]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f9b3 5012 	ldrsh.w	r5, [r3, #18]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	8a9b      	ldrh	r3, [r3, #20]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	8ad2      	ldrh	r2, [r2, #22]
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	7e09      	ldrb	r1, [r1, #24]
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	7e40      	ldrb	r0, [r0, #25]
 800260a:	78fe      	ldrb	r6, [r7, #3]
 800260c:	9003      	str	r0, [sp, #12]
 800260e:	9102      	str	r1, [sp, #8]
 8002610:	9201      	str	r2, [sp, #4]
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	4633      	mov	r3, r6
 8002616:	462a      	mov	r2, r5
 8002618:	4621      	mov	r1, r4
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff fcac 	bl	8001f78 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                   textsize_y);
        }
        cursor_x +=
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002626:	b29a      	uxth	r2, r3
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	3304      	adds	r3, #4
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	4619      	mov	r1, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	7e1b      	ldrb	r3, [r3, #24]
 8002634:	fb11 f303 	smulbb	r3, r1, r3
 8002638:	b29b      	uxth	r3, r3
        cursor_x +=
 800263a:	4413      	add	r3, r2
 800263c:	b29b      	uxth	r3, r3
 800263e:	b21a      	sxth	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	821a      	strh	r2, [r3, #16]
      }
    }
  }
  return 1;
 8002644:	2301      	movs	r3, #1
}
 8002646:	4618      	mov	r0, r3
 8002648:	371c      	adds	r7, #28
 800264a:	46bd      	mov	sp, r7
 800264c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800264e <_ZN12Adafruit_GFX11setTextSizeEh>:
    @brief   Set text 'magnification' size. Each increase in s makes 1 pixel
   that much bigger.
    @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	460b      	mov	r3, r1
 8002658:	70fb      	strb	r3, [r7, #3]
 800265a:	78fa      	ldrb	r2, [r7, #3]
 800265c:	78fb      	ldrb	r3, [r7, #3]
 800265e:	4619      	mov	r1, r3
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 f804 	bl	800266e <_ZN12Adafruit_GFX11setTextSizeEhh>
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <_ZN12Adafruit_GFX11setTextSizeEhh>:
   that much bigger.
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
 8002676:	460b      	mov	r3, r1
 8002678:	70fb      	strb	r3, [r7, #3]
 800267a:	4613      	mov	r3, r2
 800267c:	70bb      	strb	r3, [r7, #2]
  textsize_x = (s_x > 0) ? s_x : 1;
 800267e:	78fb      	ldrb	r3, [r7, #3]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <_ZN12Adafruit_GFX11setTextSizeEhh+0x1a>
 8002684:	78fa      	ldrb	r2, [r7, #3]
 8002686:	e000      	b.n	800268a <_ZN12Adafruit_GFX11setTextSizeEhh+0x1c>
 8002688:	2201      	movs	r2, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	761a      	strb	r2, [r3, #24]
  textsize_y = (s_y > 0) ? s_y : 1;
 800268e:	78bb      	ldrb	r3, [r7, #2]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <_ZN12Adafruit_GFX11setTextSizeEhh+0x2a>
 8002694:	78ba      	ldrb	r2, [r7, #2]
 8002696:	e000      	b.n	800269a <_ZN12Adafruit_GFX11setTextSizeEhh+0x2c>
 8002698:	2201      	movs	r2, #1
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	765a      	strb	r2, [r3, #25]
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
	...

080026ac <_ZN12Adafruit_GFX11setRotationEh>:
/*!
    @brief      Set rotation setting for display
    @param  x   0 thru 3 corresponding to 4 cardinal rotations
*/
/**************************************************************************/
void Adafruit_GFX::setRotation(uint8_t x) {
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	70fb      	strb	r3, [r7, #3]
  rotation = (x & 3);
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	769a      	strb	r2, [r3, #26]
  switch (rotation) {
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	7e9b      	ldrb	r3, [r3, #26]
 80026c8:	2b03      	cmp	r3, #3
 80026ca:	d821      	bhi.n	8002710 <_ZN12Adafruit_GFX11setRotationEh+0x64>
 80026cc:	a201      	add	r2, pc, #4	@ (adr r2, 80026d4 <_ZN12Adafruit_GFX11setRotationEh+0x28>)
 80026ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d2:	bf00      	nop
 80026d4:	080026e5 	.word	0x080026e5
 80026d8:	080026fb 	.word	0x080026fb
 80026dc:	080026e5 	.word	0x080026e5
 80026e0:	080026fb 	.word	0x080026fb
  case 0:
  case 2:
    _width = WIDTH;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	819a      	strh	r2, [r3, #12]
    _height = HEIGHT;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	81da      	strh	r2, [r3, #14]
    break;
 80026f8:	e00a      	b.n	8002710 <_ZN12Adafruit_GFX11setRotationEh+0x64>
  case 1:
  case 3:
    _width = HEIGHT;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	819a      	strh	r2, [r3, #12]
    _height = WIDTH;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	81da      	strh	r2, [r3, #14]
    break;
 800270e:	bf00      	nop
  }
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <_ZN12Adafruit_GFX7setFontEPK7GFXfont>:
/*!
    @brief Set the font to display when print()ing, either custom or default
    @param  f  The GFXfont object, if NULL use built in 6x8 font
*/
/**************************************************************************/
void Adafruit_GFX::setFont(const GFXfont *f) {
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  if (f) {          // Font struct pointer passed in?
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00d      	beq.n	8002748 <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0x2c>
    if (!gfxFont) { // And no current font struct?
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d116      	bne.n	8002762 <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0x46>
      // Switching from classic to new font behavior.
      // Move cursor pos down 6 pixels so it's on baseline.
      cursor_y += 6;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800273a:	b29b      	uxth	r3, r3
 800273c:	3306      	adds	r3, #6
 800273e:	b29b      	uxth	r3, r3
 8002740:	b21a      	sxth	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	825a      	strh	r2, [r3, #18]
 8002746:	e00c      	b.n	8002762 <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0x46>
    }
  } else if (gfxFont) { // NULL passed.  Current font struct defined?
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d008      	beq.n	8002762 <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0x46>
    // Switching from new to classic font behavior.
    // Move cursor pos up 6 pixels so it's at top-left of char.
    cursor_y -= 6;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002756:	b29b      	uxth	r3, r3
 8002758:	3b06      	subs	r3, #6
 800275a:	b29b      	uxth	r3, r3
 800275c:	b21a      	sxth	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	825a      	strh	r2, [r3, #18]
  }
  gfxFont = (GFXfont *)f;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	621a      	str	r2, [r3, #32]
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_>:
    @param  maxy  Pointer to maximum Y coord, passed in AND returned.
*/
/**************************************************************************/
void Adafruit_GFX::charBounds(unsigned char c, int16_t *x, int16_t *y,
                              int16_t *minx, int16_t *miny, int16_t *maxx,
                              int16_t *maxy) {
 8002774:	b580      	push	{r7, lr}
 8002776:	b08e      	sub	sp, #56	@ 0x38
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	607a      	str	r2, [r7, #4]
 800277e:	603b      	str	r3, [r7, #0]
 8002780:	460b      	mov	r3, r1
 8002782:	72fb      	strb	r3, [r7, #11]

  if (gfxFont) {
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 80fc 	beq.w	8002986 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x212>

    if (c == '\n') { // Newline?
 800278e:	7afb      	ldrb	r3, [r7, #11]
 8002790:	2b0a      	cmp	r3, #10
 8002792:	d116      	bne.n	80027c2 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x4e>
      *x = 0;        // Reset x to zero, advance y by one line
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	801a      	strh	r2, [r3, #0]
      *y += textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	7e5b      	ldrb	r3, [r3, #25]
 80027a6:	4619      	mov	r1, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	330c      	adds	r3, #12
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	fb11 f303 	smulbb	r3, r1, r3
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	4413      	add	r3, r2
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	b21a      	sxth	r2, r3
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	801a      	strh	r2, [r3, #0]
      if (*y < *miny)
        *miny = *y;
      *x += textsize_x * 6; // Advance x one char
    }
  }
}
 80027c0:	e175      	b.n	8002aae <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x33a>
    } else if (c != '\r') { // Not a carriage return; is normal char
 80027c2:	7afb      	ldrb	r3, [r7, #11]
 80027c4:	2b0d      	cmp	r3, #13
 80027c6:	f000 8172 	beq.w	8002aae <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x33a>
      uint8_t first = pgm_read_byte(&gfxFont->first),
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	3308      	adds	r3, #8
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
              last = pgm_read_byte(&gfxFont->last);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	330a      	adds	r3, #10
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
      if ((c >= first) && (c <= last)) { // Char present in this font?
 80027e2:	7afa      	ldrb	r2, [r7, #11]
 80027e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80027e8:	429a      	cmp	r2, r3
 80027ea:	f0c0 8160 	bcc.w	8002aae <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x33a>
 80027ee:	7afa      	ldrb	r2, [r7, #11]
 80027f0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80027f4:	429a      	cmp	r2, r3
 80027f6:	f200 815a 	bhi.w	8002aae <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x33a>
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6a18      	ldr	r0, [r3, #32]
 80027fe:	7afa      	ldrb	r2, [r7, #11]
 8002800:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	b2db      	uxtb	r3, r3
 8002808:	4619      	mov	r1, r3
 800280a:	f7fe fe8f 	bl	800152c <_Z18pgm_read_glyph_ptrPK7GFXfonth>
 800280e:	62b8      	str	r0, [r7, #40]	@ 0x28
        uint8_t gw = pgm_read_byte(&glyph->width),
 8002810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002812:	3302      	adds	r3, #2
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                gh = pgm_read_byte(&glyph->height),
 800281a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800281c:	3303      	adds	r3, #3
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                xa = pgm_read_byte(&glyph->xAdvance);
 8002824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002826:	3304      	adds	r3, #4
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        int8_t xo = pgm_read_byte(&glyph->xOffset),
 800282e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002830:	3305      	adds	r3, #5
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
               yo = pgm_read_byte(&glyph->yOffset);
 8002838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800283a:	3306      	adds	r3, #6
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        if (wrap && ((*x + (((int16_t)xo + gw) * textsize_x)) > _width)) {
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	7edb      	ldrb	r3, [r3, #27]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d028      	beq.n	800289c <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x128>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002850:	4619      	mov	r1, r3
 8002852:	f997 2024 	ldrsb.w	r2, [r7, #36]	@ 0x24
 8002856:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800285a:	4413      	add	r3, r2
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	7e12      	ldrb	r2, [r2, #24]
 8002860:	fb02 f303 	mul.w	r3, r2, r3
 8002864:	440b      	add	r3, r1
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800286c:	4293      	cmp	r3, r2
 800286e:	dd15      	ble.n	800289c <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x128>
          *x = 0; // Reset x to zero, advance y by one line
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	801a      	strh	r2, [r3, #0]
          *y += textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	f9b3 3000 	ldrsh.w	r3, [r3]
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	7e5b      	ldrb	r3, [r3, #25]
 8002882:	4619      	mov	r1, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	330c      	adds	r3, #12
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	fb11 f303 	smulbb	r3, r1, r3
 8002890:	b29b      	uxth	r3, r3
 8002892:	4413      	add	r3, r2
 8002894:	b29b      	uxth	r3, r3
 8002896:	b21a      	sxth	r2, r3
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	801a      	strh	r2, [r3, #0]
        int16_t tsx = (int16_t)textsize_x, tsy = (int16_t)textsize_y,
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	7e1b      	ldrb	r3, [r3, #24]
 80028a0:	843b      	strh	r3, [r7, #32]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	7e5b      	ldrb	r3, [r3, #25]
 80028a6:	83fb      	strh	r3, [r7, #30]
                x1 = *x + xo * tsx, y1 = *y + yo * tsy, x2 = x1 + gw * tsx - 1,
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 80028b4:	b299      	uxth	r1, r3
 80028b6:	8c3b      	ldrh	r3, [r7, #32]
 80028b8:	fb11 f303 	smulbb	r3, r1, r3
 80028bc:	b29b      	uxth	r3, r3
 80028be:	4413      	add	r3, r2
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	83bb      	strh	r3, [r7, #28]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80028d0:	b299      	uxth	r1, r3
 80028d2:	8bfb      	ldrh	r3, [r7, #30]
 80028d4:	fb11 f303 	smulbb	r3, r1, r3
 80028d8:	b29b      	uxth	r3, r3
 80028da:	4413      	add	r3, r2
 80028dc:	b29b      	uxth	r3, r3
 80028de:	837b      	strh	r3, [r7, #26]
 80028e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	8c3b      	ldrh	r3, [r7, #32]
 80028e8:	fb12 f303 	smulbb	r3, r2, r3
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	8bbb      	ldrh	r3, [r7, #28]
 80028f0:	4413      	add	r3, r2
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	3b01      	subs	r3, #1
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	833b      	strh	r3, [r7, #24]
                y2 = y1 + gh * tsy - 1;
 80028fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80028fe:	b29a      	uxth	r2, r3
 8002900:	8bfb      	ldrh	r3, [r7, #30]
 8002902:	fb12 f303 	smulbb	r3, r2, r3
 8002906:	b29a      	uxth	r2, r3
 8002908:	8b7b      	ldrh	r3, [r7, #26]
 800290a:	4413      	add	r3, r2
 800290c:	b29b      	uxth	r3, r3
 800290e:	3b01      	subs	r3, #1
 8002910:	b29b      	uxth	r3, r3
 8002912:	82fb      	strh	r3, [r7, #22]
        if (x1 < *minx)
 8002914:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002916:	f9b3 3000 	ldrsh.w	r3, [r3]
 800291a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800291e:	429a      	cmp	r2, r3
 8002920:	da02      	bge.n	8002928 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x1b4>
          *minx = x1;
 8002922:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002924:	8bba      	ldrh	r2, [r7, #28]
 8002926:	801a      	strh	r2, [r3, #0]
        if (y1 < *miny)
 8002928:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800292a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800292e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8002932:	429a      	cmp	r2, r3
 8002934:	da02      	bge.n	800293c <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x1c8>
          *miny = y1;
 8002936:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002938:	8b7a      	ldrh	r2, [r7, #26]
 800293a:	801a      	strh	r2, [r3, #0]
        if (x2 > *maxx)
 800293c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800293e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002942:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002946:	429a      	cmp	r2, r3
 8002948:	dd02      	ble.n	8002950 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x1dc>
          *maxx = x2;
 800294a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800294c:	8b3a      	ldrh	r2, [r7, #24]
 800294e:	801a      	strh	r2, [r3, #0]
        if (y2 > *maxy)
 8002950:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002952:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002956:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800295a:	429a      	cmp	r2, r3
 800295c:	dd02      	ble.n	8002964 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x1f0>
          *maxy = y2;
 800295e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002960:	8afa      	ldrh	r2, [r7, #22]
 8002962:	801a      	strh	r2, [r3, #0]
        *x += xa * tsx;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f9b3 3000 	ldrsh.w	r3, [r3]
 800296a:	b29a      	uxth	r2, r3
 800296c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002970:	b299      	uxth	r1, r3
 8002972:	8c3b      	ldrh	r3, [r7, #32]
 8002974:	fb11 f303 	smulbb	r3, r1, r3
 8002978:	b29b      	uxth	r3, r3
 800297a:	4413      	add	r3, r2
 800297c:	b29b      	uxth	r3, r3
 800297e:	b21a      	sxth	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	801a      	strh	r2, [r3, #0]
}
 8002984:	e093      	b.n	8002aae <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x33a>
    if (c == '\n') {        // Newline?
 8002986:	7afb      	ldrb	r3, [r7, #11]
 8002988:	2b0a      	cmp	r3, #10
 800298a:	d110      	bne.n	80029ae <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x23a>
      *x = 0;               // Reset x to zero,
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	801a      	strh	r2, [r3, #0]
      *y += textsize_y * 8; // advance y one line
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002998:	b29a      	uxth	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	7e5b      	ldrb	r3, [r3, #25]
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	4413      	add	r3, r2
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	b21a      	sxth	r2, r3
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	801a      	strh	r2, [r3, #0]
}
 80029ac:	e07f      	b.n	8002aae <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x33a>
    } else if (c != '\r') { // Normal char; ignore carriage returns
 80029ae:	7afb      	ldrb	r3, [r7, #11]
 80029b0:	2b0d      	cmp	r3, #13
 80029b2:	d07c      	beq.n	8002aae <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x33a>
      if (wrap && ((*x + textsize_x * 6) > _width)) { // Off right?
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	7edb      	ldrb	r3, [r3, #27]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d020      	beq.n	80029fe <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x28a>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029c2:	4619      	mov	r1, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	7e1b      	ldrb	r3, [r3, #24]
 80029c8:	461a      	mov	r2, r3
 80029ca:	4613      	mov	r3, r2
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	4413      	add	r3, r2
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	440b      	add	r3, r1
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80029da:	4293      	cmp	r3, r2
 80029dc:	dd0f      	ble.n	80029fe <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x28a>
        *x = 0;                                       // Reset x to zero,
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	801a      	strh	r2, [r3, #0]
        *y += textsize_y * 8;                         // advance y one line
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	7e5b      	ldrb	r3, [r3, #25]
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	4413      	add	r3, r2
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	b21a      	sxth	r2, r3
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	801a      	strh	r2, [r3, #0]
      int x2 = *x + textsize_x * 6 - 1, // Lower-right pixel of char
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a04:	4619      	mov	r1, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	7e1b      	ldrb	r3, [r3, #24]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	4413      	add	r3, r2
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	440b      	add	r3, r1
 8002a16:	3b01      	subs	r3, #1
 8002a18:	637b      	str	r3, [r7, #52]	@ 0x34
          y2 = *y + textsize_y * 8 - 1;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a20:	461a      	mov	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	7e5b      	ldrb	r3, [r3, #25]
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	4413      	add	r3, r2
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	633b      	str	r3, [r7, #48]	@ 0x30
      if (x2 > *maxx)
 8002a2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a34:	461a      	mov	r2, r3
 8002a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	dd03      	ble.n	8002a44 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x2d0>
        *maxx = x2; // Track max x, y
 8002a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a3e:	b21a      	sxth	r2, r3
 8002a40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a42:	801a      	strh	r2, [r3, #0]
      if (y2 > *maxy)
 8002a44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	dd03      	ble.n	8002a5a <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x2e6>
        *maxy = y2;
 8002a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a54:	b21a      	sxth	r2, r3
 8002a56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a58:	801a      	strh	r2, [r3, #0]
      if (*x < *minx)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	da04      	bge.n	8002a74 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x300>
        *minx = *x; // Track min x, y
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a72:	801a      	strh	r2, [r3, #0]
      if (*y < *miny)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	da04      	bge.n	8002a8e <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x31a>
        *miny = *y;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a8c:	801a      	strh	r2, [r3, #0]
      *x += textsize_x * 6; // Advance x one char
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	7e1b      	ldrb	r3, [r3, #24]
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	0049      	lsls	r1, r1, #1
 8002a9e:	440b      	add	r3, r1
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	b21a      	sxth	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	801a      	strh	r2, [r3, #0]
}
 8002aae:	bf00      	nop
 8002ab0:	3738      	adds	r7, #56	@ 0x38
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>:
    @param  h    The boundary height, returned by function
*/
/**************************************************************************/
void Adafruit_GFX::getTextBounds(const char *str, int16_t x, int16_t y,
                                 int16_t *x1, int16_t *y1, uint16_t *w,
                                 uint16_t *h) {
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b08c      	sub	sp, #48	@ 0x30
 8002aba:	af04      	add	r7, sp, #16
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	4611      	mov	r1, r2
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	80fb      	strh	r3, [r7, #6]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	80bb      	strh	r3, [r7, #4]

  uint8_t c; // Current character
  int16_t minx = 0x7FFF, miny = 0x7FFF, maxx = -1, maxy = -1; // Bound rect
 8002acc:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002ad0:	83bb      	strh	r3, [r7, #28]
 8002ad2:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002ad6:	837b      	strh	r3, [r7, #26]
 8002ad8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002adc:	833b      	strh	r3, [r7, #24]
 8002ade:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ae2:	82fb      	strh	r3, [r7, #22]
  // Bound rect is intentionally initialized inverted, so 1st char sets it

  *x1 = x; // Initial position is value passed in
 8002ae4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aea:	801a      	strh	r2, [r3, #0]
  *y1 = y;
 8002aec:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002af2:	801a      	strh	r2, [r3, #0]
  *w = *h = 0; // Initial size is zero
 8002af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002af6:	2200      	movs	r2, #0
 8002af8:	801a      	strh	r2, [r3, #0]
 8002afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002afc:	881a      	ldrh	r2, [r3, #0]
 8002afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b00:	801a      	strh	r2, [r3, #0]

  while ((c = *str++)) {
 8002b02:	e012      	b.n	8002b2a <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_+0x74>
    // charBounds() modifies x/y to advance for each character,
    // and min/max x/y are updated to incrementally build bounding rect.
    charBounds(c, &x, &y, &minx, &miny, &maxx, &maxy);
 8002b04:	1d38      	adds	r0, r7, #4
 8002b06:	1dba      	adds	r2, r7, #6
 8002b08:	7ff9      	ldrb	r1, [r7, #31]
 8002b0a:	f107 0316 	add.w	r3, r7, #22
 8002b0e:	9303      	str	r3, [sp, #12]
 8002b10:	f107 0318 	add.w	r3, r7, #24
 8002b14:	9302      	str	r3, [sp, #8]
 8002b16:	f107 031a 	add.w	r3, r7, #26
 8002b1a:	9301      	str	r3, [sp, #4]
 8002b1c:	f107 031c 	add.w	r3, r7, #28
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	4603      	mov	r3, r0
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f7ff fe25 	bl	8002774 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_>
  while ((c = *str++)) {
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	60ba      	str	r2, [r7, #8]
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	77fb      	strb	r3, [r7, #31]
 8002b34:	7ffb      	ldrb	r3, [r7, #31]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	bf14      	ite	ne
 8002b3a:	2301      	movne	r3, #1
 8002b3c:	2300      	moveq	r3, #0
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1df      	bne.n	8002b04 <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_+0x4e>
  }

  if (maxx >= minx) {     // If legit string bounds were found...
 8002b44:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002b48:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	db0f      	blt.n	8002b70 <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_+0xba>
    *x1 = minx;           // Update x1 to least X coord,
 8002b50:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b56:	801a      	strh	r2, [r3, #0]
    *w = maxx - minx + 1; // And w to bound rect width
 8002b58:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	3301      	adds	r3, #1
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6e:	801a      	strh	r2, [r3, #0]
  }
  if (maxy >= miny) { // Same for height
 8002b70:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002b74:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	db0f      	blt.n	8002b9c <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_+0xe6>
    *y1 = miny;
 8002b7c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8002b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b82:	801a      	strh	r2, [r3, #0]
    *h = maxy - miny + 1;
 8002b84:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	3301      	adds	r3, #1
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b9a:	801a      	strh	r2, [r3, #0]
  }
}
 8002b9c:	bf00      	nop
 8002b9e:	3720      	adds	r7, #32
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <_ZN12Adafruit_GFX13invertDisplayEb>:
/*!
    @brief      Invert the display (ideally using built-in hardware command)
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	460b      	mov	r3, r1
 8002bae:	70fb      	strb	r3, [r7, #3]
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <_ZN11GFXcanvas16C1Ettb>:
   false, the subclass must initialize the buffer before any drawing operation,
   and free it in the destructor. If false (the default), the buffer is
   allocated and freed by the library.
*/
/**************************************************************************/
GFXcanvas16::GFXcanvas16(uint16_t w, uint16_t h, bool allocate_buffer)
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	4608      	mov	r0, r1
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4603      	mov	r3, r0
 8002bcc:	817b      	strh	r3, [r7, #10]
 8002bce:	460b      	mov	r3, r1
 8002bd0:	813b      	strh	r3, [r7, #8]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	71fb      	strb	r3, [r7, #7]
    : Adafruit_GFX(w, h), buffer_owned(allocate_buffer) {
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002bdc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fe fcc1 	bl	8001568 <_ZN12Adafruit_GFXC1Ess>
 8002be6:	4a18      	ldr	r2, [pc, #96]	@ (8002c48 <_ZN11GFXcanvas16C1Ettb+0x8c>)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	79fa      	ldrb	r2, [r7, #7]
 8002bf0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  if (allocate_buffer) {
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d01d      	beq.n	8002c36 <_ZN11GFXcanvas16C1Ettb+0x7a>
    uint32_t bytes = w * h * 2;
 8002bfa:	897b      	ldrh	r3, [r7, #10]
 8002bfc:	893a      	ldrh	r2, [r7, #8]
 8002bfe:	fb02 f303 	mul.w	r3, r2, r3
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	617b      	str	r3, [r7, #20]
    if ((buffer = (uint16_t *)malloc(bytes))) {
 8002c06:	6978      	ldr	r0, [r7, #20]
 8002c08:	f017 fa4e 	bl	801a0a8 <malloc>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	461a      	mov	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	625a      	str	r2, [r3, #36]	@ 0x24
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	bf14      	ite	ne
 8002c1c:	2301      	movne	r3, #1
 8002c1e:	2300      	moveq	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <_ZN11GFXcanvas16C1Ettb+0x80>
      memset(buffer, 0, bytes);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f018 f938 	bl	801aea4 <memset>
 8002c34:	e002      	b.n	8002c3c <_ZN11GFXcanvas16C1Ettb+0x80>
    }
  } else {
    buffer = nullptr;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	0801d630 	.word	0x0801d630

08002c4c <_ZN11GFXcanvas16D1Ev>:
/**************************************************************************/
/*!
   @brief    Delete the canvas, free memory
*/
/**************************************************************************/
GFXcanvas16::~GFXcanvas16(void) {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	4a0a      	ldr	r2, [pc, #40]	@ (8002c80 <_ZN11GFXcanvas16D1Ev+0x34>)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	601a      	str	r2, [r3, #0]
  if (buffer && buffer_owned)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d009      	beq.n	8002c76 <_ZN11GFXcanvas16D1Ev+0x2a>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d004      	beq.n	8002c76 <_ZN11GFXcanvas16D1Ev+0x2a>
    free(buffer);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c70:	4618      	mov	r0, r3
 8002c72:	f017 fa21 	bl	801a0b8 <free>
}
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	0801d630 	.word	0x0801d630

08002c84 <_ZN11GFXcanvas169drawPixelEsst>:
    @param  x   x coordinate
    @param  y   y coordinate
    @param  color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void GFXcanvas16::drawPixel(int16_t x, int16_t y, uint16_t color) {
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	4608      	mov	r0, r1
 8002c8e:	4611      	mov	r1, r2
 8002c90:	461a      	mov	r2, r3
 8002c92:	4603      	mov	r3, r0
 8002c94:	817b      	strh	r3, [r7, #10]
 8002c96:	460b      	mov	r3, r1
 8002c98:	813b      	strh	r3, [r7, #8]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	80fb      	strh	r3, [r7, #6]
  if (buffer) {
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d065      	beq.n	8002d72 <_ZN11GFXcanvas169drawPixelEsst+0xee>
    if ((x < 0) || (y < 0) || (x >= _width) || (y >= _height))
 8002ca6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	db60      	blt.n	8002d70 <_ZN11GFXcanvas169drawPixelEsst+0xec>
 8002cae:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	db5c      	blt.n	8002d70 <_ZN11GFXcanvas169drawPixelEsst+0xec>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002cbc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	da55      	bge.n	8002d70 <_ZN11GFXcanvas169drawPixelEsst+0xec>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002cca:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	da4e      	bge.n	8002d70 <_ZN11GFXcanvas169drawPixelEsst+0xec>
      return;

    int16_t t;
    switch (rotation) {
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	7e9b      	ldrb	r3, [r3, #26]
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d02a      	beq.n	8002d30 <_ZN11GFXcanvas169drawPixelEsst+0xac>
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	dc37      	bgt.n	8002d4e <_ZN11GFXcanvas169drawPixelEsst+0xca>
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d002      	beq.n	8002ce8 <_ZN11GFXcanvas169drawPixelEsst+0x64>
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d00f      	beq.n	8002d06 <_ZN11GFXcanvas169drawPixelEsst+0x82>
 8002ce6:	e032      	b.n	8002d4e <_ZN11GFXcanvas169drawPixelEsst+0xca>
    case 1:
      t = x;
 8002ce8:	897b      	ldrh	r3, [r7, #10]
 8002cea:	82fb      	strh	r3, [r7, #22]
      x = WIDTH - 1 - y;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	893b      	ldrh	r3, [r7, #8]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	817b      	strh	r3, [r7, #10]
      y = t;
 8002d00:	8afb      	ldrh	r3, [r7, #22]
 8002d02:	813b      	strh	r3, [r7, #8]
      break;
 8002d04:	e023      	b.n	8002d4e <_ZN11GFXcanvas169drawPixelEsst+0xca>
    case 2:
      x = WIDTH - 1 - x;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	897b      	ldrh	r3, [r7, #10]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	817b      	strh	r3, [r7, #10]
      y = HEIGHT - 1 - y;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	893b      	ldrh	r3, [r7, #8]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	813b      	strh	r3, [r7, #8]
      break;
 8002d2e:	e00e      	b.n	8002d4e <_ZN11GFXcanvas169drawPixelEsst+0xca>
    case 3:
      t = x;
 8002d30:	897b      	ldrh	r3, [r7, #10]
 8002d32:	82fb      	strh	r3, [r7, #22]
      x = y;
 8002d34:	893b      	ldrh	r3, [r7, #8]
 8002d36:	817b      	strh	r3, [r7, #10]
      y = HEIGHT - 1 - t;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	8afb      	ldrh	r3, [r7, #22]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	3b01      	subs	r3, #1
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	813b      	strh	r3, [r7, #8]
      break;
 8002d4c:	bf00      	nop
    }

    buffer[x + y * WIDTH] = color;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d52:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002d56:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8002d60:	fb00 f303 	mul.w	r3, r0, r3
 8002d64:	440b      	add	r3, r1
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	4413      	add	r3, r2
 8002d6a:	88fa      	ldrh	r2, [r7, #6]
 8002d6c:	801a      	strh	r2, [r3, #0]
 8002d6e:	e000      	b.n	8002d72 <_ZN11GFXcanvas169drawPixelEsst+0xee>
      return;
 8002d70:	bf00      	nop
  }
}
 8002d72:	371c      	adds	r7, #28
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <_ZN11GFXcanvas1610fillScreenEt>:
/*!
    @brief  Fill the framebuffer completely with one color
    @param  color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void GFXcanvas16::fillScreen(uint16_t color) {
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	807b      	strh	r3, [r7, #2]
  if (buffer) {
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d035      	beq.n	8002dfc <_ZN11GFXcanvas1610fillScreenEt+0x80>
    uint8_t hi = color >> 8, lo = color & 0xFF;
 8002d90:	887b      	ldrh	r3, [r7, #2]
 8002d92:	0a1b      	lsrs	r3, r3, #8
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	74fb      	strb	r3, [r7, #19]
 8002d98:	887b      	ldrh	r3, [r7, #2]
 8002d9a:	74bb      	strb	r3, [r7, #18]
    if (hi == lo) {
 8002d9c:	7cfa      	ldrb	r2, [r7, #19]
 8002d9e:	7cbb      	ldrb	r3, [r7, #18]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d110      	bne.n	8002dc6 <_ZN11GFXcanvas1610fillScreenEt+0x4a>
      memset(buffer, lo, WIDTH * HEIGHT * 2);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002da8:	7cb9      	ldrb	r1, [r7, #18]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002db0:	461a      	mov	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002db8:	fb02 f303 	mul.w	r3, r2, r3
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	f018 f870 	bl	801aea4 <memset>
      uint32_t i, pixels = WIDTH * HEIGHT;
      for (i = 0; i < pixels; i++)
        buffer[i] = color;
    }
  }
}
 8002dc4:	e01a      	b.n	8002dfc <_ZN11GFXcanvas1610fillScreenEt+0x80>
      uint32_t i, pixels = WIDTH * HEIGHT;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002dd4:	fb02 f303 	mul.w	r3, r2, r3
 8002dd8:	60fb      	str	r3, [r7, #12]
      for (i = 0; i < pixels; i++)
 8002dda:	2300      	movs	r3, #0
 8002ddc:	617b      	str	r3, [r7, #20]
 8002dde:	e009      	b.n	8002df4 <_ZN11GFXcanvas1610fillScreenEt+0x78>
        buffer[i] = color;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	4413      	add	r3, r2
 8002dea:	887a      	ldrh	r2, [r7, #2]
 8002dec:	801a      	strh	r2, [r3, #0]
      for (i = 0; i < pixels; i++)
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	3301      	adds	r3, #1
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d3f1      	bcc.n	8002de0 <_ZN11GFXcanvas1610fillScreenEt+0x64>
}
 8002dfc:	bf00      	nop
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <_ZN11GFXcanvas1613drawFastVLineEssst>:
   @param    h   length of vertical line to be drawn, including first point
   @param    color   color 16-bit 5-6-5 Color to draw line with
*/
/**************************************************************************/
void GFXcanvas16::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                uint16_t color) {
 8002e04:	b590      	push	{r4, r7, lr}
 8002e06:	b089      	sub	sp, #36	@ 0x24
 8002e08:	af02      	add	r7, sp, #8
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	4608      	mov	r0, r1
 8002e0e:	4611      	mov	r1, r2
 8002e10:	461a      	mov	r2, r3
 8002e12:	4603      	mov	r3, r0
 8002e14:	817b      	strh	r3, [r7, #10]
 8002e16:	460b      	mov	r3, r1
 8002e18:	813b      	strh	r3, [r7, #8]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	80fb      	strh	r3, [r7, #6]
  if (h < 0) { // Convert negative heights to positive equivalent
 8002e1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	da15      	bge.n	8002e52 <_ZN11GFXcanvas1613drawFastVLineEssst+0x4e>
    h *= -1;
 8002e26:	88fb      	ldrh	r3, [r7, #6]
 8002e28:	425b      	negs	r3, r3
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	80fb      	strh	r3, [r7, #6]
    y -= h - 1;
 8002e2e:	893a      	ldrh	r2, [r7, #8]
 8002e30:	88fb      	ldrh	r3, [r7, #6]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	3301      	adds	r3, #1
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	813b      	strh	r3, [r7, #8]
    if (y < 0) {
 8002e3c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	da06      	bge.n	8002e52 <_ZN11GFXcanvas1613drawFastVLineEssst+0x4e>
      h += y;
 8002e44:	88fa      	ldrh	r2, [r7, #6]
 8002e46:	893b      	ldrh	r3, [r7, #8]
 8002e48:	4413      	add	r3, r2
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	80fb      	strh	r3, [r7, #6]
      y = 0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	813b      	strh	r3, [r7, #8]
    }
  }

  // Edge rejection (no-draw if totally off canvas)
  if ((x < 0) || (x >= width()) || (y >= height()) || ((y + h - 1) < 0)) {
 8002e52:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	db1a      	blt.n	8002e90 <_ZN11GFXcanvas1613drawFastVLineEssst+0x8c>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fe fb3f 	bl	80014e0 <_ZNK12Adafruit_GFX5widthEv>
 8002e62:	4603      	mov	r3, r0
 8002e64:	461a      	mov	r2, r3
 8002e66:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	da10      	bge.n	8002e90 <_ZN11GFXcanvas1613drawFastVLineEssst+0x8c>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fe fb42 	bl	80014fa <_ZNK12Adafruit_GFX6heightEv>
 8002e76:	4603      	mov	r3, r0
 8002e78:	461a      	mov	r2, r3
 8002e7a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	da06      	bge.n	8002e90 <_ZN11GFXcanvas1613drawFastVLineEssst+0x8c>
 8002e82:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002e86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	dc01      	bgt.n	8002e94 <_ZN11GFXcanvas1613drawFastVLineEssst+0x90>
 8002e90:	2301      	movs	r3, #1
 8002e92:	e000      	b.n	8002e96 <_ZN11GFXcanvas1613drawFastVLineEssst+0x92>
 8002e94:	2300      	movs	r3, #0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f040 80c8 	bne.w	800302c <_ZN11GFXcanvas1613drawFastVLineEssst+0x228>
    return;
  }

  if (y < 0) { // Clip top
 8002e9c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	da06      	bge.n	8002eb2 <_ZN11GFXcanvas1613drawFastVLineEssst+0xae>
    h += y;
 8002ea4:	88fa      	ldrh	r2, [r7, #6]
 8002ea6:	893b      	ldrh	r3, [r7, #8]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	80fb      	strh	r3, [r7, #6]
    y = 0;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	813b      	strh	r3, [r7, #8]
  }
  if (y + h > height()) { // Clip bottom
 8002eb2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002eb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002eba:	18d4      	adds	r4, r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fe fb1b 	bl	80014fa <_ZNK12Adafruit_GFX6heightEv>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	429c      	cmp	r4, r3
 8002ec8:	bfcc      	ite	gt
 8002eca:	2301      	movgt	r3, #1
 8002ecc:	2300      	movle	r3, #0
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d009      	beq.n	8002ee8 <_ZN11GFXcanvas1613drawFastVLineEssst+0xe4>
    h = height() - y;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fe fb0f 	bl	80014fa <_ZNK12Adafruit_GFX6heightEv>
 8002edc:	4603      	mov	r3, r0
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	893b      	ldrh	r3, [r7, #8]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	80fb      	strh	r3, [r7, #6]
  }

  if (getRotation() == 0) {
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fe fb12 	bl	8001514 <_ZNK12Adafruit_GFX11getRotationEv>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	bf0c      	ite	eq
 8002ef6:	2301      	moveq	r3, #1
 8002ef8:	2300      	movne	r3, #0
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00c      	beq.n	8002f1a <_ZN11GFXcanvas1613drawFastVLineEssst+0x116>
    drawFastRawVLine(x, y, h, color);
 8002f00:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002f04:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002f08:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002f0c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	4603      	mov	r3, r0
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 f9a6 	bl	8003264 <_ZN11GFXcanvas1616drawFastRawVLineEssst>
 8002f18:	e089      	b.n	800302e <_ZN11GFXcanvas1613drawFastVLineEssst+0x22a>
  } else if (getRotation() == 1) {
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fe faf9 	bl	8001514 <_ZNK12Adafruit_GFX11getRotationEv>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	bf0c      	ite	eq
 8002f28:	2301      	moveq	r3, #1
 8002f2a:	2300      	movne	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d021      	beq.n	8002f76 <_ZN11GFXcanvas1613drawFastVLineEssst+0x172>
    int16_t t = x;
 8002f32:	897b      	ldrh	r3, [r7, #10]
 8002f34:	82bb      	strh	r3, [r7, #20]
    x = WIDTH - 1 - y;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	893b      	ldrh	r3, [r7, #8]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	817b      	strh	r3, [r7, #10]
    y = t;
 8002f4a:	8abb      	ldrh	r3, [r7, #20]
 8002f4c:	813b      	strh	r3, [r7, #8]
    x -= h - 1;
 8002f4e:	897a      	ldrh	r2, [r7, #10]
 8002f50:	88fb      	ldrh	r3, [r7, #6]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	3301      	adds	r3, #1
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	817b      	strh	r3, [r7, #10]
    drawFastRawHLine(x, y, h, color);
 8002f5c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002f60:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002f64:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002f68:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 f9b5 	bl	80032de <_ZN11GFXcanvas1616drawFastRawHLineEssst>
 8002f74:	e05b      	b.n	800302e <_ZN11GFXcanvas1613drawFastVLineEssst+0x22a>
  } else if (getRotation() == 2) {
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7fe facb 	bl	8001514 <_ZNK12Adafruit_GFX11getRotationEv>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	bf0c      	ite	eq
 8002f84:	2301      	moveq	r3, #1
 8002f86:	2300      	movne	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d027      	beq.n	8002fde <_ZN11GFXcanvas1613drawFastVLineEssst+0x1da>
    x = WIDTH - 1 - x;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	897b      	ldrh	r3, [r7, #10]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	817b      	strh	r3, [r7, #10]
    y = HEIGHT - 1 - y;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	893b      	ldrh	r3, [r7, #8]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	813b      	strh	r3, [r7, #8]

    y -= h - 1;
 8002fb6:	893a      	ldrh	r2, [r7, #8]
 8002fb8:	88fb      	ldrh	r3, [r7, #6]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	813b      	strh	r3, [r7, #8]
    drawFastRawVLine(x, y, h, color);
 8002fc4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002fc8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002fcc:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002fd0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 f944 	bl	8003264 <_ZN11GFXcanvas1616drawFastRawVLineEssst>
 8002fdc:	e027      	b.n	800302e <_ZN11GFXcanvas1613drawFastVLineEssst+0x22a>
  } else if (getRotation() == 3) {
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fe fa97 	bl	8001514 <_ZNK12Adafruit_GFX11getRotationEv>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	bf0c      	ite	eq
 8002fec:	2301      	moveq	r3, #1
 8002fee:	2300      	movne	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d01b      	beq.n	800302e <_ZN11GFXcanvas1613drawFastVLineEssst+0x22a>
    int16_t t = x;
 8002ff6:	897b      	ldrh	r3, [r7, #10]
 8002ff8:	82fb      	strh	r3, [r7, #22]
    x = y;
 8002ffa:	893b      	ldrh	r3, [r7, #8]
 8002ffc:	817b      	strh	r3, [r7, #10]
    y = HEIGHT - 1 - t;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003004:	b29a      	uxth	r2, r3
 8003006:	8afb      	ldrh	r3, [r7, #22]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	b29b      	uxth	r3, r3
 800300c:	3b01      	subs	r3, #1
 800300e:	b29b      	uxth	r3, r3
 8003010:	813b      	strh	r3, [r7, #8]
    drawFastRawHLine(x, y, h, color);
 8003012:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003016:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800301a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800301e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	4603      	mov	r3, r0
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 f95a 	bl	80032de <_ZN11GFXcanvas1616drawFastRawHLineEssst>
 800302a:	e000      	b.n	800302e <_ZN11GFXcanvas1613drawFastVLineEssst+0x22a>
    return;
 800302c:	bf00      	nop
  }
}
 800302e:	371c      	adds	r7, #28
 8003030:	46bd      	mov	sp, r7
 8003032:	bd90      	pop	{r4, r7, pc}

08003034 <_ZN11GFXcanvas1613drawFastHLineEssst>:
   @param  w      Length of horizontal line to be drawn, including 1st point
   @param  color  Color 16-bit 5-6-5 Color to draw line with
*/
/**************************************************************************/
void GFXcanvas16::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                uint16_t color) {
 8003034:	b590      	push	{r4, r7, lr}
 8003036:	b089      	sub	sp, #36	@ 0x24
 8003038:	af02      	add	r7, sp, #8
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	4608      	mov	r0, r1
 800303e:	4611      	mov	r1, r2
 8003040:	461a      	mov	r2, r3
 8003042:	4603      	mov	r3, r0
 8003044:	817b      	strh	r3, [r7, #10]
 8003046:	460b      	mov	r3, r1
 8003048:	813b      	strh	r3, [r7, #8]
 800304a:	4613      	mov	r3, r2
 800304c:	80fb      	strh	r3, [r7, #6]
  if (w < 0) { // Convert negative widths to positive equivalent
 800304e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003052:	2b00      	cmp	r3, #0
 8003054:	da15      	bge.n	8003082 <_ZN11GFXcanvas1613drawFastHLineEssst+0x4e>
    w *= -1;
 8003056:	88fb      	ldrh	r3, [r7, #6]
 8003058:	425b      	negs	r3, r3
 800305a:	b29b      	uxth	r3, r3
 800305c:	80fb      	strh	r3, [r7, #6]
    x -= w - 1;
 800305e:	897a      	ldrh	r2, [r7, #10]
 8003060:	88fb      	ldrh	r3, [r7, #6]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	b29b      	uxth	r3, r3
 8003066:	3301      	adds	r3, #1
 8003068:	b29b      	uxth	r3, r3
 800306a:	817b      	strh	r3, [r7, #10]
    if (x < 0) {
 800306c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003070:	2b00      	cmp	r3, #0
 8003072:	da06      	bge.n	8003082 <_ZN11GFXcanvas1613drawFastHLineEssst+0x4e>
      w += x;
 8003074:	88fa      	ldrh	r2, [r7, #6]
 8003076:	897b      	ldrh	r3, [r7, #10]
 8003078:	4413      	add	r3, r2
 800307a:	b29b      	uxth	r3, r3
 800307c:	80fb      	strh	r3, [r7, #6]
      x = 0;
 800307e:	2300      	movs	r3, #0
 8003080:	817b      	strh	r3, [r7, #10]
    }
  }

  // Edge rejection (no-draw if totally off canvas)
  if ((y < 0) || (y >= height()) || (x >= width()) || ((x + w - 1) < 0)) {
 8003082:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003086:	2b00      	cmp	r3, #0
 8003088:	db1a      	blt.n	80030c0 <_ZN11GFXcanvas1613drawFastHLineEssst+0x8c>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	4618      	mov	r0, r3
 800308e:	f7fe fa34 	bl	80014fa <_ZNK12Adafruit_GFX6heightEv>
 8003092:	4603      	mov	r3, r0
 8003094:	461a      	mov	r2, r3
 8003096:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800309a:	4293      	cmp	r3, r2
 800309c:	da10      	bge.n	80030c0 <_ZN11GFXcanvas1613drawFastHLineEssst+0x8c>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7fe fa1d 	bl	80014e0 <_ZNK12Adafruit_GFX5widthEv>
 80030a6:	4603      	mov	r3, r0
 80030a8:	461a      	mov	r2, r3
 80030aa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80030ae:	4293      	cmp	r3, r2
 80030b0:	da06      	bge.n	80030c0 <_ZN11GFXcanvas1613drawFastHLineEssst+0x8c>
 80030b2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80030b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030ba:	4413      	add	r3, r2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	dc01      	bgt.n	80030c4 <_ZN11GFXcanvas1613drawFastHLineEssst+0x90>
 80030c0:	2301      	movs	r3, #1
 80030c2:	e000      	b.n	80030c6 <_ZN11GFXcanvas1613drawFastHLineEssst+0x92>
 80030c4:	2300      	movs	r3, #0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f040 80c8 	bne.w	800325c <_ZN11GFXcanvas1613drawFastHLineEssst+0x228>
    return;
  }

  if (x < 0) { // Clip left
 80030cc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	da06      	bge.n	80030e2 <_ZN11GFXcanvas1613drawFastHLineEssst+0xae>
    w += x;
 80030d4:	88fa      	ldrh	r2, [r7, #6]
 80030d6:	897b      	ldrh	r3, [r7, #10]
 80030d8:	4413      	add	r3, r2
 80030da:	b29b      	uxth	r3, r3
 80030dc:	80fb      	strh	r3, [r7, #6]
    x = 0;
 80030de:	2300      	movs	r3, #0
 80030e0:	817b      	strh	r3, [r7, #10]
  }
  if (x + w >= width()) { // Clip right
 80030e2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80030e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030ea:	18d4      	adds	r4, r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe f9f6 	bl	80014e0 <_ZNK12Adafruit_GFX5widthEv>
 80030f4:	4603      	mov	r3, r0
 80030f6:	429c      	cmp	r4, r3
 80030f8:	bfac      	ite	ge
 80030fa:	2301      	movge	r3, #1
 80030fc:	2300      	movlt	r3, #0
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	d009      	beq.n	8003118 <_ZN11GFXcanvas1613drawFastHLineEssst+0xe4>
    w = width() - x;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4618      	mov	r0, r3
 8003108:	f7fe f9ea 	bl	80014e0 <_ZNK12Adafruit_GFX5widthEv>
 800310c:	4603      	mov	r3, r0
 800310e:	b29a      	uxth	r2, r3
 8003110:	897b      	ldrh	r3, [r7, #10]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	b29b      	uxth	r3, r3
 8003116:	80fb      	strh	r3, [r7, #6]
  }

  if (getRotation() == 0) {
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4618      	mov	r0, r3
 800311c:	f7fe f9fa 	bl	8001514 <_ZNK12Adafruit_GFX11getRotationEv>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	bf0c      	ite	eq
 8003126:	2301      	moveq	r3, #1
 8003128:	2300      	movne	r3, #0
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00c      	beq.n	800314a <_ZN11GFXcanvas1613drawFastHLineEssst+0x116>
    drawFastRawHLine(x, y, w, color);
 8003130:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003134:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003138:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800313c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	4603      	mov	r3, r0
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 f8cb 	bl	80032de <_ZN11GFXcanvas1616drawFastRawHLineEssst>
 8003148:	e089      	b.n	800325e <_ZN11GFXcanvas1613drawFastHLineEssst+0x22a>
  } else if (getRotation() == 1) {
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	4618      	mov	r0, r3
 800314e:	f7fe f9e1 	bl	8001514 <_ZNK12Adafruit_GFX11getRotationEv>
 8003152:	4603      	mov	r3, r0
 8003154:	2b01      	cmp	r3, #1
 8003156:	bf0c      	ite	eq
 8003158:	2301      	moveq	r3, #1
 800315a:	2300      	movne	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d01a      	beq.n	8003198 <_ZN11GFXcanvas1613drawFastHLineEssst+0x164>
    int16_t t = x;
 8003162:	897b      	ldrh	r3, [r7, #10]
 8003164:	82bb      	strh	r3, [r7, #20]
    x = WIDTH - 1 - y;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800316c:	b29a      	uxth	r2, r3
 800316e:	893b      	ldrh	r3, [r7, #8]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29b      	uxth	r3, r3
 8003178:	817b      	strh	r3, [r7, #10]
    y = t;
 800317a:	8abb      	ldrh	r3, [r7, #20]
 800317c:	813b      	strh	r3, [r7, #8]
    drawFastRawVLine(x, y, w, color);
 800317e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003182:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003186:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800318a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	4603      	mov	r3, r0
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 f867 	bl	8003264 <_ZN11GFXcanvas1616drawFastRawVLineEssst>
 8003196:	e062      	b.n	800325e <_ZN11GFXcanvas1613drawFastHLineEssst+0x22a>
  } else if (getRotation() == 2) {
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4618      	mov	r0, r3
 800319c:	f7fe f9ba 	bl	8001514 <_ZNK12Adafruit_GFX11getRotationEv>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	bf0c      	ite	eq
 80031a6:	2301      	moveq	r3, #1
 80031a8:	2300      	movne	r3, #0
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d027      	beq.n	8003200 <_ZN11GFXcanvas1613drawFastHLineEssst+0x1cc>
    x = WIDTH - 1 - x;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	897b      	ldrh	r3, [r7, #10]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	b29b      	uxth	r3, r3
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	817b      	strh	r3, [r7, #10]
    y = HEIGHT - 1 - y;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	893b      	ldrh	r3, [r7, #8]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	3b01      	subs	r3, #1
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	813b      	strh	r3, [r7, #8]

    x -= w - 1;
 80031d8:	897a      	ldrh	r2, [r7, #10]
 80031da:	88fb      	ldrh	r3, [r7, #6]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	b29b      	uxth	r3, r3
 80031e0:	3301      	adds	r3, #1
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	817b      	strh	r3, [r7, #10]
    drawFastRawHLine(x, y, w, color);
 80031e6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80031ea:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80031ee:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80031f2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	4603      	mov	r3, r0
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f000 f870 	bl	80032de <_ZN11GFXcanvas1616drawFastRawHLineEssst>
 80031fe:	e02e      	b.n	800325e <_ZN11GFXcanvas1613drawFastHLineEssst+0x22a>
  } else if (getRotation() == 3) {
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4618      	mov	r0, r3
 8003204:	f7fe f986 	bl	8001514 <_ZNK12Adafruit_GFX11getRotationEv>
 8003208:	4603      	mov	r3, r0
 800320a:	2b03      	cmp	r3, #3
 800320c:	bf0c      	ite	eq
 800320e:	2301      	moveq	r3, #1
 8003210:	2300      	movne	r3, #0
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	d022      	beq.n	800325e <_ZN11GFXcanvas1613drawFastHLineEssst+0x22a>
    int16_t t = x;
 8003218:	897b      	ldrh	r3, [r7, #10]
 800321a:	82fb      	strh	r3, [r7, #22]
    x = y;
 800321c:	893b      	ldrh	r3, [r7, #8]
 800321e:	817b      	strh	r3, [r7, #10]
    y = HEIGHT - 1 - t;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003226:	b29a      	uxth	r2, r3
 8003228:	8afb      	ldrh	r3, [r7, #22]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	b29b      	uxth	r3, r3
 800322e:	3b01      	subs	r3, #1
 8003230:	b29b      	uxth	r3, r3
 8003232:	813b      	strh	r3, [r7, #8]
    y -= w - 1;
 8003234:	893a      	ldrh	r2, [r7, #8]
 8003236:	88fb      	ldrh	r3, [r7, #6]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	b29b      	uxth	r3, r3
 800323c:	3301      	adds	r3, #1
 800323e:	b29b      	uxth	r3, r3
 8003240:	813b      	strh	r3, [r7, #8]
    drawFastRawVLine(x, y, w, color);
 8003242:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003246:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800324a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800324e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	4603      	mov	r3, r0
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 f805 	bl	8003264 <_ZN11GFXcanvas1616drawFastRawVLineEssst>
 800325a:	e000      	b.n	800325e <_ZN11GFXcanvas1613drawFastHLineEssst+0x22a>
    return;
 800325c:	bf00      	nop
  }
}
 800325e:	371c      	adds	r7, #28
 8003260:	46bd      	mov	sp, r7
 8003262:	bd90      	pop	{r4, r7, pc}

08003264 <_ZN11GFXcanvas1616drawFastRawVLineEssst>:
   @param    h   length of vertical line to be drawn, including first point
   @param    color   color 16-bit 5-6-5 Color to draw line with
*/
/**************************************************************************/
void GFXcanvas16::drawFastRawVLine(int16_t x, int16_t y, int16_t h,
                                   uint16_t color) {
 8003264:	b480      	push	{r7}
 8003266:	b087      	sub	sp, #28
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	4608      	mov	r0, r1
 800326e:	4611      	mov	r1, r2
 8003270:	461a      	mov	r2, r3
 8003272:	4603      	mov	r3, r0
 8003274:	817b      	strh	r3, [r7, #10]
 8003276:	460b      	mov	r3, r1
 8003278:	813b      	strh	r3, [r7, #8]
 800327a:	4613      	mov	r3, r2
 800327c:	80fb      	strh	r3, [r7, #6]
  // x & y already in raw (rotation 0) coordinates, no need to transform.
  uint16_t *buffer_ptr = buffer + y * WIDTH + x;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003282:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003286:	68f9      	ldr	r1, [r7, #12]
 8003288:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800328c:	fb01 f303 	mul.w	r3, r1, r3
 8003290:	4619      	mov	r1, r3
 8003292:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003296:	440b      	add	r3, r1
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	4413      	add	r3, r2
 800329c:	617b      	str	r3, [r7, #20]
  for (int16_t i = 0; i < h; i++) {
 800329e:	2300      	movs	r3, #0
 80032a0:	827b      	strh	r3, [r7, #18]
 80032a2:	e00f      	b.n	80032c4 <_ZN11GFXcanvas1616drawFastRawVLineEssst+0x60>
    (*buffer_ptr) = color;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	8c3a      	ldrh	r2, [r7, #32]
 80032a8:	801a      	strh	r2, [r3, #0]
    buffer_ptr += WIDTH;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	4413      	add	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]
  for (int16_t i = 0; i < h; i++) {
 80032b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80032bc:	b29b      	uxth	r3, r3
 80032be:	3301      	adds	r3, #1
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	827b      	strh	r3, [r7, #18]
 80032c4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80032c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	dbe9      	blt.n	80032a4 <_ZN11GFXcanvas1616drawFastRawVLineEssst+0x40>
  }
}
 80032d0:	bf00      	nop
 80032d2:	bf00      	nop
 80032d4:	371c      	adds	r7, #28
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <_ZN11GFXcanvas1616drawFastRawHLineEssst>:
   @param    w   length of horizontal line to be drawn, including first point
   @param    color   color 16-bit 5-6-5 Color to draw line with
*/
/**************************************************************************/
void GFXcanvas16::drawFastRawHLine(int16_t x, int16_t y, int16_t w,
                                   uint16_t color) {
 80032de:	b480      	push	{r7}
 80032e0:	b087      	sub	sp, #28
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	60f8      	str	r0, [r7, #12]
 80032e6:	4608      	mov	r0, r1
 80032e8:	4611      	mov	r1, r2
 80032ea:	461a      	mov	r2, r3
 80032ec:	4603      	mov	r3, r0
 80032ee:	817b      	strh	r3, [r7, #10]
 80032f0:	460b      	mov	r3, r1
 80032f2:	813b      	strh	r3, [r7, #8]
 80032f4:	4613      	mov	r3, r2
 80032f6:	80fb      	strh	r3, [r7, #6]
  // x & y already in raw (rotation 0) coordinates, no need to transform.
  uint32_t buffer_index = y * WIDTH + x;
 80032f8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003302:	fb03 f202 	mul.w	r2, r3, r2
 8003306:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800330a:	4413      	add	r3, r2
 800330c:	613b      	str	r3, [r7, #16]
  for (uint32_t i = buffer_index; i < buffer_index + w; i++) {
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	617b      	str	r3, [r7, #20]
 8003312:	e009      	b.n	8003328 <_ZN11GFXcanvas1616drawFastRawHLineEssst+0x4a>
    buffer[i] = color;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	4413      	add	r3, r2
 800331e:	8c3a      	ldrh	r2, [r7, #32]
 8003320:	801a      	strh	r2, [r3, #0]
  for (uint32_t i = buffer_index; i < buffer_index + w; i++) {
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	3301      	adds	r3, #1
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	4413      	add	r3, r2
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	429a      	cmp	r2, r3
 8003334:	d3ee      	bcc.n	8003314 <_ZN11GFXcanvas1616drawFastRawHLineEssst+0x36>
  }
}
 8003336:	bf00      	nop
 8003338:	bf00      	nop
 800333a:	371c      	adds	r7, #28
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 8003344:	b590      	push	{r4, r7, lr}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <_ZN5Print5writeEPKc+0x14>
 8003354:	2300      	movs	r3, #0
 8003356:	e00d      	b.n	8003374 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	3304      	adds	r3, #4
 800335e:	681c      	ldr	r4, [r3, #0]
 8003360:	6838      	ldr	r0, [r7, #0]
 8003362:	f7fc ff6d 	bl	8000240 <strlen>
 8003366:	4603      	mov	r3, r0
 8003368:	461a      	mov	r2, r3
 800336a:	6839      	ldr	r1, [r7, #0]
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	47a0      	blx	r4
 8003370:	4603      	mov	r3, r0
 8003372:	bf00      	nop
    }
 8003374:	4618      	mov	r0, r3
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	bd90      	pop	{r4, r7, pc}

0800337c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8003388:	2300      	movs	r3, #0
 800338a:	617b      	str	r3, [r7, #20]
  while (size--) {
 800338c:	e014      	b.n	80033b8 <_ZN5Print5writeEPKhj+0x3c>
    if (write(*buffer++)) n++;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	1c59      	adds	r1, r3, #1
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	4619      	mov	r1, r3
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	4790      	blx	r2
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	bf14      	ite	ne
 80033a8:	2301      	movne	r3, #1
 80033aa:	2300      	moveq	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00d      	beq.n	80033ce <_ZN5Print5writeEPKhj+0x52>
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	3301      	adds	r3, #1
 80033b6:	617b      	str	r3, [r7, #20]
  while (size--) {
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	1e5a      	subs	r2, r3, #1
 80033bc:	607a      	str	r2, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	bf14      	ite	ne
 80033c2:	2301      	movne	r3, #1
 80033c4:	2300      	moveq	r3, #0
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1e0      	bne.n	800338e <_ZN5Print5writeEPKhj+0x12>
 80033cc:	e000      	b.n	80033d0 <_ZN5Print5writeEPKhj+0x54>
    else break;
 80033ce:	bf00      	nop
  }
  return n;
 80033d0:	697b      	ldr	r3, [r7, #20]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b082      	sub	sp, #8
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
 80033e2:	6039      	str	r1, [r7, #0]
  return write(str);
 80033e4:	6839      	ldr	r1, [r7, #0]
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7ff ffac 	bl	8003344 <_ZN5Print5writeEPKc>
 80033ec:	4603      	mov	r3, r0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <_ZN13ST7789V_STM32C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_t>:
#include "ST7789V_STM32.h"
#include "spi.h"


ST7789V_STM32::ST7789V_STM32(SPI_HandleTypeDef *hspi, GPIO_TypeDef *cs_port, uint16_t cs_pin,
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
 8003404:	807b      	strh	r3, [r7, #2]
                             GPIO_TypeDef *dc_port, uint16_t dc_pin, GPIO_TypeDef *rst_port, uint16_t rst_pin)
    : Adafruit_GFX(ST7789V_TFTWIDTH, ST7789V_TFTHEIGHT),
      _hspi(hspi), _cs_port(cs_port), _cs_pin(cs_pin),
      _dc_port(dc_port), _dc_pin(dc_pin), _rst_port(rst_port), _rst_pin(rst_pin),
      _inTransaction(false)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800340c:	21f0      	movs	r1, #240	@ 0xf0
 800340e:	4618      	mov	r0, r3
 8003410:	f7fe f8aa 	bl	8001568 <_ZN12Adafruit_GFXC1Ess>
 8003414:	4a17      	ldr	r2, [pc, #92]	@ (8003474 <_ZN13ST7789V_STM32C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_t+0x7c>)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	629a      	str	r2, [r3, #40]	@ 0x28
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	631a      	str	r2, [r3, #48]	@ 0x30
      _hspi(hspi), _cs_port(cs_port), _cs_pin(cs_pin),
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	635a      	str	r2, [r3, #52]	@ 0x34
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	639a      	str	r2, [r3, #56]	@ 0x38
      _dc_port(dc_port), _dc_pin(dc_pin), _rst_port(rst_port), _rst_pin(rst_pin),
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a3a      	ldr	r2, [r7, #32]
 8003448:	641a      	str	r2, [r3, #64]	@ 0x40
      _hspi(hspi), _cs_port(cs_port), _cs_pin(cs_pin),
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	887a      	ldrh	r2, [r7, #2]
 800344e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      _dc_port(dc_port), _dc_pin(dc_pin), _rst_port(rst_port), _rst_pin(rst_pin),
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8bba      	ldrh	r2, [r7, #28]
 8003456:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800345e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      _inTransaction(false)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
{
}
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	0801d6f8 	.word	0x0801d6f8

08003478 <_ZN13ST7789V_STM325beginEv>:

void ST7789V_STM32::begin(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  // dmaState = INIT;



  // Hardware reset sequence
  rstHigh();
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 fd0f 	bl	8003ea4 <_ZN13ST7789V_STM327rstHighEv>
  HAL_Delay(1);
 8003486:	2001      	movs	r0, #1
 8003488:	f002 f85d 	bl	8005546 <HAL_Delay>
  rstLow();
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 fcf8 	bl	8003e82 <_ZN13ST7789V_STM326rstLowEv>
  HAL_Delay(10);
 8003492:	200a      	movs	r0, #10
 8003494:	f002 f857 	bl	8005546 <HAL_Delay>
  rstHigh();
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 fd03 	bl	8003ea4 <_ZN13ST7789V_STM327rstHighEv>
  HAL_Delay(120);
 800349e:	2078      	movs	r0, #120	@ 0x78
 80034a0:	f002 f851 	bl	8005546 <HAL_Delay>

  csHigh();
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 fcb9 	bl	8003e1c <_ZN13ST7789V_STM326csHighEv>

  // ST7789V initialization sequence (based on your vendor code)
  writeCommand(ST7789V_COLMOD); // 0x3A - Pixel format
 80034aa:	213a      	movs	r1, #58	@ 0x3a
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fba7 	bl	8003c00 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x05);              // 16-bit color
 80034b2:	2105      	movs	r1, #5
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 fbce 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(ST7789V_MADCTL); // 0x36 - Memory access control
 80034ba:	2136      	movs	r1, #54	@ 0x36
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 fb9f 	bl	8003c00 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x00);              // Default orientation
 80034c2:	2100      	movs	r1, #0
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 fbc6 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>

  // Frame rate control
  writeCommand(0xB2);
 80034ca:	21b2      	movs	r1, #178	@ 0xb2
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 fb97 	bl	8003c00 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x05);
 80034d2:	2105      	movs	r1, #5
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 fbbe 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x05);
 80034da:	2105      	movs	r1, #5
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 fbba 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x00);
 80034e2:	2100      	movs	r1, #0
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 fbb6 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x33);
 80034ea:	2133      	movs	r1, #51	@ 0x33
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 fbb2 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x33);
 80034f2:	2133      	movs	r1, #51	@ 0x33
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 fbae 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xB7);
 80034fa:	21b7      	movs	r1, #183	@ 0xb7
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 fb7f 	bl	8003c00 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x35);
 8003502:	2135      	movs	r1, #53	@ 0x35
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 fba6 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>

  // Power settings
  writeCommand(0xBB); // VCOM
 800350a:	21bb      	movs	r1, #187	@ 0xbb
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 fb77 	bl	8003c00 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x3F);
 8003512:	213f      	movs	r1, #63	@ 0x3f
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 fb9e 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xC0);
 800351a:	21c0      	movs	r1, #192	@ 0xc0
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 fb6f 	bl	8003c00 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x2C);
 8003522:	212c      	movs	r1, #44	@ 0x2c
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 fb96 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xC2);
 800352a:	21c2      	movs	r1, #194	@ 0xc2
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 fb67 	bl	8003c00 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x01);
 8003532:	2101      	movs	r1, #1
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 fb8e 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xC3);
 800353a:	21c3      	movs	r1, #195	@ 0xc3
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fb5f 	bl	8003c00 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x0F);
 8003542:	210f      	movs	r1, #15
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 fb86 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xC4);
 800354a:	21c4      	movs	r1, #196	@ 0xc4
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 fb57 	bl	8003c00 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x20);
 8003552:	2120      	movs	r1, #32
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 fb7e 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xC6);
 800355a:	21c6      	movs	r1, #198	@ 0xc6
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 fb4f 	bl	8003c00 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x11);
 8003562:	2111      	movs	r1, #17
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 fb76 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xD0);
 800356a:	21d0      	movs	r1, #208	@ 0xd0
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 fb47 	bl	8003c00 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0xA4);
 8003572:	21a4      	movs	r1, #164	@ 0xa4
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 fb6e 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0xA1);
 800357a:	21a1      	movs	r1, #161	@ 0xa1
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 fb6a 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xE8);
 8003582:	21e8      	movs	r1, #232	@ 0xe8
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 fb3b 	bl	8003c00 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x03);
 800358a:	2103      	movs	r1, #3
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 fb62 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xE9);
 8003592:	21e9      	movs	r1, #233	@ 0xe9
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 fb33 	bl	8003c00 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x09);
 800359a:	2109      	movs	r1, #9
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 fb5a 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x09);
 80035a2:	2109      	movs	r1, #9
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 fb56 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x08);
 80035aa:	2108      	movs	r1, #8
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 fb52 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>

  // Gamma settings
  writeCommand(0xE0);
 80035b2:	21e0      	movs	r1, #224	@ 0xe0
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 fb23 	bl	8003c00 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0xD0);
 80035ba:	21d0      	movs	r1, #208	@ 0xd0
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 fb4a 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x05);
 80035c2:	2105      	movs	r1, #5
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 fb46 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x09);
 80035ca:	2109      	movs	r1, #9
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 fb42 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x09);
 80035d2:	2109      	movs	r1, #9
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 fb3e 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x08);
 80035da:	2108      	movs	r1, #8
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 fb3a 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x14);
 80035e2:	2114      	movs	r1, #20
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 fb36 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x28);
 80035ea:	2128      	movs	r1, #40	@ 0x28
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 fb32 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x33);
 80035f2:	2133      	movs	r1, #51	@ 0x33
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 fb2e 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x3F);
 80035fa:	213f      	movs	r1, #63	@ 0x3f
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 fb2a 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x07);
 8003602:	2107      	movs	r1, #7
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 fb26 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x13);
 800360a:	2113      	movs	r1, #19
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 fb22 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x14);
 8003612:	2114      	movs	r1, #20
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 fb1e 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x28);
 800361a:	2128      	movs	r1, #40	@ 0x28
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 fb1a 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x30);
 8003622:	2130      	movs	r1, #48	@ 0x30
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 fb16 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xE1);
 800362a:	21e1      	movs	r1, #225	@ 0xe1
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 fae7 	bl	8003c00 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0xD0);
 8003632:	21d0      	movs	r1, #208	@ 0xd0
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 fb0e 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x05);
 800363a:	2105      	movs	r1, #5
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 fb0a 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x09);
 8003642:	2109      	movs	r1, #9
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 fb06 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x09);
 800364a:	2109      	movs	r1, #9
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 fb02 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x08);
 8003652:	2108      	movs	r1, #8
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 fafe 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x03);
 800365a:	2103      	movs	r1, #3
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 fafa 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x24);
 8003662:	2124      	movs	r1, #36	@ 0x24
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 faf6 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x32);
 800366a:	2132      	movs	r1, #50	@ 0x32
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 faf2 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x32);
 8003672:	2132      	movs	r1, #50	@ 0x32
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 faee 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x3B);
 800367a:	213b      	movs	r1, #59	@ 0x3b
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 faea 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x38);
 8003682:	2138      	movs	r1, #56	@ 0x38
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 fae6 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x14);
 800368a:	2114      	movs	r1, #20
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 fae2 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x13);
 8003692:	2113      	movs	r1, #19
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 fade 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x28);
 800369a:	2128      	movs	r1, #40	@ 0x28
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 fada 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x2F);
 80036a2:	212f      	movs	r1, #47	@ 0x2f
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 fad6 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(ST7789V_INVON); // 0x21 - Inversion on
 80036aa:	2121      	movs	r1, #33	@ 0x21
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 faa7 	bl	8003c00 <_ZN13ST7789V_STM3212writeCommandEh>

  // Set display window
  writeCommand(ST7789V_CASET); // 0x2A - Column address set
 80036b2:	212a      	movs	r1, #42	@ 0x2a
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 faa3 	bl	8003c00 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x00);
 80036ba:	2100      	movs	r1, #0
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 faca 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x00);
 80036c2:	2100      	movs	r1, #0
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 fac6 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x00);
 80036ca:	2100      	movs	r1, #0
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 fac2 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0xEF); // 239 (240-1)
 80036d2:	21ef      	movs	r1, #239	@ 0xef
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 fabe 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(ST7789V_RASET); // 0x2B - Row address set
 80036da:	212b      	movs	r1, #43	@ 0x2b
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 fa8f 	bl	8003c00 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x00);
 80036e2:	2100      	movs	r1, #0
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 fab6 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x00);
 80036ea:	2100      	movs	r1, #0
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 fab2 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x01);
 80036f2:	2101      	movs	r1, #1
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 faae 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x3F); // 319 (320-1)
 80036fa:	213f      	movs	r1, #63	@ 0x3f
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 faaa 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(ST7789V_SLPOUT); // 0x11 - Exit sleep mode
 8003702:	2111      	movs	r1, #17
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 fa7b 	bl	8003c00 <_ZN13ST7789V_STM3212writeCommandEh>
  HAL_Delay(120);
 800370a:	2078      	movs	r0, #120	@ 0x78
 800370c:	f001 ff1b 	bl	8005546 <HAL_Delay>

  writeCommand(ST7789V_DISPON); // 0x29 - Display on
 8003710:	2129      	movs	r1, #41	@ 0x29
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 fa74 	bl	8003c00 <_ZN13ST7789V_STM3212writeCommandEh>
  writeCommand(ST7789V_RAMWR);  // 0x2C - Memory write
 8003718:	212c      	movs	r1, #44	@ 0x2c
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 fa70 	bl	8003c00 <_ZN13ST7789V_STM3212writeCommandEh>
}
 8003720:	bf00      	nop
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <_ZN13ST7789V_STM329drawPixelEsst>:

void ST7789V_STM32::drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af02      	add	r7, sp, #8
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	4608      	mov	r0, r1
 8003732:	4611      	mov	r1, r2
 8003734:	461a      	mov	r2, r3
 8003736:	4603      	mov	r3, r0
 8003738:	817b      	strh	r3, [r7, #10]
 800373a:	460b      	mov	r3, r1
 800373c:	813b      	strh	r3, [r7, #8]
 800373e:	4613      	mov	r3, r2
 8003740:	80fb      	strh	r3, [r7, #6]
  if ((x < 0) || (x >= _width) || (y < 0) || (y >= _height))
 8003742:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003746:	2b00      	cmp	r3, #0
 8003748:	db20      	blt.n	800378c <_ZN13ST7789V_STM329drawPixelEsst+0x64>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003750:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003754:	429a      	cmp	r2, r3
 8003756:	da19      	bge.n	800378c <_ZN13ST7789V_STM329drawPixelEsst+0x64>
 8003758:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	db15      	blt.n	800378c <_ZN13ST7789V_STM329drawPixelEsst+0x64>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003766:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800376a:	429a      	cmp	r2, r3
 800376c:	da0e      	bge.n	800378c <_ZN13ST7789V_STM329drawPixelEsst+0x64>
    return;

  setWindow(x, y, x, y);
 800376e:	8979      	ldrh	r1, [r7, #10]
 8003770:	893a      	ldrh	r2, [r7, #8]
 8003772:	8978      	ldrh	r0, [r7, #10]
 8003774:	893b      	ldrh	r3, [r7, #8]
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	4603      	mov	r3, r0
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 fabb 	bl	8003cf6 <_ZN13ST7789V_STM329setWindowEtttt>
  writeData16(color);
 8003780:	88fb      	ldrh	r3, [r7, #6]
 8003782:	4619      	mov	r1, r3
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 fa8e 	bl	8003ca6 <_ZN13ST7789V_STM3211writeData16Et>
 800378a:	e000      	b.n	800378e <_ZN13ST7789V_STM329drawPixelEsst+0x66>
    return;
 800378c:	bf00      	nop
}
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <_ZN13ST7789V_STM3210startWriteEv>:

void ST7789V_STM32::startWrite(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  if (!_inTransaction)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80037a2:	f083 0301 	eor.w	r3, r3, #1
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d006      	beq.n	80037ba <_ZN13ST7789V_STM3210startWriteEv+0x26>
  {
    csLow();
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 fb24 	bl	8003dfa <_ZN13ST7789V_STM325csLowEv>
    _inTransaction = true;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
  }
}
 80037ba:	bf00      	nop
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <_ZN13ST7789V_STM328endWriteEv>:

void ST7789V_STM32::endWrite(void)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b082      	sub	sp, #8
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  if (_inTransaction)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d006      	beq.n	80037e2 <_ZN13ST7789V_STM328endWriteEv+0x20>
  {
    csHigh();
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 fb21 	bl	8003e1c <_ZN13ST7789V_STM326csHighEv>
    _inTransaction = false;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
  }
}
 80037e2:	bf00      	nop
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <_ZN13ST7789V_STM3210writePixelEsst>:

void ST7789V_STM32::writePixel(int16_t x, int16_t y, uint16_t color)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b086      	sub	sp, #24
 80037ee:	af02      	add	r7, sp, #8
 80037f0:	60f8      	str	r0, [r7, #12]
 80037f2:	4608      	mov	r0, r1
 80037f4:	4611      	mov	r1, r2
 80037f6:	461a      	mov	r2, r3
 80037f8:	4603      	mov	r3, r0
 80037fa:	817b      	strh	r3, [r7, #10]
 80037fc:	460b      	mov	r3, r1
 80037fe:	813b      	strh	r3, [r7, #8]
 8003800:	4613      	mov	r3, r2
 8003802:	80fb      	strh	r3, [r7, #6]
  if ((x < 0) || (x >= _width) || (y < 0) || (y >= _height))
 8003804:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003808:	2b00      	cmp	r3, #0
 800380a:	db20      	blt.n	800384e <_ZN13ST7789V_STM3210writePixelEsst+0x64>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003812:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003816:	429a      	cmp	r2, r3
 8003818:	da19      	bge.n	800384e <_ZN13ST7789V_STM3210writePixelEsst+0x64>
 800381a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	db15      	blt.n	800384e <_ZN13ST7789V_STM3210writePixelEsst+0x64>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003828:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800382c:	429a      	cmp	r2, r3
 800382e:	da0e      	bge.n	800384e <_ZN13ST7789V_STM3210writePixelEsst+0x64>
    return;

  setWindow(x, y, x, y);
 8003830:	8979      	ldrh	r1, [r7, #10]
 8003832:	893a      	ldrh	r2, [r7, #8]
 8003834:	8978      	ldrh	r0, [r7, #10]
 8003836:	893b      	ldrh	r3, [r7, #8]
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	4603      	mov	r3, r0
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 fa5a 	bl	8003cf6 <_ZN13ST7789V_STM329setWindowEtttt>
  writeData16(color);
 8003842:	88fb      	ldrh	r3, [r7, #6]
 8003844:	4619      	mov	r1, r3
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 fa2d 	bl	8003ca6 <_ZN13ST7789V_STM3211writeData16Et>
 800384c:	e000      	b.n	8003850 <_ZN13ST7789V_STM3210writePixelEsst+0x66>
    return;
 800384e:	bf00      	nop
}
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <_ZN13ST7789V_STM3213writeFillRectEsssst>:

void ST7789V_STM32::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b08a      	sub	sp, #40	@ 0x28
 800385a:	af02      	add	r7, sp, #8
 800385c:	60f8      	str	r0, [r7, #12]
 800385e:	4608      	mov	r0, r1
 8003860:	4611      	mov	r1, r2
 8003862:	461a      	mov	r2, r3
 8003864:	4603      	mov	r3, r0
 8003866:	817b      	strh	r3, [r7, #10]
 8003868:	460b      	mov	r3, r1
 800386a:	813b      	strh	r3, [r7, #8]
 800386c:	4613      	mov	r3, r2
 800386e:	80fb      	strh	r3, [r7, #6]
  if ((x >= _width) || (y >= _height))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003876:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800387a:	429a      	cmp	r2, r3
 800387c:	da6c      	bge.n	8003958 <_ZN13ST7789V_STM3213writeFillRectEsssst+0x102>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003884:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003888:	429a      	cmp	r2, r3
 800388a:	da65      	bge.n	8003958 <_ZN13ST7789V_STM3213writeFillRectEsssst+0x102>
    return;
  int16_t x2 = x + w - 1, y2 = y + h - 1;
 800388c:	897a      	ldrh	r2, [r7, #10]
 800388e:	88fb      	ldrh	r3, [r7, #6]
 8003890:	4413      	add	r3, r2
 8003892:	b29b      	uxth	r3, r3
 8003894:	3b01      	subs	r3, #1
 8003896:	b29b      	uxth	r3, r3
 8003898:	83fb      	strh	r3, [r7, #30]
 800389a:	893a      	ldrh	r2, [r7, #8]
 800389c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800389e:	4413      	add	r3, r2
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	3b01      	subs	r3, #1
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	83bb      	strh	r3, [r7, #28]
  if ((x2 < 0) || (y2 < 0))
 80038a8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	db55      	blt.n	800395c <_ZN13ST7789V_STM3213writeFillRectEsssst+0x106>
 80038b0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	db51      	blt.n	800395c <_ZN13ST7789V_STM3213writeFillRectEsssst+0x106>
    return;

  // Clip to screen bounds
  if (x < 0)
 80038b8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	da01      	bge.n	80038c4 <_ZN13ST7789V_STM3213writeFillRectEsssst+0x6e>
  {
    x = 0;
 80038c0:	2300      	movs	r3, #0
 80038c2:	817b      	strh	r3, [r7, #10]
  }
  if (y < 0)
 80038c4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	da01      	bge.n	80038d0 <_ZN13ST7789V_STM3213writeFillRectEsssst+0x7a>
  {
    y = 0;
 80038cc:	2300      	movs	r3, #0
 80038ce:	813b      	strh	r3, [r7, #8]
  }
  if (x2 >= _width)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80038d6:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80038da:	429a      	cmp	r2, r3
 80038dc:	db06      	blt.n	80038ec <_ZN13ST7789V_STM3213writeFillRectEsssst+0x96>
  {
    x2 = _width - 1;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	83fb      	strh	r3, [r7, #30]
  }
  if (y2 >= _height)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80038f2:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	db06      	blt.n	8003908 <_ZN13ST7789V_STM3213writeFillRectEsssst+0xb2>
  {
    y2 = _height - 1;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003900:	b29b      	uxth	r3, r3
 8003902:	3b01      	subs	r3, #1
 8003904:	b29b      	uxth	r3, r3
 8003906:	83bb      	strh	r3, [r7, #28]
  }

  setWindow(x, y, x2, y2);
 8003908:	8979      	ldrh	r1, [r7, #10]
 800390a:	893a      	ldrh	r2, [r7, #8]
 800390c:	8bf8      	ldrh	r0, [r7, #30]
 800390e:	8bbb      	ldrh	r3, [r7, #28]
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	4603      	mov	r3, r0
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 f9ee 	bl	8003cf6 <_ZN13ST7789V_STM329setWindowEtttt>
  uint32_t pixels = (x2 - x + 1) * (y2 - y + 1);
 800391a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800391e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	3301      	adds	r3, #1
 8003926:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 800392a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800392e:	1a8a      	subs	r2, r1, r2
 8003930:	3201      	adds	r2, #1
 8003932:	fb02 f303 	mul.w	r3, r2, r3
 8003936:	617b      	str	r3, [r7, #20]

  for (uint32_t i = 0; i < pixels; i++)
 8003938:	2300      	movs	r3, #0
 800393a:	61bb      	str	r3, [r7, #24]
 800393c:	e007      	b.n	800394e <_ZN13ST7789V_STM3213writeFillRectEsssst+0xf8>
  {
    writeData16(color);
 800393e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003940:	4619      	mov	r1, r3
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 f9af 	bl	8003ca6 <_ZN13ST7789V_STM3211writeData16Et>
  for (uint32_t i = 0; i < pixels; i++)
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	3301      	adds	r3, #1
 800394c:	61bb      	str	r3, [r7, #24]
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	429a      	cmp	r2, r3
 8003954:	d3f3      	bcc.n	800393e <_ZN13ST7789V_STM3213writeFillRectEsssst+0xe8>
 8003956:	e002      	b.n	800395e <_ZN13ST7789V_STM3213writeFillRectEsssst+0x108>
    return;
 8003958:	bf00      	nop
 800395a:	e000      	b.n	800395e <_ZN13ST7789V_STM3213writeFillRectEsssst+0x108>
    return;
 800395c:	bf00      	nop
  }
}
 800395e:	3720      	adds	r7, #32
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <_ZN13ST7789V_STM3210fillScreenEt>:

void ST7789V_STM32::fillScreen(uint16_t color)
{
 8003964:	b590      	push	{r4, r7, lr}
 8003966:	b085      	sub	sp, #20
 8003968:	af02      	add	r7, sp, #8
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	460b      	mov	r3, r1
 800396e:	807b      	strh	r3, [r7, #2]
  writeFillRect(0, 0, _width, _height, color);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	331c      	adds	r3, #28
 8003976:	681c      	ldr	r4, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003984:	887a      	ldrh	r2, [r7, #2]
 8003986:	9201      	str	r2, [sp, #4]
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	460b      	mov	r3, r1
 800398c:	2200      	movs	r2, #0
 800398e:	2100      	movs	r1, #0
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	47a0      	blx	r4
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	bd90      	pop	{r4, r7, pc}

0800399c <_ZN13ST7789V_STM328fillRectEsssst>:

void ST7789V_STM32::fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 800399c:	b590      	push	{r4, r7, lr}
 800399e:	b087      	sub	sp, #28
 80039a0:	af02      	add	r7, sp, #8
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	4608      	mov	r0, r1
 80039a6:	4611      	mov	r1, r2
 80039a8:	461a      	mov	r2, r3
 80039aa:	4603      	mov	r3, r0
 80039ac:	817b      	strh	r3, [r7, #10]
 80039ae:	460b      	mov	r3, r1
 80039b0:	813b      	strh	r3, [r7, #8]
 80039b2:	4613      	mov	r3, r2
 80039b4:	80fb      	strh	r3, [r7, #6]
  startWrite();
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3314      	adds	r3, #20
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	4798      	blx	r3
  writeFillRect(x, y, w, h, color);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	331c      	adds	r3, #28
 80039c8:	681c      	ldr	r4, [r3, #0]
 80039ca:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80039ce:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80039d2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80039d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80039d8:	9301      	str	r3, [sp, #4]
 80039da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	4603      	mov	r3, r0
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	47a0      	blx	r4
  endWrite();
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	332c      	adds	r3, #44	@ 0x2c
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	4798      	blx	r3
}
 80039f2:	bf00      	nop
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd90      	pop	{r4, r7, pc}

080039fa <_ZN13ST7789V_STM3213drawFastVLineEssst>:

void ST7789V_STM32::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 80039fa:	b590      	push	{r4, r7, lr}
 80039fc:	b087      	sub	sp, #28
 80039fe:	af02      	add	r7, sp, #8
 8003a00:	60f8      	str	r0, [r7, #12]
 8003a02:	4608      	mov	r0, r1
 8003a04:	4611      	mov	r1, r2
 8003a06:	461a      	mov	r2, r3
 8003a08:	4603      	mov	r3, r0
 8003a0a:	817b      	strh	r3, [r7, #10]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	813b      	strh	r3, [r7, #8]
 8003a10:	4613      	mov	r3, r2
 8003a12:	80fb      	strh	r3, [r7, #6]
  startWrite();
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3314      	adds	r3, #20
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	4798      	blx	r3
  writeFillRect(x, y, 1, h, color);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	331c      	adds	r3, #28
 8003a26:	681c      	ldr	r4, [r3, #0]
 8003a28:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003a2c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003a30:	8c3b      	ldrh	r3, [r7, #32]
 8003a32:	9301      	str	r3, [sp, #4]
 8003a34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	47a0      	blx	r4
  endWrite();
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	332c      	adds	r3, #44	@ 0x2c
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	4798      	blx	r3
}
 8003a4c:	bf00      	nop
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd90      	pop	{r4, r7, pc}

08003a54 <_ZN13ST7789V_STM3214writeFastVLineEssst>:

void ST7789V_STM32::writeFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8003a54:	b590      	push	{r4, r7, lr}
 8003a56:	b087      	sub	sp, #28
 8003a58:	af02      	add	r7, sp, #8
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	4608      	mov	r0, r1
 8003a5e:	4611      	mov	r1, r2
 8003a60:	461a      	mov	r2, r3
 8003a62:	4603      	mov	r3, r0
 8003a64:	817b      	strh	r3, [r7, #10]
 8003a66:	460b      	mov	r3, r1
 8003a68:	813b      	strh	r3, [r7, #8]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	80fb      	strh	r3, [r7, #6]
  writeFillRect(x, y, 1, h, color);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	331c      	adds	r3, #28
 8003a74:	681c      	ldr	r4, [r3, #0]
 8003a76:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003a7a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003a7e:	8c3b      	ldrh	r3, [r7, #32]
 8003a80:	9301      	str	r3, [sp, #4]
 8003a82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	2301      	movs	r3, #1
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	47a0      	blx	r4
}
 8003a8e:	bf00      	nop
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd90      	pop	{r4, r7, pc}

08003a96 <_ZN13ST7789V_STM3213drawFastHLineEssst>:

void ST7789V_STM32::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8003a96:	b590      	push	{r4, r7, lr}
 8003a98:	b087      	sub	sp, #28
 8003a9a:	af02      	add	r7, sp, #8
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	4608      	mov	r0, r1
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	817b      	strh	r3, [r7, #10]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	813b      	strh	r3, [r7, #8]
 8003aac:	4613      	mov	r3, r2
 8003aae:	80fb      	strh	r3, [r7, #6]
  startWrite();
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	3314      	adds	r3, #20
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	4798      	blx	r3
  writeFillRect(x, y, w, 1, color);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	331c      	adds	r3, #28
 8003ac2:	681c      	ldr	r4, [r3, #0]
 8003ac4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003ac8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003acc:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003ad0:	8c3b      	ldrh	r3, [r7, #32]
 8003ad2:	9301      	str	r3, [sp, #4]
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	4603      	mov	r3, r0
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	47a0      	blx	r4
  endWrite();
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	332c      	adds	r3, #44	@ 0x2c
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	4798      	blx	r3
}
 8003aea:	bf00      	nop
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd90      	pop	{r4, r7, pc}

08003af2 <_ZN13ST7789V_STM3214writeFastHLineEssst>:

void ST7789V_STM32::writeFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8003af2:	b590      	push	{r4, r7, lr}
 8003af4:	b087      	sub	sp, #28
 8003af6:	af02      	add	r7, sp, #8
 8003af8:	60f8      	str	r0, [r7, #12]
 8003afa:	4608      	mov	r0, r1
 8003afc:	4611      	mov	r1, r2
 8003afe:	461a      	mov	r2, r3
 8003b00:	4603      	mov	r3, r0
 8003b02:	817b      	strh	r3, [r7, #10]
 8003b04:	460b      	mov	r3, r1
 8003b06:	813b      	strh	r3, [r7, #8]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	80fb      	strh	r3, [r7, #6]
  writeFillRect(x, y, w, 1, color);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	331c      	adds	r3, #28
 8003b12:	681c      	ldr	r4, [r3, #0]
 8003b14:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003b18:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003b1c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003b20:	8c3b      	ldrh	r3, [r7, #32]
 8003b22:	9301      	str	r3, [sp, #4]
 8003b24:	2301      	movs	r3, #1
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	4603      	mov	r3, r0
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	47a0      	blx	r4
}
 8003b2e:	bf00      	nop
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd90      	pop	{r4, r7, pc}
	...

08003b38 <_ZN13ST7789V_STM3211setRotationEh>:

void ST7789V_STM32::setRotation(uint8_t rotation)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	460b      	mov	r3, r1
 8003b42:	70fb      	strb	r3, [r7, #3]
  writeCommand(ST7789V_MADCTL);
 8003b44:	2136      	movs	r1, #54	@ 0x36
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f85a 	bl	8003c00 <_ZN13ST7789V_STM3212writeCommandEh>
  rotation = rotation % 4;
 8003b4c:	78fb      	ldrb	r3, [r7, #3]
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	70fb      	strb	r3, [r7, #3]

  switch (rotation)
 8003b54:	78fb      	ldrb	r3, [r7, #3]
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	d83a      	bhi.n	8003bd0 <_ZN13ST7789V_STM3211setRotationEh+0x98>
 8003b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b60 <_ZN13ST7789V_STM3211setRotationEh+0x28>)
 8003b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b60:	08003b71 	.word	0x08003b71
 8003b64:	08003b89 	.word	0x08003b89
 8003b68:	08003ba1 	.word	0x08003ba1
 8003b6c:	08003bb9 	.word	0x08003bb9
  {
  case 0:
    writeData(0x00);
 8003b70:	2100      	movs	r1, #0
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f86f 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
    _width = ST7789V_TFTWIDTH;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	22f0      	movs	r2, #240	@ 0xf0
 8003b7c:	819a      	strh	r2, [r3, #12]
    _height = ST7789V_TFTHEIGHT;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003b84:	81da      	strh	r2, [r3, #14]
    break;
 8003b86:	e023      	b.n	8003bd0 <_ZN13ST7789V_STM3211setRotationEh+0x98>
  case 1:
    writeData(0x60);
 8003b88:	2160      	movs	r1, #96	@ 0x60
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f863 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
    _width = ST7789V_TFTHEIGHT;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003b96:	819a      	strh	r2, [r3, #12]
    _height = ST7789V_TFTWIDTH;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	22f0      	movs	r2, #240	@ 0xf0
 8003b9c:	81da      	strh	r2, [r3, #14]
    break;
 8003b9e:	e017      	b.n	8003bd0 <_ZN13ST7789V_STM3211setRotationEh+0x98>
  case 2:
    writeData(0xC0);
 8003ba0:	21c0      	movs	r1, #192	@ 0xc0
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f857 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
    _width = ST7789V_TFTWIDTH;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	22f0      	movs	r2, #240	@ 0xf0
 8003bac:	819a      	strh	r2, [r3, #12]
    _height = ST7789V_TFTHEIGHT;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003bb4:	81da      	strh	r2, [r3, #14]
    break;
 8003bb6:	e00b      	b.n	8003bd0 <_ZN13ST7789V_STM3211setRotationEh+0x98>
  case 3:
    writeData(0xA0);
 8003bb8:	21a0      	movs	r1, #160	@ 0xa0
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f84b 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
    _width = ST7789V_TFTHEIGHT;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003bc6:	819a      	strh	r2, [r3, #12]
    _height = ST7789V_TFTWIDTH;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	22f0      	movs	r2, #240	@ 0xf0
 8003bcc:	81da      	strh	r2, [r3, #14]
    break;
 8003bce:	bf00      	nop
  }
}
 8003bd0:	bf00      	nop
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <_ZN13ST7789V_STM3213invertDisplayEb>:

void ST7789V_STM32::invertDisplay(bool invert)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	70fb      	strb	r3, [r7, #3]
  writeCommand(invert ? ST7789V_INVON : ST7789V_INVOFF);
 8003be4:	78fb      	ldrb	r3, [r7, #3]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <_ZN13ST7789V_STM3213invertDisplayEb+0x16>
 8003bea:	2321      	movs	r3, #33	@ 0x21
 8003bec:	e000      	b.n	8003bf0 <_ZN13ST7789V_STM3213invertDisplayEb+0x18>
 8003bee:	2320      	movs	r3, #32
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f804 	bl	8003c00 <_ZN13ST7789V_STM3212writeCommandEh>
}
 8003bf8:	bf00      	nop
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <_ZN13ST7789V_STM3212writeCommandEh>:
  writeCommand(ST7789V_DISPON);
}

// Private methods
void ST7789V_STM32::writeCommand(uint8_t cmd)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	70fb      	strb	r3, [r7, #3]
  if (!_inTransaction)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8003c12:	f083 0301 	eor.w	r3, r3, #1
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <_ZN13ST7789V_STM3212writeCommandEh+0x22>
    csLow();
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f8ec 	bl	8003dfa <_ZN13ST7789V_STM325csLowEv>
  dcLow();
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f90b 	bl	8003e3e <_ZN13ST7789V_STM325dcLowEv>
  spiWrite(cmd);
 8003c28:	78fb      	ldrb	r3, [r7, #3]
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 f8b7 	bl	8003da0 <_ZN13ST7789V_STM328spiWriteEh>
  dcHigh();
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f914 	bl	8003e60 <_ZN13ST7789V_STM326dcHighEv>
  if (!_inTransaction)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8003c3e:	f083 0301 	eor.w	r3, r3, #1
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <_ZN13ST7789V_STM3212writeCommandEh+0x4e>
    csHigh();
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 f8e7 	bl	8003e1c <_ZN13ST7789V_STM326csHighEv>
}
 8003c4e:	bf00      	nop
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <_ZN13ST7789V_STM329writeDataEh>:

void ST7789V_STM32::writeData(uint8_t data)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b082      	sub	sp, #8
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	460b      	mov	r3, r1
 8003c60:	70fb      	strb	r3, [r7, #3]
  if (!_inTransaction)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8003c68:	f083 0301 	eor.w	r3, r3, #1
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <_ZN13ST7789V_STM329writeDataEh+0x22>
    csLow();
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f8c1 	bl	8003dfa <_ZN13ST7789V_STM325csLowEv>
  dcHigh();
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 f8f1 	bl	8003e60 <_ZN13ST7789V_STM326dcHighEv>
  spiWrite(data);
 8003c7e:	78fb      	ldrb	r3, [r7, #3]
 8003c80:	4619      	mov	r1, r3
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f88c 	bl	8003da0 <_ZN13ST7789V_STM328spiWriteEh>
  if (!_inTransaction)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8003c8e:	f083 0301 	eor.w	r3, r3, #1
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <_ZN13ST7789V_STM329writeDataEh+0x48>
    csHigh();
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f8bf 	bl	8003e1c <_ZN13ST7789V_STM326csHighEv>
}
 8003c9e:	bf00      	nop
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <_ZN13ST7789V_STM3211writeData16Et>:

void ST7789V_STM32::writeData16(uint16_t data)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b082      	sub	sp, #8
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	460b      	mov	r3, r1
 8003cb0:	807b      	strh	r3, [r7, #2]
  if (!_inTransaction)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8003cb8:	f083 0301 	eor.w	r3, r3, #1
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d002      	beq.n	8003cc8 <_ZN13ST7789V_STM3211writeData16Et+0x22>
    csLow();
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f899 	bl	8003dfa <_ZN13ST7789V_STM325csLowEv>
  dcHigh();
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 f8c9 	bl	8003e60 <_ZN13ST7789V_STM326dcHighEv>
  spiWrite16(data);
 8003cce:	887b      	ldrh	r3, [r7, #2]
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f876 	bl	8003dc4 <_ZN13ST7789V_STM3210spiWrite16Et>
  if (!_inTransaction)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8003cde:	f083 0301 	eor.w	r3, r3, #1
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d002      	beq.n	8003cee <_ZN13ST7789V_STM3211writeData16Et+0x48>
    csHigh();
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f897 	bl	8003e1c <_ZN13ST7789V_STM326csHighEv>
}
 8003cee:	bf00      	nop
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <_ZN13ST7789V_STM329setWindowEtttt>:

void ST7789V_STM32::setWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b084      	sub	sp, #16
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	60f8      	str	r0, [r7, #12]
 8003cfe:	4608      	mov	r0, r1
 8003d00:	4611      	mov	r1, r2
 8003d02:	461a      	mov	r2, r3
 8003d04:	4603      	mov	r3, r0
 8003d06:	817b      	strh	r3, [r7, #10]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	813b      	strh	r3, [r7, #8]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	80fb      	strh	r3, [r7, #6]
  writeCommand(ST7789V_CASET);
 8003d10:	212a      	movs	r1, #42	@ 0x2a
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f7ff ff74 	bl	8003c00 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(x0 >> 8);
 8003d18:	897b      	ldrh	r3, [r7, #10]
 8003d1a:	0a1b      	lsrs	r3, r3, #8
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	4619      	mov	r1, r3
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f7ff ff97 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(x0 & 0xFF);
 8003d28:	897b      	ldrh	r3, [r7, #10]
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f7ff ff91 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(x1 >> 8);
 8003d34:	88fb      	ldrh	r3, [r7, #6]
 8003d36:	0a1b      	lsrs	r3, r3, #8
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f7ff ff89 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(x1 & 0xFF);
 8003d44:	88fb      	ldrh	r3, [r7, #6]
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	4619      	mov	r1, r3
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f7ff ff83 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeCommand(ST7789V_RASET);
 8003d50:	212b      	movs	r1, #43	@ 0x2b
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f7ff ff54 	bl	8003c00 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(y0 >> 8);
 8003d58:	893b      	ldrh	r3, [r7, #8]
 8003d5a:	0a1b      	lsrs	r3, r3, #8
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	4619      	mov	r1, r3
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f7ff ff77 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(y0 & 0xFF);
 8003d68:	893b      	ldrh	r3, [r7, #8]
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f7ff ff71 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(y1 >> 8);
 8003d74:	8b3b      	ldrh	r3, [r7, #24]
 8003d76:	0a1b      	lsrs	r3, r3, #8
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f7ff ff69 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeData(y1 & 0xFF);
 8003d84:	8b3b      	ldrh	r3, [r7, #24]
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	4619      	mov	r1, r3
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f7ff ff63 	bl	8003c56 <_ZN13ST7789V_STM329writeDataEh>
  writeCommand(ST7789V_RAMWR);
 8003d90:	212c      	movs	r1, #44	@ 0x2c
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f7ff ff34 	bl	8003c00 <_ZN13ST7789V_STM3212writeCommandEh>
}
 8003d98:	bf00      	nop
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <_ZN13ST7789V_STM328spiWriteEh>:

void ST7789V_STM32::spiWrite(uint8_t data)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	460b      	mov	r3, r1
 8003daa:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(_hspi, &data, 1, HAL_MAX_DELAY);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003db0:	1cf9      	adds	r1, r7, #3
 8003db2:	f04f 33ff 	mov.w	r3, #4294967295
 8003db6:	2201      	movs	r2, #1
 8003db8:	f009 fb5f 	bl	800d47a <HAL_SPI_Transmit>
}
 8003dbc:	bf00      	nop
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <_ZN13ST7789V_STM3210spiWrite16Et>:

void ST7789V_STM32::spiWrite16(uint16_t data)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	807b      	strh	r3, [r7, #2]
  uint8_t buffer[2];
  buffer[0] = data >> 8;   // MSB first
 8003dd0:	887b      	ldrh	r3, [r7, #2]
 8003dd2:	0a1b      	lsrs	r3, r3, #8
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	733b      	strb	r3, [r7, #12]
  buffer[1] = data & 0xFF; // LSB second
 8003dda:	887b      	ldrh	r3, [r7, #2]
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	737b      	strb	r3, [r7, #13]
  HAL_SPI_Transmit(_hspi, buffer, 2, HAL_MAX_DELAY);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003de4:	f107 010c 	add.w	r1, r7, #12
 8003de8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dec:	2202      	movs	r2, #2
 8003dee:	f009 fb44 	bl	800d47a <HAL_SPI_Transmit>
}
 8003df2:	bf00      	nop
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <_ZN13ST7789V_STM325csLowEv>:

// GPIO control functions
void ST7789V_STM32::csLow(void)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b082      	sub	sp, #8
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(_cs_port, _cs_pin, GPIO_PIN_RESET);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	4619      	mov	r1, r3
 8003e10:	f004 fc80 	bl	8008714 <HAL_GPIO_WritePin>
}
 8003e14:	bf00      	nop
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <_ZN13ST7789V_STM326csHighEv>:

void ST7789V_STM32::csHigh(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(_cs_port, _cs_pin, GPIO_PIN_SET);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003e2e:	2201      	movs	r2, #1
 8003e30:	4619      	mov	r1, r3
 8003e32:	f004 fc6f 	bl	8008714 <HAL_GPIO_WritePin>
}
 8003e36:	bf00      	nop
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <_ZN13ST7789V_STM325dcLowEv>:

void ST7789V_STM32::dcLow(void)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b082      	sub	sp, #8
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(_dc_port, _dc_pin, GPIO_PIN_RESET);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e50:	2200      	movs	r2, #0
 8003e52:	4619      	mov	r1, r3
 8003e54:	f004 fc5e 	bl	8008714 <HAL_GPIO_WritePin>
}
 8003e58:	bf00      	nop
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <_ZN13ST7789V_STM326dcHighEv>:

void ST7789V_STM32::dcHigh(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(_dc_port, _dc_pin, GPIO_PIN_SET);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e72:	2201      	movs	r2, #1
 8003e74:	4619      	mov	r1, r3
 8003e76:	f004 fc4d 	bl	8008714 <HAL_GPIO_WritePin>
}
 8003e7a:	bf00      	nop
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <_ZN13ST7789V_STM326rstLowEv>:

void ST7789V_STM32::rstLow(void)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b082      	sub	sp, #8
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(_rst_port, _rst_pin, GPIO_PIN_RESET);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8003e94:	2200      	movs	r2, #0
 8003e96:	4619      	mov	r1, r3
 8003e98:	f004 fc3c 	bl	8008714 <HAL_GPIO_WritePin>
}
 8003e9c:	bf00      	nop
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <_ZN13ST7789V_STM327rstHighEv>:

void ST7789V_STM32::rstHigh(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(_rst_port, _rst_pin, GPIO_PIN_SET);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	4619      	mov	r1, r3
 8003eba:	f004 fc2b 	bl	8008714 <HAL_GPIO_WritePin>
}
 8003ebe:	bf00      	nop
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <_ZN13ST7789V_STM3214writeBufferDMAEPtm>:
  if (!_inTransaction)
    csHigh();
}

void ST7789V_STM32::writeBufferDMA(uint16_t *buffer, uint32_t len)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b086      	sub	sp, #24
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	607a      	str	r2, [r7, #4]
    // Don't start new transfer if one is already in progress
    if (_dmaState.isActive) {
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d14c      	bne.n	8003f76 <_ZN13ST7789V_STM3214writeBufferDMAEPtm+0xb0>
        return; // Or handle this error condition as needed
    }

    if (!_inTransaction)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8003ee2:	f083 0301 	eor.w	r3, r3, #1
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d002      	beq.n	8003ef2 <_ZN13ST7789V_STM3214writeBufferDMAEPtm+0x2c>
        csLow();
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f7ff ff84 	bl	8003dfa <_ZN13ST7789V_STM325csLowEv>
    dcHigh();
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f7ff ffb4 	bl	8003e60 <_ZN13ST7789V_STM326dcHighEv>

    // Initialize DMA transfer state
    _dmaState.buffer = (uint8_t *)buffer;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	64da      	str	r2, [r3, #76]	@ 0x4c
    _dmaState.totalBytes = len * 2; // Convert 16-bit length to bytes
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	005a      	lsls	r2, r3, #1
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	651a      	str	r2, [r3, #80]	@ 0x50
    _dmaState.bytesTransferred = 0;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	655a      	str	r2, [r3, #84]	@ 0x54
    _dmaState.isActive = true;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    _dmaTransferComplete = false;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

    // Start first chunk
    uint32_t firstChunk = (_dmaState.totalBytes > MAX_DMA_CHUNK) ?
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f24:	d203      	bcs.n	8003f2e <_ZN13ST7789V_STM3214writeBufferDMAEPtm+0x68>
                         MAX_DMA_CHUNK : _dmaState.totalBytes;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	3350      	adds	r3, #80	@ 0x50
    uint32_t firstChunk = (_dmaState.totalBytes > MAX_DMA_CHUNK) ?
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	e001      	b.n	8003f32 <_ZN13ST7789V_STM3214writeBufferDMAEPtm+0x6c>
 8003f2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f32:	617b      	str	r3, [r7, #20]

    _dmaState.currentChunkSize = firstChunk;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	659a      	str	r2, [r3, #88]	@ 0x58

    // Start DMA transfer
    HAL_StatusTypeDef status = HAL_SPI_Transmit_DMA(_hspi, _dmaState.buffer, firstChunk);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	b292      	uxth	r2, r2
 8003f46:	4619      	mov	r1, r3
 8003f48:	f009 fe2c 	bl	800dba4 <HAL_SPI_Transmit_DMA>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	74fb      	strb	r3, [r7, #19]

    if (status != HAL_OK) {
 8003f50:	7cfb      	ldrb	r3, [r7, #19]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d010      	beq.n	8003f78 <_ZN13ST7789V_STM3214writeBufferDMAEPtm+0xb2>
        // Handle error - fall back to blocking mode or return error
        _dmaState.isActive = false;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        if (!_inTransaction)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8003f64:	f083 0301 	eor.w	r3, r3, #1
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d004      	beq.n	8003f78 <_ZN13ST7789V_STM3214writeBufferDMAEPtm+0xb2>
            csHigh();
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f7ff ff54 	bl	8003e1c <_ZN13ST7789V_STM326csHighEv>
 8003f74:	e000      	b.n	8003f78 <_ZN13ST7789V_STM3214writeBufferDMAEPtm+0xb2>
        return; // Or handle this error condition as needed
 8003f76:	bf00      	nop
    }
}
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <_ZN13ST7789V_STM3227dmaTransferCompleteCallbackEv>:

void ST7789V_STM32::dmaTransferCompleteCallback()
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b086      	sub	sp, #24
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
    _dmaState.bytesTransferred += _dmaState.currentChunkSize;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f8e:	441a      	add	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	655a      	str	r2, [r3, #84]	@ 0x54

    // Check if there are more chunks to send
    if (_dmaState.bytesTransferred < _dmaState.totalBytes) {
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d238      	bcs.n	8004012 <_ZN13ST7789V_STM3227dmaTransferCompleteCallbackEv+0x94>
        // Calculate next chunk size
        uint32_t remaining = _dmaState.totalBytes - _dmaState.bytesTransferred;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	60fb      	str	r3, [r7, #12]
        uint32_t nextChunk = (remaining > MAX_DMA_CHUNK) ? MAX_DMA_CHUNK : remaining;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fb2:	d203      	bcs.n	8003fbc <_ZN13ST7789V_STM3227dmaTransferCompleteCallbackEv+0x3e>
 8003fb4:	f107 030c 	add.w	r3, r7, #12
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	e001      	b.n	8003fc0 <_ZN13ST7789V_STM3227dmaTransferCompleteCallbackEv+0x42>
 8003fbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003fc0:	617b      	str	r3, [r7, #20]

        _dmaState.currentChunkSize = nextChunk;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	659a      	str	r2, [r3, #88]	@ 0x58

        // Start next chunk
        HAL_StatusTypeDef status = HAL_SPI_Transmit_DMA(_hspi,
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b58      	ldr	r0, [r3, #52]	@ 0x34
                                                       _dmaState.buffer + _dmaState.bytesTransferred,
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd4:	4413      	add	r3, r2
        HAL_StatusTypeDef status = HAL_SPI_Transmit_DMA(_hspi,
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	b292      	uxth	r2, r2
 8003fda:	4619      	mov	r1, r3
 8003fdc:	f009 fde2 	bl	800dba4 <HAL_SPI_Transmit_DMA>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	74fb      	strb	r3, [r7, #19]
                                                       nextChunk);

        if (status != HAL_OK) {
 8003fe4:	7cfb      	ldrb	r3, [r7, #19]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d026      	beq.n	8004038 <_ZN13ST7789V_STM3227dmaTransferCompleteCallbackEv+0xba>
            // Handle error
            _dmaState.isActive = false;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
            _dmaTransferComplete = true;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
            if (!_inTransaction)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8004000:	f083 0301 	eor.w	r3, r3, #1
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d016      	beq.n	8004038 <_ZN13ST7789V_STM3227dmaTransferCompleteCallbackEv+0xba>
                csHigh();
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7ff ff06 	bl	8003e1c <_ZN13ST7789V_STM326csHighEv>
        _dmaTransferComplete = true;

        if (!_inTransaction)
            csHigh();
    }
}
 8004010:	e012      	b.n	8004038 <_ZN13ST7789V_STM3227dmaTransferCompleteCallbackEv+0xba>
        _dmaState.isActive = false;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        _dmaTransferComplete = true;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
        if (!_inTransaction)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8004028:	f083 0301 	eor.w	r3, r3, #1
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <_ZN13ST7789V_STM3227dmaTransferCompleteCallbackEv+0xba>
            csHigh();
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7ff fef2 	bl	8003e1c <_ZN13ST7789V_STM326csHighEv>
}
 8004038:	bf00      	nop
 800403a:	3718      	adds	r7, #24
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <_ZN17Adafruit_MAX31856C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:
    @param  hspi Pointer to SPI handle
    @param  cs_port GPIO port for chip select
    @param  cs_pin GPIO pin for chip select
*/
/**************************************************************************/
Adafruit_MAX31856::Adafruit_MAX31856(SPI_HandleTypeDef *hspi, GPIO_TypeDef *cs_port, uint16_t cs_pin)
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
 800404c:	807b      	strh	r3, [r7, #2]
{
  _hspi = hspi;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	601a      	str	r2, [r3, #0]
  _cs_port = cs_port;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	605a      	str	r2, [r3, #4]
  _cs_pin = cs_pin;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	887a      	ldrh	r2, [r7, #2]
 800405e:	811a      	strh	r2, [r3, #8]
}
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4618      	mov	r0, r3
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <_ZN17Adafruit_MAX31856C1Ev>:

Adafruit_MAX31856::Adafruit_MAX31856()
 800406e:	b480      	push	{r7}
 8004070:	b083      	sub	sp, #12
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
{
  _hspi = nullptr;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]
  _cs_port = nullptr;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	605a      	str	r2, [r3, #4]
  _cs_pin = 0;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	811a      	strh	r2, [r3, #8]
}
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4618      	mov	r0, r3
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <_ZN17Adafruit_MAX318565beginEv>:
    @brief  Initialize MAX31856 with STM32 HAL
    @returns Always returns true at this time
*/
/**************************************************************************/
bool Adafruit_MAX31856::begin(void)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b082      	sub	sp, #8
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  // Set CS pin high initially
  csHigh();
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f952 	bl	8004348 <_ZN17Adafruit_MAX318566csHighEv>

  // Small delay for chip to stabilize
  HAL_Delay(100);
 80040a4:	2064      	movs	r0, #100	@ 0x64
 80040a6:	f001 fa4e 	bl	8005546 <HAL_Delay>

  // assert on any fault
  writeRegister8(MAX31856_MASK_REG, 0x0);
 80040aa:	2200      	movs	r2, #0
 80040ac:	2102      	movs	r1, #2
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fa2e 	bl	8004510 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>

  // enable open circuit fault detection
  writeRegister8(MAX31856_CR0_REG, MAX31856_CR0_OCFAULT0);
 80040b4:	2210      	movs	r2, #16
 80040b6:	2100      	movs	r1, #0
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 fa29 	bl	8004510 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>

  // set cold junction temperature offset to zero
  writeRegister8(MAX31856_CJTO_REG, 0x0);
 80040be:	2200      	movs	r2, #0
 80040c0:	2109      	movs	r1, #9
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 fa24 	bl	8004510 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>

  // set Type K by default
  setThermocoupleType(MAX31856_TCTYPE_K);
 80040c8:	2103      	movs	r1, #3
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f837 	bl	800413e <_ZN17Adafruit_MAX3185619setThermocoupleTypeE27max31856_thermocoupletype_t>

  // set One-Shot conversion mode
  setConversionMode(MAX31856_CONTINUOUS);
 80040d0:	2101      	movs	r1, #1
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f805 	bl	80040e2 <_ZN17Adafruit_MAX3185617setConversionModeE26max31856_conversion_mode_t>

  return true;
 80040d8:	2301      	movs	r3, #1
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <_ZN17Adafruit_MAX3185617setConversionModeE26max31856_conversion_mode_t>:
    @brief  Set temperature conversion mode
    @param mode The conversion mode
*/
/**************************************************************************/
void Adafruit_MAX31856::setConversionMode(max31856_conversion_mode_t mode)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b084      	sub	sp, #16
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
 80040ea:	460b      	mov	r3, r1
 80040ec:	70fb      	strb	r3, [r7, #3]
  conversionMode = mode;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	78fa      	ldrb	r2, [r7, #3]
 80040f2:	729a      	strb	r2, [r3, #10]
  uint8_t t = readRegister8(MAX31856_CR0_REG); // get current register value
 80040f4:	2100      	movs	r1, #0
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f936 	bl	8004368 <_ZN17Adafruit_MAX3185613readRegister8Eh>
 80040fc:	4603      	mov	r3, r0
 80040fe:	73fb      	strb	r3, [r7, #15]
  if (conversionMode == MAX31856_CONTINUOUS)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	7a9b      	ldrb	r3, [r3, #10]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d108      	bne.n	800411a <_ZN17Adafruit_MAX3185617setConversionModeE26max31856_conversion_mode_t+0x38>
  {
    t |= MAX31856_CR0_AUTOCONVERT; // turn on automatic
 8004108:	7bfb      	ldrb	r3, [r7, #15]
 800410a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800410e:	73fb      	strb	r3, [r7, #15]
    t &= ~MAX31856_CR0_1SHOT;      // turn off one-shot
 8004110:	7bfb      	ldrb	r3, [r7, #15]
 8004112:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004116:	73fb      	strb	r3, [r7, #15]
 8004118:	e007      	b.n	800412a <_ZN17Adafruit_MAX3185617setConversionModeE26max31856_conversion_mode_t+0x48>
  }
  else
  {
    t &= ~MAX31856_CR0_AUTOCONVERT; // turn off automatic
 800411a:	7bfb      	ldrb	r3, [r7, #15]
 800411c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004120:	73fb      	strb	r3, [r7, #15]
    t |= MAX31856_CR0_1SHOT;        // turn on one-shot
 8004122:	7bfb      	ldrb	r3, [r7, #15]
 8004124:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004128:	73fb      	strb	r3, [r7, #15]
  }
  writeRegister8(MAX31856_CR0_REG, t); // write value back to register
 800412a:	7bfb      	ldrb	r3, [r7, #15]
 800412c:	461a      	mov	r2, r3
 800412e:	2100      	movs	r1, #0
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f9ed 	bl	8004510 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>
}
 8004136:	bf00      	nop
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <_ZN17Adafruit_MAX3185619setThermocoupleTypeE27max31856_thermocoupletype_t>:
    @brief  Set which kind of Thermocouple (K, J, T, etc) to detect & decode
    @param type The enumeration type of the thermocouple
*/
/**************************************************************************/
void Adafruit_MAX31856::setThermocoupleType(max31856_thermocoupletype_t type)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b084      	sub	sp, #16
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
 8004146:	460b      	mov	r3, r1
 8004148:	70fb      	strb	r3, [r7, #3]
  uint8_t t = readRegister8(MAX31856_CR1_REG);
 800414a:	2101      	movs	r1, #1
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f90b 	bl	8004368 <_ZN17Adafruit_MAX3185613readRegister8Eh>
 8004152:	4603      	mov	r3, r0
 8004154:	73fb      	strb	r3, [r7, #15]
  t &= 0xF0; // mask off bottom 4 bits
 8004156:	7bfb      	ldrb	r3, [r7, #15]
 8004158:	f023 030f 	bic.w	r3, r3, #15
 800415c:	73fb      	strb	r3, [r7, #15]
  t |= (uint8_t)type & 0x0F;
 800415e:	78fb      	ldrb	r3, [r7, #3]
 8004160:	f003 030f 	and.w	r3, r3, #15
 8004164:	b2da      	uxtb	r2, r3
 8004166:	7bfb      	ldrb	r3, [r7, #15]
 8004168:	4313      	orrs	r3, r2
 800416a:	73fb      	strb	r3, [r7, #15]
  writeRegister8(MAX31856_CR1_REG, t);
 800416c:	7bfb      	ldrb	r3, [r7, #15]
 800416e:	461a      	mov	r2, r3
 8004170:	2101      	movs	r1, #1
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f9cc 	bl	8004510 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>
}
 8004178:	bf00      	nop
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <_ZN17Adafruit_MAX318569readFaultEv>:
    @brief  Read the fault register (8 bits)
    @returns 8 bits of fault register data
*/
/**************************************************************************/
uint8_t Adafruit_MAX31856::readFault(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  return readRegister8(MAX31856_SR_REG);
 8004188:	210f      	movs	r1, #15
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f8ec 	bl	8004368 <_ZN17Adafruit_MAX3185613readRegister8Eh>
 8004190:	4603      	mov	r3, r0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <_ZN17Adafruit_MAX3185623setTempFaultThreshholdsEff>:
    @param  flow Low (min) temperature, floating point
    @param  fhigh High (max) temperature, floating point
*/
/**************************************************************************/
void Adafruit_MAX31856::setTempFaultThreshholds(float flow, float fhigh)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b086      	sub	sp, #24
 800419e:	af00      	add	r7, sp, #0
 80041a0:	60f8      	str	r0, [r7, #12]
 80041a2:	ed87 0a02 	vstr	s0, [r7, #8]
 80041a6:	edc7 0a01 	vstr	s1, [r7, #4]
  int16_t low, high;

  flow *= 16;
 80041aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80041ae:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 80041b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041b6:	edc7 7a02 	vstr	s15, [r7, #8]
  low = flow;
 80041ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80041be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041c2:	ee17 3a90 	vmov	r3, s15
 80041c6:	82fb      	strh	r3, [r7, #22]

  fhigh *= 16;
 80041c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80041cc:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 80041d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041d4:	edc7 7a01 	vstr	s15, [r7, #4]
  high = fhigh;
 80041d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80041dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041e0:	ee17 3a90 	vmov	r3, s15
 80041e4:	82bb      	strh	r3, [r7, #20]

  writeRegister8(MAX31856_LTHFTH_REG, high >> 8);
 80041e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80041ea:	121b      	asrs	r3, r3, #8
 80041ec:	b21b      	sxth	r3, r3
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	461a      	mov	r2, r3
 80041f2:	2105      	movs	r1, #5
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 f98b 	bl	8004510 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>
  writeRegister8(MAX31856_LTHFTL_REG, high);
 80041fa:	8abb      	ldrh	r3, [r7, #20]
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	461a      	mov	r2, r3
 8004200:	2106      	movs	r1, #6
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 f984 	bl	8004510 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>

  writeRegister8(MAX31856_LTLFTH_REG, low >> 8);
 8004208:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800420c:	121b      	asrs	r3, r3, #8
 800420e:	b21b      	sxth	r3, r3
 8004210:	b2db      	uxtb	r3, r3
 8004212:	461a      	mov	r2, r3
 8004214:	2107      	movs	r1, #7
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 f97a 	bl	8004510 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>
  writeRegister8(MAX31856_LTLFTL_REG, low);
 800421c:	8afb      	ldrh	r3, [r7, #22]
 800421e:	b2db      	uxtb	r3, r3
 8004220:	461a      	mov	r2, r3
 8004222:	2108      	movs	r1, #8
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 f973 	bl	8004510 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>
}
 800422a:	bf00      	nop
 800422c:	3718      	adds	r7, #24
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <_ZN17Adafruit_MAX3185614triggerOneShotEv>:
    @brief  Begin a one-shot (read temperature only upon request) measurement.
    Value must be read later, not returned here!
*/
/**************************************************************************/
void Adafruit_MAX31856::triggerOneShot(void)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b084      	sub	sp, #16
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  if (conversionMode == MAX31856_CONTINUOUS)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	7a9b      	ldrb	r3, [r3, #10]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d014      	beq.n	800426c <_ZN17Adafruit_MAX3185614triggerOneShotEv+0x3a>
    return;

  uint8_t t = readRegister8(MAX31856_CR0_REG); // get current register value
 8004242:	2100      	movs	r1, #0
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f88f 	bl	8004368 <_ZN17Adafruit_MAX3185613readRegister8Eh>
 800424a:	4603      	mov	r3, r0
 800424c:	73fb      	strb	r3, [r7, #15]
  t &= ~MAX31856_CR0_AUTOCONVERT;              // turn off autoconvert
 800424e:	7bfb      	ldrb	r3, [r7, #15]
 8004250:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004254:	73fb      	strb	r3, [r7, #15]
  t |= MAX31856_CR0_1SHOT;                     // turn on one-shot
 8004256:	7bfb      	ldrb	r3, [r7, #15]
 8004258:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800425c:	73fb      	strb	r3, [r7, #15]
  writeRegister8(MAX31856_CR0_REG, t);         // write value back to register
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	461a      	mov	r2, r3
 8004262:	2100      	movs	r1, #0
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f953 	bl	8004510 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>
 800426a:	e000      	b.n	800426e <_ZN17Adafruit_MAX3185614triggerOneShotEv+0x3c>
    return;
 800426c:	bf00      	nop
                                               // conversion starts when CS goes high
}
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <_ZN17Adafruit_MAX3185618conversionCompleteEv>:
    @brief  Return status of temperature conversion.
    @returns true if conversion complete, otherwise false
*/
/**************************************************************************/
bool Adafruit_MAX31856::conversionComplete(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  if (conversionMode == MAX31856_CONTINUOUS)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	7a9b      	ldrb	r3, [r3, #10]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d101      	bne.n	8004288 <_ZN17Adafruit_MAX3185618conversionCompleteEv+0x14>
    return true;
 8004284:	2301      	movs	r3, #1
 8004286:	e00b      	b.n	80042a0 <_ZN17Adafruit_MAX3185618conversionCompleteEv+0x2c>
  return !(readRegister8(MAX31856_CR0_REG) & MAX31856_CR0_1SHOT);
 8004288:	2100      	movs	r1, #0
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f86c 	bl	8004368 <_ZN17Adafruit_MAX3185613readRegister8Eh>
 8004290:	4603      	mov	r3, r0
 8004292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004296:	2b00      	cmp	r3, #0
 8004298:	bf0c      	ite	eq
 800429a:	2301      	moveq	r3, #1
 800429c:	2300      	movne	r3, #0
 800429e:	b2db      	uxtb	r3, r3
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3708      	adds	r7, #8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv>:
    @brief  Return hot-junction (thermocouple) temperature
    @returns Floating point temperature in Celsius
*/
/**************************************************************************/
uint32_t Adafruit_MAX31856::readThermocoupleTemperature(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  // for one-shot, make it happen
  if (conversionMode == MAX31856_ONESHOT)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	7a9b      	ldrb	r3, [r3, #10]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d120      	bne.n	80042fa <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv+0x52>
  {
    triggerOneShot();
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7ff ffba 	bl	8004232 <_ZN17Adafruit_MAX3185614triggerOneShotEv>
    uint32_t start = HAL_GetTick();
 80042be:	f003 fc0f 	bl	8007ae0 <HAL_GetTick>
 80042c2:	60b8      	str	r0, [r7, #8]
    while (!conversionComplete())
 80042c4:	e010      	b.n	80042e8 <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv+0x40>
    {
      if (HAL_GetTick() - start > 250)
 80042c6:	f003 fc0b 	bl	8007ae0 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2bfa      	cmp	r3, #250	@ 0xfa
 80042d2:	bf8c      	ite	hi
 80042d4:	2301      	movhi	r3, #1
 80042d6:	2300      	movls	r3, #0
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv+0x3a>
        return 0;
 80042de:	2300      	movs	r3, #0
 80042e0:	e01e      	b.n	8004320 <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv+0x78>
      HAL_Delay(10);
 80042e2:	200a      	movs	r0, #10
 80042e4:	f001 f92f 	bl	8005546 <HAL_Delay>
    while (!conversionComplete())
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f7ff ffc3 	bl	8004274 <_ZN17Adafruit_MAX3185618conversionCompleteEv>
 80042ee:	4603      	mov	r3, r0
 80042f0:	f083 0301 	eor.w	r3, r3, #1
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1e5      	bne.n	80042c6 <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv+0x1e>
    }
  }

  // read the thermocouple temperature registers (3 bytes)
  int32_t temp24 = readRegister24(MAX31856_LTCBH_REG);
 80042fa:	210c      	movs	r1, #12
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f847 	bl	8004390 <_ZN17Adafruit_MAX3185614readRegister24Eh>
 8004302:	4603      	mov	r3, r0
 8004304:	60fb      	str	r3, [r7, #12]
  // and compute temperature
  if (temp24 & 0x800000)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d003      	beq.n	8004318 <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv+0x70>
  {
    temp24 |= 0xFF000000; // fix sign
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004316:	60fb      	str	r3, [r7, #12]
  }

  temp24 >>= 5; // bottom 5 bits are unused
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	115b      	asrs	r3, r3, #5
 800431c:	60fb      	str	r3, [r7, #12]

  return temp24;
 800431e:	68fb      	ldr	r3, [r7, #12]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <_ZN17Adafruit_MAX318565csLowEv>:
/*!
    @brief  Set chip select low
*/
/**************************************************************************/
void Adafruit_MAX31856::csLow(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(_cs_port, _cs_pin, GPIO_PIN_RESET);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6858      	ldr	r0, [r3, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	891b      	ldrh	r3, [r3, #8]
 8004338:	2200      	movs	r2, #0
 800433a:	4619      	mov	r1, r3
 800433c:	f004 f9ea 	bl	8008714 <HAL_GPIO_WritePin>
}
 8004340:	bf00      	nop
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <_ZN17Adafruit_MAX318566csHighEv>:
/*!
    @brief  Set chip select high
*/
/**************************************************************************/
void Adafruit_MAX31856::csHigh(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(_cs_port, _cs_pin, GPIO_PIN_SET);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6858      	ldr	r0, [r3, #4]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	891b      	ldrh	r3, [r3, #8]
 8004358:	2201      	movs	r2, #1
 800435a:	4619      	mov	r1, r3
 800435c:	f004 f9da 	bl	8008714 <HAL_GPIO_WritePin>
}
 8004360:	bf00      	nop
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <_ZN17Adafruit_MAX3185613readRegister8Eh>:
    @param  addr Register address
    @returns Register value
*/
/**************************************************************************/
uint8_t Adafruit_MAX31856::readRegister8(uint8_t addr)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	460b      	mov	r3, r1
 8004372:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8004374:	2300      	movs	r3, #0
 8004376:	73fb      	strb	r3, [r7, #15]
  readRegisterN(addr, &ret, 1);
 8004378:	f107 020f 	add.w	r2, r7, #15
 800437c:	78f9      	ldrb	r1, [r7, #3]
 800437e:	2301      	movs	r3, #1
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f81d 	bl	80043c0 <_ZN17Adafruit_MAX3185613readRegisterNEhPhh>
  return ret;
 8004386:	7bfb      	ldrb	r3, [r7, #15]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <_ZN17Adafruit_MAX3185614readRegister24Eh>:
    @param  addr Register address
    @returns Register value
*/
/**************************************************************************/
uint32_t Adafruit_MAX31856::readRegister24(uint8_t addr)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	460b      	mov	r3, r1
 800439a:	70fb      	strb	r3, [r7, #3]
  uint8_t buffer[3];
  readRegisterN(addr, buffer, 3);
 800439c:	f107 020c 	add.w	r2, r7, #12
 80043a0:	78f9      	ldrb	r1, [r7, #3]
 80043a2:	2303      	movs	r3, #3
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f80b 	bl	80043c0 <_ZN17Adafruit_MAX3185613readRegisterNEhPhh>
  return ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | buffer[2];
 80043aa:	7b3b      	ldrb	r3, [r7, #12]
 80043ac:	041a      	lsls	r2, r3, #16
 80043ae:	7b7b      	ldrb	r3, [r7, #13]
 80043b0:	021b      	lsls	r3, r3, #8
 80043b2:	4313      	orrs	r3, r2
 80043b4:	7bba      	ldrb	r2, [r7, #14]
 80043b6:	4313      	orrs	r3, r2
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <_ZN17Adafruit_MAX3185613readRegisterNEhPhh>:
    @param  buffer Buffer to store data
    @param  n Number of bytes to read
*/
/**************************************************************************/
void Adafruit_MAX31856::readRegisterN(uint8_t addr, uint8_t buffer[], uint8_t n)
{
 80043c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043c4:	b08f      	sub	sp, #60	@ 0x3c
 80043c6:	af02      	add	r7, sp, #8
 80043c8:	6178      	str	r0, [r7, #20]
 80043ca:	60fa      	str	r2, [r7, #12]
 80043cc:	461a      	mov	r2, r3
 80043ce:	460b      	mov	r3, r1
 80043d0:	74fb      	strb	r3, [r7, #19]
 80043d2:	4613      	mov	r3, r2
 80043d4:	74bb      	strb	r3, [r7, #18]
  HAL_SPI_TransmitReceive(_hspi, tx, rx, 1 + n, 100);
  csHigh();

  for (uint8_t i = 0; i < n; i++)
    buffer[i] = rx[i + 1];
}
 80043d6:	466b      	mov	r3, sp
 80043d8:	461e      	mov	r6, r3
  addr &= 0x7F; // Read operation
 80043da:	7cfb      	ldrb	r3, [r7, #19]
 80043dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043e0:	74fb      	strb	r3, [r7, #19]
  uint8_t tx[1 + n];
 80043e2:	7cbb      	ldrb	r3, [r7, #18]
 80043e4:	1c59      	adds	r1, r3, #1
 80043e6:	1e4b      	subs	r3, r1, #1
 80043e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043ea:	460a      	mov	r2, r1
 80043ec:	2300      	movs	r3, #0
 80043ee:	603a      	str	r2, [r7, #0]
 80043f0:	607b      	str	r3, [r7, #4]
 80043f2:	f04f 0200 	mov.w	r2, #0
 80043f6:	f04f 0300 	mov.w	r3, #0
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	00c3      	lsls	r3, r0, #3
 80043fe:	6838      	ldr	r0, [r7, #0]
 8004400:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004404:	6838      	ldr	r0, [r7, #0]
 8004406:	00c2      	lsls	r2, r0, #3
 8004408:	460a      	mov	r2, r1
 800440a:	2300      	movs	r3, #0
 800440c:	4692      	mov	sl, r2
 800440e:	469b      	mov	fp, r3
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800441c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004420:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004424:	460b      	mov	r3, r1
 8004426:	3307      	adds	r3, #7
 8004428:	08db      	lsrs	r3, r3, #3
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	ebad 0d03 	sub.w	sp, sp, r3
 8004430:	ab02      	add	r3, sp, #8
 8004432:	3300      	adds	r3, #0
 8004434:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t rx[1 + n];
 8004436:	7cbb      	ldrb	r3, [r7, #18]
 8004438:	1c59      	adds	r1, r3, #1
 800443a:	1e4b      	subs	r3, r1, #1
 800443c:	623b      	str	r3, [r7, #32]
 800443e:	460a      	mov	r2, r1
 8004440:	2300      	movs	r3, #0
 8004442:	4690      	mov	r8, r2
 8004444:	4699      	mov	r9, r3
 8004446:	f04f 0200 	mov.w	r2, #0
 800444a:	f04f 0300 	mov.w	r3, #0
 800444e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004452:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004456:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800445a:	460a      	mov	r2, r1
 800445c:	2300      	movs	r3, #0
 800445e:	4614      	mov	r4, r2
 8004460:	461d      	mov	r5, r3
 8004462:	f04f 0200 	mov.w	r2, #0
 8004466:	f04f 0300 	mov.w	r3, #0
 800446a:	00eb      	lsls	r3, r5, #3
 800446c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004470:	00e2      	lsls	r2, r4, #3
 8004472:	460b      	mov	r3, r1
 8004474:	3307      	adds	r3, #7
 8004476:	08db      	lsrs	r3, r3, #3
 8004478:	00db      	lsls	r3, r3, #3
 800447a:	ebad 0d03 	sub.w	sp, sp, r3
 800447e:	ab02      	add	r3, sp, #8
 8004480:	3300      	adds	r3, #0
 8004482:	61fb      	str	r3, [r7, #28]
  tx[0] = addr;
 8004484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004486:	7cfa      	ldrb	r2, [r7, #19]
 8004488:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 1; i < 1 + n; i++)
 800448a:	2301      	movs	r3, #1
 800448c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004490:	e009      	b.n	80044a6 <_ZN17Adafruit_MAX3185613readRegisterNEhPhh+0xe6>
    tx[i] = 0x00;
 8004492:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004498:	2100      	movs	r1, #0
 800449a:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 1; i < 1 + n; i++)
 800449c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80044a0:	3301      	adds	r3, #1
 80044a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80044a6:	7cba      	ldrb	r2, [r7, #18]
 80044a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d2f0      	bcs.n	8004492 <_ZN17Adafruit_MAX3185613readRegisterNEhPhh+0xd2>
  csLow();
 80044b0:	6978      	ldr	r0, [r7, #20]
 80044b2:	f7ff ff39 	bl	8004328 <_ZN17Adafruit_MAX318565csLowEv>
  HAL_SPI_TransmitReceive(_hspi, tx, rx, 1 + n, 100);
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	6818      	ldr	r0, [r3, #0]
 80044ba:	7cbb      	ldrb	r3, [r7, #18]
 80044bc:	b29b      	uxth	r3, r3
 80044be:	3301      	adds	r3, #1
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2264      	movs	r2, #100	@ 0x64
 80044c4:	9200      	str	r2, [sp, #0]
 80044c6:	69fa      	ldr	r2, [r7, #28]
 80044c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044ca:	f009 f94c 	bl	800d766 <HAL_SPI_TransmitReceive>
  csHigh();
 80044ce:	6978      	ldr	r0, [r7, #20]
 80044d0:	f7ff ff3a 	bl	8004348 <_ZN17Adafruit_MAX318566csHighEv>
  for (uint8_t i = 0; i < n; i++)
 80044d4:	2300      	movs	r3, #0
 80044d6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80044da:	e00e      	b.n	80044fa <_ZN17Adafruit_MAX3185613readRegisterNEhPhh+0x13a>
    buffer[i] = rx[i + 1];
 80044dc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80044e0:	1c5a      	adds	r2, r3, #1
 80044e2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80044e6:	68f9      	ldr	r1, [r7, #12]
 80044e8:	440b      	add	r3, r1
 80044ea:	69f9      	ldr	r1, [r7, #28]
 80044ec:	5c8a      	ldrb	r2, [r1, r2]
 80044ee:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < n; i++)
 80044f0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80044f4:	3301      	adds	r3, #1
 80044f6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80044fa:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80044fe:	7cbb      	ldrb	r3, [r7, #18]
 8004500:	429a      	cmp	r2, r3
 8004502:	d3eb      	bcc.n	80044dc <_ZN17Adafruit_MAX3185613readRegisterNEhPhh+0x11c>
 8004504:	46b5      	mov	sp, r6
}
 8004506:	bf00      	nop
 8004508:	3734      	adds	r7, #52	@ 0x34
 800450a:	46bd      	mov	sp, r7
 800450c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004510 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>:
    @param  addr Register address
    @param  data Data to write
*/
/**************************************************************************/
void Adafruit_MAX31856::writeRegister8(uint8_t addr, uint8_t data)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	460b      	mov	r3, r1
 800451a:	70fb      	strb	r3, [r7, #3]
 800451c:	4613      	mov	r3, r2
 800451e:	70bb      	strb	r3, [r7, #2]
  addr |= 0x80; // MSB=1 for write, make sure top bit is set
 8004520:	78fb      	ldrb	r3, [r7, #3]
 8004522:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004526:	70fb      	strb	r3, [r7, #3]

  uint8_t buffer[2] = {addr, data};
 8004528:	78fb      	ldrb	r3, [r7, #3]
 800452a:	733b      	strb	r3, [r7, #12]
 800452c:	78bb      	ldrb	r3, [r7, #2]
 800452e:	737b      	strb	r3, [r7, #13]

  csLow();
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7ff fef9 	bl	8004328 <_ZN17Adafruit_MAX318565csLowEv>
  HAL_SPI_Transmit(_hspi, buffer, 2, HAL_MAX_DELAY);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6818      	ldr	r0, [r3, #0]
 800453a:	f107 010c 	add.w	r1, r7, #12
 800453e:	f04f 33ff 	mov.w	r3, #4294967295
 8004542:	2202      	movs	r2, #2
 8004544:	f008 ff99 	bl	800d47a <HAL_SPI_Transmit>
  csHigh();
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f7ff fefd 	bl	8004348 <_ZN17Adafruit_MAX318566csHighEv>
}
 800454e:	bf00      	nop
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
	...

08004558 <_ZN13Accelerometer5setupEv>:
#include "main.h"

Accelerometer::States Accelerometer::state;

void Accelerometer::setup(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
    // pinMode(0, OUTPUT);
    state = AWAKE;
 8004560:	4b06      	ldr	r3, [pc, #24]	@ (800457c <_ZN13Accelerometer5setupEv+0x24>)
 8004562:	2200      	movs	r2, #0
 8004564:	701a      	strb	r2, [r3, #0]
    delay = 1; // seconds?
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	601a      	str	r2, [r3, #0]
    readAccelerometer();
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f875 	bl	800465c <_ZN13Accelerometer17readAccelerometerEv>
}
 8004572:	bf00      	nop
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	20000354 	.word	0x20000354

08004580 <_ZN13Accelerometer12stateMachineEv>:

void Accelerometer::stateMachine(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
    if (!readDelay)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	bf0c      	ite	eq
 8004590:	2301      	moveq	r3, #1
 8004592:	2300      	movne	r3, #0
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d005      	beq.n	80045a6 <_ZN13Accelerometer12stateMachineEv+0x26>
    {
        readAccelerometer();
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f85e 	bl	800465c <_ZN13Accelerometer17readAccelerometerEv>

        readDelay = 10; // 10ms so 100ms
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	220a      	movs	r2, #10
 80045a4:	605a      	str	r2, [r3, #4]
    }

    switch (state)
 80045a6:	4b28      	ldr	r3, [pc, #160]	@ (8004648 <_ZN13Accelerometer12stateMachineEv+0xc8>)
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <_ZN13Accelerometer12stateMachineEv+0x34>
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d019      	beq.n	80045e6 <_ZN13Accelerometer12stateMachineEv+0x66>
            // CDC_Transmit_FS((uint8_t *)usbBuffer, strlen(usbBuffer));
        }

        break;
    default:
        break;
 80045b2:	e044      	b.n	800463e <_ZN13Accelerometer12stateMachineEv+0xbe>
        if (acceleration < activityThreshold && !delay)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691a      	ldr	r2, [r3, #16]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	429a      	cmp	r2, r3
 80045be:	da05      	bge.n	80045cc <_ZN13Accelerometer12stateMachineEv+0x4c>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <_ZN13Accelerometer12stateMachineEv+0x4c>
 80045c8:	2301      	movs	r3, #1
 80045ca:	e000      	b.n	80045ce <_ZN13Accelerometer12stateMachineEv+0x4e>
 80045cc:	2300      	movs	r3, #0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d032      	beq.n	8004638 <_ZN13Accelerometer12stateMachineEv+0xb8>
            delay = 3; // seconds
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2203      	movs	r2, #3
 80045d6:	601a      	str	r2, [r3, #0]
            state = SLEEP;
 80045d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004648 <_ZN13Accelerometer12stateMachineEv+0xc8>)
 80045da:	2201      	movs	r2, #1
 80045dc:	701a      	strb	r2, [r3, #0]
            Backlight::state = Backlight::States::LOW;
 80045de:	4b1b      	ldr	r3, [pc, #108]	@ (800464c <_ZN13Accelerometer12stateMachineEv+0xcc>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	701a      	strb	r2, [r3, #0]
        break;
 80045e4:	e028      	b.n	8004638 <_ZN13Accelerometer12stateMachineEv+0xb8>
        snprintf((char *)UART_BUFFER, sizeof(UART_BUFFER), "SLEEP");
 80045e6:	4a1a      	ldr	r2, [pc, #104]	@ (8004650 <_ZN13Accelerometer12stateMachineEv+0xd0>)
 80045e8:	2140      	movs	r1, #64	@ 0x40
 80045ea:	481a      	ldr	r0, [pc, #104]	@ (8004654 <_ZN13Accelerometer12stateMachineEv+0xd4>)
 80045ec:	f016 fb32 	bl	801ac54 <sniprintf>
        HAL_UART_Transmit(&huart1, UART_BUFFER, strlen((char *)UART_BUFFER), 300);
 80045f0:	4818      	ldr	r0, [pc, #96]	@ (8004654 <_ZN13Accelerometer12stateMachineEv+0xd4>)
 80045f2:	f7fb fe25 	bl	8000240 <strlen>
 80045f6:	4603      	mov	r3, r0
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80045fe:	4915      	ldr	r1, [pc, #84]	@ (8004654 <_ZN13Accelerometer12stateMachineEv+0xd4>)
 8004600:	4815      	ldr	r0, [pc, #84]	@ (8004658 <_ZN13Accelerometer12stateMachineEv+0xd8>)
 8004602:	f00a fef3 	bl	800f3ec <HAL_UART_Transmit>
        if (acceleration > activityThreshold && !delay)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691a      	ldr	r2, [r3, #16]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	429a      	cmp	r2, r3
 8004610:	dd05      	ble.n	800461e <_ZN13Accelerometer12stateMachineEv+0x9e>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <_ZN13Accelerometer12stateMachineEv+0x9e>
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <_ZN13Accelerometer12stateMachineEv+0xa0>
 800461e:	2300      	movs	r3, #0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00b      	beq.n	800463c <_ZN13Accelerometer12stateMachineEv+0xbc>
            delay = 10; // seconds
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	220a      	movs	r2, #10
 8004628:	601a      	str	r2, [r3, #0]
            state = AWAKE;
 800462a:	4b07      	ldr	r3, [pc, #28]	@ (8004648 <_ZN13Accelerometer12stateMachineEv+0xc8>)
 800462c:	2200      	movs	r2, #0
 800462e:	701a      	strb	r2, [r3, #0]
            Backlight::state = Backlight::States::HIGH;
 8004630:	4b06      	ldr	r3, [pc, #24]	@ (800464c <_ZN13Accelerometer12stateMachineEv+0xcc>)
 8004632:	2202      	movs	r2, #2
 8004634:	701a      	strb	r2, [r3, #0]
        break;
 8004636:	e001      	b.n	800463c <_ZN13Accelerometer12stateMachineEv+0xbc>
        break;
 8004638:	bf00      	nop
 800463a:	e000      	b.n	800463e <_ZN13Accelerometer12stateMachineEv+0xbe>
        break;
 800463c:	bf00      	nop
    }
}
 800463e:	bf00      	nop
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	20000354 	.word	0x20000354
 800464c:	20000355 	.word	0x20000355
 8004650:	0801cdb0 	.word	0x0801cdb0
 8004654:	200004cc 	.word	0x200004cc
 8004658:	20000a80 	.word	0x20000a80

0800465c <_ZN13Accelerometer17readAccelerometerEv>:

void Accelerometer::readAccelerometer(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b088      	sub	sp, #32
 8004660:	af04      	add	r7, sp, #16
 8004662:	6078      	str	r0, [r7, #4]
    // Set MEASURE bit (Bit 3) to enable measurement mode
    HAL_I2C_Mem_Write(&hi2c1, ADXL343_ADDR, 0x2D, I2C_MEMADD_SIZE_8BIT, &powerCtl, 1, 1000);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3314      	adds	r3, #20
 8004668:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800466c:	9202      	str	r2, [sp, #8]
 800466e:	2201      	movs	r2, #1
 8004670:	9201      	str	r2, [sp, #4]
 8004672:	9300      	str	r3, [sp, #0]
 8004674:	2301      	movs	r3, #1
 8004676:	222d      	movs	r2, #45	@ 0x2d
 8004678:	21a6      	movs	r1, #166	@ 0xa6
 800467a:	483c      	ldr	r0, [pc, #240]	@ (800476c <_ZN13Accelerometer17readAccelerometerEv+0x110>)
 800467c:	f004 fb30 	bl	8008ce0 <HAL_I2C_Mem_Write>

    // Read with error handling
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, ADXL343_ADDR, accreg, I2C_MEMADD_SIZE_8BIT, accdata, 6, 1000);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	7d5b      	ldrb	r3, [r3, #21]
 8004684:	4619      	mov	r1, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	3316      	adds	r3, #22
 800468a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800468e:	9202      	str	r2, [sp, #8]
 8004690:	2206      	movs	r2, #6
 8004692:	9201      	str	r2, [sp, #4]
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	2301      	movs	r3, #1
 8004698:	460a      	mov	r2, r1
 800469a:	21a6      	movs	r1, #166	@ 0xa6
 800469c:	4833      	ldr	r0, [pc, #204]	@ (800476c <_ZN13Accelerometer17readAccelerometerEv+0x110>)
 800469e:	f004 fc33 	bl	8008f08 <HAL_I2C_Mem_Read>
 80046a2:	4603      	mov	r3, r0
 80046a4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80046a6:	7bfb      	ldrb	r3, [r7, #15]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d15b      	bne.n	8004764 <_ZN13Accelerometer17readAccelerometerEv+0x108>
    {

        int16_t x = (int16_t)((accdata[1] << 8) | accdata[0]);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	7ddb      	ldrb	r3, [r3, #23]
 80046b0:	b21b      	sxth	r3, r3
 80046b2:	021b      	lsls	r3, r3, #8
 80046b4:	b21a      	sxth	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	7d9b      	ldrb	r3, [r3, #22]
 80046ba:	b21b      	sxth	r3, r3
 80046bc:	4313      	orrs	r3, r2
 80046be:	81bb      	strh	r3, [r7, #12]
        int16_t y = (int16_t)((accdata[3] << 8) | accdata[2]);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	7e5b      	ldrb	r3, [r3, #25]
 80046c4:	b21b      	sxth	r3, r3
 80046c6:	021b      	lsls	r3, r3, #8
 80046c8:	b21a      	sxth	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	7e1b      	ldrb	r3, [r3, #24]
 80046ce:	b21b      	sxth	r3, r3
 80046d0:	4313      	orrs	r3, r2
 80046d2:	817b      	strh	r3, [r7, #10]
        int16_t z = (int16_t)((accdata[5] << 8) | accdata[4]);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	7edb      	ldrb	r3, [r3, #27]
 80046d8:	b21b      	sxth	r3, r3
 80046da:	021b      	lsls	r3, r3, #8
 80046dc:	b21a      	sxth	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	7e9b      	ldrb	r3, [r3, #26]
 80046e2:	b21b      	sxth	r3, r3
 80046e4:	4313      	orrs	r3, r2
 80046e6:	813b      	strh	r3, [r7, #8]

        acceleration = (int32_t)x * x + (int32_t)y * y + (int32_t)z * z;
 80046e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80046ec:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80046f0:	fb03 f202 	mul.w	r2, r3, r2
 80046f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80046f8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80046fc:	fb01 f303 	mul.w	r3, r1, r3
 8004700:	441a      	add	r2, r3
 8004702:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004706:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 800470a:	fb01 f303 	mul.w	r3, r1, r3
 800470e:	441a      	add	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	611a      	str	r2, [r3, #16]
        //{
        //     // Acceleration magnitude exceeds threshold
        //     HAL_UART_Transmit(&huart1, (uint8_t *)"Threshold exceeded\r\n", 21, 100);
        // }

        snprintf((char *)UART_BUFFER, sizeof(UART_BUFFER), "Acceleration: %ld\r\n", acceleration);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	4a15      	ldr	r2, [pc, #84]	@ (8004770 <_ZN13Accelerometer17readAccelerometerEv+0x114>)
 800471a:	2140      	movs	r1, #64	@ 0x40
 800471c:	4815      	ldr	r0, [pc, #84]	@ (8004774 <_ZN13Accelerometer17readAccelerometerEv+0x118>)
 800471e:	f016 fa99 	bl	801ac54 <sniprintf>
        HAL_UART_Transmit(&huart1, UART_BUFFER, strlen((char *)UART_BUFFER), 300);
 8004722:	4814      	ldr	r0, [pc, #80]	@ (8004774 <_ZN13Accelerometer17readAccelerometerEv+0x118>)
 8004724:	f7fb fd8c 	bl	8000240 <strlen>
 8004728:	4603      	mov	r3, r0
 800472a:	b29a      	uxth	r2, r3
 800472c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004730:	4910      	ldr	r1, [pc, #64]	@ (8004774 <_ZN13Accelerometer17readAccelerometerEv+0x118>)
 8004732:	4811      	ldr	r0, [pc, #68]	@ (8004778 <_ZN13Accelerometer17readAccelerometerEv+0x11c>)
 8004734:	f00a fe5a 	bl	800f3ec <HAL_UART_Transmit>

        // snprintf((char *)UART_BUFFER, sizeof(UART_BUFFER), "X: %f, Y: %f, Z: %f\r\n", x_g, y_g, z_g);
        // HAL_UART_Transmit(&huart1, UART_BUFFER, strlen((char *)UART_BUFFER), 300);

        snprintf((char *)UART_BUFFER, sizeof(UART_BUFFER), "X: %.2d, Y: %.2d\r\n", x, y);
 8004738:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800473c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	4613      	mov	r3, r2
 8004744:	4a0d      	ldr	r2, [pc, #52]	@ (800477c <_ZN13Accelerometer17readAccelerometerEv+0x120>)
 8004746:	2140      	movs	r1, #64	@ 0x40
 8004748:	480a      	ldr	r0, [pc, #40]	@ (8004774 <_ZN13Accelerometer17readAccelerometerEv+0x118>)
 800474a:	f016 fa83 	bl	801ac54 <sniprintf>
        HAL_UART_Transmit(&huart1, UART_BUFFER, strlen((char *)UART_BUFFER), 300);
 800474e:	4809      	ldr	r0, [pc, #36]	@ (8004774 <_ZN13Accelerometer17readAccelerometerEv+0x118>)
 8004750:	f7fb fd76 	bl	8000240 <strlen>
 8004754:	4603      	mov	r3, r0
 8004756:	b29a      	uxth	r2, r3
 8004758:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800475c:	4905      	ldr	r1, [pc, #20]	@ (8004774 <_ZN13Accelerometer17readAccelerometerEv+0x118>)
 800475e:	4806      	ldr	r0, [pc, #24]	@ (8004778 <_ZN13Accelerometer17readAccelerometerEv+0x11c>)
 8004760:	f00a fe44 	bl	800f3ec <HAL_UART_Transmit>
    }
}
 8004764:	bf00      	nop
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	2000043c 	.word	0x2000043c
 8004770:	0801cdb8 	.word	0x0801cdb8
 8004774:	200004cc 	.word	0x200004cc
 8004778:	20000a80 	.word	0x20000a80
 800477c:	0801cdcc 	.word	0x0801cdcc

08004780 <_ZN9Backlight5setupEv>:

Backlight::States Backlight::state;

void Backlight::setup(void)

{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004788:	2100      	movs	r1, #0
 800478a:	4808      	ldr	r0, [pc, #32]	@ (80047ac <_ZN9Backlight5setupEv+0x2c>)
 800478c:	f009 ff04 	bl	800e598 <HAL_TIM_PWM_Start>

    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0); // turn off screen to start
 8004790:	4b06      	ldr	r3, [pc, #24]	@ (80047ac <_ZN9Backlight5setupEv+0x2c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2200      	movs	r2, #0
 8004796:	635a      	str	r2, [r3, #52]	@ 0x34

    state = HIGH;
 8004798:	4b05      	ldr	r3, [pc, #20]	@ (80047b0 <_ZN9Backlight5setupEv+0x30>)
 800479a:	2202      	movs	r2, #2
 800479c:	701a      	strb	r2, [r3, #0]
    // pinMode(0, OUTPUT);
    // state = AWAKE;
    delay = 0;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]
    // readAccelerometer();
}
 80047a4:	bf00      	nop
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	200009e8 	.word	0x200009e8
 80047b0:	20000355 	.word	0x20000355

080047b4 <_ZN9Backlight12stateMachineEv>:

void Backlight::stateMachine(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]

    switch (state)
 80047bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004874 <_ZN9Backlight12stateMachineEv+0xc0>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	2b03      	cmp	r3, #3
 80047c2:	d843      	bhi.n	800484c <_ZN9Backlight12stateMachineEv+0x98>
 80047c4:	a201      	add	r2, pc, #4	@ (adr r2, 80047cc <_ZN9Backlight12stateMachineEv+0x18>)
 80047c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ca:	bf00      	nop
 80047cc:	080047dd 	.word	0x080047dd
 80047d0:	080047f9 	.word	0x080047f9
 80047d4:	08004815 	.word	0x08004815
 80047d8:	08004831 	.word	0x08004831
    {

    case LOW:
        if (!delay)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	bf0c      	ite	eq
 80047e4:	2301      	moveq	r3, #1
 80047e6:	2300      	movne	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d030      	beq.n	8004850 <_ZN9Backlight12stateMachineEv+0x9c>
        {
            desired_brightness = low_brightness;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	609a      	str	r2, [r3, #8]
        }
        break;
 80047f6:	e02b      	b.n	8004850 <_ZN9Backlight12stateMachineEv+0x9c>
    case MID:
        if (!delay)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	bf0c      	ite	eq
 8004800:	2301      	moveq	r3, #1
 8004802:	2300      	movne	r3, #0
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d024      	beq.n	8004854 <_ZN9Backlight12stateMachineEv+0xa0>
        {
            desired_brightness = mid_brightness;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691a      	ldr	r2, [r3, #16]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	609a      	str	r2, [r3, #8]
        }
        break;
 8004812:	e01f      	b.n	8004854 <_ZN9Backlight12stateMachineEv+0xa0>
    case HIGH:
        if (!delay)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	bf0c      	ite	eq
 800481c:	2301      	moveq	r3, #1
 800481e:	2300      	movne	r3, #0
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d018      	beq.n	8004858 <_ZN9Backlight12stateMachineEv+0xa4>
        {
            desired_brightness = hi_brightness;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	695a      	ldr	r2, [r3, #20]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	609a      	str	r2, [r3, #8]
        }
        break;
 800482e:	e013      	b.n	8004858 <_ZN9Backlight12stateMachineEv+0xa4>
    case OFF:
        if (!delay)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	bf0c      	ite	eq
 8004838:	2301      	moveq	r3, #1
 800483a:	2300      	movne	r3, #0
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00c      	beq.n	800485c <_ZN9Backlight12stateMachineEv+0xa8>
        {
            desired_brightness = off;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	699a      	ldr	r2, [r3, #24]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	609a      	str	r2, [r3, #8]
        }
        break;
 800484a:	e007      	b.n	800485c <_ZN9Backlight12stateMachineEv+0xa8>
    default:
        break;
 800484c:	bf00      	nop
 800484e:	e006      	b.n	800485e <_ZN9Backlight12stateMachineEv+0xaa>
        break;
 8004850:	bf00      	nop
 8004852:	e004      	b.n	800485e <_ZN9Backlight12stateMachineEv+0xaa>
        break;
 8004854:	bf00      	nop
 8004856:	e002      	b.n	800485e <_ZN9Backlight12stateMachineEv+0xaa>
        break;
 8004858:	bf00      	nop
 800485a:	e000      	b.n	800485e <_ZN9Backlight12stateMachineEv+0xaa>
        break;
 800485c:	bf00      	nop
    }

    fadeScreen(desired_brightness);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	4619      	mov	r1, r3
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f807 	bl	8004878 <_ZN9Backlight10fadeScreenEi>
}
 800486a:	bf00      	nop
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	20000355 	.word	0x20000355

08004878 <_ZN9Backlight10fadeScreenEi>:

void Backlight::fadeScreen(int target_brightness)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]

    if (current_brightness < target_brightness)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	429a      	cmp	r2, r3
 800488a:	dd0d      	ble.n	80048a8 <_ZN9Backlight10fadeScreenEi+0x30>
    {
        current_brightness += 1; // Adjust step size for fade speed
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	605a      	str	r2, [r3, #4]
        if (current_brightness > target_brightness)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	429a      	cmp	r2, r3
 800489e:	da15      	bge.n	80048cc <_ZN9Backlight10fadeScreenEi+0x54>
            current_brightness = target_brightness;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	605a      	str	r2, [r3, #4]
 80048a6:	e011      	b.n	80048cc <_ZN9Backlight10fadeScreenEi+0x54>
    }
    else if (current_brightness > target_brightness)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	da0c      	bge.n	80048cc <_ZN9Backlight10fadeScreenEi+0x54>
    {
        current_brightness -= 1;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	1e5a      	subs	r2, r3, #1
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	605a      	str	r2, [r3, #4]
        if (current_brightness < target_brightness)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	dd02      	ble.n	80048cc <_ZN9Backlight10fadeScreenEi+0x54>
            current_brightness = target_brightness;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	605a      	str	r2, [r3, #4]
    }

    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, current_brightness);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	4b04      	ldr	r3, [pc, #16]	@ (80048e4 <_ZN9Backlight10fadeScreenEi+0x6c>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	200009e8 	.word	0x200009e8

080048e8 <_ZN14BatteryMonitor5setupEv>:
// bool BatteryMonitor::newData = false;
bool BatteryMonitor::charging = false;
uint16_t BatteryMonitor::charge = 0;

void BatteryMonitor::setup()
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
    // Wire1.setPins(PERIPHERAL_SDA, PERIPHERAL_SCL);

    while (!max17048.begin(&hi2c1, MAX17048_I2CADDR_DEFAULT))
 80048f0:	e013      	b.n	800491a <_ZN14BatteryMonitor5setupEv+0x32>
    {
        // Serial.println(F("Couldnt find Adafruit MAX17048?\nMake sure a battery is plugged in!"));
        snprintf((char *)UART_BUFFER, sizeof(UART_BUFFER), "Couldnt find Adafruit MAX17048?\r\n");
 80048f2:	4a14      	ldr	r2, [pc, #80]	@ (8004944 <_ZN14BatteryMonitor5setupEv+0x5c>)
 80048f4:	2140      	movs	r1, #64	@ 0x40
 80048f6:	4814      	ldr	r0, [pc, #80]	@ (8004948 <_ZN14BatteryMonitor5setupEv+0x60>)
 80048f8:	f016 f9ac 	bl	801ac54 <sniprintf>

        HAL_UART_Transmit(&huart1, UART_BUFFER, strlen((char *)UART_BUFFER), 300);
 80048fc:	4812      	ldr	r0, [pc, #72]	@ (8004948 <_ZN14BatteryMonitor5setupEv+0x60>)
 80048fe:	f7fb fc9f 	bl	8000240 <strlen>
 8004902:	4603      	mov	r3, r0
 8004904:	b29a      	uxth	r2, r3
 8004906:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800490a:	490f      	ldr	r1, [pc, #60]	@ (8004948 <_ZN14BatteryMonitor5setupEv+0x60>)
 800490c:	480f      	ldr	r0, [pc, #60]	@ (800494c <_ZN14BatteryMonitor5setupEv+0x64>)
 800490e:	f00a fd6d 	bl	800f3ec <HAL_UART_Transmit>
        HAL_Delay(1000);
 8004912:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004916:	f000 fe16 	bl	8005546 <HAL_Delay>
    while (!max17048.begin(&hi2c1, MAX17048_I2CADDR_DEFAULT))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2236      	movs	r2, #54	@ 0x36
 800491e:	490c      	ldr	r1, [pc, #48]	@ (8004950 <_ZN14BatteryMonitor5setupEv+0x68>)
 8004920:	4618      	mov	r0, r3
 8004922:	f7fc fb4c 	bl	8000fbe <_ZN23Adafruit_MAX17048_STM325beginEP19__I2C_HandleTypeDeft>
 8004926:	4603      	mov	r3, r0
 8004928:	f083 0301 	eor.w	r3, r3, #1
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1df      	bne.n	80048f2 <_ZN14BatteryMonitor5setupEv+0xa>
    }
    // Serial.print(F("Found MAX17048"));
    // Serial.print(F(" with Chip ID: 0x"));
    // Serial.println(max17048.getChipID(), HEX);
    max17048.quickStart();
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4618      	mov	r0, r3
 8004936:	f7fc fd73 	bl	8001420 <_ZN23Adafruit_MAX17048_STM3210quickStartEv>
    // percent = String(int()) + '%';

    // sprintf(percent, "%f", max17048.cellPercent());

    // newData = true;
}
 800493a:	bf00      	nop
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	0801cde0 	.word	0x0801cde0
 8004948:	200004cc 	.word	0x200004cc
 800494c:	20000a80 	.word	0x20000a80
 8004950:	2000043c 	.word	0x2000043c

08004954 <_ZN14BatteryMonitor12stateMachineEv>:

void BatteryMonitor::stateMachine(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af02      	add	r7, sp, #8
 800495a:	6078      	str	r0, [r7, #4]

    if (!delay)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	2b00      	cmp	r3, #0
 8004962:	bf0c      	ite	eq
 8004964:	2301      	moveq	r3, #1
 8004966:	2300      	movne	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d06f      	beq.n	8004a4e <_ZN14BatteryMonitor12stateMachineEv+0xfa>
    {
        delay = 3; // seconds // ms
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2203      	movs	r2, #3
 8004972:	60da      	str	r2, [r3, #12]
        // lastPercent = percent;
        // snprintf(percent, sizeof(usbBuffer), "%f", max17048.cellPercent());
        // newData = (percent != lastPercent);
        charging = (max17048.chargeRate() > 0.0);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4618      	mov	r0, r3
 8004978:	f7fc fcee 	bl	8001358 <_ZN23Adafruit_MAX17048_STM3210chargeRateEv>
 800497c:	eef0 7a40 	vmov.f32	s15, s0
 8004980:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004988:	bfcc      	ite	gt
 800498a:	2301      	movgt	r3, #1
 800498c:	2300      	movle	r3, #0
 800498e:	b2da      	uxtb	r2, r3
 8004990:	4b31      	ldr	r3, [pc, #196]	@ (8004a58 <_ZN14BatteryMonitor12stateMachineEv+0x104>)
 8004992:	701a      	strb	r2, [r3, #0]
        // Serial.println(max17048.chargeRate());

        // snprintf(usbBuffer, sizeof(usbBuffer), );
        // CDC_Transmit_FS((uint8_t *)usbBuffer, strlen(usbBuffer));

        snprintf((char *)UART_BUFFER, sizeof(UART_BUFFER), "Battery: %f\r\n", max17048.cellPercent());
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4618      	mov	r0, r3
 8004998:	f7fc fcac 	bl	80012f4 <_ZN23Adafruit_MAX17048_STM3211cellPercentEv>
 800499c:	ee10 3a10 	vmov	r3, s0
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7fb fdb9 	bl	8000518 <__aeabi_f2d>
 80049a6:	4602      	mov	r2, r0
 80049a8:	460b      	mov	r3, r1
 80049aa:	e9cd 2300 	strd	r2, r3, [sp]
 80049ae:	4a2b      	ldr	r2, [pc, #172]	@ (8004a5c <_ZN14BatteryMonitor12stateMachineEv+0x108>)
 80049b0:	2140      	movs	r1, #64	@ 0x40
 80049b2:	482b      	ldr	r0, [pc, #172]	@ (8004a60 <_ZN14BatteryMonitor12stateMachineEv+0x10c>)
 80049b4:	f016 f94e 	bl	801ac54 <sniprintf>

        HAL_UART_Transmit(&huart1, UART_BUFFER, strlen((char *)UART_BUFFER), 300);
 80049b8:	4829      	ldr	r0, [pc, #164]	@ (8004a60 <_ZN14BatteryMonitor12stateMachineEv+0x10c>)
 80049ba:	f7fb fc41 	bl	8000240 <strlen>
 80049be:	4603      	mov	r3, r0
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80049c6:	4926      	ldr	r1, [pc, #152]	@ (8004a60 <_ZN14BatteryMonitor12stateMachineEv+0x10c>)
 80049c8:	4826      	ldr	r0, [pc, #152]	@ (8004a64 <_ZN14BatteryMonitor12stateMachineEv+0x110>)
 80049ca:	f00a fd0f 	bl	800f3ec <HAL_UART_Transmit>

        snprintf((char *)UART_BUFFER, sizeof(UART_BUFFER), "Charge Rate: %f\r\n", max17048.chargeRate());
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7fc fcc1 	bl	8001358 <_ZN23Adafruit_MAX17048_STM3210chargeRateEv>
 80049d6:	ee10 3a10 	vmov	r3, s0
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fb fd9c 	bl	8000518 <__aeabi_f2d>
 80049e0:	4602      	mov	r2, r0
 80049e2:	460b      	mov	r3, r1
 80049e4:	e9cd 2300 	strd	r2, r3, [sp]
 80049e8:	4a1f      	ldr	r2, [pc, #124]	@ (8004a68 <_ZN14BatteryMonitor12stateMachineEv+0x114>)
 80049ea:	2140      	movs	r1, #64	@ 0x40
 80049ec:	481c      	ldr	r0, [pc, #112]	@ (8004a60 <_ZN14BatteryMonitor12stateMachineEv+0x10c>)
 80049ee:	f016 f931 	bl	801ac54 <sniprintf>

        HAL_UART_Transmit(&huart1, UART_BUFFER, strlen((char *)UART_BUFFER), 300);
 80049f2:	481b      	ldr	r0, [pc, #108]	@ (8004a60 <_ZN14BatteryMonitor12stateMachineEv+0x10c>)
 80049f4:	f7fb fc24 	bl	8000240 <strlen>
 80049f8:	4603      	mov	r3, r0
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004a00:	4917      	ldr	r1, [pc, #92]	@ (8004a60 <_ZN14BatteryMonitor12stateMachineEv+0x10c>)
 8004a02:	4818      	ldr	r0, [pc, #96]	@ (8004a64 <_ZN14BatteryMonitor12stateMachineEv+0x110>)
 8004a04:	f00a fcf2 	bl	800f3ec <HAL_UART_Transmit>

        if (max17048.cellPercent() >= 100)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7fc fc72 	bl	80012f4 <_ZN23Adafruit_MAX17048_STM3211cellPercentEv>
 8004a10:	eef0 7a40 	vmov.f32	s15, s0
 8004a14:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8004a6c <_ZN14BatteryMonitor12stateMachineEv+0x118>
 8004a18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a20:	bfac      	ite	ge
 8004a22:	2301      	movge	r3, #1
 8004a24:	2300      	movlt	r3, #0
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d003      	beq.n	8004a34 <_ZN14BatteryMonitor12stateMachineEv+0xe0>
        {
            charge = 100;
 8004a2c:	4b10      	ldr	r3, [pc, #64]	@ (8004a70 <_ZN14BatteryMonitor12stateMachineEv+0x11c>)
 8004a2e:	2264      	movs	r2, #100	@ 0x64
 8004a30:	801a      	strh	r2, [r3, #0]
        else
        {
            charge = (uint16_t)max17048.cellPercent();
        }
    }
}
 8004a32:	e00c      	b.n	8004a4e <_ZN14BatteryMonitor12stateMachineEv+0xfa>
            charge = (uint16_t)max17048.cellPercent();
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7fc fc5c 	bl	80012f4 <_ZN23Adafruit_MAX17048_STM3211cellPercentEv>
 8004a3c:	eef0 7a40 	vmov.f32	s15, s0
 8004a40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a44:	ee17 3a90 	vmov	r3, s15
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	4b09      	ldr	r3, [pc, #36]	@ (8004a70 <_ZN14BatteryMonitor12stateMachineEv+0x11c>)
 8004a4c:	801a      	strh	r2, [r3, #0]
}
 8004a4e:	bf00      	nop
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	20000356 	.word	0x20000356
 8004a5c:	0801ce04 	.word	0x0801ce04
 8004a60:	200004cc 	.word	0x200004cc
 8004a64:	20000a80 	.word	0x20000a80
 8004a68:	0801ce14 	.word	0x0801ce14
 8004a6c:	42c80000 	.word	0x42c80000
 8004a70:	20000358 	.word	0x20000358

08004a74 <_ZN6Switch5setupEv>:
// bool BatteryMonitor::newData = false;
// bool BatteryMonitor::charging = false;
Switch::States Switch::state;

void Switch::setup()
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]

    delay = 1;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	601a      	str	r2, [r3, #0]
    //  percent = String(int()) + '%';

    // sprintf(percent, "%f", max17048.cellPercent());

    // newData = true;
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
	...

08004a90 <_ZN6Switch12stateMachineEv>:

void Switch::stateMachine(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]

    switch (state)
 8004a98:	4b30      	ldr	r3, [pc, #192]	@ (8004b5c <_ZN6Switch12stateMachineEv+0xcc>)
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d002      	beq.n	8004aa6 <_ZN6Switch12stateMachineEv+0x16>
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d02a      	beq.n	8004afa <_ZN6Switch12stateMachineEv+0x6a>
        }

        break;

    default:
        break;
 8004aa4:	e056      	b.n	8004b54 <_ZN6Switch12stateMachineEv+0xc4>
        if (!delay && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d108      	bne.n	8004ac0 <_ZN6Switch12stateMachineEv+0x30>
 8004aae:	2101      	movs	r1, #1
 8004ab0:	482b      	ldr	r0, [pc, #172]	@ (8004b60 <_ZN6Switch12stateMachineEv+0xd0>)
 8004ab2:	f003 fe17 	bl	80086e4 <HAL_GPIO_ReadPin>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <_ZN6Switch12stateMachineEv+0x30>
 8004abc:	2301      	movs	r3, #1
 8004abe:	e000      	b.n	8004ac2 <_ZN6Switch12stateMachineEv+0x32>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d043      	beq.n	8004b4e <_ZN6Switch12stateMachineEv+0xbe>
            state = HIGH;
 8004ac6:	4b25      	ldr	r3, [pc, #148]	@ (8004b5c <_ZN6Switch12stateMachineEv+0xcc>)
 8004ac8:	2201      	movs	r2, #1
 8004aca:	701a      	strb	r2, [r3, #0]
            delay = 1;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]
            snprintf((char *)UART_BUFFER, sizeof(UART_BUFFER), "LOW SETTING --> HIGH SETTING\r\n");
 8004ad2:	4a24      	ldr	r2, [pc, #144]	@ (8004b64 <_ZN6Switch12stateMachineEv+0xd4>)
 8004ad4:	2140      	movs	r1, #64	@ 0x40
 8004ad6:	4824      	ldr	r0, [pc, #144]	@ (8004b68 <_ZN6Switch12stateMachineEv+0xd8>)
 8004ad8:	f016 f8bc 	bl	801ac54 <sniprintf>
            HAL_UART_Transmit(&huart1, UART_BUFFER, strlen((char *)UART_BUFFER), 300);
 8004adc:	4822      	ldr	r0, [pc, #136]	@ (8004b68 <_ZN6Switch12stateMachineEv+0xd8>)
 8004ade:	f7fb fbaf 	bl	8000240 <strlen>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004aea:	491f      	ldr	r1, [pc, #124]	@ (8004b68 <_ZN6Switch12stateMachineEv+0xd8>)
 8004aec:	481f      	ldr	r0, [pc, #124]	@ (8004b6c <_ZN6Switch12stateMachineEv+0xdc>)
 8004aee:	f00a fc7d 	bl	800f3ec <HAL_UART_Transmit>
            Thermocouples::userGain = 150.0;
 8004af2:	4b1f      	ldr	r3, [pc, #124]	@ (8004b70 <_ZN6Switch12stateMachineEv+0xe0>)
 8004af4:	4a1f      	ldr	r2, [pc, #124]	@ (8004b74 <_ZN6Switch12stateMachineEv+0xe4>)
 8004af6:	601a      	str	r2, [r3, #0]
        break;
 8004af8:	e029      	b.n	8004b4e <_ZN6Switch12stateMachineEv+0xbe>
        if (!delay && !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d108      	bne.n	8004b14 <_ZN6Switch12stateMachineEv+0x84>
 8004b02:	2101      	movs	r1, #1
 8004b04:	4816      	ldr	r0, [pc, #88]	@ (8004b60 <_ZN6Switch12stateMachineEv+0xd0>)
 8004b06:	f003 fded 	bl	80086e4 <HAL_GPIO_ReadPin>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <_ZN6Switch12stateMachineEv+0x84>
 8004b10:	2301      	movs	r3, #1
 8004b12:	e000      	b.n	8004b16 <_ZN6Switch12stateMachineEv+0x86>
 8004b14:	2300      	movs	r3, #0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d01b      	beq.n	8004b52 <_ZN6Switch12stateMachineEv+0xc2>
            state = LOW;
 8004b1a:	4b10      	ldr	r3, [pc, #64]	@ (8004b5c <_ZN6Switch12stateMachineEv+0xcc>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	701a      	strb	r2, [r3, #0]
            delay = 1;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	601a      	str	r2, [r3, #0]
            snprintf((char *)UART_BUFFER, sizeof(UART_BUFFER), "HIGH SETTING --> LOW SETTING\r\n");
 8004b26:	4a14      	ldr	r2, [pc, #80]	@ (8004b78 <_ZN6Switch12stateMachineEv+0xe8>)
 8004b28:	2140      	movs	r1, #64	@ 0x40
 8004b2a:	480f      	ldr	r0, [pc, #60]	@ (8004b68 <_ZN6Switch12stateMachineEv+0xd8>)
 8004b2c:	f016 f892 	bl	801ac54 <sniprintf>
            HAL_UART_Transmit(&huart1, UART_BUFFER, strlen((char *)UART_BUFFER), 300);
 8004b30:	480d      	ldr	r0, [pc, #52]	@ (8004b68 <_ZN6Switch12stateMachineEv+0xd8>)
 8004b32:	f7fb fb85 	bl	8000240 <strlen>
 8004b36:	4603      	mov	r3, r0
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004b3e:	490a      	ldr	r1, [pc, #40]	@ (8004b68 <_ZN6Switch12stateMachineEv+0xd8>)
 8004b40:	480a      	ldr	r0, [pc, #40]	@ (8004b6c <_ZN6Switch12stateMachineEv+0xdc>)
 8004b42:	f00a fc53 	bl	800f3ec <HAL_UART_Transmit>
            Thermocouples::userGain = 50.0;
 8004b46:	4b0a      	ldr	r3, [pc, #40]	@ (8004b70 <_ZN6Switch12stateMachineEv+0xe0>)
 8004b48:	4a0c      	ldr	r2, [pc, #48]	@ (8004b7c <_ZN6Switch12stateMachineEv+0xec>)
 8004b4a:	601a      	str	r2, [r3, #0]
        break;
 8004b4c:	e001      	b.n	8004b52 <_ZN6Switch12stateMachineEv+0xc2>
        break;
 8004b4e:	bf00      	nop
 8004b50:	e000      	b.n	8004b54 <_ZN6Switch12stateMachineEv+0xc4>
        break;
 8004b52:	bf00      	nop
    }
}
 8004b54:	bf00      	nop
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	2000035a 	.word	0x2000035a
 8004b60:	48000400 	.word	0x48000400
 8004b64:	0801ce28 	.word	0x0801ce28
 8004b68:	200004cc 	.word	0x200004cc
 8004b6c:	20000a80 	.word	0x20000a80
 8004b70:	20000360 	.word	0x20000360
 8004b74:	43160000 	.word	0x43160000
 8004b78:	0801ce48 	.word	0x0801ce48
 8004b7c:	42480000 	.word	0x42480000

08004b80 <_ZN13Thermocouples5setupEv>:
KALMAN_T rf;
KALMAN_T lf;
// Static member definitions for MAX31856 objects

void Thermocouples::setup()
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b088      	sub	sp, #32
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
    // SPI_Set_Mode(1);

    // Re-initialize the SPI handle pointers
    left = Adafruit_MAX31856(&hspi1, GPIOA, GPIO_PIN_9);
 8004b88:	f107 0008 	add.w	r0, r7, #8
 8004b8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b90:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8004b94:	493b      	ldr	r1, [pc, #236]	@ (8004c84 <_ZN13Thermocouples5setupEv+0x104>)
 8004b96:	f7ff fa53 	bl	8004040 <_ZN17Adafruit_MAX31856C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	f107 0308 	add.w	r3, r7, #8
 8004ba2:	cb03      	ldmia	r3!, {r0, r1}
 8004ba4:	6010      	str	r0, [r2, #0]
 8004ba6:	6051      	str	r1, [r2, #4]
 8004ba8:	8819      	ldrh	r1, [r3, #0]
 8004baa:	789b      	ldrb	r3, [r3, #2]
 8004bac:	8111      	strh	r1, [r2, #8]
 8004bae:	7293      	strb	r3, [r2, #10]
    right = Adafruit_MAX31856(&hspi1, GPIOA, GPIO_PIN_8);
 8004bb0:	f107 0014 	add.w	r0, r7, #20
 8004bb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004bb8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8004bbc:	4931      	ldr	r1, [pc, #196]	@ (8004c84 <_ZN13Thermocouples5setupEv+0x104>)
 8004bbe:	f7ff fa3f 	bl	8004040 <_ZN17Adafruit_MAX31856C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f103 020c 	add.w	r2, r3, #12
 8004bc8:	f107 0314 	add.w	r3, r7, #20
 8004bcc:	cb03      	ldmia	r3!, {r0, r1}
 8004bce:	6010      	str	r0, [r2, #0]
 8004bd0:	6051      	str	r1, [r2, #4]
 8004bd2:	8819      	ldrh	r1, [r3, #0]
 8004bd4:	789b      	ldrb	r3, [r3, #2]
 8004bd6:	8111      	strh	r1, [r2, #8]
 8004bd8:	7293      	strb	r3, [r2, #10]

    rf.error = 0.0f;
 8004bda:	4b2b      	ldr	r3, [pc, #172]	@ (8004c88 <_ZN13Thermocouples5setupEv+0x108>)
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	609a      	str	r2, [r3, #8]
    rf.estimate = 0.0f;
 8004be2:	4b29      	ldr	r3, [pc, #164]	@ (8004c88 <_ZN13Thermocouples5setupEv+0x108>)
 8004be4:	f04f 0200 	mov.w	r2, #0
 8004be8:	611a      	str	r2, [r3, #16]
    rf.process_variance = 0.1f;
 8004bea:	4b27      	ldr	r3, [pc, #156]	@ (8004c88 <_ZN13Thermocouples5setupEv+0x108>)
 8004bec:	4a27      	ldr	r2, [pc, #156]	@ (8004c8c <_ZN13Thermocouples5setupEv+0x10c>)
 8004bee:	615a      	str	r2, [r3, #20]
    rf.measurement_variance = 50.0f;
 8004bf0:	4b25      	ldr	r3, [pc, #148]	@ (8004c88 <_ZN13Thermocouples5setupEv+0x108>)
 8004bf2:	4a27      	ldr	r2, [pc, #156]	@ (8004c90 <_ZN13Thermocouples5setupEv+0x110>)
 8004bf4:	619a      	str	r2, [r3, #24]

    lf.error = 0.0f;
 8004bf6:	4b27      	ldr	r3, [pc, #156]	@ (8004c94 <_ZN13Thermocouples5setupEv+0x114>)
 8004bf8:	f04f 0200 	mov.w	r2, #0
 8004bfc:	609a      	str	r2, [r3, #8]
    lf.estimate = 0.0f;
 8004bfe:	4b25      	ldr	r3, [pc, #148]	@ (8004c94 <_ZN13Thermocouples5setupEv+0x114>)
 8004c00:	f04f 0200 	mov.w	r2, #0
 8004c04:	611a      	str	r2, [r3, #16]
    lf.process_variance = 0.1f;
 8004c06:	4b23      	ldr	r3, [pc, #140]	@ (8004c94 <_ZN13Thermocouples5setupEv+0x114>)
 8004c08:	4a20      	ldr	r2, [pc, #128]	@ (8004c8c <_ZN13Thermocouples5setupEv+0x10c>)
 8004c0a:	615a      	str	r2, [r3, #20]
    lf.measurement_variance = 50.0f;
 8004c0c:	4b21      	ldr	r3, [pc, #132]	@ (8004c94 <_ZN13Thermocouples5setupEv+0x114>)
 8004c0e:	4a20      	ldr	r2, [pc, #128]	@ (8004c90 <_ZN13Thermocouples5setupEv+0x110>)
 8004c10:	619a      	str	r2, [r3, #24]
    // area = 3.14159f * diameter * length; // surface area in m^2
    // ambientTemp = 20.0f;
    // h = 500;      // W/m^2 * K
    // C = 0.000053; // J /K
    // lastTime = HAL_GetTick();
    left.begin();
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7ff fa3e 	bl	8004096 <_ZN17Adafruit_MAX318565beginEv>
    left.setThermocoupleType(MAX31856_TCTYPE_K);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2103      	movs	r1, #3
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7ff fa8d 	bl	800413e <_ZN17Adafruit_MAX3185619setThermocoupleTypeE27max31856_thermocoupletype_t>
    left.setConversionMode(MAX31856_CONTINUOUS);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2101      	movs	r1, #1
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7ff fa5a 	bl	80040e2 <_ZN17Adafruit_MAX3185617setConversionModeE26max31856_conversion_mode_t>
    left.setTempFaultThreshholds(0.0, 100.0);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8004c98 <_ZN13Thermocouples5setupEv+0x118>
 8004c34:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8004c9c <_ZN13Thermocouples5setupEv+0x11c>
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7ff faae 	bl	800419a <_ZN17Adafruit_MAX3185623setTempFaultThreshholdsEff>

    right.begin();
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	330c      	adds	r3, #12
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7ff fa27 	bl	8004096 <_ZN17Adafruit_MAX318565beginEv>
    right.setThermocoupleType(MAX31856_TCTYPE_K);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	330c      	adds	r3, #12
 8004c4c:	2103      	movs	r1, #3
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7ff fa75 	bl	800413e <_ZN17Adafruit_MAX3185619setThermocoupleTypeE27max31856_thermocoupletype_t>
    right.setConversionMode(MAX31856_CONTINUOUS);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	330c      	adds	r3, #12
 8004c58:	2101      	movs	r1, #1
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7ff fa41 	bl	80040e2 <_ZN17Adafruit_MAX3185617setConversionModeE26max31856_conversion_mode_t>
    right.setTempFaultThreshholds(0.0, 100.0);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	330c      	adds	r3, #12
 8004c64:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 8004c98 <_ZN13Thermocouples5setupEv+0x118>
 8004c68:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8004c9c <_ZN13Thermocouples5setupEv+0x11c>
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7ff fa94 	bl	800419a <_ZN17Adafruit_MAX3185623setTempFaultThreshholdsEff>
    // SPI_Set_Mode(0);
    HAL_Delay(500);
 8004c72:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004c76:	f000 fc66 	bl	8005546 <HAL_Delay>
    // setNoiseFilter(&tempSensor, MAX31856_NOISE_FILTER_50HZ);
    // HAL_Delay(200);
    // Set fault thresholds (optional)
    // setTempFaultThresholds(&tempSensor, -200.0f, 1000.0f); // -200°C to 1000°C
    // setColdJunctionFaultThresholds(&tempSensor, -40, 85);   // -40°C to 85°C
}
 8004c7a:	bf00      	nop
 8004c7c:	3720      	adds	r7, #32
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	200008bc 	.word	0x200008bc
 8004c88:	20000364 	.word	0x20000364
 8004c8c:	3dcccccd 	.word	0x3dcccccd
 8004c90:	42480000 	.word	0x42480000
 8004c94:	20000380 	.word	0x20000380
 8004c98:	42c80000 	.word	0x42c80000
 8004c9c:	00000000 	.word	0x00000000

08004ca0 <_ZN13Thermocouples12stateMachineEv>:

void Thermocouples::stateMachine(void)
{
 8004ca0:	b5b0      	push	{r4, r5, r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af02      	add	r7, sp, #8
 8004ca6:	6078      	str	r0, [r7, #4]
    if (!delay)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	bf0c      	ite	eq
 8004cb0:	2301      	moveq	r3, #1
 8004cb2:	2300      	movne	r3, #0
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d025      	beq.n	8004d06 <_ZN13Thermocouples12stateMachineEv+0x66>
    {
        // SPI_Set_Mode(1);
        rightRawTemp = (int32_t)right.readThermocoupleTemperature();
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	330c      	adds	r3, #12
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff faf2 	bl	80042a8 <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	641a      	str	r2, [r3, #64]	@ 0x40
        leftRawTemp = (int32_t)left.readThermocoupleTemperature();
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7ff faea 	bl	80042a8 <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	63da      	str	r2, [r3, #60]	@ 0x3c

        checkFault("------------ Right: ", right.readFault());
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	330c      	adds	r3, #12
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7ff fa4d 	bl	8004180 <_ZN17Adafruit_MAX318569readFaultEv>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	461a      	mov	r2, r3
 8004cea:	4986      	ldr	r1, [pc, #536]	@ (8004f04 <_ZN13Thermocouples12stateMachineEv+0x264>)
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f91f 	bl	8004f30 <_ZN13Thermocouples10checkFaultEPch>
        checkFault("------------ Left:  ", left.readFault());
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7ff fa43 	bl	8004180 <_ZN17Adafruit_MAX318569readFaultEv>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	4982      	ldr	r1, [pc, #520]	@ (8004f08 <_ZN13Thermocouples12stateMachineEv+0x268>)
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f915 	bl	8004f30 <_ZN13Thermocouples10checkFaultEPch>
    //  deltaTemp = deltaTemp + ((rightTemp - leftTemp) - deltaTemp) * 0.9; // leaky integrator with a gain of 0.9
    //  Average two sensors, or use one

    /// currentTime = HAL_GetTick();

    rightTemp = rightRawTemp;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0a:	ee07 3a90 	vmov	s15, r3
 8004d0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
    leftTemp = leftRawTemp;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d1c:	ee07 3a90 	vmov	s15, r3
 8004d20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    rf.measurement = 0.0078125f * (rightTemp); // deg c
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8004d30:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8004f0c <_ZN13Thermocouples12stateMachineEv+0x26c>
 8004d34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d38:	4b75      	ldr	r3, [pc, #468]	@ (8004f10 <_ZN13Thermocouples12stateMachineEv+0x270>)
 8004d3a:	edc3 7a00 	vstr	s15, [r3]
    lf.measurement = 0.0078125f * (leftTemp);  // deg c
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8004d44:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8004f0c <_ZN13Thermocouples12stateMachineEv+0x26c>
 8004d48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d4c:	4b71      	ldr	r3, [pc, #452]	@ (8004f14 <_ZN13Thermocouples12stateMachineEv+0x274>)
 8004d4e:	edc3 7a00 	vstr	s15, [r3]
                                               //
    rf.error = rf.error + rf.process_variance;
 8004d52:	4b6f      	ldr	r3, [pc, #444]	@ (8004f10 <_ZN13Thermocouples12stateMachineEv+0x270>)
 8004d54:	ed93 7a02 	vldr	s14, [r3, #8]
 8004d58:	4b6d      	ldr	r3, [pc, #436]	@ (8004f10 <_ZN13Thermocouples12stateMachineEv+0x270>)
 8004d5a:	edd3 7a05 	vldr	s15, [r3, #20]
 8004d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d62:	4b6b      	ldr	r3, [pc, #428]	@ (8004f10 <_ZN13Thermocouples12stateMachineEv+0x270>)
 8004d64:	edc3 7a02 	vstr	s15, [r3, #8]
    rf.gain = rf.error / (rf.error + rf.measurement_variance);
 8004d68:	4b69      	ldr	r3, [pc, #420]	@ (8004f10 <_ZN13Thermocouples12stateMachineEv+0x270>)
 8004d6a:	edd3 6a02 	vldr	s13, [r3, #8]
 8004d6e:	4b68      	ldr	r3, [pc, #416]	@ (8004f10 <_ZN13Thermocouples12stateMachineEv+0x270>)
 8004d70:	ed93 7a02 	vldr	s14, [r3, #8]
 8004d74:	4b66      	ldr	r3, [pc, #408]	@ (8004f10 <_ZN13Thermocouples12stateMachineEv+0x270>)
 8004d76:	edd3 7a06 	vldr	s15, [r3, #24]
 8004d7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d82:	4b63      	ldr	r3, [pc, #396]	@ (8004f10 <_ZN13Thermocouples12stateMachineEv+0x270>)
 8004d84:	edc3 7a03 	vstr	s15, [r3, #12]
    rf.estimate = rf.estimate + rf.gain * (rf.measurement - rf.estimate);
 8004d88:	4b61      	ldr	r3, [pc, #388]	@ (8004f10 <_ZN13Thermocouples12stateMachineEv+0x270>)
 8004d8a:	ed93 7a04 	vldr	s14, [r3, #16]
 8004d8e:	4b60      	ldr	r3, [pc, #384]	@ (8004f10 <_ZN13Thermocouples12stateMachineEv+0x270>)
 8004d90:	edd3 6a03 	vldr	s13, [r3, #12]
 8004d94:	4b5e      	ldr	r3, [pc, #376]	@ (8004f10 <_ZN13Thermocouples12stateMachineEv+0x270>)
 8004d96:	ed93 6a00 	vldr	s12, [r3]
 8004d9a:	4b5d      	ldr	r3, [pc, #372]	@ (8004f10 <_ZN13Thermocouples12stateMachineEv+0x270>)
 8004d9c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004da0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004da4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004da8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dac:	4b58      	ldr	r3, [pc, #352]	@ (8004f10 <_ZN13Thermocouples12stateMachineEv+0x270>)
 8004dae:	edc3 7a04 	vstr	s15, [r3, #16]
    rf.error = (1.0 - rf.gain) * rf.error;
 8004db2:	4b57      	ldr	r3, [pc, #348]	@ (8004f10 <_ZN13Thermocouples12stateMachineEv+0x270>)
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fb fbae 	bl	8000518 <__aeabi_f2d>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	f04f 0000 	mov.w	r0, #0
 8004dc4:	4954      	ldr	r1, [pc, #336]	@ (8004f18 <_ZN13Thermocouples12stateMachineEv+0x278>)
 8004dc6:	f7fb fa47 	bl	8000258 <__aeabi_dsub>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4614      	mov	r4, r2
 8004dd0:	461d      	mov	r5, r3
 8004dd2:	4b4f      	ldr	r3, [pc, #316]	@ (8004f10 <_ZN13Thermocouples12stateMachineEv+0x270>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fb fb9e 	bl	8000518 <__aeabi_f2d>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	460b      	mov	r3, r1
 8004de0:	4620      	mov	r0, r4
 8004de2:	4629      	mov	r1, r5
 8004de4:	f7fb fbf0 	bl	80005c8 <__aeabi_dmul>
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	4610      	mov	r0, r2
 8004dee:	4619      	mov	r1, r3
 8004df0:	f7fb fec2 	bl	8000b78 <__aeabi_d2f>
 8004df4:	4603      	mov	r3, r0
 8004df6:	4a46      	ldr	r2, [pc, #280]	@ (8004f10 <_ZN13Thermocouples12stateMachineEv+0x270>)
 8004df8:	6093      	str	r3, [r2, #8]
    //
    lf.error = lf.error + lf.process_variance;
 8004dfa:	4b46      	ldr	r3, [pc, #280]	@ (8004f14 <_ZN13Thermocouples12stateMachineEv+0x274>)
 8004dfc:	ed93 7a02 	vldr	s14, [r3, #8]
 8004e00:	4b44      	ldr	r3, [pc, #272]	@ (8004f14 <_ZN13Thermocouples12stateMachineEv+0x274>)
 8004e02:	edd3 7a05 	vldr	s15, [r3, #20]
 8004e06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e0a:	4b42      	ldr	r3, [pc, #264]	@ (8004f14 <_ZN13Thermocouples12stateMachineEv+0x274>)
 8004e0c:	edc3 7a02 	vstr	s15, [r3, #8]
    lf.gain = lf.error / (lf.error + lf.measurement_variance);
 8004e10:	4b40      	ldr	r3, [pc, #256]	@ (8004f14 <_ZN13Thermocouples12stateMachineEv+0x274>)
 8004e12:	edd3 6a02 	vldr	s13, [r3, #8]
 8004e16:	4b3f      	ldr	r3, [pc, #252]	@ (8004f14 <_ZN13Thermocouples12stateMachineEv+0x274>)
 8004e18:	ed93 7a02 	vldr	s14, [r3, #8]
 8004e1c:	4b3d      	ldr	r3, [pc, #244]	@ (8004f14 <_ZN13Thermocouples12stateMachineEv+0x274>)
 8004e1e:	edd3 7a06 	vldr	s15, [r3, #24]
 8004e22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004e26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e2a:	4b3a      	ldr	r3, [pc, #232]	@ (8004f14 <_ZN13Thermocouples12stateMachineEv+0x274>)
 8004e2c:	edc3 7a03 	vstr	s15, [r3, #12]
    lf.estimate = lf.estimate + lf.gain * (lf.measurement - lf.estimate);
 8004e30:	4b38      	ldr	r3, [pc, #224]	@ (8004f14 <_ZN13Thermocouples12stateMachineEv+0x274>)
 8004e32:	ed93 7a04 	vldr	s14, [r3, #16]
 8004e36:	4b37      	ldr	r3, [pc, #220]	@ (8004f14 <_ZN13Thermocouples12stateMachineEv+0x274>)
 8004e38:	edd3 6a03 	vldr	s13, [r3, #12]
 8004e3c:	4b35      	ldr	r3, [pc, #212]	@ (8004f14 <_ZN13Thermocouples12stateMachineEv+0x274>)
 8004e3e:	ed93 6a00 	vldr	s12, [r3]
 8004e42:	4b34      	ldr	r3, [pc, #208]	@ (8004f14 <_ZN13Thermocouples12stateMachineEv+0x274>)
 8004e44:	edd3 7a04 	vldr	s15, [r3, #16]
 8004e48:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004e4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e54:	4b2f      	ldr	r3, [pc, #188]	@ (8004f14 <_ZN13Thermocouples12stateMachineEv+0x274>)
 8004e56:	edc3 7a04 	vstr	s15, [r3, #16]
    lf.error = (1.0 - lf.gain) * lf.error;
 8004e5a:	4b2e      	ldr	r3, [pc, #184]	@ (8004f14 <_ZN13Thermocouples12stateMachineEv+0x274>)
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fb fb5a 	bl	8000518 <__aeabi_f2d>
 8004e64:	4602      	mov	r2, r0
 8004e66:	460b      	mov	r3, r1
 8004e68:	f04f 0000 	mov.w	r0, #0
 8004e6c:	492a      	ldr	r1, [pc, #168]	@ (8004f18 <_ZN13Thermocouples12stateMachineEv+0x278>)
 8004e6e:	f7fb f9f3 	bl	8000258 <__aeabi_dsub>
 8004e72:	4602      	mov	r2, r0
 8004e74:	460b      	mov	r3, r1
 8004e76:	4614      	mov	r4, r2
 8004e78:	461d      	mov	r5, r3
 8004e7a:	4b26      	ldr	r3, [pc, #152]	@ (8004f14 <_ZN13Thermocouples12stateMachineEv+0x274>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fb fb4a 	bl	8000518 <__aeabi_f2d>
 8004e84:	4602      	mov	r2, r0
 8004e86:	460b      	mov	r3, r1
 8004e88:	4620      	mov	r0, r4
 8004e8a:	4629      	mov	r1, r5
 8004e8c:	f7fb fb9c 	bl	80005c8 <__aeabi_dmul>
 8004e90:	4602      	mov	r2, r0
 8004e92:	460b      	mov	r3, r1
 8004e94:	4610      	mov	r0, r2
 8004e96:	4619      	mov	r1, r3
 8004e98:	f7fb fe6e 	bl	8000b78 <__aeabi_d2f>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	4a1d      	ldr	r2, [pc, #116]	@ (8004f14 <_ZN13Thermocouples12stateMachineEv+0x274>)
 8004ea0:	6093      	str	r3, [r2, #8]

    deltaTemp = (rf.estimate - lf.estimate) * userGain;
 8004ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8004f10 <_ZN13Thermocouples12stateMachineEv+0x270>)
 8004ea4:	ed93 7a04 	vldr	s14, [r3, #16]
 8004ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8004f14 <_ZN13Thermocouples12stateMachineEv+0x274>)
 8004eaa:	edd3 7a04 	vldr	s15, [r3, #16]
 8004eae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8004f1c <_ZN13Thermocouples12stateMachineEv+0x27c>)
 8004eb4:	edd3 7a00 	vldr	s15, [r3]
 8004eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ebc:	4b18      	ldr	r3, [pc, #96]	@ (8004f20 <_ZN13Thermocouples12stateMachineEv+0x280>)
 8004ebe:	edc3 7a00 	vstr	s15, [r3]
    // CDC_Transmit_FS((uint8_t *)usbBuffer, strlen(usbBuffer));

    //     snprintf((char *)UART_BUFFER, sizeof(UART_BUFFER), "Left: %f  Right: %f\r\n", lf.measurement, rf.measurement);
    // HAL_UART_Transmit(&huart1, UART_BUFFER, strlen((char *)UART_BUFFER), 300);

    snprintf((char *)UART_BUFFER, sizeof(UART_BUFFER), "Delta Temp: %f\r\n", deltaTemp);
 8004ec2:	4b17      	ldr	r3, [pc, #92]	@ (8004f20 <_ZN13Thermocouples12stateMachineEv+0x280>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fb fb26 	bl	8000518 <__aeabi_f2d>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	e9cd 2300 	strd	r2, r3, [sp]
 8004ed4:	4a13      	ldr	r2, [pc, #76]	@ (8004f24 <_ZN13Thermocouples12stateMachineEv+0x284>)
 8004ed6:	2140      	movs	r1, #64	@ 0x40
 8004ed8:	4813      	ldr	r0, [pc, #76]	@ (8004f28 <_ZN13Thermocouples12stateMachineEv+0x288>)
 8004eda:	f015 febb 	bl	801ac54 <sniprintf>
    HAL_UART_Transmit(&huart1, UART_BUFFER, strlen((char *)UART_BUFFER), 300);
 8004ede:	4812      	ldr	r0, [pc, #72]	@ (8004f28 <_ZN13Thermocouples12stateMachineEv+0x288>)
 8004ee0:	f7fb f9ae 	bl	8000240 <strlen>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004eec:	490e      	ldr	r1, [pc, #56]	@ (8004f28 <_ZN13Thermocouples12stateMachineEv+0x288>)
 8004eee:	480f      	ldr	r0, [pc, #60]	@ (8004f2c <_ZN13Thermocouples12stateMachineEv+0x28c>)
 8004ef0:	f00a fa7c 	bl	800f3ec <HAL_UART_Transmit>

    delay = 10; // 50 ms
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	220a      	movs	r2, #10
 8004ef8:	619a      	str	r2, [r3, #24]
}
 8004efa:	bf00      	nop
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bdb0      	pop	{r4, r5, r7, pc}
 8004f02:	bf00      	nop
 8004f04:	0801ce68 	.word	0x0801ce68
 8004f08:	0801ce80 	.word	0x0801ce80
 8004f0c:	3c000000 	.word	0x3c000000
 8004f10:	20000364 	.word	0x20000364
 8004f14:	20000380 	.word	0x20000380
 8004f18:	3ff00000 	.word	0x3ff00000
 8004f1c:	20000360 	.word	0x20000360
 8004f20:	2000035c 	.word	0x2000035c
 8004f24:	0801ce98 	.word	0x0801ce98
 8004f28:	200004cc 	.word	0x200004cc
 8004f2c:	20000a80 	.word	0x20000a80

08004f30 <_ZN13Thermocouples10checkFaultEPch>:
    // Raw temperature is in units of 0.0078125°C (1/128°C)
    return (rawTemp * 0.0078125f);
}

void Thermocouples::checkFault(char *name, uint8_t fault)
{
 8004f30:	b5b0      	push	{r4, r5, r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	71fb      	strb	r3, [r7, #7]
    // Clear buffer first
    memset(UART_BUFFER, 0, sizeof(UART_BUFFER));
 8004f3e:	2240      	movs	r2, #64	@ 0x40
 8004f40:	2100      	movs	r1, #0
 8004f42:	486d      	ldr	r0, [pc, #436]	@ (80050f8 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8004f44:	f015 ffae 	bl	801aea4 <memset>

    // Add the name
    strcat((char *)UART_BUFFER, name);
 8004f48:	68b9      	ldr	r1, [r7, #8]
 8004f4a:	486b      	ldr	r0, [pc, #428]	@ (80050f8 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8004f4c:	f015 ffb2 	bl	801aeb4 <strcat>

    if (fault == 0x00)
 8004f50:	79fb      	ldrb	r3, [r7, #7]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d110      	bne.n	8004f78 <_ZN13Thermocouples10checkFaultEPch+0x48>
    {
        strcat((char *)UART_BUFFER, "FAULT_NONE\r\n");
 8004f56:	4868      	ldr	r0, [pc, #416]	@ (80050f8 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8004f58:	f7fb f972 	bl	8000240 <strlen>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	461a      	mov	r2, r3
 8004f60:	4b65      	ldr	r3, [pc, #404]	@ (80050f8 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8004f62:	4413      	add	r3, r2
 8004f64:	4a65      	ldr	r2, [pc, #404]	@ (80050fc <_ZN13Thermocouples10checkFaultEPch+0x1cc>)
 8004f66:	461c      	mov	r4, r3
 8004f68:	4613      	mov	r3, r2
 8004f6a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004f6c:	6020      	str	r0, [r4, #0]
 8004f6e:	6061      	str	r1, [r4, #4]
 8004f70:	60a2      	str	r2, [r4, #8]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	7323      	strb	r3, [r4, #12]
 8004f76:	e0b0      	b.n	80050da <_ZN13Thermocouples10checkFaultEPch+0x1aa>
    }
    else
    {
        // Check each fault bit individually for multiple faults
        if (fault & 0x01)
 8004f78:	79fb      	ldrb	r3, [r7, #7]
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d011      	beq.n	8004fa6 <_ZN13Thermocouples10checkFaultEPch+0x76>
            strcat((char *)UART_BUFFER, "FAULT_CJ_HIGH ");
 8004f82:	485d      	ldr	r0, [pc, #372]	@ (80050f8 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8004f84:	f7fb f95c 	bl	8000240 <strlen>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	4b5a      	ldr	r3, [pc, #360]	@ (80050f8 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8004f8e:	4413      	add	r3, r2
 8004f90:	4a5b      	ldr	r2, [pc, #364]	@ (8005100 <_ZN13Thermocouples10checkFaultEPch+0x1d0>)
 8004f92:	461c      	mov	r4, r3
 8004f94:	4613      	mov	r3, r2
 8004f96:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004f98:	6020      	str	r0, [r4, #0]
 8004f9a:	6061      	str	r1, [r4, #4]
 8004f9c:	60a2      	str	r2, [r4, #8]
 8004f9e:	881a      	ldrh	r2, [r3, #0]
 8004fa0:	789b      	ldrb	r3, [r3, #2]
 8004fa2:	81a2      	strh	r2, [r4, #12]
 8004fa4:	73a3      	strb	r3, [r4, #14]
        if (fault & 0x02)
 8004fa6:	79fb      	ldrb	r3, [r7, #7]
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00f      	beq.n	8004fd0 <_ZN13Thermocouples10checkFaultEPch+0xa0>
            strcat((char *)UART_BUFFER, "FAULT_CJ_LOW ");
 8004fb0:	4851      	ldr	r0, [pc, #324]	@ (80050f8 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8004fb2:	f7fb f945 	bl	8000240 <strlen>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	461a      	mov	r2, r3
 8004fba:	4b4f      	ldr	r3, [pc, #316]	@ (80050f8 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8004fbc:	4413      	add	r3, r2
 8004fbe:	4a51      	ldr	r2, [pc, #324]	@ (8005104 <_ZN13Thermocouples10checkFaultEPch+0x1d4>)
 8004fc0:	461c      	mov	r4, r3
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004fc6:	6020      	str	r0, [r4, #0]
 8004fc8:	6061      	str	r1, [r4, #4]
 8004fca:	60a2      	str	r2, [r4, #8]
 8004fcc:	881b      	ldrh	r3, [r3, #0]
 8004fce:	81a3      	strh	r3, [r4, #12]
        if (fault & 0x04)
 8004fd0:	79fb      	ldrb	r3, [r7, #7]
 8004fd2:	f003 0304 	and.w	r3, r3, #4
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d011      	beq.n	8004ffe <_ZN13Thermocouples10checkFaultEPch+0xce>
            strcat((char *)UART_BUFFER, "FAULT_TC_HIGH ");
 8004fda:	4847      	ldr	r0, [pc, #284]	@ (80050f8 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8004fdc:	f7fb f930 	bl	8000240 <strlen>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	4b44      	ldr	r3, [pc, #272]	@ (80050f8 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8004fe6:	4413      	add	r3, r2
 8004fe8:	4a47      	ldr	r2, [pc, #284]	@ (8005108 <_ZN13Thermocouples10checkFaultEPch+0x1d8>)
 8004fea:	461c      	mov	r4, r3
 8004fec:	4613      	mov	r3, r2
 8004fee:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004ff0:	6020      	str	r0, [r4, #0]
 8004ff2:	6061      	str	r1, [r4, #4]
 8004ff4:	60a2      	str	r2, [r4, #8]
 8004ff6:	881a      	ldrh	r2, [r3, #0]
 8004ff8:	789b      	ldrb	r3, [r3, #2]
 8004ffa:	81a2      	strh	r2, [r4, #12]
 8004ffc:	73a3      	strb	r3, [r4, #14]
        if (fault & 0x08)
 8004ffe:	79fb      	ldrb	r3, [r7, #7]
 8005000:	f003 0308 	and.w	r3, r3, #8
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00f      	beq.n	8005028 <_ZN13Thermocouples10checkFaultEPch+0xf8>
            strcat((char *)UART_BUFFER, "FAULT_TC_LOW ");
 8005008:	483b      	ldr	r0, [pc, #236]	@ (80050f8 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 800500a:	f7fb f919 	bl	8000240 <strlen>
 800500e:	4603      	mov	r3, r0
 8005010:	461a      	mov	r2, r3
 8005012:	4b39      	ldr	r3, [pc, #228]	@ (80050f8 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8005014:	4413      	add	r3, r2
 8005016:	4a3d      	ldr	r2, [pc, #244]	@ (800510c <_ZN13Thermocouples10checkFaultEPch+0x1dc>)
 8005018:	461c      	mov	r4, r3
 800501a:	4613      	mov	r3, r2
 800501c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800501e:	6020      	str	r0, [r4, #0]
 8005020:	6061      	str	r1, [r4, #4]
 8005022:	60a2      	str	r2, [r4, #8]
 8005024:	881b      	ldrh	r3, [r3, #0]
 8005026:	81a3      	strh	r3, [r4, #12]
        if (fault & 0x10)
 8005028:	79fb      	ldrb	r3, [r7, #7]
 800502a:	f003 0310 	and.w	r3, r3, #16
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00d      	beq.n	800504e <_ZN13Thermocouples10checkFaultEPch+0x11e>
            strcat((char *)UART_BUFFER, "FAULT_OVUV ");
 8005032:	4831      	ldr	r0, [pc, #196]	@ (80050f8 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8005034:	f7fb f904 	bl	8000240 <strlen>
 8005038:	4603      	mov	r3, r0
 800503a:	461a      	mov	r2, r3
 800503c:	4b2e      	ldr	r3, [pc, #184]	@ (80050f8 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 800503e:	4413      	add	r3, r2
 8005040:	4a33      	ldr	r2, [pc, #204]	@ (8005110 <_ZN13Thermocouples10checkFaultEPch+0x1e0>)
 8005042:	461c      	mov	r4, r3
 8005044:	4613      	mov	r3, r2
 8005046:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005048:	6020      	str	r0, [r4, #0]
 800504a:	6061      	str	r1, [r4, #4]
 800504c:	60a2      	str	r2, [r4, #8]
        if (fault & 0x20)
 800504e:	79fb      	ldrb	r3, [r7, #7]
 8005050:	f003 0320 	and.w	r3, r3, #32
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00d      	beq.n	8005074 <_ZN13Thermocouples10checkFaultEPch+0x144>
            strcat((char *)UART_BUFFER, "FAULT_OPEN ");
 8005058:	4827      	ldr	r0, [pc, #156]	@ (80050f8 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 800505a:	f7fb f8f1 	bl	8000240 <strlen>
 800505e:	4603      	mov	r3, r0
 8005060:	461a      	mov	r2, r3
 8005062:	4b25      	ldr	r3, [pc, #148]	@ (80050f8 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8005064:	4413      	add	r3, r2
 8005066:	4a2b      	ldr	r2, [pc, #172]	@ (8005114 <_ZN13Thermocouples10checkFaultEPch+0x1e4>)
 8005068:	461c      	mov	r4, r3
 800506a:	4613      	mov	r3, r2
 800506c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800506e:	6020      	str	r0, [r4, #0]
 8005070:	6061      	str	r1, [r4, #4]
 8005072:	60a2      	str	r2, [r4, #8]
        if (fault & 0x40)
 8005074:	79fb      	ldrb	r3, [r7, #7]
 8005076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00e      	beq.n	800509c <_ZN13Thermocouples10checkFaultEPch+0x16c>
            strcat((char *)UART_BUFFER, "FAULT_CJ_RANGE ");
 800507e:	481e      	ldr	r0, [pc, #120]	@ (80050f8 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8005080:	f7fb f8de 	bl	8000240 <strlen>
 8005084:	4603      	mov	r3, r0
 8005086:	461a      	mov	r2, r3
 8005088:	4b1b      	ldr	r3, [pc, #108]	@ (80050f8 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 800508a:	4413      	add	r3, r2
 800508c:	4a22      	ldr	r2, [pc, #136]	@ (8005118 <_ZN13Thermocouples10checkFaultEPch+0x1e8>)
 800508e:	461c      	mov	r4, r3
 8005090:	4615      	mov	r5, r2
 8005092:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005094:	6020      	str	r0, [r4, #0]
 8005096:	6061      	str	r1, [r4, #4]
 8005098:	60a2      	str	r2, [r4, #8]
 800509a:	60e3      	str	r3, [r4, #12]
        if (fault & 0x80)
 800509c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	da0e      	bge.n	80050c2 <_ZN13Thermocouples10checkFaultEPch+0x192>
            strcat((char *)UART_BUFFER, "FAULT_TC_RANGE ");
 80050a4:	4814      	ldr	r0, [pc, #80]	@ (80050f8 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 80050a6:	f7fb f8cb 	bl	8000240 <strlen>
 80050aa:	4603      	mov	r3, r0
 80050ac:	461a      	mov	r2, r3
 80050ae:	4b12      	ldr	r3, [pc, #72]	@ (80050f8 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 80050b0:	4413      	add	r3, r2
 80050b2:	4a1a      	ldr	r2, [pc, #104]	@ (800511c <_ZN13Thermocouples10checkFaultEPch+0x1ec>)
 80050b4:	461c      	mov	r4, r3
 80050b6:	4615      	mov	r5, r2
 80050b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050ba:	6020      	str	r0, [r4, #0]
 80050bc:	6061      	str	r1, [r4, #4]
 80050be:	60a2      	str	r2, [r4, #8]
 80050c0:	60e3      	str	r3, [r4, #12]

        strcat((char *)UART_BUFFER, "\r\n");
 80050c2:	480d      	ldr	r0, [pc, #52]	@ (80050f8 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 80050c4:	f7fb f8bc 	bl	8000240 <strlen>
 80050c8:	4603      	mov	r3, r0
 80050ca:	461a      	mov	r2, r3
 80050cc:	4b0a      	ldr	r3, [pc, #40]	@ (80050f8 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 80050ce:	4413      	add	r3, r2
 80050d0:	4a13      	ldr	r2, [pc, #76]	@ (8005120 <_ZN13Thermocouples10checkFaultEPch+0x1f0>)
 80050d2:	8811      	ldrh	r1, [r2, #0]
 80050d4:	7892      	ldrb	r2, [r2, #2]
 80050d6:	8019      	strh	r1, [r3, #0]
 80050d8:	709a      	strb	r2, [r3, #2]

        // left.begin();
        // right.begin();
    }

    HAL_UART_Transmit(&huart1, UART_BUFFER, strlen((char *)UART_BUFFER), 300);
 80050da:	4807      	ldr	r0, [pc, #28]	@ (80050f8 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 80050dc:	f7fb f8b0 	bl	8000240 <strlen>
 80050e0:	4603      	mov	r3, r0
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80050e8:	4903      	ldr	r1, [pc, #12]	@ (80050f8 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 80050ea:	480e      	ldr	r0, [pc, #56]	@ (8005124 <_ZN13Thermocouples10checkFaultEPch+0x1f4>)
 80050ec:	f00a f97e 	bl	800f3ec <HAL_UART_Transmit>
 80050f0:	bf00      	nop
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bdb0      	pop	{r4, r5, r7, pc}
 80050f8:	200004cc 	.word	0x200004cc
 80050fc:	0801ceac 	.word	0x0801ceac
 8005100:	0801cebc 	.word	0x0801cebc
 8005104:	0801cecc 	.word	0x0801cecc
 8005108:	0801cedc 	.word	0x0801cedc
 800510c:	0801ceec 	.word	0x0801ceec
 8005110:	0801cefc 	.word	0x0801cefc
 8005114:	0801cf08 	.word	0x0801cf08
 8005118:	0801cf14 	.word	0x0801cf14
 800511c:	0801cf24 	.word	0x0801cf24
 8005120:	0801cf34 	.word	0x0801cf34
 8005124:	20000a80 	.word	0x20000a80

08005128 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8005128:	b5b0      	push	{r4, r5, r7, lr}
 800512a:	b088      	sub	sp, #32
 800512c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800512e:	4b0b      	ldr	r3, [pc, #44]	@ (800515c <APPD_EnableCPU2+0x34>)
 8005130:	1d3c      	adds	r4, r7, #4
 8005132:	461d      	mov	r5, r3
 8005134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005138:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800513c:	c403      	stmia	r4!, {r0, r1}
 800513e:	8022      	strh	r2, [r4, #0]
 8005140:	3402      	adds	r4, #2
 8005142:	0c13      	lsrs	r3, r2, #16
 8005144:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8005146:	f010 ff81 	bl	801604c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800514a:	1d3b      	adds	r3, r7, #4
 800514c:	4618      	mov	r0, r3
 800514e:	f010 fa12 	bl	8015576 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8005152:	bf00      	nop
}
 8005154:	3720      	adds	r7, #32
 8005156:	46bd      	mov	sp, r7
 8005158:	bdb0      	pop	{r4, r5, r7, pc}
 800515a:	bf00      	nop
 800515c:	0801cf38 	.word	0x0801cf38

08005160 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8005168:	4b07      	ldr	r3, [pc, #28]	@ (8005188 <LL_C2_PWR_SetPowerMode+0x28>)
 800516a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800516e:	f023 0207 	bic.w	r2, r3, #7
 8005172:	4905      	ldr	r1, [pc, #20]	@ (8005188 <LL_C2_PWR_SetPowerMode+0x28>)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4313      	orrs	r3, r2
 8005178:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	58000400 	.word	0x58000400

0800518c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005194:	4b06      	ldr	r3, [pc, #24]	@ (80051b0 <LL_EXTI_EnableIT_32_63+0x24>)
 8005196:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800519a:	4905      	ldr	r1, [pc, #20]	@ (80051b0 <LL_EXTI_EnableIT_32_63+0x24>)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4313      	orrs	r3, r2
 80051a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	58000800 	.word	0x58000800

080051b4 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80051bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051c0:	4a0a      	ldr	r2, [pc, #40]	@ (80051ec <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80051c2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80051c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051ce:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	021b      	lsls	r3, r3, #8
 80051d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051da:	4313      	orrs	r3, r2
 80051dc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	cafecafe 	.word	0xcafecafe

080051f0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80051f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005202:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4313      	orrs	r3, r2
 800520a:	608b      	str	r3, [r1, #8]
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8005218:	b480      	push	{r7}
 800521a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 800521c:	4b04      	ldr	r3, [pc, #16]	@ (8005230 <LL_DBGMCU_GetDeviceID+0x18>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8005224:	4618      	mov	r0, r3
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	e0042000 	.word	0xe0042000

08005234 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8005234:	b480      	push	{r7}
 8005236:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8005238:	4b04      	ldr	r3, [pc, #16]	@ (800524c <LL_DBGMCU_GetRevisionID+0x18>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	0c1b      	lsrs	r3, r3, #16
 800523e:	b29b      	uxth	r3, r3
}
 8005240:	4618      	mov	r0, r3
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	e0042000 	.word	0xe0042000

08005250 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8005250:	b480      	push	{r7}
 8005252:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005254:	4b05      	ldr	r3, [pc, #20]	@ (800526c <LL_LPM_EnableSleep+0x1c>)
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	4a04      	ldr	r2, [pc, #16]	@ (800526c <LL_LPM_EnableSleep+0x1c>)
 800525a:	f023 0304 	bic.w	r3, r3, #4
 800525e:	6113      	str	r3, [r2, #16]
}
 8005260:	bf00      	nop
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	e000ed00 	.word	0xe000ed00

08005270 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	22ff      	movs	r2, #255	@ 0xff
 800527c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800527e:	bf00      	nop
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800528a:	b480      	push	{r7}
 800528c:	b083      	sub	sp, #12
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	22ca      	movs	r2, #202	@ 0xca
 8005296:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2253      	movs	r2, #83	@ 0x53
 800529c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800529e:	bf00      	nop
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b083      	sub	sp, #12
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f023 0207 	bic.w	r2, r3, #7
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	431a      	orrs	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	609a      	str	r2, [r3, #8]
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80052d4:	4b04      	ldr	r3, [pc, #16]	@ (80052e8 <MX_APPE_Config+0x18>)
 80052d6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80052da:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80052dc:	f000 f824 	bl	8005328 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80052e0:	f000 f829 	bl	8005336 <Config_HSE>

  return;
 80052e4:	bf00      	nop
}
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	58004000 	.word	0x58004000

080052ec <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80052f0:	f000 f835 	bl	800535e <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80052f4:	f000 f84e 	bl	8005394 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80052f8:	4903      	ldr	r1, [pc, #12]	@ (8005308 <MX_APPE_Init+0x1c>)
 80052fa:	2000      	movs	r0, #0
 80052fc:	f000 fe2c 	bl	8005f58 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8005300:	f000 f856 	bl	80053b0 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8005304:	bf00      	nop
}
 8005306:	bd80      	pop	{r7, pc}
 8005308:	20000898 	.word	0x20000898

0800530c <Init_Smps>:

void Init_Smps(void)
{
 800530c:	b480      	push	{r7}
 800530e:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8005310:	bf00      	nop
}
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <Init_Exti>:

void Init_Exti(void)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800531e:	2050      	movs	r0, #80	@ 0x50
 8005320:	f7ff ff34 	bl	800518c <LL_EXTI_EnableIT_32_63>

  return;
 8005324:	bf00      	nop
}
 8005326:	bd80      	pop	{r7, pc}

08005328 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 800532c:	bf00      	nop
}
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b082      	sub	sp, #8
 800533a:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800533c:	2000      	movs	r0, #0
 800533e:	f010 ff11 	bl	8016164 <OTP_Read>
 8005342:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d005      	beq.n	8005356 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	799b      	ldrb	r3, [r3, #6]
 800534e:	4618      	mov	r0, r3
 8005350:	f7ff ff30 	bl	80051b4 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8005354:	bf00      	nop
 8005356:	bf00      	nop
}
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <System_Init>:

static void System_Init(void)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	af00      	add	r7, sp, #0
  Init_Smps();
 8005362:	f7ff ffd3 	bl	800530c <Init_Smps>

  Init_Exti();
 8005366:	f7ff ffd8 	bl	800531a <Init_Exti>

  Init_Rtc();
 800536a:	f000 f803 	bl	8005374 <Init_Rtc>

  return;
 800536e:	bf00      	nop
}
 8005370:	bd80      	pop	{r7, pc}
	...

08005374 <Init_Rtc>:

static void Init_Rtc(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8005378:	4805      	ldr	r0, [pc, #20]	@ (8005390 <Init_Rtc+0x1c>)
 800537a:	f7ff ff86 	bl	800528a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800537e:	2100      	movs	r1, #0
 8005380:	4803      	ldr	r0, [pc, #12]	@ (8005390 <Init_Rtc+0x1c>)
 8005382:	f7ff ff92 	bl	80052aa <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8005386:	4802      	ldr	r0, [pc, #8]	@ (8005390 <Init_Rtc+0x1c>)
 8005388:	f7ff ff72 	bl	8005270 <LL_RTC_EnableWriteProtection>

  return;
 800538c:	bf00      	nop
}
 800538e:	bd80      	pop	{r7, pc}
 8005390:	40002800 	.word	0x40002800

08005394 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8005398:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800539c:	f7ff ff28 	bl	80051f0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80053a0:	f013 fe9c 	bl	80190dc <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80053a4:	2004      	movs	r0, #4
 80053a6:	f7ff fedb 	bl	8005160 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80053aa:	bf00      	nop
}
 80053ac:	bd80      	pop	{r7, pc}
	...

080053b0 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b088      	sub	sp, #32
 80053b4:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80053b6:	f010 fc93 	bl	8015ce0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80053ba:	4a11      	ldr	r2, [pc, #68]	@ (8005400 <appe_Tl_Init+0x50>)
 80053bc:	2100      	movs	r1, #0
 80053be:	2008      	movs	r0, #8
 80053c0:	f013 ffca 	bl	8019358 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80053c4:	4b0f      	ldr	r3, [pc, #60]	@ (8005404 <appe_Tl_Init+0x54>)
 80053c6:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80053c8:	4b0f      	ldr	r3, [pc, #60]	@ (8005408 <appe_Tl_Init+0x58>)
 80053ca:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80053cc:	463b      	mov	r3, r7
 80053ce:	4619      	mov	r1, r3
 80053d0:	480e      	ldr	r0, [pc, #56]	@ (800540c <appe_Tl_Init+0x5c>)
 80053d2:	f010 fb47 	bl	8015a64 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80053d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005410 <appe_Tl_Init+0x60>)
 80053d8:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80053da:	4b0e      	ldr	r3, [pc, #56]	@ (8005414 <appe_Tl_Init+0x64>)
 80053dc:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80053de:	4b0e      	ldr	r3, [pc, #56]	@ (8005418 <appe_Tl_Init+0x68>)
 80053e0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80053e2:	f240 533c 	movw	r3, #1340	@ 0x53c
 80053e6:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80053e8:	f107 0308 	add.w	r3, r7, #8
 80053ec:	4618      	mov	r0, r3
 80053ee:	f010 fdb9 	bl	8015f64 <TL_MM_Init>

  TL_Enable();
 80053f2:	f010 fc6f 	bl	8015cd4 <TL_Enable>

  return;
 80053f6:	bf00      	nop
}
 80053f8:	3720      	adds	r7, #32
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	08015a9d 	.word	0x08015a9d
 8005404:	20030734 	.word	0x20030734
 8005408:	0800541d 	.word	0x0800541d
 800540c:	08005435 	.word	0x08005435
 8005410:	2003094c 	.word	0x2003094c
 8005414:	20030840 	.word	0x20030840
 8005418:	200301f8 	.word	0x200301f8

0800541c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	4603      	mov	r3, r0
 8005424:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8005426:	bf00      	nop
}
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
	...

08005434 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b088      	sub	sp, #32
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	330b      	adds	r3, #11
 8005442:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	881b      	ldrh	r3, [r3, #0]
 8005448:	b29b      	uxth	r3, r3
 800544a:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 800544e:	2b07      	cmp	r3, #7
 8005450:	d81f      	bhi.n	8005492 <APPE_SysUserEvtRx+0x5e>
 8005452:	a201      	add	r2, pc, #4	@ (adr r2, 8005458 <APPE_SysUserEvtRx+0x24>)
 8005454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005458:	08005479 	.word	0x08005479
 800545c:	0800548b 	.word	0x0800548b
 8005460:	08005493 	.word	0x08005493
 8005464:	08005493 	.word	0x08005493
 8005468:	08005493 	.word	0x08005493
 800546c:	08005493 	.word	0x08005493
 8005470:	08005493 	.word	0x08005493
 8005474:	08005493 	.word	0x08005493
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8005478:	f107 030c 	add.w	r3, r7, #12
 800547c:	4618      	mov	r0, r3
 800547e:	f010 f8a7 	bl	80155d0 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f81b 	bl	80054be <APPE_SysEvtReadyProcessing>
    break;
 8005488:	e004      	b.n	8005494 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f806 	bl	800549c <APPE_SysEvtError>
    break;
 8005490:	e000      	b.n	8005494 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8005492:	bf00      	nop
  }

  return;
 8005494:	bf00      	nop
}
 8005496:	3720      	adds	r7, #32
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	330b      	adds	r3, #11
 80054aa:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	3302      	adds	r3, #2
 80054b0:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80054b2:	bf00      	nop
}
 80054b4:	3714      	adds	r7, #20
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b08a      	sub	sp, #40	@ 0x28
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80054c6:	f107 0308 	add.w	r3, r7, #8
 80054ca:	2200      	movs	r2, #0
 80054cc:	601a      	str	r2, [r3, #0]
 80054ce:	605a      	str	r2, [r3, #4]
 80054d0:	609a      	str	r2, [r3, #8]
 80054d2:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80054d4:	2300      	movs	r3, #0
 80054d6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 80054d8:	2300      	movs	r3, #0
 80054da:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	330b      	adds	r3, #11
 80054e2:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	3302      	adds	r3, #2
 80054e8:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d11d      	bne.n	800552e <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80054f2:	f7ff fe19 	bl	8005128 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80054f6:	230f      	movs	r3, #15
 80054f8:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80054fa:	237f      	movs	r3, #127	@ 0x7f
 80054fc:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80054fe:	f7ff fe99 	bl	8005234 <LL_DBGMCU_GetRevisionID>
 8005502:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8005504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005506:	b29b      	uxth	r3, r3
 8005508:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800550a:	f7ff fe85 	bl	8005218 <LL_DBGMCU_GetDeviceID>
 800550e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	b29b      	uxth	r3, r3
 8005514:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8005516:	f107 0308 	add.w	r3, r7, #8
 800551a:	4618      	mov	r0, r3
 800551c:	f010 f842 	bl	80155a4 <SHCI_C2_Config>

    APP_BLE_Init();
 8005520:	f010 ff2a 	bl	8016378 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8005524:	2100      	movs	r1, #0
 8005526:	2001      	movs	r0, #1
 8005528:	f013 fdea 	bl	8019100 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 800552c:	e007      	b.n	800553e <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d103      	bne.n	800553e <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	701a      	strb	r2, [r3, #0]
  return;
 800553c:	bf00      	nop
 800553e:	bf00      	nop
}
 8005540:	3728      	adds	r7, #40	@ 0x28
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b084      	sub	sp, #16
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800554e:	f002 fac7 	bl	8007ae0 <HAL_GetTick>
 8005552:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555e:	d00a      	beq.n	8005576 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8005560:	f002 fad6 	bl	8007b10 <HAL_GetTickFreq>
 8005564:	4603      	mov	r3, r0
 8005566:	461a      	mov	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4413      	add	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800556e:	e002      	b.n	8005576 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8005570:	f7ff fe6e 	bl	8005250 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8005574:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8005576:	f002 fab3 	bl	8007ae0 <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	429a      	cmp	r2, r3
 8005584:	d8f4      	bhi.n	8005570 <HAL_Delay+0x2a>
  }
}
 8005586:	bf00      	nop
 8005588:	bf00      	nop
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8005594:	f04f 30ff 	mov.w	r0, #4294967295
 8005598:	f013 fde2 	bl	8019160 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800559c:	bf00      	nop
 800559e:	bd80      	pop	{r7, pc}

080055a0 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80055a0:	b480      	push	{r7}
 80055a2:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80055a4:	bf00      	nop
}
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b082      	sub	sp, #8
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80055b6:	2100      	movs	r1, #0
 80055b8:	2008      	movs	r0, #8
 80055ba:	f013 feef 	bl	801939c <UTIL_SEQ_SetTask>
  return;
 80055be:	bf00      	nop
}
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b082      	sub	sp, #8
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80055ce:	2002      	movs	r0, #2
 80055d0:	f013 ff50 	bl	8019474 <UTIL_SEQ_SetEvt>
  return;
 80055d4:	bf00      	nop
}
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80055e4:	2002      	movs	r0, #2
 80055e6:	f013 ff65 	bl	80194b4 <UTIL_SEQ_WaitEvt>
  return;
 80055ea:	bf00      	nop
}
 80055ec:	3708      	adds	r7, #8
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b085      	sub	sp, #20
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80055fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055fe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005600:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4313      	orrs	r3, r2
 8005608:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800560a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800560e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4013      	ands	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005616:	68fb      	ldr	r3, [r7, #12]
}
 8005618:	bf00      	nop
 800561a:	3714      	adds	r7, #20
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8005628:	2004      	movs	r0, #4
 800562a:	f7ff ffe2 	bl	80055f2 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800562e:	2001      	movs	r0, #1
 8005630:	f7ff ffdf 	bl	80055f2 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005634:	2200      	movs	r2, #0
 8005636:	2100      	movs	r1, #0
 8005638:	200b      	movs	r0, #11
 800563a:	f002 fbb0 	bl	8007d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800563e:	200b      	movs	r0, #11
 8005640:	f002 fbc7 	bl	8007dd2 <HAL_NVIC_EnableIRQ>

}
 8005644:	bf00      	nop
 8005646:	bd80      	pop	{r7, pc}

08005648 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005650:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005654:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005656:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4313      	orrs	r3, r2
 800565e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005660:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005664:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4013      	ands	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800566c:	68fb      	ldr	r3, [r7, #12]
}
 800566e:	bf00      	nop
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
	...

0800567c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005682:	1d3b      	adds	r3, r7, #4
 8005684:	2200      	movs	r2, #0
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	605a      	str	r2, [r3, #4]
 800568a:	609a      	str	r2, [r3, #8]
 800568c:	60da      	str	r2, [r3, #12]
 800568e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005690:	2004      	movs	r0, #4
 8005692:	f7ff ffd9 	bl	8005648 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005696:	2002      	movs	r0, #2
 8005698:	f7ff ffd6 	bl	8005648 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800569c:	2001      	movs	r0, #1
 800569e:	f7ff ffd3 	bl	8005648 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TFT_RESET_Pin|TFT_RS_DC_Pin|TFT_CS_Pin|TEMP1_CS_Pin
 80056a2:	2200      	movs	r2, #0
 80056a4:	f240 310e 	movw	r1, #782	@ 0x30e
 80056a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80056ac:	f003 f832 	bl	8008714 <HAL_GPIO_WritePin>
                          |TEMP2_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_RESET);
 80056b0:	2200      	movs	r2, #0
 80056b2:	2120      	movs	r1, #32
 80056b4:	481d      	ldr	r0, [pc, #116]	@ (800572c <MX_GPIO_Init+0xb0>)
 80056b6:	f003 f82d 	bl	8008714 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TFT_RESET_Pin TFT_RS_DC_Pin TFT_CS_Pin TEMP1_CS_Pin
                           TEMP2_CS_Pin */
  GPIO_InitStruct.Pin = TFT_RESET_Pin|TFT_RS_DC_Pin|TFT_CS_Pin|TEMP1_CS_Pin
 80056ba:	f240 330e 	movw	r3, #782	@ 0x30e
 80056be:	607b      	str	r3, [r7, #4]
                          |TEMP2_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056c0:	2301      	movs	r3, #1
 80056c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056c4:	2300      	movs	r3, #0
 80056c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056c8:	2300      	movs	r3, #0
 80056ca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056cc:	1d3b      	adds	r3, r7, #4
 80056ce:	4619      	mov	r1, r3
 80056d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80056d4:	f002 fe96 	bl	8008404 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEMP1_DRDY_Pin TEMP2_DRDY_Pin */
  GPIO_InitStruct.Pin = TEMP1_DRDY_Pin|TEMP2_DRDY_Pin;
 80056d8:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 80056dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056de:	2300      	movs	r3, #0
 80056e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056e2:	2300      	movs	r3, #0
 80056e4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056e6:	1d3b      	adds	r3, r7, #4
 80056e8:	4619      	mov	r1, r3
 80056ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80056ee:	f002 fe89 	bl	8008404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80056f2:	2301      	movs	r3, #1
 80056f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056f6:	2300      	movs	r3, #0
 80056f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056fa:	2300      	movs	r3, #0
 80056fc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056fe:	1d3b      	adds	r3, r7, #4
 8005700:	4619      	mov	r1, r3
 8005702:	480a      	ldr	r0, [pc, #40]	@ (800572c <MX_GPIO_Init+0xb0>)
 8005704:	f002 fe7e 	bl	8008404 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CS_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin;
 8005708:	2320      	movs	r3, #32
 800570a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800570c:	2301      	movs	r3, #1
 800570e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005710:	2300      	movs	r3, #0
 8005712:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005714:	2300      	movs	r3, #0
 8005716:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ADC_CS_GPIO_Port, &GPIO_InitStruct);
 8005718:	1d3b      	adds	r3, r7, #4
 800571a:	4619      	mov	r1, r3
 800571c:	4803      	ldr	r0, [pc, #12]	@ (800572c <MX_GPIO_Init+0xb0>)
 800571e:	f002 fe71 	bl	8008404 <HAL_GPIO_Init>

}
 8005722:	bf00      	nop
 8005724:	3718      	adds	r7, #24
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	48000400 	.word	0x48000400

08005730 <LL_EXTI_EnableIT_0_31>:
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005738:	4b06      	ldr	r3, [pc, #24]	@ (8005754 <LL_EXTI_EnableIT_0_31+0x24>)
 800573a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800573e:	4905      	ldr	r1, [pc, #20]	@ (8005754 <LL_EXTI_EnableIT_0_31+0x24>)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4313      	orrs	r3, r2
 8005744:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	58000800 	.word	0x58000800

08005758 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005760:	4b05      	ldr	r3, [pc, #20]	@ (8005778 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	4904      	ldr	r1, [pc, #16]	@ (8005778 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4313      	orrs	r3, r2
 800576a:	600b      	str	r3, [r1, #0]

}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	58000800 	.word	0x58000800

0800577c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8005782:	4b0d      	ldr	r3, [pc, #52]	@ (80057b8 <ReadRtcSsrValue+0x3c>)
 8005784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005786:	b29b      	uxth	r3, r3
 8005788:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800578a:	4b0b      	ldr	r3, [pc, #44]	@ (80057b8 <ReadRtcSsrValue+0x3c>)
 800578c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800578e:	b29b      	uxth	r3, r3
 8005790:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8005792:	e005      	b.n	80057a0 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8005798:	4b07      	ldr	r3, [pc, #28]	@ (80057b8 <ReadRtcSsrValue+0x3c>)
 800579a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800579c:	b29b      	uxth	r3, r3
 800579e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d1f5      	bne.n	8005794 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80057a8:	683b      	ldr	r3, [r7, #0]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	40002800 	.word	0x40002800

080057bc <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	4603      	mov	r3, r0
 80057c4:	460a      	mov	r2, r1
 80057c6:	71fb      	strb	r3, [r7, #7]
 80057c8:	4613      	mov	r3, r2
 80057ca:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80057cc:	79ba      	ldrb	r2, [r7, #6]
 80057ce:	491d      	ldr	r1, [pc, #116]	@ (8005844 <LinkTimerAfter+0x88>)
 80057d0:	4613      	mov	r3, r2
 80057d2:	005b      	lsls	r3, r3, #1
 80057d4:	4413      	add	r3, r2
 80057d6:	00db      	lsls	r3, r3, #3
 80057d8:	440b      	add	r3, r1
 80057da:	3315      	adds	r3, #21
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80057e0:	7bfb      	ldrb	r3, [r7, #15]
 80057e2:	2b06      	cmp	r3, #6
 80057e4:	d009      	beq.n	80057fa <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80057e6:	7bfa      	ldrb	r2, [r7, #15]
 80057e8:	4916      	ldr	r1, [pc, #88]	@ (8005844 <LinkTimerAfter+0x88>)
 80057ea:	4613      	mov	r3, r2
 80057ec:	005b      	lsls	r3, r3, #1
 80057ee:	4413      	add	r3, r2
 80057f0:	00db      	lsls	r3, r3, #3
 80057f2:	440b      	add	r3, r1
 80057f4:	3314      	adds	r3, #20
 80057f6:	79fa      	ldrb	r2, [r7, #7]
 80057f8:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80057fa:	79fa      	ldrb	r2, [r7, #7]
 80057fc:	4911      	ldr	r1, [pc, #68]	@ (8005844 <LinkTimerAfter+0x88>)
 80057fe:	4613      	mov	r3, r2
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	4413      	add	r3, r2
 8005804:	00db      	lsls	r3, r3, #3
 8005806:	440b      	add	r3, r1
 8005808:	3315      	adds	r3, #21
 800580a:	7bfa      	ldrb	r2, [r7, #15]
 800580c:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800580e:	79fa      	ldrb	r2, [r7, #7]
 8005810:	490c      	ldr	r1, [pc, #48]	@ (8005844 <LinkTimerAfter+0x88>)
 8005812:	4613      	mov	r3, r2
 8005814:	005b      	lsls	r3, r3, #1
 8005816:	4413      	add	r3, r2
 8005818:	00db      	lsls	r3, r3, #3
 800581a:	440b      	add	r3, r1
 800581c:	3314      	adds	r3, #20
 800581e:	79ba      	ldrb	r2, [r7, #6]
 8005820:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8005822:	79ba      	ldrb	r2, [r7, #6]
 8005824:	4907      	ldr	r1, [pc, #28]	@ (8005844 <LinkTimerAfter+0x88>)
 8005826:	4613      	mov	r3, r2
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	4413      	add	r3, r2
 800582c:	00db      	lsls	r3, r3, #3
 800582e:	440b      	add	r3, r1
 8005830:	3315      	adds	r3, #21
 8005832:	79fa      	ldrb	r2, [r7, #7]
 8005834:	701a      	strb	r2, [r3, #0]

  return;
 8005836:	bf00      	nop
}
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	2000039c 	.word	0x2000039c

08005848 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	4603      	mov	r3, r0
 8005850:	460a      	mov	r2, r1
 8005852:	71fb      	strb	r3, [r7, #7]
 8005854:	4613      	mov	r3, r2
 8005856:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8005858:	4b29      	ldr	r3, [pc, #164]	@ (8005900 <LinkTimerBefore+0xb8>)
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	b2db      	uxtb	r3, r3
 800585e:	79ba      	ldrb	r2, [r7, #6]
 8005860:	429a      	cmp	r2, r3
 8005862:	d032      	beq.n	80058ca <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8005864:	79ba      	ldrb	r2, [r7, #6]
 8005866:	4927      	ldr	r1, [pc, #156]	@ (8005904 <LinkTimerBefore+0xbc>)
 8005868:	4613      	mov	r3, r2
 800586a:	005b      	lsls	r3, r3, #1
 800586c:	4413      	add	r3, r2
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	440b      	add	r3, r1
 8005872:	3314      	adds	r3, #20
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8005878:	7bfa      	ldrb	r2, [r7, #15]
 800587a:	4922      	ldr	r1, [pc, #136]	@ (8005904 <LinkTimerBefore+0xbc>)
 800587c:	4613      	mov	r3, r2
 800587e:	005b      	lsls	r3, r3, #1
 8005880:	4413      	add	r3, r2
 8005882:	00db      	lsls	r3, r3, #3
 8005884:	440b      	add	r3, r1
 8005886:	3315      	adds	r3, #21
 8005888:	79fa      	ldrb	r2, [r7, #7]
 800588a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 800588c:	79fa      	ldrb	r2, [r7, #7]
 800588e:	491d      	ldr	r1, [pc, #116]	@ (8005904 <LinkTimerBefore+0xbc>)
 8005890:	4613      	mov	r3, r2
 8005892:	005b      	lsls	r3, r3, #1
 8005894:	4413      	add	r3, r2
 8005896:	00db      	lsls	r3, r3, #3
 8005898:	440b      	add	r3, r1
 800589a:	3315      	adds	r3, #21
 800589c:	79ba      	ldrb	r2, [r7, #6]
 800589e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80058a0:	79fa      	ldrb	r2, [r7, #7]
 80058a2:	4918      	ldr	r1, [pc, #96]	@ (8005904 <LinkTimerBefore+0xbc>)
 80058a4:	4613      	mov	r3, r2
 80058a6:	005b      	lsls	r3, r3, #1
 80058a8:	4413      	add	r3, r2
 80058aa:	00db      	lsls	r3, r3, #3
 80058ac:	440b      	add	r3, r1
 80058ae:	3314      	adds	r3, #20
 80058b0:	7bfa      	ldrb	r2, [r7, #15]
 80058b2:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80058b4:	79ba      	ldrb	r2, [r7, #6]
 80058b6:	4913      	ldr	r1, [pc, #76]	@ (8005904 <LinkTimerBefore+0xbc>)
 80058b8:	4613      	mov	r3, r2
 80058ba:	005b      	lsls	r3, r3, #1
 80058bc:	4413      	add	r3, r2
 80058be:	00db      	lsls	r3, r3, #3
 80058c0:	440b      	add	r3, r1
 80058c2:	3314      	adds	r3, #20
 80058c4:	79fa      	ldrb	r2, [r7, #7]
 80058c6:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80058c8:	e014      	b.n	80058f4 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80058ca:	79fa      	ldrb	r2, [r7, #7]
 80058cc:	490d      	ldr	r1, [pc, #52]	@ (8005904 <LinkTimerBefore+0xbc>)
 80058ce:	4613      	mov	r3, r2
 80058d0:	005b      	lsls	r3, r3, #1
 80058d2:	4413      	add	r3, r2
 80058d4:	00db      	lsls	r3, r3, #3
 80058d6:	440b      	add	r3, r1
 80058d8:	3315      	adds	r3, #21
 80058da:	79ba      	ldrb	r2, [r7, #6]
 80058dc:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80058de:	79ba      	ldrb	r2, [r7, #6]
 80058e0:	4908      	ldr	r1, [pc, #32]	@ (8005904 <LinkTimerBefore+0xbc>)
 80058e2:	4613      	mov	r3, r2
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	4413      	add	r3, r2
 80058e8:	00db      	lsls	r3, r3, #3
 80058ea:	440b      	add	r3, r1
 80058ec:	3314      	adds	r3, #20
 80058ee:	79fa      	ldrb	r2, [r7, #7]
 80058f0:	701a      	strb	r2, [r3, #0]
  return;
 80058f2:	bf00      	nop
}
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	2000042c 	.word	0x2000042c
 8005904:	2000039c 	.word	0x2000039c

08005908 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	4603      	mov	r3, r0
 8005910:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8005912:	4b4e      	ldr	r3, [pc, #312]	@ (8005a4c <linkTimer+0x144>)
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2b06      	cmp	r3, #6
 800591a:	d118      	bne.n	800594e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 800591c:	4b4b      	ldr	r3, [pc, #300]	@ (8005a4c <linkTimer+0x144>)
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	b2da      	uxtb	r2, r3
 8005922:	4b4b      	ldr	r3, [pc, #300]	@ (8005a50 <linkTimer+0x148>)
 8005924:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8005926:	4a49      	ldr	r2, [pc, #292]	@ (8005a4c <linkTimer+0x144>)
 8005928:	79fb      	ldrb	r3, [r7, #7]
 800592a:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 800592c:	79fa      	ldrb	r2, [r7, #7]
 800592e:	4949      	ldr	r1, [pc, #292]	@ (8005a54 <linkTimer+0x14c>)
 8005930:	4613      	mov	r3, r2
 8005932:	005b      	lsls	r3, r3, #1
 8005934:	4413      	add	r3, r2
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	440b      	add	r3, r1
 800593a:	3315      	adds	r3, #21
 800593c:	2206      	movs	r2, #6
 800593e:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8005940:	4b45      	ldr	r3, [pc, #276]	@ (8005a58 <linkTimer+0x150>)
 8005942:	f04f 32ff 	mov.w	r2, #4294967295
 8005946:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8005948:	2300      	movs	r3, #0
 800594a:	81fb      	strh	r3, [r7, #14]
 800594c:	e078      	b.n	8005a40 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800594e:	f000 f909 	bl	8005b64 <ReturnTimeElapsed>
 8005952:	4603      	mov	r3, r0
 8005954:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8005956:	79fa      	ldrb	r2, [r7, #7]
 8005958:	493e      	ldr	r1, [pc, #248]	@ (8005a54 <linkTimer+0x14c>)
 800595a:	4613      	mov	r3, r2
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	4413      	add	r3, r2
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	440b      	add	r3, r1
 8005964:	3308      	adds	r3, #8
 8005966:	6819      	ldr	r1, [r3, #0]
 8005968:	89fb      	ldrh	r3, [r7, #14]
 800596a:	79fa      	ldrb	r2, [r7, #7]
 800596c:	4419      	add	r1, r3
 800596e:	4839      	ldr	r0, [pc, #228]	@ (8005a54 <linkTimer+0x14c>)
 8005970:	4613      	mov	r3, r2
 8005972:	005b      	lsls	r3, r3, #1
 8005974:	4413      	add	r3, r2
 8005976:	00db      	lsls	r3, r3, #3
 8005978:	4403      	add	r3, r0
 800597a:	3308      	adds	r3, #8
 800597c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800597e:	79fa      	ldrb	r2, [r7, #7]
 8005980:	4934      	ldr	r1, [pc, #208]	@ (8005a54 <linkTimer+0x14c>)
 8005982:	4613      	mov	r3, r2
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	4413      	add	r3, r2
 8005988:	00db      	lsls	r3, r3, #3
 800598a:	440b      	add	r3, r1
 800598c:	3308      	adds	r3, #8
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8005992:	4b2e      	ldr	r3, [pc, #184]	@ (8005a4c <linkTimer+0x144>)
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	b2db      	uxtb	r3, r3
 8005998:	4619      	mov	r1, r3
 800599a:	4a2e      	ldr	r2, [pc, #184]	@ (8005a54 <linkTimer+0x14c>)
 800599c:	460b      	mov	r3, r1
 800599e:	005b      	lsls	r3, r3, #1
 80059a0:	440b      	add	r3, r1
 80059a2:	00db      	lsls	r3, r3, #3
 80059a4:	4413      	add	r3, r2
 80059a6:	3308      	adds	r3, #8
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d337      	bcc.n	8005a20 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80059b0:	4b26      	ldr	r3, [pc, #152]	@ (8005a4c <linkTimer+0x144>)
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80059b6:	7b7a      	ldrb	r2, [r7, #13]
 80059b8:	4926      	ldr	r1, [pc, #152]	@ (8005a54 <linkTimer+0x14c>)
 80059ba:	4613      	mov	r3, r2
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	4413      	add	r3, r2
 80059c0:	00db      	lsls	r3, r3, #3
 80059c2:	440b      	add	r3, r1
 80059c4:	3315      	adds	r3, #21
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80059ca:	e013      	b.n	80059f4 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80059cc:	7b7a      	ldrb	r2, [r7, #13]
 80059ce:	4921      	ldr	r1, [pc, #132]	@ (8005a54 <linkTimer+0x14c>)
 80059d0:	4613      	mov	r3, r2
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	4413      	add	r3, r2
 80059d6:	00db      	lsls	r3, r3, #3
 80059d8:	440b      	add	r3, r1
 80059da:	3315      	adds	r3, #21
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80059e0:	7b7a      	ldrb	r2, [r7, #13]
 80059e2:	491c      	ldr	r1, [pc, #112]	@ (8005a54 <linkTimer+0x14c>)
 80059e4:	4613      	mov	r3, r2
 80059e6:	005b      	lsls	r3, r3, #1
 80059e8:	4413      	add	r3, r2
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	440b      	add	r3, r1
 80059ee:	3315      	adds	r3, #21
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80059f4:	7b3b      	ldrb	r3, [r7, #12]
 80059f6:	2b06      	cmp	r3, #6
 80059f8:	d00b      	beq.n	8005a12 <linkTimer+0x10a>
 80059fa:	7b3a      	ldrb	r2, [r7, #12]
 80059fc:	4915      	ldr	r1, [pc, #84]	@ (8005a54 <linkTimer+0x14c>)
 80059fe:	4613      	mov	r3, r2
 8005a00:	005b      	lsls	r3, r3, #1
 8005a02:	4413      	add	r3, r2
 8005a04:	00db      	lsls	r3, r3, #3
 8005a06:	440b      	add	r3, r1
 8005a08:	3308      	adds	r3, #8
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d2dc      	bcs.n	80059cc <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8005a12:	7b7a      	ldrb	r2, [r7, #13]
 8005a14:	79fb      	ldrb	r3, [r7, #7]
 8005a16:	4611      	mov	r1, r2
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7ff fecf 	bl	80057bc <LinkTimerAfter>
 8005a1e:	e00f      	b.n	8005a40 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8005a20:	4b0a      	ldr	r3, [pc, #40]	@ (8005a4c <linkTimer+0x144>)
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	b2da      	uxtb	r2, r3
 8005a26:	79fb      	ldrb	r3, [r7, #7]
 8005a28:	4611      	mov	r1, r2
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7ff ff0c 	bl	8005848 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8005a30:	4b06      	ldr	r3, [pc, #24]	@ (8005a4c <linkTimer+0x144>)
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	4b06      	ldr	r3, [pc, #24]	@ (8005a50 <linkTimer+0x148>)
 8005a38:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8005a3a:	4a04      	ldr	r2, [pc, #16]	@ (8005a4c <linkTimer+0x144>)
 8005a3c:	79fb      	ldrb	r3, [r7, #7]
 8005a3e:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8005a40:	89fb      	ldrh	r3, [r7, #14]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	2000042c 	.word	0x2000042c
 8005a50:	2000042d 	.word	0x2000042d
 8005a54:	2000039c 	.word	0x2000039c
 8005a58:	20000430 	.word	0x20000430

08005a5c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	4603      	mov	r3, r0
 8005a64:	460a      	mov	r2, r1
 8005a66:	71fb      	strb	r3, [r7, #7]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8005a6c:	4b39      	ldr	r3, [pc, #228]	@ (8005b54 <UnlinkTimer+0xf8>)
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	79fa      	ldrb	r2, [r7, #7]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d111      	bne.n	8005a9c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8005a78:	4b36      	ldr	r3, [pc, #216]	@ (8005b54 <UnlinkTimer+0xf8>)
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	4b36      	ldr	r3, [pc, #216]	@ (8005b58 <UnlinkTimer+0xfc>)
 8005a80:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8005a82:	79fa      	ldrb	r2, [r7, #7]
 8005a84:	4935      	ldr	r1, [pc, #212]	@ (8005b5c <UnlinkTimer+0x100>)
 8005a86:	4613      	mov	r3, r2
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	4413      	add	r3, r2
 8005a8c:	00db      	lsls	r3, r3, #3
 8005a8e:	440b      	add	r3, r1
 8005a90:	3315      	adds	r3, #21
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	4b2f      	ldr	r3, [pc, #188]	@ (8005b54 <UnlinkTimer+0xf8>)
 8005a98:	701a      	strb	r2, [r3, #0]
 8005a9a:	e03e      	b.n	8005b1a <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8005a9c:	79fa      	ldrb	r2, [r7, #7]
 8005a9e:	492f      	ldr	r1, [pc, #188]	@ (8005b5c <UnlinkTimer+0x100>)
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	005b      	lsls	r3, r3, #1
 8005aa4:	4413      	add	r3, r2
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	440b      	add	r3, r1
 8005aaa:	3314      	adds	r3, #20
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8005ab0:	79fa      	ldrb	r2, [r7, #7]
 8005ab2:	492a      	ldr	r1, [pc, #168]	@ (8005b5c <UnlinkTimer+0x100>)
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	005b      	lsls	r3, r3, #1
 8005ab8:	4413      	add	r3, r2
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	440b      	add	r3, r1
 8005abe:	3315      	adds	r3, #21
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8005ac4:	79f9      	ldrb	r1, [r7, #7]
 8005ac6:	7bfa      	ldrb	r2, [r7, #15]
 8005ac8:	4824      	ldr	r0, [pc, #144]	@ (8005b5c <UnlinkTimer+0x100>)
 8005aca:	460b      	mov	r3, r1
 8005acc:	005b      	lsls	r3, r3, #1
 8005ace:	440b      	add	r3, r1
 8005ad0:	00db      	lsls	r3, r3, #3
 8005ad2:	4403      	add	r3, r0
 8005ad4:	3315      	adds	r3, #21
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	b2d8      	uxtb	r0, r3
 8005ada:	4920      	ldr	r1, [pc, #128]	@ (8005b5c <UnlinkTimer+0x100>)
 8005adc:	4613      	mov	r3, r2
 8005ade:	005b      	lsls	r3, r3, #1
 8005ae0:	4413      	add	r3, r2
 8005ae2:	00db      	lsls	r3, r3, #3
 8005ae4:	440b      	add	r3, r1
 8005ae6:	3315      	adds	r3, #21
 8005ae8:	4602      	mov	r2, r0
 8005aea:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8005aec:	7bbb      	ldrb	r3, [r7, #14]
 8005aee:	2b06      	cmp	r3, #6
 8005af0:	d013      	beq.n	8005b1a <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8005af2:	79f9      	ldrb	r1, [r7, #7]
 8005af4:	7bba      	ldrb	r2, [r7, #14]
 8005af6:	4819      	ldr	r0, [pc, #100]	@ (8005b5c <UnlinkTimer+0x100>)
 8005af8:	460b      	mov	r3, r1
 8005afa:	005b      	lsls	r3, r3, #1
 8005afc:	440b      	add	r3, r1
 8005afe:	00db      	lsls	r3, r3, #3
 8005b00:	4403      	add	r3, r0
 8005b02:	3314      	adds	r3, #20
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	b2d8      	uxtb	r0, r3
 8005b08:	4914      	ldr	r1, [pc, #80]	@ (8005b5c <UnlinkTimer+0x100>)
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	005b      	lsls	r3, r3, #1
 8005b0e:	4413      	add	r3, r2
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	440b      	add	r3, r1
 8005b14:	3314      	adds	r3, #20
 8005b16:	4602      	mov	r2, r0
 8005b18:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8005b1a:	79fa      	ldrb	r2, [r7, #7]
 8005b1c:	490f      	ldr	r1, [pc, #60]	@ (8005b5c <UnlinkTimer+0x100>)
 8005b1e:	4613      	mov	r3, r2
 8005b20:	005b      	lsls	r3, r3, #1
 8005b22:	4413      	add	r3, r2
 8005b24:	00db      	lsls	r3, r3, #3
 8005b26:	440b      	add	r3, r1
 8005b28:	330c      	adds	r3, #12
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8005b2e:	4b09      	ldr	r3, [pc, #36]	@ (8005b54 <UnlinkTimer+0xf8>)
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	2b06      	cmp	r3, #6
 8005b36:	d107      	bne.n	8005b48 <UnlinkTimer+0xec>
 8005b38:	79bb      	ldrb	r3, [r7, #6]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d104      	bne.n	8005b48 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8005b3e:	4b08      	ldr	r3, [pc, #32]	@ (8005b60 <UnlinkTimer+0x104>)
 8005b40:	f04f 32ff 	mov.w	r2, #4294967295
 8005b44:	601a      	str	r2, [r3, #0]
  }

  return;
 8005b46:	bf00      	nop
 8005b48:	bf00      	nop
}
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr
 8005b54:	2000042c 	.word	0x2000042c
 8005b58:	2000042d 	.word	0x2000042d
 8005b5c:	2000039c 	.word	0x2000039c
 8005b60:	20000430 	.word	0x20000430

08005b64 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8005b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8005bd4 <ReturnTimeElapsed+0x70>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b72:	d026      	beq.n	8005bc2 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8005b74:	f7ff fe02 	bl	800577c <ReadRtcSsrValue>
 8005b78:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8005b7a:	4b16      	ldr	r3, [pc, #88]	@ (8005bd4 <ReturnTimeElapsed+0x70>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d805      	bhi.n	8005b90 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8005b84:	4b13      	ldr	r3, [pc, #76]	@ (8005bd4 <ReturnTimeElapsed+0x70>)
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	607b      	str	r3, [r7, #4]
 8005b8e:	e00a      	b.n	8005ba6 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8005b90:	4b11      	ldr	r3, [pc, #68]	@ (8005bd8 <ReturnTimeElapsed+0x74>)
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	461a      	mov	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8005b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd4 <ReturnTimeElapsed+0x70>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	683a      	ldr	r2, [r7, #0]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8005ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8005bdc <ReturnTimeElapsed+0x78>)
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	461a      	mov	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	fb02 f303 	mul.w	r3, r2, r3
 8005bb2:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8005bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8005be0 <ReturnTimeElapsed+0x7c>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	461a      	mov	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	40d3      	lsrs	r3, r2
 8005bbe:	607b      	str	r3, [r7, #4]
 8005bc0:	e001      	b.n	8005bc6 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	b29b      	uxth	r3, r3
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	20000430 	.word	0x20000430
 8005bd8:	20000438 	.word	0x20000438
 8005bdc:	20000436 	.word	0x20000436
 8005be0:	20000435 	.word	0x20000435

08005be4 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	4603      	mov	r3, r0
 8005bec:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8005bee:	88fb      	ldrh	r3, [r7, #6]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d108      	bne.n	8005c06 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8005bf4:	f7ff fdc2 	bl	800577c <ReadRtcSsrValue>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	4a21      	ldr	r2, [pc, #132]	@ (8005c80 <RestartWakeupCounter+0x9c>)
 8005bfc:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8005bfe:	2003      	movs	r0, #3
 8005c00:	f002 f90f 	bl	8007e22 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8005c04:	e039      	b.n	8005c7a <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8005c06:	88fb      	ldrh	r3, [r7, #6]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d803      	bhi.n	8005c14 <RestartWakeupCounter+0x30>
 8005c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8005c84 <RestartWakeupCounter+0xa0>)
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d002      	beq.n	8005c1a <RestartWakeupCounter+0x36>
      Value -= 1;
 8005c14:	88fb      	ldrh	r3, [r7, #6]
 8005c16:	3b01      	subs	r3, #1
 8005c18:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8005c1a:	bf00      	nop
 8005c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8005c88 <RestartWakeupCounter+0xa4>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	f003 0304 	and.w	r3, r3, #4
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d0f8      	beq.n	8005c1c <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8005c2a:	4b17      	ldr	r3, [pc, #92]	@ (8005c88 <RestartWakeupCounter+0xa4>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	b2da      	uxtb	r2, r3
 8005c32:	4b15      	ldr	r3, [pc, #84]	@ (8005c88 <RestartWakeupCounter+0xa4>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8005c3a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8005c3c:	4b13      	ldr	r3, [pc, #76]	@ (8005c8c <RestartWakeupCounter+0xa8>)
 8005c3e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005c42:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8005c44:	2003      	movs	r0, #3
 8005c46:	f002 f8fa 	bl	8007e3e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8005c4a:	4b11      	ldr	r3, [pc, #68]	@ (8005c90 <RestartWakeupCounter+0xac>)
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	0c1b      	lsrs	r3, r3, #16
 8005c50:	041b      	lsls	r3, r3, #16
 8005c52:	88fa      	ldrh	r2, [r7, #6]
 8005c54:	490e      	ldr	r1, [pc, #56]	@ (8005c90 <RestartWakeupCounter+0xac>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8005c5a:	f7ff fd8f 	bl	800577c <ReadRtcSsrValue>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	4a07      	ldr	r2, [pc, #28]	@ (8005c80 <RestartWakeupCounter+0x9c>)
 8005c62:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8005c64:	4b08      	ldr	r3, [pc, #32]	@ (8005c88 <RestartWakeupCounter+0xa4>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	689a      	ldr	r2, [r3, #8]
 8005c6a:	4b07      	ldr	r3, [pc, #28]	@ (8005c88 <RestartWakeupCounter+0xa4>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005c72:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8005c74:	f3af 8000 	nop.w
  return ;
 8005c78:	bf00      	nop
}
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	20000430 	.word	0x20000430
 8005c84:	20000435 	.word	0x20000435
 8005c88:	20000898 	.word	0x20000898
 8005c8c:	58000800 	.word	0x58000800
 8005c90:	40002800 	.word	0x40002800

08005c94 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8005c9a:	4b45      	ldr	r3, [pc, #276]	@ (8005db0 <RescheduleTimerList+0x11c>)
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ca2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ca6:	d107      	bne.n	8005cb8 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8005ca8:	bf00      	nop
 8005caa:	4b42      	ldr	r3, [pc, #264]	@ (8005db4 <RescheduleTimerList+0x120>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f003 0304 	and.w	r3, r3, #4
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1f8      	bne.n	8005caa <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8005cb8:	4b3e      	ldr	r3, [pc, #248]	@ (8005db4 <RescheduleTimerList+0x120>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689a      	ldr	r2, [r3, #8]
 8005cbe:	4b3d      	ldr	r3, [pc, #244]	@ (8005db4 <RescheduleTimerList+0x120>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cc6:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8005cc8:	4b3b      	ldr	r3, [pc, #236]	@ (8005db8 <RescheduleTimerList+0x124>)
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8005cce:	7bfa      	ldrb	r2, [r7, #15]
 8005cd0:	493a      	ldr	r1, [pc, #232]	@ (8005dbc <RescheduleTimerList+0x128>)
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	005b      	lsls	r3, r3, #1
 8005cd6:	4413      	add	r3, r2
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	440b      	add	r3, r1
 8005cdc:	3308      	adds	r3, #8
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8005ce2:	f7ff ff3f 	bl	8005b64 <ReturnTimeElapsed>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8005cea:	88fb      	ldrh	r3, [r7, #6]
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d205      	bcs.n	8005cfe <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8005cf6:	4b32      	ldr	r3, [pc, #200]	@ (8005dc0 <RescheduleTimerList+0x12c>)
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	701a      	strb	r2, [r3, #0]
 8005cfc:	e04d      	b.n	8005d9a <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8005cfe:	88fb      	ldrh	r3, [r7, #6]
 8005d00:	4a30      	ldr	r2, [pc, #192]	@ (8005dc4 <RescheduleTimerList+0x130>)
 8005d02:	8812      	ldrh	r2, [r2, #0]
 8005d04:	b292      	uxth	r2, r2
 8005d06:	4413      	add	r3, r2
 8005d08:	461a      	mov	r2, r3
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d906      	bls.n	8005d1e <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8005d10:	4b2c      	ldr	r3, [pc, #176]	@ (8005dc4 <RescheduleTimerList+0x130>)
 8005d12:	881b      	ldrh	r3, [r3, #0]
 8005d14:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8005d16:	4b2a      	ldr	r3, [pc, #168]	@ (8005dc0 <RescheduleTimerList+0x12c>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	701a      	strb	r2, [r3, #0]
 8005d1c:	e03d      	b.n	8005d9a <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	88fb      	ldrh	r3, [r7, #6]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8005d28:	4b25      	ldr	r3, [pc, #148]	@ (8005dc0 <RescheduleTimerList+0x12c>)
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8005d2e:	e034      	b.n	8005d9a <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8005d30:	7bfa      	ldrb	r2, [r7, #15]
 8005d32:	4922      	ldr	r1, [pc, #136]	@ (8005dbc <RescheduleTimerList+0x128>)
 8005d34:	4613      	mov	r3, r2
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	4413      	add	r3, r2
 8005d3a:	00db      	lsls	r3, r3, #3
 8005d3c:	440b      	add	r3, r1
 8005d3e:	3308      	adds	r3, #8
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	88fb      	ldrh	r3, [r7, #6]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d20a      	bcs.n	8005d5e <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8005d48:	7bfa      	ldrb	r2, [r7, #15]
 8005d4a:	491c      	ldr	r1, [pc, #112]	@ (8005dbc <RescheduleTimerList+0x128>)
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	005b      	lsls	r3, r3, #1
 8005d50:	4413      	add	r3, r2
 8005d52:	00db      	lsls	r3, r3, #3
 8005d54:	440b      	add	r3, r1
 8005d56:	3308      	adds	r3, #8
 8005d58:	2200      	movs	r2, #0
 8005d5a:	601a      	str	r2, [r3, #0]
 8005d5c:	e013      	b.n	8005d86 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8005d5e:	7bfa      	ldrb	r2, [r7, #15]
 8005d60:	4916      	ldr	r1, [pc, #88]	@ (8005dbc <RescheduleTimerList+0x128>)
 8005d62:	4613      	mov	r3, r2
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	4413      	add	r3, r2
 8005d68:	00db      	lsls	r3, r3, #3
 8005d6a:	440b      	add	r3, r1
 8005d6c:	3308      	adds	r3, #8
 8005d6e:	6819      	ldr	r1, [r3, #0]
 8005d70:	88fb      	ldrh	r3, [r7, #6]
 8005d72:	7bfa      	ldrb	r2, [r7, #15]
 8005d74:	1ac9      	subs	r1, r1, r3
 8005d76:	4811      	ldr	r0, [pc, #68]	@ (8005dbc <RescheduleTimerList+0x128>)
 8005d78:	4613      	mov	r3, r2
 8005d7a:	005b      	lsls	r3, r3, #1
 8005d7c:	4413      	add	r3, r2
 8005d7e:	00db      	lsls	r3, r3, #3
 8005d80:	4403      	add	r3, r0
 8005d82:	3308      	adds	r3, #8
 8005d84:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8005d86:	7bfa      	ldrb	r2, [r7, #15]
 8005d88:	490c      	ldr	r1, [pc, #48]	@ (8005dbc <RescheduleTimerList+0x128>)
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	4413      	add	r3, r2
 8005d90:	00db      	lsls	r3, r3, #3
 8005d92:	440b      	add	r3, r1
 8005d94:	3315      	adds	r3, #21
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
 8005d9c:	2b06      	cmp	r3, #6
 8005d9e:	d1c7      	bne.n	8005d30 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8005da0:	89bb      	ldrh	r3, [r7, #12]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7ff ff1e 	bl	8005be4 <RestartWakeupCounter>

  return ;
 8005da8:	bf00      	nop
}
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	40002800 	.word	0x40002800
 8005db4:	20000898 	.word	0x20000898
 8005db8:	2000042c 	.word	0x2000042c
 8005dbc:	2000039c 	.word	0x2000039c
 8005dc0:	20000434 	.word	0x20000434
 8005dc4:	2000043a 	.word	0x2000043a

08005dc8 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b08a      	sub	sp, #40	@ 0x28
 8005dcc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dce:	f3ef 8310 	mrs	r3, PRIMASK
 8005dd2:	617b      	str	r3, [r7, #20]
  return(result);
 8005dd4:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8005dd8:	b672      	cpsid	i
}
 8005dda:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8005ddc:	4b59      	ldr	r3, [pc, #356]	@ (8005f44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	22ca      	movs	r2, #202	@ 0xca
 8005de2:	625a      	str	r2, [r3, #36]	@ 0x24
 8005de4:	4b57      	ldr	r3, [pc, #348]	@ (8005f44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2253      	movs	r2, #83	@ 0x53
 8005dea:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8005dec:	4b55      	ldr	r3, [pc, #340]	@ (8005f44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689a      	ldr	r2, [r3, #8]
 8005df2:	4b54      	ldr	r3, [pc, #336]	@ (8005f44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dfa:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8005dfc:	4b52      	ldr	r3, [pc, #328]	@ (8005f48 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8005e04:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8005e08:	4950      	ldr	r1, [pc, #320]	@ (8005f4c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	005b      	lsls	r3, r3, #1
 8005e0e:	4413      	add	r3, r2
 8005e10:	00db      	lsls	r3, r3, #3
 8005e12:	440b      	add	r3, r1
 8005e14:	330c      	adds	r3, #12
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d16e      	bne.n	8005efc <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8005e1e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8005e22:	494a      	ldr	r1, [pc, #296]	@ (8005f4c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8005e24:	4613      	mov	r3, r2
 8005e26:	005b      	lsls	r3, r3, #1
 8005e28:	4413      	add	r3, r2
 8005e2a:	00db      	lsls	r3, r3, #3
 8005e2c:	440b      	add	r3, r1
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8005e32:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8005e36:	4945      	ldr	r1, [pc, #276]	@ (8005f4c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8005e38:	4613      	mov	r3, r2
 8005e3a:	005b      	lsls	r3, r3, #1
 8005e3c:	4413      	add	r3, r2
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	440b      	add	r3, r1
 8005e42:	3310      	adds	r3, #16
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8005e48:	4b41      	ldr	r3, [pc, #260]	@ (8005f50 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d04c      	beq.n	8005eec <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8005e52:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8005e56:	493d      	ldr	r1, [pc, #244]	@ (8005f4c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8005e58:	4613      	mov	r3, r2
 8005e5a:	005b      	lsls	r3, r3, #1
 8005e5c:	4413      	add	r3, r2
 8005e5e:	00db      	lsls	r3, r3, #3
 8005e60:	440b      	add	r3, r1
 8005e62:	330d      	adds	r3, #13
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d124      	bne.n	8005eb6 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8005e6c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e70:	2101      	movs	r1, #1
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7ff fdf2 	bl	8005a5c <UnlinkTimer>
 8005e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f383 8810 	msr	PRIMASK, r3
}
 8005e82:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8005e84:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8005e88:	4930      	ldr	r1, [pc, #192]	@ (8005f4c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	005b      	lsls	r3, r3, #1
 8005e8e:	4413      	add	r3, r2
 8005e90:	00db      	lsls	r3, r3, #3
 8005e92:	440b      	add	r3, r1
 8005e94:	3304      	adds	r3, #4
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e9c:	4611      	mov	r1, r2
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 f9b8 	bl	8006214 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8005ea4:	4b27      	ldr	r3, [pc, #156]	@ (8005f44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	22ca      	movs	r2, #202	@ 0xca
 8005eaa:	625a      	str	r2, [r3, #36]	@ 0x24
 8005eac:	4b25      	ldr	r3, [pc, #148]	@ (8005f44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2253      	movs	r2, #83	@ 0x53
 8005eb2:	625a      	str	r2, [r3, #36]	@ 0x24
 8005eb4:	e012      	b.n	8005edc <HW_TS_RTC_Wakeup_Handler+0x114>
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f383 8810 	msr	PRIMASK, r3
}
 8005ec0:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8005ec2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 f920 	bl	800610c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8005ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8005f44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	22ca      	movs	r2, #202	@ 0xca
 8005ed2:	625a      	str	r2, [r3, #36]	@ 0x24
 8005ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8005f44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2253      	movs	r2, #83	@ 0x53
 8005eda:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8005edc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ee0:	69fa      	ldr	r2, [r7, #28]
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	69b8      	ldr	r0, [r7, #24]
 8005ee6:	f000 fa1b 	bl	8006320 <HW_TS_RTC_Int_AppNot>
 8005eea:	e022      	b.n	8005f32 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8005eec:	f7ff fed2 	bl	8005c94 <RescheduleTimerList>
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	f383 8810 	msr	PRIMASK, r3
}
 8005efa:	e01a      	b.n	8005f32 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8005efc:	bf00      	nop
 8005efe:	4b11      	ldr	r3, [pc, #68]	@ (8005f44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f003 0304 	and.w	r3, r3, #4
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d0f8      	beq.n	8005efe <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8005f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8005f44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	b2da      	uxtb	r2, r3
 8005f14:	4b0b      	ldr	r3, [pc, #44]	@ (8005f44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8005f1c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8005f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f54 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8005f20:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005f24:	60da      	str	r2, [r3, #12]
 8005f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f28:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f383 8810 	msr	PRIMASK, r3
}
 8005f30:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8005f32:	4b04      	ldr	r3, [pc, #16]	@ (8005f44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	22ff      	movs	r2, #255	@ 0xff
 8005f38:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8005f3a:	bf00      	nop
}
 8005f3c:	3728      	adds	r7, #40	@ 0x28
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	20000898 	.word	0x20000898
 8005f48:	2000042c 	.word	0x2000042c
 8005f4c:	2000039c 	.word	0x2000039c
 8005f50:	20000434 	.word	0x20000434
 8005f54:	58000800 	.word	0x58000800

08005f58 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b088      	sub	sp, #32
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	4603      	mov	r3, r0
 8005f60:	6039      	str	r1, [r7, #0]
 8005f62:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8005f64:	4b5e      	ldr	r3, [pc, #376]	@ (80060e0 <HW_TS_Init+0x188>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	22ca      	movs	r2, #202	@ 0xca
 8005f6a:	625a      	str	r2, [r3, #36]	@ 0x24
 8005f6c:	4b5c      	ldr	r3, [pc, #368]	@ (80060e0 <HW_TS_Init+0x188>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2253      	movs	r2, #83	@ 0x53
 8005f72:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005f74:	4b5b      	ldr	r3, [pc, #364]	@ (80060e4 <HW_TS_Init+0x18c>)
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	4a5a      	ldr	r2, [pc, #360]	@ (80060e4 <HW_TS_Init+0x18c>)
 8005f7a:	f043 0320 	orr.w	r3, r3, #32
 8005f7e:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8005f80:	4b58      	ldr	r3, [pc, #352]	@ (80060e4 <HW_TS_Init+0x18c>)
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	f003 0307 	and.w	r3, r3, #7
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	f1c3 0304 	rsb	r3, r3, #4
 8005f90:	b2da      	uxtb	r2, r3
 8005f92:	4b55      	ldr	r3, [pc, #340]	@ (80060e8 <HW_TS_Init+0x190>)
 8005f94:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8005f96:	4b53      	ldr	r3, [pc, #332]	@ (80060e4 <HW_TS_Init+0x18c>)
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005f9e:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8005fa2:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	fa92 f2a2 	rbit	r2, r2
 8005faa:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	2a00      	cmp	r2, #0
 8005fb4:	d101      	bne.n	8005fba <HW_TS_Init+0x62>
  {
    return 32U;
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	e003      	b.n	8005fc2 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	fab2 f282 	clz	r2, r2
 8005fc0:	b2d2      	uxtb	r2, r2
 8005fc2:	40d3      	lsrs	r3, r2
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	b2da      	uxtb	r2, r3
 8005fca:	4b48      	ldr	r3, [pc, #288]	@ (80060ec <HW_TS_Init+0x194>)
 8005fcc:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8005fce:	4b45      	ldr	r3, [pc, #276]	@ (80060e4 <HW_TS_Init+0x18c>)
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	3301      	adds	r3, #1
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	4b44      	ldr	r3, [pc, #272]	@ (80060f0 <HW_TS_Init+0x198>)
 8005fe0:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8005fe2:	4b43      	ldr	r3, [pc, #268]	@ (80060f0 <HW_TS_Init+0x198>)
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	4a40      	ldr	r2, [pc, #256]	@ (80060ec <HW_TS_Init+0x194>)
 8005fea:	7812      	ldrb	r2, [r2, #0]
 8005fec:	fb02 f303 	mul.w	r3, r2, r3
 8005ff0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005ff4:	4a3c      	ldr	r2, [pc, #240]	@ (80060e8 <HW_TS_Init+0x190>)
 8005ff6:	7812      	ldrb	r2, [r2, #0]
 8005ff8:	40d3      	lsrs	r3, r2
 8005ffa:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006002:	4293      	cmp	r3, r2
 8006004:	d904      	bls.n	8006010 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8006006:	4b3b      	ldr	r3, [pc, #236]	@ (80060f4 <HW_TS_Init+0x19c>)
 8006008:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800600c:	801a      	strh	r2, [r3, #0]
 800600e:	e003      	b.n	8006018 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	b29a      	uxth	r2, r3
 8006014:	4b37      	ldr	r3, [pc, #220]	@ (80060f4 <HW_TS_Init+0x19c>)
 8006016:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8006018:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800601c:	f7ff fb9c 	bl	8005758 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8006020:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006024:	f7ff fb84 	bl	8005730 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8006028:	79fb      	ldrb	r3, [r7, #7]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d13d      	bne.n	80060aa <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800602e:	4b32      	ldr	r3, [pc, #200]	@ (80060f8 <HW_TS_Init+0x1a0>)
 8006030:	2201      	movs	r2, #1
 8006032:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8006034:	4b31      	ldr	r3, [pc, #196]	@ (80060fc <HW_TS_Init+0x1a4>)
 8006036:	f04f 32ff 	mov.w	r2, #4294967295
 800603a:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800603c:	2300      	movs	r3, #0
 800603e:	77fb      	strb	r3, [r7, #31]
 8006040:	e00c      	b.n	800605c <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8006042:	7ffa      	ldrb	r2, [r7, #31]
 8006044:	492e      	ldr	r1, [pc, #184]	@ (8006100 <HW_TS_Init+0x1a8>)
 8006046:	4613      	mov	r3, r2
 8006048:	005b      	lsls	r3, r3, #1
 800604a:	4413      	add	r3, r2
 800604c:	00db      	lsls	r3, r3, #3
 800604e:	440b      	add	r3, r1
 8006050:	330c      	adds	r3, #12
 8006052:	2200      	movs	r2, #0
 8006054:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8006056:	7ffb      	ldrb	r3, [r7, #31]
 8006058:	3301      	adds	r3, #1
 800605a:	77fb      	strb	r3, [r7, #31]
 800605c:	7ffb      	ldrb	r3, [r7, #31]
 800605e:	2b05      	cmp	r3, #5
 8006060:	d9ef      	bls.n	8006042 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8006062:	4b28      	ldr	r3, [pc, #160]	@ (8006104 <HW_TS_Init+0x1ac>)
 8006064:	2206      	movs	r2, #6
 8006066:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8006068:	4b1d      	ldr	r3, [pc, #116]	@ (80060e0 <HW_TS_Init+0x188>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	689a      	ldr	r2, [r3, #8]
 800606e:	4b1c      	ldr	r3, [pc, #112]	@ (80060e0 <HW_TS_Init+0x188>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006076:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8006078:	4b19      	ldr	r3, [pc, #100]	@ (80060e0 <HW_TS_Init+0x188>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	b2da      	uxtb	r2, r3
 8006080:	4b17      	ldr	r3, [pc, #92]	@ (80060e0 <HW_TS_Init+0x188>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8006088:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800608a:	4b1f      	ldr	r3, [pc, #124]	@ (8006108 <HW_TS_Init+0x1b0>)
 800608c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8006090:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8006092:	2003      	movs	r0, #3
 8006094:	f001 fed3 	bl	8007e3e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8006098:	4b11      	ldr	r3, [pc, #68]	@ (80060e0 <HW_TS_Init+0x188>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689a      	ldr	r2, [r3, #8]
 800609e:	4b10      	ldr	r3, [pc, #64]	@ (80060e0 <HW_TS_Init+0x188>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060a6:	609a      	str	r2, [r3, #8]
 80060a8:	e009      	b.n	80060be <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80060aa:	4b0d      	ldr	r3, [pc, #52]	@ (80060e0 <HW_TS_Init+0x188>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d002      	beq.n	80060be <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80060b8:	2003      	movs	r0, #3
 80060ba:	f001 feb2 	bl	8007e22 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80060be:	4b08      	ldr	r3, [pc, #32]	@ (80060e0 <HW_TS_Init+0x188>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	22ff      	movs	r2, #255	@ 0xff
 80060c4:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80060c6:	2200      	movs	r2, #0
 80060c8:	2103      	movs	r1, #3
 80060ca:	2003      	movs	r0, #3
 80060cc:	f001 fe67 	bl	8007d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80060d0:	2003      	movs	r0, #3
 80060d2:	f001 fe7e 	bl	8007dd2 <HAL_NVIC_EnableIRQ>

  return;
 80060d6:	bf00      	nop
}
 80060d8:	3720      	adds	r7, #32
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	20000898 	.word	0x20000898
 80060e4:	40002800 	.word	0x40002800
 80060e8:	20000435 	.word	0x20000435
 80060ec:	20000436 	.word	0x20000436
 80060f0:	20000438 	.word	0x20000438
 80060f4:	2000043a 	.word	0x2000043a
 80060f8:	20000434 	.word	0x20000434
 80060fc:	20000430 	.word	0x20000430
 8006100:	2000039c 	.word	0x2000039c
 8006104:	2000042c 	.word	0x2000042c
 8006108:	58000800 	.word	0x58000800

0800610c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af00      	add	r7, sp, #0
 8006112:	4603      	mov	r3, r0
 8006114:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006116:	f3ef 8310 	mrs	r3, PRIMASK
 800611a:	60fb      	str	r3, [r7, #12]
  return(result);
 800611c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800611e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006120:	b672      	cpsid	i
}
 8006122:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8006124:	2003      	movs	r0, #3
 8006126:	f001 fe62 	bl	8007dee <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800612a:	4b34      	ldr	r3, [pc, #208]	@ (80061fc <HW_TS_Stop+0xf0>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	22ca      	movs	r2, #202	@ 0xca
 8006130:	625a      	str	r2, [r3, #36]	@ 0x24
 8006132:	4b32      	ldr	r3, [pc, #200]	@ (80061fc <HW_TS_Stop+0xf0>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2253      	movs	r2, #83	@ 0x53
 8006138:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800613a:	79fa      	ldrb	r2, [r7, #7]
 800613c:	4930      	ldr	r1, [pc, #192]	@ (8006200 <HW_TS_Stop+0xf4>)
 800613e:	4613      	mov	r3, r2
 8006140:	005b      	lsls	r3, r3, #1
 8006142:	4413      	add	r3, r2
 8006144:	00db      	lsls	r3, r3, #3
 8006146:	440b      	add	r3, r1
 8006148:	330c      	adds	r3, #12
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b02      	cmp	r3, #2
 8006150:	d142      	bne.n	80061d8 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8006152:	79fb      	ldrb	r3, [r7, #7]
 8006154:	2100      	movs	r1, #0
 8006156:	4618      	mov	r0, r3
 8006158:	f7ff fc80 	bl	8005a5c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800615c:	4b29      	ldr	r3, [pc, #164]	@ (8006204 <HW_TS_Stop+0xf8>)
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8006162:	7cfb      	ldrb	r3, [r7, #19]
 8006164:	2b06      	cmp	r3, #6
 8006166:	d12f      	bne.n	80061c8 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8006168:	4b27      	ldr	r3, [pc, #156]	@ (8006208 <HW_TS_Stop+0xfc>)
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006170:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006174:	d107      	bne.n	8006186 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8006176:	bf00      	nop
 8006178:	4b20      	ldr	r3, [pc, #128]	@ (80061fc <HW_TS_Stop+0xf0>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	f003 0304 	and.w	r3, r3, #4
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1f8      	bne.n	8006178 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8006186:	4b1d      	ldr	r3, [pc, #116]	@ (80061fc <HW_TS_Stop+0xf0>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	689a      	ldr	r2, [r3, #8]
 800618c:	4b1b      	ldr	r3, [pc, #108]	@ (80061fc <HW_TS_Stop+0xf0>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006194:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8006196:	bf00      	nop
 8006198:	4b18      	ldr	r3, [pc, #96]	@ (80061fc <HW_TS_Stop+0xf0>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	f003 0304 	and.w	r3, r3, #4
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d0f8      	beq.n	8006198 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80061a6:	4b15      	ldr	r3, [pc, #84]	@ (80061fc <HW_TS_Stop+0xf0>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	b2da      	uxtb	r2, r3
 80061ae:	4b13      	ldr	r3, [pc, #76]	@ (80061fc <HW_TS_Stop+0xf0>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80061b6:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80061b8:	4b14      	ldr	r3, [pc, #80]	@ (800620c <HW_TS_Stop+0x100>)
 80061ba:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80061be:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80061c0:	2003      	movs	r0, #3
 80061c2:	f001 fe3c 	bl	8007e3e <HAL_NVIC_ClearPendingIRQ>
 80061c6:	e007      	b.n	80061d8 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80061c8:	4b11      	ldr	r3, [pc, #68]	@ (8006210 <HW_TS_Stop+0x104>)
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	7cfa      	ldrb	r2, [r7, #19]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d001      	beq.n	80061d8 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80061d4:	f7ff fd5e 	bl	8005c94 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80061d8:	4b08      	ldr	r3, [pc, #32]	@ (80061fc <HW_TS_Stop+0xf0>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	22ff      	movs	r2, #255	@ 0xff
 80061de:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80061e0:	2003      	movs	r0, #3
 80061e2:	f001 fdf6 	bl	8007dd2 <HAL_NVIC_EnableIRQ>
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	f383 8810 	msr	PRIMASK, r3
}
 80061f0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80061f2:	bf00      	nop
}
 80061f4:	3718      	adds	r7, #24
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	20000898 	.word	0x20000898
 8006200:	2000039c 	.word	0x2000039c
 8006204:	2000042c 	.word	0x2000042c
 8006208:	40002800 	.word	0x40002800
 800620c:	58000800 	.word	0x58000800
 8006210:	2000042d 	.word	0x2000042d

08006214 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
 800621a:	4603      	mov	r3, r0
 800621c:	6039      	str	r1, [r7, #0]
 800621e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8006220:	79fa      	ldrb	r2, [r7, #7]
 8006222:	493b      	ldr	r1, [pc, #236]	@ (8006310 <HW_TS_Start+0xfc>)
 8006224:	4613      	mov	r3, r2
 8006226:	005b      	lsls	r3, r3, #1
 8006228:	4413      	add	r3, r2
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	440b      	add	r3, r1
 800622e:	330c      	adds	r3, #12
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	b2db      	uxtb	r3, r3
 8006234:	2b02      	cmp	r3, #2
 8006236:	d103      	bne.n	8006240 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8006238:	79fb      	ldrb	r3, [r7, #7]
 800623a:	4618      	mov	r0, r3
 800623c:	f7ff ff66 	bl	800610c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006240:	f3ef 8310 	mrs	r3, PRIMASK
 8006244:	60fb      	str	r3, [r7, #12]
  return(result);
 8006246:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006248:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800624a:	b672      	cpsid	i
}
 800624c:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800624e:	2003      	movs	r0, #3
 8006250:	f001 fdcd 	bl	8007dee <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8006254:	4b2f      	ldr	r3, [pc, #188]	@ (8006314 <HW_TS_Start+0x100>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	22ca      	movs	r2, #202	@ 0xca
 800625a:	625a      	str	r2, [r3, #36]	@ 0x24
 800625c:	4b2d      	ldr	r3, [pc, #180]	@ (8006314 <HW_TS_Start+0x100>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2253      	movs	r2, #83	@ 0x53
 8006262:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8006264:	79fa      	ldrb	r2, [r7, #7]
 8006266:	492a      	ldr	r1, [pc, #168]	@ (8006310 <HW_TS_Start+0xfc>)
 8006268:	4613      	mov	r3, r2
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	4413      	add	r3, r2
 800626e:	00db      	lsls	r3, r3, #3
 8006270:	440b      	add	r3, r1
 8006272:	330c      	adds	r3, #12
 8006274:	2202      	movs	r2, #2
 8006276:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8006278:	79fa      	ldrb	r2, [r7, #7]
 800627a:	4925      	ldr	r1, [pc, #148]	@ (8006310 <HW_TS_Start+0xfc>)
 800627c:	4613      	mov	r3, r2
 800627e:	005b      	lsls	r3, r3, #1
 8006280:	4413      	add	r3, r2
 8006282:	00db      	lsls	r3, r3, #3
 8006284:	440b      	add	r3, r1
 8006286:	3308      	adds	r3, #8
 8006288:	683a      	ldr	r2, [r7, #0]
 800628a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800628c:	79fa      	ldrb	r2, [r7, #7]
 800628e:	4920      	ldr	r1, [pc, #128]	@ (8006310 <HW_TS_Start+0xfc>)
 8006290:	4613      	mov	r3, r2
 8006292:	005b      	lsls	r3, r3, #1
 8006294:	4413      	add	r3, r2
 8006296:	00db      	lsls	r3, r3, #3
 8006298:	440b      	add	r3, r1
 800629a:	3304      	adds	r3, #4
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80062a0:	79fb      	ldrb	r3, [r7, #7]
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7ff fb30 	bl	8005908 <linkTimer>
 80062a8:	4603      	mov	r3, r0
 80062aa:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80062ac:	4b1a      	ldr	r3, [pc, #104]	@ (8006318 <HW_TS_Start+0x104>)
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80062b2:	4b1a      	ldr	r3, [pc, #104]	@ (800631c <HW_TS_Start+0x108>)
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	7c7a      	ldrb	r2, [r7, #17]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d002      	beq.n	80062c4 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80062be:	f7ff fce9 	bl	8005c94 <RescheduleTimerList>
 80062c2:	e013      	b.n	80062ec <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80062c4:	79fa      	ldrb	r2, [r7, #7]
 80062c6:	4912      	ldr	r1, [pc, #72]	@ (8006310 <HW_TS_Start+0xfc>)
 80062c8:	4613      	mov	r3, r2
 80062ca:	005b      	lsls	r3, r3, #1
 80062cc:	4413      	add	r3, r2
 80062ce:	00db      	lsls	r3, r3, #3
 80062d0:	440b      	add	r3, r1
 80062d2:	3308      	adds	r3, #8
 80062d4:	6819      	ldr	r1, [r3, #0]
 80062d6:	8a7b      	ldrh	r3, [r7, #18]
 80062d8:	79fa      	ldrb	r2, [r7, #7]
 80062da:	1ac9      	subs	r1, r1, r3
 80062dc:	480c      	ldr	r0, [pc, #48]	@ (8006310 <HW_TS_Start+0xfc>)
 80062de:	4613      	mov	r3, r2
 80062e0:	005b      	lsls	r3, r3, #1
 80062e2:	4413      	add	r3, r2
 80062e4:	00db      	lsls	r3, r3, #3
 80062e6:	4403      	add	r3, r0
 80062e8:	3308      	adds	r3, #8
 80062ea:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80062ec:	4b09      	ldr	r3, [pc, #36]	@ (8006314 <HW_TS_Start+0x100>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	22ff      	movs	r2, #255	@ 0xff
 80062f2:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80062f4:	2003      	movs	r0, #3
 80062f6:	f001 fd6c 	bl	8007dd2 <HAL_NVIC_EnableIRQ>
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	f383 8810 	msr	PRIMASK, r3
}
 8006304:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8006306:	bf00      	nop
}
 8006308:	3718      	adds	r7, #24
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	2000039c 	.word	0x2000039c
 8006314:	20000898 	.word	0x20000898
 8006318:	2000042c 	.word	0x2000042c
 800631c:	2000042d 	.word	0x2000042d

08006320 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	460b      	mov	r3, r1
 800632a:	607a      	str	r2, [r7, #4]
 800632c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4798      	blx	r3

  return;
 8006332:	bf00      	nop
}
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <LL_AHB2_GRP1_EnableClock>:
{
 800633a:	b480      	push	{r7}
 800633c:	b085      	sub	sp, #20
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006342:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006346:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006348:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4313      	orrs	r3, r2
 8006350:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006352:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006356:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4013      	ands	r3, r2
 800635c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800635e:	68fb      	ldr	r3, [r7, #12]
}
 8006360:	bf00      	nop
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006374:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006378:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800637a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4313      	orrs	r3, r2
 8006382:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006384:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006388:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4013      	ands	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006390:	68fb      	ldr	r3, [r7, #12]
}
 8006392:	bf00      	nop
 8006394:	3714      	adds	r7, #20
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
	...

080063a0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80063a4:	4b1b      	ldr	r3, [pc, #108]	@ (8006414 <MX_I2C1_Init+0x74>)
 80063a6:	4a1c      	ldr	r2, [pc, #112]	@ (8006418 <MX_I2C1_Init+0x78>)
 80063a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 80063aa:	4b1a      	ldr	r3, [pc, #104]	@ (8006414 <MX_I2C1_Init+0x74>)
 80063ac:	4a1b      	ldr	r2, [pc, #108]	@ (800641c <MX_I2C1_Init+0x7c>)
 80063ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80063b0:	4b18      	ldr	r3, [pc, #96]	@ (8006414 <MX_I2C1_Init+0x74>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80063b6:	4b17      	ldr	r3, [pc, #92]	@ (8006414 <MX_I2C1_Init+0x74>)
 80063b8:	2201      	movs	r2, #1
 80063ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80063bc:	4b15      	ldr	r3, [pc, #84]	@ (8006414 <MX_I2C1_Init+0x74>)
 80063be:	2200      	movs	r2, #0
 80063c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80063c2:	4b14      	ldr	r3, [pc, #80]	@ (8006414 <MX_I2C1_Init+0x74>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80063c8:	4b12      	ldr	r3, [pc, #72]	@ (8006414 <MX_I2C1_Init+0x74>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80063ce:	4b11      	ldr	r3, [pc, #68]	@ (8006414 <MX_I2C1_Init+0x74>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80063d4:	4b0f      	ldr	r3, [pc, #60]	@ (8006414 <MX_I2C1_Init+0x74>)
 80063d6:	2200      	movs	r2, #0
 80063d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80063da:	480e      	ldr	r0, [pc, #56]	@ (8006414 <MX_I2C1_Init+0x74>)
 80063dc:	f002 f9d6 	bl	800878c <HAL_I2C_Init>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80063e6:	f000 fd01 	bl	8006dec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80063ea:	2100      	movs	r1, #0
 80063ec:	4809      	ldr	r0, [pc, #36]	@ (8006414 <MX_I2C1_Init+0x74>)
 80063ee:	f003 f9f3 	bl	80097d8 <HAL_I2CEx_ConfigAnalogFilter>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d001      	beq.n	80063fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80063f8:	f000 fcf8 	bl	8006dec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80063fc:	2100      	movs	r1, #0
 80063fe:	4805      	ldr	r0, [pc, #20]	@ (8006414 <MX_I2C1_Init+0x74>)
 8006400:	f003 fa35 	bl	800986e <HAL_I2CEx_ConfigDigitalFilter>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d001      	beq.n	800640e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800640a:	f000 fcef 	bl	8006dec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800640e:	bf00      	nop
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	2000043c 	.word	0x2000043c
 8006418:	40005400 	.word	0x40005400
 800641c:	00b07cb4 	.word	0x00b07cb4

08006420 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b09c      	sub	sp, #112	@ 0x70
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006428:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800642c:	2200      	movs	r2, #0
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	605a      	str	r2, [r3, #4]
 8006432:	609a      	str	r2, [r3, #8]
 8006434:	60da      	str	r2, [r3, #12]
 8006436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006438:	f107 030c 	add.w	r3, r7, #12
 800643c:	2250      	movs	r2, #80	@ 0x50
 800643e:	2100      	movs	r1, #0
 8006440:	4618      	mov	r0, r3
 8006442:	f014 fd2f 	bl	801aea4 <memset>
  if(i2cHandle->Instance==I2C1)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a17      	ldr	r2, [pc, #92]	@ (80064a8 <HAL_I2C_MspInit+0x88>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d126      	bne.n	800649e <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006450:	2304      	movs	r3, #4
 8006452:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006454:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8006458:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800645a:	f107 030c 	add.w	r3, r7, #12
 800645e:	4618      	mov	r0, r3
 8006460:	f006 fb00 	bl	800ca64 <HAL_RCCEx_PeriphCLKConfig>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d001      	beq.n	800646e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800646a:	f000 fcbf 	bl	8006dec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800646e:	2002      	movs	r0, #2
 8006470:	f7ff ff63 	bl	800633a <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006474:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006478:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800647a:	2312      	movs	r3, #18
 800647c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800647e:	2300      	movs	r3, #0
 8006480:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006482:	2300      	movs	r3, #0
 8006484:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006486:	2304      	movs	r3, #4
 8006488:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800648a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800648e:	4619      	mov	r1, r3
 8006490:	4806      	ldr	r0, [pc, #24]	@ (80064ac <HAL_I2C_MspInit+0x8c>)
 8006492:	f001 ffb7 	bl	8008404 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006496:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800649a:	f7ff ff67 	bl	800636c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800649e:	bf00      	nop
 80064a0:	3770      	adds	r7, #112	@ 0x70
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	40005400 	.word	0x40005400
 80064ac:	48000400 	.word	0x48000400

080064b0 <LL_AHB3_GRP1_EnableClock>:
{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80064b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80064be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80064c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4013      	ands	r3, r2
 80064d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80064d4:	68fb      	ldr	r3, [r7, #12]
}
 80064d6:	bf00      	nop
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
	...

080064e4 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80064e8:	4b06      	ldr	r3, [pc, #24]	@ (8006504 <MX_IPCC_Init+0x20>)
 80064ea:	4a07      	ldr	r2, [pc, #28]	@ (8006508 <MX_IPCC_Init+0x24>)
 80064ec:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80064ee:	4805      	ldr	r0, [pc, #20]	@ (8006504 <MX_IPCC_Init+0x20>)
 80064f0:	f003 fa0a 	bl	8009908 <HAL_IPCC_Init>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80064fa:	f000 fc77 	bl	8006dec <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80064fe:	bf00      	nop
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	20000490 	.word	0x20000490
 8006508:	58000c00 	.word	0x58000c00

0800650c <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a0d      	ldr	r2, [pc, #52]	@ (8006550 <HAL_IPCC_MspInit+0x44>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d113      	bne.n	8006546 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800651e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8006522:	f7ff ffc5 	bl	80064b0 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8006526:	2200      	movs	r2, #0
 8006528:	2100      	movs	r1, #0
 800652a:	202c      	movs	r0, #44	@ 0x2c
 800652c:	f001 fc37 	bl	8007d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8006530:	202c      	movs	r0, #44	@ 0x2c
 8006532:	f001 fc4e 	bl	8007dd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8006536:	2200      	movs	r2, #0
 8006538:	2100      	movs	r1, #0
 800653a:	202d      	movs	r0, #45	@ 0x2d
 800653c:	f001 fc2f 	bl	8007d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8006540:	202d      	movs	r0, #45	@ 0x2d
 8006542:	f001 fc46 	bl	8007dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8006546:	bf00      	nop
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	58000c00 	.word	0x58000c00

08006554 <LL_RCC_LSE_SetDriveCapability>:
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800655c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006564:	f023 0218 	bic.w	r2, r3, #24
 8006568:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4313      	orrs	r3, r2
 8006570:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(const HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_RLR_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	683a      	ldr	r2, [r7, #0]
 800658e:	3220      	adds	r2, #32
 8006590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006594:	4a05      	ldr	r2, [pc, #20]	@ (80065ac <LL_HSEM_1StepLock+0x2c>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d001      	beq.n	800659e <LL_HSEM_1StepLock+0x1e>
 800659a:	2301      	movs	r3, #1
 800659c:	e000      	b.n	80065a0 <LL_HSEM_1StepLock+0x20>
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	80000400 	.word	0x80000400

080065b0 <_ZN13AccelerometerC1Ev>:
#include "main.h"

// #define STATUS_LED 0
#define ADXL343_ADDR (0x53 << 1) // Correct 8-bit address for grounded ALT_ADDRESS

class Accelerometer
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	601a      	str	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	605a      	str	r2, [r3, #4]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80065ca:	609a      	str	r2, [r3, #8]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	220f      	movs	r2, #15
 80065d0:	60da      	str	r2, [r3, #12]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	611a      	str	r2, [r3, #16]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2208      	movs	r2, #8
 80065dc:	751a      	strb	r2, [r3, #20]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2232      	movs	r2, #50	@ 0x32
 80065e2:	755a      	strb	r2, [r3, #21]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4618      	mov	r0, r3
 80065e8:	370c      	adds	r7, #12
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr

080065f2 <_ZN13ThermocouplesC1Ev>:
#include "gpio.h"
#include "usart.h"
#include <stdio.h>
#include <string.h>

class Thermocouples
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b082      	sub	sp, #8
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7fd fd36 	bl	800406e <_ZN17Adafruit_MAX31856C1Ev>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	330c      	adds	r3, #12
 8006606:	4618      	mov	r0, r3
 8006608:	f7fd fd31 	bl	800406e <_ZN17Adafruit_MAX31856C1Ev>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	619a      	str	r2, [r3, #24]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4618      	mov	r0, r3
 8006616:	3708      	adds	r7, #8
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <_ZN6ScreenC1Ev>:
#include "Switch.hpp"
#define BACKGROUND_COLOR 0xDCFF
#define TEXT_COLOR 0xA329
#define ACCENT_COLOR 0x6763

class Screen
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af04      	add	r7, sp, #16
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	2302      	movs	r3, #2
 8006628:	9303      	str	r3, [sp, #12]
 800662a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800662e:	9302      	str	r3, [sp, #8]
 8006630:	2304      	movs	r3, #4
 8006632:	9301      	str	r3, [sp, #4]
 8006634:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	2308      	movs	r3, #8
 800663c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8006640:	49c4      	ldr	r1, [pc, #784]	@ (8006954 <_ZN6ScreenC1Ev+0x338>)
 8006642:	f7fc fed9 	bl	80033f8 <_ZN13ST7789V_STM32C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_t>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	661a      	str	r2, [r3, #96]	@ 0x60
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	665a      	str	r2, [r3, #100]	@ 0x64
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8006658:	2301      	movs	r3, #1
 800665a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800665e:	21f0      	movs	r1, #240	@ 0xf0
 8006660:	f7fc faac 	bl	8002bbc <_ZN11GFXcanvas16C1Ettb>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	22f0      	movs	r2, #240	@ 0xf0
 8006668:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8006672:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2202      	movs	r2, #2
 800667a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800668a:	005b      	lsls	r3, r3, #1
 800668c:	1ad2      	subs	r2, r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80066a0:	005b      	lsls	r3, r3, #1
 80066a2:	1ad2      	subs	r2, r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2218      	movs	r2, #24
 80066d2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2204      	movs	r2, #4
 80066f2:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	22b0      	movs	r2, #176	@ 0xb0
 8006706:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006722:	441a      	add	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006736:	0fd9      	lsrs	r1, r3, #31
 8006738:	440b      	add	r3, r1
 800673a:	105b      	asrs	r3, r3, #1
 800673c:	441a      	add	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2204      	movs	r2, #4
 8006748:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8006758:	1ad2      	subs	r2, r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8006760:	441a      	add	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a7b      	ldr	r2, [pc, #492]	@ (8006958 <_ZN6ScreenC1Ev+0x33c>)
 800676c:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a79      	ldr	r2, [pc, #484]	@ (8006958 <_ZN6ScreenC1Ev+0x33c>)
 8006774:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a78      	ldr	r2, [pc, #480]	@ (800695c <_ZN6ScreenC1Ev+0x340>)
 800677c:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2240      	movs	r2, #64	@ 0x40
 8006790:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80067ac:	441a      	add	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80067cc:	1ad2      	subs	r2, r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80067d4:	1ad2      	subs	r2, r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80067dc:	1ad2      	subs	r2, r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80067fc:	441a      	add	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2204      	movs	r2, #4
 8006808:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8006818:	4619      	mov	r1, r3
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	1acb      	subs	r3, r1, r3
 800681e:	4413      	add	r3, r2
 8006820:	0fda      	lsrs	r2, r3, #31
 8006822:	4413      	add	r3, r2
 8006824:	105b      	asrs	r3, r3, #1
 8006826:	461a      	mov	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 800683a:	005b      	lsls	r3, r3, #1
 800683c:	1ad2      	subs	r2, r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8006850:	441a      	add	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8006864:	441a      	add	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8006878:	005b      	lsls	r3, r3, #1
 800687a:	441a      	add	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 8006882:	441a      	add	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8006896:	441a      	add	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 21a0 	ldr.w	r2, [r3, #416]	@ 0x1a0
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 80068b6:	441a      	add	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 2194 	ldr.w	r2, [r3, #404]	@ 0x194
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8d3 21a8 	ldr.w	r2, [r3, #424]	@ 0x1a8
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 80068d6:	441a      	add	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8d3 2198 	ldr.w	r2, [r3, #408]	@ 0x198
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 21b0 	ldr.w	r2, [r3, #432]	@ 0x1b0
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 80068f6:	441a      	add	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 219c 	ldr.w	r2, [r3, #412]	@ 0x19c
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8c3 21b8 	str.w	r2, [r3, #440]	@ 0x1b8
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 21b8 	ldr.w	r2, [r3, #440]	@ 0x1b8
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8006916:	441a      	add	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	220a      	movs	r2, #10
 8006922:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2206      	movs	r2, #6
 800692a:	f8c3 21c4 	str.w	r2, [r3, #452]	@ 0x1c4
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2205      	movs	r2, #5
 8006932:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a09      	ldr	r2, [pc, #36]	@ (8006960 <_ZN6ScreenC1Ev+0x344>)
 800693a:	f8c3 21cc 	str.w	r2, [r3, #460]	@ 0x1cc
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f241 3288 	movw	r2, #5000	@ 0x1388
 800694c:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
 8006950:	e008      	b.n	8006964 <_ZN6ScreenC1Ev+0x348>
 8006952:	bf00      	nop
 8006954:	20000920 	.word	0x20000920
 8006958:	43870000 	.word	0x43870000
 800695c:	3a83126f 	.word	0x3a83126f
 8006960:	40490fdb 	.word	0x40490fdb
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2208      	movs	r2, #8
 8006968:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 21c8 	ldr.w	r2, [r3, #456]	@ 0x1c8
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006978:	0fd9      	lsrs	r1, r3, #31
 800697a:	440b      	add	r3, r1
 800697c:	105b      	asrs	r3, r3, #1
 800697e:	441a      	add	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8006992:	441a      	add	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8c3 21e4 	str.w	r2, [r3, #484]	@ 0x1e4
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2264      	movs	r2, #100	@ 0x64
 800699e:	f8c3 21e8 	str.w	r2, [r3, #488]	@ 0x1e8
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4618      	mov	r0, r3
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <_ZN14BatteryMonitorC1Ev>:

#include "Adafruit_MAX1704X.h"
#include "i2c.h"
#include "usart.h"

class BatteryMonitor
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4618      	mov	r0, r3
 80069c0:	f7fa fae8 	bl	8000f94 <_ZN23Adafruit_MAX17048_STM32C1Ev>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	220a      	movs	r2, #10
 80069c8:	60da      	str	r2, [r3, #12]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4618      	mov	r0, r3
 80069ce:	3708      	adds	r7, #8
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <HAL_TIM_PeriodElapsedCallback>:
Screen myScreen;
BatteryMonitor myBatteryMonitor;
Switch mySwitch;
// main timer implementation
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]

  if (htim == &htim16)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a57      	ldr	r2, [pc, #348]	@ (8006b3c <HAL_TIM_PeriodElapsedCallback+0x168>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	f040 80a5 	bne.w	8006b30 <HAL_TIM_PeriodElapsedCallback+0x15c>
  {
    // if(init_finished) {
    //  increment / decrement 0.1ms timers here.

    timerCounter++;
 80069e6:	4b56      	ldr	r3, [pc, #344]	@ (8006b40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	3301      	adds	r3, #1
 80069ec:	4a54      	ldr	r2, [pc, #336]	@ (8006b40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80069ee:	6013      	str	r3, [r2, #0]

    if ((timerCounter % 10) == 0)
 80069f0:	4b53      	ldr	r3, [pc, #332]	@ (8006b40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80069f2:	6819      	ldr	r1, [r3, #0]
 80069f4:	4b53      	ldr	r3, [pc, #332]	@ (8006b44 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80069f6:	fb83 2301 	smull	r2, r3, r3, r1
 80069fa:	109a      	asrs	r2, r3, #2
 80069fc:	17cb      	asrs	r3, r1, #31
 80069fe:	1ad2      	subs	r2, r2, r3
 8006a00:	4613      	mov	r3, r2
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	4413      	add	r3, r2
 8006a06:	005b      	lsls	r3, r3, #1
 8006a08:	1aca      	subs	r2, r1, r3
 8006a0a:	2a00      	cmp	r2, #0
 8006a0c:	bf0c      	ite	eq
 8006a0e:	2301      	moveq	r3, #1
 8006a10:	2300      	movne	r3, #0
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d01b      	beq.n	8006a50 <HAL_TIM_PeriodElapsedCallback+0x7c>
    {

      if (myScreen.renderDelay)
 8006a18:	4b4b      	ldr	r3, [pc, #300]	@ (8006b48 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8006a1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	bf14      	ite	ne
 8006a20:	2301      	movne	r3, #1
 8006a22:	2300      	moveq	r3, #0
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d004      	beq.n	8006a34 <HAL_TIM_PeriodElapsedCallback+0x60>
      {
        myScreen.renderDelay--;
 8006a2a:	4b47      	ldr	r3, [pc, #284]	@ (8006b48 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8006a2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	4a45      	ldr	r2, [pc, #276]	@ (8006b48 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8006a32:	6653      	str	r3, [r2, #100]	@ 0x64
      }

      if (myThermocouples.delay)
 8006a34:	4b45      	ldr	r3, [pc, #276]	@ (8006b4c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	bf14      	ite	ne
 8006a3c:	2301      	movne	r3, #1
 8006a3e:	2300      	moveq	r3, #0
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d004      	beq.n	8006a50 <HAL_TIM_PeriodElapsedCallback+0x7c>
      {
        myThermocouples.delay--;
 8006a46:	4b41      	ldr	r3, [pc, #260]	@ (8006b4c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	4a3f      	ldr	r2, [pc, #252]	@ (8006b4c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8006a4e:	6193      	str	r3, [r2, #24]
      }
      // increment / decrement 1 ms timers here.
    }

    if ((timerCounter % 100) == 0)
 8006a50:	4b3b      	ldr	r3, [pc, #236]	@ (8006b40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	4b3e      	ldr	r3, [pc, #248]	@ (8006b50 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8006a56:	fb83 1302 	smull	r1, r3, r3, r2
 8006a5a:	1159      	asrs	r1, r3, #5
 8006a5c:	17d3      	asrs	r3, r2, #31
 8006a5e:	1acb      	subs	r3, r1, r3
 8006a60:	2164      	movs	r1, #100	@ 0x64
 8006a62:	fb01 f303 	mul.w	r3, r1, r3
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	bf0c      	ite	eq
 8006a6c:	2301      	moveq	r3, #1
 8006a6e:	2300      	movne	r3, #0
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00d      	beq.n	8006a92 <HAL_TIM_PeriodElapsedCallback+0xbe>
      // if (thermocoupleDelay)
      //{
      //  thermocoupleDelay--;
      //}

      if (myAccelerometer.readDelay)
 8006a76:	4b37      	ldr	r3, [pc, #220]	@ (8006b54 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	bf14      	ite	ne
 8006a7e:	2301      	movne	r3, #1
 8006a80:	2300      	moveq	r3, #0
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d004      	beq.n	8006a92 <HAL_TIM_PeriodElapsedCallback+0xbe>
      {
        myAccelerometer.readDelay--;
 8006a88:	4b32      	ldr	r3, [pc, #200]	@ (8006b54 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	4a31      	ldr	r2, [pc, #196]	@ (8006b54 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8006a90:	6053      	str	r3, [r2, #4]
      }
    }

    if ((timerCounter % 1000) == 0)
 8006a92:	4b2b      	ldr	r3, [pc, #172]	@ (8006b40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	4b30      	ldr	r3, [pc, #192]	@ (8006b58 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8006a98:	fb83 1302 	smull	r1, r3, r3, r2
 8006a9c:	1199      	asrs	r1, r3, #6
 8006a9e:	17d3      	asrs	r3, r2, #31
 8006aa0:	1acb      	subs	r3, r1, r3
 8006aa2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8006aa6:	fb01 f303 	mul.w	r3, r1, r3
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	2b00      	cmp	r3, #0
      //{
      //  helloWorldDelay--;
      //}
    }

    if ((timerCounter % 10000) == 0)
 8006aae:	4b24      	ldr	r3, [pc, #144]	@ (8006b40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	4b2a      	ldr	r3, [pc, #168]	@ (8006b5c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8006ab4:	fb83 1302 	smull	r1, r3, r3, r2
 8006ab8:	1319      	asrs	r1, r3, #12
 8006aba:	17d3      	asrs	r3, r2, #31
 8006abc:	1acb      	subs	r3, r1, r3
 8006abe:	f242 7110 	movw	r1, #10000	@ 0x2710
 8006ac2:	fb01 f303 	mul.w	r3, r1, r3
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	bf0c      	ite	eq
 8006acc:	2301      	moveq	r3, #1
 8006ace:	2300      	movne	r3, #0
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d02c      	beq.n	8006b30 <HAL_TIM_PeriodElapsedCallback+0x15c>
    {
      // increment / decrement 1000 ms timers here.  Note this resets the timer variable.
      timerCounter = 0;
 8006ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8006b40 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	601a      	str	r2, [r3, #0]
      if (myAccelerometer.delay)
 8006adc:	4b1d      	ldr	r3, [pc, #116]	@ (8006b54 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	bf14      	ite	ne
 8006ae4:	2301      	movne	r3, #1
 8006ae6:	2300      	moveq	r3, #0
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d004      	beq.n	8006af8 <HAL_TIM_PeriodElapsedCallback+0x124>
      {
        myAccelerometer.delay--;
 8006aee:	4b19      	ldr	r3, [pc, #100]	@ (8006b54 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	3b01      	subs	r3, #1
 8006af4:	4a17      	ldr	r2, [pc, #92]	@ (8006b54 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8006af6:	6013      	str	r3, [r2, #0]
      }

      if (myBatteryMonitor.delay)
 8006af8:	4b19      	ldr	r3, [pc, #100]	@ (8006b60 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	bf14      	ite	ne
 8006b00:	2301      	movne	r3, #1
 8006b02:	2300      	moveq	r3, #0
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d004      	beq.n	8006b14 <HAL_TIM_PeriodElapsedCallback+0x140>
      {
        myBatteryMonitor.delay--;
 8006b0a:	4b15      	ldr	r3, [pc, #84]	@ (8006b60 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	4a13      	ldr	r2, [pc, #76]	@ (8006b60 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8006b12:	60d3      	str	r3, [r2, #12]
      }

      if (mySwitch.delay)
 8006b14:	4b13      	ldr	r3, [pc, #76]	@ (8006b64 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	bf14      	ite	ne
 8006b1c:	2301      	movne	r3, #1
 8006b1e:	2300      	moveq	r3, #0
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d004      	beq.n	8006b30 <HAL_TIM_PeriodElapsedCallback+0x15c>
      {
        mySwitch.delay--;
 8006b26:	4b0f      	ldr	r3, [pc, #60]	@ (8006b64 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8006b64 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8006b2e:	6013      	str	r3, [r2, #0]
      }
    }
    //}
  }
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr
 8006b3c:	20000a34 	.word	0x20000a34
 8006b40:	2000050c 	.word	0x2000050c
 8006b44:	66666667 	.word	0x66666667
 8006b48:	200005b8 	.word	0x200005b8
 8006b4c:	2000056c 	.word	0x2000056c
 8006b50:	51eb851f 	.word	0x51eb851f
 8006b54:	20000510 	.word	0x20000510
 8006b58:	10624dd3 	.word	0x10624dd3
 8006b5c:	68db8bad 	.word	0x68db8bad
 8006b60:	20000864 	.word	0x20000864
 8006b64:	20000874 	.word	0x20000874

08006b68 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  if (hspi == myScreen.tft._hspi)
 8006b70:	4b05      	ldr	r3, [pc, #20]	@ (8006b88 <HAL_SPI_TxCpltCallback+0x20>)
 8006b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d102      	bne.n	8006b80 <HAL_SPI_TxCpltCallback+0x18>
  { // Make sure it's the right SPI instance
    myScreen.tft.dmaTransferCompleteCallback();
 8006b7a:	4803      	ldr	r0, [pc, #12]	@ (8006b88 <HAL_SPI_TxCpltCallback+0x20>)
 8006b7c:	f7fd f9ff 	bl	8003f7e <_ZN13ST7789V_STM3227dmaTransferCompleteCallbackEv>
  }
}
 8006b80:	bf00      	nop
 8006b82:	3708      	adds	r7, #8
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	200005b8 	.word	0x200005b8

08006b8c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006b90:	f000 ff38 	bl	8007a04 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8006b94:	f7fe fb9c 	bl	80052d0 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006b98:	f000 f87c 	bl	8006c94 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8006b9c:	f000 f8fa 	bl	8006d94 <_Z24PeriphCommonClock_Configv>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8006ba0:	f7ff fca0 	bl	80064e4 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006ba4:	f7fe fd6a 	bl	800567c <MX_GPIO_Init>
  MX_DMA_Init();
 8006ba8:	f7fe fd3c 	bl	8005624 <MX_DMA_Init>
  MX_RTC_Init();
 8006bac:	f000 f990 	bl	8006ed0 <MX_RTC_Init>
  MX_I2C1_Init();
 8006bb0:	f7ff fbf6 	bl	80063a0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8006bb4:	f000 fa40 	bl	8007038 <MX_SPI1_Init>
  MX_SPI2_Init();
 8006bb8:	f000 fa7c 	bl	80070b4 <MX_SPI2_Init>
  MX_TIM2_Init();
 8006bbc:	f000 fd4e 	bl	800765c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8006bc0:	f000 fe54 	bl	800786c <MX_USART1_UART_Init>
  MX_TIM16_Init();
 8006bc4:	f000 fda4 	bl	8007710 <MX_TIM16_Init>
  MX_RF_Init();
 8006bc8:	f000 f950 	bl	8006e6c <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  // MX_APPE_Init();

  HAL_Delay(500);
 8006bcc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8006bd0:	f7fe fcb9 	bl	8005546 <HAL_Delay>
  MX_USB_Device_Init();
 8006bd4:	f011 fdd2 	bl	801877c <MX_USB_Device_Init>
  HAL_Delay(500);
 8006bd8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8006bdc:	f7fe fcb3 	bl	8005546 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim16);
 8006be0:	4822      	ldr	r0, [pc, #136]	@ (8006c6c <main+0xe0>)
 8006be2:	f007 fc33 	bl	800e44c <HAL_TIM_Base_Start_IT>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8006be6:	2200      	movs	r2, #0
 8006be8:	2100      	movs	r1, #0
 8006bea:	2019      	movs	r0, #25
 8006bec:	f001 f8d7 	bl	8007d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006bf0:	2019      	movs	r0, #25
 8006bf2:	f001 f8ee 	bl	8007dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8006bf6:	f7fe fb79 	bl	80052ec <MX_APPE_Init>

  myAccelerometer.setup();
 8006bfa:	481d      	ldr	r0, [pc, #116]	@ (8006c70 <main+0xe4>)
 8006bfc:	f7fd fcac 	bl	8004558 <_ZN13Accelerometer5setupEv>
  myBacklight.setup();
 8006c00:	481c      	ldr	r0, [pc, #112]	@ (8006c74 <main+0xe8>)
 8006c02:	f7fd fdbd 	bl	8004780 <_ZN9Backlight5setupEv>
  myThermocouples.setup();
 8006c06:	481c      	ldr	r0, [pc, #112]	@ (8006c78 <main+0xec>)
 8006c08:	f7fd ffba 	bl	8004b80 <_ZN13Thermocouples5setupEv>
  myBatteryMonitor.setup();
 8006c0c:	481b      	ldr	r0, [pc, #108]	@ (8006c7c <main+0xf0>)
 8006c0e:	f7fd fe6b 	bl	80048e8 <_ZN14BatteryMonitor5setupEv>
  myScreen.setup();
 8006c12:	481b      	ldr	r0, [pc, #108]	@ (8006c80 <main+0xf4>)
 8006c14:	f011 fa82 	bl	801811c <_ZN6Screen5setupEv>
  mySwitch.setup();
 8006c18:	481a      	ldr	r0, [pc, #104]	@ (8006c84 <main+0xf8>)
 8006c1a:	f7fd ff2b 	bl	8004a74 <_ZN6Switch5setupEv>

  snprintf((char *)UART_BUFFER, 64, "Setup finished\r\n");
 8006c1e:	4a1a      	ldr	r2, [pc, #104]	@ (8006c88 <main+0xfc>)
 8006c20:	2140      	movs	r1, #64	@ 0x40
 8006c22:	481a      	ldr	r0, [pc, #104]	@ (8006c8c <main+0x100>)
 8006c24:	f014 f816 	bl	801ac54 <sniprintf>
  HAL_UART_Transmit(&huart1, UART_BUFFER, strlen((char *)UART_BUFFER), 300);
 8006c28:	4818      	ldr	r0, [pc, #96]	@ (8006c8c <main+0x100>)
 8006c2a:	f7f9 fb09 	bl	8000240 <strlen>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8006c36:	4915      	ldr	r1, [pc, #84]	@ (8006c8c <main+0x100>)
 8006c38:	4815      	ldr	r0, [pc, #84]	@ (8006c90 <main+0x104>)
 8006c3a:	f008 fbd7 	bl	800f3ec <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8006c3e:	f7fe fca7 	bl	8005590 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */

    myAccelerometer.stateMachine();
 8006c42:	480b      	ldr	r0, [pc, #44]	@ (8006c70 <main+0xe4>)
 8006c44:	f7fd fc9c 	bl	8004580 <_ZN13Accelerometer12stateMachineEv>
    myBacklight.stateMachine();
 8006c48:	480a      	ldr	r0, [pc, #40]	@ (8006c74 <main+0xe8>)
 8006c4a:	f7fd fdb3 	bl	80047b4 <_ZN9Backlight12stateMachineEv>
    myThermocouples.stateMachine();
 8006c4e:	480a      	ldr	r0, [pc, #40]	@ (8006c78 <main+0xec>)
 8006c50:	f7fe f826 	bl	8004ca0 <_ZN13Thermocouples12stateMachineEv>
    myBatteryMonitor.stateMachine();
 8006c54:	4809      	ldr	r0, [pc, #36]	@ (8006c7c <main+0xf0>)
 8006c56:	f7fd fe7d 	bl	8004954 <_ZN14BatteryMonitor12stateMachineEv>
    myScreen.stateMachine();
 8006c5a:	4809      	ldr	r0, [pc, #36]	@ (8006c80 <main+0xf4>)
 8006c5c:	f011 fac6 	bl	80181ec <_ZN6Screen12stateMachineEv>
    mySwitch.stateMachine();
 8006c60:	4808      	ldr	r0, [pc, #32]	@ (8006c84 <main+0xf8>)
 8006c62:	f7fd ff15 	bl	8004a90 <_ZN6Switch12stateMachineEv>
    MX_APPE_Process();
 8006c66:	bf00      	nop
 8006c68:	e7e9      	b.n	8006c3e <main+0xb2>
 8006c6a:	bf00      	nop
 8006c6c:	20000a34 	.word	0x20000a34
 8006c70:	20000510 	.word	0x20000510
 8006c74:	20000008 	.word	0x20000008
 8006c78:	2000056c 	.word	0x2000056c
 8006c7c:	20000864 	.word	0x20000864
 8006c80:	200005b8 	.word	0x200005b8
 8006c84:	20000874 	.word	0x20000874
 8006c88:	0801cf54 	.word	0x0801cf54
 8006c8c:	200004cc 	.word	0x200004cc
 8006c90:	20000a80 	.word	0x20000a80

08006c94 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b09a      	sub	sp, #104	@ 0x68
 8006c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006c9a:	f107 0320 	add.w	r3, r7, #32
 8006c9e:	2248      	movs	r2, #72	@ 0x48
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f014 f8fe 	bl	801aea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006ca8:	1d3b      	adds	r3, r7, #4
 8006caa:	2200      	movs	r2, #0
 8006cac:	601a      	str	r2, [r3, #0]
 8006cae:	605a      	str	r2, [r3, #4]
 8006cb0:	609a      	str	r2, [r3, #8]
 8006cb2:	60da      	str	r2, [r3, #12]
 8006cb4:	611a      	str	r2, [r3, #16]
 8006cb6:	615a      	str	r2, [r3, #20]
 8006cb8:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
   */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8006cba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006cc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cc8:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
   */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8006cca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	f023 0303 	bic.w	r3, r3, #3
 8006cd4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006cd8:	f043 0301 	orr.w	r3, r3, #1
 8006cdc:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
   */
  HAL_PWR_EnableBkUpAccess();
 8006cde:	f004 fb5d 	bl	800b39c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8006ce2:	2010      	movs	r0, #16
 8006ce4:	f7ff fc36 	bl	8006554 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ce8:	4b29      	ldr	r3, [pc, #164]	@ (8006d90 <SystemClock_Config+0xfc>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006cf0:	4a27      	ldr	r2, [pc, #156]	@ (8006d90 <SystemClock_Config+0xfc>)
 8006cf2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006cf6:	6013      	str	r3, [r2, #0]
 8006cf8:	4b25      	ldr	r3, [pc, #148]	@ (8006d90 <SystemClock_Config+0xfc>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006d00:	603b      	str	r3, [r7, #0]
 8006d02:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
 8006d04:	2327      	movs	r3, #39	@ 0x27
 8006d06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006d08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006d0c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006d12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006d1c:	2340      	movs	r3, #64	@ 0x40
 8006d1e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8006d20:	2300      	movs	r3, #0
 8006d22:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8006d24:	2360      	movs	r3, #96	@ 0x60
 8006d26:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006d2c:	f107 0320 	add.w	r3, r7, #32
 8006d30:	4618      	mov	r0, r3
 8006d32:	f004 fed7 	bl	800bae4 <HAL_RCC_OscConfig>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	bf14      	ite	ne
 8006d3c:	2301      	movne	r3, #1
 8006d3e:	2300      	moveq	r3, #0
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d001      	beq.n	8006d4a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8006d46:	f000 f851 	bl	8006dec <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006d4a:	236f      	movs	r3, #111	@ 0x6f
 8006d4c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8006d4e:	2302      	movs	r3, #2
 8006d50:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006d52:	2300      	movs	r3, #0
 8006d54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006d56:	2300      	movs	r3, #0
 8006d58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8006d62:	2300      	movs	r3, #0
 8006d64:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006d66:	1d3b      	adds	r3, r7, #4
 8006d68:	2101      	movs	r1, #1
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f005 fa2e 	bl	800c1cc <HAL_RCC_ClockConfig>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	bf14      	ite	ne
 8006d76:	2301      	movne	r3, #1
 8006d78:	2300      	moveq	r3, #0
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d001      	beq.n	8006d84 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8006d80:	f000 f834 	bl	8006dec <Error_Handler>
  }

  /** Enable MSI Auto calibration
   */
  HAL_RCCEx_EnableMSIPLLMode();
 8006d84:	f005 ffe4 	bl	800cd50 <HAL_RCCEx_EnableMSIPLLMode>
}
 8006d88:	bf00      	nop
 8006d8a:	3768      	adds	r7, #104	@ 0x68
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	58000400 	.word	0x58000400

08006d94 <_Z24PeriphCommonClock_Configv>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b094      	sub	sp, #80	@ 0x50
 8006d98:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006d9a:	463b      	mov	r3, r7
 8006d9c:	2250      	movs	r2, #80	@ 0x50
 8006d9e:	2100      	movs	r1, #0
 8006da0:	4618      	mov	r0, r3
 8006da2:	f014 f87f 	bl	801aea4 <memset>

  /** Initializes the peripherals clock
   */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS | RCC_PERIPHCLK_RFWAKEUP;
 8006da6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8006daa:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8006dac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006db0:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8006db2:	2302      	movs	r3, #2
 8006db4:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8006db6:	2310      	movs	r3, #16
 8006db8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006dba:	463b      	mov	r3, r7
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f005 fe51 	bl	800ca64 <HAL_RCCEx_PeriphCLKConfig>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	bf14      	ite	ne
 8006dc8:	2301      	movne	r3, #1
 8006dca:	2300      	moveq	r3, #0
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d001      	beq.n	8006dd6 <_Z24PeriphCommonClock_Configv+0x42>
  {
    Error_Handler();
 8006dd2:	f000 f80b 	bl	8006dec <Error_Handler>
  }
  /* USER CODE BEGIN Smps */
  LL_HSEM_1StepLock(HSEM, 5);
 8006dd6:	2105      	movs	r1, #5
 8006dd8:	4803      	ldr	r0, [pc, #12]	@ (8006de8 <_Z24PeriphCommonClock_Configv+0x54>)
 8006dda:	f7ff fbd1 	bl	8006580 <LL_HSEM_1StepLock>

  /* USER CODE END Smps */
}
 8006dde:	bf00      	nop
 8006de0:	3750      	adds	r7, #80	@ 0x50
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	58001400 	.word	0x58001400

08006dec <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8006dec:	b480      	push	{r7}
 8006dee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006df0:	b672      	cpsid	i
}
 8006df2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006df4:	bf00      	nop
 8006df6:	e7fd      	b.n	8006df4 <Error_Handler+0x8>

08006df8 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	af00      	add	r7, sp, #0
Accelerometer myAccelerometer;
 8006dfc:	4806      	ldr	r0, [pc, #24]	@ (8006e18 <_Z41__static_initialization_and_destruction_0v+0x20>)
 8006dfe:	f7ff fbd7 	bl	80065b0 <_ZN13AccelerometerC1Ev>
Thermocouples myThermocouples;
 8006e02:	4806      	ldr	r0, [pc, #24]	@ (8006e1c <_Z41__static_initialization_and_destruction_0v+0x24>)
 8006e04:	f7ff fbf5 	bl	80065f2 <_ZN13ThermocouplesC1Ev>
Screen myScreen;
 8006e08:	4805      	ldr	r0, [pc, #20]	@ (8006e20 <_Z41__static_initialization_and_destruction_0v+0x28>)
 8006e0a:	f7ff fc07 	bl	800661c <_ZN6ScreenC1Ev>
BatteryMonitor myBatteryMonitor;
 8006e0e:	4805      	ldr	r0, [pc, #20]	@ (8006e24 <_Z41__static_initialization_and_destruction_0v+0x2c>)
 8006e10:	f7ff fdd0 	bl	80069b4 <_ZN14BatteryMonitorC1Ev>
}
 8006e14:	bf00      	nop
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	20000510 	.word	0x20000510
 8006e1c:	2000056c 	.word	0x2000056c
 8006e20:	200005b8 	.word	0x200005b8
 8006e24:	20000864 	.word	0x20000864

08006e28 <_ZN6ScreenD1Ev>:
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	336c      	adds	r3, #108	@ 0x6c
 8006e34:	4618      	mov	r0, r3
 8006e36:	f7fb ff09 	bl	8002c4c <_ZN11GFXcanvas16D1Ev>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <_Z41__static_initialization_and_destruction_1v>:
 8006e44:	b580      	push	{r7, lr}
 8006e46:	af00      	add	r7, sp, #0
Screen myScreen;
 8006e48:	4802      	ldr	r0, [pc, #8]	@ (8006e54 <_Z41__static_initialization_and_destruction_1v+0x10>)
 8006e4a:	f7ff ffed 	bl	8006e28 <_ZN6ScreenD1Ev>
}
 8006e4e:	bf00      	nop
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	200005b8 	.word	0x200005b8

08006e58 <_GLOBAL__sub_I_UART_BUFFER>:
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	f7ff ffcc 	bl	8006df8 <_Z41__static_initialization_and_destruction_0v>
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <_GLOBAL__sub_D_UART_BUFFER>:
 8006e62:	b580      	push	{r7, lr}
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	f7ff ffed 	bl	8006e44 <_Z41__static_initialization_and_destruction_1v>
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8006e70:	bf00      	nop
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8006e7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006e92:	bf00      	nop
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <LL_APB1_GRP1_EnableClock>:
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006ea4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ea8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006eaa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006eb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006eb8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
}
 8006ec2:	bf00      	nop
 8006ec4:	3714      	adds	r7, #20
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
	...

08006ed0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8006ed4:	4b16      	ldr	r3, [pc, #88]	@ (8006f30 <MX_RTC_Init+0x60>)
 8006ed6:	4a17      	ldr	r2, [pc, #92]	@ (8006f34 <MX_RTC_Init+0x64>)
 8006ed8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006eda:	4b15      	ldr	r3, [pc, #84]	@ (8006f30 <MX_RTC_Init+0x60>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8006ee0:	4b13      	ldr	r3, [pc, #76]	@ (8006f30 <MX_RTC_Init+0x60>)
 8006ee2:	220f      	movs	r2, #15
 8006ee4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8006ee6:	4b12      	ldr	r3, [pc, #72]	@ (8006f30 <MX_RTC_Init+0x60>)
 8006ee8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8006eec:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006eee:	4b10      	ldr	r3, [pc, #64]	@ (8006f30 <MX_RTC_Init+0x60>)
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8006f30 <MX_RTC_Init+0x60>)
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006efa:	4b0d      	ldr	r3, [pc, #52]	@ (8006f30 <MX_RTC_Init+0x60>)
 8006efc:	2200      	movs	r2, #0
 8006efe:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8006f00:	4b0b      	ldr	r3, [pc, #44]	@ (8006f30 <MX_RTC_Init+0x60>)
 8006f02:	2200      	movs	r2, #0
 8006f04:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006f06:	480a      	ldr	r0, [pc, #40]	@ (8006f30 <MX_RTC_Init+0x60>)
 8006f08:	f006 f839 	bl	800cf7e <HAL_RTC_Init>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8006f12:	f7ff ff6b 	bl	8006dec <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8006f16:	2200      	movs	r2, #0
 8006f18:	2100      	movs	r1, #0
 8006f1a:	4805      	ldr	r0, [pc, #20]	@ (8006f30 <MX_RTC_Init+0x60>)
 8006f1c:	f006 f93e 	bl	800d19c <HAL_RTCEx_SetWakeUpTimer_IT>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d001      	beq.n	8006f2a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8006f26:	f7ff ff61 	bl	8006dec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8006f2a:	bf00      	nop
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	20000898 	.word	0x20000898
 8006f34:	40002800 	.word	0x40002800

08006f38 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b096      	sub	sp, #88	@ 0x58
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006f40:	f107 0308 	add.w	r3, r7, #8
 8006f44:	2250      	movs	r2, #80	@ 0x50
 8006f46:	2100      	movs	r1, #0
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f013 ffab 	bl	801aea4 <memset>
  if(rtcHandle->Instance==RTC)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a12      	ldr	r2, [pc, #72]	@ (8006f9c <HAL_RTC_MspInit+0x64>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d11d      	bne.n	8006f94 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006f58:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006f5c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006f5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006f62:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006f64:	f107 0308 	add.w	r3, r7, #8
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f005 fd7b 	bl	800ca64 <HAL_RCCEx_PeriphCLKConfig>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d001      	beq.n	8006f78 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8006f74:	f7ff ff3a 	bl	8006dec <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006f78:	f7ff ff7f 	bl	8006e7a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8006f7c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8006f80:	f7ff ff8c 	bl	8006e9c <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8006f84:	2200      	movs	r2, #0
 8006f86:	2100      	movs	r1, #0
 8006f88:	2003      	movs	r0, #3
 8006f8a:	f000 ff08 	bl	8007d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8006f8e:	2003      	movs	r0, #3
 8006f90:	f000 ff1f 	bl	8007dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8006f94:	bf00      	nop
 8006f96:	3758      	adds	r7, #88	@ 0x58
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	40002800 	.word	0x40002800

08006fa0 <LL_AHB2_GRP1_EnableClock>:
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006fa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006fae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006fb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fbc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
}
 8006fc6:	bf00      	nop
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <LL_APB1_GRP1_EnableClock>:
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	b085      	sub	sp, #20
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006fda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fde:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006fe0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006fea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fee:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
}
 8006ff8:	bf00      	nop
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800700c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007010:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007012:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4313      	orrs	r3, r2
 800701a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800701c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007020:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4013      	ands	r3, r2
 8007026:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007028:	68fb      	ldr	r3, [r7, #12]
}
 800702a:	bf00      	nop
 800702c:	3714      	adds	r7, #20
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
	...

08007038 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800703c:	4b1b      	ldr	r3, [pc, #108]	@ (80070ac <MX_SPI1_Init+0x74>)
 800703e:	4a1c      	ldr	r2, [pc, #112]	@ (80070b0 <MX_SPI1_Init+0x78>)
 8007040:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007042:	4b1a      	ldr	r3, [pc, #104]	@ (80070ac <MX_SPI1_Init+0x74>)
 8007044:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8007048:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800704a:	4b18      	ldr	r3, [pc, #96]	@ (80070ac <MX_SPI1_Init+0x74>)
 800704c:	2200      	movs	r2, #0
 800704e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007050:	4b16      	ldr	r3, [pc, #88]	@ (80070ac <MX_SPI1_Init+0x74>)
 8007052:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8007056:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8007058:	4b14      	ldr	r3, [pc, #80]	@ (80070ac <MX_SPI1_Init+0x74>)
 800705a:	2202      	movs	r2, #2
 800705c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800705e:	4b13      	ldr	r3, [pc, #76]	@ (80070ac <MX_SPI1_Init+0x74>)
 8007060:	2201      	movs	r2, #1
 8007062:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007064:	4b11      	ldr	r3, [pc, #68]	@ (80070ac <MX_SPI1_Init+0x74>)
 8007066:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800706a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800706c:	4b0f      	ldr	r3, [pc, #60]	@ (80070ac <MX_SPI1_Init+0x74>)
 800706e:	2228      	movs	r2, #40	@ 0x28
 8007070:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007072:	4b0e      	ldr	r3, [pc, #56]	@ (80070ac <MX_SPI1_Init+0x74>)
 8007074:	2200      	movs	r2, #0
 8007076:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007078:	4b0c      	ldr	r3, [pc, #48]	@ (80070ac <MX_SPI1_Init+0x74>)
 800707a:	2200      	movs	r2, #0
 800707c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800707e:	4b0b      	ldr	r3, [pc, #44]	@ (80070ac <MX_SPI1_Init+0x74>)
 8007080:	2200      	movs	r2, #0
 8007082:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8007084:	4b09      	ldr	r3, [pc, #36]	@ (80070ac <MX_SPI1_Init+0x74>)
 8007086:	2207      	movs	r2, #7
 8007088:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800708a:	4b08      	ldr	r3, [pc, #32]	@ (80070ac <MX_SPI1_Init+0x74>)
 800708c:	2200      	movs	r2, #0
 800708e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8007090:	4b06      	ldr	r3, [pc, #24]	@ (80070ac <MX_SPI1_Init+0x74>)
 8007092:	2200      	movs	r2, #0
 8007094:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007096:	4805      	ldr	r0, [pc, #20]	@ (80070ac <MX_SPI1_Init+0x74>)
 8007098:	f006 f94c 	bl	800d334 <HAL_SPI_Init>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d001      	beq.n	80070a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80070a2:	f7ff fea3 	bl	8006dec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80070a6:	bf00      	nop
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	200008bc 	.word	0x200008bc
 80070b0:	40013000 	.word	0x40013000

080070b4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80070b8:	4b1b      	ldr	r3, [pc, #108]	@ (8007128 <MX_SPI2_Init+0x74>)
 80070ba:	4a1c      	ldr	r2, [pc, #112]	@ (800712c <MX_SPI2_Init+0x78>)
 80070bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80070be:	4b1a      	ldr	r3, [pc, #104]	@ (8007128 <MX_SPI2_Init+0x74>)
 80070c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80070c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80070c6:	4b18      	ldr	r3, [pc, #96]	@ (8007128 <MX_SPI2_Init+0x74>)
 80070c8:	2200      	movs	r2, #0
 80070ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80070cc:	4b16      	ldr	r3, [pc, #88]	@ (8007128 <MX_SPI2_Init+0x74>)
 80070ce:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80070d2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80070d4:	4b14      	ldr	r3, [pc, #80]	@ (8007128 <MX_SPI2_Init+0x74>)
 80070d6:	2200      	movs	r2, #0
 80070d8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80070da:	4b13      	ldr	r3, [pc, #76]	@ (8007128 <MX_SPI2_Init+0x74>)
 80070dc:	2200      	movs	r2, #0
 80070de:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80070e0:	4b11      	ldr	r3, [pc, #68]	@ (8007128 <MX_SPI2_Init+0x74>)
 80070e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070e6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80070e8:	4b0f      	ldr	r3, [pc, #60]	@ (8007128 <MX_SPI2_Init+0x74>)
 80070ea:	2200      	movs	r2, #0
 80070ec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80070ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007128 <MX_SPI2_Init+0x74>)
 80070f0:	2200      	movs	r2, #0
 80070f2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80070f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007128 <MX_SPI2_Init+0x74>)
 80070f6:	2200      	movs	r2, #0
 80070f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007128 <MX_SPI2_Init+0x74>)
 80070fc:	2200      	movs	r2, #0
 80070fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8007100:	4b09      	ldr	r3, [pc, #36]	@ (8007128 <MX_SPI2_Init+0x74>)
 8007102:	2207      	movs	r2, #7
 8007104:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007106:	4b08      	ldr	r3, [pc, #32]	@ (8007128 <MX_SPI2_Init+0x74>)
 8007108:	2200      	movs	r2, #0
 800710a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800710c:	4b06      	ldr	r3, [pc, #24]	@ (8007128 <MX_SPI2_Init+0x74>)
 800710e:	2208      	movs	r2, #8
 8007110:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007112:	4805      	ldr	r0, [pc, #20]	@ (8007128 <MX_SPI2_Init+0x74>)
 8007114:	f006 f90e 	bl	800d334 <HAL_SPI_Init>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d001      	beq.n	8007122 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800711e:	f7ff fe65 	bl	8006dec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007122:	bf00      	nop
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	20000920 	.word	0x20000920
 800712c:	40003800 	.word	0x40003800

08007130 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b088      	sub	sp, #32
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007138:	f107 030c 	add.w	r3, r7, #12
 800713c:	2200      	movs	r2, #0
 800713e:	601a      	str	r2, [r3, #0]
 8007140:	605a      	str	r2, [r3, #4]
 8007142:	609a      	str	r2, [r3, #8]
 8007144:	60da      	str	r2, [r3, #12]
 8007146:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a3b      	ldr	r2, [pc, #236]	@ (800723c <HAL_SPI_MspInit+0x10c>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d120      	bne.n	8007194 <HAL_SPI_MspInit+0x64>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007152:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8007156:	f7ff ff55 	bl	8007004 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800715a:	2001      	movs	r0, #1
 800715c:	f7ff ff20 	bl	8006fa0 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007160:	23e0      	movs	r3, #224	@ 0xe0
 8007162:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007164:	2302      	movs	r3, #2
 8007166:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007168:	2300      	movs	r3, #0
 800716a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800716c:	2300      	movs	r3, #0
 800716e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007170:	2305      	movs	r3, #5
 8007172:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007174:	f107 030c 	add.w	r3, r7, #12
 8007178:	4619      	mov	r1, r3
 800717a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800717e:	f001 f941 	bl	8008404 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8007182:	2200      	movs	r2, #0
 8007184:	2100      	movs	r1, #0
 8007186:	2022      	movs	r0, #34	@ 0x22
 8007188:	f000 fe09 	bl	8007d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800718c:	2022      	movs	r0, #34	@ 0x22
 800718e:	f000 fe20 	bl	8007dd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007192:	e04e      	b.n	8007232 <HAL_SPI_MspInit+0x102>
  else if(spiHandle->Instance==SPI2)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a29      	ldr	r2, [pc, #164]	@ (8007240 <HAL_SPI_MspInit+0x110>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d149      	bne.n	8007232 <HAL_SPI_MspInit+0x102>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800719e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80071a2:	f7ff ff16 	bl	8006fd2 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071a6:	2002      	movs	r0, #2
 80071a8:	f7ff fefa 	bl	8006fa0 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80071ac:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80071b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071b2:	2302      	movs	r3, #2
 80071b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071b6:	2300      	movs	r3, #0
 80071b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071ba:	2300      	movs	r3, #0
 80071bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80071be:	2305      	movs	r3, #5
 80071c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071c2:	f107 030c 	add.w	r3, r7, #12
 80071c6:	4619      	mov	r1, r3
 80071c8:	481e      	ldr	r0, [pc, #120]	@ (8007244 <HAL_SPI_MspInit+0x114>)
 80071ca:	f001 f91b 	bl	8008404 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel1;
 80071ce:	4b1e      	ldr	r3, [pc, #120]	@ (8007248 <HAL_SPI_MspInit+0x118>)
 80071d0:	4a1e      	ldr	r2, [pc, #120]	@ (800724c <HAL_SPI_MspInit+0x11c>)
 80071d2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 80071d4:	4b1c      	ldr	r3, [pc, #112]	@ (8007248 <HAL_SPI_MspInit+0x118>)
 80071d6:	2209      	movs	r2, #9
 80071d8:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80071da:	4b1b      	ldr	r3, [pc, #108]	@ (8007248 <HAL_SPI_MspInit+0x118>)
 80071dc:	2210      	movs	r2, #16
 80071de:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80071e0:	4b19      	ldr	r3, [pc, #100]	@ (8007248 <HAL_SPI_MspInit+0x118>)
 80071e2:	2200      	movs	r2, #0
 80071e4:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80071e6:	4b18      	ldr	r3, [pc, #96]	@ (8007248 <HAL_SPI_MspInit+0x118>)
 80071e8:	2280      	movs	r2, #128	@ 0x80
 80071ea:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80071ec:	4b16      	ldr	r3, [pc, #88]	@ (8007248 <HAL_SPI_MspInit+0x118>)
 80071ee:	2200      	movs	r2, #0
 80071f0:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80071f2:	4b15      	ldr	r3, [pc, #84]	@ (8007248 <HAL_SPI_MspInit+0x118>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80071f8:	4b13      	ldr	r3, [pc, #76]	@ (8007248 <HAL_SPI_MspInit+0x118>)
 80071fa:	2200      	movs	r2, #0
 80071fc:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80071fe:	4b12      	ldr	r3, [pc, #72]	@ (8007248 <HAL_SPI_MspInit+0x118>)
 8007200:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007204:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8007206:	4810      	ldr	r0, [pc, #64]	@ (8007248 <HAL_SPI_MspInit+0x118>)
 8007208:	f000 fe28 	bl	8007e5c <HAL_DMA_Init>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d001      	beq.n	8007216 <HAL_SPI_MspInit+0xe6>
      Error_Handler();
 8007212:	f7ff fdeb 	bl	8006dec <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a0b      	ldr	r2, [pc, #44]	@ (8007248 <HAL_SPI_MspInit+0x118>)
 800721a:	655a      	str	r2, [r3, #84]	@ 0x54
 800721c:	4a0a      	ldr	r2, [pc, #40]	@ (8007248 <HAL_SPI_MspInit+0x118>)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8007222:	2200      	movs	r2, #0
 8007224:	2100      	movs	r1, #0
 8007226:	2023      	movs	r0, #35	@ 0x23
 8007228:	f000 fdb9 	bl	8007d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800722c:	2023      	movs	r0, #35	@ 0x23
 800722e:	f000 fdd0 	bl	8007dd2 <HAL_NVIC_EnableIRQ>
}
 8007232:	bf00      	nop
 8007234:	3720      	adds	r7, #32
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	40013000 	.word	0x40013000
 8007240:	40003800 	.word	0x40003800
 8007244:	48000400 	.word	0x48000400
 8007248:	20000984 	.word	0x20000984
 800724c:	40020008 	.word	0x40020008

08007250 <LL_AHB3_GRP1_EnableClock>:
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8007258:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800725c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800725e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4313      	orrs	r3, r2
 8007266:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8007268:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800726c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4013      	ands	r3, r2
 8007272:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007274:	68fb      	ldr	r3, [r7, #12]
}
 8007276:	bf00      	nop
 8007278:	3714      	adds	r7, #20
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr

08007282 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8007286:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800728a:	f7ff ffe1 	bl	8007250 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800728e:	2200      	movs	r2, #0
 8007290:	2100      	movs	r1, #0
 8007292:	202e      	movs	r0, #46	@ 0x2e
 8007294:	f000 fd83 	bl	8007d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8007298:	202e      	movs	r0, #46	@ 0x2e
 800729a:	f000 fd9a 	bl	8007dd2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800729e:	bf00      	nop
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80072a2:	b480      	push	{r7}
 80072a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80072a6:	bf00      	nop
 80072a8:	e7fd      	b.n	80072a6 <NMI_Handler+0x4>

080072aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80072aa:	b480      	push	{r7}
 80072ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80072ae:	bf00      	nop
 80072b0:	e7fd      	b.n	80072ae <HardFault_Handler+0x4>

080072b2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80072b2:	b480      	push	{r7}
 80072b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80072b6:	bf00      	nop
 80072b8:	e7fd      	b.n	80072b6 <MemManage_Handler+0x4>

080072ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80072ba:	b480      	push	{r7}
 80072bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80072be:	bf00      	nop
 80072c0:	e7fd      	b.n	80072be <BusFault_Handler+0x4>

080072c2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80072c2:	b480      	push	{r7}
 80072c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80072c6:	bf00      	nop
 80072c8:	e7fd      	b.n	80072c6 <UsageFault_Handler+0x4>

080072ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80072ca:	b480      	push	{r7}
 80072cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80072ce:	bf00      	nop
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80072d8:	b480      	push	{r7}
 80072da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80072dc:	bf00      	nop
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr

080072e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80072e6:	b480      	push	{r7}
 80072e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80072ea:	bf00      	nop
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80072f8:	f000 fbde 	bl	8007ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80072fc:	bf00      	nop
 80072fe:	bd80      	pop	{r7, pc}

08007300 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8007304:	f7fe fd60 	bl	8005dc8 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8007308:	bf00      	nop
 800730a:	bd80      	pop	{r7, pc}

0800730c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8007310:	4802      	ldr	r0, [pc, #8]	@ (800731c <DMA1_Channel1_IRQHandler+0x10>)
 8007312:	f000 ff25 	bl	8008160 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007316:	bf00      	nop
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	20000984 	.word	0x20000984

08007320 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8007324:	4802      	ldr	r0, [pc, #8]	@ (8007330 <USB_LP_IRQHandler+0x10>)
 8007326:	f002 fc87 	bl	8009c38 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800732a:	bf00      	nop
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	20001240 	.word	0x20001240

08007334 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8007338:	4802      	ldr	r0, [pc, #8]	@ (8007344 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800733a:	f007 fa07 	bl	800e74c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800733e:	bf00      	nop
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	20000a34 	.word	0x20000a34

08007348 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800734c:	4802      	ldr	r0, [pc, #8]	@ (8007358 <SPI1_IRQHandler+0x10>)
 800734e:	f006 fd17 	bl	800dd80 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8007352:	bf00      	nop
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	200008bc 	.word	0x200008bc

0800735c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8007360:	4802      	ldr	r0, [pc, #8]	@ (800736c <SPI2_IRQHandler+0x10>)
 8007362:	f006 fd0d 	bl	800dd80 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8007366:	bf00      	nop
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	20000920 	.word	0x20000920

08007370 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8007374:	f00f fe2a 	bl	8016fcc <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8007378:	bf00      	nop
 800737a:	bd80      	pop	{r7, pc}

0800737c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8007380:	f00f fe5a 	bl	8017038 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8007384:	bf00      	nop
 8007386:	bd80      	pop	{r7, pc}

08007388 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800738c:	f001 f9da 	bl	8008744 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8007390:	bf00      	nop
 8007392:	bd80      	pop	{r7, pc}

08007394 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007394:	b480      	push	{r7}
 8007396:	af00      	add	r7, sp, #0
  return 1;
 8007398:	2301      	movs	r3, #1
}
 800739a:	4618      	mov	r0, r3
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <_kill>:

int _kill(int pid, int sig)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80073ae:	f013 fe2f 	bl	801b010 <__errno>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2216      	movs	r2, #22
 80073b6:	601a      	str	r2, [r3, #0]
  return -1;
 80073b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3708      	adds	r7, #8
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <_exit>:

void _exit (int status)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80073cc:	f04f 31ff 	mov.w	r1, #4294967295
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f7ff ffe7 	bl	80073a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80073d6:	bf00      	nop
 80073d8:	e7fd      	b.n	80073d6 <_exit+0x12>

080073da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b086      	sub	sp, #24
 80073de:	af00      	add	r7, sp, #0
 80073e0:	60f8      	str	r0, [r7, #12]
 80073e2:	60b9      	str	r1, [r7, #8]
 80073e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80073e6:	2300      	movs	r3, #0
 80073e8:	617b      	str	r3, [r7, #20]
 80073ea:	e00a      	b.n	8007402 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80073ec:	f7f9 fdbc 	bl	8000f68 <__io_getchar>
 80073f0:	4601      	mov	r1, r0
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	1c5a      	adds	r2, r3, #1
 80073f6:	60ba      	str	r2, [r7, #8]
 80073f8:	b2ca      	uxtb	r2, r1
 80073fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	3301      	adds	r3, #1
 8007400:	617b      	str	r3, [r7, #20]
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	429a      	cmp	r2, r3
 8007408:	dbf0      	blt.n	80073ec <_read+0x12>
  }

  return len;
 800740a:	687b      	ldr	r3, [r7, #4]
}
 800740c:	4618      	mov	r0, r3
 800740e:	3718      	adds	r7, #24
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b086      	sub	sp, #24
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007420:	2300      	movs	r3, #0
 8007422:	617b      	str	r3, [r7, #20]
 8007424:	e009      	b.n	800743a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	1c5a      	adds	r2, r3, #1
 800742a:	60ba      	str	r2, [r7, #8]
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	4618      	mov	r0, r3
 8007430:	f7f9 fd88 	bl	8000f44 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	3301      	adds	r3, #1
 8007438:	617b      	str	r3, [r7, #20]
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	429a      	cmp	r2, r3
 8007440:	dbf1      	blt.n	8007426 <_write+0x12>
  }
  return len;
 8007442:	687b      	ldr	r3, [r7, #4]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3718      	adds	r7, #24
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <_close>:

int _close(int file)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007454:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007458:	4618      	mov	r0, r3
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007474:	605a      	str	r2, [r3, #4]
  return 0;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <_isatty>:

int _isatty(int file)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800748c:	2301      	movs	r3, #1
}
 800748e:	4618      	mov	r0, r3
 8007490:	370c      	adds	r7, #12
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr

0800749a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800749a:	b480      	push	{r7}
 800749c:	b085      	sub	sp, #20
 800749e:	af00      	add	r7, sp, #0
 80074a0:	60f8      	str	r0, [r7, #12]
 80074a2:	60b9      	str	r1, [r7, #8]
 80074a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3714      	adds	r7, #20
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80074bc:	4a14      	ldr	r2, [pc, #80]	@ (8007510 <_sbrk+0x5c>)
 80074be:	4b15      	ldr	r3, [pc, #84]	@ (8007514 <_sbrk+0x60>)
 80074c0:	1ad3      	subs	r3, r2, r3
 80074c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80074c8:	4b13      	ldr	r3, [pc, #76]	@ (8007518 <_sbrk+0x64>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d102      	bne.n	80074d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80074d0:	4b11      	ldr	r3, [pc, #68]	@ (8007518 <_sbrk+0x64>)
 80074d2:	4a12      	ldr	r2, [pc, #72]	@ (800751c <_sbrk+0x68>)
 80074d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80074d6:	4b10      	ldr	r3, [pc, #64]	@ (8007518 <_sbrk+0x64>)
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4413      	add	r3, r2
 80074de:	693a      	ldr	r2, [r7, #16]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d207      	bcs.n	80074f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80074e4:	f013 fd94 	bl	801b010 <__errno>
 80074e8:	4603      	mov	r3, r0
 80074ea:	220c      	movs	r2, #12
 80074ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80074ee:	f04f 33ff 	mov.w	r3, #4294967295
 80074f2:	e009      	b.n	8007508 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80074f4:	4b08      	ldr	r3, [pc, #32]	@ (8007518 <_sbrk+0x64>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80074fa:	4b07      	ldr	r3, [pc, #28]	@ (8007518 <_sbrk+0x64>)
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4413      	add	r3, r2
 8007502:	4a05      	ldr	r2, [pc, #20]	@ (8007518 <_sbrk+0x64>)
 8007504:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007506:	68fb      	ldr	r3, [r7, #12]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3718      	adds	r7, #24
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	20030000 	.word	0x20030000
 8007514:	00001000 	.word	0x00001000
 8007518:	200009e4 	.word	0x200009e4
 800751c:	20001b30 	.word	0x20001b30

08007520 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007520:	b480      	push	{r7}
 8007522:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8007524:	4b24      	ldr	r3, [pc, #144]	@ (80075b8 <SystemInit+0x98>)
 8007526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800752a:	4a23      	ldr	r2, [pc, #140]	@ (80075b8 <SystemInit+0x98>)
 800752c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007530:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8007534:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800753e:	f043 0301 	orr.w	r3, r3, #1
 8007542:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8007544:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007548:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800754c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800754e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007558:	4b18      	ldr	r3, [pc, #96]	@ (80075bc <SystemInit+0x9c>)
 800755a:	4013      	ands	r3, r2
 800755c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800755e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007562:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007566:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800756a:	f023 0305 	bic.w	r3, r3, #5
 800756e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8007572:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007576:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800757a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800757e:	f023 0301 	bic.w	r3, r3, #1
 8007582:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8007586:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800758a:	4a0d      	ldr	r2, [pc, #52]	@ (80075c0 <SystemInit+0xa0>)
 800758c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800758e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007592:	4a0b      	ldr	r2, [pc, #44]	@ (80075c0 <SystemInit+0xa0>)
 8007594:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007596:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80075a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80075a4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80075a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075aa:	2200      	movs	r2, #0
 80075ac:	619a      	str	r2, [r3, #24]
}
 80075ae:	bf00      	nop
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr
 80075b8:	e000ed00 	.word	0xe000ed00
 80075bc:	faf6fefb 	.word	0xfaf6fefb
 80075c0:	22041000 	.word	0x22041000

080075c4 <LL_AHB2_GRP1_EnableClock>:
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80075cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80075d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4313      	orrs	r3, r2
 80075da:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80075dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4013      	ands	r3, r2
 80075e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80075e8:	68fb      	ldr	r3, [r7, #12]
}
 80075ea:	bf00      	nop
 80075ec:	3714      	adds	r7, #20
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <LL_APB1_GRP1_EnableClock>:
{
 80075f6:	b480      	push	{r7}
 80075f8:	b085      	sub	sp, #20
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80075fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007602:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007604:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4313      	orrs	r3, r2
 800760c:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800760e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007612:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	4013      	ands	r3, r2
 8007618:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800761a:	68fb      	ldr	r3, [r7, #12]
}
 800761c:	bf00      	nop
 800761e:	3714      	adds	r7, #20
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <LL_APB2_GRP1_EnableClock>:
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8007630:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007634:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007636:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4313      	orrs	r3, r2
 800763e:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8007640:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007644:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4013      	ands	r3, r2
 800764a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800764c:	68fb      	ldr	r3, [r7, #12]
}
 800764e:	bf00      	nop
 8007650:	3714      	adds	r7, #20
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
	...

0800765c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b08a      	sub	sp, #40	@ 0x28
 8007660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007662:	f107 031c 	add.w	r3, r7, #28
 8007666:	2200      	movs	r2, #0
 8007668:	601a      	str	r2, [r3, #0]
 800766a:	605a      	str	r2, [r3, #4]
 800766c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800766e:	463b      	mov	r3, r7
 8007670:	2200      	movs	r2, #0
 8007672:	601a      	str	r2, [r3, #0]
 8007674:	605a      	str	r2, [r3, #4]
 8007676:	609a      	str	r2, [r3, #8]
 8007678:	60da      	str	r2, [r3, #12]
 800767a:	611a      	str	r2, [r3, #16]
 800767c:	615a      	str	r2, [r3, #20]
 800767e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007680:	4b22      	ldr	r3, [pc, #136]	@ (800770c <MX_TIM2_Init+0xb0>)
 8007682:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007686:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8007688:	4b20      	ldr	r3, [pc, #128]	@ (800770c <MX_TIM2_Init+0xb0>)
 800768a:	221f      	movs	r2, #31
 800768c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800768e:	4b1f      	ldr	r3, [pc, #124]	@ (800770c <MX_TIM2_Init+0xb0>)
 8007690:	2200      	movs	r2, #0
 8007692:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8007694:	4b1d      	ldr	r3, [pc, #116]	@ (800770c <MX_TIM2_Init+0xb0>)
 8007696:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800769a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800769c:	4b1b      	ldr	r3, [pc, #108]	@ (800770c <MX_TIM2_Init+0xb0>)
 800769e:	2200      	movs	r2, #0
 80076a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80076a2:	4b1a      	ldr	r3, [pc, #104]	@ (800770c <MX_TIM2_Init+0xb0>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80076a8:	4818      	ldr	r0, [pc, #96]	@ (800770c <MX_TIM2_Init+0xb0>)
 80076aa:	f006 ff1d 	bl	800e4e8 <HAL_TIM_PWM_Init>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d001      	beq.n	80076b8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80076b4:	f7ff fb9a 	bl	8006dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80076b8:	2300      	movs	r3, #0
 80076ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80076bc:	2300      	movs	r3, #0
 80076be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80076c0:	f107 031c 	add.w	r3, r7, #28
 80076c4:	4619      	mov	r1, r3
 80076c6:	4811      	ldr	r0, [pc, #68]	@ (800770c <MX_TIM2_Init+0xb0>)
 80076c8:	f007 fd92 	bl	800f1f0 <HAL_TIMEx_MasterConfigSynchronization>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d001      	beq.n	80076d6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80076d2:	f7ff fb8b 	bl	8006dec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80076d6:	2360      	movs	r3, #96	@ 0x60
 80076d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80076da:	2300      	movs	r3, #0
 80076dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80076de:	2300      	movs	r3, #0
 80076e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80076e2:	2300      	movs	r3, #0
 80076e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80076e6:	463b      	mov	r3, r7
 80076e8:	2200      	movs	r2, #0
 80076ea:	4619      	mov	r1, r3
 80076ec:	4807      	ldr	r0, [pc, #28]	@ (800770c <MX_TIM2_Init+0xb0>)
 80076ee:	f007 f935 	bl	800e95c <HAL_TIM_PWM_ConfigChannel>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d001      	beq.n	80076fc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80076f8:	f7ff fb78 	bl	8006dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80076fc:	4803      	ldr	r0, [pc, #12]	@ (800770c <MX_TIM2_Init+0xb0>)
 80076fe:	f000 f859 	bl	80077b4 <HAL_TIM_MspPostInit>

}
 8007702:	bf00      	nop
 8007704:	3728      	adds	r7, #40	@ 0x28
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	200009e8 	.word	0x200009e8

08007710 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8007714:	4b0f      	ldr	r3, [pc, #60]	@ (8007754 <MX_TIM16_Init+0x44>)
 8007716:	4a10      	ldr	r2, [pc, #64]	@ (8007758 <MX_TIM16_Init+0x48>)
 8007718:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 800771a:	4b0e      	ldr	r3, [pc, #56]	@ (8007754 <MX_TIM16_Init+0x44>)
 800771c:	221f      	movs	r2, #31
 800771e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007720:	4b0c      	ldr	r3, [pc, #48]	@ (8007754 <MX_TIM16_Init+0x44>)
 8007722:	2200      	movs	r2, #0
 8007724:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 99;
 8007726:	4b0b      	ldr	r3, [pc, #44]	@ (8007754 <MX_TIM16_Init+0x44>)
 8007728:	2263      	movs	r2, #99	@ 0x63
 800772a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800772c:	4b09      	ldr	r3, [pc, #36]	@ (8007754 <MX_TIM16_Init+0x44>)
 800772e:	2200      	movs	r2, #0
 8007730:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8007732:	4b08      	ldr	r3, [pc, #32]	@ (8007754 <MX_TIM16_Init+0x44>)
 8007734:	2200      	movs	r2, #0
 8007736:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007738:	4b06      	ldr	r3, [pc, #24]	@ (8007754 <MX_TIM16_Init+0x44>)
 800773a:	2280      	movs	r2, #128	@ 0x80
 800773c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800773e:	4805      	ldr	r0, [pc, #20]	@ (8007754 <MX_TIM16_Init+0x44>)
 8007740:	f006 fe2c 	bl	800e39c <HAL_TIM_Base_Init>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d001      	beq.n	800774e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800774a:	f7ff fb4f 	bl	8006dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800774e:	bf00      	nop
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	20000a34 	.word	0x20000a34
 8007758:	40014400 	.word	0x40014400

0800775c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800776c:	d102      	bne.n	8007774 <HAL_TIM_PWM_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800776e:	2001      	movs	r0, #1
 8007770:	f7ff ff41 	bl	80075f6 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8007774:	bf00      	nop
 8007776:	3708      	adds	r7, #8
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a09      	ldr	r2, [pc, #36]	@ (80077b0 <HAL_TIM_Base_MspInit+0x34>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d10b      	bne.n	80077a6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800778e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8007792:	f7ff ff49 	bl	8007628 <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8007796:	2200      	movs	r2, #0
 8007798:	2100      	movs	r1, #0
 800779a:	2019      	movs	r0, #25
 800779c:	f000 faff 	bl	8007d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80077a0:	2019      	movs	r0, #25
 80077a2:	f000 fb16 	bl	8007dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80077a6:	bf00      	nop
 80077a8:	3708      	adds	r7, #8
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	40014400 	.word	0x40014400

080077b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b088      	sub	sp, #32
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077bc:	f107 030c 	add.w	r3, r7, #12
 80077c0:	2200      	movs	r2, #0
 80077c2:	601a      	str	r2, [r3, #0]
 80077c4:	605a      	str	r2, [r3, #4]
 80077c6:	609a      	str	r2, [r3, #8]
 80077c8:	60da      	str	r2, [r3, #12]
 80077ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077d4:	d113      	bne.n	80077fe <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077d6:	2001      	movs	r0, #1
 80077d8:	f7ff fef4 	bl	80075c4 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TFT_BACKLIGHT_Pin;
 80077dc:	2301      	movs	r3, #1
 80077de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077e0:	2302      	movs	r3, #2
 80077e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077e4:	2300      	movs	r3, #0
 80077e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077e8:	2300      	movs	r3, #0
 80077ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80077ec:	2301      	movs	r3, #1
 80077ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TFT_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 80077f0:	f107 030c 	add.w	r3, r7, #12
 80077f4:	4619      	mov	r1, r3
 80077f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80077fa:	f000 fe03 	bl	8008404 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80077fe:	bf00      	nop
 8007800:	3720      	adds	r7, #32
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <LL_AHB2_GRP1_EnableClock>:
{
 8007806:	b480      	push	{r7}
 8007808:	b085      	sub	sp, #20
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800780e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007812:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007814:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4313      	orrs	r3, r2
 800781c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800781e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007822:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4013      	ands	r3, r2
 8007828:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800782a:	68fb      	ldr	r3, [r7, #12]
}
 800782c:	bf00      	nop
 800782e:	3714      	adds	r7, #20
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <LL_APB2_GRP1_EnableClock>:
{
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8007840:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007844:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007846:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4313      	orrs	r3, r2
 800784e:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8007850:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007854:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4013      	ands	r3, r2
 800785a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800785c:	68fb      	ldr	r3, [r7, #12]
}
 800785e:	bf00      	nop
 8007860:	3714      	adds	r7, #20
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr
	...

0800786c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007870:	4b22      	ldr	r3, [pc, #136]	@ (80078fc <MX_USART1_UART_Init+0x90>)
 8007872:	4a23      	ldr	r2, [pc, #140]	@ (8007900 <MX_USART1_UART_Init+0x94>)
 8007874:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007876:	4b21      	ldr	r3, [pc, #132]	@ (80078fc <MX_USART1_UART_Init+0x90>)
 8007878:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800787c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800787e:	4b1f      	ldr	r3, [pc, #124]	@ (80078fc <MX_USART1_UART_Init+0x90>)
 8007880:	2200      	movs	r2, #0
 8007882:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007884:	4b1d      	ldr	r3, [pc, #116]	@ (80078fc <MX_USART1_UART_Init+0x90>)
 8007886:	2200      	movs	r2, #0
 8007888:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800788a:	4b1c      	ldr	r3, [pc, #112]	@ (80078fc <MX_USART1_UART_Init+0x90>)
 800788c:	2200      	movs	r2, #0
 800788e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007890:	4b1a      	ldr	r3, [pc, #104]	@ (80078fc <MX_USART1_UART_Init+0x90>)
 8007892:	220c      	movs	r2, #12
 8007894:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007896:	4b19      	ldr	r3, [pc, #100]	@ (80078fc <MX_USART1_UART_Init+0x90>)
 8007898:	2200      	movs	r2, #0
 800789a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800789c:	4b17      	ldr	r3, [pc, #92]	@ (80078fc <MX_USART1_UART_Init+0x90>)
 800789e:	2200      	movs	r2, #0
 80078a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80078a2:	4b16      	ldr	r3, [pc, #88]	@ (80078fc <MX_USART1_UART_Init+0x90>)
 80078a4:	2200      	movs	r2, #0
 80078a6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80078a8:	4b14      	ldr	r3, [pc, #80]	@ (80078fc <MX_USART1_UART_Init+0x90>)
 80078aa:	2200      	movs	r2, #0
 80078ac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80078ae:	4b13      	ldr	r3, [pc, #76]	@ (80078fc <MX_USART1_UART_Init+0x90>)
 80078b0:	2200      	movs	r2, #0
 80078b2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80078b4:	4811      	ldr	r0, [pc, #68]	@ (80078fc <MX_USART1_UART_Init+0x90>)
 80078b6:	f007 fd39 	bl	800f32c <HAL_UART_Init>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d001      	beq.n	80078c4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80078c0:	f7ff fa94 	bl	8006dec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80078c4:	2100      	movs	r1, #0
 80078c6:	480d      	ldr	r0, [pc, #52]	@ (80078fc <MX_USART1_UART_Init+0x90>)
 80078c8:	f008 fc32 	bl	8010130 <HAL_UARTEx_SetTxFifoThreshold>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d001      	beq.n	80078d6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80078d2:	f7ff fa8b 	bl	8006dec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80078d6:	2100      	movs	r1, #0
 80078d8:	4808      	ldr	r0, [pc, #32]	@ (80078fc <MX_USART1_UART_Init+0x90>)
 80078da:	f008 fc67 	bl	80101ac <HAL_UARTEx_SetRxFifoThreshold>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d001      	beq.n	80078e8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80078e4:	f7ff fa82 	bl	8006dec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80078e8:	4804      	ldr	r0, [pc, #16]	@ (80078fc <MX_USART1_UART_Init+0x90>)
 80078ea:	f008 fbe8 	bl	80100be <HAL_UARTEx_DisableFifoMode>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d001      	beq.n	80078f8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80078f4:	f7ff fa7a 	bl	8006dec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80078f8:	bf00      	nop
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	20000a80 	.word	0x20000a80
 8007900:	40013800 	.word	0x40013800

08007904 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b09c      	sub	sp, #112	@ 0x70
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800790c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8007910:	2200      	movs	r2, #0
 8007912:	601a      	str	r2, [r3, #0]
 8007914:	605a      	str	r2, [r3, #4]
 8007916:	609a      	str	r2, [r3, #8]
 8007918:	60da      	str	r2, [r3, #12]
 800791a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800791c:	f107 030c 	add.w	r3, r7, #12
 8007920:	2250      	movs	r2, #80	@ 0x50
 8007922:	2100      	movs	r1, #0
 8007924:	4618      	mov	r0, r3
 8007926:	f013 fabd 	bl	801aea4 <memset>
  if(uartHandle->Instance==USART1)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a16      	ldr	r2, [pc, #88]	@ (8007988 <HAL_UART_MspInit+0x84>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d124      	bne.n	800797e <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007934:	2301      	movs	r3, #1
 8007936:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007938:	2300      	movs	r3, #0
 800793a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800793c:	f107 030c 	add.w	r3, r7, #12
 8007940:	4618      	mov	r0, r3
 8007942:	f005 f88f 	bl	800ca64 <HAL_RCCEx_PeriphCLKConfig>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d001      	beq.n	8007950 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800794c:	f7ff fa4e 	bl	8006dec <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007950:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8007954:	f7ff ff70 	bl	8007838 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007958:	2002      	movs	r0, #2
 800795a:	f7ff ff54 	bl	8007806 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800795e:	23c0      	movs	r3, #192	@ 0xc0
 8007960:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007962:	2302      	movs	r3, #2
 8007964:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007966:	2300      	movs	r3, #0
 8007968:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800796a:	2300      	movs	r3, #0
 800796c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800796e:	2307      	movs	r3, #7
 8007970:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007972:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8007976:	4619      	mov	r1, r3
 8007978:	4804      	ldr	r0, [pc, #16]	@ (800798c <HAL_UART_MspInit+0x88>)
 800797a:	f000 fd43 	bl	8008404 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800797e:	bf00      	nop
 8007980:	3770      	adds	r7, #112	@ 0x70
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	40013800 	.word	0x40013800
 800798c:	48000400 	.word	0x48000400

08007990 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8007990:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007992:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007994:	3304      	adds	r3, #4

08007996 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007996:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007998:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800799a:	d3f9      	bcc.n	8007990 <CopyDataInit>
  bx lr
 800799c:	4770      	bx	lr

0800799e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800799e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80079a0:	3004      	adds	r0, #4

080079a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80079a2:	4288      	cmp	r0, r1
  bcc FillZerobss
 80079a4:	d3fb      	bcc.n	800799e <FillZerobss>
  bx lr
 80079a6:	4770      	bx	lr

080079a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80079a8:	480c      	ldr	r0, [pc, #48]	@ (80079dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80079aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80079ac:	f7ff fdb8 	bl	8007520 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80079b0:	480b      	ldr	r0, [pc, #44]	@ (80079e0 <LoopForever+0x6>)
 80079b2:	490c      	ldr	r1, [pc, #48]	@ (80079e4 <LoopForever+0xa>)
 80079b4:	4a0c      	ldr	r2, [pc, #48]	@ (80079e8 <LoopForever+0xe>)
 80079b6:	2300      	movs	r3, #0
 80079b8:	f7ff ffed 	bl	8007996 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80079bc:	480b      	ldr	r0, [pc, #44]	@ (80079ec <LoopForever+0x12>)
 80079be:	490c      	ldr	r1, [pc, #48]	@ (80079f0 <LoopForever+0x16>)
 80079c0:	4a0c      	ldr	r2, [pc, #48]	@ (80079f4 <LoopForever+0x1a>)
 80079c2:	2300      	movs	r3, #0
 80079c4:	f7ff ffe7 	bl	8007996 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80079c8:	480b      	ldr	r0, [pc, #44]	@ (80079f8 <LoopForever+0x1e>)
 80079ca:	490c      	ldr	r1, [pc, #48]	@ (80079fc <LoopForever+0x22>)
 80079cc:	2300      	movs	r3, #0
 80079ce:	f7ff ffe8 	bl	80079a2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80079d2:	f013 fb23 	bl	801b01c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80079d6:	f7ff f8d9 	bl	8006b8c <main>

080079da <LoopForever>:

LoopForever:
  b LoopForever
 80079da:	e7fe      	b.n	80079da <LoopForever>
  ldr   r0, =_estack
 80079dc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80079e0:	20000008 	.word	0x20000008
 80079e4:	200002ec 	.word	0x200002ec
 80079e8:	0801e800 	.word	0x0801e800
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80079ec:	200301e4 	.word	0x200301e4
 80079f0:	20030a67 	.word	0x20030a67
 80079f4:	0801eb2a 	.word	0x0801eb2a
  INIT_BSS _sbss, _ebss
 80079f8:	20000338 	.word	0x20000338
 80079fc:	20001b2c 	.word	0x20001b2c

08007a00 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007a00:	e7fe      	b.n	8007a00 <ADC1_IRQHandler>
	...

08007a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8007a40 <HAL_Init+0x3c>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a0b      	ldr	r2, [pc, #44]	@ (8007a40 <HAL_Init+0x3c>)
 8007a14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a18:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007a1a:	2003      	movs	r0, #3
 8007a1c:	f000 f9b4 	bl	8007d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007a20:	200f      	movs	r0, #15
 8007a22:	f000 f80f 	bl	8007a44 <HAL_InitTick>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d002      	beq.n	8007a32 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	71fb      	strb	r3, [r7, #7]
 8007a30:	e001      	b.n	8007a36 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007a32:	f7ff fc26 	bl	8007282 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007a36:	79fb      	ldrb	r3, [r7, #7]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	58004000 	.word	0x58004000

08007a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8007a50:	4b17      	ldr	r3, [pc, #92]	@ (8007ab0 <HAL_InitTick+0x6c>)
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d024      	beq.n	8007aa2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8007a58:	f004 fd64 	bl	800c524 <HAL_RCC_GetHCLKFreq>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	4b14      	ldr	r3, [pc, #80]	@ (8007ab0 <HAL_InitTick+0x6c>)
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	4619      	mov	r1, r3
 8007a64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007a68:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a70:	4618      	mov	r0, r3
 8007a72:	f000 f9ca 	bl	8007e0a <HAL_SYSTICK_Config>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d10f      	bne.n	8007a9c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2b0f      	cmp	r3, #15
 8007a80:	d809      	bhi.n	8007a96 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007a82:	2200      	movs	r2, #0
 8007a84:	6879      	ldr	r1, [r7, #4]
 8007a86:	f04f 30ff 	mov.w	r0, #4294967295
 8007a8a:	f000 f988 	bl	8007d9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007a8e:	4a09      	ldr	r2, [pc, #36]	@ (8007ab4 <HAL_InitTick+0x70>)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6013      	str	r3, [r2, #0]
 8007a94:	e007      	b.n	8007aa6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	73fb      	strb	r3, [r7, #15]
 8007a9a:	e004      	b.n	8007aa6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	73fb      	strb	r3, [r7, #15]
 8007aa0:	e001      	b.n	8007aa6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	2000002c 	.word	0x2000002c
 8007ab4:	20000028 	.word	0x20000028

08007ab8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007abc:	4b06      	ldr	r3, [pc, #24]	@ (8007ad8 <HAL_IncTick+0x20>)
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	4b06      	ldr	r3, [pc, #24]	@ (8007adc <HAL_IncTick+0x24>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	4a04      	ldr	r2, [pc, #16]	@ (8007adc <HAL_IncTick+0x24>)
 8007aca:	6013      	str	r3, [r2, #0]
}
 8007acc:	bf00      	nop
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	2000002c 	.word	0x2000002c
 8007adc:	20000b4c 	.word	0x20000b4c

08007ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8007ae4:	4b03      	ldr	r3, [pc, #12]	@ (8007af4 <HAL_GetTick+0x14>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	20000b4c 	.word	0x20000b4c

08007af8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8007af8:	b480      	push	{r7}
 8007afa:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8007afc:	4b03      	ldr	r3, [pc, #12]	@ (8007b0c <HAL_GetTickPrio+0x14>)
 8007afe:	681b      	ldr	r3, [r3, #0]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	20000028 	.word	0x20000028

08007b10 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8007b10:	b480      	push	{r7}
 8007b12:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8007b14:	4b03      	ldr	r3, [pc, #12]	@ (8007b24 <HAL_GetTickFreq+0x14>)
 8007b16:	781b      	ldrb	r3, [r3, #0]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	2000002c 	.word	0x2000002c

08007b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f003 0307 	and.w	r3, r3, #7
 8007b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007b38:	4b0c      	ldr	r3, [pc, #48]	@ (8007b6c <__NVIC_SetPriorityGrouping+0x44>)
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007b44:	4013      	ands	r3, r2
 8007b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007b50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007b5a:	4a04      	ldr	r2, [pc, #16]	@ (8007b6c <__NVIC_SetPriorityGrouping+0x44>)
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	60d3      	str	r3, [r2, #12]
}
 8007b60:	bf00      	nop
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr
 8007b6c:	e000ed00 	.word	0xe000ed00

08007b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007b70:	b480      	push	{r7}
 8007b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b74:	4b04      	ldr	r3, [pc, #16]	@ (8007b88 <__NVIC_GetPriorityGrouping+0x18>)
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	0a1b      	lsrs	r3, r3, #8
 8007b7a:	f003 0307 	and.w	r3, r3, #7
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr
 8007b88:	e000ed00 	.word	0xe000ed00

08007b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	4603      	mov	r3, r0
 8007b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	db0b      	blt.n	8007bb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b9e:	79fb      	ldrb	r3, [r7, #7]
 8007ba0:	f003 021f 	and.w	r2, r3, #31
 8007ba4:	4907      	ldr	r1, [pc, #28]	@ (8007bc4 <__NVIC_EnableIRQ+0x38>)
 8007ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007baa:	095b      	lsrs	r3, r3, #5
 8007bac:	2001      	movs	r0, #1
 8007bae:	fa00 f202 	lsl.w	r2, r0, r2
 8007bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007bb6:	bf00      	nop
 8007bb8:	370c      	adds	r7, #12
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	e000e100 	.word	0xe000e100

08007bc8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	4603      	mov	r3, r0
 8007bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	db12      	blt.n	8007c00 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007bda:	79fb      	ldrb	r3, [r7, #7]
 8007bdc:	f003 021f 	and.w	r2, r3, #31
 8007be0:	490a      	ldr	r1, [pc, #40]	@ (8007c0c <__NVIC_DisableIRQ+0x44>)
 8007be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007be6:	095b      	lsrs	r3, r3, #5
 8007be8:	2001      	movs	r0, #1
 8007bea:	fa00 f202 	lsl.w	r2, r0, r2
 8007bee:	3320      	adds	r3, #32
 8007bf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007bf4:	f3bf 8f4f 	dsb	sy
}
 8007bf8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007bfa:	f3bf 8f6f 	isb	sy
}
 8007bfe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr
 8007c0c:	e000e100 	.word	0xe000e100

08007c10 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	4603      	mov	r3, r0
 8007c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	db0c      	blt.n	8007c3c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c22:	79fb      	ldrb	r3, [r7, #7]
 8007c24:	f003 021f 	and.w	r2, r3, #31
 8007c28:	4907      	ldr	r1, [pc, #28]	@ (8007c48 <__NVIC_SetPendingIRQ+0x38>)
 8007c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c2e:	095b      	lsrs	r3, r3, #5
 8007c30:	2001      	movs	r0, #1
 8007c32:	fa00 f202 	lsl.w	r2, r0, r2
 8007c36:	3340      	adds	r3, #64	@ 0x40
 8007c38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007c3c:	bf00      	nop
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr
 8007c48:	e000e100 	.word	0xe000e100

08007c4c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	4603      	mov	r3, r0
 8007c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	db0c      	blt.n	8007c78 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c5e:	79fb      	ldrb	r3, [r7, #7]
 8007c60:	f003 021f 	and.w	r2, r3, #31
 8007c64:	4907      	ldr	r1, [pc, #28]	@ (8007c84 <__NVIC_ClearPendingIRQ+0x38>)
 8007c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c6a:	095b      	lsrs	r3, r3, #5
 8007c6c:	2001      	movs	r0, #1
 8007c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8007c72:	3360      	adds	r3, #96	@ 0x60
 8007c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007c78:	bf00      	nop
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr
 8007c84:	e000e100 	.word	0xe000e100

08007c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	4603      	mov	r3, r0
 8007c90:	6039      	str	r1, [r7, #0]
 8007c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	db0a      	blt.n	8007cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	b2da      	uxtb	r2, r3
 8007ca0:	490c      	ldr	r1, [pc, #48]	@ (8007cd4 <__NVIC_SetPriority+0x4c>)
 8007ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ca6:	0112      	lsls	r2, r2, #4
 8007ca8:	b2d2      	uxtb	r2, r2
 8007caa:	440b      	add	r3, r1
 8007cac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007cb0:	e00a      	b.n	8007cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	b2da      	uxtb	r2, r3
 8007cb6:	4908      	ldr	r1, [pc, #32]	@ (8007cd8 <__NVIC_SetPriority+0x50>)
 8007cb8:	79fb      	ldrb	r3, [r7, #7]
 8007cba:	f003 030f 	and.w	r3, r3, #15
 8007cbe:	3b04      	subs	r3, #4
 8007cc0:	0112      	lsls	r2, r2, #4
 8007cc2:	b2d2      	uxtb	r2, r2
 8007cc4:	440b      	add	r3, r1
 8007cc6:	761a      	strb	r2, [r3, #24]
}
 8007cc8:	bf00      	nop
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr
 8007cd4:	e000e100 	.word	0xe000e100
 8007cd8:	e000ed00 	.word	0xe000ed00

08007cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b089      	sub	sp, #36	@ 0x24
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f003 0307 	and.w	r3, r3, #7
 8007cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	f1c3 0307 	rsb	r3, r3, #7
 8007cf6:	2b04      	cmp	r3, #4
 8007cf8:	bf28      	it	cs
 8007cfa:	2304      	movcs	r3, #4
 8007cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	3304      	adds	r3, #4
 8007d02:	2b06      	cmp	r3, #6
 8007d04:	d902      	bls.n	8007d0c <NVIC_EncodePriority+0x30>
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	3b03      	subs	r3, #3
 8007d0a:	e000      	b.n	8007d0e <NVIC_EncodePriority+0x32>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d10:	f04f 32ff 	mov.w	r2, #4294967295
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	fa02 f303 	lsl.w	r3, r2, r3
 8007d1a:	43da      	mvns	r2, r3
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	401a      	ands	r2, r3
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007d24:	f04f 31ff 	mov.w	r1, #4294967295
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d2e:	43d9      	mvns	r1, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d34:	4313      	orrs	r3, r2
         );
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3724      	adds	r7, #36	@ 0x24
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
	...

08007d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d54:	d301      	bcc.n	8007d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007d56:	2301      	movs	r3, #1
 8007d58:	e00f      	b.n	8007d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8007d84 <SysTick_Config+0x40>)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	3b01      	subs	r3, #1
 8007d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007d62:	210f      	movs	r1, #15
 8007d64:	f04f 30ff 	mov.w	r0, #4294967295
 8007d68:	f7ff ff8e 	bl	8007c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007d6c:	4b05      	ldr	r3, [pc, #20]	@ (8007d84 <SysTick_Config+0x40>)
 8007d6e:	2200      	movs	r2, #0
 8007d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007d72:	4b04      	ldr	r3, [pc, #16]	@ (8007d84 <SysTick_Config+0x40>)
 8007d74:	2207      	movs	r2, #7
 8007d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	e000e010 	.word	0xe000e010

08007d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f7ff fec9 	bl	8007b28 <__NVIC_SetPriorityGrouping>
}
 8007d96:	bf00      	nop
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b086      	sub	sp, #24
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	4603      	mov	r3, r0
 8007da6:	60b9      	str	r1, [r7, #8]
 8007da8:	607a      	str	r2, [r7, #4]
 8007daa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007dac:	f7ff fee0 	bl	8007b70 <__NVIC_GetPriorityGrouping>
 8007db0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	68b9      	ldr	r1, [r7, #8]
 8007db6:	6978      	ldr	r0, [r7, #20]
 8007db8:	f7ff ff90 	bl	8007cdc <NVIC_EncodePriority>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007dc2:	4611      	mov	r1, r2
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7ff ff5f 	bl	8007c88 <__NVIC_SetPriority>
}
 8007dca:	bf00      	nop
 8007dcc:	3718      	adds	r7, #24
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b082      	sub	sp, #8
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	4603      	mov	r3, r0
 8007dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7ff fed3 	bl	8007b8c <__NVIC_EnableIRQ>
}
 8007de6:	bf00      	nop
 8007de8:	3708      	adds	r7, #8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b082      	sub	sp, #8
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	4603      	mov	r3, r0
 8007df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7ff fee3 	bl	8007bc8 <__NVIC_DisableIRQ>
}
 8007e02:	bf00      	nop
 8007e04:	3708      	adds	r7, #8
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b082      	sub	sp, #8
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f7ff ff96 	bl	8007d44 <SysTick_Config>
 8007e18:	4603      	mov	r3, r0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b082      	sub	sp, #8
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	4603      	mov	r3, r0
 8007e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8007e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e30:	4618      	mov	r0, r3
 8007e32:	f7ff feed 	bl	8007c10 <__NVIC_SetPendingIRQ>
}
 8007e36:	bf00      	nop
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b082      	sub	sp, #8
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	4603      	mov	r3, r0
 8007e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8007e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7ff fefd 	bl	8007c4c <__NVIC_ClearPendingIRQ>
}
 8007e52:	bf00      	nop
 8007e54:	3708      	adds	r7, #8
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
	...

08007e5c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d101      	bne.n	8007e6e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e08e      	b.n	8007f8c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	461a      	mov	r2, r3
 8007e74:	4b47      	ldr	r3, [pc, #284]	@ (8007f94 <HAL_DMA_Init+0x138>)
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d80f      	bhi.n	8007e9a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	461a      	mov	r2, r3
 8007e80:	4b45      	ldr	r3, [pc, #276]	@ (8007f98 <HAL_DMA_Init+0x13c>)
 8007e82:	4413      	add	r3, r2
 8007e84:	4a45      	ldr	r2, [pc, #276]	@ (8007f9c <HAL_DMA_Init+0x140>)
 8007e86:	fba2 2303 	umull	r2, r3, r2, r3
 8007e8a:	091b      	lsrs	r3, r3, #4
 8007e8c:	009a      	lsls	r2, r3, #2
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a42      	ldr	r2, [pc, #264]	@ (8007fa0 <HAL_DMA_Init+0x144>)
 8007e96:	641a      	str	r2, [r3, #64]	@ 0x40
 8007e98:	e00e      	b.n	8007eb8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	4b40      	ldr	r3, [pc, #256]	@ (8007fa4 <HAL_DMA_Init+0x148>)
 8007ea2:	4413      	add	r3, r2
 8007ea4:	4a3d      	ldr	r2, [pc, #244]	@ (8007f9c <HAL_DMA_Init+0x140>)
 8007ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8007eaa:	091b      	lsrs	r3, r3, #4
 8007eac:	009a      	lsls	r2, r3, #2
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a3c      	ldr	r2, [pc, #240]	@ (8007fa8 <HAL_DMA_Init+0x14c>)
 8007eb6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2202      	movs	r2, #2
 8007ebc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007ece:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ed2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007edc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ee8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	699b      	ldr	r3, [r3, #24]
 8007eee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ef4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a1b      	ldr	r3, [r3, #32]
 8007efa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 fa16 	bl	800833c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f18:	d102      	bne.n	8007f20 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685a      	ldr	r2, [r3, #4]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f28:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007f2c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007f36:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d010      	beq.n	8007f62 <HAL_DMA_Init+0x106>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	2b04      	cmp	r3, #4
 8007f46:	d80c      	bhi.n	8007f62 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 fa35 	bl	80083b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f52:	2200      	movs	r2, #0
 8007f54:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007f5e:	605a      	str	r2, [r3, #4]
 8007f60:	e008      	b.n	8007f74 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3710      	adds	r7, #16
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	40020407 	.word	0x40020407
 8007f98:	bffdfff8 	.word	0xbffdfff8
 8007f9c:	cccccccd 	.word	0xcccccccd
 8007fa0:	40020000 	.word	0x40020000
 8007fa4:	bffdfbf8 	.word	0xbffdfbf8
 8007fa8:	40020400 	.word	0x40020400

08007fac <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b086      	sub	sp, #24
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]
 8007fb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d101      	bne.n	8007fcc <HAL_DMA_Start_IT+0x20>
 8007fc8:	2302      	movs	r3, #2
 8007fca:	e066      	b.n	800809a <HAL_DMA_Start_IT+0xee>
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d155      	bne.n	800808c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2200      	movs	r2, #0
 8007fec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f022 0201 	bic.w	r2, r2, #1
 8007ffc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	68b9      	ldr	r1, [r7, #8]
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f000 f95a 	bl	80082be <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800800e:	2b00      	cmp	r3, #0
 8008010:	d008      	beq.n	8008024 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f042 020e 	orr.w	r2, r2, #14
 8008020:	601a      	str	r2, [r3, #0]
 8008022:	e00f      	b.n	8008044 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f022 0204 	bic.w	r2, r2, #4
 8008032:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f042 020a 	orr.w	r2, r2, #10
 8008042:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800804e:	2b00      	cmp	r3, #0
 8008050:	d007      	beq.n	8008062 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800805c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008060:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008066:	2b00      	cmp	r3, #0
 8008068:	d007      	beq.n	800807a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008074:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008078:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f042 0201 	orr.w	r2, r2, #1
 8008088:	601a      	str	r2, [r3, #0]
 800808a:	e005      	b.n	8008098 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008094:	2302      	movs	r3, #2
 8008096:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008098:	7dfb      	ldrb	r3, [r7, #23]
}
 800809a:	4618      	mov	r0, r3
 800809c:	3718      	adds	r7, #24
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b084      	sub	sp, #16
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080aa:	2300      	movs	r3, #0
 80080ac:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d005      	beq.n	80080c6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2204      	movs	r2, #4
 80080be:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	73fb      	strb	r3, [r7, #15]
 80080c4:	e047      	b.n	8008156 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f022 020e 	bic.w	r2, r2, #14
 80080d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f022 0201 	bic.w	r2, r2, #1
 80080e4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80080f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080fa:	f003 021c 	and.w	r2, r3, #28
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008102:	2101      	movs	r1, #1
 8008104:	fa01 f202 	lsl.w	r2, r1, r2
 8008108:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008112:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00c      	beq.n	8008136 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008126:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800812a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008134:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800814a:	2b00      	cmp	r3, #0
 800814c:	d003      	beq.n	8008156 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	4798      	blx	r3
    }
  }
  return status;
 8008156:	7bfb      	ldrb	r3, [r7, #15]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800817c:	f003 031c 	and.w	r3, r3, #28
 8008180:	2204      	movs	r2, #4
 8008182:	409a      	lsls	r2, r3
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	4013      	ands	r3, r2
 8008188:	2b00      	cmp	r3, #0
 800818a:	d026      	beq.n	80081da <HAL_DMA_IRQHandler+0x7a>
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	f003 0304 	and.w	r3, r3, #4
 8008192:	2b00      	cmp	r3, #0
 8008194:	d021      	beq.n	80081da <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f003 0320 	and.w	r3, r3, #32
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d107      	bne.n	80081b4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f022 0204 	bic.w	r2, r2, #4
 80081b2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081b8:	f003 021c 	and.w	r2, r3, #28
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081c0:	2104      	movs	r1, #4
 80081c2:	fa01 f202 	lsl.w	r2, r1, r2
 80081c6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d071      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80081d8:	e06c      	b.n	80082b4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081de:	f003 031c 	and.w	r3, r3, #28
 80081e2:	2202      	movs	r2, #2
 80081e4:	409a      	lsls	r2, r3
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	4013      	ands	r3, r2
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d02e      	beq.n	800824c <HAL_DMA_IRQHandler+0xec>
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	f003 0302 	and.w	r3, r3, #2
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d029      	beq.n	800824c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f003 0320 	and.w	r3, r3, #32
 8008202:	2b00      	cmp	r3, #0
 8008204:	d10b      	bne.n	800821e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f022 020a 	bic.w	r2, r2, #10
 8008214:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2201      	movs	r2, #1
 800821a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008222:	f003 021c 	and.w	r2, r3, #28
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800822a:	2102      	movs	r1, #2
 800822c:	fa01 f202 	lsl.w	r2, r1, r2
 8008230:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800823e:	2b00      	cmp	r3, #0
 8008240:	d038      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800824a:	e033      	b.n	80082b4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008250:	f003 031c 	and.w	r3, r3, #28
 8008254:	2208      	movs	r2, #8
 8008256:	409a      	lsls	r2, r3
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	4013      	ands	r3, r2
 800825c:	2b00      	cmp	r3, #0
 800825e:	d02a      	beq.n	80082b6 <HAL_DMA_IRQHandler+0x156>
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	f003 0308 	and.w	r3, r3, #8
 8008266:	2b00      	cmp	r3, #0
 8008268:	d025      	beq.n	80082b6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f022 020e 	bic.w	r2, r2, #14
 8008278:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800827e:	f003 021c 	and.w	r2, r3, #28
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008286:	2101      	movs	r1, #1
 8008288:	fa01 f202 	lsl.w	r2, r1, r2
 800828c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2201      	movs	r2, #1
 8008292:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d004      	beq.n	80082b6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80082b4:	bf00      	nop
 80082b6:	bf00      	nop
}
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80082be:	b480      	push	{r7}
 80082c0:	b085      	sub	sp, #20
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	60f8      	str	r0, [r7, #12]
 80082c6:	60b9      	str	r1, [r7, #8]
 80082c8:	607a      	str	r2, [r7, #4]
 80082ca:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80082d4:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d004      	beq.n	80082e8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80082e6:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082ec:	f003 021c 	and.w	r2, r3, #28
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082f4:	2101      	movs	r1, #1
 80082f6:	fa01 f202 	lsl.w	r2, r1, r2
 80082fa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	683a      	ldr	r2, [r7, #0]
 8008302:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	2b10      	cmp	r3, #16
 800830a:	d108      	bne.n	800831e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	68ba      	ldr	r2, [r7, #8]
 800831a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800831c:	e007      	b.n	800832e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68ba      	ldr	r2, [r7, #8]
 8008324:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	60da      	str	r2, [r3, #12]
}
 800832e:	bf00      	nop
 8008330:	3714      	adds	r7, #20
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
	...

0800833c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	461a      	mov	r2, r3
 800834a:	4b17      	ldr	r3, [pc, #92]	@ (80083a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800834c:	429a      	cmp	r2, r3
 800834e:	d80a      	bhi.n	8008366 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008354:	089b      	lsrs	r3, r3, #2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800835c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	6493      	str	r3, [r2, #72]	@ 0x48
 8008364:	e007      	b.n	8008376 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800836a:	089b      	lsrs	r3, r3, #2
 800836c:	009a      	lsls	r2, r3, #2
 800836e:	4b0f      	ldr	r3, [pc, #60]	@ (80083ac <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008370:	4413      	add	r3, r2
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	b2db      	uxtb	r3, r3
 800837c:	3b08      	subs	r3, #8
 800837e:	4a0c      	ldr	r2, [pc, #48]	@ (80083b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008380:	fba2 2303 	umull	r2, r3, r2, r3
 8008384:	091b      	lsrs	r3, r3, #4
 8008386:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a0a      	ldr	r2, [pc, #40]	@ (80083b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800838c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f003 031f 	and.w	r3, r3, #31
 8008394:	2201      	movs	r2, #1
 8008396:	409a      	lsls	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800839c:	bf00      	nop
 800839e:	3714      	adds	r7, #20
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr
 80083a8:	40020407 	.word	0x40020407
 80083ac:	4002081c 	.word	0x4002081c
 80083b0:	cccccccd 	.word	0xcccccccd
 80083b4:	40020880 	.word	0x40020880

080083b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80083c8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80083ca:	68fa      	ldr	r2, [r7, #12]
 80083cc:	4b0b      	ldr	r3, [pc, #44]	@ (80083fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80083ce:	4413      	add	r3, r2
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	461a      	mov	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a09      	ldr	r2, [pc, #36]	@ (8008400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80083dc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	3b01      	subs	r3, #1
 80083e2:	f003 0303 	and.w	r3, r3, #3
 80083e6:	2201      	movs	r2, #1
 80083e8:	409a      	lsls	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80083ee:	bf00      	nop
 80083f0:	3714      	adds	r7, #20
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	1000823f 	.word	0x1000823f
 8008400:	40020940 	.word	0x40020940

08008404 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008404:	b480      	push	{r7}
 8008406:	b087      	sub	sp, #28
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800840e:	2300      	movs	r3, #0
 8008410:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008412:	e14c      	b.n	80086ae <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	2101      	movs	r1, #1
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	fa01 f303 	lsl.w	r3, r1, r3
 8008420:	4013      	ands	r3, r2
 8008422:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2b00      	cmp	r3, #0
 8008428:	f000 813e 	beq.w	80086a8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	f003 0303 	and.w	r3, r3, #3
 8008434:	2b01      	cmp	r3, #1
 8008436:	d005      	beq.n	8008444 <HAL_GPIO_Init+0x40>
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	f003 0303 	and.w	r3, r3, #3
 8008440:	2b02      	cmp	r3, #2
 8008442:	d130      	bne.n	80084a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	005b      	lsls	r3, r3, #1
 800844e:	2203      	movs	r2, #3
 8008450:	fa02 f303 	lsl.w	r3, r2, r3
 8008454:	43db      	mvns	r3, r3
 8008456:	693a      	ldr	r2, [r7, #16]
 8008458:	4013      	ands	r3, r2
 800845a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	68da      	ldr	r2, [r3, #12]
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	005b      	lsls	r3, r3, #1
 8008464:	fa02 f303 	lsl.w	r3, r2, r3
 8008468:	693a      	ldr	r2, [r7, #16]
 800846a:	4313      	orrs	r3, r2
 800846c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	693a      	ldr	r2, [r7, #16]
 8008472:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800847a:	2201      	movs	r2, #1
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	fa02 f303 	lsl.w	r3, r2, r3
 8008482:	43db      	mvns	r3, r3
 8008484:	693a      	ldr	r2, [r7, #16]
 8008486:	4013      	ands	r3, r2
 8008488:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	091b      	lsrs	r3, r3, #4
 8008490:	f003 0201 	and.w	r2, r3, #1
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	fa02 f303 	lsl.w	r3, r2, r3
 800849a:	693a      	ldr	r2, [r7, #16]
 800849c:	4313      	orrs	r3, r2
 800849e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	693a      	ldr	r2, [r7, #16]
 80084a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	f003 0303 	and.w	r3, r3, #3
 80084ae:	2b03      	cmp	r3, #3
 80084b0:	d017      	beq.n	80084e2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	005b      	lsls	r3, r3, #1
 80084bc:	2203      	movs	r2, #3
 80084be:	fa02 f303 	lsl.w	r3, r2, r3
 80084c2:	43db      	mvns	r3, r3
 80084c4:	693a      	ldr	r2, [r7, #16]
 80084c6:	4013      	ands	r3, r2
 80084c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	689a      	ldr	r2, [r3, #8]
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	005b      	lsls	r3, r3, #1
 80084d2:	fa02 f303 	lsl.w	r3, r2, r3
 80084d6:	693a      	ldr	r2, [r7, #16]
 80084d8:	4313      	orrs	r3, r2
 80084da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	693a      	ldr	r2, [r7, #16]
 80084e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	f003 0303 	and.w	r3, r3, #3
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d123      	bne.n	8008536 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	08da      	lsrs	r2, r3, #3
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	3208      	adds	r2, #8
 80084f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	f003 0307 	and.w	r3, r3, #7
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	220f      	movs	r2, #15
 8008506:	fa02 f303 	lsl.w	r3, r2, r3
 800850a:	43db      	mvns	r3, r3
 800850c:	693a      	ldr	r2, [r7, #16]
 800850e:	4013      	ands	r3, r2
 8008510:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	691a      	ldr	r2, [r3, #16]
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	f003 0307 	and.w	r3, r3, #7
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	fa02 f303 	lsl.w	r3, r2, r3
 8008522:	693a      	ldr	r2, [r7, #16]
 8008524:	4313      	orrs	r3, r2
 8008526:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	08da      	lsrs	r2, r3, #3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	3208      	adds	r2, #8
 8008530:	6939      	ldr	r1, [r7, #16]
 8008532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	005b      	lsls	r3, r3, #1
 8008540:	2203      	movs	r2, #3
 8008542:	fa02 f303 	lsl.w	r3, r2, r3
 8008546:	43db      	mvns	r3, r3
 8008548:	693a      	ldr	r2, [r7, #16]
 800854a:	4013      	ands	r3, r2
 800854c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	f003 0203 	and.w	r2, r3, #3
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	005b      	lsls	r3, r3, #1
 800855a:	fa02 f303 	lsl.w	r3, r2, r3
 800855e:	693a      	ldr	r2, [r7, #16]
 8008560:	4313      	orrs	r3, r2
 8008562:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	693a      	ldr	r2, [r7, #16]
 8008568:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008572:	2b00      	cmp	r3, #0
 8008574:	f000 8098 	beq.w	80086a8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8008578:	4a54      	ldr	r2, [pc, #336]	@ (80086cc <HAL_GPIO_Init+0x2c8>)
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	089b      	lsrs	r3, r3, #2
 800857e:	3302      	adds	r3, #2
 8008580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008584:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	f003 0303 	and.w	r3, r3, #3
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	220f      	movs	r2, #15
 8008590:	fa02 f303 	lsl.w	r3, r2, r3
 8008594:	43db      	mvns	r3, r3
 8008596:	693a      	ldr	r2, [r7, #16]
 8008598:	4013      	ands	r3, r2
 800859a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80085a2:	d019      	beq.n	80085d8 <HAL_GPIO_Init+0x1d4>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	4a4a      	ldr	r2, [pc, #296]	@ (80086d0 <HAL_GPIO_Init+0x2cc>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d013      	beq.n	80085d4 <HAL_GPIO_Init+0x1d0>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4a49      	ldr	r2, [pc, #292]	@ (80086d4 <HAL_GPIO_Init+0x2d0>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d00d      	beq.n	80085d0 <HAL_GPIO_Init+0x1cc>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a48      	ldr	r2, [pc, #288]	@ (80086d8 <HAL_GPIO_Init+0x2d4>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d007      	beq.n	80085cc <HAL_GPIO_Init+0x1c8>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4a47      	ldr	r2, [pc, #284]	@ (80086dc <HAL_GPIO_Init+0x2d8>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d101      	bne.n	80085c8 <HAL_GPIO_Init+0x1c4>
 80085c4:	2304      	movs	r3, #4
 80085c6:	e008      	b.n	80085da <HAL_GPIO_Init+0x1d6>
 80085c8:	2307      	movs	r3, #7
 80085ca:	e006      	b.n	80085da <HAL_GPIO_Init+0x1d6>
 80085cc:	2303      	movs	r3, #3
 80085ce:	e004      	b.n	80085da <HAL_GPIO_Init+0x1d6>
 80085d0:	2302      	movs	r3, #2
 80085d2:	e002      	b.n	80085da <HAL_GPIO_Init+0x1d6>
 80085d4:	2301      	movs	r3, #1
 80085d6:	e000      	b.n	80085da <HAL_GPIO_Init+0x1d6>
 80085d8:	2300      	movs	r3, #0
 80085da:	697a      	ldr	r2, [r7, #20]
 80085dc:	f002 0203 	and.w	r2, r2, #3
 80085e0:	0092      	lsls	r2, r2, #2
 80085e2:	4093      	lsls	r3, r2
 80085e4:	693a      	ldr	r2, [r7, #16]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80085ea:	4938      	ldr	r1, [pc, #224]	@ (80086cc <HAL_GPIO_Init+0x2c8>)
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	089b      	lsrs	r3, r3, #2
 80085f0:	3302      	adds	r3, #2
 80085f2:	693a      	ldr	r2, [r7, #16]
 80085f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80085f8:	4b39      	ldr	r3, [pc, #228]	@ (80086e0 <HAL_GPIO_Init+0x2dc>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	43db      	mvns	r3, r3
 8008602:	693a      	ldr	r2, [r7, #16]
 8008604:	4013      	ands	r3, r2
 8008606:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008610:	2b00      	cmp	r3, #0
 8008612:	d003      	beq.n	800861c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8008614:	693a      	ldr	r2, [r7, #16]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	4313      	orrs	r3, r2
 800861a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800861c:	4a30      	ldr	r2, [pc, #192]	@ (80086e0 <HAL_GPIO_Init+0x2dc>)
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008622:	4b2f      	ldr	r3, [pc, #188]	@ (80086e0 <HAL_GPIO_Init+0x2dc>)
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	43db      	mvns	r3, r3
 800862c:	693a      	ldr	r2, [r7, #16]
 800862e:	4013      	ands	r3, r2
 8008630:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800863a:	2b00      	cmp	r3, #0
 800863c:	d003      	beq.n	8008646 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800863e:	693a      	ldr	r2, [r7, #16]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	4313      	orrs	r3, r2
 8008644:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008646:	4a26      	ldr	r2, [pc, #152]	@ (80086e0 <HAL_GPIO_Init+0x2dc>)
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800864c:	4b24      	ldr	r3, [pc, #144]	@ (80086e0 <HAL_GPIO_Init+0x2dc>)
 800864e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008652:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	43db      	mvns	r3, r3
 8008658:	693a      	ldr	r2, [r7, #16]
 800865a:	4013      	ands	r3, r2
 800865c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008666:	2b00      	cmp	r3, #0
 8008668:	d003      	beq.n	8008672 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800866a:	693a      	ldr	r2, [r7, #16]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	4313      	orrs	r3, r2
 8008670:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008672:	4a1b      	ldr	r2, [pc, #108]	@ (80086e0 <HAL_GPIO_Init+0x2dc>)
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800867a:	4b19      	ldr	r3, [pc, #100]	@ (80086e0 <HAL_GPIO_Init+0x2dc>)
 800867c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008680:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	43db      	mvns	r3, r3
 8008686:	693a      	ldr	r2, [r7, #16]
 8008688:	4013      	ands	r3, r2
 800868a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008694:	2b00      	cmp	r3, #0
 8008696:	d003      	beq.n	80086a0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8008698:	693a      	ldr	r2, [r7, #16]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	4313      	orrs	r3, r2
 800869e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80086a0:	4a0f      	ldr	r2, [pc, #60]	@ (80086e0 <HAL_GPIO_Init+0x2dc>)
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	3301      	adds	r3, #1
 80086ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	fa22 f303 	lsr.w	r3, r2, r3
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	f47f aeab 	bne.w	8008414 <HAL_GPIO_Init+0x10>
  }
}
 80086be:	bf00      	nop
 80086c0:	bf00      	nop
 80086c2:	371c      	adds	r7, #28
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr
 80086cc:	40010000 	.word	0x40010000
 80086d0:	48000400 	.word	0x48000400
 80086d4:	48000800 	.word	0x48000800
 80086d8:	48000c00 	.word	0x48000c00
 80086dc:	48001000 	.word	0x48001000
 80086e0:	58000800 	.word	0x58000800

080086e4 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b085      	sub	sp, #20
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	460b      	mov	r3, r1
 80086ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	691a      	ldr	r2, [r3, #16]
 80086f4:	887b      	ldrh	r3, [r7, #2]
 80086f6:	4013      	ands	r3, r2
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d002      	beq.n	8008702 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80086fc:	2301      	movs	r3, #1
 80086fe:	73fb      	strb	r3, [r7, #15]
 8008700:	e001      	b.n	8008706 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008702:	2300      	movs	r3, #0
 8008704:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008706:	7bfb      	ldrb	r3, [r7, #15]
}
 8008708:	4618      	mov	r0, r3
 800870a:	3714      	adds	r7, #20
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	460b      	mov	r3, r1
 800871e:	807b      	strh	r3, [r7, #2]
 8008720:	4613      	mov	r3, r2
 8008722:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008724:	787b      	ldrb	r3, [r7, #1]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d003      	beq.n	8008732 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800872a:	887a      	ldrh	r2, [r7, #2]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008730:	e002      	b.n	8008738 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008732:	887a      	ldrh	r2, [r7, #2]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008738:	bf00      	nop
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800874a:	4b0a      	ldr	r3, [pc, #40]	@ (8008774 <HAL_HSEM_IRQHandler+0x30>)
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8008750:	4b08      	ldr	r3, [pc, #32]	@ (8008774 <HAL_HSEM_IRQHandler+0x30>)
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	43db      	mvns	r3, r3
 8008758:	4906      	ldr	r1, [pc, #24]	@ (8008774 <HAL_HSEM_IRQHandler+0x30>)
 800875a:	4013      	ands	r3, r2
 800875c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800875e:	4a05      	ldr	r2, [pc, #20]	@ (8008774 <HAL_HSEM_IRQHandler+0x30>)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 f807 	bl	8008778 <HAL_HSEM_FreeCallback>
}
 800876a:	bf00      	nop
 800876c:	3708      	adds	r7, #8
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	58001500 	.word	0x58001500

08008778 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d101      	bne.n	800879e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	e08d      	b.n	80088ba <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d106      	bne.n	80087b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f7fd fe34 	bl	8006420 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2224      	movs	r2, #36	@ 0x24
 80087bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f022 0201 	bic.w	r2, r2, #1
 80087ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	685a      	ldr	r2, [r3, #4]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80087dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	689a      	ldr	r2, [r3, #8]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80087ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d107      	bne.n	8008806 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	689a      	ldr	r2, [r3, #8]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008802:	609a      	str	r2, [r3, #8]
 8008804:	e006      	b.n	8008814 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	689a      	ldr	r2, [r3, #8]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008812:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	2b02      	cmp	r3, #2
 800881a:	d108      	bne.n	800882e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	685a      	ldr	r2, [r3, #4]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800882a:	605a      	str	r2, [r3, #4]
 800882c:	e007      	b.n	800883e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	685a      	ldr	r2, [r3, #4]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800883c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	6812      	ldr	r2, [r2, #0]
 8008848:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800884c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008850:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	68da      	ldr	r2, [r3, #12]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008860:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	691a      	ldr	r2, [r3, #16]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	695b      	ldr	r3, [r3, #20]
 800886a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	699b      	ldr	r3, [r3, #24]
 8008872:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	430a      	orrs	r2, r1
 800887a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	69d9      	ldr	r1, [r3, #28]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a1a      	ldr	r2, [r3, #32]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	430a      	orrs	r2, r1
 800888a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f042 0201 	orr.w	r2, r2, #1
 800889a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2220      	movs	r2, #32
 80088a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3708      	adds	r7, #8
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
	...

080088c4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b088      	sub	sp, #32
 80088c8:	af02      	add	r7, sp, #8
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	607a      	str	r2, [r7, #4]
 80088ce:	461a      	mov	r2, r3
 80088d0:	460b      	mov	r3, r1
 80088d2:	817b      	strh	r3, [r7, #10]
 80088d4:	4613      	mov	r3, r2
 80088d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	2b20      	cmp	r3, #32
 80088e2:	f040 80fd 	bne.w	8008ae0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d101      	bne.n	80088f4 <HAL_I2C_Master_Transmit+0x30>
 80088f0:	2302      	movs	r3, #2
 80088f2:	e0f6      	b.n	8008ae2 <HAL_I2C_Master_Transmit+0x21e>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80088fc:	f7ff f8f0 	bl	8007ae0 <HAL_GetTick>
 8008900:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	9300      	str	r3, [sp, #0]
 8008906:	2319      	movs	r3, #25
 8008908:	2201      	movs	r2, #1
 800890a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f000 fce0 	bl	80092d4 <I2C_WaitOnFlagUntilTimeout>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d001      	beq.n	800891e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e0e1      	b.n	8008ae2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2221      	movs	r2, #33	@ 0x21
 8008922:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2210      	movs	r2, #16
 800892a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	893a      	ldrh	r2, [r7, #8]
 800893e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2200      	movs	r2, #0
 8008944:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800894a:	b29b      	uxth	r3, r3
 800894c:	2bff      	cmp	r3, #255	@ 0xff
 800894e:	d906      	bls.n	800895e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	22ff      	movs	r2, #255	@ 0xff
 8008954:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8008956:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800895a:	617b      	str	r3, [r7, #20]
 800895c:	e007      	b.n	800896e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008962:	b29a      	uxth	r2, r3
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008968:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800896c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008972:	2b00      	cmp	r3, #0
 8008974:	d024      	beq.n	80089c0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800897a:	781a      	ldrb	r2, [r3, #0]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008986:	1c5a      	adds	r2, r3, #1
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008990:	b29b      	uxth	r3, r3
 8008992:	3b01      	subs	r3, #1
 8008994:	b29a      	uxth	r2, r3
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800899e:	3b01      	subs	r3, #1
 80089a0:	b29a      	uxth	r2, r3
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	3301      	adds	r3, #1
 80089ae:	b2da      	uxtb	r2, r3
 80089b0:	8979      	ldrh	r1, [r7, #10]
 80089b2:	4b4e      	ldr	r3, [pc, #312]	@ (8008aec <HAL_I2C_Master_Transmit+0x228>)
 80089b4:	9300      	str	r3, [sp, #0]
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	f000 fedb 	bl	8009774 <I2C_TransferConfig>
 80089be:	e066      	b.n	8008a8e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089c4:	b2da      	uxtb	r2, r3
 80089c6:	8979      	ldrh	r1, [r7, #10]
 80089c8:	4b48      	ldr	r3, [pc, #288]	@ (8008aec <HAL_I2C_Master_Transmit+0x228>)
 80089ca:	9300      	str	r3, [sp, #0]
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f000 fed0 	bl	8009774 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80089d4:	e05b      	b.n	8008a8e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089d6:	693a      	ldr	r2, [r7, #16]
 80089d8:	6a39      	ldr	r1, [r7, #32]
 80089da:	68f8      	ldr	r0, [r7, #12]
 80089dc:	f000 fcd3 	bl	8009386 <I2C_WaitOnTXISFlagUntilTimeout>
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d001      	beq.n	80089ea <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e07b      	b.n	8008ae2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ee:	781a      	ldrb	r2, [r3, #0]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089fa:	1c5a      	adds	r2, r3, #1
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	3b01      	subs	r3, #1
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a12:	3b01      	subs	r3, #1
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d034      	beq.n	8008a8e <HAL_I2C_Master_Transmit+0x1ca>
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d130      	bne.n	8008a8e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	9300      	str	r3, [sp, #0]
 8008a30:	6a3b      	ldr	r3, [r7, #32]
 8008a32:	2200      	movs	r2, #0
 8008a34:	2180      	movs	r1, #128	@ 0x80
 8008a36:	68f8      	ldr	r0, [r7, #12]
 8008a38:	f000 fc4c 	bl	80092d4 <I2C_WaitOnFlagUntilTimeout>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d001      	beq.n	8008a46 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e04d      	b.n	8008ae2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	2bff      	cmp	r3, #255	@ 0xff
 8008a4e:	d90e      	bls.n	8008a6e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	22ff      	movs	r2, #255	@ 0xff
 8008a54:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a5a:	b2da      	uxtb	r2, r3
 8008a5c:	8979      	ldrh	r1, [r7, #10]
 8008a5e:	2300      	movs	r3, #0
 8008a60:	9300      	str	r3, [sp, #0]
 8008a62:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f000 fe84 	bl	8009774 <I2C_TransferConfig>
 8008a6c:	e00f      	b.n	8008a8e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a72:	b29a      	uxth	r2, r3
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a7c:	b2da      	uxtb	r2, r3
 8008a7e:	8979      	ldrh	r1, [r7, #10]
 8008a80:	2300      	movs	r3, #0
 8008a82:	9300      	str	r3, [sp, #0]
 8008a84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f000 fe73 	bl	8009774 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d19e      	bne.n	80089d6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a98:	693a      	ldr	r2, [r7, #16]
 8008a9a:	6a39      	ldr	r1, [r7, #32]
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f000 fcb9 	bl	8009414 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d001      	beq.n	8008aac <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e01a      	b.n	8008ae2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2220      	movs	r2, #32
 8008ab2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	6859      	ldr	r1, [r3, #4]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	4b0c      	ldr	r3, [pc, #48]	@ (8008af0 <HAL_I2C_Master_Transmit+0x22c>)
 8008ac0:	400b      	ands	r3, r1
 8008ac2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2220      	movs	r2, #32
 8008ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008adc:	2300      	movs	r3, #0
 8008ade:	e000      	b.n	8008ae2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8008ae0:	2302      	movs	r3, #2
  }
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3718      	adds	r7, #24
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	80002000 	.word	0x80002000
 8008af0:	fe00e800 	.word	0xfe00e800

08008af4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b088      	sub	sp, #32
 8008af8:	af02      	add	r7, sp, #8
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	607a      	str	r2, [r7, #4]
 8008afe:	461a      	mov	r2, r3
 8008b00:	460b      	mov	r3, r1
 8008b02:	817b      	strh	r3, [r7, #10]
 8008b04:	4613      	mov	r3, r2
 8008b06:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	2b20      	cmp	r3, #32
 8008b12:	f040 80db 	bne.w	8008ccc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d101      	bne.n	8008b24 <HAL_I2C_Master_Receive+0x30>
 8008b20:	2302      	movs	r3, #2
 8008b22:	e0d4      	b.n	8008cce <HAL_I2C_Master_Receive+0x1da>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2201      	movs	r2, #1
 8008b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008b2c:	f7fe ffd8 	bl	8007ae0 <HAL_GetTick>
 8008b30:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	9300      	str	r3, [sp, #0]
 8008b36:	2319      	movs	r3, #25
 8008b38:	2201      	movs	r2, #1
 8008b3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008b3e:	68f8      	ldr	r0, [r7, #12]
 8008b40:	f000 fbc8 	bl	80092d4 <I2C_WaitOnFlagUntilTimeout>
 8008b44:	4603      	mov	r3, r0
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d001      	beq.n	8008b4e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e0bf      	b.n	8008cce <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2222      	movs	r2, #34	@ 0x22
 8008b52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2210      	movs	r2, #16
 8008b5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2200      	movs	r2, #0
 8008b62:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	893a      	ldrh	r2, [r7, #8]
 8008b6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2200      	movs	r2, #0
 8008b74:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	2bff      	cmp	r3, #255	@ 0xff
 8008b7e:	d90e      	bls.n	8008b9e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	22ff      	movs	r2, #255	@ 0xff
 8008b84:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b8a:	b2da      	uxtb	r2, r3
 8008b8c:	8979      	ldrh	r1, [r7, #10]
 8008b8e:	4b52      	ldr	r3, [pc, #328]	@ (8008cd8 <HAL_I2C_Master_Receive+0x1e4>)
 8008b90:	9300      	str	r3, [sp, #0]
 8008b92:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	f000 fdec 	bl	8009774 <I2C_TransferConfig>
 8008b9c:	e06d      	b.n	8008c7a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bac:	b2da      	uxtb	r2, r3
 8008bae:	8979      	ldrh	r1, [r7, #10]
 8008bb0:	4b49      	ldr	r3, [pc, #292]	@ (8008cd8 <HAL_I2C_Master_Receive+0x1e4>)
 8008bb2:	9300      	str	r3, [sp, #0]
 8008bb4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008bb8:	68f8      	ldr	r0, [r7, #12]
 8008bba:	f000 fddb 	bl	8009774 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8008bbe:	e05c      	b.n	8008c7a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bc0:	697a      	ldr	r2, [r7, #20]
 8008bc2:	6a39      	ldr	r1, [r7, #32]
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f000 fc69 	bl	800949c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d001      	beq.n	8008bd4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e07c      	b.n	8008cce <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bde:	b2d2      	uxtb	r2, r2
 8008be0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008be6:	1c5a      	adds	r2, r3, #1
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d034      	beq.n	8008c7a <HAL_I2C_Master_Receive+0x186>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d130      	bne.n	8008c7a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	9300      	str	r3, [sp, #0]
 8008c1c:	6a3b      	ldr	r3, [r7, #32]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	2180      	movs	r1, #128	@ 0x80
 8008c22:	68f8      	ldr	r0, [r7, #12]
 8008c24:	f000 fb56 	bl	80092d4 <I2C_WaitOnFlagUntilTimeout>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d001      	beq.n	8008c32 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e04d      	b.n	8008cce <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	2bff      	cmp	r3, #255	@ 0xff
 8008c3a:	d90e      	bls.n	8008c5a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	22ff      	movs	r2, #255	@ 0xff
 8008c40:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c46:	b2da      	uxtb	r2, r3
 8008c48:	8979      	ldrh	r1, [r7, #10]
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	9300      	str	r3, [sp, #0]
 8008c4e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008c52:	68f8      	ldr	r0, [r7, #12]
 8008c54:	f000 fd8e 	bl	8009774 <I2C_TransferConfig>
 8008c58:	e00f      	b.n	8008c7a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c5e:	b29a      	uxth	r2, r3
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c68:	b2da      	uxtb	r2, r3
 8008c6a:	8979      	ldrh	r1, [r7, #10]
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	9300      	str	r3, [sp, #0]
 8008c70:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f000 fd7d 	bl	8009774 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d19d      	bne.n	8008bc0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c84:	697a      	ldr	r2, [r7, #20]
 8008c86:	6a39      	ldr	r1, [r7, #32]
 8008c88:	68f8      	ldr	r0, [r7, #12]
 8008c8a:	f000 fbc3 	bl	8009414 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d001      	beq.n	8008c98 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8008c94:	2301      	movs	r3, #1
 8008c96:	e01a      	b.n	8008cce <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	2220      	movs	r2, #32
 8008c9e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	6859      	ldr	r1, [r3, #4]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	4b0c      	ldr	r3, [pc, #48]	@ (8008cdc <HAL_I2C_Master_Receive+0x1e8>)
 8008cac:	400b      	ands	r3, r1
 8008cae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2220      	movs	r2, #32
 8008cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	e000      	b.n	8008cce <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008ccc:	2302      	movs	r3, #2
  }
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3718      	adds	r7, #24
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	80002400 	.word	0x80002400
 8008cdc:	fe00e800 	.word	0xfe00e800

08008ce0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b088      	sub	sp, #32
 8008ce4:	af02      	add	r7, sp, #8
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	4608      	mov	r0, r1
 8008cea:	4611      	mov	r1, r2
 8008cec:	461a      	mov	r2, r3
 8008cee:	4603      	mov	r3, r0
 8008cf0:	817b      	strh	r3, [r7, #10]
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	813b      	strh	r3, [r7, #8]
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	2b20      	cmp	r3, #32
 8008d04:	f040 80f9 	bne.w	8008efa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d08:	6a3b      	ldr	r3, [r7, #32]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d002      	beq.n	8008d14 <HAL_I2C_Mem_Write+0x34>
 8008d0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d105      	bne.n	8008d20 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d1a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e0ed      	b.n	8008efc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d101      	bne.n	8008d2e <HAL_I2C_Mem_Write+0x4e>
 8008d2a:	2302      	movs	r3, #2
 8008d2c:	e0e6      	b.n	8008efc <HAL_I2C_Mem_Write+0x21c>
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2201      	movs	r2, #1
 8008d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008d36:	f7fe fed3 	bl	8007ae0 <HAL_GetTick>
 8008d3a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	9300      	str	r3, [sp, #0]
 8008d40:	2319      	movs	r3, #25
 8008d42:	2201      	movs	r2, #1
 8008d44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008d48:	68f8      	ldr	r0, [r7, #12]
 8008d4a:	f000 fac3 	bl	80092d4 <I2C_WaitOnFlagUntilTimeout>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d001      	beq.n	8008d58 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008d54:	2301      	movs	r3, #1
 8008d56:	e0d1      	b.n	8008efc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2221      	movs	r2, #33	@ 0x21
 8008d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2240      	movs	r2, #64	@ 0x40
 8008d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	6a3a      	ldr	r2, [r7, #32]
 8008d72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008d78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008d80:	88f8      	ldrh	r0, [r7, #6]
 8008d82:	893a      	ldrh	r2, [r7, #8]
 8008d84:	8979      	ldrh	r1, [r7, #10]
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	9301      	str	r3, [sp, #4]
 8008d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d8c:	9300      	str	r3, [sp, #0]
 8008d8e:	4603      	mov	r3, r0
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f000 f9d3 	bl	800913c <I2C_RequestMemoryWrite>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d005      	beq.n	8008da8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	e0a9      	b.n	8008efc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	2bff      	cmp	r3, #255	@ 0xff
 8008db0:	d90e      	bls.n	8008dd0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	22ff      	movs	r2, #255	@ 0xff
 8008db6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008dbc:	b2da      	uxtb	r2, r3
 8008dbe:	8979      	ldrh	r1, [r7, #10]
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	9300      	str	r3, [sp, #0]
 8008dc4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f000 fcd3 	bl	8009774 <I2C_TransferConfig>
 8008dce:	e00f      	b.n	8008df0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dd4:	b29a      	uxth	r2, r3
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008dde:	b2da      	uxtb	r2, r3
 8008de0:	8979      	ldrh	r1, [r7, #10]
 8008de2:	2300      	movs	r3, #0
 8008de4:	9300      	str	r3, [sp, #0]
 8008de6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f000 fcc2 	bl	8009774 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008df0:	697a      	ldr	r2, [r7, #20]
 8008df2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008df4:	68f8      	ldr	r0, [r7, #12]
 8008df6:	f000 fac6 	bl	8009386 <I2C_WaitOnTXISFlagUntilTimeout>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d001      	beq.n	8008e04 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	e07b      	b.n	8008efc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e08:	781a      	ldrb	r2, [r3, #0]
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e14:	1c5a      	adds	r2, r3, #1
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	3b01      	subs	r3, #1
 8008e22:	b29a      	uxth	r2, r3
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	b29a      	uxth	r2, r3
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d034      	beq.n	8008ea8 <HAL_I2C_Mem_Write+0x1c8>
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d130      	bne.n	8008ea8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	9300      	str	r3, [sp, #0]
 8008e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	2180      	movs	r1, #128	@ 0x80
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f000 fa3f 	bl	80092d4 <I2C_WaitOnFlagUntilTimeout>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d001      	beq.n	8008e60 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	e04d      	b.n	8008efc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	2bff      	cmp	r3, #255	@ 0xff
 8008e68:	d90e      	bls.n	8008e88 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	22ff      	movs	r2, #255	@ 0xff
 8008e6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e74:	b2da      	uxtb	r2, r3
 8008e76:	8979      	ldrh	r1, [r7, #10]
 8008e78:	2300      	movs	r3, #0
 8008e7a:	9300      	str	r3, [sp, #0]
 8008e7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008e80:	68f8      	ldr	r0, [r7, #12]
 8008e82:	f000 fc77 	bl	8009774 <I2C_TransferConfig>
 8008e86:	e00f      	b.n	8008ea8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e8c:	b29a      	uxth	r2, r3
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e96:	b2da      	uxtb	r2, r3
 8008e98:	8979      	ldrh	r1, [r7, #10]
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	9300      	str	r3, [sp, #0]
 8008e9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008ea2:	68f8      	ldr	r0, [r7, #12]
 8008ea4:	f000 fc66 	bl	8009774 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d19e      	bne.n	8008df0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008eb2:	697a      	ldr	r2, [r7, #20]
 8008eb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008eb6:	68f8      	ldr	r0, [r7, #12]
 8008eb8:	f000 faac 	bl	8009414 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d001      	beq.n	8008ec6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e01a      	b.n	8008efc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2220      	movs	r2, #32
 8008ecc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	6859      	ldr	r1, [r3, #4]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8008f04 <HAL_I2C_Mem_Write+0x224>)
 8008eda:	400b      	ands	r3, r1
 8008edc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2220      	movs	r2, #32
 8008ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	e000      	b.n	8008efc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008efa:	2302      	movs	r3, #2
  }
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3718      	adds	r7, #24
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	fe00e800 	.word	0xfe00e800

08008f08 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b088      	sub	sp, #32
 8008f0c:	af02      	add	r7, sp, #8
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	4608      	mov	r0, r1
 8008f12:	4611      	mov	r1, r2
 8008f14:	461a      	mov	r2, r3
 8008f16:	4603      	mov	r3, r0
 8008f18:	817b      	strh	r3, [r7, #10]
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	813b      	strh	r3, [r7, #8]
 8008f1e:	4613      	mov	r3, r2
 8008f20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	2b20      	cmp	r3, #32
 8008f2c:	f040 80fd 	bne.w	800912a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f30:	6a3b      	ldr	r3, [r7, #32]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d002      	beq.n	8008f3c <HAL_I2C_Mem_Read+0x34>
 8008f36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d105      	bne.n	8008f48 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f42:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	e0f1      	b.n	800912c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d101      	bne.n	8008f56 <HAL_I2C_Mem_Read+0x4e>
 8008f52:	2302      	movs	r3, #2
 8008f54:	e0ea      	b.n	800912c <HAL_I2C_Mem_Read+0x224>
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008f5e:	f7fe fdbf 	bl	8007ae0 <HAL_GetTick>
 8008f62:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	9300      	str	r3, [sp, #0]
 8008f68:	2319      	movs	r3, #25
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f000 f9af 	bl	80092d4 <I2C_WaitOnFlagUntilTimeout>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d001      	beq.n	8008f80 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	e0d5      	b.n	800912c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2222      	movs	r2, #34	@ 0x22
 8008f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2240      	movs	r2, #64	@ 0x40
 8008f8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2200      	movs	r2, #0
 8008f94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	6a3a      	ldr	r2, [r7, #32]
 8008f9a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008fa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008fa8:	88f8      	ldrh	r0, [r7, #6]
 8008faa:	893a      	ldrh	r2, [r7, #8]
 8008fac:	8979      	ldrh	r1, [r7, #10]
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	9301      	str	r3, [sp, #4]
 8008fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fb4:	9300      	str	r3, [sp, #0]
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	68f8      	ldr	r0, [r7, #12]
 8008fba:	f000 f913 	bl	80091e4 <I2C_RequestMemoryRead>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d005      	beq.n	8008fd0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e0ad      	b.n	800912c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	2bff      	cmp	r3, #255	@ 0xff
 8008fd8:	d90e      	bls.n	8008ff8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	22ff      	movs	r2, #255	@ 0xff
 8008fde:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fe4:	b2da      	uxtb	r2, r3
 8008fe6:	8979      	ldrh	r1, [r7, #10]
 8008fe8:	4b52      	ldr	r3, [pc, #328]	@ (8009134 <HAL_I2C_Mem_Read+0x22c>)
 8008fea:	9300      	str	r3, [sp, #0]
 8008fec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	f000 fbbf 	bl	8009774 <I2C_TransferConfig>
 8008ff6:	e00f      	b.n	8009018 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ffc:	b29a      	uxth	r2, r3
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009006:	b2da      	uxtb	r2, r3
 8009008:	8979      	ldrh	r1, [r7, #10]
 800900a:	4b4a      	ldr	r3, [pc, #296]	@ (8009134 <HAL_I2C_Mem_Read+0x22c>)
 800900c:	9300      	str	r3, [sp, #0]
 800900e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009012:	68f8      	ldr	r0, [r7, #12]
 8009014:	f000 fbae 	bl	8009774 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	9300      	str	r3, [sp, #0]
 800901c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800901e:	2200      	movs	r2, #0
 8009020:	2104      	movs	r1, #4
 8009022:	68f8      	ldr	r0, [r7, #12]
 8009024:	f000 f956 	bl	80092d4 <I2C_WaitOnFlagUntilTimeout>
 8009028:	4603      	mov	r3, r0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d001      	beq.n	8009032 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	e07c      	b.n	800912c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800903c:	b2d2      	uxtb	r2, r2
 800903e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009044:	1c5a      	adds	r2, r3, #1
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800904e:	3b01      	subs	r3, #1
 8009050:	b29a      	uxth	r2, r3
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800905a:	b29b      	uxth	r3, r3
 800905c:	3b01      	subs	r3, #1
 800905e:	b29a      	uxth	r2, r3
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009068:	b29b      	uxth	r3, r3
 800906a:	2b00      	cmp	r3, #0
 800906c:	d034      	beq.n	80090d8 <HAL_I2C_Mem_Read+0x1d0>
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009072:	2b00      	cmp	r3, #0
 8009074:	d130      	bne.n	80090d8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	9300      	str	r3, [sp, #0]
 800907a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800907c:	2200      	movs	r2, #0
 800907e:	2180      	movs	r1, #128	@ 0x80
 8009080:	68f8      	ldr	r0, [r7, #12]
 8009082:	f000 f927 	bl	80092d4 <I2C_WaitOnFlagUntilTimeout>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d001      	beq.n	8009090 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	e04d      	b.n	800912c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009094:	b29b      	uxth	r3, r3
 8009096:	2bff      	cmp	r3, #255	@ 0xff
 8009098:	d90e      	bls.n	80090b8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	22ff      	movs	r2, #255	@ 0xff
 800909e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090a4:	b2da      	uxtb	r2, r3
 80090a6:	8979      	ldrh	r1, [r7, #10]
 80090a8:	2300      	movs	r3, #0
 80090aa:	9300      	str	r3, [sp, #0]
 80090ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f000 fb5f 	bl	8009774 <I2C_TransferConfig>
 80090b6:	e00f      	b.n	80090d8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80090bc:	b29a      	uxth	r2, r3
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090c6:	b2da      	uxtb	r2, r3
 80090c8:	8979      	ldrh	r1, [r7, #10]
 80090ca:	2300      	movs	r3, #0
 80090cc:	9300      	str	r3, [sp, #0]
 80090ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f000 fb4e 	bl	8009774 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80090dc:	b29b      	uxth	r3, r3
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d19a      	bne.n	8009018 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090e2:	697a      	ldr	r2, [r7, #20]
 80090e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090e6:	68f8      	ldr	r0, [r7, #12]
 80090e8:	f000 f994 	bl	8009414 <I2C_WaitOnSTOPFlagUntilTimeout>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d001      	beq.n	80090f6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	e01a      	b.n	800912c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	2220      	movs	r2, #32
 80090fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	6859      	ldr	r1, [r3, #4]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	4b0b      	ldr	r3, [pc, #44]	@ (8009138 <HAL_I2C_Mem_Read+0x230>)
 800910a:	400b      	ands	r3, r1
 800910c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2220      	movs	r2, #32
 8009112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2200      	movs	r2, #0
 800911a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009126:	2300      	movs	r3, #0
 8009128:	e000      	b.n	800912c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800912a:	2302      	movs	r3, #2
  }
}
 800912c:	4618      	mov	r0, r3
 800912e:	3718      	adds	r7, #24
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}
 8009134:	80002400 	.word	0x80002400
 8009138:	fe00e800 	.word	0xfe00e800

0800913c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b086      	sub	sp, #24
 8009140:	af02      	add	r7, sp, #8
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	4608      	mov	r0, r1
 8009146:	4611      	mov	r1, r2
 8009148:	461a      	mov	r2, r3
 800914a:	4603      	mov	r3, r0
 800914c:	817b      	strh	r3, [r7, #10]
 800914e:	460b      	mov	r3, r1
 8009150:	813b      	strh	r3, [r7, #8]
 8009152:	4613      	mov	r3, r2
 8009154:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009156:	88fb      	ldrh	r3, [r7, #6]
 8009158:	b2da      	uxtb	r2, r3
 800915a:	8979      	ldrh	r1, [r7, #10]
 800915c:	4b20      	ldr	r3, [pc, #128]	@ (80091e0 <I2C_RequestMemoryWrite+0xa4>)
 800915e:	9300      	str	r3, [sp, #0]
 8009160:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f000 fb05 	bl	8009774 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800916a:	69fa      	ldr	r2, [r7, #28]
 800916c:	69b9      	ldr	r1, [r7, #24]
 800916e:	68f8      	ldr	r0, [r7, #12]
 8009170:	f000 f909 	bl	8009386 <I2C_WaitOnTXISFlagUntilTimeout>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	d001      	beq.n	800917e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	e02c      	b.n	80091d8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800917e:	88fb      	ldrh	r3, [r7, #6]
 8009180:	2b01      	cmp	r3, #1
 8009182:	d105      	bne.n	8009190 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009184:	893b      	ldrh	r3, [r7, #8]
 8009186:	b2da      	uxtb	r2, r3
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	629a      	str	r2, [r3, #40]	@ 0x28
 800918e:	e015      	b.n	80091bc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009190:	893b      	ldrh	r3, [r7, #8]
 8009192:	0a1b      	lsrs	r3, r3, #8
 8009194:	b29b      	uxth	r3, r3
 8009196:	b2da      	uxtb	r2, r3
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800919e:	69fa      	ldr	r2, [r7, #28]
 80091a0:	69b9      	ldr	r1, [r7, #24]
 80091a2:	68f8      	ldr	r0, [r7, #12]
 80091a4:	f000 f8ef 	bl	8009386 <I2C_WaitOnTXISFlagUntilTimeout>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d001      	beq.n	80091b2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80091ae:	2301      	movs	r3, #1
 80091b0:	e012      	b.n	80091d8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80091b2:	893b      	ldrh	r3, [r7, #8]
 80091b4:	b2da      	uxtb	r2, r3
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	9300      	str	r3, [sp, #0]
 80091c0:	69bb      	ldr	r3, [r7, #24]
 80091c2:	2200      	movs	r2, #0
 80091c4:	2180      	movs	r1, #128	@ 0x80
 80091c6:	68f8      	ldr	r0, [r7, #12]
 80091c8:	f000 f884 	bl	80092d4 <I2C_WaitOnFlagUntilTimeout>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d001      	beq.n	80091d6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	e000      	b.n	80091d8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80091d6:	2300      	movs	r3, #0
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3710      	adds	r7, #16
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	80002000 	.word	0x80002000

080091e4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b086      	sub	sp, #24
 80091e8:	af02      	add	r7, sp, #8
 80091ea:	60f8      	str	r0, [r7, #12]
 80091ec:	4608      	mov	r0, r1
 80091ee:	4611      	mov	r1, r2
 80091f0:	461a      	mov	r2, r3
 80091f2:	4603      	mov	r3, r0
 80091f4:	817b      	strh	r3, [r7, #10]
 80091f6:	460b      	mov	r3, r1
 80091f8:	813b      	strh	r3, [r7, #8]
 80091fa:	4613      	mov	r3, r2
 80091fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80091fe:	88fb      	ldrh	r3, [r7, #6]
 8009200:	b2da      	uxtb	r2, r3
 8009202:	8979      	ldrh	r1, [r7, #10]
 8009204:	4b20      	ldr	r3, [pc, #128]	@ (8009288 <I2C_RequestMemoryRead+0xa4>)
 8009206:	9300      	str	r3, [sp, #0]
 8009208:	2300      	movs	r3, #0
 800920a:	68f8      	ldr	r0, [r7, #12]
 800920c:	f000 fab2 	bl	8009774 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009210:	69fa      	ldr	r2, [r7, #28]
 8009212:	69b9      	ldr	r1, [r7, #24]
 8009214:	68f8      	ldr	r0, [r7, #12]
 8009216:	f000 f8b6 	bl	8009386 <I2C_WaitOnTXISFlagUntilTimeout>
 800921a:	4603      	mov	r3, r0
 800921c:	2b00      	cmp	r3, #0
 800921e:	d001      	beq.n	8009224 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	e02c      	b.n	800927e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009224:	88fb      	ldrh	r3, [r7, #6]
 8009226:	2b01      	cmp	r3, #1
 8009228:	d105      	bne.n	8009236 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800922a:	893b      	ldrh	r3, [r7, #8]
 800922c:	b2da      	uxtb	r2, r3
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	629a      	str	r2, [r3, #40]	@ 0x28
 8009234:	e015      	b.n	8009262 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009236:	893b      	ldrh	r3, [r7, #8]
 8009238:	0a1b      	lsrs	r3, r3, #8
 800923a:	b29b      	uxth	r3, r3
 800923c:	b2da      	uxtb	r2, r3
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009244:	69fa      	ldr	r2, [r7, #28]
 8009246:	69b9      	ldr	r1, [r7, #24]
 8009248:	68f8      	ldr	r0, [r7, #12]
 800924a:	f000 f89c 	bl	8009386 <I2C_WaitOnTXISFlagUntilTimeout>
 800924e:	4603      	mov	r3, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d001      	beq.n	8009258 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009254:	2301      	movs	r3, #1
 8009256:	e012      	b.n	800927e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009258:	893b      	ldrh	r3, [r7, #8]
 800925a:	b2da      	uxtb	r2, r3
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009262:	69fb      	ldr	r3, [r7, #28]
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	2200      	movs	r2, #0
 800926a:	2140      	movs	r1, #64	@ 0x40
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	f000 f831 	bl	80092d4 <I2C_WaitOnFlagUntilTimeout>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d001      	beq.n	800927c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009278:	2301      	movs	r3, #1
 800927a:	e000      	b.n	800927e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	80002000 	.word	0x80002000

0800928c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	699b      	ldr	r3, [r3, #24]
 800929a:	f003 0302 	and.w	r3, r3, #2
 800929e:	2b02      	cmp	r3, #2
 80092a0:	d103      	bne.n	80092aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	2200      	movs	r2, #0
 80092a8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	699b      	ldr	r3, [r3, #24]
 80092b0:	f003 0301 	and.w	r3, r3, #1
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d007      	beq.n	80092c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	699a      	ldr	r2, [r3, #24]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f042 0201 	orr.w	r2, r2, #1
 80092c6:	619a      	str	r2, [r3, #24]
  }
}
 80092c8:	bf00      	nop
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	603b      	str	r3, [r7, #0]
 80092e0:	4613      	mov	r3, r2
 80092e2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80092e4:	e03b      	b.n	800935e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80092e6:	69ba      	ldr	r2, [r7, #24]
 80092e8:	6839      	ldr	r1, [r7, #0]
 80092ea:	68f8      	ldr	r0, [r7, #12]
 80092ec:	f000 f962 	bl	80095b4 <I2C_IsErrorOccurred>
 80092f0:	4603      	mov	r3, r0
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d001      	beq.n	80092fa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80092f6:	2301      	movs	r3, #1
 80092f8:	e041      	b.n	800937e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009300:	d02d      	beq.n	800935e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009302:	f7fe fbed 	bl	8007ae0 <HAL_GetTick>
 8009306:	4602      	mov	r2, r0
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	1ad3      	subs	r3, r2, r3
 800930c:	683a      	ldr	r2, [r7, #0]
 800930e:	429a      	cmp	r2, r3
 8009310:	d302      	bcc.n	8009318 <I2C_WaitOnFlagUntilTimeout+0x44>
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d122      	bne.n	800935e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	699a      	ldr	r2, [r3, #24]
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	4013      	ands	r3, r2
 8009322:	68ba      	ldr	r2, [r7, #8]
 8009324:	429a      	cmp	r2, r3
 8009326:	bf0c      	ite	eq
 8009328:	2301      	moveq	r3, #1
 800932a:	2300      	movne	r3, #0
 800932c:	b2db      	uxtb	r3, r3
 800932e:	461a      	mov	r2, r3
 8009330:	79fb      	ldrb	r3, [r7, #7]
 8009332:	429a      	cmp	r2, r3
 8009334:	d113      	bne.n	800935e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800933a:	f043 0220 	orr.w	r2, r3, #32
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2220      	movs	r2, #32
 8009346:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2200      	movs	r2, #0
 800934e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2200      	movs	r2, #0
 8009356:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800935a:	2301      	movs	r3, #1
 800935c:	e00f      	b.n	800937e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	699a      	ldr	r2, [r3, #24]
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	4013      	ands	r3, r2
 8009368:	68ba      	ldr	r2, [r7, #8]
 800936a:	429a      	cmp	r2, r3
 800936c:	bf0c      	ite	eq
 800936e:	2301      	moveq	r3, #1
 8009370:	2300      	movne	r3, #0
 8009372:	b2db      	uxtb	r3, r3
 8009374:	461a      	mov	r2, r3
 8009376:	79fb      	ldrb	r3, [r7, #7]
 8009378:	429a      	cmp	r2, r3
 800937a:	d0b4      	beq.n	80092e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800937c:	2300      	movs	r3, #0
}
 800937e:	4618      	mov	r0, r3
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}

08009386 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009386:	b580      	push	{r7, lr}
 8009388:	b084      	sub	sp, #16
 800938a:	af00      	add	r7, sp, #0
 800938c:	60f8      	str	r0, [r7, #12]
 800938e:	60b9      	str	r1, [r7, #8]
 8009390:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009392:	e033      	b.n	80093fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	68b9      	ldr	r1, [r7, #8]
 8009398:	68f8      	ldr	r0, [r7, #12]
 800939a:	f000 f90b 	bl	80095b4 <I2C_IsErrorOccurred>
 800939e:	4603      	mov	r3, r0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d001      	beq.n	80093a8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80093a4:	2301      	movs	r3, #1
 80093a6:	e031      	b.n	800940c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ae:	d025      	beq.n	80093fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093b0:	f7fe fb96 	bl	8007ae0 <HAL_GetTick>
 80093b4:	4602      	mov	r2, r0
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	1ad3      	subs	r3, r2, r3
 80093ba:	68ba      	ldr	r2, [r7, #8]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d302      	bcc.n	80093c6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d11a      	bne.n	80093fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	699b      	ldr	r3, [r3, #24]
 80093cc:	f003 0302 	and.w	r3, r3, #2
 80093d0:	2b02      	cmp	r3, #2
 80093d2:	d013      	beq.n	80093fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093d8:	f043 0220 	orr.w	r2, r3, #32
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2220      	movs	r2, #32
 80093e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2200      	movs	r2, #0
 80093f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80093f8:	2301      	movs	r3, #1
 80093fa:	e007      	b.n	800940c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	699b      	ldr	r3, [r3, #24]
 8009402:	f003 0302 	and.w	r3, r3, #2
 8009406:	2b02      	cmp	r3, #2
 8009408:	d1c4      	bne.n	8009394 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009420:	e02f      	b.n	8009482 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	68b9      	ldr	r1, [r7, #8]
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	f000 f8c4 	bl	80095b4 <I2C_IsErrorOccurred>
 800942c:	4603      	mov	r3, r0
 800942e:	2b00      	cmp	r3, #0
 8009430:	d001      	beq.n	8009436 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009432:	2301      	movs	r3, #1
 8009434:	e02d      	b.n	8009492 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009436:	f7fe fb53 	bl	8007ae0 <HAL_GetTick>
 800943a:	4602      	mov	r2, r0
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	1ad3      	subs	r3, r2, r3
 8009440:	68ba      	ldr	r2, [r7, #8]
 8009442:	429a      	cmp	r2, r3
 8009444:	d302      	bcc.n	800944c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d11a      	bne.n	8009482 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	699b      	ldr	r3, [r3, #24]
 8009452:	f003 0320 	and.w	r3, r3, #32
 8009456:	2b20      	cmp	r3, #32
 8009458:	d013      	beq.n	8009482 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800945e:	f043 0220 	orr.w	r2, r3, #32
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2220      	movs	r2, #32
 800946a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2200      	movs	r2, #0
 8009472:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2200      	movs	r2, #0
 800947a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800947e:	2301      	movs	r3, #1
 8009480:	e007      	b.n	8009492 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	699b      	ldr	r3, [r3, #24]
 8009488:	f003 0320 	and.w	r3, r3, #32
 800948c:	2b20      	cmp	r3, #32
 800948e:	d1c8      	bne.n	8009422 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009490:	2300      	movs	r3, #0
}
 8009492:	4618      	mov	r0, r3
 8009494:	3710      	adds	r7, #16
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
	...

0800949c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b086      	sub	sp, #24
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094a8:	2300      	movs	r3, #0
 80094aa:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80094ac:	e071      	b.n	8009592 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	68b9      	ldr	r1, [r7, #8]
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	f000 f87e 	bl	80095b4 <I2C_IsErrorOccurred>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d001      	beq.n	80094c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	699b      	ldr	r3, [r3, #24]
 80094c8:	f003 0320 	and.w	r3, r3, #32
 80094cc:	2b20      	cmp	r3, #32
 80094ce:	d13b      	bne.n	8009548 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80094d0:	7dfb      	ldrb	r3, [r7, #23]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d138      	bne.n	8009548 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	699b      	ldr	r3, [r3, #24]
 80094dc:	f003 0304 	and.w	r3, r3, #4
 80094e0:	2b04      	cmp	r3, #4
 80094e2:	d105      	bne.n	80094f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d001      	beq.n	80094f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80094ec:	2300      	movs	r3, #0
 80094ee:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	699b      	ldr	r3, [r3, #24]
 80094f6:	f003 0310 	and.w	r3, r3, #16
 80094fa:	2b10      	cmp	r3, #16
 80094fc:	d121      	bne.n	8009542 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2210      	movs	r2, #16
 8009504:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2204      	movs	r2, #4
 800950a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2220      	movs	r2, #32
 8009512:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	6859      	ldr	r1, [r3, #4]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	4b24      	ldr	r3, [pc, #144]	@ (80095b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009520:	400b      	ands	r3, r1
 8009522:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2220      	movs	r2, #32
 8009528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2200      	movs	r2, #0
 8009530:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2200      	movs	r2, #0
 8009538:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800953c:	2301      	movs	r3, #1
 800953e:	75fb      	strb	r3, [r7, #23]
 8009540:	e002      	b.n	8009548 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2200      	movs	r2, #0
 8009546:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009548:	f7fe faca 	bl	8007ae0 <HAL_GetTick>
 800954c:	4602      	mov	r2, r0
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	1ad3      	subs	r3, r2, r3
 8009552:	68ba      	ldr	r2, [r7, #8]
 8009554:	429a      	cmp	r2, r3
 8009556:	d302      	bcc.n	800955e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d119      	bne.n	8009592 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800955e:	7dfb      	ldrb	r3, [r7, #23]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d116      	bne.n	8009592 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	699b      	ldr	r3, [r3, #24]
 800956a:	f003 0304 	and.w	r3, r3, #4
 800956e:	2b04      	cmp	r3, #4
 8009570:	d00f      	beq.n	8009592 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009576:	f043 0220 	orr.w	r2, r3, #32
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2220      	movs	r2, #32
 8009582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2200      	movs	r2, #0
 800958a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	699b      	ldr	r3, [r3, #24]
 8009598:	f003 0304 	and.w	r3, r3, #4
 800959c:	2b04      	cmp	r3, #4
 800959e:	d002      	beq.n	80095a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80095a0:	7dfb      	ldrb	r3, [r7, #23]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d083      	beq.n	80094ae <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80095a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3718      	adds	r7, #24
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	fe00e800 	.word	0xfe00e800

080095b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b08a      	sub	sp, #40	@ 0x28
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	60f8      	str	r0, [r7, #12]
 80095bc:	60b9      	str	r1, [r7, #8]
 80095be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095c0:	2300      	movs	r3, #0
 80095c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	699b      	ldr	r3, [r3, #24]
 80095cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80095ce:	2300      	movs	r3, #0
 80095d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	f003 0310 	and.w	r3, r3, #16
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d068      	beq.n	80096b2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2210      	movs	r2, #16
 80095e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80095e8:	e049      	b.n	800967e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095f0:	d045      	beq.n	800967e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80095f2:	f7fe fa75 	bl	8007ae0 <HAL_GetTick>
 80095f6:	4602      	mov	r2, r0
 80095f8:	69fb      	ldr	r3, [r7, #28]
 80095fa:	1ad3      	subs	r3, r2, r3
 80095fc:	68ba      	ldr	r2, [r7, #8]
 80095fe:	429a      	cmp	r2, r3
 8009600:	d302      	bcc.n	8009608 <I2C_IsErrorOccurred+0x54>
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d13a      	bne.n	800967e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009612:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800961a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	699b      	ldr	r3, [r3, #24]
 8009622:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009626:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800962a:	d121      	bne.n	8009670 <I2C_IsErrorOccurred+0xbc>
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009632:	d01d      	beq.n	8009670 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009634:	7cfb      	ldrb	r3, [r7, #19]
 8009636:	2b20      	cmp	r3, #32
 8009638:	d01a      	beq.n	8009670 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	685a      	ldr	r2, [r3, #4]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009648:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800964a:	f7fe fa49 	bl	8007ae0 <HAL_GetTick>
 800964e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009650:	e00e      	b.n	8009670 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009652:	f7fe fa45 	bl	8007ae0 <HAL_GetTick>
 8009656:	4602      	mov	r2, r0
 8009658:	69fb      	ldr	r3, [r7, #28]
 800965a:	1ad3      	subs	r3, r2, r3
 800965c:	2b19      	cmp	r3, #25
 800965e:	d907      	bls.n	8009670 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009660:	6a3b      	ldr	r3, [r7, #32]
 8009662:	f043 0320 	orr.w	r3, r3, #32
 8009666:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800966e:	e006      	b.n	800967e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	699b      	ldr	r3, [r3, #24]
 8009676:	f003 0320 	and.w	r3, r3, #32
 800967a:	2b20      	cmp	r3, #32
 800967c:	d1e9      	bne.n	8009652 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	699b      	ldr	r3, [r3, #24]
 8009684:	f003 0320 	and.w	r3, r3, #32
 8009688:	2b20      	cmp	r3, #32
 800968a:	d003      	beq.n	8009694 <I2C_IsErrorOccurred+0xe0>
 800968c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009690:	2b00      	cmp	r3, #0
 8009692:	d0aa      	beq.n	80095ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009694:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009698:	2b00      	cmp	r3, #0
 800969a:	d103      	bne.n	80096a4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2220      	movs	r2, #32
 80096a2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80096a4:	6a3b      	ldr	r3, [r7, #32]
 80096a6:	f043 0304 	orr.w	r3, r3, #4
 80096aa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80096ac:	2301      	movs	r3, #1
 80096ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	699b      	ldr	r3, [r3, #24]
 80096b8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80096ba:	69bb      	ldr	r3, [r7, #24]
 80096bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d00b      	beq.n	80096dc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80096c4:	6a3b      	ldr	r3, [r7, #32]
 80096c6:	f043 0301 	orr.w	r3, r3, #1
 80096ca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80096d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00b      	beq.n	80096fe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80096e6:	6a3b      	ldr	r3, [r7, #32]
 80096e8:	f043 0308 	orr.w	r3, r3, #8
 80096ec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80096f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80096f8:	2301      	movs	r3, #1
 80096fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009704:	2b00      	cmp	r3, #0
 8009706:	d00b      	beq.n	8009720 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009708:	6a3b      	ldr	r3, [r7, #32]
 800970a:	f043 0302 	orr.w	r3, r3, #2
 800970e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009718:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009720:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009724:	2b00      	cmp	r3, #0
 8009726:	d01c      	beq.n	8009762 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009728:	68f8      	ldr	r0, [r7, #12]
 800972a:	f7ff fdaf 	bl	800928c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	6859      	ldr	r1, [r3, #4]
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	4b0d      	ldr	r3, [pc, #52]	@ (8009770 <I2C_IsErrorOccurred+0x1bc>)
 800973a:	400b      	ands	r3, r1
 800973c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009742:	6a3b      	ldr	r3, [r7, #32]
 8009744:	431a      	orrs	r2, r3
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2220      	movs	r2, #32
 800974e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2200      	movs	r2, #0
 8009756:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2200      	movs	r2, #0
 800975e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009762:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009766:	4618      	mov	r0, r3
 8009768:	3728      	adds	r7, #40	@ 0x28
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	fe00e800 	.word	0xfe00e800

08009774 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009774:	b480      	push	{r7}
 8009776:	b087      	sub	sp, #28
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	607b      	str	r3, [r7, #4]
 800977e:	460b      	mov	r3, r1
 8009780:	817b      	strh	r3, [r7, #10]
 8009782:	4613      	mov	r3, r2
 8009784:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009786:	897b      	ldrh	r3, [r7, #10]
 8009788:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800978c:	7a7b      	ldrb	r3, [r7, #9]
 800978e:	041b      	lsls	r3, r3, #16
 8009790:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009794:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800979a:	6a3b      	ldr	r3, [r7, #32]
 800979c:	4313      	orrs	r3, r2
 800979e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80097a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	685a      	ldr	r2, [r3, #4]
 80097aa:	6a3b      	ldr	r3, [r7, #32]
 80097ac:	0d5b      	lsrs	r3, r3, #21
 80097ae:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80097b2:	4b08      	ldr	r3, [pc, #32]	@ (80097d4 <I2C_TransferConfig+0x60>)
 80097b4:	430b      	orrs	r3, r1
 80097b6:	43db      	mvns	r3, r3
 80097b8:	ea02 0103 	and.w	r1, r2, r3
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	697a      	ldr	r2, [r7, #20]
 80097c2:	430a      	orrs	r2, r1
 80097c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80097c6:	bf00      	nop
 80097c8:	371c      	adds	r7, #28
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr
 80097d2:	bf00      	nop
 80097d4:	03ff63ff 	.word	0x03ff63ff

080097d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	2b20      	cmp	r3, #32
 80097ec:	d138      	bne.n	8009860 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d101      	bne.n	80097fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80097f8:	2302      	movs	r3, #2
 80097fa:	e032      	b.n	8009862 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2201      	movs	r2, #1
 8009800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2224      	movs	r2, #36	@ 0x24
 8009808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f022 0201 	bic.w	r2, r2, #1
 800981a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800982a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	6819      	ldr	r1, [r3, #0]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	683a      	ldr	r2, [r7, #0]
 8009838:	430a      	orrs	r2, r1
 800983a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f042 0201 	orr.w	r2, r2, #1
 800984a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2220      	movs	r2, #32
 8009850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800985c:	2300      	movs	r3, #0
 800985e:	e000      	b.n	8009862 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009860:	2302      	movs	r3, #2
  }
}
 8009862:	4618      	mov	r0, r3
 8009864:	370c      	adds	r7, #12
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr

0800986e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800986e:	b480      	push	{r7}
 8009870:	b085      	sub	sp, #20
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
 8009876:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800987e:	b2db      	uxtb	r3, r3
 8009880:	2b20      	cmp	r3, #32
 8009882:	d139      	bne.n	80098f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800988a:	2b01      	cmp	r3, #1
 800988c:	d101      	bne.n	8009892 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800988e:	2302      	movs	r3, #2
 8009890:	e033      	b.n	80098fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2201      	movs	r2, #1
 8009896:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2224      	movs	r2, #36	@ 0x24
 800989e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f022 0201 	bic.w	r2, r2, #1
 80098b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80098c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	021b      	lsls	r3, r3, #8
 80098c6:	68fa      	ldr	r2, [r7, #12]
 80098c8:	4313      	orrs	r3, r2
 80098ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	68fa      	ldr	r2, [r7, #12]
 80098d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f042 0201 	orr.w	r2, r2, #1
 80098e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2220      	movs	r2, #32
 80098e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80098f4:	2300      	movs	r3, #0
 80098f6:	e000      	b.n	80098fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80098f8:	2302      	movs	r3, #2
  }
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3714      	adds	r7, #20
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
	...

08009908 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8009910:	2300      	movs	r3, #0
 8009912:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d01e      	beq.n	8009958 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800991a:	4b13      	ldr	r3, [pc, #76]	@ (8009968 <HAL_IPCC_Init+0x60>)
 800991c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009924:	b2db      	uxtb	r3, r3
 8009926:	2b00      	cmp	r3, #0
 8009928:	d102      	bne.n	8009930 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f7fc fdee 	bl	800650c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8009930:	68b8      	ldr	r0, [r7, #8]
 8009932:	f000 f85b 	bl	80099ec <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 f82c 	bl	80099a0 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2201      	movs	r2, #1
 8009952:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8009956:	e001      	b.n	800995c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8009958:	2301      	movs	r3, #1
 800995a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800995c:	7bfb      	ldrb	r3, [r7, #15]
}
 800995e:	4618      	mov	r0, r3
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	58000c00 	.word	0x58000c00

0800996c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800996c:	b480      	push	{r7}
 800996e:	b085      	sub	sp, #20
 8009970:	af00      	add	r7, sp, #0
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	60b9      	str	r1, [r7, #8]
 8009976:	4613      	mov	r3, r2
 8009978:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800997a:	bf00      	nop
 800997c:	3714      	adds	r7, #20
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr

08009986 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8009986:	b480      	push	{r7}
 8009988:	b085      	sub	sp, #20
 800998a:	af00      	add	r7, sp, #0
 800998c:	60f8      	str	r0, [r7, #12]
 800998e:	60b9      	str	r1, [r7, #8]
 8009990:	4613      	mov	r3, r2
 8009992:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8009994:	bf00      	nop
 8009996:	3714      	adds	r7, #20
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b085      	sub	sp, #20
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80099a8:	2300      	movs	r3, #0
 80099aa:	60fb      	str	r3, [r7, #12]
 80099ac:	e00f      	b.n	80099ce <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	4413      	add	r3, r2
 80099b6:	4a0b      	ldr	r2, [pc, #44]	@ (80099e4 <IPCC_SetDefaultCallbacks+0x44>)
 80099b8:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	3306      	adds	r3, #6
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	4413      	add	r3, r2
 80099c4:	4a08      	ldr	r2, [pc, #32]	@ (80099e8 <IPCC_SetDefaultCallbacks+0x48>)
 80099c6:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	3301      	adds	r3, #1
 80099cc:	60fb      	str	r3, [r7, #12]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2b05      	cmp	r3, #5
 80099d2:	d9ec      	bls.n	80099ae <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80099d4:	bf00      	nop
 80099d6:	bf00      	nop
 80099d8:	3714      	adds	r7, #20
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop
 80099e4:	0800996d 	.word	0x0800996d
 80099e8:	08009987 	.word	0x08009987

080099ec <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8009a00:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	223f      	movs	r2, #63	@ 0x3f
 8009a06:	609a      	str	r2, [r3, #8]
}
 8009a08:	bf00      	nop
 8009a0a:	370c      	adds	r7, #12
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d101      	bne.n	8009a26 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009a22:	2301      	movs	r3, #1
 8009a24:	e0c0      	b.n	8009ba8 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d106      	bne.n	8009a40 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2200      	movs	r2, #0
 8009a36:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f00f f856 	bl	8018aec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2203      	movs	r2, #3
 8009a44:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f006 fc50 	bl	80102f2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a52:	2300      	movs	r3, #0
 8009a54:	73fb      	strb	r3, [r7, #15]
 8009a56:	e03e      	b.n	8009ad6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009a58:	7bfa      	ldrb	r2, [r7, #15]
 8009a5a:	6879      	ldr	r1, [r7, #4]
 8009a5c:	4613      	mov	r3, r2
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	4413      	add	r3, r2
 8009a62:	00db      	lsls	r3, r3, #3
 8009a64:	440b      	add	r3, r1
 8009a66:	3311      	adds	r3, #17
 8009a68:	2201      	movs	r2, #1
 8009a6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009a6c:	7bfa      	ldrb	r2, [r7, #15]
 8009a6e:	6879      	ldr	r1, [r7, #4]
 8009a70:	4613      	mov	r3, r2
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	4413      	add	r3, r2
 8009a76:	00db      	lsls	r3, r3, #3
 8009a78:	440b      	add	r3, r1
 8009a7a:	3310      	adds	r3, #16
 8009a7c:	7bfa      	ldrb	r2, [r7, #15]
 8009a7e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009a80:	7bfa      	ldrb	r2, [r7, #15]
 8009a82:	6879      	ldr	r1, [r7, #4]
 8009a84:	4613      	mov	r3, r2
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	4413      	add	r3, r2
 8009a8a:	00db      	lsls	r3, r3, #3
 8009a8c:	440b      	add	r3, r1
 8009a8e:	3313      	adds	r3, #19
 8009a90:	2200      	movs	r2, #0
 8009a92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009a94:	7bfa      	ldrb	r2, [r7, #15]
 8009a96:	6879      	ldr	r1, [r7, #4]
 8009a98:	4613      	mov	r3, r2
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	4413      	add	r3, r2
 8009a9e:	00db      	lsls	r3, r3, #3
 8009aa0:	440b      	add	r3, r1
 8009aa2:	3320      	adds	r3, #32
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009aa8:	7bfa      	ldrb	r2, [r7, #15]
 8009aaa:	6879      	ldr	r1, [r7, #4]
 8009aac:	4613      	mov	r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4413      	add	r3, r2
 8009ab2:	00db      	lsls	r3, r3, #3
 8009ab4:	440b      	add	r3, r1
 8009ab6:	3324      	adds	r3, #36	@ 0x24
 8009ab8:	2200      	movs	r2, #0
 8009aba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009abc:	7bfb      	ldrb	r3, [r7, #15]
 8009abe:	6879      	ldr	r1, [r7, #4]
 8009ac0:	1c5a      	adds	r2, r3, #1
 8009ac2:	4613      	mov	r3, r2
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	4413      	add	r3, r2
 8009ac8:	00db      	lsls	r3, r3, #3
 8009aca:	440b      	add	r3, r1
 8009acc:	2200      	movs	r2, #0
 8009ace:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009ad0:	7bfb      	ldrb	r3, [r7, #15]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	73fb      	strb	r3, [r7, #15]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	791b      	ldrb	r3, [r3, #4]
 8009ada:	7bfa      	ldrb	r2, [r7, #15]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d3bb      	bcc.n	8009a58 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	73fb      	strb	r3, [r7, #15]
 8009ae4:	e044      	b.n	8009b70 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009ae6:	7bfa      	ldrb	r2, [r7, #15]
 8009ae8:	6879      	ldr	r1, [r7, #4]
 8009aea:	4613      	mov	r3, r2
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	4413      	add	r3, r2
 8009af0:	00db      	lsls	r3, r3, #3
 8009af2:	440b      	add	r3, r1
 8009af4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8009af8:	2200      	movs	r2, #0
 8009afa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009afc:	7bfa      	ldrb	r2, [r7, #15]
 8009afe:	6879      	ldr	r1, [r7, #4]
 8009b00:	4613      	mov	r3, r2
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	4413      	add	r3, r2
 8009b06:	00db      	lsls	r3, r3, #3
 8009b08:	440b      	add	r3, r1
 8009b0a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009b0e:	7bfa      	ldrb	r2, [r7, #15]
 8009b10:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009b12:	7bfa      	ldrb	r2, [r7, #15]
 8009b14:	6879      	ldr	r1, [r7, #4]
 8009b16:	4613      	mov	r3, r2
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	4413      	add	r3, r2
 8009b1c:	00db      	lsls	r3, r3, #3
 8009b1e:	440b      	add	r3, r1
 8009b20:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8009b24:	2200      	movs	r2, #0
 8009b26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009b28:	7bfa      	ldrb	r2, [r7, #15]
 8009b2a:	6879      	ldr	r1, [r7, #4]
 8009b2c:	4613      	mov	r3, r2
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	4413      	add	r3, r2
 8009b32:	00db      	lsls	r3, r3, #3
 8009b34:	440b      	add	r3, r1
 8009b36:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009b3e:	7bfa      	ldrb	r2, [r7, #15]
 8009b40:	6879      	ldr	r1, [r7, #4]
 8009b42:	4613      	mov	r3, r2
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	4413      	add	r3, r2
 8009b48:	00db      	lsls	r3, r3, #3
 8009b4a:	440b      	add	r3, r1
 8009b4c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009b50:	2200      	movs	r2, #0
 8009b52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009b54:	7bfa      	ldrb	r2, [r7, #15]
 8009b56:	6879      	ldr	r1, [r7, #4]
 8009b58:	4613      	mov	r3, r2
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	4413      	add	r3, r2
 8009b5e:	00db      	lsls	r3, r3, #3
 8009b60:	440b      	add	r3, r1
 8009b62:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8009b66:	2200      	movs	r2, #0
 8009b68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009b6a:	7bfb      	ldrb	r3, [r7, #15]
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	73fb      	strb	r3, [r7, #15]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	791b      	ldrb	r3, [r3, #4]
 8009b74:	7bfa      	ldrb	r2, [r7, #15]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d3b5      	bcc.n	8009ae6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6818      	ldr	r0, [r3, #0]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	3304      	adds	r3, #4
 8009b82:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009b86:	f006 fbcf 	bl	8010328 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2201      	movs	r2, #1
 8009b94:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	7a9b      	ldrb	r3, [r3, #10]
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d102      	bne.n	8009ba6 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f001 fbd0 	bl	800b346 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8009ba6:	2300      	movs	r3, #0
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3710      	adds	r7, #16
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d101      	bne.n	8009bc6 <HAL_PCD_Start+0x16>
 8009bc2:	2302      	movs	r3, #2
 8009bc4:	e012      	b.n	8009bec <HAL_PCD_Start+0x3c>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2201      	movs	r2, #1
 8009bca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f006 fb76 	bl	80102c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f007 ff66 	bl	8011aae <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8009bea:	2300      	movs	r3, #0
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3708      	adds	r7, #8
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d101      	bne.n	8009c0a <HAL_PCD_Stop+0x16>
 8009c06:	2302      	movs	r3, #2
 8009c08:	e012      	b.n	8009c30 <HAL_PCD_Stop+0x3c>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_DISABLE(hpcd);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4618      	mov	r0, r3
 8009c18:	f006 fb6b 	bl	80102f2 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4618      	mov	r0, r3
 8009c22:	f007 ff5b 	bl	8011adc <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8009c2e:	2300      	movs	r3, #0
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3708      	adds	r7, #8
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4618      	mov	r0, r3
 8009c46:	f007 ff5e 	bl	8011b06 <USB_ReadInterrupts>
 8009c4a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d003      	beq.n	8009c5e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 faa6 	bl	800a1a8 <PCD_EP_ISR_Handler>

    return;
 8009c5c:	e110      	b.n	8009e80 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d013      	beq.n	8009c90 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009c70:	b29a      	uxth	r2, r3
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009c7a:	b292      	uxth	r2, r2
 8009c7c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f00e ffe6 	bl	8018c52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8009c86:	2100      	movs	r1, #0
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 f8fc 	bl	8009e86 <HAL_PCD_SetAddress>

    return;
 8009c8e:	e0f7      	b.n	8009e80 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d00c      	beq.n	8009cb4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009ca2:	b29a      	uxth	r2, r3
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009cac:	b292      	uxth	r2, r2
 8009cae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8009cb2:	e0e5      	b.n	8009e80 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00c      	beq.n	8009cd8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009cc6:	b29a      	uxth	r2, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009cd0:	b292      	uxth	r2, r2
 8009cd2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8009cd6:	e0d3      	b.n	8009e80 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d034      	beq.n	8009d4c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009cea:	b29a      	uxth	r2, r3
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f022 0204 	bic.w	r2, r2, #4
 8009cf4:	b292      	uxth	r2, r2
 8009cf6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009d02:	b29a      	uxth	r2, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f022 0208 	bic.w	r2, r2, #8
 8009d0c:	b292      	uxth	r2, r2
 8009d0e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d107      	bne.n	8009d2c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009d24:	2100      	movs	r1, #0
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f00f f958 	bl	8018fdc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f00e ffc9 	bl	8018cc4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009d3a:	b29a      	uxth	r2, r3
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009d44:	b292      	uxth	r2, r2
 8009d46:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8009d4a:	e099      	b.n	8009e80 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d027      	beq.n	8009da6 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009d5e:	b29a      	uxth	r2, r3
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f042 0208 	orr.w	r2, r2, #8
 8009d68:	b292      	uxth	r2, r2
 8009d6a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009d76:	b29a      	uxth	r2, r3
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009d80:	b292      	uxth	r2, r2
 8009d82:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009d8e:	b29a      	uxth	r2, r3
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f042 0204 	orr.w	r2, r2, #4
 8009d98:	b292      	uxth	r2, r2
 8009d9a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f00e ff76 	bl	8018c90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8009da4:	e06c      	b.n	8009e80 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d040      	beq.n	8009e32 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009db8:	b29a      	uxth	r2, r3
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009dc2:	b292      	uxth	r2, r2
 8009dc4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d12b      	bne.n	8009e2a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009dda:	b29a      	uxth	r2, r3
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f042 0204 	orr.w	r2, r2, #4
 8009de4:	b292      	uxth	r2, r2
 8009de6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009df2:	b29a      	uxth	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f042 0208 	orr.w	r2, r2, #8
 8009dfc:	b292      	uxth	r2, r2
 8009dfe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2201      	movs	r2, #1
 8009e06:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	089b      	lsrs	r3, r3, #2
 8009e16:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009e20:	2101      	movs	r1, #1
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f00f f8da 	bl	8018fdc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8009e28:	e02a      	b.n	8009e80 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f00e ff30 	bl	8018c90 <HAL_PCD_SuspendCallback>
    return;
 8009e30:	e026      	b.n	8009e80 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d00f      	beq.n	8009e5c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009e44:	b29a      	uxth	r2, r3
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009e4e:	b292      	uxth	r2, r2
 8009e50:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f00e feee 	bl	8018c36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8009e5a:	e011      	b.n	8009e80 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d00c      	beq.n	8009e80 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009e6e:	b29a      	uxth	r2, r3
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009e78:	b292      	uxth	r2, r2
 8009e7a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8009e7e:	bf00      	nop
  }
}
 8009e80:	3710      	adds	r7, #16
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b082      	sub	sp, #8
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
 8009e8e:	460b      	mov	r3, r1
 8009e90:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d101      	bne.n	8009ea0 <HAL_PCD_SetAddress+0x1a>
 8009e9c:	2302      	movs	r3, #2
 8009e9e:	e012      	b.n	8009ec6 <HAL_PCD_SetAddress+0x40>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	78fa      	ldrb	r2, [r7, #3]
 8009eac:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	78fa      	ldrb	r2, [r7, #3]
 8009eb4:	4611      	mov	r1, r2
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f007 fde5 	bl	8011a86 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3708      	adds	r7, #8
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b084      	sub	sp, #16
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
 8009ed6:	4608      	mov	r0, r1
 8009ed8:	4611      	mov	r1, r2
 8009eda:	461a      	mov	r2, r3
 8009edc:	4603      	mov	r3, r0
 8009ede:	70fb      	strb	r3, [r7, #3]
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	803b      	strh	r3, [r7, #0]
 8009ee4:	4613      	mov	r3, r2
 8009ee6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009eec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	da0e      	bge.n	8009f12 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ef4:	78fb      	ldrb	r3, [r7, #3]
 8009ef6:	f003 0207 	and.w	r2, r3, #7
 8009efa:	4613      	mov	r3, r2
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	4413      	add	r3, r2
 8009f00:	00db      	lsls	r3, r3, #3
 8009f02:	3310      	adds	r3, #16
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	4413      	add	r3, r2
 8009f08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	705a      	strb	r2, [r3, #1]
 8009f10:	e00e      	b.n	8009f30 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009f12:	78fb      	ldrb	r3, [r7, #3]
 8009f14:	f003 0207 	and.w	r2, r3, #7
 8009f18:	4613      	mov	r3, r2
 8009f1a:	009b      	lsls	r3, r3, #2
 8009f1c:	4413      	add	r3, r2
 8009f1e:	00db      	lsls	r3, r3, #3
 8009f20:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	4413      	add	r3, r2
 8009f28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009f30:	78fb      	ldrb	r3, [r7, #3]
 8009f32:	f003 0307 	and.w	r3, r3, #7
 8009f36:	b2da      	uxtb	r2, r3
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8009f3c:	883b      	ldrh	r3, [r7, #0]
 8009f3e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	78ba      	ldrb	r2, [r7, #2]
 8009f4a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009f4c:	78bb      	ldrb	r3, [r7, #2]
 8009f4e:	2b02      	cmp	r3, #2
 8009f50:	d102      	bne.n	8009f58 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2200      	movs	r2, #0
 8009f56:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d101      	bne.n	8009f66 <HAL_PCD_EP_Open+0x98>
 8009f62:	2302      	movs	r3, #2
 8009f64:	e00e      	b.n	8009f84 <HAL_PCD_EP_Open+0xb6>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2201      	movs	r2, #1
 8009f6a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	68f9      	ldr	r1, [r7, #12]
 8009f74:	4618      	mov	r0, r3
 8009f76:	f006 f9f5 	bl	8010364 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8009f82:	7afb      	ldrb	r3, [r7, #11]
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3710      	adds	r7, #16
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b086      	sub	sp, #24
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	607a      	str	r2, [r7, #4]
 8009f96:	603b      	str	r3, [r7, #0]
 8009f98:	460b      	mov	r3, r1
 8009f9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009f9c:	7afb      	ldrb	r3, [r7, #11]
 8009f9e:	f003 0207 	and.w	r2, r3, #7
 8009fa2:	4613      	mov	r3, r2
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	4413      	add	r3, r2
 8009fa8:	00db      	lsls	r3, r3, #3
 8009faa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009fae:	68fa      	ldr	r2, [r7, #12]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	683a      	ldr	r2, [r7, #0]
 8009fbe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009fcc:	7afb      	ldrb	r3, [r7, #11]
 8009fce:	f003 0307 	and.w	r3, r3, #7
 8009fd2:	b2da      	uxtb	r2, r3
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	6979      	ldr	r1, [r7, #20]
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f006 fea8 	bl	8010d34 <USB_EPStartXfer>

  return HAL_OK;
 8009fe4:	2300      	movs	r3, #0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3718      	adds	r7, #24
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b086      	sub	sp, #24
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	60f8      	str	r0, [r7, #12]
 8009ff6:	607a      	str	r2, [r7, #4]
 8009ff8:	603b      	str	r3, [r7, #0]
 8009ffa:	460b      	mov	r3, r1
 8009ffc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ffe:	7afb      	ldrb	r3, [r7, #11]
 800a000:	f003 0207 	and.w	r2, r3, #7
 800a004:	4613      	mov	r3, r2
 800a006:	009b      	lsls	r3, r3, #2
 800a008:	4413      	add	r3, r2
 800a00a:	00db      	lsls	r3, r3, #3
 800a00c:	3310      	adds	r3, #16
 800a00e:	68fa      	ldr	r2, [r7, #12]
 800a010:	4413      	add	r3, r2
 800a012:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	683a      	ldr	r2, [r7, #0]
 800a01e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	2201      	movs	r2, #1
 800a024:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	683a      	ldr	r2, [r7, #0]
 800a02c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	2200      	movs	r2, #0
 800a032:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	2201      	movs	r2, #1
 800a038:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a03a:	7afb      	ldrb	r3, [r7, #11]
 800a03c:	f003 0307 	and.w	r3, r3, #7
 800a040:	b2da      	uxtb	r2, r3
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	6979      	ldr	r1, [r7, #20]
 800a04c:	4618      	mov	r0, r3
 800a04e:	f006 fe71 	bl	8010d34 <USB_EPStartXfer>

  return HAL_OK;
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	3718      	adds	r7, #24
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	460b      	mov	r3, r1
 800a066:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a068:	78fb      	ldrb	r3, [r7, #3]
 800a06a:	f003 0307 	and.w	r3, r3, #7
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	7912      	ldrb	r2, [r2, #4]
 800a072:	4293      	cmp	r3, r2
 800a074:	d901      	bls.n	800a07a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a076:	2301      	movs	r3, #1
 800a078:	e03e      	b.n	800a0f8 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a07a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	da0e      	bge.n	800a0a0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a082:	78fb      	ldrb	r3, [r7, #3]
 800a084:	f003 0207 	and.w	r2, r3, #7
 800a088:	4613      	mov	r3, r2
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	4413      	add	r3, r2
 800a08e:	00db      	lsls	r3, r3, #3
 800a090:	3310      	adds	r3, #16
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	4413      	add	r3, r2
 800a096:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2201      	movs	r2, #1
 800a09c:	705a      	strb	r2, [r3, #1]
 800a09e:	e00c      	b.n	800a0ba <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a0a0:	78fa      	ldrb	r2, [r7, #3]
 800a0a2:	4613      	mov	r3, r2
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	4413      	add	r3, r2
 800a0a8:	00db      	lsls	r3, r3, #3
 800a0aa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	4413      	add	r3, r2
 800a0b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2201      	movs	r2, #1
 800a0be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a0c0:	78fb      	ldrb	r3, [r7, #3]
 800a0c2:	f003 0307 	and.w	r3, r3, #7
 800a0c6:	b2da      	uxtb	r2, r3
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	d101      	bne.n	800a0da <HAL_PCD_EP_SetStall+0x7e>
 800a0d6:	2302      	movs	r3, #2
 800a0d8:	e00e      	b.n	800a0f8 <HAL_PCD_EP_SetStall+0x9c>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	68f9      	ldr	r1, [r7, #12]
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f007 fbd2 	bl	8011892 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a0f6:	2300      	movs	r3, #0
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3710      	adds	r7, #16
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	460b      	mov	r3, r1
 800a10a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a10c:	78fb      	ldrb	r3, [r7, #3]
 800a10e:	f003 030f 	and.w	r3, r3, #15
 800a112:	687a      	ldr	r2, [r7, #4]
 800a114:	7912      	ldrb	r2, [r2, #4]
 800a116:	4293      	cmp	r3, r2
 800a118:	d901      	bls.n	800a11e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a11a:	2301      	movs	r3, #1
 800a11c:	e040      	b.n	800a1a0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a11e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a122:	2b00      	cmp	r3, #0
 800a124:	da0e      	bge.n	800a144 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a126:	78fb      	ldrb	r3, [r7, #3]
 800a128:	f003 0207 	and.w	r2, r3, #7
 800a12c:	4613      	mov	r3, r2
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	4413      	add	r3, r2
 800a132:	00db      	lsls	r3, r3, #3
 800a134:	3310      	adds	r3, #16
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	4413      	add	r3, r2
 800a13a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2201      	movs	r2, #1
 800a140:	705a      	strb	r2, [r3, #1]
 800a142:	e00e      	b.n	800a162 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a144:	78fb      	ldrb	r3, [r7, #3]
 800a146:	f003 0207 	and.w	r2, r3, #7
 800a14a:	4613      	mov	r3, r2
 800a14c:	009b      	lsls	r3, r3, #2
 800a14e:	4413      	add	r3, r2
 800a150:	00db      	lsls	r3, r3, #3
 800a152:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	4413      	add	r3, r2
 800a15a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2200      	movs	r2, #0
 800a160:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2200      	movs	r2, #0
 800a166:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a168:	78fb      	ldrb	r3, [r7, #3]
 800a16a:	f003 0307 	and.w	r3, r3, #7
 800a16e:	b2da      	uxtb	r2, r3
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d101      	bne.n	800a182 <HAL_PCD_EP_ClrStall+0x82>
 800a17e:	2302      	movs	r3, #2
 800a180:	e00e      	b.n	800a1a0 <HAL_PCD_EP_ClrStall+0xa0>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2201      	movs	r2, #1
 800a186:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	68f9      	ldr	r1, [r7, #12]
 800a190:	4618      	mov	r0, r3
 800a192:	f007 fbcf 	bl	8011934 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2200      	movs	r2, #0
 800a19a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a19e:	2300      	movs	r3, #0
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3710      	adds	r7, #16
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b092      	sub	sp, #72	@ 0x48
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a1b0:	e333      	b.n	800a81a <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a1ba:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800a1bc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a1be:	b2db      	uxtb	r3, r3
 800a1c0:	f003 030f 	and.w	r3, r3, #15
 800a1c4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800a1c8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	f040 8108 	bne.w	800a3e2 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800a1d2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a1d4:	f003 0310 	and.w	r3, r3, #16
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d14c      	bne.n	800a276 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	881b      	ldrh	r3, [r3, #0]
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800a1e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1ec:	813b      	strh	r3, [r7, #8]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681a      	ldr	r2, [r3, #0]
 800a1f2:	893b      	ldrh	r3, [r7, #8]
 800a1f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	3310      	adds	r3, #16
 800a204:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a20e:	b29b      	uxth	r3, r3
 800a210:	461a      	mov	r2, r3
 800a212:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	00db      	lsls	r3, r3, #3
 800a218:	4413      	add	r3, r2
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	6812      	ldr	r2, [r2, #0]
 800a21e:	4413      	add	r3, r2
 800a220:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a224:	881b      	ldrh	r3, [r3, #0]
 800a226:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a22a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a22c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800a22e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a230:	695a      	ldr	r2, [r3, #20]
 800a232:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a234:	69db      	ldr	r3, [r3, #28]
 800a236:	441a      	add	r2, r3
 800a238:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a23a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800a23c:	2100      	movs	r1, #0
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f00e fcdf 	bl	8018c02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	7b1b      	ldrb	r3, [r3, #12]
 800a248:	b2db      	uxtb	r3, r3
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	f000 82e5 	beq.w	800a81a <PCD_EP_ISR_Handler+0x672>
 800a250:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a252:	699b      	ldr	r3, [r3, #24]
 800a254:	2b00      	cmp	r3, #0
 800a256:	f040 82e0 	bne.w	800a81a <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	7b1b      	ldrb	r3, [r3, #12]
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a264:	b2da      	uxtb	r2, r3
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	731a      	strb	r2, [r3, #12]
 800a274:	e2d1      	b.n	800a81a <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a27c:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	881b      	ldrh	r3, [r3, #0]
 800a284:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800a286:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a288:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d032      	beq.n	800a2f6 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a298:	b29b      	uxth	r3, r3
 800a29a:	461a      	mov	r2, r3
 800a29c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	00db      	lsls	r3, r3, #3
 800a2a2:	4413      	add	r3, r2
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	6812      	ldr	r2, [r2, #0]
 800a2a8:	4413      	add	r3, r2
 800a2aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a2ae:	881b      	ldrh	r3, [r3, #0]
 800a2b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a2b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2b6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6818      	ldr	r0, [r3, #0]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800a2c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2c4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800a2c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2c8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	f007 fc6e 	bl	8011bac <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	881b      	ldrh	r3, [r3, #0]
 800a2d6:	b29a      	uxth	r2, r3
 800a2d8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800a2dc:	4013      	ands	r3, r2
 800a2de:	817b      	strh	r3, [r7, #10]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	897a      	ldrh	r2, [r7, #10]
 800a2e6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a2ea:	b292      	uxth	r2, r2
 800a2ec:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f00e fc5a 	bl	8018ba8 <HAL_PCD_SetupStageCallback>
 800a2f4:	e291      	b.n	800a81a <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a2f6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	f280 828d 	bge.w	800a81a <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	881b      	ldrh	r3, [r3, #0]
 800a306:	b29a      	uxth	r2, r3
 800a308:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800a30c:	4013      	ands	r3, r2
 800a30e:	81fb      	strh	r3, [r7, #14]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	89fa      	ldrh	r2, [r7, #14]
 800a316:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a31a:	b292      	uxth	r2, r2
 800a31c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a326:	b29b      	uxth	r3, r3
 800a328:	461a      	mov	r2, r3
 800a32a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	00db      	lsls	r3, r3, #3
 800a330:	4413      	add	r3, r2
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	6812      	ldr	r2, [r2, #0]
 800a336:	4413      	add	r3, r2
 800a338:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a33c:	881b      	ldrh	r3, [r3, #0]
 800a33e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a342:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a344:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800a346:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a348:	69db      	ldr	r3, [r3, #28]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d019      	beq.n	800a382 <PCD_EP_ISR_Handler+0x1da>
 800a34e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a350:	695b      	ldr	r3, [r3, #20]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d015      	beq.n	800a382 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6818      	ldr	r0, [r3, #0]
 800a35a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a35c:	6959      	ldr	r1, [r3, #20]
 800a35e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a360:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800a362:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a364:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a366:	b29b      	uxth	r3, r3
 800a368:	f007 fc20 	bl	8011bac <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800a36c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a36e:	695a      	ldr	r2, [r3, #20]
 800a370:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a372:	69db      	ldr	r3, [r3, #28]
 800a374:	441a      	add	r2, r3
 800a376:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a378:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800a37a:	2100      	movs	r1, #0
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f00e fc25 	bl	8018bcc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	881b      	ldrh	r3, [r3, #0]
 800a388:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800a38a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a38c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a390:	2b00      	cmp	r3, #0
 800a392:	f040 8242 	bne.w	800a81a <PCD_EP_ISR_Handler+0x672>
 800a396:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a398:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a39c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a3a0:	f000 823b 	beq.w	800a81a <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	881b      	ldrh	r3, [r3, #0]
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a3b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3b4:	81bb      	strh	r3, [r7, #12]
 800a3b6:	89bb      	ldrh	r3, [r7, #12]
 800a3b8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a3bc:	81bb      	strh	r3, [r7, #12]
 800a3be:	89bb      	ldrh	r3, [r7, #12]
 800a3c0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a3c4:	81bb      	strh	r3, [r7, #12]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	89bb      	ldrh	r3, [r7, #12]
 800a3cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	8013      	strh	r3, [r2, #0]
 800a3e0:	e21b      	b.n	800a81a <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a3ec:	009b      	lsls	r3, r3, #2
 800a3ee:	4413      	add	r3, r2
 800a3f0:	881b      	ldrh	r3, [r3, #0]
 800a3f2:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a3f4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f280 80f1 	bge.w	800a5e0 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	461a      	mov	r2, r3
 800a404:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a408:	009b      	lsls	r3, r3, #2
 800a40a:	4413      	add	r3, r2
 800a40c:	881b      	ldrh	r3, [r3, #0]
 800a40e:	b29a      	uxth	r2, r3
 800a410:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800a414:	4013      	ands	r3, r2
 800a416:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	461a      	mov	r2, r3
 800a41e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	4413      	add	r3, r2
 800a426:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800a428:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a42c:	b292      	uxth	r2, r2
 800a42e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800a430:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800a434:	4613      	mov	r3, r2
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	4413      	add	r3, r2
 800a43a:	00db      	lsls	r3, r3, #3
 800a43c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	4413      	add	r3, r2
 800a444:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800a446:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a448:	7b1b      	ldrb	r3, [r3, #12]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d123      	bne.n	800a496 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a456:	b29b      	uxth	r3, r3
 800a458:	461a      	mov	r2, r3
 800a45a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	00db      	lsls	r3, r3, #3
 800a460:	4413      	add	r3, r2
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	6812      	ldr	r2, [r2, #0]
 800a466:	4413      	add	r3, r2
 800a468:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a46c:	881b      	ldrh	r3, [r3, #0]
 800a46e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a472:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 800a476:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	f000 808b 	beq.w	800a596 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6818      	ldr	r0, [r3, #0]
 800a484:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a486:	6959      	ldr	r1, [r3, #20]
 800a488:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a48a:	88da      	ldrh	r2, [r3, #6]
 800a48c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a490:	f007 fb8c 	bl	8011bac <USB_ReadPMA>
 800a494:	e07f      	b.n	800a596 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800a496:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a498:	78db      	ldrb	r3, [r3, #3]
 800a49a:	2b02      	cmp	r3, #2
 800a49c:	d109      	bne.n	800a4b2 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800a49e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 f9c6 	bl	800a836 <HAL_PCD_EP_DB_Receive>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a4b0:	e071      	b.n	800a596 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	4413      	add	r3, r2
 800a4c0:	881b      	ldrh	r3, [r3, #0]
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4cc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	441a      	add	r2, r3
 800a4dc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a4de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a4e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a4e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a4ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	009b      	lsls	r3, r3, #2
 800a4fe:	4413      	add	r3, r2
 800a500:	881b      	ldrh	r3, [r3, #0]
 800a502:	b29b      	uxth	r3, r3
 800a504:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d022      	beq.n	800a552 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a514:	b29b      	uxth	r3, r3
 800a516:	461a      	mov	r2, r3
 800a518:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	00db      	lsls	r3, r3, #3
 800a51e:	4413      	add	r3, r2
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	6812      	ldr	r2, [r2, #0]
 800a524:	4413      	add	r3, r2
 800a526:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a52a:	881b      	ldrh	r3, [r3, #0]
 800a52c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a530:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800a534:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d02c      	beq.n	800a596 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6818      	ldr	r0, [r3, #0]
 800a540:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a542:	6959      	ldr	r1, [r3, #20]
 800a544:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a546:	891a      	ldrh	r2, [r3, #8]
 800a548:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a54c:	f007 fb2e 	bl	8011bac <USB_ReadPMA>
 800a550:	e021      	b.n	800a596 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	461a      	mov	r2, r3
 800a55e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	00db      	lsls	r3, r3, #3
 800a564:	4413      	add	r3, r2
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	6812      	ldr	r2, [r2, #0]
 800a56a:	4413      	add	r3, r2
 800a56c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a570:	881b      	ldrh	r3, [r3, #0]
 800a572:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a576:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800a57a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d009      	beq.n	800a596 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6818      	ldr	r0, [r3, #0]
 800a586:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a588:	6959      	ldr	r1, [r3, #20]
 800a58a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a58c:	895a      	ldrh	r2, [r3, #10]
 800a58e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a592:	f007 fb0b 	bl	8011bac <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800a596:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a598:	69da      	ldr	r2, [r3, #28]
 800a59a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a59e:	441a      	add	r2, r3
 800a5a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5a2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800a5a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5a6:	695a      	ldr	r2, [r3, #20]
 800a5a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a5ac:	441a      	add	r2, r3
 800a5ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5b0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800a5b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5b4:	699b      	ldr	r3, [r3, #24]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d005      	beq.n	800a5c6 <PCD_EP_ISR_Handler+0x41e>
 800a5ba:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800a5be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5c0:	691b      	ldr	r3, [r3, #16]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d206      	bcs.n	800a5d4 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800a5c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f00e fafd 	bl	8018bcc <HAL_PCD_DataOutStageCallback>
 800a5d2:	e005      	b.n	800a5e0 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f006 fbaa 	bl	8010d34 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800a5e0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a5e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	f000 8117 	beq.w	800a81a <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800a5ec:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800a5f0:	4613      	mov	r3, r2
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	4413      	add	r3, r2
 800a5f6:	00db      	lsls	r3, r3, #3
 800a5f8:	3310      	adds	r3, #16
 800a5fa:	687a      	ldr	r2, [r7, #4]
 800a5fc:	4413      	add	r3, r2
 800a5fe:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	461a      	mov	r2, r3
 800a606:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a60a:	009b      	lsls	r3, r3, #2
 800a60c:	4413      	add	r3, r2
 800a60e:	881b      	ldrh	r3, [r3, #0]
 800a610:	b29b      	uxth	r3, r3
 800a612:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800a616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a61a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	461a      	mov	r2, r3
 800a622:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a626:	009b      	lsls	r3, r3, #2
 800a628:	441a      	add	r2, r3
 800a62a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a62c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a630:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a634:	b29b      	uxth	r3, r3
 800a636:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800a638:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a63a:	78db      	ldrb	r3, [r3, #3]
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	f040 80a1 	bne.w	800a784 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800a642:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a644:	2200      	movs	r2, #0
 800a646:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800a648:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a64a:	7b1b      	ldrb	r3, [r3, #12]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	f000 8092 	beq.w	800a776 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a652:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d046      	beq.n	800a6ea <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a65c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a65e:	785b      	ldrb	r3, [r3, #1]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d126      	bne.n	800a6b2 <PCD_EP_ISR_Handler+0x50a>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	617b      	str	r3, [r7, #20]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a672:	b29b      	uxth	r3, r3
 800a674:	461a      	mov	r2, r3
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	4413      	add	r3, r2
 800a67a:	617b      	str	r3, [r7, #20]
 800a67c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a67e:	781b      	ldrb	r3, [r3, #0]
 800a680:	00da      	lsls	r2, r3, #3
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	4413      	add	r3, r2
 800a686:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a68a:	613b      	str	r3, [r7, #16]
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	881b      	ldrh	r3, [r3, #0]
 800a690:	b29b      	uxth	r3, r3
 800a692:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a696:	b29a      	uxth	r2, r3
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	801a      	strh	r2, [r3, #0]
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	881b      	ldrh	r3, [r3, #0]
 800a6a0:	b29b      	uxth	r3, r3
 800a6a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6aa:	b29a      	uxth	r2, r3
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	801a      	strh	r2, [r3, #0]
 800a6b0:	e061      	b.n	800a776 <PCD_EP_ISR_Handler+0x5ce>
 800a6b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6b4:	785b      	ldrb	r3, [r3, #1]
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d15d      	bne.n	800a776 <PCD_EP_ISR_Handler+0x5ce>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	61fb      	str	r3, [r7, #28]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	61fb      	str	r3, [r7, #28]
 800a6d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	00da      	lsls	r2, r3, #3
 800a6d8:	69fb      	ldr	r3, [r7, #28]
 800a6da:	4413      	add	r3, r2
 800a6dc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a6e0:	61bb      	str	r3, [r7, #24]
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	801a      	strh	r2, [r3, #0]
 800a6e8:	e045      	b.n	800a776 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a6f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6f2:	785b      	ldrb	r3, [r3, #1]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d126      	bne.n	800a746 <PCD_EP_ISR_Handler+0x59e>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a706:	b29b      	uxth	r3, r3
 800a708:	461a      	mov	r2, r3
 800a70a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a70c:	4413      	add	r3, r2
 800a70e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a710:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	00da      	lsls	r2, r3, #3
 800a716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a718:	4413      	add	r3, r2
 800a71a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a71e:	623b      	str	r3, [r7, #32]
 800a720:	6a3b      	ldr	r3, [r7, #32]
 800a722:	881b      	ldrh	r3, [r3, #0]
 800a724:	b29b      	uxth	r3, r3
 800a726:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a72a:	b29a      	uxth	r2, r3
 800a72c:	6a3b      	ldr	r3, [r7, #32]
 800a72e:	801a      	strh	r2, [r3, #0]
 800a730:	6a3b      	ldr	r3, [r7, #32]
 800a732:	881b      	ldrh	r3, [r3, #0]
 800a734:	b29b      	uxth	r3, r3
 800a736:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a73a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a73e:	b29a      	uxth	r2, r3
 800a740:	6a3b      	ldr	r3, [r7, #32]
 800a742:	801a      	strh	r2, [r3, #0]
 800a744:	e017      	b.n	800a776 <PCD_EP_ISR_Handler+0x5ce>
 800a746:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a748:	785b      	ldrb	r3, [r3, #1]
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d113      	bne.n	800a776 <PCD_EP_ISR_Handler+0x5ce>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a756:	b29b      	uxth	r3, r3
 800a758:	461a      	mov	r2, r3
 800a75a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a75c:	4413      	add	r3, r2
 800a75e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a760:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	00da      	lsls	r2, r3, #3
 800a766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a768:	4413      	add	r3, r2
 800a76a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a76e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a772:	2200      	movs	r2, #0
 800a774:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a776:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a778:	781b      	ldrb	r3, [r3, #0]
 800a77a:	4619      	mov	r1, r3
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f00e fa40 	bl	8018c02 <HAL_PCD_DataInStageCallback>
 800a782:	e04a      	b.n	800a81a <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800a784:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d13f      	bne.n	800a80e <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a796:	b29b      	uxth	r3, r3
 800a798:	461a      	mov	r2, r3
 800a79a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	00db      	lsls	r3, r3, #3
 800a7a0:	4413      	add	r3, r2
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	6812      	ldr	r2, [r2, #0]
 800a7a6:	4413      	add	r3, r2
 800a7a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a7ac:	881b      	ldrh	r3, [r3, #0]
 800a7ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7b2:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 800a7b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7b6:	699a      	ldr	r2, [r3, #24]
 800a7b8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d906      	bls.n	800a7cc <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800a7be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7c0:	699a      	ldr	r2, [r3, #24]
 800a7c2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800a7c4:	1ad2      	subs	r2, r2, r3
 800a7c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7c8:	619a      	str	r2, [r3, #24]
 800a7ca:	e002      	b.n	800a7d2 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800a7cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800a7d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7d4:	699b      	ldr	r3, [r3, #24]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d106      	bne.n	800a7e8 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a7da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	4619      	mov	r1, r3
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f00e fa0e 	bl	8018c02 <HAL_PCD_DataInStageCallback>
 800a7e6:	e018      	b.n	800a81a <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800a7e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7ea:	695a      	ldr	r2, [r3, #20]
 800a7ec:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800a7ee:	441a      	add	r2, r3
 800a7f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7f2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800a7f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7f6:	69da      	ldr	r2, [r3, #28]
 800a7f8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800a7fa:	441a      	add	r2, r3
 800a7fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7fe:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a806:	4618      	mov	r0, r3
 800a808:	f006 fa94 	bl	8010d34 <USB_EPStartXfer>
 800a80c:	e005      	b.n	800a81a <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800a80e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a810:	461a      	mov	r2, r3
 800a812:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f000 f917 	bl	800aa48 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a822:	b29b      	uxth	r3, r3
 800a824:	b21b      	sxth	r3, r3
 800a826:	2b00      	cmp	r3, #0
 800a828:	f6ff acc3 	blt.w	800a1b2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800a82c:	2300      	movs	r3, #0
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3748      	adds	r7, #72	@ 0x48
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}

0800a836 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a836:	b580      	push	{r7, lr}
 800a838:	b088      	sub	sp, #32
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	60f8      	str	r0, [r7, #12]
 800a83e:	60b9      	str	r1, [r7, #8]
 800a840:	4613      	mov	r3, r2
 800a842:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a844:	88fb      	ldrh	r3, [r7, #6]
 800a846:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d07c      	beq.n	800a948 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a856:	b29b      	uxth	r3, r3
 800a858:	461a      	mov	r2, r3
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	00db      	lsls	r3, r3, #3
 800a860:	4413      	add	r3, r2
 800a862:	68fa      	ldr	r2, [r7, #12]
 800a864:	6812      	ldr	r2, [r2, #0]
 800a866:	4413      	add	r3, r2
 800a868:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a86c:	881b      	ldrh	r3, [r3, #0]
 800a86e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a872:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	699a      	ldr	r2, [r3, #24]
 800a878:	8b7b      	ldrh	r3, [r7, #26]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d306      	bcc.n	800a88c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	699a      	ldr	r2, [r3, #24]
 800a882:	8b7b      	ldrh	r3, [r7, #26]
 800a884:	1ad2      	subs	r2, r2, r3
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	619a      	str	r2, [r3, #24]
 800a88a:	e002      	b.n	800a892 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	2200      	movs	r2, #0
 800a890:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	699b      	ldr	r3, [r3, #24]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d123      	bne.n	800a8e2 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	461a      	mov	r2, r3
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	009b      	lsls	r3, r3, #2
 800a8a6:	4413      	add	r3, r2
 800a8a8:	881b      	ldrh	r3, [r3, #0]
 800a8aa:	b29b      	uxth	r3, r3
 800a8ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a8b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8b4:	833b      	strh	r3, [r7, #24]
 800a8b6:	8b3b      	ldrh	r3, [r7, #24]
 800a8b8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a8bc:	833b      	strh	r3, [r7, #24]
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	009b      	lsls	r3, r3, #2
 800a8ca:	441a      	add	r2, r3
 800a8cc:	8b3b      	ldrh	r3, [r7, #24]
 800a8ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a8d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a8d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a8da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a8e2:	88fb      	ldrh	r3, [r7, #6]
 800a8e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d01f      	beq.n	800a92c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	781b      	ldrb	r3, [r3, #0]
 800a8f6:	009b      	lsls	r3, r3, #2
 800a8f8:	4413      	add	r3, r2
 800a8fa:	881b      	ldrh	r3, [r3, #0]
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a906:	82fb      	strh	r3, [r7, #22]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	461a      	mov	r2, r3
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	441a      	add	r2, r3
 800a916:	8afb      	ldrh	r3, [r7, #22]
 800a918:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a91c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a920:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a924:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a928:	b29b      	uxth	r3, r3
 800a92a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800a92c:	8b7b      	ldrh	r3, [r7, #26]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	f000 8085 	beq.w	800aa3e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	6818      	ldr	r0, [r3, #0]
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	6959      	ldr	r1, [r3, #20]
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	891a      	ldrh	r2, [r3, #8]
 800a940:	8b7b      	ldrh	r3, [r7, #26]
 800a942:	f007 f933 	bl	8011bac <USB_ReadPMA>
 800a946:	e07a      	b.n	800aa3e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a950:	b29b      	uxth	r3, r3
 800a952:	461a      	mov	r2, r3
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	00db      	lsls	r3, r3, #3
 800a95a:	4413      	add	r3, r2
 800a95c:	68fa      	ldr	r2, [r7, #12]
 800a95e:	6812      	ldr	r2, [r2, #0]
 800a960:	4413      	add	r3, r2
 800a962:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a966:	881b      	ldrh	r3, [r3, #0]
 800a968:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a96c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	699a      	ldr	r2, [r3, #24]
 800a972:	8b7b      	ldrh	r3, [r7, #26]
 800a974:	429a      	cmp	r2, r3
 800a976:	d306      	bcc.n	800a986 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	699a      	ldr	r2, [r3, #24]
 800a97c:	8b7b      	ldrh	r3, [r7, #26]
 800a97e:	1ad2      	subs	r2, r2, r3
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	619a      	str	r2, [r3, #24]
 800a984:	e002      	b.n	800a98c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	2200      	movs	r2, #0
 800a98a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	699b      	ldr	r3, [r3, #24]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d123      	bne.n	800a9dc <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	461a      	mov	r2, r3
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	781b      	ldrb	r3, [r3, #0]
 800a99e:	009b      	lsls	r3, r3, #2
 800a9a0:	4413      	add	r3, r2
 800a9a2:	881b      	ldrh	r3, [r3, #0]
 800a9a4:	b29b      	uxth	r3, r3
 800a9a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a9aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9ae:	83fb      	strh	r3, [r7, #30]
 800a9b0:	8bfb      	ldrh	r3, [r7, #30]
 800a9b2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a9b6:	83fb      	strh	r3, [r7, #30]
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	461a      	mov	r2, r3
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	009b      	lsls	r3, r3, #2
 800a9c4:	441a      	add	r2, r3
 800a9c6:	8bfb      	ldrh	r3, [r7, #30]
 800a9c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a9cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a9d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800a9dc:	88fb      	ldrh	r3, [r7, #6]
 800a9de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d11f      	bne.n	800aa26 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	781b      	ldrb	r3, [r3, #0]
 800a9f0:	009b      	lsls	r3, r3, #2
 800a9f2:	4413      	add	r3, r2
 800a9f4:	881b      	ldrh	r3, [r3, #0]
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a9fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa00:	83bb      	strh	r3, [r7, #28]
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	461a      	mov	r2, r3
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	009b      	lsls	r3, r3, #2
 800aa0e:	441a      	add	r2, r3
 800aa10:	8bbb      	ldrh	r3, [r7, #28]
 800aa12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa1e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800aa22:	b29b      	uxth	r3, r3
 800aa24:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800aa26:	8b7b      	ldrh	r3, [r7, #26]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d008      	beq.n	800aa3e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	6818      	ldr	r0, [r3, #0]
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	6959      	ldr	r1, [r3, #20]
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	895a      	ldrh	r2, [r3, #10]
 800aa38:	8b7b      	ldrh	r3, [r7, #26]
 800aa3a:	f007 f8b7 	bl	8011bac <USB_ReadPMA>
    }
  }

  return count;
 800aa3e:	8b7b      	ldrh	r3, [r7, #26]
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3720      	adds	r7, #32
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b0a6      	sub	sp, #152	@ 0x98
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	60f8      	str	r0, [r7, #12]
 800aa50:	60b9      	str	r1, [r7, #8]
 800aa52:	4613      	mov	r3, r2
 800aa54:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800aa56:	88fb      	ldrh	r3, [r7, #6]
 800aa58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	f000 81f7 	beq.w	800ae50 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa6a:	b29b      	uxth	r3, r3
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	00db      	lsls	r3, r3, #3
 800aa74:	4413      	add	r3, r2
 800aa76:	68fa      	ldr	r2, [r7, #12]
 800aa78:	6812      	ldr	r2, [r2, #0]
 800aa7a:	4413      	add	r3, r2
 800aa7c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aa80:	881b      	ldrh	r3, [r3, #0]
 800aa82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa86:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	699a      	ldr	r2, [r3, #24]
 800aa8e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d907      	bls.n	800aaa6 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	699a      	ldr	r2, [r3, #24]
 800aa9a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800aa9e:	1ad2      	subs	r2, r2, r3
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	619a      	str	r2, [r3, #24]
 800aaa4:	e002      	b.n	800aaac <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	699b      	ldr	r3, [r3, #24]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	f040 80e1 	bne.w	800ac78 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	785b      	ldrb	r3, [r3, #1]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d126      	bne.n	800ab0c <HAL_PCD_EP_DB_Transmit+0xc4>
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	633b      	str	r3, [r7, #48]	@ 0x30
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aacc:	b29b      	uxth	r3, r3
 800aace:	461a      	mov	r2, r3
 800aad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad2:	4413      	add	r3, r2
 800aad4:	633b      	str	r3, [r7, #48]	@ 0x30
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	00da      	lsls	r2, r3, #3
 800aadc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aade:	4413      	add	r3, r2
 800aae0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aae8:	881b      	ldrh	r3, [r3, #0]
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aaf0:	b29a      	uxth	r2, r3
 800aaf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaf4:	801a      	strh	r2, [r3, #0]
 800aaf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaf8:	881b      	ldrh	r3, [r3, #0]
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab04:	b29a      	uxth	r2, r3
 800ab06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab08:	801a      	strh	r2, [r3, #0]
 800ab0a:	e01a      	b.n	800ab42 <HAL_PCD_EP_DB_Transmit+0xfa>
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	785b      	ldrb	r3, [r3, #1]
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d116      	bne.n	800ab42 <HAL_PCD_EP_DB_Transmit+0xfa>
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	461a      	mov	r2, r3
 800ab26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab28:	4413      	add	r3, r2
 800ab2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	00da      	lsls	r2, r3, #3
 800ab32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab34:	4413      	add	r3, r2
 800ab36:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ab3a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab3e:	2200      	movs	r2, #0
 800ab40:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	785b      	ldrb	r3, [r3, #1]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d126      	bne.n	800ab9e <HAL_PCD_EP_DB_Transmit+0x156>
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	623b      	str	r3, [r7, #32]
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	461a      	mov	r2, r3
 800ab62:	6a3b      	ldr	r3, [r7, #32]
 800ab64:	4413      	add	r3, r2
 800ab66:	623b      	str	r3, [r7, #32]
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	00da      	lsls	r2, r3, #3
 800ab6e:	6a3b      	ldr	r3, [r7, #32]
 800ab70:	4413      	add	r3, r2
 800ab72:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ab76:	61fb      	str	r3, [r7, #28]
 800ab78:	69fb      	ldr	r3, [r7, #28]
 800ab7a:	881b      	ldrh	r3, [r3, #0]
 800ab7c:	b29b      	uxth	r3, r3
 800ab7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab82:	b29a      	uxth	r2, r3
 800ab84:	69fb      	ldr	r3, [r7, #28]
 800ab86:	801a      	strh	r2, [r3, #0]
 800ab88:	69fb      	ldr	r3, [r7, #28]
 800ab8a:	881b      	ldrh	r3, [r3, #0]
 800ab8c:	b29b      	uxth	r3, r3
 800ab8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab96:	b29a      	uxth	r2, r3
 800ab98:	69fb      	ldr	r3, [r7, #28]
 800ab9a:	801a      	strh	r2, [r3, #0]
 800ab9c:	e017      	b.n	800abce <HAL_PCD_EP_DB_Transmit+0x186>
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	785b      	ldrb	r3, [r3, #1]
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	d113      	bne.n	800abce <HAL_PCD_EP_DB_Transmit+0x186>
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800abae:	b29b      	uxth	r3, r3
 800abb0:	461a      	mov	r2, r3
 800abb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abb4:	4413      	add	r3, r2
 800abb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	00da      	lsls	r2, r3, #3
 800abbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abc0:	4413      	add	r3, r2
 800abc2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800abc6:	627b      	str	r3, [r7, #36]	@ 0x24
 800abc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abca:	2200      	movs	r2, #0
 800abcc:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	78db      	ldrb	r3, [r3, #3]
 800abd2:	2b02      	cmp	r3, #2
 800abd4:	d123      	bne.n	800ac1e <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	461a      	mov	r2, r3
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	4413      	add	r3, r2
 800abe4:	881b      	ldrh	r3, [r3, #0]
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800abec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800abf0:	837b      	strh	r3, [r7, #26]
 800abf2:	8b7b      	ldrh	r3, [r7, #26]
 800abf4:	f083 0320 	eor.w	r3, r3, #32
 800abf8:	837b      	strh	r3, [r7, #26]
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	461a      	mov	r2, r3
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	441a      	add	r2, r3
 800ac08:	8b7b      	ldrh	r3, [r7, #26]
 800ac0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	4619      	mov	r1, r3
 800ac24:	68f8      	ldr	r0, [r7, #12]
 800ac26:	f00d ffec 	bl	8018c02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800ac2a:	88fb      	ldrh	r3, [r7, #6]
 800ac2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d01f      	beq.n	800ac74 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	461a      	mov	r2, r3
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	4413      	add	r3, r2
 800ac42:	881b      	ldrh	r3, [r3, #0]
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac4e:	833b      	strh	r3, [r7, #24]
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	461a      	mov	r2, r3
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	441a      	add	r2, r3
 800ac5e:	8b3b      	ldrh	r3, [r7, #24]
 800ac60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ac6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac70:	b29b      	uxth	r3, r3
 800ac72:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800ac74:	2300      	movs	r3, #0
 800ac76:	e31f      	b.n	800b2b8 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800ac78:	88fb      	ldrh	r3, [r7, #6]
 800ac7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d021      	beq.n	800acc6 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	461a      	mov	r2, r3
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	4413      	add	r3, r2
 800ac90:	881b      	ldrh	r3, [r3, #0]
 800ac92:	b29b      	uxth	r3, r3
 800ac94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac9c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	461a      	mov	r2, r3
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	009b      	lsls	r3, r3, #2
 800acac:	441a      	add	r2, r3
 800acae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800acb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800acb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800acba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800acbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acc2:	b29b      	uxth	r3, r3
 800acc4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800accc:	2b01      	cmp	r3, #1
 800acce:	f040 82ca 	bne.w	800b266 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	695a      	ldr	r2, [r3, #20]
 800acd6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800acda:	441a      	add	r2, r3
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	69da      	ldr	r2, [r3, #28]
 800ace4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ace8:	441a      	add	r2, r3
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	6a1a      	ldr	r2, [r3, #32]
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	691b      	ldr	r3, [r3, #16]
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d309      	bcc.n	800ad0e <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	691b      	ldr	r3, [r3, #16]
 800acfe:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	6a1a      	ldr	r2, [r3, #32]
 800ad04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ad06:	1ad2      	subs	r2, r2, r3
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	621a      	str	r2, [r3, #32]
 800ad0c:	e015      	b.n	800ad3a <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	6a1b      	ldr	r3, [r3, #32]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d107      	bne.n	800ad26 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 800ad16:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ad1a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800ad24:	e009      	b.n	800ad3a <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	6a1b      	ldr	r3, [r3, #32]
 800ad32:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	2200      	movs	r2, #0
 800ad38:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	785b      	ldrb	r3, [r3, #1]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d15f      	bne.n	800ae02 <HAL_PCD_EP_DB_Transmit+0x3ba>
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	461a      	mov	r2, r3
 800ad54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad56:	4413      	add	r3, r2
 800ad58:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	00da      	lsls	r2, r3, #3
 800ad60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad62:	4413      	add	r3, r2
 800ad64:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ad68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad6c:	881b      	ldrh	r3, [r3, #0]
 800ad6e:	b29b      	uxth	r3, r3
 800ad70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad74:	b29a      	uxth	r2, r3
 800ad76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad78:	801a      	strh	r2, [r3, #0]
 800ad7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d10a      	bne.n	800ad96 <HAL_PCD_EP_DB_Transmit+0x34e>
 800ad80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad82:	881b      	ldrh	r3, [r3, #0]
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad8e:	b29a      	uxth	r2, r3
 800ad90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad92:	801a      	strh	r2, [r3, #0]
 800ad94:	e051      	b.n	800ae3a <HAL_PCD_EP_DB_Transmit+0x3f2>
 800ad96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ad98:	2b3e      	cmp	r3, #62	@ 0x3e
 800ad9a:	d816      	bhi.n	800adca <HAL_PCD_EP_DB_Transmit+0x382>
 800ad9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ad9e:	085b      	lsrs	r3, r3, #1
 800ada0:	653b      	str	r3, [r7, #80]	@ 0x50
 800ada2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ada4:	f003 0301 	and.w	r3, r3, #1
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d002      	beq.n	800adb2 <HAL_PCD_EP_DB_Transmit+0x36a>
 800adac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800adae:	3301      	adds	r3, #1
 800adb0:	653b      	str	r3, [r7, #80]	@ 0x50
 800adb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adb4:	881b      	ldrh	r3, [r3, #0]
 800adb6:	b29a      	uxth	r2, r3
 800adb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800adba:	b29b      	uxth	r3, r3
 800adbc:	029b      	lsls	r3, r3, #10
 800adbe:	b29b      	uxth	r3, r3
 800adc0:	4313      	orrs	r3, r2
 800adc2:	b29a      	uxth	r2, r3
 800adc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adc6:	801a      	strh	r2, [r3, #0]
 800adc8:	e037      	b.n	800ae3a <HAL_PCD_EP_DB_Transmit+0x3f2>
 800adca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800adcc:	095b      	lsrs	r3, r3, #5
 800adce:	653b      	str	r3, [r7, #80]	@ 0x50
 800add0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800add2:	f003 031f 	and.w	r3, r3, #31
 800add6:	2b00      	cmp	r3, #0
 800add8:	d102      	bne.n	800ade0 <HAL_PCD_EP_DB_Transmit+0x398>
 800adda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800addc:	3b01      	subs	r3, #1
 800adde:	653b      	str	r3, [r7, #80]	@ 0x50
 800ade0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ade2:	881b      	ldrh	r3, [r3, #0]
 800ade4:	b29a      	uxth	r2, r3
 800ade6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ade8:	b29b      	uxth	r3, r3
 800adea:	029b      	lsls	r3, r3, #10
 800adec:	b29b      	uxth	r3, r3
 800adee:	4313      	orrs	r3, r2
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adfa:	b29a      	uxth	r2, r3
 800adfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adfe:	801a      	strh	r2, [r3, #0]
 800ae00:	e01b      	b.n	800ae3a <HAL_PCD_EP_DB_Transmit+0x3f2>
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	785b      	ldrb	r3, [r3, #1]
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	d117      	bne.n	800ae3a <HAL_PCD_EP_DB_Transmit+0x3f2>
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae18:	b29b      	uxth	r3, r3
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae1e:	4413      	add	r3, r2
 800ae20:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	00da      	lsls	r2, r3, #3
 800ae28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae2a:	4413      	add	r3, r2
 800ae2c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ae30:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ae34:	b29a      	uxth	r2, r3
 800ae36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae38:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	6818      	ldr	r0, [r3, #0]
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	6959      	ldr	r1, [r3, #20]
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	891a      	ldrh	r2, [r3, #8]
 800ae46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ae48:	b29b      	uxth	r3, r3
 800ae4a:	f006 fe6c 	bl	8011b26 <USB_WritePMA>
 800ae4e:	e20a      	b.n	800b266 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae58:	b29b      	uxth	r3, r3
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	00db      	lsls	r3, r3, #3
 800ae62:	4413      	add	r3, r2
 800ae64:	68fa      	ldr	r2, [r7, #12]
 800ae66:	6812      	ldr	r2, [r2, #0]
 800ae68:	4413      	add	r3, r2
 800ae6a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ae6e:	881b      	ldrh	r3, [r3, #0]
 800ae70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae74:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	699a      	ldr	r2, [r3, #24]
 800ae7c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d307      	bcc.n	800ae94 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	699a      	ldr	r2, [r3, #24]
 800ae88:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ae8c:	1ad2      	subs	r2, r2, r3
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	619a      	str	r2, [r3, #24]
 800ae92:	e002      	b.n	800ae9a <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	2200      	movs	r2, #0
 800ae98:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	699b      	ldr	r3, [r3, #24]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	f040 80f6 	bne.w	800b090 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	785b      	ldrb	r3, [r3, #1]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d126      	bne.n	800aefa <HAL_PCD_EP_DB_Transmit+0x4b2>
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	677b      	str	r3, [r7, #116]	@ 0x74
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aeba:	b29b      	uxth	r3, r3
 800aebc:	461a      	mov	r2, r3
 800aebe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aec0:	4413      	add	r3, r2
 800aec2:	677b      	str	r3, [r7, #116]	@ 0x74
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	00da      	lsls	r2, r3, #3
 800aeca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aecc:	4413      	add	r3, r2
 800aece:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aed2:	673b      	str	r3, [r7, #112]	@ 0x70
 800aed4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aed6:	881b      	ldrh	r3, [r3, #0]
 800aed8:	b29b      	uxth	r3, r3
 800aeda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aede:	b29a      	uxth	r2, r3
 800aee0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aee2:	801a      	strh	r2, [r3, #0]
 800aee4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aee6:	881b      	ldrh	r3, [r3, #0]
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aeee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aef2:	b29a      	uxth	r2, r3
 800aef4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aef6:	801a      	strh	r2, [r3, #0]
 800aef8:	e01a      	b.n	800af30 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	785b      	ldrb	r3, [r3, #1]
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d116      	bne.n	800af30 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af10:	b29b      	uxth	r3, r3
 800af12:	461a      	mov	r2, r3
 800af14:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800af16:	4413      	add	r3, r2
 800af18:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	781b      	ldrb	r3, [r3, #0]
 800af1e:	00da      	lsls	r2, r3, #3
 800af20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800af22:	4413      	add	r3, r2
 800af24:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800af28:	67bb      	str	r3, [r7, #120]	@ 0x78
 800af2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af2c:	2200      	movs	r2, #0
 800af2e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	785b      	ldrb	r3, [r3, #1]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d12f      	bne.n	800afa0 <HAL_PCD_EP_DB_Transmit+0x558>
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af50:	b29b      	uxth	r3, r3
 800af52:	461a      	mov	r2, r3
 800af54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800af58:	4413      	add	r3, r2
 800af5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	781b      	ldrb	r3, [r3, #0]
 800af62:	00da      	lsls	r2, r3, #3
 800af64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800af68:	4413      	add	r3, r2
 800af6a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800af6e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800af72:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800af76:	881b      	ldrh	r3, [r3, #0]
 800af78:	b29b      	uxth	r3, r3
 800af7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af7e:	b29a      	uxth	r2, r3
 800af80:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800af84:	801a      	strh	r2, [r3, #0]
 800af86:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800af8a:	881b      	ldrh	r3, [r3, #0]
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af96:	b29a      	uxth	r2, r3
 800af98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800af9c:	801a      	strh	r2, [r3, #0]
 800af9e:	e01c      	b.n	800afda <HAL_PCD_EP_DB_Transmit+0x592>
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	785b      	ldrb	r3, [r3, #1]
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d118      	bne.n	800afda <HAL_PCD_EP_DB_Transmit+0x592>
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	461a      	mov	r2, r3
 800afb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800afb8:	4413      	add	r3, r2
 800afba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	00da      	lsls	r2, r3, #3
 800afc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800afc8:	4413      	add	r3, r2
 800afca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800afce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800afd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800afd6:	2200      	movs	r2, #0
 800afd8:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	78db      	ldrb	r3, [r3, #3]
 800afde:	2b02      	cmp	r3, #2
 800afe0:	d127      	bne.n	800b032 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	461a      	mov	r2, r3
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	009b      	lsls	r3, r3, #2
 800afee:	4413      	add	r3, r2
 800aff0:	881b      	ldrh	r3, [r3, #0]
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aff8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800affc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b000:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b004:	f083 0320 	eor.w	r3, r3, #32
 800b008:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	461a      	mov	r2, r3
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	009b      	lsls	r3, r3, #2
 800b018:	441a      	add	r2, r3
 800b01a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b01e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b022:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b026:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b02a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b02e:	b29b      	uxth	r3, r3
 800b030:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	4619      	mov	r1, r3
 800b038:	68f8      	ldr	r0, [r7, #12]
 800b03a:	f00d fde2 	bl	8018c02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b03e:	88fb      	ldrh	r3, [r7, #6]
 800b040:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b044:	2b00      	cmp	r3, #0
 800b046:	d121      	bne.n	800b08c <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	461a      	mov	r2, r3
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	781b      	ldrb	r3, [r3, #0]
 800b052:	009b      	lsls	r3, r3, #2
 800b054:	4413      	add	r3, r2
 800b056:	881b      	ldrh	r3, [r3, #0]
 800b058:	b29b      	uxth	r3, r3
 800b05a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b05e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b062:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	461a      	mov	r2, r3
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	781b      	ldrb	r3, [r3, #0]
 800b070:	009b      	lsls	r3, r3, #2
 800b072:	441a      	add	r2, r3
 800b074:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b078:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b07c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b080:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b084:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b088:	b29b      	uxth	r3, r3
 800b08a:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800b08c:	2300      	movs	r3, #0
 800b08e:	e113      	b.n	800b2b8 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b090:	88fb      	ldrh	r3, [r7, #6]
 800b092:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b096:	2b00      	cmp	r3, #0
 800b098:	d121      	bne.n	800b0de <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	461a      	mov	r2, r3
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	781b      	ldrb	r3, [r3, #0]
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	4413      	add	r3, r2
 800b0a8:	881b      	ldrh	r3, [r3, #0]
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b0b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0b4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	461a      	mov	r2, r3
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	009b      	lsls	r3, r3, #2
 800b0c4:	441a      	add	r2, r3
 800b0c6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800b0ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b0ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b0d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b0d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0da:	b29b      	uxth	r3, r3
 800b0dc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	f040 80be 	bne.w	800b266 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	695a      	ldr	r2, [r3, #20]
 800b0ee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b0f2:	441a      	add	r2, r3
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	69da      	ldr	r2, [r3, #28]
 800b0fc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b100:	441a      	add	r2, r3
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	6a1a      	ldr	r2, [r3, #32]
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	691b      	ldr	r3, [r3, #16]
 800b10e:	429a      	cmp	r2, r3
 800b110:	d309      	bcc.n	800b126 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	691b      	ldr	r3, [r3, #16]
 800b116:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	6a1a      	ldr	r2, [r3, #32]
 800b11c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b11e:	1ad2      	subs	r2, r2, r3
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	621a      	str	r2, [r3, #32]
 800b124:	e015      	b.n	800b152 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	6a1b      	ldr	r3, [r3, #32]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d107      	bne.n	800b13e <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800b12e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b132:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	2200      	movs	r2, #0
 800b138:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800b13c:	e009      	b.n	800b152 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	6a1b      	ldr	r3, [r3, #32]
 800b142:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	2200      	movs	r2, #0
 800b148:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	2200      	movs	r2, #0
 800b14e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	785b      	ldrb	r3, [r3, #1]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d15f      	bne.n	800b220 <HAL_PCD_EP_DB_Transmit+0x7d8>
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b16e:	b29b      	uxth	r3, r3
 800b170:	461a      	mov	r2, r3
 800b172:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b174:	4413      	add	r3, r2
 800b176:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	00da      	lsls	r2, r3, #3
 800b17e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b180:	4413      	add	r3, r2
 800b182:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b186:	667b      	str	r3, [r7, #100]	@ 0x64
 800b188:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b18a:	881b      	ldrh	r3, [r3, #0]
 800b18c:	b29b      	uxth	r3, r3
 800b18e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b192:	b29a      	uxth	r2, r3
 800b194:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b196:	801a      	strh	r2, [r3, #0]
 800b198:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d10a      	bne.n	800b1b4 <HAL_PCD_EP_DB_Transmit+0x76c>
 800b19e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b1a0:	881b      	ldrh	r3, [r3, #0]
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1ac:	b29a      	uxth	r2, r3
 800b1ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b1b0:	801a      	strh	r2, [r3, #0]
 800b1b2:	e04e      	b.n	800b252 <HAL_PCD_EP_DB_Transmit+0x80a>
 800b1b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b1b6:	2b3e      	cmp	r3, #62	@ 0x3e
 800b1b8:	d816      	bhi.n	800b1e8 <HAL_PCD_EP_DB_Transmit+0x7a0>
 800b1ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b1bc:	085b      	lsrs	r3, r3, #1
 800b1be:	663b      	str	r3, [r7, #96]	@ 0x60
 800b1c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b1c2:	f003 0301 	and.w	r3, r3, #1
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d002      	beq.n	800b1d0 <HAL_PCD_EP_DB_Transmit+0x788>
 800b1ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	663b      	str	r3, [r7, #96]	@ 0x60
 800b1d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b1d2:	881b      	ldrh	r3, [r3, #0]
 800b1d4:	b29a      	uxth	r2, r3
 800b1d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b1d8:	b29b      	uxth	r3, r3
 800b1da:	029b      	lsls	r3, r3, #10
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	b29a      	uxth	r2, r3
 800b1e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b1e4:	801a      	strh	r2, [r3, #0]
 800b1e6:	e034      	b.n	800b252 <HAL_PCD_EP_DB_Transmit+0x80a>
 800b1e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b1ea:	095b      	lsrs	r3, r3, #5
 800b1ec:	663b      	str	r3, [r7, #96]	@ 0x60
 800b1ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b1f0:	f003 031f 	and.w	r3, r3, #31
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d102      	bne.n	800b1fe <HAL_PCD_EP_DB_Transmit+0x7b6>
 800b1f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b1fa:	3b01      	subs	r3, #1
 800b1fc:	663b      	str	r3, [r7, #96]	@ 0x60
 800b1fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b200:	881b      	ldrh	r3, [r3, #0]
 800b202:	b29a      	uxth	r2, r3
 800b204:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b206:	b29b      	uxth	r3, r3
 800b208:	029b      	lsls	r3, r3, #10
 800b20a:	b29b      	uxth	r3, r3
 800b20c:	4313      	orrs	r3, r2
 800b20e:	b29b      	uxth	r3, r3
 800b210:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b214:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b218:	b29a      	uxth	r2, r3
 800b21a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b21c:	801a      	strh	r2, [r3, #0]
 800b21e:	e018      	b.n	800b252 <HAL_PCD_EP_DB_Transmit+0x80a>
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	785b      	ldrb	r3, [r3, #1]
 800b224:	2b01      	cmp	r3, #1
 800b226:	d114      	bne.n	800b252 <HAL_PCD_EP_DB_Transmit+0x80a>
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b230:	b29b      	uxth	r3, r3
 800b232:	461a      	mov	r2, r3
 800b234:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b236:	4413      	add	r3, r2
 800b238:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	00da      	lsls	r2, r3, #3
 800b240:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b242:	4413      	add	r3, r2
 800b244:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b248:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b24a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b24c:	b29a      	uxth	r2, r3
 800b24e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b250:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	6818      	ldr	r0, [r3, #0]
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	6959      	ldr	r1, [r3, #20]
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	895a      	ldrh	r2, [r3, #10]
 800b25e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b260:	b29b      	uxth	r3, r3
 800b262:	f006 fc60 	bl	8011b26 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	461a      	mov	r2, r3
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	009b      	lsls	r3, r3, #2
 800b272:	4413      	add	r3, r2
 800b274:	881b      	ldrh	r3, [r3, #0]
 800b276:	b29b      	uxth	r3, r3
 800b278:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b27c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b280:	82fb      	strh	r3, [r7, #22]
 800b282:	8afb      	ldrh	r3, [r7, #22]
 800b284:	f083 0310 	eor.w	r3, r3, #16
 800b288:	82fb      	strh	r3, [r7, #22]
 800b28a:	8afb      	ldrh	r3, [r7, #22]
 800b28c:	f083 0320 	eor.w	r3, r3, #32
 800b290:	82fb      	strh	r3, [r7, #22]
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	461a      	mov	r2, r3
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	441a      	add	r2, r3
 800b2a0:	8afb      	ldrh	r3, [r7, #22]
 800b2a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b2a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b2aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b2ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800b2b6:	2300      	movs	r3, #0
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3798      	adds	r7, #152	@ 0x98
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b087      	sub	sp, #28
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	60f8      	str	r0, [r7, #12]
 800b2c8:	607b      	str	r3, [r7, #4]
 800b2ca:	460b      	mov	r3, r1
 800b2cc:	817b      	strh	r3, [r7, #10]
 800b2ce:	4613      	mov	r3, r2
 800b2d0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800b2d2:	897b      	ldrh	r3, [r7, #10]
 800b2d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2d8:	b29b      	uxth	r3, r3
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d00b      	beq.n	800b2f6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b2de:	897b      	ldrh	r3, [r7, #10]
 800b2e0:	f003 0207 	and.w	r2, r3, #7
 800b2e4:	4613      	mov	r3, r2
 800b2e6:	009b      	lsls	r3, r3, #2
 800b2e8:	4413      	add	r3, r2
 800b2ea:	00db      	lsls	r3, r3, #3
 800b2ec:	3310      	adds	r3, #16
 800b2ee:	68fa      	ldr	r2, [r7, #12]
 800b2f0:	4413      	add	r3, r2
 800b2f2:	617b      	str	r3, [r7, #20]
 800b2f4:	e009      	b.n	800b30a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b2f6:	897a      	ldrh	r2, [r7, #10]
 800b2f8:	4613      	mov	r3, r2
 800b2fa:	009b      	lsls	r3, r3, #2
 800b2fc:	4413      	add	r3, r2
 800b2fe:	00db      	lsls	r3, r3, #3
 800b300:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b304:	68fa      	ldr	r2, [r7, #12]
 800b306:	4413      	add	r3, r2
 800b308:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800b30a:	893b      	ldrh	r3, [r7, #8]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d107      	bne.n	800b320 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	2200      	movs	r2, #0
 800b314:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	b29a      	uxth	r2, r3
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	80da      	strh	r2, [r3, #6]
 800b31e:	e00b      	b.n	800b338 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	2201      	movs	r2, #1
 800b324:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	b29a      	uxth	r2, r3
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	0c1b      	lsrs	r3, r3, #16
 800b332:	b29a      	uxth	r2, r3
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b338:	2300      	movs	r3, #0
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	371c      	adds	r7, #28
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr

0800b346 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b346:	b480      	push	{r7}
 800b348:	b085      	sub	sp, #20
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2201      	movs	r2, #1
 800b358:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2200      	movs	r2, #0
 800b360:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	f043 0301 	orr.w	r3, r3, #1
 800b370:	b29a      	uxth	r2, r3
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800b37e:	b29b      	uxth	r3, r3
 800b380:	f043 0302 	orr.w	r3, r3, #2
 800b384:	b29a      	uxth	r2, r3
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800b38c:	2300      	movs	r3, #0
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3714      	adds	r7, #20
 800b392:	46bd      	mov	sp, r7
 800b394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b398:	4770      	bx	lr
	...

0800b39c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b39c:	b480      	push	{r7}
 800b39e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b3a0:	4b05      	ldr	r3, [pc, #20]	@ (800b3b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	4a04      	ldr	r2, [pc, #16]	@ (800b3b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b3a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b3aa:	6013      	str	r3, [r2, #0]
}
 800b3ac:	bf00      	nop
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr
 800b3b6:	bf00      	nop
 800b3b8:	58000400 	.word	0x58000400

0800b3bc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800b3c0:	4b04      	ldr	r3, [pc, #16]	@ (800b3d4 <HAL_PWREx_GetVoltageRange+0x18>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr
 800b3d2:	bf00      	nop
 800b3d4:	58000400 	.word	0x58000400

0800b3d8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800b3dc:	4b05      	ldr	r3, [pc, #20]	@ (800b3f4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	4a04      	ldr	r2, [pc, #16]	@ (800b3f4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800b3e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b3e6:	6053      	str	r3, [r2, #4]
}
 800b3e8:	bf00      	nop
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr
 800b3f2:	bf00      	nop
 800b3f4:	58000400 	.word	0x58000400

0800b3f8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800b3fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b406:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b40a:	d101      	bne.n	800b410 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800b40c:	2301      	movs	r3, #1
 800b40e:	e000      	b.n	800b412 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800b410:	2300      	movs	r3, #0
}
 800b412:	4618      	mov	r0, r3
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr

0800b41c <LL_RCC_HSE_Enable>:
{
 800b41c:	b480      	push	{r7}
 800b41e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800b420:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b42a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b42e:	6013      	str	r3, [r2, #0]
}
 800b430:	bf00      	nop
 800b432:	46bd      	mov	sp, r7
 800b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b438:	4770      	bx	lr

0800b43a <LL_RCC_HSE_Disable>:
{
 800b43a:	b480      	push	{r7}
 800b43c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800b43e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b448:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b44c:	6013      	str	r3, [r2, #0]
}
 800b44e:	bf00      	nop
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr

0800b458 <LL_RCC_HSE_IsReady>:
{
 800b458:	b480      	push	{r7}
 800b45a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800b45c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b466:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b46a:	d101      	bne.n	800b470 <LL_RCC_HSE_IsReady+0x18>
 800b46c:	2301      	movs	r3, #1
 800b46e:	e000      	b.n	800b472 <LL_RCC_HSE_IsReady+0x1a>
 800b470:	2300      	movs	r3, #0
}
 800b472:	4618      	mov	r0, r3
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr

0800b47c <LL_RCC_HSI_Enable>:
{
 800b47c:	b480      	push	{r7}
 800b47e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800b480:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b48a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b48e:	6013      	str	r3, [r2, #0]
}
 800b490:	bf00      	nop
 800b492:	46bd      	mov	sp, r7
 800b494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b498:	4770      	bx	lr

0800b49a <LL_RCC_HSI_Disable>:
{
 800b49a:	b480      	push	{r7}
 800b49c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800b49e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b4a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b4ac:	6013      	str	r3, [r2, #0]
}
 800b4ae:	bf00      	nop
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr

0800b4b8 <LL_RCC_HSI_IsReady>:
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800b4bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b4c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b4ca:	d101      	bne.n	800b4d0 <LL_RCC_HSI_IsReady+0x18>
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	e000      	b.n	800b4d2 <LL_RCC_HSI_IsReady+0x1a>
 800b4d0:	2300      	movs	r3, #0
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr

0800b4dc <LL_RCC_HSI_SetCalibTrimming>:
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b083      	sub	sp, #12
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800b4e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	061b      	lsls	r3, r3, #24
 800b4f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	604b      	str	r3, [r1, #4]
}
 800b4fa:	bf00      	nop
 800b4fc:	370c      	adds	r7, #12
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr

0800b506 <LL_RCC_HSI48_Enable>:
{
 800b506:	b480      	push	{r7}
 800b508:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800b50a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b50e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b512:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b516:	f043 0301 	orr.w	r3, r3, #1
 800b51a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800b51e:	bf00      	nop
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr

0800b528 <LL_RCC_HSI48_Disable>:
{
 800b528:	b480      	push	{r7}
 800b52a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800b52c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b530:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b534:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b538:	f023 0301 	bic.w	r3, r3, #1
 800b53c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800b540:	bf00      	nop
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr

0800b54a <LL_RCC_HSI48_IsReady>:
{
 800b54a:	b480      	push	{r7}
 800b54c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800b54e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b552:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b556:	f003 0302 	and.w	r3, r3, #2
 800b55a:	2b02      	cmp	r3, #2
 800b55c:	d101      	bne.n	800b562 <LL_RCC_HSI48_IsReady+0x18>
 800b55e:	2301      	movs	r3, #1
 800b560:	e000      	b.n	800b564 <LL_RCC_HSI48_IsReady+0x1a>
 800b562:	2300      	movs	r3, #0
}
 800b564:	4618      	mov	r0, r3
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr

0800b56e <LL_RCC_LSE_Enable>:
{
 800b56e:	b480      	push	{r7}
 800b570:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b572:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b57a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b57e:	f043 0301 	orr.w	r3, r3, #1
 800b582:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b586:	bf00      	nop
 800b588:	46bd      	mov	sp, r7
 800b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58e:	4770      	bx	lr

0800b590 <LL_RCC_LSE_Disable>:
{
 800b590:	b480      	push	{r7}
 800b592:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b594:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b598:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b59c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b5a0:	f023 0301 	bic.w	r3, r3, #1
 800b5a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b5a8:	bf00      	nop
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b0:	4770      	bx	lr

0800b5b2 <LL_RCC_LSE_EnableBypass>:
{
 800b5b2:	b480      	push	{r7}
 800b5b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800b5b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b5ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b5c2:	f043 0304 	orr.w	r3, r3, #4
 800b5c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b5ca:	bf00      	nop
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr

0800b5d4 <LL_RCC_LSE_DisableBypass>:
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800b5d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b5dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b5e4:	f023 0304 	bic.w	r3, r3, #4
 800b5e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b5ec:	bf00      	nop
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f4:	4770      	bx	lr

0800b5f6 <LL_RCC_LSE_IsReady>:
{
 800b5f6:	b480      	push	{r7}
 800b5f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800b5fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b5fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b602:	f003 0302 	and.w	r3, r3, #2
 800b606:	2b02      	cmp	r3, #2
 800b608:	d101      	bne.n	800b60e <LL_RCC_LSE_IsReady+0x18>
 800b60a:	2301      	movs	r3, #1
 800b60c:	e000      	b.n	800b610 <LL_RCC_LSE_IsReady+0x1a>
 800b60e:	2300      	movs	r3, #0
}
 800b610:	4618      	mov	r0, r3
 800b612:	46bd      	mov	sp, r7
 800b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b618:	4770      	bx	lr

0800b61a <LL_RCC_LSI1_Enable>:
{
 800b61a:	b480      	push	{r7}
 800b61c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800b61e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b622:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b626:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b62a:	f043 0301 	orr.w	r3, r3, #1
 800b62e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800b632:	bf00      	nop
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr

0800b63c <LL_RCC_LSI1_Disable>:
{
 800b63c:	b480      	push	{r7}
 800b63e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800b640:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b644:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b648:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b64c:	f023 0301 	bic.w	r3, r3, #1
 800b650:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800b654:	bf00      	nop
 800b656:	46bd      	mov	sp, r7
 800b658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65c:	4770      	bx	lr

0800b65e <LL_RCC_LSI1_IsReady>:
{
 800b65e:	b480      	push	{r7}
 800b660:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800b662:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b666:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b66a:	f003 0302 	and.w	r3, r3, #2
 800b66e:	2b02      	cmp	r3, #2
 800b670:	d101      	bne.n	800b676 <LL_RCC_LSI1_IsReady+0x18>
 800b672:	2301      	movs	r3, #1
 800b674:	e000      	b.n	800b678 <LL_RCC_LSI1_IsReady+0x1a>
 800b676:	2300      	movs	r3, #0
}
 800b678:	4618      	mov	r0, r3
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr

0800b682 <LL_RCC_LSI2_Enable>:
{
 800b682:	b480      	push	{r7}
 800b684:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800b686:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b68a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b68e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b692:	f043 0304 	orr.w	r3, r3, #4
 800b696:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800b69a:	bf00      	nop
 800b69c:	46bd      	mov	sp, r7
 800b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a2:	4770      	bx	lr

0800b6a4 <LL_RCC_LSI2_Disable>:
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800b6a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b6b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b6b4:	f023 0304 	bic.w	r3, r3, #4
 800b6b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800b6bc:	bf00      	nop
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c4:	4770      	bx	lr

0800b6c6 <LL_RCC_LSI2_IsReady>:
{
 800b6c6:	b480      	push	{r7}
 800b6c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800b6ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b6d2:	f003 0308 	and.w	r3, r3, #8
 800b6d6:	2b08      	cmp	r3, #8
 800b6d8:	d101      	bne.n	800b6de <LL_RCC_LSI2_IsReady+0x18>
 800b6da:	2301      	movs	r3, #1
 800b6dc:	e000      	b.n	800b6e0 <LL_RCC_LSI2_IsReady+0x1a>
 800b6de:	2300      	movs	r3, #0
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e8:	4770      	bx	lr

0800b6ea <LL_RCC_LSI2_SetTrimming>:
{
 800b6ea:	b480      	push	{r7}
 800b6ec:	b083      	sub	sp, #12
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800b6f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b6fa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	021b      	lsls	r3, r3, #8
 800b702:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b706:	4313      	orrs	r3, r2
 800b708:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800b70c:	bf00      	nop
 800b70e:	370c      	adds	r7, #12
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr

0800b718 <LL_RCC_MSI_Enable>:
{
 800b718:	b480      	push	{r7}
 800b71a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800b71c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b726:	f043 0301 	orr.w	r3, r3, #1
 800b72a:	6013      	str	r3, [r2, #0]
}
 800b72c:	bf00      	nop
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr

0800b736 <LL_RCC_MSI_Disable>:
{
 800b736:	b480      	push	{r7}
 800b738:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800b73a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b744:	f023 0301 	bic.w	r3, r3, #1
 800b748:	6013      	str	r3, [r2, #0]
}
 800b74a:	bf00      	nop
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr

0800b754 <LL_RCC_MSI_IsReady>:
{
 800b754:	b480      	push	{r7}
 800b756:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800b758:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f003 0302 	and.w	r3, r3, #2
 800b762:	2b02      	cmp	r3, #2
 800b764:	d101      	bne.n	800b76a <LL_RCC_MSI_IsReady+0x16>
 800b766:	2301      	movs	r3, #1
 800b768:	e000      	b.n	800b76c <LL_RCC_MSI_IsReady+0x18>
 800b76a:	2300      	movs	r3, #0
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	46bd      	mov	sp, r7
 800b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b774:	4770      	bx	lr

0800b776 <LL_RCC_MSI_SetRange>:
{
 800b776:	b480      	push	{r7}
 800b778:	b083      	sub	sp, #12
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800b77e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b788:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	4313      	orrs	r3, r2
 800b790:	600b      	str	r3, [r1, #0]
}
 800b792:	bf00      	nop
 800b794:	370c      	adds	r7, #12
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr

0800b79e <LL_RCC_MSI_GetRange>:
{
 800b79e:	b480      	push	{r7}
 800b7a0:	b083      	sub	sp, #12
 800b7a2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800b7a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b7ae:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2bb0      	cmp	r3, #176	@ 0xb0
 800b7b4:	d901      	bls.n	800b7ba <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800b7b6:	23b0      	movs	r3, #176	@ 0xb0
 800b7b8:	607b      	str	r3, [r7, #4]
  return msiRange;
 800b7ba:	687b      	ldr	r3, [r7, #4]
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	370c      	adds	r7, #12
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr

0800b7c8 <LL_RCC_MSI_SetCalibTrimming>:
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b083      	sub	sp, #12
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800b7d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	021b      	lsls	r3, r3, #8
 800b7de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	604b      	str	r3, [r1, #4]
}
 800b7e6:	bf00      	nop
 800b7e8:	370c      	adds	r7, #12
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr

0800b7f2 <LL_RCC_SetSysClkSource>:
{
 800b7f2:	b480      	push	{r7}
 800b7f4:	b083      	sub	sp, #12
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800b7fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b7fe:	689b      	ldr	r3, [r3, #8]
 800b800:	f023 0203 	bic.w	r2, r3, #3
 800b804:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	4313      	orrs	r3, r2
 800b80c:	608b      	str	r3, [r1, #8]
}
 800b80e:	bf00      	nop
 800b810:	370c      	adds	r7, #12
 800b812:	46bd      	mov	sp, r7
 800b814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b818:	4770      	bx	lr

0800b81a <LL_RCC_GetSysClkSource>:
{
 800b81a:	b480      	push	{r7}
 800b81c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800b81e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b822:	689b      	ldr	r3, [r3, #8]
 800b824:	f003 030c 	and.w	r3, r3, #12
}
 800b828:	4618      	mov	r0, r3
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr

0800b832 <LL_RCC_SetAHBPrescaler>:
{
 800b832:	b480      	push	{r7}
 800b834:	b083      	sub	sp, #12
 800b836:	af00      	add	r7, sp, #0
 800b838:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800b83a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b83e:	689b      	ldr	r3, [r3, #8]
 800b840:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b844:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	4313      	orrs	r3, r2
 800b84c:	608b      	str	r3, [r1, #8]
}
 800b84e:	bf00      	nop
 800b850:	370c      	adds	r7, #12
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr

0800b85a <LL_C2_RCC_SetAHBPrescaler>:
{
 800b85a:	b480      	push	{r7}
 800b85c:	b083      	sub	sp, #12
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800b862:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b866:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b86a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b86e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	4313      	orrs	r3, r2
 800b876:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800b87a:	bf00      	nop
 800b87c:	370c      	adds	r7, #12
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr

0800b886 <LL_RCC_SetAHB4Prescaler>:
{
 800b886:	b480      	push	{r7}
 800b888:	b083      	sub	sp, #12
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800b88e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b892:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b896:	f023 020f 	bic.w	r2, r3, #15
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	091b      	lsrs	r3, r3, #4
 800b89e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800b8a8:	bf00      	nop
 800b8aa:	370c      	adds	r7, #12
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr

0800b8b4 <LL_RCC_SetAPB1Prescaler>:
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b083      	sub	sp, #12
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800b8bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b8c0:	689b      	ldr	r3, [r3, #8]
 800b8c2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b8c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	4313      	orrs	r3, r2
 800b8ce:	608b      	str	r3, [r1, #8]
}
 800b8d0:	bf00      	nop
 800b8d2:	370c      	adds	r7, #12
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8da:	4770      	bx	lr

0800b8dc <LL_RCC_SetAPB2Prescaler>:
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b083      	sub	sp, #12
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800b8e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b8e8:	689b      	ldr	r3, [r3, #8]
 800b8ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800b8ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	608b      	str	r3, [r1, #8]
}
 800b8f8:	bf00      	nop
 800b8fa:	370c      	adds	r7, #12
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr

0800b904 <LL_RCC_GetAHBPrescaler>:
{
 800b904:	b480      	push	{r7}
 800b906:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800b908:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b90c:	689b      	ldr	r3, [r3, #8]
 800b90e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800b912:	4618      	mov	r0, r3
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr

0800b91c <LL_RCC_GetAHB4Prescaler>:
{
 800b91c:	b480      	push	{r7}
 800b91e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800b920:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b924:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b928:	011b      	lsls	r3, r3, #4
 800b92a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800b92e:	4618      	mov	r0, r3
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr

0800b938 <LL_RCC_GetAPB1Prescaler>:
{
 800b938:	b480      	push	{r7}
 800b93a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800b93c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b940:	689b      	ldr	r3, [r3, #8]
 800b942:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800b946:	4618      	mov	r0, r3
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr

0800b950 <LL_RCC_GetAPB2Prescaler>:
{
 800b950:	b480      	push	{r7}
 800b952:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800b954:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b958:	689b      	ldr	r3, [r3, #8]
 800b95a:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800b95e:	4618      	mov	r0, r3
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr

0800b968 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800b968:	b480      	push	{r7}
 800b96a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800b96c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b976:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b97a:	6013      	str	r3, [r2, #0]
}
 800b97c:	bf00      	nop
 800b97e:	46bd      	mov	sp, r7
 800b980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b984:	4770      	bx	lr

0800b986 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800b986:	b480      	push	{r7}
 800b988:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800b98a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b994:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b998:	6013      	str	r3, [r2, #0]
}
 800b99a:	bf00      	nop
 800b99c:	46bd      	mov	sp, r7
 800b99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a2:	4770      	bx	lr

0800b9a4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800b9a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b9b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b9b6:	d101      	bne.n	800b9bc <LL_RCC_PLL_IsReady+0x18>
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	e000      	b.n	800b9be <LL_RCC_PLL_IsReady+0x1a>
 800b9bc:	2300      	movs	r3, #0
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr

0800b9c8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800b9cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9d0:	68db      	ldr	r3, [r3, #12]
 800b9d2:	0a1b      	lsrs	r3, r3, #8
 800b9d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e0:	4770      	bx	lr

0800b9e2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800b9e2:	b480      	push	{r7}
 800b9e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800b9e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9ea:	68db      	ldr	r3, [r3, #12]
 800b9ec:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f8:	4770      	bx	lr

0800b9fa <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800b9fa:	b480      	push	{r7}
 800b9fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800b9fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba02:	68db      	ldr	r3, [r3, #12]
 800ba04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr

0800ba12 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800ba12:	b480      	push	{r7}
 800ba14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800ba16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba1a:	68db      	ldr	r3, [r3, #12]
 800ba1c:	f003 0303 	and.w	r3, r3, #3
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr

0800ba2a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800ba2a:	b480      	push	{r7}
 800ba2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800ba2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba32:	689b      	ldr	r3, [r3, #8]
 800ba34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ba38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba3c:	d101      	bne.n	800ba42 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800ba3e:	2301      	movs	r3, #1
 800ba40:	e000      	b.n	800ba44 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800ba42:	2300      	movs	r3, #0
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	46bd      	mov	sp, r7
 800ba48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4c:	4770      	bx	lr

0800ba4e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800ba4e:	b480      	push	{r7}
 800ba50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800ba52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba56:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800ba5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba62:	d101      	bne.n	800ba68 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800ba64:	2301      	movs	r3, #1
 800ba66:	e000      	b.n	800ba6a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800ba68:	2300      	movs	r3, #0
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba72:	4770      	bx	lr

0800ba74 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800ba74:	b480      	push	{r7}
 800ba76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800ba78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba7c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800ba80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ba84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba88:	d101      	bne.n	800ba8e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	e000      	b.n	800ba90 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800ba8e:	2300      	movs	r3, #0
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	46bd      	mov	sp, r7
 800ba94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba98:	4770      	bx	lr

0800ba9a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800ba9a:	b480      	push	{r7}
 800ba9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800ba9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800baa2:	689b      	ldr	r3, [r3, #8]
 800baa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800baa8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800baac:	d101      	bne.n	800bab2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800baae:	2301      	movs	r3, #1
 800bab0:	e000      	b.n	800bab4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800bab2:	2300      	movs	r3, #0
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	46bd      	mov	sp, r7
 800bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babc:	4770      	bx	lr

0800babe <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800babe:	b480      	push	{r7}
 800bac0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800bac2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bac6:	689b      	ldr	r3, [r3, #8]
 800bac8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bacc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bad0:	d101      	bne.n	800bad6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800bad2:	2301      	movs	r3, #1
 800bad4:	e000      	b.n	800bad8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800bad6:	2300      	movs	r3, #0
}
 800bad8:	4618      	mov	r0, r3
 800bada:	46bd      	mov	sp, r7
 800badc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae0:	4770      	bx	lr
	...

0800bae4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bae4:	b590      	push	{r4, r7, lr}
 800bae6:	b08d      	sub	sp, #52	@ 0x34
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d101      	bne.n	800baf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800baf2:	2301      	movs	r3, #1
 800baf4:	e363      	b.n	800c1be <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f003 0320 	and.w	r3, r3, #32
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	f000 808d 	beq.w	800bc1e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bb04:	f7ff fe89 	bl	800b81a <LL_RCC_GetSysClkSource>
 800bb08:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bb0a:	f7ff ff82 	bl	800ba12 <LL_RCC_PLL_GetMainSource>
 800bb0e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800bb10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d005      	beq.n	800bb22 <HAL_RCC_OscConfig+0x3e>
 800bb16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb18:	2b0c      	cmp	r3, #12
 800bb1a:	d147      	bne.n	800bbac <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800bb1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb1e:	2b01      	cmp	r3, #1
 800bb20:	d144      	bne.n	800bbac <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	69db      	ldr	r3, [r3, #28]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d101      	bne.n	800bb2e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	e347      	b.n	800c1be <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800bb32:	f7ff fe34 	bl	800b79e <LL_RCC_MSI_GetRange>
 800bb36:	4603      	mov	r3, r0
 800bb38:	429c      	cmp	r4, r3
 800bb3a:	d914      	bls.n	800bb66 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb40:	4618      	mov	r0, r3
 800bb42:	f000 fd2f 	bl	800c5a4 <RCC_SetFlashLatencyFromMSIRange>
 800bb46:	4603      	mov	r3, r0
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d001      	beq.n	800bb50 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	e336      	b.n	800c1be <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb54:	4618      	mov	r0, r3
 800bb56:	f7ff fe0e 	bl	800b776 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6a1b      	ldr	r3, [r3, #32]
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f7ff fe32 	bl	800b7c8 <LL_RCC_MSI_SetCalibTrimming>
 800bb64:	e013      	b.n	800bb8e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f7ff fe03 	bl	800b776 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6a1b      	ldr	r3, [r3, #32]
 800bb74:	4618      	mov	r0, r3
 800bb76:	f7ff fe27 	bl	800b7c8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f000 fd10 	bl	800c5a4 <RCC_SetFlashLatencyFromMSIRange>
 800bb84:	4603      	mov	r3, r0
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d001      	beq.n	800bb8e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	e317      	b.n	800c1be <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800bb8e:	f000 fcc9 	bl	800c524 <HAL_RCC_GetHCLKFreq>
 800bb92:	4603      	mov	r3, r0
 800bb94:	4aa4      	ldr	r2, [pc, #656]	@ (800be28 <HAL_RCC_OscConfig+0x344>)
 800bb96:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800bb98:	4ba4      	ldr	r3, [pc, #656]	@ (800be2c <HAL_RCC_OscConfig+0x348>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f7fb ff51 	bl	8007a44 <HAL_InitTick>
 800bba2:	4603      	mov	r3, r0
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d039      	beq.n	800bc1c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	e308      	b.n	800c1be <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	69db      	ldr	r3, [r3, #28]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d01e      	beq.n	800bbf2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800bbb4:	f7ff fdb0 	bl	800b718 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800bbb8:	f7fb ff92 	bl	8007ae0 <HAL_GetTick>
 800bbbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800bbbe:	e008      	b.n	800bbd2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bbc0:	f7fb ff8e 	bl	8007ae0 <HAL_GetTick>
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbc8:	1ad3      	subs	r3, r2, r3
 800bbca:	2b02      	cmp	r3, #2
 800bbcc:	d901      	bls.n	800bbd2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800bbce:	2303      	movs	r3, #3
 800bbd0:	e2f5      	b.n	800c1be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800bbd2:	f7ff fdbf 	bl	800b754 <LL_RCC_MSI_IsReady>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d0f1      	beq.n	800bbc0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f7ff fdc8 	bl	800b776 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6a1b      	ldr	r3, [r3, #32]
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7ff fdec 	bl	800b7c8 <LL_RCC_MSI_SetCalibTrimming>
 800bbf0:	e015      	b.n	800bc1e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800bbf2:	f7ff fda0 	bl	800b736 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800bbf6:	f7fb ff73 	bl	8007ae0 <HAL_GetTick>
 800bbfa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800bbfc:	e008      	b.n	800bc10 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bbfe:	f7fb ff6f 	bl	8007ae0 <HAL_GetTick>
 800bc02:	4602      	mov	r2, r0
 800bc04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc06:	1ad3      	subs	r3, r2, r3
 800bc08:	2b02      	cmp	r3, #2
 800bc0a:	d901      	bls.n	800bc10 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800bc0c:	2303      	movs	r3, #3
 800bc0e:	e2d6      	b.n	800c1be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800bc10:	f7ff fda0 	bl	800b754 <LL_RCC_MSI_IsReady>
 800bc14:	4603      	mov	r3, r0
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d1f1      	bne.n	800bbfe <HAL_RCC_OscConfig+0x11a>
 800bc1a:	e000      	b.n	800bc1e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800bc1c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f003 0301 	and.w	r3, r3, #1
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d047      	beq.n	800bcba <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bc2a:	f7ff fdf6 	bl	800b81a <LL_RCC_GetSysClkSource>
 800bc2e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bc30:	f7ff feef 	bl	800ba12 <LL_RCC_PLL_GetMainSource>
 800bc34:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800bc36:	6a3b      	ldr	r3, [r7, #32]
 800bc38:	2b08      	cmp	r3, #8
 800bc3a:	d005      	beq.n	800bc48 <HAL_RCC_OscConfig+0x164>
 800bc3c:	6a3b      	ldr	r3, [r7, #32]
 800bc3e:	2b0c      	cmp	r3, #12
 800bc40:	d108      	bne.n	800bc54 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800bc42:	69fb      	ldr	r3, [r7, #28]
 800bc44:	2b03      	cmp	r3, #3
 800bc46:	d105      	bne.n	800bc54 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d134      	bne.n	800bcba <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800bc50:	2301      	movs	r3, #1
 800bc52:	e2b4      	b.n	800c1be <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	685b      	ldr	r3, [r3, #4]
 800bc58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc5c:	d102      	bne.n	800bc64 <HAL_RCC_OscConfig+0x180>
 800bc5e:	f7ff fbdd 	bl	800b41c <LL_RCC_HSE_Enable>
 800bc62:	e001      	b.n	800bc68 <HAL_RCC_OscConfig+0x184>
 800bc64:	f7ff fbe9 	bl	800b43a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d012      	beq.n	800bc96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc70:	f7fb ff36 	bl	8007ae0 <HAL_GetTick>
 800bc74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800bc76:	e008      	b.n	800bc8a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bc78:	f7fb ff32 	bl	8007ae0 <HAL_GetTick>
 800bc7c:	4602      	mov	r2, r0
 800bc7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc80:	1ad3      	subs	r3, r2, r3
 800bc82:	2b64      	cmp	r3, #100	@ 0x64
 800bc84:	d901      	bls.n	800bc8a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800bc86:	2303      	movs	r3, #3
 800bc88:	e299      	b.n	800c1be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800bc8a:	f7ff fbe5 	bl	800b458 <LL_RCC_HSE_IsReady>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d0f1      	beq.n	800bc78 <HAL_RCC_OscConfig+0x194>
 800bc94:	e011      	b.n	800bcba <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc96:	f7fb ff23 	bl	8007ae0 <HAL_GetTick>
 800bc9a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800bc9c:	e008      	b.n	800bcb0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bc9e:	f7fb ff1f 	bl	8007ae0 <HAL_GetTick>
 800bca2:	4602      	mov	r2, r0
 800bca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bca6:	1ad3      	subs	r3, r2, r3
 800bca8:	2b64      	cmp	r3, #100	@ 0x64
 800bcaa:	d901      	bls.n	800bcb0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800bcac:	2303      	movs	r3, #3
 800bcae:	e286      	b.n	800c1be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800bcb0:	f7ff fbd2 	bl	800b458 <LL_RCC_HSE_IsReady>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d1f1      	bne.n	800bc9e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f003 0302 	and.w	r3, r3, #2
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d04c      	beq.n	800bd60 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bcc6:	f7ff fda8 	bl	800b81a <LL_RCC_GetSysClkSource>
 800bcca:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bccc:	f7ff fea1 	bl	800ba12 <LL_RCC_PLL_GetMainSource>
 800bcd0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800bcd2:	69bb      	ldr	r3, [r7, #24]
 800bcd4:	2b04      	cmp	r3, #4
 800bcd6:	d005      	beq.n	800bce4 <HAL_RCC_OscConfig+0x200>
 800bcd8:	69bb      	ldr	r3, [r7, #24]
 800bcda:	2b0c      	cmp	r3, #12
 800bcdc:	d10e      	bne.n	800bcfc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	2b02      	cmp	r3, #2
 800bce2:	d10b      	bne.n	800bcfc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	68db      	ldr	r3, [r3, #12]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d101      	bne.n	800bcf0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800bcec:	2301      	movs	r3, #1
 800bcee:	e266      	b.n	800c1be <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	691b      	ldr	r3, [r3, #16]
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f7ff fbf1 	bl	800b4dc <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800bcfa:	e031      	b.n	800bd60 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	68db      	ldr	r3, [r3, #12]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d019      	beq.n	800bd38 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bd04:	f7ff fbba 	bl	800b47c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd08:	f7fb feea 	bl	8007ae0 <HAL_GetTick>
 800bd0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800bd0e:	e008      	b.n	800bd22 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bd10:	f7fb fee6 	bl	8007ae0 <HAL_GetTick>
 800bd14:	4602      	mov	r2, r0
 800bd16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd18:	1ad3      	subs	r3, r2, r3
 800bd1a:	2b02      	cmp	r3, #2
 800bd1c:	d901      	bls.n	800bd22 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800bd1e:	2303      	movs	r3, #3
 800bd20:	e24d      	b.n	800c1be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800bd22:	f7ff fbc9 	bl	800b4b8 <LL_RCC_HSI_IsReady>
 800bd26:	4603      	mov	r3, r0
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d0f1      	beq.n	800bd10 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	691b      	ldr	r3, [r3, #16]
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7ff fbd3 	bl	800b4dc <LL_RCC_HSI_SetCalibTrimming>
 800bd36:	e013      	b.n	800bd60 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bd38:	f7ff fbaf 	bl	800b49a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd3c:	f7fb fed0 	bl	8007ae0 <HAL_GetTick>
 800bd40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800bd42:	e008      	b.n	800bd56 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bd44:	f7fb fecc 	bl	8007ae0 <HAL_GetTick>
 800bd48:	4602      	mov	r2, r0
 800bd4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd4c:	1ad3      	subs	r3, r2, r3
 800bd4e:	2b02      	cmp	r3, #2
 800bd50:	d901      	bls.n	800bd56 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800bd52:	2303      	movs	r3, #3
 800bd54:	e233      	b.n	800c1be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800bd56:	f7ff fbaf 	bl	800b4b8 <LL_RCC_HSI_IsReady>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d1f1      	bne.n	800bd44 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f003 0308 	and.w	r3, r3, #8
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d106      	bne.n	800bd7a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	f000 80a3 	beq.w	800bec0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	695b      	ldr	r3, [r3, #20]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d076      	beq.n	800be70 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f003 0310 	and.w	r3, r3, #16
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d046      	beq.n	800be1c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800bd8e:	f7ff fc66 	bl	800b65e <LL_RCC_LSI1_IsReady>
 800bd92:	4603      	mov	r3, r0
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d113      	bne.n	800bdc0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800bd98:	f7ff fc3f 	bl	800b61a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800bd9c:	f7fb fea0 	bl	8007ae0 <HAL_GetTick>
 800bda0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800bda2:	e008      	b.n	800bdb6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800bda4:	f7fb fe9c 	bl	8007ae0 <HAL_GetTick>
 800bda8:	4602      	mov	r2, r0
 800bdaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdac:	1ad3      	subs	r3, r2, r3
 800bdae:	2b02      	cmp	r3, #2
 800bdb0:	d901      	bls.n	800bdb6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800bdb2:	2303      	movs	r3, #3
 800bdb4:	e203      	b.n	800c1be <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800bdb6:	f7ff fc52 	bl	800b65e <LL_RCC_LSI1_IsReady>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d0f1      	beq.n	800bda4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800bdc0:	f7ff fc5f 	bl	800b682 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdc4:	f7fb fe8c 	bl	8007ae0 <HAL_GetTick>
 800bdc8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800bdca:	e008      	b.n	800bdde <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800bdcc:	f7fb fe88 	bl	8007ae0 <HAL_GetTick>
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdd4:	1ad3      	subs	r3, r2, r3
 800bdd6:	2b03      	cmp	r3, #3
 800bdd8:	d901      	bls.n	800bdde <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800bdda:	2303      	movs	r3, #3
 800bddc:	e1ef      	b.n	800c1be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800bdde:	f7ff fc72 	bl	800b6c6 <LL_RCC_LSI2_IsReady>
 800bde2:	4603      	mov	r3, r0
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d0f1      	beq.n	800bdcc <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	699b      	ldr	r3, [r3, #24]
 800bdec:	4618      	mov	r0, r3
 800bdee:	f7ff fc7c 	bl	800b6ea <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800bdf2:	f7ff fc23 	bl	800b63c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdf6:	f7fb fe73 	bl	8007ae0 <HAL_GetTick>
 800bdfa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800bdfc:	e008      	b.n	800be10 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800bdfe:	f7fb fe6f 	bl	8007ae0 <HAL_GetTick>
 800be02:	4602      	mov	r2, r0
 800be04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be06:	1ad3      	subs	r3, r2, r3
 800be08:	2b02      	cmp	r3, #2
 800be0a:	d901      	bls.n	800be10 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800be0c:	2303      	movs	r3, #3
 800be0e:	e1d6      	b.n	800c1be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800be10:	f7ff fc25 	bl	800b65e <LL_RCC_LSI1_IsReady>
 800be14:	4603      	mov	r3, r0
 800be16:	2b00      	cmp	r3, #0
 800be18:	d1f1      	bne.n	800bdfe <HAL_RCC_OscConfig+0x31a>
 800be1a:	e051      	b.n	800bec0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800be1c:	f7ff fbfd 	bl	800b61a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be20:	f7fb fe5e 	bl	8007ae0 <HAL_GetTick>
 800be24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800be26:	e00c      	b.n	800be42 <HAL_RCC_OscConfig+0x35e>
 800be28:	20000024 	.word	0x20000024
 800be2c:	20000028 	.word	0x20000028
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800be30:	f7fb fe56 	bl	8007ae0 <HAL_GetTick>
 800be34:	4602      	mov	r2, r0
 800be36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be38:	1ad3      	subs	r3, r2, r3
 800be3a:	2b02      	cmp	r3, #2
 800be3c:	d901      	bls.n	800be42 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800be3e:	2303      	movs	r3, #3
 800be40:	e1bd      	b.n	800c1be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800be42:	f7ff fc0c 	bl	800b65e <LL_RCC_LSI1_IsReady>
 800be46:	4603      	mov	r3, r0
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d0f1      	beq.n	800be30 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800be4c:	f7ff fc2a 	bl	800b6a4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800be50:	e008      	b.n	800be64 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800be52:	f7fb fe45 	bl	8007ae0 <HAL_GetTick>
 800be56:	4602      	mov	r2, r0
 800be58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be5a:	1ad3      	subs	r3, r2, r3
 800be5c:	2b03      	cmp	r3, #3
 800be5e:	d901      	bls.n	800be64 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800be60:	2303      	movs	r3, #3
 800be62:	e1ac      	b.n	800c1be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800be64:	f7ff fc2f 	bl	800b6c6 <LL_RCC_LSI2_IsReady>
 800be68:	4603      	mov	r3, r0
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d1f1      	bne.n	800be52 <HAL_RCC_OscConfig+0x36e>
 800be6e:	e027      	b.n	800bec0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800be70:	f7ff fc18 	bl	800b6a4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be74:	f7fb fe34 	bl	8007ae0 <HAL_GetTick>
 800be78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800be7a:	e008      	b.n	800be8e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800be7c:	f7fb fe30 	bl	8007ae0 <HAL_GetTick>
 800be80:	4602      	mov	r2, r0
 800be82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be84:	1ad3      	subs	r3, r2, r3
 800be86:	2b03      	cmp	r3, #3
 800be88:	d901      	bls.n	800be8e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800be8a:	2303      	movs	r3, #3
 800be8c:	e197      	b.n	800c1be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800be8e:	f7ff fc1a 	bl	800b6c6 <LL_RCC_LSI2_IsReady>
 800be92:	4603      	mov	r3, r0
 800be94:	2b00      	cmp	r3, #0
 800be96:	d1f1      	bne.n	800be7c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800be98:	f7ff fbd0 	bl	800b63c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be9c:	f7fb fe20 	bl	8007ae0 <HAL_GetTick>
 800bea0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800bea2:	e008      	b.n	800beb6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800bea4:	f7fb fe1c 	bl	8007ae0 <HAL_GetTick>
 800bea8:	4602      	mov	r2, r0
 800beaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beac:	1ad3      	subs	r3, r2, r3
 800beae:	2b02      	cmp	r3, #2
 800beb0:	d901      	bls.n	800beb6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800beb2:	2303      	movs	r3, #3
 800beb4:	e183      	b.n	800c1be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800beb6:	f7ff fbd2 	bl	800b65e <LL_RCC_LSI1_IsReady>
 800beba:	4603      	mov	r3, r0
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d1f1      	bne.n	800bea4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f003 0304 	and.w	r3, r3, #4
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d05b      	beq.n	800bf84 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800becc:	4ba7      	ldr	r3, [pc, #668]	@ (800c16c <HAL_RCC_OscConfig+0x688>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d114      	bne.n	800bf02 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800bed8:	f7ff fa60 	bl	800b39c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bedc:	f7fb fe00 	bl	8007ae0 <HAL_GetTick>
 800bee0:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bee2:	e008      	b.n	800bef6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bee4:	f7fb fdfc 	bl	8007ae0 <HAL_GetTick>
 800bee8:	4602      	mov	r2, r0
 800beea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beec:	1ad3      	subs	r3, r2, r3
 800beee:	2b02      	cmp	r3, #2
 800bef0:	d901      	bls.n	800bef6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800bef2:	2303      	movs	r3, #3
 800bef4:	e163      	b.n	800c1be <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bef6:	4b9d      	ldr	r3, [pc, #628]	@ (800c16c <HAL_RCC_OscConfig+0x688>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d0f0      	beq.n	800bee4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	689b      	ldr	r3, [r3, #8]
 800bf06:	2b01      	cmp	r3, #1
 800bf08:	d102      	bne.n	800bf10 <HAL_RCC_OscConfig+0x42c>
 800bf0a:	f7ff fb30 	bl	800b56e <LL_RCC_LSE_Enable>
 800bf0e:	e00c      	b.n	800bf2a <HAL_RCC_OscConfig+0x446>
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	689b      	ldr	r3, [r3, #8]
 800bf14:	2b05      	cmp	r3, #5
 800bf16:	d104      	bne.n	800bf22 <HAL_RCC_OscConfig+0x43e>
 800bf18:	f7ff fb4b 	bl	800b5b2 <LL_RCC_LSE_EnableBypass>
 800bf1c:	f7ff fb27 	bl	800b56e <LL_RCC_LSE_Enable>
 800bf20:	e003      	b.n	800bf2a <HAL_RCC_OscConfig+0x446>
 800bf22:	f7ff fb35 	bl	800b590 <LL_RCC_LSE_Disable>
 800bf26:	f7ff fb55 	bl	800b5d4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	689b      	ldr	r3, [r3, #8]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d014      	beq.n	800bf5c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf32:	f7fb fdd5 	bl	8007ae0 <HAL_GetTick>
 800bf36:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800bf38:	e00a      	b.n	800bf50 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bf3a:	f7fb fdd1 	bl	8007ae0 <HAL_GetTick>
 800bf3e:	4602      	mov	r2, r0
 800bf40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf42:	1ad3      	subs	r3, r2, r3
 800bf44:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	d901      	bls.n	800bf50 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800bf4c:	2303      	movs	r3, #3
 800bf4e:	e136      	b.n	800c1be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800bf50:	f7ff fb51 	bl	800b5f6 <LL_RCC_LSE_IsReady>
 800bf54:	4603      	mov	r3, r0
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d0ef      	beq.n	800bf3a <HAL_RCC_OscConfig+0x456>
 800bf5a:	e013      	b.n	800bf84 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf5c:	f7fb fdc0 	bl	8007ae0 <HAL_GetTick>
 800bf60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800bf62:	e00a      	b.n	800bf7a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bf64:	f7fb fdbc 	bl	8007ae0 <HAL_GetTick>
 800bf68:	4602      	mov	r2, r0
 800bf6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf6c:	1ad3      	subs	r3, r2, r3
 800bf6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bf72:	4293      	cmp	r3, r2
 800bf74:	d901      	bls.n	800bf7a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800bf76:	2303      	movs	r3, #3
 800bf78:	e121      	b.n	800c1be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800bf7a:	f7ff fb3c 	bl	800b5f6 <LL_RCC_LSE_IsReady>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d1ef      	bne.n	800bf64 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d02c      	beq.n	800bfea <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d014      	beq.n	800bfc2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bf98:	f7ff fab5 	bl	800b506 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf9c:	f7fb fda0 	bl	8007ae0 <HAL_GetTick>
 800bfa0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800bfa2:	e008      	b.n	800bfb6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bfa4:	f7fb fd9c 	bl	8007ae0 <HAL_GetTick>
 800bfa8:	4602      	mov	r2, r0
 800bfaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfac:	1ad3      	subs	r3, r2, r3
 800bfae:	2b02      	cmp	r3, #2
 800bfb0:	d901      	bls.n	800bfb6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800bfb2:	2303      	movs	r3, #3
 800bfb4:	e103      	b.n	800c1be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800bfb6:	f7ff fac8 	bl	800b54a <LL_RCC_HSI48_IsReady>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d0f1      	beq.n	800bfa4 <HAL_RCC_OscConfig+0x4c0>
 800bfc0:	e013      	b.n	800bfea <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800bfc2:	f7ff fab1 	bl	800b528 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bfc6:	f7fb fd8b 	bl	8007ae0 <HAL_GetTick>
 800bfca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800bfcc:	e008      	b.n	800bfe0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bfce:	f7fb fd87 	bl	8007ae0 <HAL_GetTick>
 800bfd2:	4602      	mov	r2, r0
 800bfd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd6:	1ad3      	subs	r3, r2, r3
 800bfd8:	2b02      	cmp	r3, #2
 800bfda:	d901      	bls.n	800bfe0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800bfdc:	2303      	movs	r3, #3
 800bfde:	e0ee      	b.n	800c1be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800bfe0:	f7ff fab3 	bl	800b54a <LL_RCC_HSI48_IsReady>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d1f1      	bne.n	800bfce <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	f000 80e4 	beq.w	800c1bc <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bff4:	f7ff fc11 	bl	800b81a <LL_RCC_GetSysClkSource>
 800bff8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800bffa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bffe:	68db      	ldr	r3, [r3, #12]
 800c000:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c006:	2b02      	cmp	r3, #2
 800c008:	f040 80b4 	bne.w	800c174 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	f003 0203 	and.w	r2, r3, #3
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c016:	429a      	cmp	r2, r3
 800c018:	d123      	bne.n	800c062 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c024:	429a      	cmp	r2, r3
 800c026:	d11c      	bne.n	800c062 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	0a1b      	lsrs	r3, r3, #8
 800c02c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c034:	429a      	cmp	r2, r3
 800c036:	d114      	bne.n	800c062 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c042:	429a      	cmp	r2, r3
 800c044:	d10d      	bne.n	800c062 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c050:	429a      	cmp	r2, r3
 800c052:	d106      	bne.n	800c062 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c05e:	429a      	cmp	r2, r3
 800c060:	d05d      	beq.n	800c11e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	2b0c      	cmp	r3, #12
 800c066:	d058      	beq.n	800c11a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c068:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c072:	2b00      	cmp	r3, #0
 800c074:	d001      	beq.n	800c07a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800c076:	2301      	movs	r3, #1
 800c078:	e0a1      	b.n	800c1be <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c07a:	f7ff fc84 	bl	800b986 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c07e:	f7fb fd2f 	bl	8007ae0 <HAL_GetTick>
 800c082:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c084:	e008      	b.n	800c098 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c086:	f7fb fd2b 	bl	8007ae0 <HAL_GetTick>
 800c08a:	4602      	mov	r2, r0
 800c08c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c08e:	1ad3      	subs	r3, r2, r3
 800c090:	2b02      	cmp	r3, #2
 800c092:	d901      	bls.n	800c098 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800c094:	2303      	movs	r3, #3
 800c096:	e092      	b.n	800c1be <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c098:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d1ef      	bne.n	800c086 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c0a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c0aa:	68da      	ldr	r2, [r3, #12]
 800c0ac:	4b30      	ldr	r3, [pc, #192]	@ (800c170 <HAL_RCC_OscConfig+0x68c>)
 800c0ae:	4013      	ands	r3, r2
 800c0b0:	687a      	ldr	r2, [r7, #4]
 800c0b2:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800c0b4:	687a      	ldr	r2, [r7, #4]
 800c0b6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c0b8:	4311      	orrs	r1, r2
 800c0ba:	687a      	ldr	r2, [r7, #4]
 800c0bc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c0be:	0212      	lsls	r2, r2, #8
 800c0c0:	4311      	orrs	r1, r2
 800c0c2:	687a      	ldr	r2, [r7, #4]
 800c0c4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c0c6:	4311      	orrs	r1, r2
 800c0c8:	687a      	ldr	r2, [r7, #4]
 800c0ca:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800c0cc:	4311      	orrs	r1, r2
 800c0ce:	687a      	ldr	r2, [r7, #4]
 800c0d0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800c0d2:	430a      	orrs	r2, r1
 800c0d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c0dc:	f7ff fc44 	bl	800b968 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c0e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c0e4:	68db      	ldr	r3, [r3, #12]
 800c0e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c0ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c0ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c0f0:	f7fb fcf6 	bl	8007ae0 <HAL_GetTick>
 800c0f4:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c0f6:	e008      	b.n	800c10a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c0f8:	f7fb fcf2 	bl	8007ae0 <HAL_GetTick>
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c100:	1ad3      	subs	r3, r2, r3
 800c102:	2b02      	cmp	r3, #2
 800c104:	d901      	bls.n	800c10a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800c106:	2303      	movs	r3, #3
 800c108:	e059      	b.n	800c1be <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c10a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c114:	2b00      	cmp	r3, #0
 800c116:	d0ef      	beq.n	800c0f8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c118:	e050      	b.n	800c1bc <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c11a:	2301      	movs	r3, #1
 800c11c:	e04f      	b.n	800c1be <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c11e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d147      	bne.n	800c1bc <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c12c:	f7ff fc1c 	bl	800b968 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c130:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c134:	68db      	ldr	r3, [r3, #12]
 800c136:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c13a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c13e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c140:	f7fb fcce 	bl	8007ae0 <HAL_GetTick>
 800c144:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c146:	e008      	b.n	800c15a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c148:	f7fb fcca 	bl	8007ae0 <HAL_GetTick>
 800c14c:	4602      	mov	r2, r0
 800c14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c150:	1ad3      	subs	r3, r2, r3
 800c152:	2b02      	cmp	r3, #2
 800c154:	d901      	bls.n	800c15a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800c156:	2303      	movs	r3, #3
 800c158:	e031      	b.n	800c1be <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c15a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c164:	2b00      	cmp	r3, #0
 800c166:	d0ef      	beq.n	800c148 <HAL_RCC_OscConfig+0x664>
 800c168:	e028      	b.n	800c1bc <HAL_RCC_OscConfig+0x6d8>
 800c16a:	bf00      	nop
 800c16c:	58000400 	.word	0x58000400
 800c170:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	2b0c      	cmp	r3, #12
 800c178:	d01e      	beq.n	800c1b8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c17a:	f7ff fc04 	bl	800b986 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c17e:	f7fb fcaf 	bl	8007ae0 <HAL_GetTick>
 800c182:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c184:	e008      	b.n	800c198 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c186:	f7fb fcab 	bl	8007ae0 <HAL_GetTick>
 800c18a:	4602      	mov	r2, r0
 800c18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c18e:	1ad3      	subs	r3, r2, r3
 800c190:	2b02      	cmp	r3, #2
 800c192:	d901      	bls.n	800c198 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800c194:	2303      	movs	r3, #3
 800c196:	e012      	b.n	800c1be <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c198:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d1ef      	bne.n	800c186 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800c1a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c1aa:	68da      	ldr	r2, [r3, #12]
 800c1ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c1b0:	4b05      	ldr	r3, [pc, #20]	@ (800c1c8 <HAL_RCC_OscConfig+0x6e4>)
 800c1b2:	4013      	ands	r3, r2
 800c1b4:	60cb      	str	r3, [r1, #12]
 800c1b6:	e001      	b.n	800c1bc <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	e000      	b.n	800c1be <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800c1bc:	2300      	movs	r3, #0
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3734      	adds	r7, #52	@ 0x34
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd90      	pop	{r4, r7, pc}
 800c1c6:	bf00      	nop
 800c1c8:	eefefffc 	.word	0xeefefffc

0800c1cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b084      	sub	sp, #16
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d101      	bne.n	800c1e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c1dc:	2301      	movs	r3, #1
 800c1de:	e12d      	b.n	800c43c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c1e0:	4b98      	ldr	r3, [pc, #608]	@ (800c444 <HAL_RCC_ClockConfig+0x278>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f003 0307 	and.w	r3, r3, #7
 800c1e8:	683a      	ldr	r2, [r7, #0]
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d91b      	bls.n	800c226 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c1ee:	4b95      	ldr	r3, [pc, #596]	@ (800c444 <HAL_RCC_ClockConfig+0x278>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f023 0207 	bic.w	r2, r3, #7
 800c1f6:	4993      	ldr	r1, [pc, #588]	@ (800c444 <HAL_RCC_ClockConfig+0x278>)
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	4313      	orrs	r3, r2
 800c1fc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c1fe:	f7fb fc6f 	bl	8007ae0 <HAL_GetTick>
 800c202:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c204:	e008      	b.n	800c218 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c206:	f7fb fc6b 	bl	8007ae0 <HAL_GetTick>
 800c20a:	4602      	mov	r2, r0
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	1ad3      	subs	r3, r2, r3
 800c210:	2b02      	cmp	r3, #2
 800c212:	d901      	bls.n	800c218 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800c214:	2303      	movs	r3, #3
 800c216:	e111      	b.n	800c43c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c218:	4b8a      	ldr	r3, [pc, #552]	@ (800c444 <HAL_RCC_ClockConfig+0x278>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f003 0307 	and.w	r3, r3, #7
 800c220:	683a      	ldr	r2, [r7, #0]
 800c222:	429a      	cmp	r2, r3
 800c224:	d1ef      	bne.n	800c206 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f003 0302 	and.w	r3, r3, #2
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d016      	beq.n	800c260 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	689b      	ldr	r3, [r3, #8]
 800c236:	4618      	mov	r0, r3
 800c238:	f7ff fafb 	bl	800b832 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c23c:	f7fb fc50 	bl	8007ae0 <HAL_GetTick>
 800c240:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800c242:	e008      	b.n	800c256 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c244:	f7fb fc4c 	bl	8007ae0 <HAL_GetTick>
 800c248:	4602      	mov	r2, r0
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	1ad3      	subs	r3, r2, r3
 800c24e:	2b02      	cmp	r3, #2
 800c250:	d901      	bls.n	800c256 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800c252:	2303      	movs	r3, #3
 800c254:	e0f2      	b.n	800c43c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800c256:	f7ff fbe8 	bl	800ba2a <LL_RCC_IsActiveFlag_HPRE>
 800c25a:	4603      	mov	r3, r0
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d0f1      	beq.n	800c244 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f003 0320 	and.w	r3, r3, #32
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d016      	beq.n	800c29a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	695b      	ldr	r3, [r3, #20]
 800c270:	4618      	mov	r0, r3
 800c272:	f7ff faf2 	bl	800b85a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c276:	f7fb fc33 	bl	8007ae0 <HAL_GetTick>
 800c27a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800c27c:	e008      	b.n	800c290 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c27e:	f7fb fc2f 	bl	8007ae0 <HAL_GetTick>
 800c282:	4602      	mov	r2, r0
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	1ad3      	subs	r3, r2, r3
 800c288:	2b02      	cmp	r3, #2
 800c28a:	d901      	bls.n	800c290 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800c28c:	2303      	movs	r3, #3
 800c28e:	e0d5      	b.n	800c43c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800c290:	f7ff fbdd 	bl	800ba4e <LL_RCC_IsActiveFlag_C2HPRE>
 800c294:	4603      	mov	r3, r0
 800c296:	2b00      	cmp	r3, #0
 800c298:	d0f1      	beq.n	800c27e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d016      	beq.n	800c2d4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	699b      	ldr	r3, [r3, #24]
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7ff faeb 	bl	800b886 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c2b0:	f7fb fc16 	bl	8007ae0 <HAL_GetTick>
 800c2b4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800c2b6:	e008      	b.n	800c2ca <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c2b8:	f7fb fc12 	bl	8007ae0 <HAL_GetTick>
 800c2bc:	4602      	mov	r2, r0
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	1ad3      	subs	r3, r2, r3
 800c2c2:	2b02      	cmp	r3, #2
 800c2c4:	d901      	bls.n	800c2ca <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800c2c6:	2303      	movs	r3, #3
 800c2c8:	e0b8      	b.n	800c43c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800c2ca:	f7ff fbd3 	bl	800ba74 <LL_RCC_IsActiveFlag_SHDHPRE>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d0f1      	beq.n	800c2b8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f003 0304 	and.w	r3, r3, #4
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d016      	beq.n	800c30e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	68db      	ldr	r3, [r3, #12]
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7ff fae5 	bl	800b8b4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c2ea:	f7fb fbf9 	bl	8007ae0 <HAL_GetTick>
 800c2ee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800c2f0:	e008      	b.n	800c304 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c2f2:	f7fb fbf5 	bl	8007ae0 <HAL_GetTick>
 800c2f6:	4602      	mov	r2, r0
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	1ad3      	subs	r3, r2, r3
 800c2fc:	2b02      	cmp	r3, #2
 800c2fe:	d901      	bls.n	800c304 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800c300:	2303      	movs	r3, #3
 800c302:	e09b      	b.n	800c43c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800c304:	f7ff fbc9 	bl	800ba9a <LL_RCC_IsActiveFlag_PPRE1>
 800c308:	4603      	mov	r3, r0
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d0f1      	beq.n	800c2f2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f003 0308 	and.w	r3, r3, #8
 800c316:	2b00      	cmp	r3, #0
 800c318:	d017      	beq.n	800c34a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	691b      	ldr	r3, [r3, #16]
 800c31e:	00db      	lsls	r3, r3, #3
 800c320:	4618      	mov	r0, r3
 800c322:	f7ff fadb 	bl	800b8dc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c326:	f7fb fbdb 	bl	8007ae0 <HAL_GetTick>
 800c32a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800c32c:	e008      	b.n	800c340 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c32e:	f7fb fbd7 	bl	8007ae0 <HAL_GetTick>
 800c332:	4602      	mov	r2, r0
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	1ad3      	subs	r3, r2, r3
 800c338:	2b02      	cmp	r3, #2
 800c33a:	d901      	bls.n	800c340 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800c33c:	2303      	movs	r3, #3
 800c33e:	e07d      	b.n	800c43c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800c340:	f7ff fbbd 	bl	800babe <LL_RCC_IsActiveFlag_PPRE2>
 800c344:	4603      	mov	r3, r0
 800c346:	2b00      	cmp	r3, #0
 800c348:	d0f1      	beq.n	800c32e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f003 0301 	and.w	r3, r3, #1
 800c352:	2b00      	cmp	r3, #0
 800c354:	d043      	beq.n	800c3de <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	685b      	ldr	r3, [r3, #4]
 800c35a:	2b02      	cmp	r3, #2
 800c35c:	d106      	bne.n	800c36c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800c35e:	f7ff f87b 	bl	800b458 <LL_RCC_HSE_IsReady>
 800c362:	4603      	mov	r3, r0
 800c364:	2b00      	cmp	r3, #0
 800c366:	d11e      	bne.n	800c3a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c368:	2301      	movs	r3, #1
 800c36a:	e067      	b.n	800c43c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	2b03      	cmp	r3, #3
 800c372:	d106      	bne.n	800c382 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800c374:	f7ff fb16 	bl	800b9a4 <LL_RCC_PLL_IsReady>
 800c378:	4603      	mov	r3, r0
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d113      	bne.n	800c3a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c37e:	2301      	movs	r3, #1
 800c380:	e05c      	b.n	800c43c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	685b      	ldr	r3, [r3, #4]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d106      	bne.n	800c398 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800c38a:	f7ff f9e3 	bl	800b754 <LL_RCC_MSI_IsReady>
 800c38e:	4603      	mov	r3, r0
 800c390:	2b00      	cmp	r3, #0
 800c392:	d108      	bne.n	800c3a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c394:	2301      	movs	r3, #1
 800c396:	e051      	b.n	800c43c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800c398:	f7ff f88e 	bl	800b4b8 <LL_RCC_HSI_IsReady>
 800c39c:	4603      	mov	r3, r0
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d101      	bne.n	800c3a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	e04a      	b.n	800c43c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7ff fa21 	bl	800b7f2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3b0:	f7fb fb96 	bl	8007ae0 <HAL_GetTick>
 800c3b4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c3b6:	e00a      	b.n	800c3ce <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c3b8:	f7fb fb92 	bl	8007ae0 <HAL_GetTick>
 800c3bc:	4602      	mov	r2, r0
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	1ad3      	subs	r3, r2, r3
 800c3c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d901      	bls.n	800c3ce <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800c3ca:	2303      	movs	r3, #3
 800c3cc:	e036      	b.n	800c43c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c3ce:	f7ff fa24 	bl	800b81a <LL_RCC_GetSysClkSource>
 800c3d2:	4602      	mov	r2, r0
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	685b      	ldr	r3, [r3, #4]
 800c3d8:	009b      	lsls	r3, r3, #2
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d1ec      	bne.n	800c3b8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c3de:	4b19      	ldr	r3, [pc, #100]	@ (800c444 <HAL_RCC_ClockConfig+0x278>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f003 0307 	and.w	r3, r3, #7
 800c3e6:	683a      	ldr	r2, [r7, #0]
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d21b      	bcs.n	800c424 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c3ec:	4b15      	ldr	r3, [pc, #84]	@ (800c444 <HAL_RCC_ClockConfig+0x278>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	f023 0207 	bic.w	r2, r3, #7
 800c3f4:	4913      	ldr	r1, [pc, #76]	@ (800c444 <HAL_RCC_ClockConfig+0x278>)
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	4313      	orrs	r3, r2
 800c3fa:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3fc:	f7fb fb70 	bl	8007ae0 <HAL_GetTick>
 800c400:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c402:	e008      	b.n	800c416 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c404:	f7fb fb6c 	bl	8007ae0 <HAL_GetTick>
 800c408:	4602      	mov	r2, r0
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	1ad3      	subs	r3, r2, r3
 800c40e:	2b02      	cmp	r3, #2
 800c410:	d901      	bls.n	800c416 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800c412:	2303      	movs	r3, #3
 800c414:	e012      	b.n	800c43c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c416:	4b0b      	ldr	r3, [pc, #44]	@ (800c444 <HAL_RCC_ClockConfig+0x278>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f003 0307 	and.w	r3, r3, #7
 800c41e:	683a      	ldr	r2, [r7, #0]
 800c420:	429a      	cmp	r2, r3
 800c422:	d1ef      	bne.n	800c404 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800c424:	f000 f87e 	bl	800c524 <HAL_RCC_GetHCLKFreq>
 800c428:	4603      	mov	r3, r0
 800c42a:	4a07      	ldr	r2, [pc, #28]	@ (800c448 <HAL_RCC_ClockConfig+0x27c>)
 800c42c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800c42e:	f7fb fb63 	bl	8007af8 <HAL_GetTickPrio>
 800c432:	4603      	mov	r3, r0
 800c434:	4618      	mov	r0, r3
 800c436:	f7fb fb05 	bl	8007a44 <HAL_InitTick>
 800c43a:	4603      	mov	r3, r0
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3710      	adds	r7, #16
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}
 800c444:	58004000 	.word	0x58004000
 800c448:	20000024 	.word	0x20000024

0800c44c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c44c:	b590      	push	{r4, r7, lr}
 800c44e:	b085      	sub	sp, #20
 800c450:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c452:	f7ff f9e2 	bl	800b81a <LL_RCC_GetSysClkSource>
 800c456:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d10a      	bne.n	800c474 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800c45e:	f7ff f99e 	bl	800b79e <LL_RCC_MSI_GetRange>
 800c462:	4603      	mov	r3, r0
 800c464:	091b      	lsrs	r3, r3, #4
 800c466:	f003 030f 	and.w	r3, r3, #15
 800c46a:	4a2b      	ldr	r2, [pc, #172]	@ (800c518 <HAL_RCC_GetSysClockFreq+0xcc>)
 800c46c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c470:	60fb      	str	r3, [r7, #12]
 800c472:	e04b      	b.n	800c50c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2b04      	cmp	r3, #4
 800c478:	d102      	bne.n	800c480 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c47a:	4b28      	ldr	r3, [pc, #160]	@ (800c51c <HAL_RCC_GetSysClockFreq+0xd0>)
 800c47c:	60fb      	str	r3, [r7, #12]
 800c47e:	e045      	b.n	800c50c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2b08      	cmp	r3, #8
 800c484:	d10a      	bne.n	800c49c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800c486:	f7fe ffb7 	bl	800b3f8 <LL_RCC_HSE_IsEnabledDiv2>
 800c48a:	4603      	mov	r3, r0
 800c48c:	2b01      	cmp	r3, #1
 800c48e:	d102      	bne.n	800c496 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800c490:	4b22      	ldr	r3, [pc, #136]	@ (800c51c <HAL_RCC_GetSysClockFreq+0xd0>)
 800c492:	60fb      	str	r3, [r7, #12]
 800c494:	e03a      	b.n	800c50c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800c496:	4b22      	ldr	r3, [pc, #136]	@ (800c520 <HAL_RCC_GetSysClockFreq+0xd4>)
 800c498:	60fb      	str	r3, [r7, #12]
 800c49a:	e037      	b.n	800c50c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800c49c:	f7ff fab9 	bl	800ba12 <LL_RCC_PLL_GetMainSource>
 800c4a0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	2b02      	cmp	r3, #2
 800c4a6:	d003      	beq.n	800c4b0 <HAL_RCC_GetSysClockFreq+0x64>
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	2b03      	cmp	r3, #3
 800c4ac:	d003      	beq.n	800c4b6 <HAL_RCC_GetSysClockFreq+0x6a>
 800c4ae:	e00d      	b.n	800c4cc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800c4b0:	4b1a      	ldr	r3, [pc, #104]	@ (800c51c <HAL_RCC_GetSysClockFreq+0xd0>)
 800c4b2:	60bb      	str	r3, [r7, #8]
        break;
 800c4b4:	e015      	b.n	800c4e2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800c4b6:	f7fe ff9f 	bl	800b3f8 <LL_RCC_HSE_IsEnabledDiv2>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	2b01      	cmp	r3, #1
 800c4be:	d102      	bne.n	800c4c6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800c4c0:	4b16      	ldr	r3, [pc, #88]	@ (800c51c <HAL_RCC_GetSysClockFreq+0xd0>)
 800c4c2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800c4c4:	e00d      	b.n	800c4e2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800c4c6:	4b16      	ldr	r3, [pc, #88]	@ (800c520 <HAL_RCC_GetSysClockFreq+0xd4>)
 800c4c8:	60bb      	str	r3, [r7, #8]
        break;
 800c4ca:	e00a      	b.n	800c4e2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800c4cc:	f7ff f967 	bl	800b79e <LL_RCC_MSI_GetRange>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	091b      	lsrs	r3, r3, #4
 800c4d4:	f003 030f 	and.w	r3, r3, #15
 800c4d8:	4a0f      	ldr	r2, [pc, #60]	@ (800c518 <HAL_RCC_GetSysClockFreq+0xcc>)
 800c4da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4de:	60bb      	str	r3, [r7, #8]
        break;
 800c4e0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800c4e2:	f7ff fa71 	bl	800b9c8 <LL_RCC_PLL_GetN>
 800c4e6:	4602      	mov	r2, r0
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	fb03 f402 	mul.w	r4, r3, r2
 800c4ee:	f7ff fa84 	bl	800b9fa <LL_RCC_PLL_GetDivider>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	091b      	lsrs	r3, r3, #4
 800c4f6:	3301      	adds	r3, #1
 800c4f8:	fbb4 f4f3 	udiv	r4, r4, r3
 800c4fc:	f7ff fa71 	bl	800b9e2 <LL_RCC_PLL_GetR>
 800c500:	4603      	mov	r3, r0
 800c502:	0f5b      	lsrs	r3, r3, #29
 800c504:	3301      	adds	r3, #1
 800c506:	fbb4 f3f3 	udiv	r3, r4, r3
 800c50a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800c50c:	68fb      	ldr	r3, [r7, #12]
}
 800c50e:	4618      	mov	r0, r3
 800c510:	3714      	adds	r7, #20
 800c512:	46bd      	mov	sp, r7
 800c514:	bd90      	pop	{r4, r7, pc}
 800c516:	bf00      	nop
 800c518:	0801d8d8 	.word	0x0801d8d8
 800c51c:	00f42400 	.word	0x00f42400
 800c520:	01e84800 	.word	0x01e84800

0800c524 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c524:	b598      	push	{r3, r4, r7, lr}
 800c526:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800c528:	f7ff ff90 	bl	800c44c <HAL_RCC_GetSysClockFreq>
 800c52c:	4604      	mov	r4, r0
 800c52e:	f7ff f9e9 	bl	800b904 <LL_RCC_GetAHBPrescaler>
 800c532:	4603      	mov	r3, r0
 800c534:	091b      	lsrs	r3, r3, #4
 800c536:	f003 030f 	and.w	r3, r3, #15
 800c53a:	4a03      	ldr	r2, [pc, #12]	@ (800c548 <HAL_RCC_GetHCLKFreq+0x24>)
 800c53c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c540:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800c544:	4618      	mov	r0, r3
 800c546:	bd98      	pop	{r3, r4, r7, pc}
 800c548:	0801d878 	.word	0x0801d878

0800c54c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c54c:	b598      	push	{r3, r4, r7, lr}
 800c54e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800c550:	f7ff ffe8 	bl	800c524 <HAL_RCC_GetHCLKFreq>
 800c554:	4604      	mov	r4, r0
 800c556:	f7ff f9ef 	bl	800b938 <LL_RCC_GetAPB1Prescaler>
 800c55a:	4603      	mov	r3, r0
 800c55c:	0a1b      	lsrs	r3, r3, #8
 800c55e:	f003 0307 	and.w	r3, r3, #7
 800c562:	4a04      	ldr	r2, [pc, #16]	@ (800c574 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c568:	f003 031f 	and.w	r3, r3, #31
 800c56c:	fa24 f303 	lsr.w	r3, r4, r3
}
 800c570:	4618      	mov	r0, r3
 800c572:	bd98      	pop	{r3, r4, r7, pc}
 800c574:	0801d8b8 	.word	0x0801d8b8

0800c578 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c578:	b598      	push	{r3, r4, r7, lr}
 800c57a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800c57c:	f7ff ffd2 	bl	800c524 <HAL_RCC_GetHCLKFreq>
 800c580:	4604      	mov	r4, r0
 800c582:	f7ff f9e5 	bl	800b950 <LL_RCC_GetAPB2Prescaler>
 800c586:	4603      	mov	r3, r0
 800c588:	0adb      	lsrs	r3, r3, #11
 800c58a:	f003 0307 	and.w	r3, r3, #7
 800c58e:	4a04      	ldr	r2, [pc, #16]	@ (800c5a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c594:	f003 031f 	and.w	r3, r3, #31
 800c598:	fa24 f303 	lsr.w	r3, r4, r3
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	bd98      	pop	{r3, r4, r7, pc}
 800c5a0:	0801d8b8 	.word	0x0801d8b8

0800c5a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800c5a4:	b590      	push	{r4, r7, lr}
 800c5a6:	b085      	sub	sp, #20
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2bb0      	cmp	r3, #176	@ 0xb0
 800c5b0:	d903      	bls.n	800c5ba <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800c5b2:	4b15      	ldr	r3, [pc, #84]	@ (800c608 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800c5b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5b6:	60fb      	str	r3, [r7, #12]
 800c5b8:	e007      	b.n	800c5ca <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	091b      	lsrs	r3, r3, #4
 800c5be:	f003 030f 	and.w	r3, r3, #15
 800c5c2:	4a11      	ldr	r2, [pc, #68]	@ (800c608 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800c5c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5c8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800c5ca:	f7ff f9a7 	bl	800b91c <LL_RCC_GetAHB4Prescaler>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	091b      	lsrs	r3, r3, #4
 800c5d2:	f003 030f 	and.w	r3, r3, #15
 800c5d6:	4a0d      	ldr	r2, [pc, #52]	@ (800c60c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800c5d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5dc:	68fa      	ldr	r2, [r7, #12]
 800c5de:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5e2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	4a0a      	ldr	r2, [pc, #40]	@ (800c610 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800c5e8:	fba2 2303 	umull	r2, r3, r2, r3
 800c5ec:	0c9c      	lsrs	r4, r3, #18
 800c5ee:	f7fe fee5 	bl	800b3bc <HAL_PWREx_GetVoltageRange>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	4619      	mov	r1, r3
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	f000 f80c 	bl	800c614 <RCC_SetFlashLatency>
 800c5fc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3714      	adds	r7, #20
 800c602:	46bd      	mov	sp, r7
 800c604:	bd90      	pop	{r4, r7, pc}
 800c606:	bf00      	nop
 800c608:	0801d8d8 	.word	0x0801d8d8
 800c60c:	0801d878 	.word	0x0801d878
 800c610:	431bde83 	.word	0x431bde83

0800c614 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800c614:	b590      	push	{r4, r7, lr}
 800c616:	b093      	sub	sp, #76	@ 0x4c
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800c61e:	4b37      	ldr	r3, [pc, #220]	@ (800c6fc <RCC_SetFlashLatency+0xe8>)
 800c620:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800c624:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c626:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800c62a:	4a35      	ldr	r2, [pc, #212]	@ (800c700 <RCC_SetFlashLatency+0xec>)
 800c62c:	f107 031c 	add.w	r3, r7, #28
 800c630:	ca07      	ldmia	r2, {r0, r1, r2}
 800c632:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800c636:	4b33      	ldr	r3, [pc, #204]	@ (800c704 <RCC_SetFlashLatency+0xf0>)
 800c638:	f107 040c 	add.w	r4, r7, #12
 800c63c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c63e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800c642:	2300      	movs	r3, #0
 800c644:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c64c:	d11a      	bne.n	800c684 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800c64e:	2300      	movs	r3, #0
 800c650:	643b      	str	r3, [r7, #64]	@ 0x40
 800c652:	e013      	b.n	800c67c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800c654:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c656:	009b      	lsls	r3, r3, #2
 800c658:	3348      	adds	r3, #72	@ 0x48
 800c65a:	443b      	add	r3, r7
 800c65c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800c660:	687a      	ldr	r2, [r7, #4]
 800c662:	429a      	cmp	r2, r3
 800c664:	d807      	bhi.n	800c676 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800c666:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c668:	009b      	lsls	r3, r3, #2
 800c66a:	3348      	adds	r3, #72	@ 0x48
 800c66c:	443b      	add	r3, r7
 800c66e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800c672:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800c674:	e020      	b.n	800c6b8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800c676:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c678:	3301      	adds	r3, #1
 800c67a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c67c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c67e:	2b03      	cmp	r3, #3
 800c680:	d9e8      	bls.n	800c654 <RCC_SetFlashLatency+0x40>
 800c682:	e019      	b.n	800c6b8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800c684:	2300      	movs	r3, #0
 800c686:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c688:	e013      	b.n	800c6b2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800c68a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c68c:	009b      	lsls	r3, r3, #2
 800c68e:	3348      	adds	r3, #72	@ 0x48
 800c690:	443b      	add	r3, r7
 800c692:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800c696:	687a      	ldr	r2, [r7, #4]
 800c698:	429a      	cmp	r2, r3
 800c69a:	d807      	bhi.n	800c6ac <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800c69c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c69e:	009b      	lsls	r3, r3, #2
 800c6a0:	3348      	adds	r3, #72	@ 0x48
 800c6a2:	443b      	add	r3, r7
 800c6a4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800c6a8:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800c6aa:	e005      	b.n	800c6b8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800c6ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6ae:	3301      	adds	r3, #1
 800c6b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c6b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6b4:	2b02      	cmp	r3, #2
 800c6b6:	d9e8      	bls.n	800c68a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800c6b8:	4b13      	ldr	r3, [pc, #76]	@ (800c708 <RCC_SetFlashLatency+0xf4>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f023 0207 	bic.w	r2, r3, #7
 800c6c0:	4911      	ldr	r1, [pc, #68]	@ (800c708 <RCC_SetFlashLatency+0xf4>)
 800c6c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6c4:	4313      	orrs	r3, r2
 800c6c6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c6c8:	f7fb fa0a 	bl	8007ae0 <HAL_GetTick>
 800c6cc:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800c6ce:	e008      	b.n	800c6e2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c6d0:	f7fb fa06 	bl	8007ae0 <HAL_GetTick>
 800c6d4:	4602      	mov	r2, r0
 800c6d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6d8:	1ad3      	subs	r3, r2, r3
 800c6da:	2b02      	cmp	r3, #2
 800c6dc:	d901      	bls.n	800c6e2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800c6de:	2303      	movs	r3, #3
 800c6e0:	e007      	b.n	800c6f2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800c6e2:	4b09      	ldr	r3, [pc, #36]	@ (800c708 <RCC_SetFlashLatency+0xf4>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f003 0307 	and.w	r3, r3, #7
 800c6ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d1ef      	bne.n	800c6d0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800c6f0:	2300      	movs	r3, #0
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	374c      	adds	r7, #76	@ 0x4c
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd90      	pop	{r4, r7, pc}
 800c6fa:	bf00      	nop
 800c6fc:	0801cf68 	.word	0x0801cf68
 800c700:	0801cf78 	.word	0x0801cf78
 800c704:	0801cf84 	.word	0x0801cf84
 800c708:	58004000 	.word	0x58004000

0800c70c <LL_RCC_LSE_IsEnabled>:
{
 800c70c:	b480      	push	{r7}
 800c70e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800c710:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c714:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c718:	f003 0301 	and.w	r3, r3, #1
 800c71c:	2b01      	cmp	r3, #1
 800c71e:	d101      	bne.n	800c724 <LL_RCC_LSE_IsEnabled+0x18>
 800c720:	2301      	movs	r3, #1
 800c722:	e000      	b.n	800c726 <LL_RCC_LSE_IsEnabled+0x1a>
 800c724:	2300      	movs	r3, #0
}
 800c726:	4618      	mov	r0, r3
 800c728:	46bd      	mov	sp, r7
 800c72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72e:	4770      	bx	lr

0800c730 <LL_RCC_LSE_IsReady>:
{
 800c730:	b480      	push	{r7}
 800c732:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c734:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c73c:	f003 0302 	and.w	r3, r3, #2
 800c740:	2b02      	cmp	r3, #2
 800c742:	d101      	bne.n	800c748 <LL_RCC_LSE_IsReady+0x18>
 800c744:	2301      	movs	r3, #1
 800c746:	e000      	b.n	800c74a <LL_RCC_LSE_IsReady+0x1a>
 800c748:	2300      	movs	r3, #0
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	46bd      	mov	sp, r7
 800c74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c752:	4770      	bx	lr

0800c754 <LL_RCC_MSI_EnablePLLMode>:
{
 800c754:	b480      	push	{r7}
 800c756:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800c758:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c762:	f043 0304 	orr.w	r3, r3, #4
 800c766:	6013      	str	r3, [r2, #0]
}
 800c768:	bf00      	nop
 800c76a:	46bd      	mov	sp, r7
 800c76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c770:	4770      	bx	lr

0800c772 <LL_RCC_SetRFWKPClockSource>:
{
 800c772:	b480      	push	{r7}
 800c774:	b083      	sub	sp, #12
 800c776:	af00      	add	r7, sp, #0
 800c778:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800c77a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c77e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c782:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800c786:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	4313      	orrs	r3, r2
 800c78e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800c792:	bf00      	nop
 800c794:	370c      	adds	r7, #12
 800c796:	46bd      	mov	sp, r7
 800c798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79c:	4770      	bx	lr

0800c79e <LL_RCC_SetSMPSClockSource>:
{
 800c79e:	b480      	push	{r7}
 800c7a0:	b083      	sub	sp, #12
 800c7a2:	af00      	add	r7, sp, #0
 800c7a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800c7a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c7aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7ac:	f023 0203 	bic.w	r2, r3, #3
 800c7b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	4313      	orrs	r3, r2
 800c7b8:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800c7ba:	bf00      	nop
 800c7bc:	370c      	adds	r7, #12
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c4:	4770      	bx	lr

0800c7c6 <LL_RCC_SetSMPSPrescaler>:
{
 800c7c6:	b480      	push	{r7}
 800c7c8:	b083      	sub	sp, #12
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800c7ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c7d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800c7d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	4313      	orrs	r3, r2
 800c7e0:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800c7e2:	bf00      	nop
 800c7e4:	370c      	adds	r7, #12
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ec:	4770      	bx	lr

0800c7ee <LL_RCC_SetUSARTClockSource>:
{
 800c7ee:	b480      	push	{r7}
 800c7f0:	b083      	sub	sp, #12
 800c7f2:	af00      	add	r7, sp, #0
 800c7f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800c7f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c7fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c7fe:	f023 0203 	bic.w	r2, r3, #3
 800c802:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	4313      	orrs	r3, r2
 800c80a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c80e:	bf00      	nop
 800c810:	370c      	adds	r7, #12
 800c812:	46bd      	mov	sp, r7
 800c814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c818:	4770      	bx	lr

0800c81a <LL_RCC_SetLPUARTClockSource>:
{
 800c81a:	b480      	push	{r7}
 800c81c:	b083      	sub	sp, #12
 800c81e:	af00      	add	r7, sp, #0
 800c820:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800c822:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c82a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c82e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	4313      	orrs	r3, r2
 800c836:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c83a:	bf00      	nop
 800c83c:	370c      	adds	r7, #12
 800c83e:	46bd      	mov	sp, r7
 800c840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c844:	4770      	bx	lr

0800c846 <LL_RCC_SetI2CClockSource>:
{
 800c846:	b480      	push	{r7}
 800c848:	b083      	sub	sp, #12
 800c84a:	af00      	add	r7, sp, #0
 800c84c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800c84e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c852:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	091b      	lsrs	r3, r3, #4
 800c85a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800c85e:	43db      	mvns	r3, r3
 800c860:	401a      	ands	r2, r3
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	011b      	lsls	r3, r3, #4
 800c866:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800c86a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c86e:	4313      	orrs	r3, r2
 800c870:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c874:	bf00      	nop
 800c876:	370c      	adds	r7, #12
 800c878:	46bd      	mov	sp, r7
 800c87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87e:	4770      	bx	lr

0800c880 <LL_RCC_SetLPTIMClockSource>:
{
 800c880:	b480      	push	{r7}
 800c882:	b083      	sub	sp, #12
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800c888:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c88c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	0c1b      	lsrs	r3, r3, #16
 800c894:	041b      	lsls	r3, r3, #16
 800c896:	43db      	mvns	r3, r3
 800c898:	401a      	ands	r2, r3
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	041b      	lsls	r3, r3, #16
 800c89e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c8a2:	4313      	orrs	r3, r2
 800c8a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c8a8:	bf00      	nop
 800c8aa:	370c      	adds	r7, #12
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b2:	4770      	bx	lr

0800c8b4 <LL_RCC_SetSAIClockSource>:
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b083      	sub	sp, #12
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800c8bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c8c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c8c4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800c8c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	4313      	orrs	r3, r2
 800c8d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c8d4:	bf00      	nop
 800c8d6:	370c      	adds	r7, #12
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr

0800c8e0 <LL_RCC_SetRNGClockSource>:
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b083      	sub	sp, #12
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800c8e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c8ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c8f0:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800c8f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	4313      	orrs	r3, r2
 800c8fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c900:	bf00      	nop
 800c902:	370c      	adds	r7, #12
 800c904:	46bd      	mov	sp, r7
 800c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90a:	4770      	bx	lr

0800c90c <LL_RCC_SetCLK48ClockSource>:
{
 800c90c:	b480      	push	{r7}
 800c90e:	b083      	sub	sp, #12
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800c914:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c91c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800c920:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	4313      	orrs	r3, r2
 800c928:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c92c:	bf00      	nop
 800c92e:	370c      	adds	r7, #12
 800c930:	46bd      	mov	sp, r7
 800c932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c936:	4770      	bx	lr

0800c938 <LL_RCC_SetUSBClockSource>:
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b082      	sub	sp, #8
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f7ff ffe3 	bl	800c90c <LL_RCC_SetCLK48ClockSource>
}
 800c946:	bf00      	nop
 800c948:	3708      	adds	r7, #8
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}

0800c94e <LL_RCC_SetADCClockSource>:
{
 800c94e:	b480      	push	{r7}
 800c950:	b083      	sub	sp, #12
 800c952:	af00      	add	r7, sp, #0
 800c954:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800c956:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c95a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c95e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800c962:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	4313      	orrs	r3, r2
 800c96a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c96e:	bf00      	nop
 800c970:	370c      	adds	r7, #12
 800c972:	46bd      	mov	sp, r7
 800c974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c978:	4770      	bx	lr

0800c97a <LL_RCC_SetRTCClockSource>:
{
 800c97a:	b480      	push	{r7}
 800c97c:	b083      	sub	sp, #12
 800c97e:	af00      	add	r7, sp, #0
 800c980:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800c982:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c98a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c98e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	4313      	orrs	r3, r2
 800c996:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800c99a:	bf00      	nop
 800c99c:	370c      	adds	r7, #12
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a4:	4770      	bx	lr

0800c9a6 <LL_RCC_GetRTCClockSource>:
{
 800c9a6:	b480      	push	{r7}
 800c9a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800c9aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c9ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c9b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9be:	4770      	bx	lr

0800c9c0 <LL_RCC_ForceBackupDomainReset>:
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800c9c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c9c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c9cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c9d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c9d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800c9d8:	bf00      	nop
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e0:	4770      	bx	lr

0800c9e2 <LL_RCC_ReleaseBackupDomainReset>:
{
 800c9e2:	b480      	push	{r7}
 800c9e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800c9e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c9ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c9ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c9f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c9f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800c9fa:	bf00      	nop
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca02:	4770      	bx	lr

0800ca04 <LL_RCC_PLLSAI1_Enable>:
{
 800ca04:	b480      	push	{r7}
 800ca06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800ca08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ca12:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ca16:	6013      	str	r3, [r2, #0]
}
 800ca18:	bf00      	nop
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca20:	4770      	bx	lr

0800ca22 <LL_RCC_PLLSAI1_Disable>:
{
 800ca22:	b480      	push	{r7}
 800ca24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800ca26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ca30:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ca34:	6013      	str	r3, [r2, #0]
}
 800ca36:	bf00      	nop
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr

0800ca40 <LL_RCC_PLLSAI1_IsReady>:
{
 800ca40:	b480      	push	{r7}
 800ca42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800ca44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ca4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ca52:	d101      	bne.n	800ca58 <LL_RCC_PLLSAI1_IsReady+0x18>
 800ca54:	2301      	movs	r3, #1
 800ca56:	e000      	b.n	800ca5a <LL_RCC_PLLSAI1_IsReady+0x1a>
 800ca58:	2300      	movs	r3, #0
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca62:	4770      	bx	lr

0800ca64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b088      	sub	sp, #32
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800ca70:	2300      	movs	r3, #0
 800ca72:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d034      	beq.n	800caea <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca84:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ca88:	d021      	beq.n	800cace <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800ca8a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ca8e:	d81b      	bhi.n	800cac8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ca90:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ca94:	d01d      	beq.n	800cad2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800ca96:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ca9a:	d815      	bhi.n	800cac8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d00b      	beq.n	800cab8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800caa0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800caa4:	d110      	bne.n	800cac8 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800caa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800caaa:	68db      	ldr	r3, [r3, #12]
 800caac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cab4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800cab6:	e00d      	b.n	800cad4 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	3304      	adds	r3, #4
 800cabc:	4618      	mov	r0, r3
 800cabe:	f000 f94d 	bl	800cd5c <RCCEx_PLLSAI1_ConfigNP>
 800cac2:	4603      	mov	r3, r0
 800cac4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800cac6:	e005      	b.n	800cad4 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800cac8:	2301      	movs	r3, #1
 800caca:	77fb      	strb	r3, [r7, #31]
        break;
 800cacc:	e002      	b.n	800cad4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800cace:	bf00      	nop
 800cad0:	e000      	b.n	800cad4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800cad2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cad4:	7ffb      	ldrb	r3, [r7, #31]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d105      	bne.n	800cae6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cade:	4618      	mov	r0, r3
 800cae0:	f7ff fee8 	bl	800c8b4 <LL_RCC_SetSAIClockSource>
 800cae4:	e001      	b.n	800caea <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cae6:	7ffb      	ldrb	r3, [r7, #31]
 800cae8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d046      	beq.n	800cb84 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800caf6:	f7ff ff56 	bl	800c9a6 <LL_RCC_GetRTCClockSource>
 800cafa:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb00:	69ba      	ldr	r2, [r7, #24]
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d03c      	beq.n	800cb80 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800cb06:	f7fe fc49 	bl	800b39c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800cb0a:	69bb      	ldr	r3, [r7, #24]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d105      	bne.n	800cb1c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb14:	4618      	mov	r0, r3
 800cb16:	f7ff ff30 	bl	800c97a <LL_RCC_SetRTCClockSource>
 800cb1a:	e02e      	b.n	800cb7a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800cb1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cb20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb24:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800cb26:	f7ff ff4b 	bl	800c9c0 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800cb2a:	f7ff ff5a 	bl	800c9e2 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb38:	4313      	orrs	r3, r2
 800cb3a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800cb3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800cb46:	f7ff fde1 	bl	800c70c <LL_RCC_LSE_IsEnabled>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	2b01      	cmp	r3, #1
 800cb4e:	d114      	bne.n	800cb7a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800cb50:	f7fa ffc6 	bl	8007ae0 <HAL_GetTick>
 800cb54:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800cb56:	e00b      	b.n	800cb70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cb58:	f7fa ffc2 	bl	8007ae0 <HAL_GetTick>
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	693b      	ldr	r3, [r7, #16]
 800cb60:	1ad3      	subs	r3, r2, r3
 800cb62:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cb66:	4293      	cmp	r3, r2
 800cb68:	d902      	bls.n	800cb70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800cb6a:	2303      	movs	r3, #3
 800cb6c:	77fb      	strb	r3, [r7, #31]
              break;
 800cb6e:	e004      	b.n	800cb7a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800cb70:	f7ff fdde 	bl	800c730 <LL_RCC_LSE_IsReady>
 800cb74:	4603      	mov	r3, r0
 800cb76:	2b01      	cmp	r3, #1
 800cb78:	d1ee      	bne.n	800cb58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800cb7a:	7ffb      	ldrb	r3, [r7, #31]
 800cb7c:	77bb      	strb	r3, [r7, #30]
 800cb7e:	e001      	b.n	800cb84 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb80:	7ffb      	ldrb	r3, [r7, #31]
 800cb82:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f003 0301 	and.w	r3, r3, #1
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d004      	beq.n	800cb9a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	699b      	ldr	r3, [r3, #24]
 800cb94:	4618      	mov	r0, r3
 800cb96:	f7ff fe2a 	bl	800c7ee <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f003 0302 	and.w	r3, r3, #2
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d004      	beq.n	800cbb0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	69db      	ldr	r3, [r3, #28]
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f7ff fe35 	bl	800c81a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f003 0310 	and.w	r3, r3, #16
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d004      	beq.n	800cbc6 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f7ff fe5d 	bl	800c880 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f003 0320 	and.w	r3, r3, #32
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d004      	beq.n	800cbdc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f7ff fe52 	bl	800c880 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f003 0304 	and.w	r3, r3, #4
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d004      	beq.n	800cbf2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6a1b      	ldr	r3, [r3, #32]
 800cbec:	4618      	mov	r0, r3
 800cbee:	f7ff fe2a 	bl	800c846 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f003 0308 	and.w	r3, r3, #8
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d004      	beq.n	800cc08 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7ff fe1f 	bl	800c846 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d022      	beq.n	800cc5a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f7ff fe8d 	bl	800c938 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cc26:	d107      	bne.n	800cc38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800cc28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cc2c:	68db      	ldr	r3, [r3, #12]
 800cc2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cc32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cc36:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cc40:	d10b      	bne.n	800cc5a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	3304      	adds	r3, #4
 800cc46:	4618      	mov	r0, r3
 800cc48:	f000 f8e3 	bl	800ce12 <RCCEx_PLLSAI1_ConfigNQ>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800cc50:	7ffb      	ldrb	r3, [r7, #31]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d001      	beq.n	800cc5a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800cc56:	7ffb      	ldrb	r3, [r7, #31]
 800cc58:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d02b      	beq.n	800ccbe <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc6e:	d008      	beq.n	800cc82 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cc78:	d003      	beq.n	800cc82 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d105      	bne.n	800cc8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc86:	4618      	mov	r0, r3
 800cc88:	f7ff fe2a 	bl	800c8e0 <LL_RCC_SetRNGClockSource>
 800cc8c:	e00a      	b.n	800cca4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cc96:	60fb      	str	r3, [r7, #12]
 800cc98:	2000      	movs	r0, #0
 800cc9a:	f7ff fe21 	bl	800c8e0 <LL_RCC_SetRNGClockSource>
 800cc9e:	68f8      	ldr	r0, [r7, #12]
 800cca0:	f7ff fe34 	bl	800c90c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cca8:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800ccac:	d107      	bne.n	800ccbe <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800ccae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ccb2:	68db      	ldr	r3, [r3, #12]
 800ccb4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ccb8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ccbc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d022      	beq.n	800cd10 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f7ff fe3d 	bl	800c94e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ccd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ccdc:	d107      	bne.n	800ccee <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800ccde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cce2:	68db      	ldr	r3, [r3, #12]
 800cce4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cce8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ccec:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ccf2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ccf6:	d10b      	bne.n	800cd10 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	3304      	adds	r3, #4
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f000 f8e3 	bl	800cec8 <RCCEx_PLLSAI1_ConfigNR>
 800cd02:	4603      	mov	r3, r0
 800cd04:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800cd06:	7ffb      	ldrb	r3, [r7, #31]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d001      	beq.n	800cd10 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800cd0c:	7ffb      	ldrb	r3, [r7, #31]
 800cd0e:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d004      	beq.n	800cd26 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd20:	4618      	mov	r0, r3
 800cd22:	f7ff fd26 	bl	800c772 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d009      	beq.n	800cd46 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7ff fd45 	bl	800c7c6 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd40:	4618      	mov	r0, r3
 800cd42:	f7ff fd2c 	bl	800c79e <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800cd46:	7fbb      	ldrb	r3, [r7, #30]
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3720      	adds	r7, #32
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}

0800cd50 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800cd54:	f7ff fcfe 	bl	800c754 <LL_RCC_MSI_EnablePLLMode>
}
 800cd58:	bf00      	nop
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b084      	sub	sp, #16
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cd64:	2300      	movs	r3, #0
 800cd66:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800cd68:	f7ff fe5b 	bl	800ca22 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800cd6c:	f7fa feb8 	bl	8007ae0 <HAL_GetTick>
 800cd70:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800cd72:	e009      	b.n	800cd88 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cd74:	f7fa feb4 	bl	8007ae0 <HAL_GetTick>
 800cd78:	4602      	mov	r2, r0
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	1ad3      	subs	r3, r2, r3
 800cd7e:	2b02      	cmp	r3, #2
 800cd80:	d902      	bls.n	800cd88 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800cd82:	2303      	movs	r3, #3
 800cd84:	73fb      	strb	r3, [r7, #15]
      break;
 800cd86:	e004      	b.n	800cd92 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800cd88:	f7ff fe5a 	bl	800ca40 <LL_RCC_PLLSAI1_IsReady>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d1f0      	bne.n	800cd74 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800cd92:	7bfb      	ldrb	r3, [r7, #15]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d137      	bne.n	800ce08 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800cd98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cd9c:	691b      	ldr	r3, [r3, #16]
 800cd9e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	021b      	lsls	r3, r3, #8
 800cda8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cdac:	4313      	orrs	r3, r2
 800cdae:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800cdb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cdb4:	691b      	ldr	r3, [r3, #16]
 800cdb6:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	685b      	ldr	r3, [r3, #4]
 800cdbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cdc2:	4313      	orrs	r3, r2
 800cdc4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800cdc6:	f7ff fe1d 	bl	800ca04 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cdca:	f7fa fe89 	bl	8007ae0 <HAL_GetTick>
 800cdce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800cdd0:	e009      	b.n	800cde6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cdd2:	f7fa fe85 	bl	8007ae0 <HAL_GetTick>
 800cdd6:	4602      	mov	r2, r0
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	1ad3      	subs	r3, r2, r3
 800cddc:	2b02      	cmp	r3, #2
 800cdde:	d902      	bls.n	800cde6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800cde0:	2303      	movs	r3, #3
 800cde2:	73fb      	strb	r3, [r7, #15]
        break;
 800cde4:	e004      	b.n	800cdf0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800cde6:	f7ff fe2b 	bl	800ca40 <LL_RCC_PLLSAI1_IsReady>
 800cdea:	4603      	mov	r3, r0
 800cdec:	2b01      	cmp	r3, #1
 800cdee:	d1f0      	bne.n	800cdd2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800cdf0:	7bfb      	ldrb	r3, [r7, #15]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d108      	bne.n	800ce08 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800cdf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cdfa:	691a      	ldr	r2, [r3, #16]
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	691b      	ldr	r3, [r3, #16]
 800ce00:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ce04:	4313      	orrs	r3, r2
 800ce06:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800ce08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3710      	adds	r7, #16
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}

0800ce12 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800ce12:	b580      	push	{r7, lr}
 800ce14:	b084      	sub	sp, #16
 800ce16:	af00      	add	r7, sp, #0
 800ce18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800ce1e:	f7ff fe00 	bl	800ca22 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ce22:	f7fa fe5d 	bl	8007ae0 <HAL_GetTick>
 800ce26:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ce28:	e009      	b.n	800ce3e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ce2a:	f7fa fe59 	bl	8007ae0 <HAL_GetTick>
 800ce2e:	4602      	mov	r2, r0
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	1ad3      	subs	r3, r2, r3
 800ce34:	2b02      	cmp	r3, #2
 800ce36:	d902      	bls.n	800ce3e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800ce38:	2303      	movs	r3, #3
 800ce3a:	73fb      	strb	r3, [r7, #15]
      break;
 800ce3c:	e004      	b.n	800ce48 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ce3e:	f7ff fdff 	bl	800ca40 <LL_RCC_PLLSAI1_IsReady>
 800ce42:	4603      	mov	r3, r0
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d1f0      	bne.n	800ce2a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800ce48:	7bfb      	ldrb	r3, [r7, #15]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d137      	bne.n	800cebe <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800ce4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce52:	691b      	ldr	r3, [r3, #16]
 800ce54:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	021b      	lsls	r3, r3, #8
 800ce5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ce62:	4313      	orrs	r3, r2
 800ce64:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800ce66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce6a:	691b      	ldr	r3, [r3, #16]
 800ce6c:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	689b      	ldr	r3, [r3, #8]
 800ce74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ce78:	4313      	orrs	r3, r2
 800ce7a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800ce7c:	f7ff fdc2 	bl	800ca04 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce80:	f7fa fe2e 	bl	8007ae0 <HAL_GetTick>
 800ce84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ce86:	e009      	b.n	800ce9c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ce88:	f7fa fe2a 	bl	8007ae0 <HAL_GetTick>
 800ce8c:	4602      	mov	r2, r0
 800ce8e:	68bb      	ldr	r3, [r7, #8]
 800ce90:	1ad3      	subs	r3, r2, r3
 800ce92:	2b02      	cmp	r3, #2
 800ce94:	d902      	bls.n	800ce9c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800ce96:	2303      	movs	r3, #3
 800ce98:	73fb      	strb	r3, [r7, #15]
        break;
 800ce9a:	e004      	b.n	800cea6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ce9c:	f7ff fdd0 	bl	800ca40 <LL_RCC_PLLSAI1_IsReady>
 800cea0:	4603      	mov	r3, r0
 800cea2:	2b01      	cmp	r3, #1
 800cea4:	d1f0      	bne.n	800ce88 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800cea6:	7bfb      	ldrb	r3, [r7, #15]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d108      	bne.n	800cebe <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800ceac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ceb0:	691a      	ldr	r2, [r3, #16]
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	691b      	ldr	r3, [r3, #16]
 800ceb6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ceba:	4313      	orrs	r3, r2
 800cebc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800cebe:	7bfb      	ldrb	r3, [r7, #15]
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3710      	adds	r7, #16
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}

0800cec8 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b084      	sub	sp, #16
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ced0:	2300      	movs	r3, #0
 800ced2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800ced4:	f7ff fda5 	bl	800ca22 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ced8:	f7fa fe02 	bl	8007ae0 <HAL_GetTick>
 800cedc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800cede:	e009      	b.n	800cef4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cee0:	f7fa fdfe 	bl	8007ae0 <HAL_GetTick>
 800cee4:	4602      	mov	r2, r0
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	1ad3      	subs	r3, r2, r3
 800ceea:	2b02      	cmp	r3, #2
 800ceec:	d902      	bls.n	800cef4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800ceee:	2303      	movs	r3, #3
 800cef0:	73fb      	strb	r3, [r7, #15]
      break;
 800cef2:	e004      	b.n	800cefe <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800cef4:	f7ff fda4 	bl	800ca40 <LL_RCC_PLLSAI1_IsReady>
 800cef8:	4603      	mov	r3, r0
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d1f0      	bne.n	800cee0 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800cefe:	7bfb      	ldrb	r3, [r7, #15]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d137      	bne.n	800cf74 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800cf04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf08:	691b      	ldr	r3, [r3, #16]
 800cf0a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	021b      	lsls	r3, r3, #8
 800cf14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cf18:	4313      	orrs	r3, r2
 800cf1a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800cf1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf20:	691b      	ldr	r3, [r3, #16]
 800cf22:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	68db      	ldr	r3, [r3, #12]
 800cf2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cf2e:	4313      	orrs	r3, r2
 800cf30:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800cf32:	f7ff fd67 	bl	800ca04 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf36:	f7fa fdd3 	bl	8007ae0 <HAL_GetTick>
 800cf3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800cf3c:	e009      	b.n	800cf52 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cf3e:	f7fa fdcf 	bl	8007ae0 <HAL_GetTick>
 800cf42:	4602      	mov	r2, r0
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	1ad3      	subs	r3, r2, r3
 800cf48:	2b02      	cmp	r3, #2
 800cf4a:	d902      	bls.n	800cf52 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800cf4c:	2303      	movs	r3, #3
 800cf4e:	73fb      	strb	r3, [r7, #15]
        break;
 800cf50:	e004      	b.n	800cf5c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800cf52:	f7ff fd75 	bl	800ca40 <LL_RCC_PLLSAI1_IsReady>
 800cf56:	4603      	mov	r3, r0
 800cf58:	2b01      	cmp	r3, #1
 800cf5a:	d1f0      	bne.n	800cf3e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800cf5c:	7bfb      	ldrb	r3, [r7, #15]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d108      	bne.n	800cf74 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800cf62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf66:	691a      	ldr	r2, [r3, #16]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	691b      	ldr	r3, [r3, #16]
 800cf6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cf70:	4313      	orrs	r3, r2
 800cf72:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800cf74:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3710      	adds	r7, #16
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}

0800cf7e <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800cf7e:	b580      	push	{r7, lr}
 800cf80:	b084      	sub	sp, #16
 800cf82:	af00      	add	r7, sp, #0
 800cf84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800cf86:	2301      	movs	r3, #1
 800cf88:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d101      	bne.n	800cf94 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800cf90:	2301      	movs	r3, #1
 800cf92:	e07a      	b.n	800d08a <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800cf9a:	b2db      	uxtb	r3, r3
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d106      	bne.n	800cfae <HAL_RTC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800cfa8:	6878      	ldr	r0, [r7, #4]
 800cfaa:	f7f9 ffc5 	bl	8006f38 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2202      	movs	r2, #2
 800cfb2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	68db      	ldr	r3, [r3, #12]
 800cfbc:	f003 0310 	and.w	r3, r3, #16
 800cfc0:	2b10      	cmp	r3, #16
 800cfc2:	d058      	beq.n	800d076 <HAL_RTC_Init+0xf8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	22ca      	movs	r2, #202	@ 0xca
 800cfca:	625a      	str	r2, [r3, #36]	@ 0x24
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	2253      	movs	r2, #83	@ 0x53
 800cfd2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f000 f883 	bl	800d0e0 <RTC_EnterInitMode>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800cfde:	7bfb      	ldrb	r3, [r7, #15]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d12c      	bne.n	800d03e <HAL_RTC_Init+0xc0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	689b      	ldr	r3, [r3, #8]
 800cfea:	687a      	ldr	r2, [r7, #4]
 800cfec:	6812      	ldr	r2, [r2, #0]
 800cfee:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800cff2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cff6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	6899      	ldr	r1, [r3, #8]
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	685a      	ldr	r2, [r3, #4]
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	691b      	ldr	r3, [r3, #16]
 800d006:	431a      	orrs	r2, r3
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	699b      	ldr	r3, [r3, #24]
 800d00c:	431a      	orrs	r2, r3
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	430a      	orrs	r2, r1
 800d014:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	687a      	ldr	r2, [r7, #4]
 800d01c:	68d2      	ldr	r2, [r2, #12]
 800d01e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	6919      	ldr	r1, [r3, #16]
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	689b      	ldr	r3, [r3, #8]
 800d02a:	041a      	lsls	r2, r3, #16
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	430a      	orrs	r2, r1
 800d032:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f000 f88b 	bl	800d150 <RTC_ExitInitMode>
 800d03a:	4603      	mov	r3, r0
 800d03c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d03e:	7bfb      	ldrb	r3, [r7, #15]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d113      	bne.n	800d06c <HAL_RTC_Init+0xee>
    {
#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f022 0203 	bic.w	r2, r2, #3
 800d052:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	69da      	ldr	r2, [r3, #28]
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	695b      	ldr	r3, [r3, #20]
 800d062:	431a      	orrs	r2, r3
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	430a      	orrs	r2, r1
 800d06a:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutRemap);
#endif /* RTC_OR_ALARMOUTTYPE */
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	22ff      	movs	r2, #255	@ 0xff
 800d072:	625a      	str	r2, [r3, #36]	@ 0x24
 800d074:	e001      	b.n	800d07a <HAL_RTC_Init+0xfc>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800d076:	2300      	movs	r3, #0
 800d078:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800d07a:	7bfb      	ldrb	r3, [r7, #15]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d103      	bne.n	800d088 <HAL_RTC_Init+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2201      	movs	r2, #1
 800d084:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800d088:	7bfb      	ldrb	r3, [r7, #15]
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3710      	adds	r7, #16
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}
	...

0800d094 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b084      	sub	sp, #16
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d09c:	2300      	movs	r3, #0
 800d09e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	4a0d      	ldr	r2, [pc, #52]	@ (800d0dc <HAL_RTC_WaitForSynchro+0x48>)
 800d0a6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d0a8:	f7fa fd1a 	bl	8007ae0 <HAL_GetTick>
 800d0ac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d0ae:	e009      	b.n	800d0c4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d0b0:	f7fa fd16 	bl	8007ae0 <HAL_GetTick>
 800d0b4:	4602      	mov	r2, r0
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	1ad3      	subs	r3, r2, r3
 800d0ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d0be:	d901      	bls.n	800d0c4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800d0c0:	2303      	movs	r3, #3
 800d0c2:	e007      	b.n	800d0d4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	68db      	ldr	r3, [r3, #12]
 800d0ca:	f003 0320 	and.w	r3, r3, #32
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d0ee      	beq.n	800d0b0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800d0d2:	2300      	movs	r3, #0
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3710      	adds	r7, #16
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}
 800d0dc:	0001ff5f 	.word	0x0001ff5f

0800d0e0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b084      	sub	sp, #16
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	68db      	ldr	r3, [r3, #12]
 800d0f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d123      	bne.n	800d146 <RTC_EnterInitMode+0x66>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	68da      	ldr	r2, [r3, #12]
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800d10c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d10e:	f7fa fce7 	bl	8007ae0 <HAL_GetTick>
 800d112:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800d114:	e00d      	b.n	800d132 <RTC_EnterInitMode+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d116:	f7fa fce3 	bl	8007ae0 <HAL_GetTick>
 800d11a:	4602      	mov	r2, r0
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	1ad3      	subs	r3, r2, r3
 800d120:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d124:	d905      	bls.n	800d132 <RTC_EnterInitMode+0x52>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2204      	movs	r2, #4
 800d12a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        status = HAL_ERROR;
 800d12e:	2301      	movs	r3, #1
 800d130:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	68db      	ldr	r3, [r3, #12]
 800d138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d102      	bne.n	800d146 <RTC_EnterInitMode+0x66>
 800d140:	7bfb      	ldrb	r3, [r7, #15]
 800d142:	2b01      	cmp	r3, #1
 800d144:	d1e7      	bne.n	800d116 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800d146:	7bfb      	ldrb	r3, [r7, #15]
}
 800d148:	4618      	mov	r0, r3
 800d14a:	3710      	adds	r7, #16
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}

0800d150 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b084      	sub	sp, #16
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d158:	2300      	movs	r3, #0
 800d15a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	68da      	ldr	r2, [r3, #12]
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d16a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	689b      	ldr	r3, [r3, #8]
 800d172:	f003 0320 	and.w	r3, r3, #32
 800d176:	2b00      	cmp	r3, #0
 800d178:	d10b      	bne.n	800d192 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f7ff ff8a 	bl	800d094 <HAL_RTC_WaitForSynchro>
 800d180:	4603      	mov	r3, r0
 800d182:	2b00      	cmp	r3, #0
 800d184:	d005      	beq.n	800d192 <RTC_ExitInitMode+0x42>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2204      	movs	r2, #4
 800d18a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_ERROR;
 800d18e:	2301      	movs	r3, #1
 800d190:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800d192:	7bfb      	ldrb	r3, [r7, #15]
}
 800d194:	4618      	mov	r0, r3
 800d196:	3710      	adds	r7, #16
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}

0800d19c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800d19c:	b480      	push	{r7}
 800d19e:	b087      	sub	sp, #28
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	60f8      	str	r0, [r7, #12]
 800d1a4:	60b9      	str	r1, [r7, #8]
 800d1a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800d1a8:	4b5f      	ldr	r3, [pc, #380]	@ (800d328 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4a5f      	ldr	r2, [pc, #380]	@ (800d32c <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 800d1ae:	fba2 2303 	umull	r2, r3, r2, r3
 800d1b2:	0adb      	lsrs	r3, r3, #11
 800d1b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d1b8:	fb02 f303 	mul.w	r3, r2, r3
 800d1bc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d1c4:	2b01      	cmp	r3, #1
 800d1c6:	d101      	bne.n	800d1cc <HAL_RTCEx_SetWakeUpTimer_IT+0x30>
 800d1c8:	2302      	movs	r3, #2
 800d1ca:	e0a7      	b.n	800d31c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	2202      	movs	r2, #2
 800d1d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	22ca      	movs	r2, #202	@ 0xca
 800d1e2:	625a      	str	r2, [r3, #36]	@ 0x24
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	2253      	movs	r2, #83	@ 0x53
 800d1ea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	689b      	ldr	r3, [r3, #8]
 800d1f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d01a      	beq.n	800d230 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	3b01      	subs	r3, #1
 800d1fe:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d10d      	bne.n	800d222 <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	22ff      	movs	r2, #255	@ 0xff
 800d20c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	2203      	movs	r2, #3
 800d212:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	2200      	movs	r2, #0
 800d21a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800d21e:	2303      	movs	r3, #3
 800d220:	e07c      	b.n	800d31c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	68db      	ldr	r3, [r3, #12]
 800d228:	f003 0304 	and.w	r3, r3, #4
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d1e4      	bne.n	800d1fa <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	689a      	ldr	r2, [r3, #8]
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d23e:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	68db      	ldr	r3, [r3, #12]
 800d246:	b2da      	uxtb	r2, r3
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800d250:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800d252:	4b35      	ldr	r3, [pc, #212]	@ (800d328 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	4a35      	ldr	r2, [pc, #212]	@ (800d32c <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 800d258:	fba2 2303 	umull	r2, r3, r2, r3
 800d25c:	0adb      	lsrs	r3, r3, #11
 800d25e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d262:	fb02 f303 	mul.w	r3, r2, r3
 800d266:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	3b01      	subs	r3, #1
 800d26c:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 800d26e:	697b      	ldr	r3, [r7, #20]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d10d      	bne.n	800d290 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	22ff      	movs	r2, #255	@ 0xff
 800d27a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	2203      	movs	r2, #3
 800d280:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	2200      	movs	r2, #0
 800d288:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800d28c:	2303      	movs	r3, #3
 800d28e:	e045      	b.n	800d31c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	68db      	ldr	r3, [r3, #12]
 800d296:	f003 0304 	and.w	r3, r3, #4
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d0e4      	beq.n	800d268 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	689a      	ldr	r2, [r3, #8]
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f022 0207 	bic.w	r2, r2, #7
 800d2ac:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	6899      	ldr	r1, [r3, #8]
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	687a      	ldr	r2, [r7, #4]
 800d2ba:	430a      	orrs	r2, r1
 800d2bc:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	68ba      	ldr	r2, [r7, #8]
 800d2c4:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800d2c6:	4b1a      	ldr	r3, [pc, #104]	@ (800d330 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800d2c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2cc:	4a18      	ldr	r2, [pc, #96]	@ (800d330 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800d2ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d2d2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800d2d6:	4b16      	ldr	r3, [pc, #88]	@ (800d330 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	4a15      	ldr	r2, [pc, #84]	@ (800d330 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800d2dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d2e0:	6013      	str	r3, [r2, #0]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	689a      	ldr	r2, [r3, #8]
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d2f0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	689a      	ldr	r2, [r3, #8]
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d300:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	22ff      	movs	r2, #255	@ 0xff
 800d308:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	2201      	movs	r2, #1
 800d30e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	2200      	movs	r2, #0
 800d316:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800d31a:	2300      	movs	r3, #0
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	371c      	adds	r7, #28
 800d320:	46bd      	mov	sp, r7
 800d322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d326:	4770      	bx	lr
 800d328:	20000024 	.word	0x20000024
 800d32c:	10624dd3 	.word	0x10624dd3
 800d330:	58000800 	.word	0x58000800

0800d334 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b084      	sub	sp, #16
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d101      	bne.n	800d346 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d342:	2301      	movs	r3, #1
 800d344:	e095      	b.n	800d472 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d108      	bne.n	800d360 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	685b      	ldr	r3, [r3, #4]
 800d352:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d356:	d009      	beq.n	800d36c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2200      	movs	r2, #0
 800d35c:	61da      	str	r2, [r3, #28]
 800d35e:	e005      	b.n	800d36c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2200      	movs	r2, #0
 800d364:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2200      	movs	r2, #0
 800d36a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2200      	movs	r2, #0
 800d370:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d378:	b2db      	uxtb	r3, r3
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d106      	bne.n	800d38c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2200      	movs	r2, #0
 800d382:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f7f9 fed2 	bl	8007130 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2202      	movs	r2, #2
 800d390:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	681a      	ldr	r2, [r3, #0]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d3a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	68db      	ldr	r3, [r3, #12]
 800d3a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d3ac:	d902      	bls.n	800d3b4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	60fb      	str	r3, [r7, #12]
 800d3b2:	e002      	b.n	800d3ba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d3b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d3b8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	68db      	ldr	r3, [r3, #12]
 800d3be:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800d3c2:	d007      	beq.n	800d3d4 <HAL_SPI_Init+0xa0>
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	68db      	ldr	r3, [r3, #12]
 800d3c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d3cc:	d002      	beq.n	800d3d4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	685b      	ldr	r3, [r3, #4]
 800d3d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	689b      	ldr	r3, [r3, #8]
 800d3e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800d3e4:	431a      	orrs	r2, r3
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	691b      	ldr	r3, [r3, #16]
 800d3ea:	f003 0302 	and.w	r3, r3, #2
 800d3ee:	431a      	orrs	r2, r3
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	695b      	ldr	r3, [r3, #20]
 800d3f4:	f003 0301 	and.w	r3, r3, #1
 800d3f8:	431a      	orrs	r2, r3
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	699b      	ldr	r3, [r3, #24]
 800d3fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d402:	431a      	orrs	r2, r3
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	69db      	ldr	r3, [r3, #28]
 800d408:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d40c:	431a      	orrs	r2, r3
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6a1b      	ldr	r3, [r3, #32]
 800d412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d416:	ea42 0103 	orr.w	r1, r2, r3
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d41e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	430a      	orrs	r2, r1
 800d428:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	699b      	ldr	r3, [r3, #24]
 800d42e:	0c1b      	lsrs	r3, r3, #16
 800d430:	f003 0204 	and.w	r2, r3, #4
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d438:	f003 0310 	and.w	r3, r3, #16
 800d43c:	431a      	orrs	r2, r3
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d442:	f003 0308 	and.w	r3, r3, #8
 800d446:	431a      	orrs	r2, r3
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	68db      	ldr	r3, [r3, #12]
 800d44c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800d450:	ea42 0103 	orr.w	r1, r2, r3
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	430a      	orrs	r2, r1
 800d460:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2200      	movs	r2, #0
 800d466:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2201      	movs	r2, #1
 800d46c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800d470:	2300      	movs	r3, #0
}
 800d472:	4618      	mov	r0, r3
 800d474:	3710      	adds	r7, #16
 800d476:	46bd      	mov	sp, r7
 800d478:	bd80      	pop	{r7, pc}

0800d47a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d47a:	b580      	push	{r7, lr}
 800d47c:	b088      	sub	sp, #32
 800d47e:	af00      	add	r7, sp, #0
 800d480:	60f8      	str	r0, [r7, #12]
 800d482:	60b9      	str	r1, [r7, #8]
 800d484:	603b      	str	r3, [r7, #0]
 800d486:	4613      	mov	r3, r2
 800d488:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d48a:	f7fa fb29 	bl	8007ae0 <HAL_GetTick>
 800d48e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800d490:	88fb      	ldrh	r3, [r7, #6]
 800d492:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d49a:	b2db      	uxtb	r3, r3
 800d49c:	2b01      	cmp	r3, #1
 800d49e:	d001      	beq.n	800d4a4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800d4a0:	2302      	movs	r3, #2
 800d4a2:	e15c      	b.n	800d75e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d002      	beq.n	800d4b0 <HAL_SPI_Transmit+0x36>
 800d4aa:	88fb      	ldrh	r3, [r7, #6]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d101      	bne.n	800d4b4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	e154      	b.n	800d75e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800d4ba:	2b01      	cmp	r3, #1
 800d4bc:	d101      	bne.n	800d4c2 <HAL_SPI_Transmit+0x48>
 800d4be:	2302      	movs	r3, #2
 800d4c0:	e14d      	b.n	800d75e <HAL_SPI_Transmit+0x2e4>
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	2201      	movs	r2, #1
 800d4c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	2203      	movs	r2, #3
 800d4ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	68ba      	ldr	r2, [r7, #8]
 800d4dc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	88fa      	ldrh	r2, [r7, #6]
 800d4e2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	88fa      	ldrh	r2, [r7, #6]
 800d4e8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	2200      	movs	r2, #0
 800d504:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	2200      	movs	r2, #0
 800d50a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	689b      	ldr	r3, [r3, #8]
 800d510:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d514:	d10f      	bne.n	800d536 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	681a      	ldr	r2, [r3, #0]
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d524:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	681a      	ldr	r2, [r3, #0]
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d534:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d540:	2b40      	cmp	r3, #64	@ 0x40
 800d542:	d007      	beq.n	800d554 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	681a      	ldr	r2, [r3, #0]
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d552:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	68db      	ldr	r3, [r3, #12]
 800d558:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d55c:	d952      	bls.n	800d604 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	685b      	ldr	r3, [r3, #4]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d002      	beq.n	800d56c <HAL_SPI_Transmit+0xf2>
 800d566:	8b7b      	ldrh	r3, [r7, #26]
 800d568:	2b01      	cmp	r3, #1
 800d56a:	d145      	bne.n	800d5f8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d570:	881a      	ldrh	r2, [r3, #0]
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d57c:	1c9a      	adds	r2, r3, #2
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d586:	b29b      	uxth	r3, r3
 800d588:	3b01      	subs	r3, #1
 800d58a:	b29a      	uxth	r2, r3
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d590:	e032      	b.n	800d5f8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	689b      	ldr	r3, [r3, #8]
 800d598:	f003 0302 	and.w	r3, r3, #2
 800d59c:	2b02      	cmp	r3, #2
 800d59e:	d112      	bne.n	800d5c6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5a4:	881a      	ldrh	r2, [r3, #0]
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5b0:	1c9a      	adds	r2, r3, #2
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d5ba:	b29b      	uxth	r3, r3
 800d5bc:	3b01      	subs	r3, #1
 800d5be:	b29a      	uxth	r2, r3
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d5c4:	e018      	b.n	800d5f8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d5c6:	f7fa fa8b 	bl	8007ae0 <HAL_GetTick>
 800d5ca:	4602      	mov	r2, r0
 800d5cc:	69fb      	ldr	r3, [r7, #28]
 800d5ce:	1ad3      	subs	r3, r2, r3
 800d5d0:	683a      	ldr	r2, [r7, #0]
 800d5d2:	429a      	cmp	r2, r3
 800d5d4:	d803      	bhi.n	800d5de <HAL_SPI_Transmit+0x164>
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5dc:	d102      	bne.n	800d5e4 <HAL_SPI_Transmit+0x16a>
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d109      	bne.n	800d5f8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	2201      	movs	r2, #1
 800d5e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800d5f4:	2303      	movs	r3, #3
 800d5f6:	e0b2      	b.n	800d75e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d5fc:	b29b      	uxth	r3, r3
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d1c7      	bne.n	800d592 <HAL_SPI_Transmit+0x118>
 800d602:	e083      	b.n	800d70c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	685b      	ldr	r3, [r3, #4]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d002      	beq.n	800d612 <HAL_SPI_Transmit+0x198>
 800d60c:	8b7b      	ldrh	r3, [r7, #26]
 800d60e:	2b01      	cmp	r3, #1
 800d610:	d177      	bne.n	800d702 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d616:	b29b      	uxth	r3, r3
 800d618:	2b01      	cmp	r3, #1
 800d61a:	d912      	bls.n	800d642 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d620:	881a      	ldrh	r2, [r3, #0]
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d62c:	1c9a      	adds	r2, r3, #2
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d636:	b29b      	uxth	r3, r3
 800d638:	3b02      	subs	r3, #2
 800d63a:	b29a      	uxth	r2, r3
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d640:	e05f      	b.n	800d702 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	330c      	adds	r3, #12
 800d64c:	7812      	ldrb	r2, [r2, #0]
 800d64e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d654:	1c5a      	adds	r2, r3, #1
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d65e:	b29b      	uxth	r3, r3
 800d660:	3b01      	subs	r3, #1
 800d662:	b29a      	uxth	r2, r3
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800d668:	e04b      	b.n	800d702 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	689b      	ldr	r3, [r3, #8]
 800d670:	f003 0302 	and.w	r3, r3, #2
 800d674:	2b02      	cmp	r3, #2
 800d676:	d12b      	bne.n	800d6d0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d67c:	b29b      	uxth	r3, r3
 800d67e:	2b01      	cmp	r3, #1
 800d680:	d912      	bls.n	800d6a8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d686:	881a      	ldrh	r2, [r3, #0]
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d692:	1c9a      	adds	r2, r3, #2
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d69c:	b29b      	uxth	r3, r3
 800d69e:	3b02      	subs	r3, #2
 800d6a0:	b29a      	uxth	r2, r3
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d6a6:	e02c      	b.n	800d702 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	330c      	adds	r3, #12
 800d6b2:	7812      	ldrb	r2, [r2, #0]
 800d6b4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6ba:	1c5a      	adds	r2, r3, #1
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d6c4:	b29b      	uxth	r3, r3
 800d6c6:	3b01      	subs	r3, #1
 800d6c8:	b29a      	uxth	r2, r3
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d6ce:	e018      	b.n	800d702 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d6d0:	f7fa fa06 	bl	8007ae0 <HAL_GetTick>
 800d6d4:	4602      	mov	r2, r0
 800d6d6:	69fb      	ldr	r3, [r7, #28]
 800d6d8:	1ad3      	subs	r3, r2, r3
 800d6da:	683a      	ldr	r2, [r7, #0]
 800d6dc:	429a      	cmp	r2, r3
 800d6de:	d803      	bhi.n	800d6e8 <HAL_SPI_Transmit+0x26e>
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6e6:	d102      	bne.n	800d6ee <HAL_SPI_Transmit+0x274>
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d109      	bne.n	800d702 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	2201      	movs	r2, #1
 800d6f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800d6fe:	2303      	movs	r3, #3
 800d700:	e02d      	b.n	800d75e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d706:	b29b      	uxth	r3, r3
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d1ae      	bne.n	800d66a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d70c:	69fa      	ldr	r2, [r7, #28]
 800d70e:	6839      	ldr	r1, [r7, #0]
 800d710:	68f8      	ldr	r0, [r7, #12]
 800d712:	f000 fdfd 	bl	800e310 <SPI_EndRxTxTransaction>
 800d716:	4603      	mov	r3, r0
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d002      	beq.n	800d722 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	2220      	movs	r2, #32
 800d720:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	689b      	ldr	r3, [r3, #8]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d10a      	bne.n	800d740 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d72a:	2300      	movs	r3, #0
 800d72c:	617b      	str	r3, [r7, #20]
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	68db      	ldr	r3, [r3, #12]
 800d734:	617b      	str	r3, [r7, #20]
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	689b      	ldr	r3, [r3, #8]
 800d73c:	617b      	str	r3, [r7, #20]
 800d73e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	2201      	movs	r2, #1
 800d744:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	2200      	movs	r2, #0
 800d74c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d754:	2b00      	cmp	r3, #0
 800d756:	d001      	beq.n	800d75c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800d758:	2301      	movs	r3, #1
 800d75a:	e000      	b.n	800d75e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800d75c:	2300      	movs	r3, #0
  }
}
 800d75e:	4618      	mov	r0, r3
 800d760:	3720      	adds	r7, #32
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}

0800d766 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800d766:	b580      	push	{r7, lr}
 800d768:	b08a      	sub	sp, #40	@ 0x28
 800d76a:	af00      	add	r7, sp, #0
 800d76c:	60f8      	str	r0, [r7, #12]
 800d76e:	60b9      	str	r1, [r7, #8]
 800d770:	607a      	str	r2, [r7, #4]
 800d772:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d774:	2301      	movs	r3, #1
 800d776:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d778:	f7fa f9b2 	bl	8007ae0 <HAL_GetTick>
 800d77c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d784:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	685b      	ldr	r3, [r3, #4]
 800d78a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800d78c:	887b      	ldrh	r3, [r7, #2]
 800d78e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800d790:	887b      	ldrh	r3, [r7, #2]
 800d792:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d794:	7ffb      	ldrb	r3, [r7, #31]
 800d796:	2b01      	cmp	r3, #1
 800d798:	d00c      	beq.n	800d7b4 <HAL_SPI_TransmitReceive+0x4e>
 800d79a:	69bb      	ldr	r3, [r7, #24]
 800d79c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d7a0:	d106      	bne.n	800d7b0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	689b      	ldr	r3, [r3, #8]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d102      	bne.n	800d7b0 <HAL_SPI_TransmitReceive+0x4a>
 800d7aa:	7ffb      	ldrb	r3, [r7, #31]
 800d7ac:	2b04      	cmp	r3, #4
 800d7ae:	d001      	beq.n	800d7b4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800d7b0:	2302      	movs	r3, #2
 800d7b2:	e1f3      	b.n	800db9c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d005      	beq.n	800d7c6 <HAL_SPI_TransmitReceive+0x60>
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d002      	beq.n	800d7c6 <HAL_SPI_TransmitReceive+0x60>
 800d7c0:	887b      	ldrh	r3, [r7, #2]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d101      	bne.n	800d7ca <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	e1e8      	b.n	800db9c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800d7d0:	2b01      	cmp	r3, #1
 800d7d2:	d101      	bne.n	800d7d8 <HAL_SPI_TransmitReceive+0x72>
 800d7d4:	2302      	movs	r3, #2
 800d7d6:	e1e1      	b.n	800db9c <HAL_SPI_TransmitReceive+0x436>
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	2201      	movs	r2, #1
 800d7dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d7e6:	b2db      	uxtb	r3, r3
 800d7e8:	2b04      	cmp	r3, #4
 800d7ea:	d003      	beq.n	800d7f4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	2205      	movs	r2, #5
 800d7f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	687a      	ldr	r2, [r7, #4]
 800d7fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	887a      	ldrh	r2, [r7, #2]
 800d804:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	887a      	ldrh	r2, [r7, #2]
 800d80c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	68ba      	ldr	r2, [r7, #8]
 800d814:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	887a      	ldrh	r2, [r7, #2]
 800d81a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	887a      	ldrh	r2, [r7, #2]
 800d820:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	2200      	movs	r2, #0
 800d826:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	2200      	movs	r2, #0
 800d82c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	68db      	ldr	r3, [r3, #12]
 800d832:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d836:	d802      	bhi.n	800d83e <HAL_SPI_TransmitReceive+0xd8>
 800d838:	8abb      	ldrh	r3, [r7, #20]
 800d83a:	2b01      	cmp	r3, #1
 800d83c:	d908      	bls.n	800d850 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	685a      	ldr	r2, [r3, #4]
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d84c:	605a      	str	r2, [r3, #4]
 800d84e:	e007      	b.n	800d860 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	685a      	ldr	r2, [r3, #4]
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d85e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d86a:	2b40      	cmp	r3, #64	@ 0x40
 800d86c:	d007      	beq.n	800d87e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	681a      	ldr	r2, [r3, #0]
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d87c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	68db      	ldr	r3, [r3, #12]
 800d882:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d886:	f240 8083 	bls.w	800d990 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	685b      	ldr	r3, [r3, #4]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d002      	beq.n	800d898 <HAL_SPI_TransmitReceive+0x132>
 800d892:	8afb      	ldrh	r3, [r7, #22]
 800d894:	2b01      	cmp	r3, #1
 800d896:	d16f      	bne.n	800d978 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d89c:	881a      	ldrh	r2, [r3, #0]
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8a8:	1c9a      	adds	r2, r3, #2
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d8b2:	b29b      	uxth	r3, r3
 800d8b4:	3b01      	subs	r3, #1
 800d8b6:	b29a      	uxth	r2, r3
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d8bc:	e05c      	b.n	800d978 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	689b      	ldr	r3, [r3, #8]
 800d8c4:	f003 0302 	and.w	r3, r3, #2
 800d8c8:	2b02      	cmp	r3, #2
 800d8ca:	d11b      	bne.n	800d904 <HAL_SPI_TransmitReceive+0x19e>
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d8d0:	b29b      	uxth	r3, r3
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d016      	beq.n	800d904 <HAL_SPI_TransmitReceive+0x19e>
 800d8d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8d8:	2b01      	cmp	r3, #1
 800d8da:	d113      	bne.n	800d904 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8e0:	881a      	ldrh	r2, [r3, #0]
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8ec:	1c9a      	adds	r2, r3, #2
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d8f6:	b29b      	uxth	r3, r3
 800d8f8:	3b01      	subs	r3, #1
 800d8fa:	b29a      	uxth	r2, r3
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d900:	2300      	movs	r3, #0
 800d902:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	689b      	ldr	r3, [r3, #8]
 800d90a:	f003 0301 	and.w	r3, r3, #1
 800d90e:	2b01      	cmp	r3, #1
 800d910:	d11c      	bne.n	800d94c <HAL_SPI_TransmitReceive+0x1e6>
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d918:	b29b      	uxth	r3, r3
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d016      	beq.n	800d94c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	68da      	ldr	r2, [r3, #12]
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d928:	b292      	uxth	r2, r2
 800d92a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d930:	1c9a      	adds	r2, r3, #2
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d93c:	b29b      	uxth	r3, r3
 800d93e:	3b01      	subs	r3, #1
 800d940:	b29a      	uxth	r2, r3
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d948:	2301      	movs	r3, #1
 800d94a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d94c:	f7fa f8c8 	bl	8007ae0 <HAL_GetTick>
 800d950:	4602      	mov	r2, r0
 800d952:	6a3b      	ldr	r3, [r7, #32]
 800d954:	1ad3      	subs	r3, r2, r3
 800d956:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d958:	429a      	cmp	r2, r3
 800d95a:	d80d      	bhi.n	800d978 <HAL_SPI_TransmitReceive+0x212>
 800d95c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d95e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d962:	d009      	beq.n	800d978 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	2201      	movs	r2, #1
 800d968:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	2200      	movs	r2, #0
 800d970:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800d974:	2303      	movs	r3, #3
 800d976:	e111      	b.n	800db9c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d97c:	b29b      	uxth	r3, r3
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d19d      	bne.n	800d8be <HAL_SPI_TransmitReceive+0x158>
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d988:	b29b      	uxth	r3, r3
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d197      	bne.n	800d8be <HAL_SPI_TransmitReceive+0x158>
 800d98e:	e0e5      	b.n	800db5c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	685b      	ldr	r3, [r3, #4]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d003      	beq.n	800d9a0 <HAL_SPI_TransmitReceive+0x23a>
 800d998:	8afb      	ldrh	r3, [r7, #22]
 800d99a:	2b01      	cmp	r3, #1
 800d99c:	f040 80d1 	bne.w	800db42 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d9a4:	b29b      	uxth	r3, r3
 800d9a6:	2b01      	cmp	r3, #1
 800d9a8:	d912      	bls.n	800d9d0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9ae:	881a      	ldrh	r2, [r3, #0]
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9ba:	1c9a      	adds	r2, r3, #2
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d9c4:	b29b      	uxth	r3, r3
 800d9c6:	3b02      	subs	r3, #2
 800d9c8:	b29a      	uxth	r2, r3
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d9ce:	e0b8      	b.n	800db42 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	330c      	adds	r3, #12
 800d9da:	7812      	ldrb	r2, [r2, #0]
 800d9dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9e2:	1c5a      	adds	r2, r3, #1
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d9ec:	b29b      	uxth	r3, r3
 800d9ee:	3b01      	subs	r3, #1
 800d9f0:	b29a      	uxth	r2, r3
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d9f6:	e0a4      	b.n	800db42 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	689b      	ldr	r3, [r3, #8]
 800d9fe:	f003 0302 	and.w	r3, r3, #2
 800da02:	2b02      	cmp	r3, #2
 800da04:	d134      	bne.n	800da70 <HAL_SPI_TransmitReceive+0x30a>
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800da0a:	b29b      	uxth	r3, r3
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d02f      	beq.n	800da70 <HAL_SPI_TransmitReceive+0x30a>
 800da10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da12:	2b01      	cmp	r3, #1
 800da14:	d12c      	bne.n	800da70 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800da1a:	b29b      	uxth	r3, r3
 800da1c:	2b01      	cmp	r3, #1
 800da1e:	d912      	bls.n	800da46 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da24:	881a      	ldrh	r2, [r3, #0]
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da30:	1c9a      	adds	r2, r3, #2
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800da3a:	b29b      	uxth	r3, r3
 800da3c:	3b02      	subs	r3, #2
 800da3e:	b29a      	uxth	r2, r3
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800da44:	e012      	b.n	800da6c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	330c      	adds	r3, #12
 800da50:	7812      	ldrb	r2, [r2, #0]
 800da52:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da58:	1c5a      	adds	r2, r3, #1
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800da62:	b29b      	uxth	r3, r3
 800da64:	3b01      	subs	r3, #1
 800da66:	b29a      	uxth	r2, r3
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800da6c:	2300      	movs	r3, #0
 800da6e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	689b      	ldr	r3, [r3, #8]
 800da76:	f003 0301 	and.w	r3, r3, #1
 800da7a:	2b01      	cmp	r3, #1
 800da7c:	d148      	bne.n	800db10 <HAL_SPI_TransmitReceive+0x3aa>
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800da84:	b29b      	uxth	r3, r3
 800da86:	2b00      	cmp	r3, #0
 800da88:	d042      	beq.n	800db10 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800da90:	b29b      	uxth	r3, r3
 800da92:	2b01      	cmp	r3, #1
 800da94:	d923      	bls.n	800dade <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	68da      	ldr	r2, [r3, #12]
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800daa0:	b292      	uxth	r2, r2
 800daa2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800daa8:	1c9a      	adds	r2, r3, #2
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800dab4:	b29b      	uxth	r3, r3
 800dab6:	3b02      	subs	r3, #2
 800dab8:	b29a      	uxth	r2, r3
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800dac6:	b29b      	uxth	r3, r3
 800dac8:	2b01      	cmp	r3, #1
 800daca:	d81f      	bhi.n	800db0c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	685a      	ldr	r2, [r3, #4]
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800dada:	605a      	str	r2, [r3, #4]
 800dadc:	e016      	b.n	800db0c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	f103 020c 	add.w	r2, r3, #12
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800daea:	7812      	ldrb	r2, [r2, #0]
 800daec:	b2d2      	uxtb	r2, r2
 800daee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800daf4:	1c5a      	adds	r2, r3, #1
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800db00:	b29b      	uxth	r3, r3
 800db02:	3b01      	subs	r3, #1
 800db04:	b29a      	uxth	r2, r3
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800db0c:	2301      	movs	r3, #1
 800db0e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800db10:	f7f9 ffe6 	bl	8007ae0 <HAL_GetTick>
 800db14:	4602      	mov	r2, r0
 800db16:	6a3b      	ldr	r3, [r7, #32]
 800db18:	1ad3      	subs	r3, r2, r3
 800db1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db1c:	429a      	cmp	r2, r3
 800db1e:	d803      	bhi.n	800db28 <HAL_SPI_TransmitReceive+0x3c2>
 800db20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db26:	d102      	bne.n	800db2e <HAL_SPI_TransmitReceive+0x3c8>
 800db28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d109      	bne.n	800db42 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	2201      	movs	r2, #1
 800db32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	2200      	movs	r2, #0
 800db3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800db3e:	2303      	movs	r3, #3
 800db40:	e02c      	b.n	800db9c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800db46:	b29b      	uxth	r3, r3
 800db48:	2b00      	cmp	r3, #0
 800db4a:	f47f af55 	bne.w	800d9f8 <HAL_SPI_TransmitReceive+0x292>
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800db54:	b29b      	uxth	r3, r3
 800db56:	2b00      	cmp	r3, #0
 800db58:	f47f af4e 	bne.w	800d9f8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800db5c:	6a3a      	ldr	r2, [r7, #32]
 800db5e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800db60:	68f8      	ldr	r0, [r7, #12]
 800db62:	f000 fbd5 	bl	800e310 <SPI_EndRxTxTransaction>
 800db66:	4603      	mov	r3, r0
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d008      	beq.n	800db7e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	2220      	movs	r2, #32
 800db70:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	2200      	movs	r2, #0
 800db76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800db7a:	2301      	movs	r3, #1
 800db7c:	e00e      	b.n	800db9c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	2201      	movs	r2, #1
 800db82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	2200      	movs	r2, #0
 800db8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800db92:	2b00      	cmp	r3, #0
 800db94:	d001      	beq.n	800db9a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800db96:	2301      	movs	r3, #1
 800db98:	e000      	b.n	800db9c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800db9a:	2300      	movs	r3, #0
  }
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3728      	adds	r7, #40	@ 0x28
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b084      	sub	sp, #16
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	60b9      	str	r1, [r7, #8]
 800dbae:	4613      	mov	r3, r2
 800dbb0:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800dbb8:	b2db      	uxtb	r3, r3
 800dbba:	2b01      	cmp	r3, #1
 800dbbc:	d001      	beq.n	800dbc2 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800dbbe:	2302      	movs	r3, #2
 800dbc0:	e0d4      	b.n	800dd6c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d002      	beq.n	800dbce <HAL_SPI_Transmit_DMA+0x2a>
 800dbc8:	88fb      	ldrh	r3, [r7, #6]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d101      	bne.n	800dbd2 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800dbce:	2301      	movs	r3, #1
 800dbd0:	e0cc      	b.n	800dd6c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800dbd8:	2b01      	cmp	r3, #1
 800dbda:	d101      	bne.n	800dbe0 <HAL_SPI_Transmit_DMA+0x3c>
 800dbdc:	2302      	movs	r3, #2
 800dbde:	e0c5      	b.n	800dd6c <HAL_SPI_Transmit_DMA+0x1c8>
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	2203      	movs	r2, #3
 800dbec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	68ba      	ldr	r2, [r7, #8]
 800dbfa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	88fa      	ldrh	r2, [r7, #6]
 800dc00:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	88fa      	ldrh	r2, [r7, #6]
 800dc06:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	2200      	movs	r2, #0
 800dc12:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	2200      	movs	r2, #0
 800dc18:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2200      	movs	r2, #0
 800dc26:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	689b      	ldr	r3, [r3, #8]
 800dc2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dc32:	d10f      	bne.n	800dc54 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	681a      	ldr	r2, [r3, #0]
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dc42:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	681a      	ldr	r2, [r3, #0]
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dc52:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc58:	4a46      	ldr	r2, [pc, #280]	@ (800dd74 <HAL_SPI_Transmit_DMA+0x1d0>)
 800dc5a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc60:	4a45      	ldr	r2, [pc, #276]	@ (800dd78 <HAL_SPI_Transmit_DMA+0x1d4>)
 800dc62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc68:	4a44      	ldr	r2, [pc, #272]	@ (800dd7c <HAL_SPI_Transmit_DMA+0x1d8>)
 800dc6a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc70:	2200      	movs	r2, #0
 800dc72:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	685a      	ldr	r2, [r3, #4]
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800dc82:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	68db      	ldr	r3, [r3, #12]
 800dc88:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800dc8c:	d82d      	bhi.n	800dcea <HAL_SPI_Transmit_DMA+0x146>
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc92:	699b      	ldr	r3, [r3, #24]
 800dc94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dc98:	d127      	bne.n	800dcea <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dc9e:	b29b      	uxth	r3, r3
 800dca0:	f003 0301 	and.w	r3, r3, #1
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d10f      	bne.n	800dcc8 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	685a      	ldr	r2, [r3, #4]
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800dcb6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dcbc:	b29b      	uxth	r3, r3
 800dcbe:	085b      	lsrs	r3, r3, #1
 800dcc0:	b29a      	uxth	r2, r3
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800dcc6:	e010      	b.n	800dcea <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	685a      	ldr	r2, [r3, #4]
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dcd6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dcdc:	b29b      	uxth	r3, r3
 800dcde:	085b      	lsrs	r3, r3, #1
 800dce0:	b29b      	uxth	r3, r3
 800dce2:	3301      	adds	r3, #1
 800dce4:	b29a      	uxth	r2, r3
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcf2:	4619      	mov	r1, r3
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	330c      	adds	r3, #12
 800dcfa:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dd00:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800dd02:	f7fa f953 	bl	8007fac <HAL_DMA_Start_IT>
 800dd06:	4603      	mov	r3, r0
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d00b      	beq.n	800dd24 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dd10:	f043 0210 	orr.w	r2, r3, #16
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800dd20:	2301      	movs	r3, #1
 800dd22:	e023      	b.n	800dd6c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd2e:	2b40      	cmp	r3, #64	@ 0x40
 800dd30:	d007      	beq.n	800dd42 <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	681a      	ldr	r2, [r3, #0]
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dd40:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	2200      	movs	r2, #0
 800dd46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	685a      	ldr	r2, [r3, #4]
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	f042 0220 	orr.w	r2, r2, #32
 800dd58:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	685a      	ldr	r2, [r3, #4]
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	f042 0202 	orr.w	r2, r2, #2
 800dd68:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800dd6a:	2300      	movs	r3, #0
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3710      	adds	r7, #16
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}
 800dd74:	0800e04f 	.word	0x0800e04f
 800dd78:	0800dfa9 	.word	0x0800dfa9
 800dd7c:	0800e06b 	.word	0x0800e06b

0800dd80 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b088      	sub	sp, #32
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	685b      	ldr	r3, [r3, #4]
 800dd8e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	689b      	ldr	r3, [r3, #8]
 800dd96:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800dd98:	69bb      	ldr	r3, [r7, #24]
 800dd9a:	099b      	lsrs	r3, r3, #6
 800dd9c:	f003 0301 	and.w	r3, r3, #1
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d10f      	bne.n	800ddc4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800dda4:	69bb      	ldr	r3, [r7, #24]
 800dda6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d00a      	beq.n	800ddc4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ddae:	69fb      	ldr	r3, [r7, #28]
 800ddb0:	099b      	lsrs	r3, r3, #6
 800ddb2:	f003 0301 	and.w	r3, r3, #1
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d004      	beq.n	800ddc4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ddbe:	6878      	ldr	r0, [r7, #4]
 800ddc0:	4798      	blx	r3
    return;
 800ddc2:	e0d7      	b.n	800df74 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800ddc4:	69bb      	ldr	r3, [r7, #24]
 800ddc6:	085b      	lsrs	r3, r3, #1
 800ddc8:	f003 0301 	and.w	r3, r3, #1
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d00a      	beq.n	800dde6 <HAL_SPI_IRQHandler+0x66>
 800ddd0:	69fb      	ldr	r3, [r7, #28]
 800ddd2:	09db      	lsrs	r3, r3, #7
 800ddd4:	f003 0301 	and.w	r3, r3, #1
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d004      	beq.n	800dde6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	4798      	blx	r3
    return;
 800dde4:	e0c6      	b.n	800df74 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800dde6:	69bb      	ldr	r3, [r7, #24]
 800dde8:	095b      	lsrs	r3, r3, #5
 800ddea:	f003 0301 	and.w	r3, r3, #1
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d10c      	bne.n	800de0c <HAL_SPI_IRQHandler+0x8c>
 800ddf2:	69bb      	ldr	r3, [r7, #24]
 800ddf4:	099b      	lsrs	r3, r3, #6
 800ddf6:	f003 0301 	and.w	r3, r3, #1
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d106      	bne.n	800de0c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800ddfe:	69bb      	ldr	r3, [r7, #24]
 800de00:	0a1b      	lsrs	r3, r3, #8
 800de02:	f003 0301 	and.w	r3, r3, #1
 800de06:	2b00      	cmp	r3, #0
 800de08:	f000 80b4 	beq.w	800df74 <HAL_SPI_IRQHandler+0x1f4>
 800de0c:	69fb      	ldr	r3, [r7, #28]
 800de0e:	095b      	lsrs	r3, r3, #5
 800de10:	f003 0301 	and.w	r3, r3, #1
 800de14:	2b00      	cmp	r3, #0
 800de16:	f000 80ad 	beq.w	800df74 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800de1a:	69bb      	ldr	r3, [r7, #24]
 800de1c:	099b      	lsrs	r3, r3, #6
 800de1e:	f003 0301 	and.w	r3, r3, #1
 800de22:	2b00      	cmp	r3, #0
 800de24:	d023      	beq.n	800de6e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800de2c:	b2db      	uxtb	r3, r3
 800de2e:	2b03      	cmp	r3, #3
 800de30:	d011      	beq.n	800de56 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de36:	f043 0204 	orr.w	r2, r3, #4
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800de3e:	2300      	movs	r3, #0
 800de40:	617b      	str	r3, [r7, #20]
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	68db      	ldr	r3, [r3, #12]
 800de48:	617b      	str	r3, [r7, #20]
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	689b      	ldr	r3, [r3, #8]
 800de50:	617b      	str	r3, [r7, #20]
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	e00b      	b.n	800de6e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800de56:	2300      	movs	r3, #0
 800de58:	613b      	str	r3, [r7, #16]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	68db      	ldr	r3, [r3, #12]
 800de60:	613b      	str	r3, [r7, #16]
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	689b      	ldr	r3, [r3, #8]
 800de68:	613b      	str	r3, [r7, #16]
 800de6a:	693b      	ldr	r3, [r7, #16]
        return;
 800de6c:	e082      	b.n	800df74 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800de6e:	69bb      	ldr	r3, [r7, #24]
 800de70:	095b      	lsrs	r3, r3, #5
 800de72:	f003 0301 	and.w	r3, r3, #1
 800de76:	2b00      	cmp	r3, #0
 800de78:	d014      	beq.n	800dea4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de7e:	f043 0201 	orr.w	r2, r3, #1
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800de86:	2300      	movs	r3, #0
 800de88:	60fb      	str	r3, [r7, #12]
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	689b      	ldr	r3, [r3, #8]
 800de90:	60fb      	str	r3, [r7, #12]
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	681a      	ldr	r2, [r3, #0]
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dea0:	601a      	str	r2, [r3, #0]
 800dea2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800dea4:	69bb      	ldr	r3, [r7, #24]
 800dea6:	0a1b      	lsrs	r3, r3, #8
 800dea8:	f003 0301 	and.w	r3, r3, #1
 800deac:	2b00      	cmp	r3, #0
 800deae:	d00c      	beq.n	800deca <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800deb4:	f043 0208 	orr.w	r2, r3, #8
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800debc:	2300      	movs	r3, #0
 800debe:	60bb      	str	r3, [r7, #8]
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	689b      	ldr	r3, [r3, #8]
 800dec6:	60bb      	str	r3, [r7, #8]
 800dec8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d04f      	beq.n	800df72 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	685a      	ldr	r2, [r3, #4]
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800dee0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2201      	movs	r2, #1
 800dee6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800deea:	69fb      	ldr	r3, [r7, #28]
 800deec:	f003 0302 	and.w	r3, r3, #2
 800def0:	2b00      	cmp	r3, #0
 800def2:	d104      	bne.n	800defe <HAL_SPI_IRQHandler+0x17e>
 800def4:	69fb      	ldr	r3, [r7, #28]
 800def6:	f003 0301 	and.w	r3, r3, #1
 800defa:	2b00      	cmp	r3, #0
 800defc:	d034      	beq.n	800df68 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	685a      	ldr	r2, [r3, #4]
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	f022 0203 	bic.w	r2, r2, #3
 800df0c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df12:	2b00      	cmp	r3, #0
 800df14:	d011      	beq.n	800df3a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df1a:	4a18      	ldr	r2, [pc, #96]	@ (800df7c <HAL_SPI_IRQHandler+0x1fc>)
 800df1c:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df22:	4618      	mov	r0, r3
 800df24:	f7fa f8bd 	bl	80080a2 <HAL_DMA_Abort_IT>
 800df28:	4603      	mov	r3, r0
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d005      	beq.n	800df3a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800df32:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d016      	beq.n	800df70 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df46:	4a0d      	ldr	r2, [pc, #52]	@ (800df7c <HAL_SPI_IRQHandler+0x1fc>)
 800df48:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df4e:	4618      	mov	r0, r3
 800df50:	f7fa f8a7 	bl	80080a2 <HAL_DMA_Abort_IT>
 800df54:	4603      	mov	r3, r0
 800df56:	2b00      	cmp	r3, #0
 800df58:	d00a      	beq.n	800df70 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800df5e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800df66:	e003      	b.n	800df70 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800df68:	6878      	ldr	r0, [r7, #4]
 800df6a:	f000 f813 	bl	800df94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800df6e:	e000      	b.n	800df72 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800df70:	bf00      	nop
    return;
 800df72:	bf00      	nop
  }
}
 800df74:	3720      	adds	r7, #32
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}
 800df7a:	bf00      	nop
 800df7c:	0800e0ab 	.word	0x0800e0ab

0800df80 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800df80:	b480      	push	{r7}
 800df82:	b083      	sub	sp, #12
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800df88:	bf00      	nop
 800df8a:	370c      	adds	r7, #12
 800df8c:	46bd      	mov	sp, r7
 800df8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df92:	4770      	bx	lr

0800df94 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800df94:	b480      	push	{r7}
 800df96:	b083      	sub	sp, #12
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800df9c:	bf00      	nop
 800df9e:	370c      	adds	r7, #12
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa6:	4770      	bx	lr

0800dfa8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b086      	sub	sp, #24
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfb4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dfb6:	f7f9 fd93 	bl	8007ae0 <HAL_GetTick>
 800dfba:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	f003 0320 	and.w	r3, r3, #32
 800dfc6:	2b20      	cmp	r3, #32
 800dfc8:	d03b      	beq.n	800e042 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	685a      	ldr	r2, [r3, #4]
 800dfd0:	697b      	ldr	r3, [r7, #20]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	f022 0220 	bic.w	r2, r2, #32
 800dfd8:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800dfda:	697b      	ldr	r3, [r7, #20]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	685a      	ldr	r2, [r3, #4]
 800dfe0:	697b      	ldr	r3, [r7, #20]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	f022 0202 	bic.w	r2, r2, #2
 800dfe8:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800dfea:	693a      	ldr	r2, [r7, #16]
 800dfec:	2164      	movs	r1, #100	@ 0x64
 800dfee:	6978      	ldr	r0, [r7, #20]
 800dff0:	f000 f98e 	bl	800e310 <SPI_EndRxTxTransaction>
 800dff4:	4603      	mov	r3, r0
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d005      	beq.n	800e006 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dffe:	f043 0220 	orr.w	r2, r3, #32
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	689b      	ldr	r3, [r3, #8]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d10a      	bne.n	800e024 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e00e:	2300      	movs	r3, #0
 800e010:	60fb      	str	r3, [r7, #12]
 800e012:	697b      	ldr	r3, [r7, #20]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	68db      	ldr	r3, [r3, #12]
 800e018:	60fb      	str	r3, [r7, #12]
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	689b      	ldr	r3, [r3, #8]
 800e020:	60fb      	str	r3, [r7, #12]
 800e022:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800e024:	697b      	ldr	r3, [r7, #20]
 800e026:	2200      	movs	r2, #0
 800e028:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	2201      	movs	r2, #1
 800e02e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e036:	2b00      	cmp	r3, #0
 800e038:	d003      	beq.n	800e042 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800e03a:	6978      	ldr	r0, [r7, #20]
 800e03c:	f7ff ffaa 	bl	800df94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e040:	e002      	b.n	800e048 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800e042:	6978      	ldr	r0, [r7, #20]
 800e044:	f7f8 fd90 	bl	8006b68 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e048:	3718      	adds	r7, #24
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}

0800e04e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e04e:	b580      	push	{r7, lr}
 800e050:	b084      	sub	sp, #16
 800e052:	af00      	add	r7, sp, #0
 800e054:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e05a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800e05c:	68f8      	ldr	r0, [r7, #12]
 800e05e:	f7ff ff8f 	bl	800df80 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e062:	bf00      	nop
 800e064:	3710      	adds	r7, #16
 800e066:	46bd      	mov	sp, r7
 800e068:	bd80      	pop	{r7, pc}

0800e06a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e06a:	b580      	push	{r7, lr}
 800e06c:	b084      	sub	sp, #16
 800e06e:	af00      	add	r7, sp, #0
 800e070:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e076:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	685a      	ldr	r2, [r3, #4]
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	f022 0203 	bic.w	r2, r2, #3
 800e086:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e08c:	f043 0210 	orr.w	r2, r3, #16
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2201      	movs	r2, #1
 800e098:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800e09c:	68f8      	ldr	r0, [r7, #12]
 800e09e:	f7ff ff79 	bl	800df94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e0a2:	bf00      	nop
 800e0a4:	3710      	adds	r7, #16
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}

0800e0aa <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e0aa:	b580      	push	{r7, lr}
 800e0ac:	b084      	sub	sp, #16
 800e0ae:	af00      	add	r7, sp, #0
 800e0b0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0b6:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800e0c6:	68f8      	ldr	r0, [r7, #12]
 800e0c8:	f7ff ff64 	bl	800df94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e0cc:	bf00      	nop
 800e0ce:	3710      	adds	r7, #16
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}

0800e0d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b088      	sub	sp, #32
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	60f8      	str	r0, [r7, #12]
 800e0dc:	60b9      	str	r1, [r7, #8]
 800e0de:	603b      	str	r3, [r7, #0]
 800e0e0:	4613      	mov	r3, r2
 800e0e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e0e4:	f7f9 fcfc 	bl	8007ae0 <HAL_GetTick>
 800e0e8:	4602      	mov	r2, r0
 800e0ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0ec:	1a9b      	subs	r3, r3, r2
 800e0ee:	683a      	ldr	r2, [r7, #0]
 800e0f0:	4413      	add	r3, r2
 800e0f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e0f4:	f7f9 fcf4 	bl	8007ae0 <HAL_GetTick>
 800e0f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e0fa:	4b39      	ldr	r3, [pc, #228]	@ (800e1e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	015b      	lsls	r3, r3, #5
 800e100:	0d1b      	lsrs	r3, r3, #20
 800e102:	69fa      	ldr	r2, [r7, #28]
 800e104:	fb02 f303 	mul.w	r3, r2, r3
 800e108:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e10a:	e054      	b.n	800e1b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e112:	d050      	beq.n	800e1b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e114:	f7f9 fce4 	bl	8007ae0 <HAL_GetTick>
 800e118:	4602      	mov	r2, r0
 800e11a:	69bb      	ldr	r3, [r7, #24]
 800e11c:	1ad3      	subs	r3, r2, r3
 800e11e:	69fa      	ldr	r2, [r7, #28]
 800e120:	429a      	cmp	r2, r3
 800e122:	d902      	bls.n	800e12a <SPI_WaitFlagStateUntilTimeout+0x56>
 800e124:	69fb      	ldr	r3, [r7, #28]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d13d      	bne.n	800e1a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	685a      	ldr	r2, [r3, #4]
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800e138:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	685b      	ldr	r3, [r3, #4]
 800e13e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e142:	d111      	bne.n	800e168 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	689b      	ldr	r3, [r3, #8]
 800e148:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e14c:	d004      	beq.n	800e158 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	689b      	ldr	r3, [r3, #8]
 800e152:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e156:	d107      	bne.n	800e168 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	681a      	ldr	r2, [r3, #0]
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e166:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e16c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e170:	d10f      	bne.n	800e192 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	681a      	ldr	r2, [r3, #0]
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e180:	601a      	str	r2, [r3, #0]
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	681a      	ldr	r2, [r3, #0]
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e190:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	2201      	movs	r2, #1
 800e196:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	2200      	movs	r2, #0
 800e19e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800e1a2:	2303      	movs	r3, #3
 800e1a4:	e017      	b.n	800e1d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d101      	bne.n	800e1b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e1b0:	697b      	ldr	r3, [r7, #20]
 800e1b2:	3b01      	subs	r3, #1
 800e1b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	689a      	ldr	r2, [r3, #8]
 800e1bc:	68bb      	ldr	r3, [r7, #8]
 800e1be:	4013      	ands	r3, r2
 800e1c0:	68ba      	ldr	r2, [r7, #8]
 800e1c2:	429a      	cmp	r2, r3
 800e1c4:	bf0c      	ite	eq
 800e1c6:	2301      	moveq	r3, #1
 800e1c8:	2300      	movne	r3, #0
 800e1ca:	b2db      	uxtb	r3, r3
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	79fb      	ldrb	r3, [r7, #7]
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	d19b      	bne.n	800e10c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e1d4:	2300      	movs	r3, #0
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	3720      	adds	r7, #32
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}
 800e1de:	bf00      	nop
 800e1e0:	20000024 	.word	0x20000024

0800e1e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b08a      	sub	sp, #40	@ 0x28
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	60f8      	str	r0, [r7, #12]
 800e1ec:	60b9      	str	r1, [r7, #8]
 800e1ee:	607a      	str	r2, [r7, #4]
 800e1f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800e1f6:	f7f9 fc73 	bl	8007ae0 <HAL_GetTick>
 800e1fa:	4602      	mov	r2, r0
 800e1fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1fe:	1a9b      	subs	r3, r3, r2
 800e200:	683a      	ldr	r2, [r7, #0]
 800e202:	4413      	add	r3, r2
 800e204:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800e206:	f7f9 fc6b 	bl	8007ae0 <HAL_GetTick>
 800e20a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	330c      	adds	r3, #12
 800e212:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e214:	4b3d      	ldr	r3, [pc, #244]	@ (800e30c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800e216:	681a      	ldr	r2, [r3, #0]
 800e218:	4613      	mov	r3, r2
 800e21a:	009b      	lsls	r3, r3, #2
 800e21c:	4413      	add	r3, r2
 800e21e:	00da      	lsls	r2, r3, #3
 800e220:	1ad3      	subs	r3, r2, r3
 800e222:	0d1b      	lsrs	r3, r3, #20
 800e224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e226:	fb02 f303 	mul.w	r3, r2, r3
 800e22a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800e22c:	e060      	b.n	800e2f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800e22e:	68bb      	ldr	r3, [r7, #8]
 800e230:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800e234:	d107      	bne.n	800e246 <SPI_WaitFifoStateUntilTimeout+0x62>
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d104      	bne.n	800e246 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800e23c:	69fb      	ldr	r3, [r7, #28]
 800e23e:	781b      	ldrb	r3, [r3, #0]
 800e240:	b2db      	uxtb	r3, r3
 800e242:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800e244:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e24c:	d050      	beq.n	800e2f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e24e:	f7f9 fc47 	bl	8007ae0 <HAL_GetTick>
 800e252:	4602      	mov	r2, r0
 800e254:	6a3b      	ldr	r3, [r7, #32]
 800e256:	1ad3      	subs	r3, r2, r3
 800e258:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e25a:	429a      	cmp	r2, r3
 800e25c:	d902      	bls.n	800e264 <SPI_WaitFifoStateUntilTimeout+0x80>
 800e25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e260:	2b00      	cmp	r3, #0
 800e262:	d13d      	bne.n	800e2e0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	685a      	ldr	r2, [r3, #4]
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800e272:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	685b      	ldr	r3, [r3, #4]
 800e278:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e27c:	d111      	bne.n	800e2a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	689b      	ldr	r3, [r3, #8]
 800e282:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e286:	d004      	beq.n	800e292 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	689b      	ldr	r3, [r3, #8]
 800e28c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e290:	d107      	bne.n	800e2a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	681a      	ldr	r2, [r3, #0]
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e2a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e2aa:	d10f      	bne.n	800e2cc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	681a      	ldr	r2, [r3, #0]
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e2ba:	601a      	str	r2, [r3, #0]
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	681a      	ldr	r2, [r3, #0]
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e2ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	2201      	movs	r2, #1
 800e2d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800e2dc:	2303      	movs	r3, #3
 800e2de:	e010      	b.n	800e302 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e2e0:	69bb      	ldr	r3, [r7, #24]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d101      	bne.n	800e2ea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800e2ea:	69bb      	ldr	r3, [r7, #24]
 800e2ec:	3b01      	subs	r3, #1
 800e2ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	689a      	ldr	r2, [r3, #8]
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	4013      	ands	r3, r2
 800e2fa:	687a      	ldr	r2, [r7, #4]
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	d196      	bne.n	800e22e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800e300:	2300      	movs	r3, #0
}
 800e302:	4618      	mov	r0, r3
 800e304:	3728      	adds	r7, #40	@ 0x28
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}
 800e30a:	bf00      	nop
 800e30c:	20000024 	.word	0x20000024

0800e310 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b086      	sub	sp, #24
 800e314:	af02      	add	r7, sp, #8
 800e316:	60f8      	str	r0, [r7, #12]
 800e318:	60b9      	str	r1, [r7, #8]
 800e31a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	9300      	str	r3, [sp, #0]
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	2200      	movs	r2, #0
 800e324:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800e328:	68f8      	ldr	r0, [r7, #12]
 800e32a:	f7ff ff5b 	bl	800e1e4 <SPI_WaitFifoStateUntilTimeout>
 800e32e:	4603      	mov	r3, r0
 800e330:	2b00      	cmp	r3, #0
 800e332:	d007      	beq.n	800e344 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e338:	f043 0220 	orr.w	r2, r3, #32
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800e340:	2303      	movs	r3, #3
 800e342:	e027      	b.n	800e394 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	9300      	str	r3, [sp, #0]
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	2200      	movs	r2, #0
 800e34c:	2180      	movs	r1, #128	@ 0x80
 800e34e:	68f8      	ldr	r0, [r7, #12]
 800e350:	f7ff fec0 	bl	800e0d4 <SPI_WaitFlagStateUntilTimeout>
 800e354:	4603      	mov	r3, r0
 800e356:	2b00      	cmp	r3, #0
 800e358:	d007      	beq.n	800e36a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e35e:	f043 0220 	orr.w	r2, r3, #32
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800e366:	2303      	movs	r3, #3
 800e368:	e014      	b.n	800e394 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	9300      	str	r3, [sp, #0]
 800e36e:	68bb      	ldr	r3, [r7, #8]
 800e370:	2200      	movs	r2, #0
 800e372:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800e376:	68f8      	ldr	r0, [r7, #12]
 800e378:	f7ff ff34 	bl	800e1e4 <SPI_WaitFifoStateUntilTimeout>
 800e37c:	4603      	mov	r3, r0
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d007      	beq.n	800e392 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e386:	f043 0220 	orr.w	r2, r3, #32
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800e38e:	2303      	movs	r3, #3
 800e390:	e000      	b.n	800e394 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800e392:	2300      	movs	r3, #0
}
 800e394:	4618      	mov	r0, r3
 800e396:	3710      	adds	r7, #16
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}

0800e39c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b082      	sub	sp, #8
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d101      	bne.n	800e3ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	e049      	b.n	800e442 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e3b4:	b2db      	uxtb	r3, r3
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d106      	bne.n	800e3c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	2200      	movs	r2, #0
 800e3be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f7f9 f9da 	bl	800777c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2202      	movs	r2, #2
 800e3cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681a      	ldr	r2, [r3, #0]
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	3304      	adds	r3, #4
 800e3d8:	4619      	mov	r1, r3
 800e3da:	4610      	mov	r0, r2
 800e3dc:	f000 fbfa 	bl	800ebd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2201      	movs	r2, #1
 800e3e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2201      	movs	r2, #1
 800e3ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2201      	movs	r2, #1
 800e3f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2201      	movs	r2, #1
 800e3fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2201      	movs	r2, #1
 800e404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2201      	movs	r2, #1
 800e40c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2201      	movs	r2, #1
 800e414:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2201      	movs	r2, #1
 800e41c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2201      	movs	r2, #1
 800e424:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2201      	movs	r2, #1
 800e42c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2201      	movs	r2, #1
 800e434:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	2201      	movs	r2, #1
 800e43c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e440:	2300      	movs	r3, #0
}
 800e442:	4618      	mov	r0, r3
 800e444:	3708      	adds	r7, #8
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}
	...

0800e44c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e44c:	b480      	push	{r7}
 800e44e:	b085      	sub	sp, #20
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e45a:	b2db      	uxtb	r3, r3
 800e45c:	2b01      	cmp	r3, #1
 800e45e:	d001      	beq.n	800e464 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e460:	2301      	movs	r3, #1
 800e462:	e036      	b.n	800e4d2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2202      	movs	r2, #2
 800e468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	68da      	ldr	r2, [r3, #12]
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	f042 0201 	orr.w	r2, r2, #1
 800e47a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	4a17      	ldr	r2, [pc, #92]	@ (800e4e0 <HAL_TIM_Base_Start_IT+0x94>)
 800e482:	4293      	cmp	r3, r2
 800e484:	d004      	beq.n	800e490 <HAL_TIM_Base_Start_IT+0x44>
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e48e:	d115      	bne.n	800e4bc <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	689a      	ldr	r2, [r3, #8]
 800e496:	4b13      	ldr	r3, [pc, #76]	@ (800e4e4 <HAL_TIM_Base_Start_IT+0x98>)
 800e498:	4013      	ands	r3, r2
 800e49a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	2b06      	cmp	r3, #6
 800e4a0:	d015      	beq.n	800e4ce <HAL_TIM_Base_Start_IT+0x82>
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e4a8:	d011      	beq.n	800e4ce <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	681a      	ldr	r2, [r3, #0]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	f042 0201 	orr.w	r2, r2, #1
 800e4b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e4ba:	e008      	b.n	800e4ce <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	681a      	ldr	r2, [r3, #0]
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	f042 0201 	orr.w	r2, r2, #1
 800e4ca:	601a      	str	r2, [r3, #0]
 800e4cc:	e000      	b.n	800e4d0 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e4ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e4d0:	2300      	movs	r3, #0
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3714      	adds	r7, #20
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4dc:	4770      	bx	lr
 800e4de:	bf00      	nop
 800e4e0:	40012c00 	.word	0x40012c00
 800e4e4:	00010007 	.word	0x00010007

0800e4e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b082      	sub	sp, #8
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d101      	bne.n	800e4fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	e049      	b.n	800e58e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e500:	b2db      	uxtb	r3, r3
 800e502:	2b00      	cmp	r3, #0
 800e504:	d106      	bne.n	800e514 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2200      	movs	r2, #0
 800e50a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f7f9 f924 	bl	800775c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2202      	movs	r2, #2
 800e518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681a      	ldr	r2, [r3, #0]
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	3304      	adds	r3, #4
 800e524:	4619      	mov	r1, r3
 800e526:	4610      	mov	r0, r2
 800e528:	f000 fb54 	bl	800ebd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2201      	movs	r2, #1
 800e530:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2201      	movs	r2, #1
 800e538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2201      	movs	r2, #1
 800e540:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2201      	movs	r2, #1
 800e548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2201      	movs	r2, #1
 800e550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	2201      	movs	r2, #1
 800e558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	2201      	movs	r2, #1
 800e560:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	2201      	movs	r2, #1
 800e568:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2201      	movs	r2, #1
 800e570:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2201      	movs	r2, #1
 800e578:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2201      	movs	r2, #1
 800e580:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2201      	movs	r2, #1
 800e588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e58c:	2300      	movs	r3, #0
}
 800e58e:	4618      	mov	r0, r3
 800e590:	3708      	adds	r7, #8
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}
	...

0800e598 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b084      	sub	sp, #16
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
 800e5a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d109      	bne.n	800e5bc <HAL_TIM_PWM_Start+0x24>
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e5ae:	b2db      	uxtb	r3, r3
 800e5b0:	2b01      	cmp	r3, #1
 800e5b2:	bf14      	ite	ne
 800e5b4:	2301      	movne	r3, #1
 800e5b6:	2300      	moveq	r3, #0
 800e5b8:	b2db      	uxtb	r3, r3
 800e5ba:	e03c      	b.n	800e636 <HAL_TIM_PWM_Start+0x9e>
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	2b04      	cmp	r3, #4
 800e5c0:	d109      	bne.n	800e5d6 <HAL_TIM_PWM_Start+0x3e>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e5c8:	b2db      	uxtb	r3, r3
 800e5ca:	2b01      	cmp	r3, #1
 800e5cc:	bf14      	ite	ne
 800e5ce:	2301      	movne	r3, #1
 800e5d0:	2300      	moveq	r3, #0
 800e5d2:	b2db      	uxtb	r3, r3
 800e5d4:	e02f      	b.n	800e636 <HAL_TIM_PWM_Start+0x9e>
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	2b08      	cmp	r3, #8
 800e5da:	d109      	bne.n	800e5f0 <HAL_TIM_PWM_Start+0x58>
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e5e2:	b2db      	uxtb	r3, r3
 800e5e4:	2b01      	cmp	r3, #1
 800e5e6:	bf14      	ite	ne
 800e5e8:	2301      	movne	r3, #1
 800e5ea:	2300      	moveq	r3, #0
 800e5ec:	b2db      	uxtb	r3, r3
 800e5ee:	e022      	b.n	800e636 <HAL_TIM_PWM_Start+0x9e>
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	2b0c      	cmp	r3, #12
 800e5f4:	d109      	bne.n	800e60a <HAL_TIM_PWM_Start+0x72>
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e5fc:	b2db      	uxtb	r3, r3
 800e5fe:	2b01      	cmp	r3, #1
 800e600:	bf14      	ite	ne
 800e602:	2301      	movne	r3, #1
 800e604:	2300      	moveq	r3, #0
 800e606:	b2db      	uxtb	r3, r3
 800e608:	e015      	b.n	800e636 <HAL_TIM_PWM_Start+0x9e>
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	2b10      	cmp	r3, #16
 800e60e:	d109      	bne.n	800e624 <HAL_TIM_PWM_Start+0x8c>
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e616:	b2db      	uxtb	r3, r3
 800e618:	2b01      	cmp	r3, #1
 800e61a:	bf14      	ite	ne
 800e61c:	2301      	movne	r3, #1
 800e61e:	2300      	moveq	r3, #0
 800e620:	b2db      	uxtb	r3, r3
 800e622:	e008      	b.n	800e636 <HAL_TIM_PWM_Start+0x9e>
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e62a:	b2db      	uxtb	r3, r3
 800e62c:	2b01      	cmp	r3, #1
 800e62e:	bf14      	ite	ne
 800e630:	2301      	movne	r3, #1
 800e632:	2300      	moveq	r3, #0
 800e634:	b2db      	uxtb	r3, r3
 800e636:	2b00      	cmp	r3, #0
 800e638:	d001      	beq.n	800e63e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e63a:	2301      	movs	r3, #1
 800e63c:	e079      	b.n	800e732 <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d104      	bne.n	800e64e <HAL_TIM_PWM_Start+0xb6>
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2202      	movs	r2, #2
 800e648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e64c:	e023      	b.n	800e696 <HAL_TIM_PWM_Start+0xfe>
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	2b04      	cmp	r3, #4
 800e652:	d104      	bne.n	800e65e <HAL_TIM_PWM_Start+0xc6>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2202      	movs	r2, #2
 800e658:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e65c:	e01b      	b.n	800e696 <HAL_TIM_PWM_Start+0xfe>
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	2b08      	cmp	r3, #8
 800e662:	d104      	bne.n	800e66e <HAL_TIM_PWM_Start+0xd6>
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2202      	movs	r2, #2
 800e668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e66c:	e013      	b.n	800e696 <HAL_TIM_PWM_Start+0xfe>
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	2b0c      	cmp	r3, #12
 800e672:	d104      	bne.n	800e67e <HAL_TIM_PWM_Start+0xe6>
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2202      	movs	r2, #2
 800e678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e67c:	e00b      	b.n	800e696 <HAL_TIM_PWM_Start+0xfe>
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	2b10      	cmp	r3, #16
 800e682:	d104      	bne.n	800e68e <HAL_TIM_PWM_Start+0xf6>
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2202      	movs	r2, #2
 800e688:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e68c:	e003      	b.n	800e696 <HAL_TIM_PWM_Start+0xfe>
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	2202      	movs	r2, #2
 800e692:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	2201      	movs	r2, #1
 800e69c:	6839      	ldr	r1, [r7, #0]
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f000 fd80 	bl	800f1a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	4a24      	ldr	r2, [pc, #144]	@ (800e73c <HAL_TIM_PWM_Start+0x1a4>)
 800e6aa:	4293      	cmp	r3, r2
 800e6ac:	d009      	beq.n	800e6c2 <HAL_TIM_PWM_Start+0x12a>
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	4a23      	ldr	r2, [pc, #140]	@ (800e740 <HAL_TIM_PWM_Start+0x1a8>)
 800e6b4:	4293      	cmp	r3, r2
 800e6b6:	d004      	beq.n	800e6c2 <HAL_TIM_PWM_Start+0x12a>
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	4a21      	ldr	r2, [pc, #132]	@ (800e744 <HAL_TIM_PWM_Start+0x1ac>)
 800e6be:	4293      	cmp	r3, r2
 800e6c0:	d101      	bne.n	800e6c6 <HAL_TIM_PWM_Start+0x12e>
 800e6c2:	2301      	movs	r3, #1
 800e6c4:	e000      	b.n	800e6c8 <HAL_TIM_PWM_Start+0x130>
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d007      	beq.n	800e6dc <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e6da:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	4a16      	ldr	r2, [pc, #88]	@ (800e73c <HAL_TIM_PWM_Start+0x1a4>)
 800e6e2:	4293      	cmp	r3, r2
 800e6e4:	d004      	beq.n	800e6f0 <HAL_TIM_PWM_Start+0x158>
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e6ee:	d115      	bne.n	800e71c <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	689a      	ldr	r2, [r3, #8]
 800e6f6:	4b14      	ldr	r3, [pc, #80]	@ (800e748 <HAL_TIM_PWM_Start+0x1b0>)
 800e6f8:	4013      	ands	r3, r2
 800e6fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	2b06      	cmp	r3, #6
 800e700:	d015      	beq.n	800e72e <HAL_TIM_PWM_Start+0x196>
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e708:	d011      	beq.n	800e72e <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	681a      	ldr	r2, [r3, #0]
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	f042 0201 	orr.w	r2, r2, #1
 800e718:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e71a:	e008      	b.n	800e72e <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	681a      	ldr	r2, [r3, #0]
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	f042 0201 	orr.w	r2, r2, #1
 800e72a:	601a      	str	r2, [r3, #0]
 800e72c:	e000      	b.n	800e730 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e72e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e730:	2300      	movs	r3, #0
}
 800e732:	4618      	mov	r0, r3
 800e734:	3710      	adds	r7, #16
 800e736:	46bd      	mov	sp, r7
 800e738:	bd80      	pop	{r7, pc}
 800e73a:	bf00      	nop
 800e73c:	40012c00 	.word	0x40012c00
 800e740:	40014400 	.word	0x40014400
 800e744:	40014800 	.word	0x40014800
 800e748:	00010007 	.word	0x00010007

0800e74c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b084      	sub	sp, #16
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	68db      	ldr	r3, [r3, #12]
 800e75a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	691b      	ldr	r3, [r3, #16]
 800e762:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	f003 0302 	and.w	r3, r3, #2
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d020      	beq.n	800e7b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	f003 0302 	and.w	r3, r3, #2
 800e774:	2b00      	cmp	r3, #0
 800e776:	d01b      	beq.n	800e7b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	f06f 0202 	mvn.w	r2, #2
 800e780:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	2201      	movs	r2, #1
 800e786:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	699b      	ldr	r3, [r3, #24]
 800e78e:	f003 0303 	and.w	r3, r3, #3
 800e792:	2b00      	cmp	r3, #0
 800e794:	d003      	beq.n	800e79e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e796:	6878      	ldr	r0, [r7, #4]
 800e798:	f000 f9fe 	bl	800eb98 <HAL_TIM_IC_CaptureCallback>
 800e79c:	e005      	b.n	800e7aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	f000 f9f0 	bl	800eb84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f000 fa01 	bl	800ebac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e7b0:	68bb      	ldr	r3, [r7, #8]
 800e7b2:	f003 0304 	and.w	r3, r3, #4
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d020      	beq.n	800e7fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	f003 0304 	and.w	r3, r3, #4
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d01b      	beq.n	800e7fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	f06f 0204 	mvn.w	r2, #4
 800e7cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	2202      	movs	r2, #2
 800e7d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	699b      	ldr	r3, [r3, #24]
 800e7da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d003      	beq.n	800e7ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f000 f9d8 	bl	800eb98 <HAL_TIM_IC_CaptureCallback>
 800e7e8:	e005      	b.n	800e7f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e7ea:	6878      	ldr	r0, [r7, #4]
 800e7ec:	f000 f9ca 	bl	800eb84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e7f0:	6878      	ldr	r0, [r7, #4]
 800e7f2:	f000 f9db 	bl	800ebac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	f003 0308 	and.w	r3, r3, #8
 800e802:	2b00      	cmp	r3, #0
 800e804:	d020      	beq.n	800e848 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	f003 0308 	and.w	r3, r3, #8
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d01b      	beq.n	800e848 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	f06f 0208 	mvn.w	r2, #8
 800e818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	2204      	movs	r2, #4
 800e81e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	69db      	ldr	r3, [r3, #28]
 800e826:	f003 0303 	and.w	r3, r3, #3
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d003      	beq.n	800e836 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	f000 f9b2 	bl	800eb98 <HAL_TIM_IC_CaptureCallback>
 800e834:	e005      	b.n	800e842 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f000 f9a4 	bl	800eb84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e83c:	6878      	ldr	r0, [r7, #4]
 800e83e:	f000 f9b5 	bl	800ebac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2200      	movs	r2, #0
 800e846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	f003 0310 	and.w	r3, r3, #16
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d020      	beq.n	800e894 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	f003 0310 	and.w	r3, r3, #16
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d01b      	beq.n	800e894 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	f06f 0210 	mvn.w	r2, #16
 800e864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2208      	movs	r2, #8
 800e86a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	69db      	ldr	r3, [r3, #28]
 800e872:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e876:	2b00      	cmp	r3, #0
 800e878:	d003      	beq.n	800e882 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	f000 f98c 	bl	800eb98 <HAL_TIM_IC_CaptureCallback>
 800e880:	e005      	b.n	800e88e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f000 f97e 	bl	800eb84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f000 f98f 	bl	800ebac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2200      	movs	r2, #0
 800e892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e894:	68bb      	ldr	r3, [r7, #8]
 800e896:	f003 0301 	and.w	r3, r3, #1
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d00c      	beq.n	800e8b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	f003 0301 	and.w	r3, r3, #1
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d007      	beq.n	800e8b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	f06f 0201 	mvn.w	r2, #1
 800e8b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f7f8 f88e 	bl	80069d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d104      	bne.n	800e8cc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d00c      	beq.n	800e8e6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d007      	beq.n	800e8e6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e8de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e8e0:	6878      	ldr	r0, [r7, #4]
 800e8e2:	f000 fcef 	bl	800f2c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e8e6:	68bb      	ldr	r3, [r7, #8]
 800e8e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d00c      	beq.n	800e90a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d007      	beq.n	800e90a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e904:	6878      	ldr	r0, [r7, #4]
 800e906:	f000 fce7 	bl	800f2d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e90a:	68bb      	ldr	r3, [r7, #8]
 800e90c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e910:	2b00      	cmp	r3, #0
 800e912:	d00c      	beq.n	800e92e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d007      	beq.n	800e92e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e928:	6878      	ldr	r0, [r7, #4]
 800e92a:	f000 f949 	bl	800ebc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	f003 0320 	and.w	r3, r3, #32
 800e934:	2b00      	cmp	r3, #0
 800e936:	d00c      	beq.n	800e952 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	f003 0320 	and.w	r3, r3, #32
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d007      	beq.n	800e952 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	f06f 0220 	mvn.w	r2, #32
 800e94a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	f000 fcaf 	bl	800f2b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e952:	bf00      	nop
 800e954:	3710      	adds	r7, #16
 800e956:	46bd      	mov	sp, r7
 800e958:	bd80      	pop	{r7, pc}
	...

0800e95c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b086      	sub	sp, #24
 800e960:	af00      	add	r7, sp, #0
 800e962:	60f8      	str	r0, [r7, #12]
 800e964:	60b9      	str	r1, [r7, #8]
 800e966:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e968:	2300      	movs	r3, #0
 800e96a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e972:	2b01      	cmp	r3, #1
 800e974:	d101      	bne.n	800e97a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e976:	2302      	movs	r3, #2
 800e978:	e0ff      	b.n	800eb7a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	2201      	movs	r2, #1
 800e97e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	2b14      	cmp	r3, #20
 800e986:	f200 80f0 	bhi.w	800eb6a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e98a:	a201      	add	r2, pc, #4	@ (adr r2, 800e990 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e98c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e990:	0800e9e5 	.word	0x0800e9e5
 800e994:	0800eb6b 	.word	0x0800eb6b
 800e998:	0800eb6b 	.word	0x0800eb6b
 800e99c:	0800eb6b 	.word	0x0800eb6b
 800e9a0:	0800ea25 	.word	0x0800ea25
 800e9a4:	0800eb6b 	.word	0x0800eb6b
 800e9a8:	0800eb6b 	.word	0x0800eb6b
 800e9ac:	0800eb6b 	.word	0x0800eb6b
 800e9b0:	0800ea67 	.word	0x0800ea67
 800e9b4:	0800eb6b 	.word	0x0800eb6b
 800e9b8:	0800eb6b 	.word	0x0800eb6b
 800e9bc:	0800eb6b 	.word	0x0800eb6b
 800e9c0:	0800eaa7 	.word	0x0800eaa7
 800e9c4:	0800eb6b 	.word	0x0800eb6b
 800e9c8:	0800eb6b 	.word	0x0800eb6b
 800e9cc:	0800eb6b 	.word	0x0800eb6b
 800e9d0:	0800eae9 	.word	0x0800eae9
 800e9d4:	0800eb6b 	.word	0x0800eb6b
 800e9d8:	0800eb6b 	.word	0x0800eb6b
 800e9dc:	0800eb6b 	.word	0x0800eb6b
 800e9e0:	0800eb29 	.word	0x0800eb29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	68b9      	ldr	r1, [r7, #8]
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	f000 f95c 	bl	800eca8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	699a      	ldr	r2, [r3, #24]
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	f042 0208 	orr.w	r2, r2, #8
 800e9fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	699a      	ldr	r2, [r3, #24]
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	f022 0204 	bic.w	r2, r2, #4
 800ea0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	6999      	ldr	r1, [r3, #24]
 800ea16:	68bb      	ldr	r3, [r7, #8]
 800ea18:	691a      	ldr	r2, [r3, #16]
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	430a      	orrs	r2, r1
 800ea20:	619a      	str	r2, [r3, #24]
      break;
 800ea22:	e0a5      	b.n	800eb70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	68b9      	ldr	r1, [r7, #8]
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f000 f9b8 	bl	800eda0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	699a      	ldr	r2, [r3, #24]
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ea3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	699a      	ldr	r2, [r3, #24]
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ea4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	6999      	ldr	r1, [r3, #24]
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	691b      	ldr	r3, [r3, #16]
 800ea5a:	021a      	lsls	r2, r3, #8
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	430a      	orrs	r2, r1
 800ea62:	619a      	str	r2, [r3, #24]
      break;
 800ea64:	e084      	b.n	800eb70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	68b9      	ldr	r1, [r7, #8]
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f000 fa11 	bl	800ee94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	69da      	ldr	r2, [r3, #28]
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	f042 0208 	orr.w	r2, r2, #8
 800ea80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	69da      	ldr	r2, [r3, #28]
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	f022 0204 	bic.w	r2, r2, #4
 800ea90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	69d9      	ldr	r1, [r3, #28]
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	691a      	ldr	r2, [r3, #16]
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	430a      	orrs	r2, r1
 800eaa2:	61da      	str	r2, [r3, #28]
      break;
 800eaa4:	e064      	b.n	800eb70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	68b9      	ldr	r1, [r7, #8]
 800eaac:	4618      	mov	r0, r3
 800eaae:	f000 fa69 	bl	800ef84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	69da      	ldr	r2, [r3, #28]
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800eac0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	69da      	ldr	r2, [r3, #28]
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ead0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	69d9      	ldr	r1, [r3, #28]
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	691b      	ldr	r3, [r3, #16]
 800eadc:	021a      	lsls	r2, r3, #8
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	430a      	orrs	r2, r1
 800eae4:	61da      	str	r2, [r3, #28]
      break;
 800eae6:	e043      	b.n	800eb70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	68b9      	ldr	r1, [r7, #8]
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f000 faa6 	bl	800f040 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	f042 0208 	orr.w	r2, r2, #8
 800eb02:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	f022 0204 	bic.w	r2, r2, #4
 800eb12:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	691a      	ldr	r2, [r3, #16]
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	430a      	orrs	r2, r1
 800eb24:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800eb26:	e023      	b.n	800eb70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	68b9      	ldr	r1, [r7, #8]
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f000 fade 	bl	800f0f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800eb42:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800eb52:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	691b      	ldr	r3, [r3, #16]
 800eb5e:	021a      	lsls	r2, r3, #8
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	430a      	orrs	r2, r1
 800eb66:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800eb68:	e002      	b.n	800eb70 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	75fb      	strb	r3, [r7, #23]
      break;
 800eb6e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	2200      	movs	r2, #0
 800eb74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800eb78:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	3718      	adds	r7, #24
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}
 800eb82:	bf00      	nop

0800eb84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800eb84:	b480      	push	{r7}
 800eb86:	b083      	sub	sp, #12
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800eb8c:	bf00      	nop
 800eb8e:	370c      	adds	r7, #12
 800eb90:	46bd      	mov	sp, r7
 800eb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb96:	4770      	bx	lr

0800eb98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800eb98:	b480      	push	{r7}
 800eb9a:	b083      	sub	sp, #12
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800eba0:	bf00      	nop
 800eba2:	370c      	adds	r7, #12
 800eba4:	46bd      	mov	sp, r7
 800eba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebaa:	4770      	bx	lr

0800ebac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ebac:	b480      	push	{r7}
 800ebae:	b083      	sub	sp, #12
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ebb4:	bf00      	nop
 800ebb6:	370c      	adds	r7, #12
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbe:	4770      	bx	lr

0800ebc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ebc0:	b480      	push	{r7}
 800ebc2:	b083      	sub	sp, #12
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ebc8:	bf00      	nop
 800ebca:	370c      	adds	r7, #12
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd2:	4770      	bx	lr

0800ebd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	b085      	sub	sp, #20
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
 800ebdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	4a2d      	ldr	r2, [pc, #180]	@ (800ec9c <TIM_Base_SetConfig+0xc8>)
 800ebe8:	4293      	cmp	r3, r2
 800ebea:	d003      	beq.n	800ebf4 <TIM_Base_SetConfig+0x20>
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ebf2:	d108      	bne.n	800ec06 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ebfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	685b      	ldr	r3, [r3, #4]
 800ec00:	68fa      	ldr	r2, [r7, #12]
 800ec02:	4313      	orrs	r3, r2
 800ec04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	4a24      	ldr	r2, [pc, #144]	@ (800ec9c <TIM_Base_SetConfig+0xc8>)
 800ec0a:	4293      	cmp	r3, r2
 800ec0c:	d00b      	beq.n	800ec26 <TIM_Base_SetConfig+0x52>
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec14:	d007      	beq.n	800ec26 <TIM_Base_SetConfig+0x52>
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	4a21      	ldr	r2, [pc, #132]	@ (800eca0 <TIM_Base_SetConfig+0xcc>)
 800ec1a:	4293      	cmp	r3, r2
 800ec1c:	d003      	beq.n	800ec26 <TIM_Base_SetConfig+0x52>
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	4a20      	ldr	r2, [pc, #128]	@ (800eca4 <TIM_Base_SetConfig+0xd0>)
 800ec22:	4293      	cmp	r3, r2
 800ec24:	d108      	bne.n	800ec38 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ec2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	68db      	ldr	r3, [r3, #12]
 800ec32:	68fa      	ldr	r2, [r7, #12]
 800ec34:	4313      	orrs	r3, r2
 800ec36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	695b      	ldr	r3, [r3, #20]
 800ec42:	4313      	orrs	r3, r2
 800ec44:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	689a      	ldr	r2, [r3, #8]
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	681a      	ldr	r2, [r3, #0]
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	4a10      	ldr	r2, [pc, #64]	@ (800ec9c <TIM_Base_SetConfig+0xc8>)
 800ec5a:	4293      	cmp	r3, r2
 800ec5c:	d007      	beq.n	800ec6e <TIM_Base_SetConfig+0x9a>
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	4a0f      	ldr	r2, [pc, #60]	@ (800eca0 <TIM_Base_SetConfig+0xcc>)
 800ec62:	4293      	cmp	r3, r2
 800ec64:	d003      	beq.n	800ec6e <TIM_Base_SetConfig+0x9a>
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	4a0e      	ldr	r2, [pc, #56]	@ (800eca4 <TIM_Base_SetConfig+0xd0>)
 800ec6a:	4293      	cmp	r3, r2
 800ec6c:	d103      	bne.n	800ec76 <TIM_Base_SetConfig+0xa2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	691a      	ldr	r2, [r3, #16]
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	f043 0204 	orr.w	r2, r3, #4
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	2201      	movs	r2, #1
 800ec86:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	68fa      	ldr	r2, [r7, #12]
 800ec8c:	601a      	str	r2, [r3, #0]
}
 800ec8e:	bf00      	nop
 800ec90:	3714      	adds	r7, #20
 800ec92:	46bd      	mov	sp, r7
 800ec94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec98:	4770      	bx	lr
 800ec9a:	bf00      	nop
 800ec9c:	40012c00 	.word	0x40012c00
 800eca0:	40014400 	.word	0x40014400
 800eca4:	40014800 	.word	0x40014800

0800eca8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eca8:	b480      	push	{r7}
 800ecaa:	b087      	sub	sp, #28
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
 800ecb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	6a1b      	ldr	r3, [r3, #32]
 800ecb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	6a1b      	ldr	r3, [r3, #32]
 800ecbc:	f023 0201 	bic.w	r2, r3, #1
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	685b      	ldr	r3, [r3, #4]
 800ecc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	699b      	ldr	r3, [r3, #24]
 800ecce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ecd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ecda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	f023 0303 	bic.w	r3, r3, #3
 800ece2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ece4:	683b      	ldr	r3, [r7, #0]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	68fa      	ldr	r2, [r7, #12]
 800ecea:	4313      	orrs	r3, r2
 800ecec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	f023 0302 	bic.w	r3, r3, #2
 800ecf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ecf6:	683b      	ldr	r3, [r7, #0]
 800ecf8:	689b      	ldr	r3, [r3, #8]
 800ecfa:	697a      	ldr	r2, [r7, #20]
 800ecfc:	4313      	orrs	r3, r2
 800ecfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	4a24      	ldr	r2, [pc, #144]	@ (800ed94 <TIM_OC1_SetConfig+0xec>)
 800ed04:	4293      	cmp	r3, r2
 800ed06:	d007      	beq.n	800ed18 <TIM_OC1_SetConfig+0x70>
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	4a23      	ldr	r2, [pc, #140]	@ (800ed98 <TIM_OC1_SetConfig+0xf0>)
 800ed0c:	4293      	cmp	r3, r2
 800ed0e:	d003      	beq.n	800ed18 <TIM_OC1_SetConfig+0x70>
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	4a22      	ldr	r2, [pc, #136]	@ (800ed9c <TIM_OC1_SetConfig+0xf4>)
 800ed14:	4293      	cmp	r3, r2
 800ed16:	d10c      	bne.n	800ed32 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	f023 0308 	bic.w	r3, r3, #8
 800ed1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	68db      	ldr	r3, [r3, #12]
 800ed24:	697a      	ldr	r2, [r7, #20]
 800ed26:	4313      	orrs	r3, r2
 800ed28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ed2a:	697b      	ldr	r3, [r7, #20]
 800ed2c:	f023 0304 	bic.w	r3, r3, #4
 800ed30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	4a17      	ldr	r2, [pc, #92]	@ (800ed94 <TIM_OC1_SetConfig+0xec>)
 800ed36:	4293      	cmp	r3, r2
 800ed38:	d007      	beq.n	800ed4a <TIM_OC1_SetConfig+0xa2>
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	4a17      	ldr	r2, [pc, #92]	@ (800ed9c <TIM_OC1_SetConfig+0xf4>)
 800ed3e:	4293      	cmp	r3, r2
 800ed40:	d003      	beq.n	800ed4a <TIM_OC1_SetConfig+0xa2>
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	4a14      	ldr	r2, [pc, #80]	@ (800ed98 <TIM_OC1_SetConfig+0xf0>)
 800ed46:	4293      	cmp	r3, r2
 800ed48:	d111      	bne.n	800ed6e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ed4a:	693b      	ldr	r3, [r7, #16]
 800ed4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ed50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ed52:	693b      	ldr	r3, [r7, #16]
 800ed54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ed58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	695b      	ldr	r3, [r3, #20]
 800ed5e:	693a      	ldr	r2, [r7, #16]
 800ed60:	4313      	orrs	r3, r2
 800ed62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	699b      	ldr	r3, [r3, #24]
 800ed68:	693a      	ldr	r2, [r7, #16]
 800ed6a:	4313      	orrs	r3, r2
 800ed6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	693a      	ldr	r2, [r7, #16]
 800ed72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	68fa      	ldr	r2, [r7, #12]
 800ed78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	685a      	ldr	r2, [r3, #4]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	697a      	ldr	r2, [r7, #20]
 800ed86:	621a      	str	r2, [r3, #32]
}
 800ed88:	bf00      	nop
 800ed8a:	371c      	adds	r7, #28
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed92:	4770      	bx	lr
 800ed94:	40012c00 	.word	0x40012c00
 800ed98:	40014800 	.word	0x40014800
 800ed9c:	40014400 	.word	0x40014400

0800eda0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eda0:	b480      	push	{r7}
 800eda2:	b087      	sub	sp, #28
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
 800eda8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6a1b      	ldr	r3, [r3, #32]
 800edae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	6a1b      	ldr	r3, [r3, #32]
 800edb4:	f023 0210 	bic.w	r2, r3, #16
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	685b      	ldr	r3, [r3, #4]
 800edc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	699b      	ldr	r3, [r3, #24]
 800edc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800edce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800edd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800edda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	021b      	lsls	r3, r3, #8
 800ede2:	68fa      	ldr	r2, [r7, #12]
 800ede4:	4313      	orrs	r3, r2
 800ede6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ede8:	697b      	ldr	r3, [r7, #20]
 800edea:	f023 0320 	bic.w	r3, r3, #32
 800edee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	689b      	ldr	r3, [r3, #8]
 800edf4:	011b      	lsls	r3, r3, #4
 800edf6:	697a      	ldr	r2, [r7, #20]
 800edf8:	4313      	orrs	r3, r2
 800edfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	4a22      	ldr	r2, [pc, #136]	@ (800ee88 <TIM_OC2_SetConfig+0xe8>)
 800ee00:	4293      	cmp	r3, r2
 800ee02:	d10d      	bne.n	800ee20 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ee04:	697b      	ldr	r3, [r7, #20]
 800ee06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ee0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	68db      	ldr	r3, [r3, #12]
 800ee10:	011b      	lsls	r3, r3, #4
 800ee12:	697a      	ldr	r2, [r7, #20]
 800ee14:	4313      	orrs	r3, r2
 800ee16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ee1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	4a19      	ldr	r2, [pc, #100]	@ (800ee88 <TIM_OC2_SetConfig+0xe8>)
 800ee24:	4293      	cmp	r3, r2
 800ee26:	d007      	beq.n	800ee38 <TIM_OC2_SetConfig+0x98>
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	4a18      	ldr	r2, [pc, #96]	@ (800ee8c <TIM_OC2_SetConfig+0xec>)
 800ee2c:	4293      	cmp	r3, r2
 800ee2e:	d003      	beq.n	800ee38 <TIM_OC2_SetConfig+0x98>
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	4a17      	ldr	r2, [pc, #92]	@ (800ee90 <TIM_OC2_SetConfig+0xf0>)
 800ee34:	4293      	cmp	r3, r2
 800ee36:	d113      	bne.n	800ee60 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ee38:	693b      	ldr	r3, [r7, #16]
 800ee3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ee3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ee46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	695b      	ldr	r3, [r3, #20]
 800ee4c:	009b      	lsls	r3, r3, #2
 800ee4e:	693a      	ldr	r2, [r7, #16]
 800ee50:	4313      	orrs	r3, r2
 800ee52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	699b      	ldr	r3, [r3, #24]
 800ee58:	009b      	lsls	r3, r3, #2
 800ee5a:	693a      	ldr	r2, [r7, #16]
 800ee5c:	4313      	orrs	r3, r2
 800ee5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	693a      	ldr	r2, [r7, #16]
 800ee64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	68fa      	ldr	r2, [r7, #12]
 800ee6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	685a      	ldr	r2, [r3, #4]
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	697a      	ldr	r2, [r7, #20]
 800ee78:	621a      	str	r2, [r3, #32]
}
 800ee7a:	bf00      	nop
 800ee7c:	371c      	adds	r7, #28
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee84:	4770      	bx	lr
 800ee86:	bf00      	nop
 800ee88:	40012c00 	.word	0x40012c00
 800ee8c:	40014400 	.word	0x40014400
 800ee90:	40014800 	.word	0x40014800

0800ee94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ee94:	b480      	push	{r7}
 800ee96:	b087      	sub	sp, #28
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
 800ee9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	6a1b      	ldr	r3, [r3, #32]
 800eea2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	6a1b      	ldr	r3, [r3, #32]
 800eea8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	685b      	ldr	r3, [r3, #4]
 800eeb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	69db      	ldr	r3, [r3, #28]
 800eeba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800eec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	f023 0303 	bic.w	r3, r3, #3
 800eece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eed0:	683b      	ldr	r3, [r7, #0]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	68fa      	ldr	r2, [r7, #12]
 800eed6:	4313      	orrs	r3, r2
 800eed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800eee0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	689b      	ldr	r3, [r3, #8]
 800eee6:	021b      	lsls	r3, r3, #8
 800eee8:	697a      	ldr	r2, [r7, #20]
 800eeea:	4313      	orrs	r3, r2
 800eeec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	4a21      	ldr	r2, [pc, #132]	@ (800ef78 <TIM_OC3_SetConfig+0xe4>)
 800eef2:	4293      	cmp	r3, r2
 800eef4:	d10d      	bne.n	800ef12 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800eef6:	697b      	ldr	r3, [r7, #20]
 800eef8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800eefc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	68db      	ldr	r3, [r3, #12]
 800ef02:	021b      	lsls	r3, r3, #8
 800ef04:	697a      	ldr	r2, [r7, #20]
 800ef06:	4313      	orrs	r3, r2
 800ef08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ef0a:	697b      	ldr	r3, [r7, #20]
 800ef0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ef10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	4a18      	ldr	r2, [pc, #96]	@ (800ef78 <TIM_OC3_SetConfig+0xe4>)
 800ef16:	4293      	cmp	r3, r2
 800ef18:	d007      	beq.n	800ef2a <TIM_OC3_SetConfig+0x96>
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	4a17      	ldr	r2, [pc, #92]	@ (800ef7c <TIM_OC3_SetConfig+0xe8>)
 800ef1e:	4293      	cmp	r3, r2
 800ef20:	d003      	beq.n	800ef2a <TIM_OC3_SetConfig+0x96>
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	4a16      	ldr	r2, [pc, #88]	@ (800ef80 <TIM_OC3_SetConfig+0xec>)
 800ef26:	4293      	cmp	r3, r2
 800ef28:	d113      	bne.n	800ef52 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ef2a:	693b      	ldr	r3, [r7, #16]
 800ef2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ef30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ef32:	693b      	ldr	r3, [r7, #16]
 800ef34:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ef38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ef3a:	683b      	ldr	r3, [r7, #0]
 800ef3c:	695b      	ldr	r3, [r3, #20]
 800ef3e:	011b      	lsls	r3, r3, #4
 800ef40:	693a      	ldr	r2, [r7, #16]
 800ef42:	4313      	orrs	r3, r2
 800ef44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	699b      	ldr	r3, [r3, #24]
 800ef4a:	011b      	lsls	r3, r3, #4
 800ef4c:	693a      	ldr	r2, [r7, #16]
 800ef4e:	4313      	orrs	r3, r2
 800ef50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	693a      	ldr	r2, [r7, #16]
 800ef56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	68fa      	ldr	r2, [r7, #12]
 800ef5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	685a      	ldr	r2, [r3, #4]
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	697a      	ldr	r2, [r7, #20]
 800ef6a:	621a      	str	r2, [r3, #32]
}
 800ef6c:	bf00      	nop
 800ef6e:	371c      	adds	r7, #28
 800ef70:	46bd      	mov	sp, r7
 800ef72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef76:	4770      	bx	lr
 800ef78:	40012c00 	.word	0x40012c00
 800ef7c:	40014400 	.word	0x40014400
 800ef80:	40014800 	.word	0x40014800

0800ef84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ef84:	b480      	push	{r7}
 800ef86:	b087      	sub	sp, #28
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
 800ef8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6a1b      	ldr	r3, [r3, #32]
 800ef92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	6a1b      	ldr	r3, [r3, #32]
 800ef98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	685b      	ldr	r3, [r3, #4]
 800efa4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	69db      	ldr	r3, [r3, #28]
 800efaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800efb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800efb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800efbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	021b      	lsls	r3, r3, #8
 800efc6:	68fa      	ldr	r2, [r7, #12]
 800efc8:	4313      	orrs	r3, r2
 800efca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800efcc:	693b      	ldr	r3, [r7, #16]
 800efce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800efd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	689b      	ldr	r3, [r3, #8]
 800efd8:	031b      	lsls	r3, r3, #12
 800efda:	693a      	ldr	r2, [r7, #16]
 800efdc:	4313      	orrs	r3, r2
 800efde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	4a14      	ldr	r2, [pc, #80]	@ (800f034 <TIM_OC4_SetConfig+0xb0>)
 800efe4:	4293      	cmp	r3, r2
 800efe6:	d007      	beq.n	800eff8 <TIM_OC4_SetConfig+0x74>
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	4a13      	ldr	r2, [pc, #76]	@ (800f038 <TIM_OC4_SetConfig+0xb4>)
 800efec:	4293      	cmp	r3, r2
 800efee:	d003      	beq.n	800eff8 <TIM_OC4_SetConfig+0x74>
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	4a12      	ldr	r2, [pc, #72]	@ (800f03c <TIM_OC4_SetConfig+0xb8>)
 800eff4:	4293      	cmp	r3, r2
 800eff6:	d109      	bne.n	800f00c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800eff8:	697b      	ldr	r3, [r7, #20]
 800effa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800effe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	695b      	ldr	r3, [r3, #20]
 800f004:	019b      	lsls	r3, r3, #6
 800f006:	697a      	ldr	r2, [r7, #20]
 800f008:	4313      	orrs	r3, r2
 800f00a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	697a      	ldr	r2, [r7, #20]
 800f010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	68fa      	ldr	r2, [r7, #12]
 800f016:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	685a      	ldr	r2, [r3, #4]
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	693a      	ldr	r2, [r7, #16]
 800f024:	621a      	str	r2, [r3, #32]
}
 800f026:	bf00      	nop
 800f028:	371c      	adds	r7, #28
 800f02a:	46bd      	mov	sp, r7
 800f02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f030:	4770      	bx	lr
 800f032:	bf00      	nop
 800f034:	40012c00 	.word	0x40012c00
 800f038:	40014400 	.word	0x40014400
 800f03c:	40014800 	.word	0x40014800

0800f040 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f040:	b480      	push	{r7}
 800f042:	b087      	sub	sp, #28
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
 800f048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	6a1b      	ldr	r3, [r3, #32]
 800f04e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	6a1b      	ldr	r3, [r3, #32]
 800f054:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	685b      	ldr	r3, [r3, #4]
 800f060:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f06e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f074:	683b      	ldr	r3, [r7, #0]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	68fa      	ldr	r2, [r7, #12]
 800f07a:	4313      	orrs	r3, r2
 800f07c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f07e:	693b      	ldr	r3, [r7, #16]
 800f080:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f084:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f086:	683b      	ldr	r3, [r7, #0]
 800f088:	689b      	ldr	r3, [r3, #8]
 800f08a:	041b      	lsls	r3, r3, #16
 800f08c:	693a      	ldr	r2, [r7, #16]
 800f08e:	4313      	orrs	r3, r2
 800f090:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	4a13      	ldr	r2, [pc, #76]	@ (800f0e4 <TIM_OC5_SetConfig+0xa4>)
 800f096:	4293      	cmp	r3, r2
 800f098:	d007      	beq.n	800f0aa <TIM_OC5_SetConfig+0x6a>
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	4a12      	ldr	r2, [pc, #72]	@ (800f0e8 <TIM_OC5_SetConfig+0xa8>)
 800f09e:	4293      	cmp	r3, r2
 800f0a0:	d003      	beq.n	800f0aa <TIM_OC5_SetConfig+0x6a>
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	4a11      	ldr	r2, [pc, #68]	@ (800f0ec <TIM_OC5_SetConfig+0xac>)
 800f0a6:	4293      	cmp	r3, r2
 800f0a8:	d109      	bne.n	800f0be <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f0aa:	697b      	ldr	r3, [r7, #20]
 800f0ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f0b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	695b      	ldr	r3, [r3, #20]
 800f0b6:	021b      	lsls	r3, r3, #8
 800f0b8:	697a      	ldr	r2, [r7, #20]
 800f0ba:	4313      	orrs	r3, r2
 800f0bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	697a      	ldr	r2, [r7, #20]
 800f0c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	68fa      	ldr	r2, [r7, #12]
 800f0c8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	685a      	ldr	r2, [r3, #4]
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	693a      	ldr	r2, [r7, #16]
 800f0d6:	621a      	str	r2, [r3, #32]
}
 800f0d8:	bf00      	nop
 800f0da:	371c      	adds	r7, #28
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e2:	4770      	bx	lr
 800f0e4:	40012c00 	.word	0x40012c00
 800f0e8:	40014400 	.word	0x40014400
 800f0ec:	40014800 	.word	0x40014800

0800f0f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f0f0:	b480      	push	{r7}
 800f0f2:	b087      	sub	sp, #28
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
 800f0f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	6a1b      	ldr	r3, [r3, #32]
 800f0fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	6a1b      	ldr	r3, [r3, #32]
 800f104:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	685b      	ldr	r3, [r3, #4]
 800f110:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f11e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	021b      	lsls	r3, r3, #8
 800f12a:	68fa      	ldr	r2, [r7, #12]
 800f12c:	4313      	orrs	r3, r2
 800f12e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f130:	693b      	ldr	r3, [r7, #16]
 800f132:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f136:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	689b      	ldr	r3, [r3, #8]
 800f13c:	051b      	lsls	r3, r3, #20
 800f13e:	693a      	ldr	r2, [r7, #16]
 800f140:	4313      	orrs	r3, r2
 800f142:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	4a14      	ldr	r2, [pc, #80]	@ (800f198 <TIM_OC6_SetConfig+0xa8>)
 800f148:	4293      	cmp	r3, r2
 800f14a:	d007      	beq.n	800f15c <TIM_OC6_SetConfig+0x6c>
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	4a13      	ldr	r2, [pc, #76]	@ (800f19c <TIM_OC6_SetConfig+0xac>)
 800f150:	4293      	cmp	r3, r2
 800f152:	d003      	beq.n	800f15c <TIM_OC6_SetConfig+0x6c>
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	4a12      	ldr	r2, [pc, #72]	@ (800f1a0 <TIM_OC6_SetConfig+0xb0>)
 800f158:	4293      	cmp	r3, r2
 800f15a:	d109      	bne.n	800f170 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f15c:	697b      	ldr	r3, [r7, #20]
 800f15e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f162:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	695b      	ldr	r3, [r3, #20]
 800f168:	029b      	lsls	r3, r3, #10
 800f16a:	697a      	ldr	r2, [r7, #20]
 800f16c:	4313      	orrs	r3, r2
 800f16e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	697a      	ldr	r2, [r7, #20]
 800f174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	68fa      	ldr	r2, [r7, #12]
 800f17a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f17c:	683b      	ldr	r3, [r7, #0]
 800f17e:	685a      	ldr	r2, [r3, #4]
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	693a      	ldr	r2, [r7, #16]
 800f188:	621a      	str	r2, [r3, #32]
}
 800f18a:	bf00      	nop
 800f18c:	371c      	adds	r7, #28
 800f18e:	46bd      	mov	sp, r7
 800f190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f194:	4770      	bx	lr
 800f196:	bf00      	nop
 800f198:	40012c00 	.word	0x40012c00
 800f19c:	40014400 	.word	0x40014400
 800f1a0:	40014800 	.word	0x40014800

0800f1a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f1a4:	b480      	push	{r7}
 800f1a6:	b087      	sub	sp, #28
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	60f8      	str	r0, [r7, #12]
 800f1ac:	60b9      	str	r1, [r7, #8]
 800f1ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f1b0:	68bb      	ldr	r3, [r7, #8]
 800f1b2:	f003 031f 	and.w	r3, r3, #31
 800f1b6:	2201      	movs	r2, #1
 800f1b8:	fa02 f303 	lsl.w	r3, r2, r3
 800f1bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	6a1a      	ldr	r2, [r3, #32]
 800f1c2:	697b      	ldr	r3, [r7, #20]
 800f1c4:	43db      	mvns	r3, r3
 800f1c6:	401a      	ands	r2, r3
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	6a1a      	ldr	r2, [r3, #32]
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	f003 031f 	and.w	r3, r3, #31
 800f1d6:	6879      	ldr	r1, [r7, #4]
 800f1d8:	fa01 f303 	lsl.w	r3, r1, r3
 800f1dc:	431a      	orrs	r2, r3
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	621a      	str	r2, [r3, #32]
}
 800f1e2:	bf00      	nop
 800f1e4:	371c      	adds	r7, #28
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ec:	4770      	bx	lr
	...

0800f1f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f1f0:	b480      	push	{r7}
 800f1f2:	b085      	sub	sp, #20
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
 800f1f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f200:	2b01      	cmp	r3, #1
 800f202:	d101      	bne.n	800f208 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f204:	2302      	movs	r3, #2
 800f206:	e04a      	b.n	800f29e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2201      	movs	r2, #1
 800f20c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2202      	movs	r2, #2
 800f214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	685b      	ldr	r3, [r3, #4]
 800f21e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	689b      	ldr	r3, [r3, #8]
 800f226:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	4a1f      	ldr	r2, [pc, #124]	@ (800f2ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800f22e:	4293      	cmp	r3, r2
 800f230:	d108      	bne.n	800f244 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f238:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	685b      	ldr	r3, [r3, #4]
 800f23e:	68fa      	ldr	r2, [r7, #12]
 800f240:	4313      	orrs	r3, r2
 800f242:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f24a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	68fa      	ldr	r2, [r7, #12]
 800f252:	4313      	orrs	r3, r2
 800f254:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	68fa      	ldr	r2, [r7, #12]
 800f25c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	4a12      	ldr	r2, [pc, #72]	@ (800f2ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800f264:	4293      	cmp	r3, r2
 800f266:	d004      	beq.n	800f272 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f270:	d10c      	bne.n	800f28c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f272:	68bb      	ldr	r3, [r7, #8]
 800f274:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f278:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	689b      	ldr	r3, [r3, #8]
 800f27e:	68ba      	ldr	r2, [r7, #8]
 800f280:	4313      	orrs	r3, r2
 800f282:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	68ba      	ldr	r2, [r7, #8]
 800f28a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2201      	movs	r2, #1
 800f290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	2200      	movs	r2, #0
 800f298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f29c:	2300      	movs	r3, #0
}
 800f29e:	4618      	mov	r0, r3
 800f2a0:	3714      	adds	r7, #20
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a8:	4770      	bx	lr
 800f2aa:	bf00      	nop
 800f2ac:	40012c00 	.word	0x40012c00

0800f2b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f2b0:	b480      	push	{r7}
 800f2b2:	b083      	sub	sp, #12
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f2b8:	bf00      	nop
 800f2ba:	370c      	adds	r7, #12
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c2:	4770      	bx	lr

0800f2c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f2c4:	b480      	push	{r7}
 800f2c6:	b083      	sub	sp, #12
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f2cc:	bf00      	nop
 800f2ce:	370c      	adds	r7, #12
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d6:	4770      	bx	lr

0800f2d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f2d8:	b480      	push	{r7}
 800f2da:	b083      	sub	sp, #12
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f2e0:	bf00      	nop
 800f2e2:	370c      	adds	r7, #12
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ea:	4770      	bx	lr

0800f2ec <LL_RCC_GetUSARTClockSource>:
{
 800f2ec:	b480      	push	{r7}
 800f2ee:	b083      	sub	sp, #12
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800f2f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f2f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	4013      	ands	r3, r2
}
 800f300:	4618      	mov	r0, r3
 800f302:	370c      	adds	r7, #12
 800f304:	46bd      	mov	sp, r7
 800f306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30a:	4770      	bx	lr

0800f30c <LL_RCC_GetLPUARTClockSource>:
{
 800f30c:	b480      	push	{r7}
 800f30e:	b083      	sub	sp, #12
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800f314:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f318:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	4013      	ands	r3, r2
}
 800f320:	4618      	mov	r0, r3
 800f322:	370c      	adds	r7, #12
 800f324:	46bd      	mov	sp, r7
 800f326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32a:	4770      	bx	lr

0800f32c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b082      	sub	sp, #8
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d101      	bne.n	800f33e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f33a:	2301      	movs	r3, #1
 800f33c:	e050      	b.n	800f3e0 <HAL_UART_Init+0xb4>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f344:	2b00      	cmp	r3, #0
 800f346:	d114      	bne.n	800f372 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2200      	movs	r2, #0
 800f34c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f000 f9fd 	bl	800f750 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d103      	bne.n	800f368 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	4a21      	ldr	r2, [pc, #132]	@ (800f3e8 <HAL_UART_Init+0xbc>)
 800f364:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	2224      	movs	r2, #36	@ 0x24
 800f376:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	681a      	ldr	r2, [r3, #0]
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	f022 0201 	bic.w	r2, r2, #1
 800f388:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d002      	beq.n	800f398 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	f000 fc56 	bl	800fc44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f000 fa2b 	bl	800f7f4 <UART_SetConfig>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	2b01      	cmp	r3, #1
 800f3a2:	d101      	bne.n	800f3a8 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800f3a4:	2301      	movs	r3, #1
 800f3a6:	e01b      	b.n	800f3e0 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	685a      	ldr	r2, [r3, #4]
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f3b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	689a      	ldr	r2, [r3, #8]
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f3c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	681a      	ldr	r2, [r3, #0]
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	f042 0201 	orr.w	r2, r2, #1
 800f3d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f000 fcd5 	bl	800fd88 <UART_CheckIdleState>
 800f3de:	4603      	mov	r3, r0
}
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	3708      	adds	r7, #8
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd80      	pop	{r7, pc}
 800f3e8:	08007905 	.word	0x08007905

0800f3ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b08a      	sub	sp, #40	@ 0x28
 800f3f0:	af02      	add	r7, sp, #8
 800f3f2:	60f8      	str	r0, [r7, #12]
 800f3f4:	60b9      	str	r1, [r7, #8]
 800f3f6:	603b      	str	r3, [r7, #0]
 800f3f8:	4613      	mov	r3, r2
 800f3fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f402:	2b20      	cmp	r3, #32
 800f404:	d17b      	bne.n	800f4fe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800f406:	68bb      	ldr	r3, [r7, #8]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d002      	beq.n	800f412 <HAL_UART_Transmit+0x26>
 800f40c:	88fb      	ldrh	r3, [r7, #6]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d101      	bne.n	800f416 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f412:	2301      	movs	r3, #1
 800f414:	e074      	b.n	800f500 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	2200      	movs	r2, #0
 800f41a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	2221      	movs	r2, #33	@ 0x21
 800f422:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f426:	f7f8 fb5b 	bl	8007ae0 <HAL_GetTick>
 800f42a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	88fa      	ldrh	r2, [r7, #6]
 800f430:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	88fa      	ldrh	r2, [r7, #6]
 800f438:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	689b      	ldr	r3, [r3, #8]
 800f440:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f444:	d108      	bne.n	800f458 <HAL_UART_Transmit+0x6c>
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	691b      	ldr	r3, [r3, #16]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d104      	bne.n	800f458 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f44e:	2300      	movs	r3, #0
 800f450:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f452:	68bb      	ldr	r3, [r7, #8]
 800f454:	61bb      	str	r3, [r7, #24]
 800f456:	e003      	b.n	800f460 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f45c:	2300      	movs	r3, #0
 800f45e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f460:	e030      	b.n	800f4c4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f462:	683b      	ldr	r3, [r7, #0]
 800f464:	9300      	str	r3, [sp, #0]
 800f466:	697b      	ldr	r3, [r7, #20]
 800f468:	2200      	movs	r2, #0
 800f46a:	2180      	movs	r1, #128	@ 0x80
 800f46c:	68f8      	ldr	r0, [r7, #12]
 800f46e:	f000 fd35 	bl	800fedc <UART_WaitOnFlagUntilTimeout>
 800f472:	4603      	mov	r3, r0
 800f474:	2b00      	cmp	r3, #0
 800f476:	d005      	beq.n	800f484 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	2220      	movs	r2, #32
 800f47c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800f480:	2303      	movs	r3, #3
 800f482:	e03d      	b.n	800f500 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800f484:	69fb      	ldr	r3, [r7, #28]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d10b      	bne.n	800f4a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f48a:	69bb      	ldr	r3, [r7, #24]
 800f48c:	881b      	ldrh	r3, [r3, #0]
 800f48e:	461a      	mov	r2, r3
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f498:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f49a:	69bb      	ldr	r3, [r7, #24]
 800f49c:	3302      	adds	r3, #2
 800f49e:	61bb      	str	r3, [r7, #24]
 800f4a0:	e007      	b.n	800f4b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f4a2:	69fb      	ldr	r3, [r7, #28]
 800f4a4:	781a      	ldrb	r2, [r3, #0]
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f4ac:	69fb      	ldr	r3, [r7, #28]
 800f4ae:	3301      	adds	r3, #1
 800f4b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f4b8:	b29b      	uxth	r3, r3
 800f4ba:	3b01      	subs	r3, #1
 800f4bc:	b29a      	uxth	r2, r3
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f4ca:	b29b      	uxth	r3, r3
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d1c8      	bne.n	800f462 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	9300      	str	r3, [sp, #0]
 800f4d4:	697b      	ldr	r3, [r7, #20]
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	2140      	movs	r1, #64	@ 0x40
 800f4da:	68f8      	ldr	r0, [r7, #12]
 800f4dc:	f000 fcfe 	bl	800fedc <UART_WaitOnFlagUntilTimeout>
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d005      	beq.n	800f4f2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	2220      	movs	r2, #32
 800f4ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800f4ee:	2303      	movs	r3, #3
 800f4f0:	e006      	b.n	800f500 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	2220      	movs	r2, #32
 800f4f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	e000      	b.n	800f500 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800f4fe:	2302      	movs	r3, #2
  }
}
 800f500:	4618      	mov	r0, r3
 800f502:	3720      	adds	r7, #32
 800f504:	46bd      	mov	sp, r7
 800f506:	bd80      	pop	{r7, pc}

0800f508 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b08a      	sub	sp, #40	@ 0x28
 800f50c:	af02      	add	r7, sp, #8
 800f50e:	60f8      	str	r0, [r7, #12]
 800f510:	60b9      	str	r1, [r7, #8]
 800f512:	603b      	str	r3, [r7, #0]
 800f514:	4613      	mov	r3, r2
 800f516:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f51e:	2b20      	cmp	r3, #32
 800f520:	f040 80b5 	bne.w	800f68e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800f524:	68bb      	ldr	r3, [r7, #8]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d002      	beq.n	800f530 <HAL_UART_Receive+0x28>
 800f52a:	88fb      	ldrh	r3, [r7, #6]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d101      	bne.n	800f534 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800f530:	2301      	movs	r3, #1
 800f532:	e0ad      	b.n	800f690 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	2200      	movs	r2, #0
 800f538:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	2222      	movs	r2, #34	@ 0x22
 800f540:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	2200      	movs	r2, #0
 800f548:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f54a:	f7f8 fac9 	bl	8007ae0 <HAL_GetTick>
 800f54e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	88fa      	ldrh	r2, [r7, #6]
 800f554:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	88fa      	ldrh	r2, [r7, #6]
 800f55c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	689b      	ldr	r3, [r3, #8]
 800f564:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f568:	d10e      	bne.n	800f588 <HAL_UART_Receive+0x80>
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	691b      	ldr	r3, [r3, #16]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d105      	bne.n	800f57e <HAL_UART_Receive+0x76>
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800f578:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f57c:	e02d      	b.n	800f5da <HAL_UART_Receive+0xd2>
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	22ff      	movs	r2, #255	@ 0xff
 800f582:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f586:	e028      	b.n	800f5da <HAL_UART_Receive+0xd2>
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	689b      	ldr	r3, [r3, #8]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d10d      	bne.n	800f5ac <HAL_UART_Receive+0xa4>
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	691b      	ldr	r3, [r3, #16]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d104      	bne.n	800f5a2 <HAL_UART_Receive+0x9a>
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	22ff      	movs	r2, #255	@ 0xff
 800f59c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f5a0:	e01b      	b.n	800f5da <HAL_UART_Receive+0xd2>
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	227f      	movs	r2, #127	@ 0x7f
 800f5a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f5aa:	e016      	b.n	800f5da <HAL_UART_Receive+0xd2>
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	689b      	ldr	r3, [r3, #8]
 800f5b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f5b4:	d10d      	bne.n	800f5d2 <HAL_UART_Receive+0xca>
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	691b      	ldr	r3, [r3, #16]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d104      	bne.n	800f5c8 <HAL_UART_Receive+0xc0>
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	227f      	movs	r2, #127	@ 0x7f
 800f5c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f5c6:	e008      	b.n	800f5da <HAL_UART_Receive+0xd2>
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	223f      	movs	r2, #63	@ 0x3f
 800f5cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f5d0:	e003      	b.n	800f5da <HAL_UART_Receive+0xd2>
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f5e0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	689b      	ldr	r3, [r3, #8]
 800f5e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f5ea:	d108      	bne.n	800f5fe <HAL_UART_Receive+0xf6>
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	691b      	ldr	r3, [r3, #16]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d104      	bne.n	800f5fe <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f5f8:	68bb      	ldr	r3, [r7, #8]
 800f5fa:	61bb      	str	r3, [r7, #24]
 800f5fc:	e003      	b.n	800f606 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800f5fe:	68bb      	ldr	r3, [r7, #8]
 800f600:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f602:	2300      	movs	r3, #0
 800f604:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800f606:	e036      	b.n	800f676 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	9300      	str	r3, [sp, #0]
 800f60c:	697b      	ldr	r3, [r7, #20]
 800f60e:	2200      	movs	r2, #0
 800f610:	2120      	movs	r1, #32
 800f612:	68f8      	ldr	r0, [r7, #12]
 800f614:	f000 fc62 	bl	800fedc <UART_WaitOnFlagUntilTimeout>
 800f618:	4603      	mov	r3, r0
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d005      	beq.n	800f62a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	2220      	movs	r2, #32
 800f622:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800f626:	2303      	movs	r3, #3
 800f628:	e032      	b.n	800f690 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800f62a:	69fb      	ldr	r3, [r7, #28]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d10c      	bne.n	800f64a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f636:	b29a      	uxth	r2, r3
 800f638:	8a7b      	ldrh	r3, [r7, #18]
 800f63a:	4013      	ands	r3, r2
 800f63c:	b29a      	uxth	r2, r3
 800f63e:	69bb      	ldr	r3, [r7, #24]
 800f640:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f642:	69bb      	ldr	r3, [r7, #24]
 800f644:	3302      	adds	r3, #2
 800f646:	61bb      	str	r3, [r7, #24]
 800f648:	e00c      	b.n	800f664 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f650:	b2da      	uxtb	r2, r3
 800f652:	8a7b      	ldrh	r3, [r7, #18]
 800f654:	b2db      	uxtb	r3, r3
 800f656:	4013      	ands	r3, r2
 800f658:	b2da      	uxtb	r2, r3
 800f65a:	69fb      	ldr	r3, [r7, #28]
 800f65c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800f65e:	69fb      	ldr	r3, [r7, #28]
 800f660:	3301      	adds	r3, #1
 800f662:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f66a:	b29b      	uxth	r3, r3
 800f66c:	3b01      	subs	r3, #1
 800f66e:	b29a      	uxth	r2, r3
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f67c:	b29b      	uxth	r3, r3
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d1c2      	bne.n	800f608 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	2220      	movs	r2, #32
 800f686:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800f68a:	2300      	movs	r3, #0
 800f68c:	e000      	b.n	800f690 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800f68e:	2302      	movs	r3, #2
  }
}
 800f690:	4618      	mov	r0, r3
 800f692:	3720      	adds	r7, #32
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}

0800f698 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f698:	b480      	push	{r7}
 800f69a:	b083      	sub	sp, #12
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f6a0:	bf00      	nop
 800f6a2:	370c      	adds	r7, #12
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6aa:	4770      	bx	lr

0800f6ac <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	b083      	sub	sp, #12
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800f6b4:	bf00      	nop
 800f6b6:	370c      	adds	r7, #12
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6be:	4770      	bx	lr

0800f6c0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f6c0:	b480      	push	{r7}
 800f6c2:	b083      	sub	sp, #12
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800f6c8:	bf00      	nop
 800f6ca:	370c      	adds	r7, #12
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d2:	4770      	bx	lr

0800f6d4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f6d4:	b480      	push	{r7}
 800f6d6:	b083      	sub	sp, #12
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f6dc:	bf00      	nop
 800f6de:	370c      	adds	r7, #12
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e6:	4770      	bx	lr

0800f6e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f6e8:	b480      	push	{r7}
 800f6ea:	b083      	sub	sp, #12
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f6f0:	bf00      	nop
 800f6f2:	370c      	adds	r7, #12
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fa:	4770      	bx	lr

0800f6fc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800f6fc:	b480      	push	{r7}
 800f6fe:	b083      	sub	sp, #12
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800f704:	bf00      	nop
 800f706:	370c      	adds	r7, #12
 800f708:	46bd      	mov	sp, r7
 800f70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70e:	4770      	bx	lr

0800f710 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800f710:	b480      	push	{r7}
 800f712:	b083      	sub	sp, #12
 800f714:	af00      	add	r7, sp, #0
 800f716:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800f718:	bf00      	nop
 800f71a:	370c      	adds	r7, #12
 800f71c:	46bd      	mov	sp, r7
 800f71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f722:	4770      	bx	lr

0800f724 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800f724:	b480      	push	{r7}
 800f726:	b083      	sub	sp, #12
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800f72c:	bf00      	nop
 800f72e:	370c      	adds	r7, #12
 800f730:	46bd      	mov	sp, r7
 800f732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f736:	4770      	bx	lr

0800f738 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f738:	b480      	push	{r7}
 800f73a:	b083      	sub	sp, #12
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
 800f740:	460b      	mov	r3, r1
 800f742:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f744:	bf00      	nop
 800f746:	370c      	adds	r7, #12
 800f748:	46bd      	mov	sp, r7
 800f74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74e:	4770      	bx	lr

0800f750 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800f750:	b480      	push	{r7}
 800f752:	b083      	sub	sp, #12
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	4a1a      	ldr	r2, [pc, #104]	@ (800f7c4 <UART_InitCallbacksToDefault+0x74>)
 800f75c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	4a19      	ldr	r2, [pc, #100]	@ (800f7c8 <UART_InitCallbacksToDefault+0x78>)
 800f764:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	4a18      	ldr	r2, [pc, #96]	@ (800f7cc <UART_InitCallbacksToDefault+0x7c>)
 800f76c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	4a17      	ldr	r2, [pc, #92]	@ (800f7d0 <UART_InitCallbacksToDefault+0x80>)
 800f774:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	4a16      	ldr	r2, [pc, #88]	@ (800f7d4 <UART_InitCallbacksToDefault+0x84>)
 800f77c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	4a15      	ldr	r2, [pc, #84]	@ (800f7d8 <UART_InitCallbacksToDefault+0x88>)
 800f784:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	4a14      	ldr	r2, [pc, #80]	@ (800f7dc <UART_InitCallbacksToDefault+0x8c>)
 800f78c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	4a13      	ldr	r2, [pc, #76]	@ (800f7e0 <UART_InitCallbacksToDefault+0x90>)
 800f794:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	4a12      	ldr	r2, [pc, #72]	@ (800f7e4 <UART_InitCallbacksToDefault+0x94>)
 800f79c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	4a11      	ldr	r2, [pc, #68]	@ (800f7e8 <UART_InitCallbacksToDefault+0x98>)
 800f7a4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	4a10      	ldr	r2, [pc, #64]	@ (800f7ec <UART_InitCallbacksToDefault+0x9c>)
 800f7ac:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	4a0f      	ldr	r2, [pc, #60]	@ (800f7f0 <UART_InitCallbacksToDefault+0xa0>)
 800f7b4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800f7b8:	bf00      	nop
 800f7ba:	370c      	adds	r7, #12
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c2:	4770      	bx	lr
 800f7c4:	0800f6ad 	.word	0x0800f6ad
 800f7c8:	0800f699 	.word	0x0800f699
 800f7cc:	0800f6d5 	.word	0x0800f6d5
 800f7d0:	0800f6c1 	.word	0x0800f6c1
 800f7d4:	0800f6e9 	.word	0x0800f6e9
 800f7d8:	0800f6fd 	.word	0x0800f6fd
 800f7dc:	0800f711 	.word	0x0800f711
 800f7e0:	0800f725 	.word	0x0800f725
 800f7e4:	08010083 	.word	0x08010083
 800f7e8:	08010097 	.word	0x08010097
 800f7ec:	080100ab 	.word	0x080100ab
 800f7f0:	0800f739 	.word	0x0800f739

0800f7f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f7f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f7f8:	b08c      	sub	sp, #48	@ 0x30
 800f7fa:	af00      	add	r7, sp, #0
 800f7fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f7fe:	2300      	movs	r3, #0
 800f800:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f804:	697b      	ldr	r3, [r7, #20]
 800f806:	689a      	ldr	r2, [r3, #8]
 800f808:	697b      	ldr	r3, [r7, #20]
 800f80a:	691b      	ldr	r3, [r3, #16]
 800f80c:	431a      	orrs	r2, r3
 800f80e:	697b      	ldr	r3, [r7, #20]
 800f810:	695b      	ldr	r3, [r3, #20]
 800f812:	431a      	orrs	r2, r3
 800f814:	697b      	ldr	r3, [r7, #20]
 800f816:	69db      	ldr	r3, [r3, #28]
 800f818:	4313      	orrs	r3, r2
 800f81a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f81c:	697b      	ldr	r3, [r7, #20]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	681a      	ldr	r2, [r3, #0]
 800f822:	4baf      	ldr	r3, [pc, #700]	@ (800fae0 <UART_SetConfig+0x2ec>)
 800f824:	4013      	ands	r3, r2
 800f826:	697a      	ldr	r2, [r7, #20]
 800f828:	6812      	ldr	r2, [r2, #0]
 800f82a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f82c:	430b      	orrs	r3, r1
 800f82e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f830:	697b      	ldr	r3, [r7, #20]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	685b      	ldr	r3, [r3, #4]
 800f836:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f83a:	697b      	ldr	r3, [r7, #20]
 800f83c:	68da      	ldr	r2, [r3, #12]
 800f83e:	697b      	ldr	r3, [r7, #20]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	430a      	orrs	r2, r1
 800f844:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f846:	697b      	ldr	r3, [r7, #20]
 800f848:	699b      	ldr	r3, [r3, #24]
 800f84a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f84c:	697b      	ldr	r3, [r7, #20]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	4aa4      	ldr	r2, [pc, #656]	@ (800fae4 <UART_SetConfig+0x2f0>)
 800f852:	4293      	cmp	r3, r2
 800f854:	d004      	beq.n	800f860 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f856:	697b      	ldr	r3, [r7, #20]
 800f858:	6a1b      	ldr	r3, [r3, #32]
 800f85a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f85c:	4313      	orrs	r3, r2
 800f85e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f860:	697b      	ldr	r3, [r7, #20]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	689b      	ldr	r3, [r3, #8]
 800f866:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800f86a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800f86e:	697a      	ldr	r2, [r7, #20]
 800f870:	6812      	ldr	r2, [r2, #0]
 800f872:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f874:	430b      	orrs	r3, r1
 800f876:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f87e:	f023 010f 	bic.w	r1, r3, #15
 800f882:	697b      	ldr	r3, [r7, #20]
 800f884:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f886:	697b      	ldr	r3, [r7, #20]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	430a      	orrs	r2, r1
 800f88c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f88e:	697b      	ldr	r3, [r7, #20]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	4a95      	ldr	r2, [pc, #596]	@ (800fae8 <UART_SetConfig+0x2f4>)
 800f894:	4293      	cmp	r3, r2
 800f896:	d125      	bne.n	800f8e4 <UART_SetConfig+0xf0>
 800f898:	2003      	movs	r0, #3
 800f89a:	f7ff fd27 	bl	800f2ec <LL_RCC_GetUSARTClockSource>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	2b03      	cmp	r3, #3
 800f8a2:	d81b      	bhi.n	800f8dc <UART_SetConfig+0xe8>
 800f8a4:	a201      	add	r2, pc, #4	@ (adr r2, 800f8ac <UART_SetConfig+0xb8>)
 800f8a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8aa:	bf00      	nop
 800f8ac:	0800f8bd 	.word	0x0800f8bd
 800f8b0:	0800f8cd 	.word	0x0800f8cd
 800f8b4:	0800f8c5 	.word	0x0800f8c5
 800f8b8:	0800f8d5 	.word	0x0800f8d5
 800f8bc:	2301      	movs	r3, #1
 800f8be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f8c2:	e042      	b.n	800f94a <UART_SetConfig+0x156>
 800f8c4:	2302      	movs	r3, #2
 800f8c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f8ca:	e03e      	b.n	800f94a <UART_SetConfig+0x156>
 800f8cc:	2304      	movs	r3, #4
 800f8ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f8d2:	e03a      	b.n	800f94a <UART_SetConfig+0x156>
 800f8d4:	2308      	movs	r3, #8
 800f8d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f8da:	e036      	b.n	800f94a <UART_SetConfig+0x156>
 800f8dc:	2310      	movs	r3, #16
 800f8de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f8e2:	e032      	b.n	800f94a <UART_SetConfig+0x156>
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	4a7e      	ldr	r2, [pc, #504]	@ (800fae4 <UART_SetConfig+0x2f0>)
 800f8ea:	4293      	cmp	r3, r2
 800f8ec:	d12a      	bne.n	800f944 <UART_SetConfig+0x150>
 800f8ee:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800f8f2:	f7ff fd0b 	bl	800f30c <LL_RCC_GetLPUARTClockSource>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f8fc:	d01a      	beq.n	800f934 <UART_SetConfig+0x140>
 800f8fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f902:	d81b      	bhi.n	800f93c <UART_SetConfig+0x148>
 800f904:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f908:	d00c      	beq.n	800f924 <UART_SetConfig+0x130>
 800f90a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f90e:	d815      	bhi.n	800f93c <UART_SetConfig+0x148>
 800f910:	2b00      	cmp	r3, #0
 800f912:	d003      	beq.n	800f91c <UART_SetConfig+0x128>
 800f914:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f918:	d008      	beq.n	800f92c <UART_SetConfig+0x138>
 800f91a:	e00f      	b.n	800f93c <UART_SetConfig+0x148>
 800f91c:	2300      	movs	r3, #0
 800f91e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f922:	e012      	b.n	800f94a <UART_SetConfig+0x156>
 800f924:	2302      	movs	r3, #2
 800f926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f92a:	e00e      	b.n	800f94a <UART_SetConfig+0x156>
 800f92c:	2304      	movs	r3, #4
 800f92e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f932:	e00a      	b.n	800f94a <UART_SetConfig+0x156>
 800f934:	2308      	movs	r3, #8
 800f936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f93a:	e006      	b.n	800f94a <UART_SetConfig+0x156>
 800f93c:	2310      	movs	r3, #16
 800f93e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f942:	e002      	b.n	800f94a <UART_SetConfig+0x156>
 800f944:	2310      	movs	r3, #16
 800f946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f94a:	697b      	ldr	r3, [r7, #20]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	4a65      	ldr	r2, [pc, #404]	@ (800fae4 <UART_SetConfig+0x2f0>)
 800f950:	4293      	cmp	r3, r2
 800f952:	f040 8097 	bne.w	800fa84 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f956:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f95a:	2b08      	cmp	r3, #8
 800f95c:	d823      	bhi.n	800f9a6 <UART_SetConfig+0x1b2>
 800f95e:	a201      	add	r2, pc, #4	@ (adr r2, 800f964 <UART_SetConfig+0x170>)
 800f960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f964:	0800f989 	.word	0x0800f989
 800f968:	0800f9a7 	.word	0x0800f9a7
 800f96c:	0800f991 	.word	0x0800f991
 800f970:	0800f9a7 	.word	0x0800f9a7
 800f974:	0800f997 	.word	0x0800f997
 800f978:	0800f9a7 	.word	0x0800f9a7
 800f97c:	0800f9a7 	.word	0x0800f9a7
 800f980:	0800f9a7 	.word	0x0800f9a7
 800f984:	0800f99f 	.word	0x0800f99f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f988:	f7fc fde0 	bl	800c54c <HAL_RCC_GetPCLK1Freq>
 800f98c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f98e:	e010      	b.n	800f9b2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f990:	4b56      	ldr	r3, [pc, #344]	@ (800faec <UART_SetConfig+0x2f8>)
 800f992:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f994:	e00d      	b.n	800f9b2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f996:	f7fc fd59 	bl	800c44c <HAL_RCC_GetSysClockFreq>
 800f99a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f99c:	e009      	b.n	800f9b2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f99e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f9a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f9a4:	e005      	b.n	800f9b2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f9aa:	2301      	movs	r3, #1
 800f9ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f9b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f9b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	f000 812b 	beq.w	800fc10 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f9ba:	697b      	ldr	r3, [r7, #20]
 800f9bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9be:	4a4c      	ldr	r2, [pc, #304]	@ (800faf0 <UART_SetConfig+0x2fc>)
 800f9c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f9c4:	461a      	mov	r2, r3
 800f9c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f9cc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f9ce:	697b      	ldr	r3, [r7, #20]
 800f9d0:	685a      	ldr	r2, [r3, #4]
 800f9d2:	4613      	mov	r3, r2
 800f9d4:	005b      	lsls	r3, r3, #1
 800f9d6:	4413      	add	r3, r2
 800f9d8:	69ba      	ldr	r2, [r7, #24]
 800f9da:	429a      	cmp	r2, r3
 800f9dc:	d305      	bcc.n	800f9ea <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f9de:	697b      	ldr	r3, [r7, #20]
 800f9e0:	685b      	ldr	r3, [r3, #4]
 800f9e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f9e4:	69ba      	ldr	r2, [r7, #24]
 800f9e6:	429a      	cmp	r2, r3
 800f9e8:	d903      	bls.n	800f9f2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f9f0:	e10e      	b.n	800fc10 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	60bb      	str	r3, [r7, #8]
 800f9f8:	60fa      	str	r2, [r7, #12]
 800f9fa:	697b      	ldr	r3, [r7, #20]
 800f9fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9fe:	4a3c      	ldr	r2, [pc, #240]	@ (800faf0 <UART_SetConfig+0x2fc>)
 800fa00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa04:	b29b      	uxth	r3, r3
 800fa06:	2200      	movs	r2, #0
 800fa08:	603b      	str	r3, [r7, #0]
 800fa0a:	607a      	str	r2, [r7, #4]
 800fa0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fa14:	f7f1 f900 	bl	8000c18 <__aeabi_uldivmod>
 800fa18:	4602      	mov	r2, r0
 800fa1a:	460b      	mov	r3, r1
 800fa1c:	4610      	mov	r0, r2
 800fa1e:	4619      	mov	r1, r3
 800fa20:	f04f 0200 	mov.w	r2, #0
 800fa24:	f04f 0300 	mov.w	r3, #0
 800fa28:	020b      	lsls	r3, r1, #8
 800fa2a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fa2e:	0202      	lsls	r2, r0, #8
 800fa30:	6979      	ldr	r1, [r7, #20]
 800fa32:	6849      	ldr	r1, [r1, #4]
 800fa34:	0849      	lsrs	r1, r1, #1
 800fa36:	2000      	movs	r0, #0
 800fa38:	460c      	mov	r4, r1
 800fa3a:	4605      	mov	r5, r0
 800fa3c:	eb12 0804 	adds.w	r8, r2, r4
 800fa40:	eb43 0905 	adc.w	r9, r3, r5
 800fa44:	697b      	ldr	r3, [r7, #20]
 800fa46:	685b      	ldr	r3, [r3, #4]
 800fa48:	2200      	movs	r2, #0
 800fa4a:	469a      	mov	sl, r3
 800fa4c:	4693      	mov	fp, r2
 800fa4e:	4652      	mov	r2, sl
 800fa50:	465b      	mov	r3, fp
 800fa52:	4640      	mov	r0, r8
 800fa54:	4649      	mov	r1, r9
 800fa56:	f7f1 f8df 	bl	8000c18 <__aeabi_uldivmod>
 800fa5a:	4602      	mov	r2, r0
 800fa5c:	460b      	mov	r3, r1
 800fa5e:	4613      	mov	r3, r2
 800fa60:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fa62:	6a3b      	ldr	r3, [r7, #32]
 800fa64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fa68:	d308      	bcc.n	800fa7c <UART_SetConfig+0x288>
 800fa6a:	6a3b      	ldr	r3, [r7, #32]
 800fa6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fa70:	d204      	bcs.n	800fa7c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	6a3a      	ldr	r2, [r7, #32]
 800fa78:	60da      	str	r2, [r3, #12]
 800fa7a:	e0c9      	b.n	800fc10 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800fa7c:	2301      	movs	r3, #1
 800fa7e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800fa82:	e0c5      	b.n	800fc10 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fa84:	697b      	ldr	r3, [r7, #20]
 800fa86:	69db      	ldr	r3, [r3, #28]
 800fa88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fa8c:	d16d      	bne.n	800fb6a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800fa8e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800fa92:	3b01      	subs	r3, #1
 800fa94:	2b07      	cmp	r3, #7
 800fa96:	d82d      	bhi.n	800faf4 <UART_SetConfig+0x300>
 800fa98:	a201      	add	r2, pc, #4	@ (adr r2, 800faa0 <UART_SetConfig+0x2ac>)
 800fa9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa9e:	bf00      	nop
 800faa0:	0800fac1 	.word	0x0800fac1
 800faa4:	0800fac9 	.word	0x0800fac9
 800faa8:	0800faf5 	.word	0x0800faf5
 800faac:	0800facf 	.word	0x0800facf
 800fab0:	0800faf5 	.word	0x0800faf5
 800fab4:	0800faf5 	.word	0x0800faf5
 800fab8:	0800faf5 	.word	0x0800faf5
 800fabc:	0800fad7 	.word	0x0800fad7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fac0:	f7fc fd5a 	bl	800c578 <HAL_RCC_GetPCLK2Freq>
 800fac4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800fac6:	e01b      	b.n	800fb00 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fac8:	4b08      	ldr	r3, [pc, #32]	@ (800faec <UART_SetConfig+0x2f8>)
 800faca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800facc:	e018      	b.n	800fb00 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800face:	f7fc fcbd 	bl	800c44c <HAL_RCC_GetSysClockFreq>
 800fad2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800fad4:	e014      	b.n	800fb00 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fad6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fada:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800fadc:	e010      	b.n	800fb00 <UART_SetConfig+0x30c>
 800fade:	bf00      	nop
 800fae0:	cfff69f3 	.word	0xcfff69f3
 800fae4:	40008000 	.word	0x40008000
 800fae8:	40013800 	.word	0x40013800
 800faec:	00f42400 	.word	0x00f42400
 800faf0:	0801d918 	.word	0x0801d918
      default:
        pclk = 0U;
 800faf4:	2300      	movs	r3, #0
 800faf6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800faf8:	2301      	movs	r3, #1
 800fafa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800fafe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fb00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	f000 8084 	beq.w	800fc10 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fb08:	697b      	ldr	r3, [r7, #20]
 800fb0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb0c:	4a4b      	ldr	r2, [pc, #300]	@ (800fc3c <UART_SetConfig+0x448>)
 800fb0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fb12:	461a      	mov	r2, r3
 800fb14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb16:	fbb3 f3f2 	udiv	r3, r3, r2
 800fb1a:	005a      	lsls	r2, r3, #1
 800fb1c:	697b      	ldr	r3, [r7, #20]
 800fb1e:	685b      	ldr	r3, [r3, #4]
 800fb20:	085b      	lsrs	r3, r3, #1
 800fb22:	441a      	add	r2, r3
 800fb24:	697b      	ldr	r3, [r7, #20]
 800fb26:	685b      	ldr	r3, [r3, #4]
 800fb28:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb2c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fb2e:	6a3b      	ldr	r3, [r7, #32]
 800fb30:	2b0f      	cmp	r3, #15
 800fb32:	d916      	bls.n	800fb62 <UART_SetConfig+0x36e>
 800fb34:	6a3b      	ldr	r3, [r7, #32]
 800fb36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fb3a:	d212      	bcs.n	800fb62 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fb3c:	6a3b      	ldr	r3, [r7, #32]
 800fb3e:	b29b      	uxth	r3, r3
 800fb40:	f023 030f 	bic.w	r3, r3, #15
 800fb44:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fb46:	6a3b      	ldr	r3, [r7, #32]
 800fb48:	085b      	lsrs	r3, r3, #1
 800fb4a:	b29b      	uxth	r3, r3
 800fb4c:	f003 0307 	and.w	r3, r3, #7
 800fb50:	b29a      	uxth	r2, r3
 800fb52:	8bfb      	ldrh	r3, [r7, #30]
 800fb54:	4313      	orrs	r3, r2
 800fb56:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800fb58:	697b      	ldr	r3, [r7, #20]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	8bfa      	ldrh	r2, [r7, #30]
 800fb5e:	60da      	str	r2, [r3, #12]
 800fb60:	e056      	b.n	800fc10 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800fb62:	2301      	movs	r3, #1
 800fb64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800fb68:	e052      	b.n	800fc10 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fb6a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800fb6e:	3b01      	subs	r3, #1
 800fb70:	2b07      	cmp	r3, #7
 800fb72:	d822      	bhi.n	800fbba <UART_SetConfig+0x3c6>
 800fb74:	a201      	add	r2, pc, #4	@ (adr r2, 800fb7c <UART_SetConfig+0x388>)
 800fb76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb7a:	bf00      	nop
 800fb7c:	0800fb9d 	.word	0x0800fb9d
 800fb80:	0800fba5 	.word	0x0800fba5
 800fb84:	0800fbbb 	.word	0x0800fbbb
 800fb88:	0800fbab 	.word	0x0800fbab
 800fb8c:	0800fbbb 	.word	0x0800fbbb
 800fb90:	0800fbbb 	.word	0x0800fbbb
 800fb94:	0800fbbb 	.word	0x0800fbbb
 800fb98:	0800fbb3 	.word	0x0800fbb3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fb9c:	f7fc fcec 	bl	800c578 <HAL_RCC_GetPCLK2Freq>
 800fba0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800fba2:	e010      	b.n	800fbc6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fba4:	4b26      	ldr	r3, [pc, #152]	@ (800fc40 <UART_SetConfig+0x44c>)
 800fba6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800fba8:	e00d      	b.n	800fbc6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fbaa:	f7fc fc4f 	bl	800c44c <HAL_RCC_GetSysClockFreq>
 800fbae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800fbb0:	e009      	b.n	800fbc6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fbb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fbb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800fbb8:	e005      	b.n	800fbc6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800fbba:	2300      	movs	r3, #0
 800fbbc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800fbbe:	2301      	movs	r3, #1
 800fbc0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800fbc4:	bf00      	nop
    }

    if (pclk != 0U)
 800fbc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d021      	beq.n	800fc10 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fbcc:	697b      	ldr	r3, [r7, #20]
 800fbce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbd0:	4a1a      	ldr	r2, [pc, #104]	@ (800fc3c <UART_SetConfig+0x448>)
 800fbd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fbd6:	461a      	mov	r2, r3
 800fbd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbda:	fbb3 f2f2 	udiv	r2, r3, r2
 800fbde:	697b      	ldr	r3, [r7, #20]
 800fbe0:	685b      	ldr	r3, [r3, #4]
 800fbe2:	085b      	lsrs	r3, r3, #1
 800fbe4:	441a      	add	r2, r3
 800fbe6:	697b      	ldr	r3, [r7, #20]
 800fbe8:	685b      	ldr	r3, [r3, #4]
 800fbea:	fbb2 f3f3 	udiv	r3, r2, r3
 800fbee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fbf0:	6a3b      	ldr	r3, [r7, #32]
 800fbf2:	2b0f      	cmp	r3, #15
 800fbf4:	d909      	bls.n	800fc0a <UART_SetConfig+0x416>
 800fbf6:	6a3b      	ldr	r3, [r7, #32]
 800fbf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fbfc:	d205      	bcs.n	800fc0a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fbfe:	6a3b      	ldr	r3, [r7, #32]
 800fc00:	b29a      	uxth	r2, r3
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	60da      	str	r2, [r3, #12]
 800fc08:	e002      	b.n	800fc10 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800fc0a:	2301      	movs	r3, #1
 800fc0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fc10:	697b      	ldr	r3, [r7, #20]
 800fc12:	2201      	movs	r2, #1
 800fc14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	2201      	movs	r2, #1
 800fc1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fc20:	697b      	ldr	r3, [r7, #20]
 800fc22:	2200      	movs	r2, #0
 800fc24:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	2200      	movs	r2, #0
 800fc2a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800fc2c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800fc30:	4618      	mov	r0, r3
 800fc32:	3730      	adds	r7, #48	@ 0x30
 800fc34:	46bd      	mov	sp, r7
 800fc36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fc3a:	bf00      	nop
 800fc3c:	0801d918 	.word	0x0801d918
 800fc40:	00f42400 	.word	0x00f42400

0800fc44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fc44:	b480      	push	{r7}
 800fc46:	b083      	sub	sp, #12
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc50:	f003 0308 	and.w	r3, r3, #8
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d00a      	beq.n	800fc6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	685b      	ldr	r3, [r3, #4]
 800fc5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	430a      	orrs	r2, r1
 800fc6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc72:	f003 0301 	and.w	r3, r3, #1
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d00a      	beq.n	800fc90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	685b      	ldr	r3, [r3, #4]
 800fc80:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	430a      	orrs	r2, r1
 800fc8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc94:	f003 0302 	and.w	r3, r3, #2
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d00a      	beq.n	800fcb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	685b      	ldr	r3, [r3, #4]
 800fca2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	430a      	orrs	r2, r1
 800fcb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcb6:	f003 0304 	and.w	r3, r3, #4
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d00a      	beq.n	800fcd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	685b      	ldr	r3, [r3, #4]
 800fcc4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	430a      	orrs	r2, r1
 800fcd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcd8:	f003 0310 	and.w	r3, r3, #16
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d00a      	beq.n	800fcf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	689b      	ldr	r3, [r3, #8]
 800fce6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	430a      	orrs	r2, r1
 800fcf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcfa:	f003 0320 	and.w	r3, r3, #32
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d00a      	beq.n	800fd18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	689b      	ldr	r3, [r3, #8]
 800fd08:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	430a      	orrs	r2, r1
 800fd16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d01a      	beq.n	800fd5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	685b      	ldr	r3, [r3, #4]
 800fd2a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	430a      	orrs	r2, r1
 800fd38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fd42:	d10a      	bne.n	800fd5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	685b      	ldr	r3, [r3, #4]
 800fd4a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	430a      	orrs	r2, r1
 800fd58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d00a      	beq.n	800fd7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	685b      	ldr	r3, [r3, #4]
 800fd6c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	430a      	orrs	r2, r1
 800fd7a:	605a      	str	r2, [r3, #4]
  }
}
 800fd7c:	bf00      	nop
 800fd7e:	370c      	adds	r7, #12
 800fd80:	46bd      	mov	sp, r7
 800fd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd86:	4770      	bx	lr

0800fd88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b098      	sub	sp, #96	@ 0x60
 800fd8c:	af02      	add	r7, sp, #8
 800fd8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	2200      	movs	r2, #0
 800fd94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fd98:	f7f7 fea2 	bl	8007ae0 <HAL_GetTick>
 800fd9c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	f003 0308 	and.w	r3, r3, #8
 800fda8:	2b08      	cmp	r3, #8
 800fdaa:	d12f      	bne.n	800fe0c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fdac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fdb0:	9300      	str	r3, [sp, #0]
 800fdb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f000 f88e 	bl	800fedc <UART_WaitOnFlagUntilTimeout>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d022      	beq.n	800fe0c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdce:	e853 3f00 	ldrex	r3, [r3]
 800fdd2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fdd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fdda:	653b      	str	r3, [r7, #80]	@ 0x50
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	461a      	mov	r2, r3
 800fde2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fde4:	647b      	str	r3, [r7, #68]	@ 0x44
 800fde6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fde8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fdea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fdec:	e841 2300 	strex	r3, r2, [r1]
 800fdf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fdf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d1e6      	bne.n	800fdc6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2220      	movs	r2, #32
 800fdfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	2200      	movs	r2, #0
 800fe04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fe08:	2303      	movs	r3, #3
 800fe0a:	e063      	b.n	800fed4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	f003 0304 	and.w	r3, r3, #4
 800fe16:	2b04      	cmp	r3, #4
 800fe18:	d149      	bne.n	800feae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fe1a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fe1e:	9300      	str	r3, [sp, #0]
 800fe20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe22:	2200      	movs	r2, #0
 800fe24:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	f000 f857 	bl	800fedc <UART_WaitOnFlagUntilTimeout>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d03c      	beq.n	800feae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe3c:	e853 3f00 	ldrex	r3, [r3]
 800fe40:	623b      	str	r3, [r7, #32]
   return(result);
 800fe42:	6a3b      	ldr	r3, [r7, #32]
 800fe44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fe48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	461a      	mov	r2, r3
 800fe50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fe52:	633b      	str	r3, [r7, #48]	@ 0x30
 800fe54:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fe58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fe5a:	e841 2300 	strex	r3, r2, [r1]
 800fe5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fe60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d1e6      	bne.n	800fe34 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	3308      	adds	r3, #8
 800fe6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe6e:	693b      	ldr	r3, [r7, #16]
 800fe70:	e853 3f00 	ldrex	r3, [r3]
 800fe74:	60fb      	str	r3, [r7, #12]
   return(result);
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	f023 0301 	bic.w	r3, r3, #1
 800fe7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	3308      	adds	r3, #8
 800fe84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fe86:	61fa      	str	r2, [r7, #28]
 800fe88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe8a:	69b9      	ldr	r1, [r7, #24]
 800fe8c:	69fa      	ldr	r2, [r7, #28]
 800fe8e:	e841 2300 	strex	r3, r2, [r1]
 800fe92:	617b      	str	r3, [r7, #20]
   return(result);
 800fe94:	697b      	ldr	r3, [r7, #20]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d1e5      	bne.n	800fe66 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	2220      	movs	r2, #32
 800fe9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	2200      	movs	r2, #0
 800fea6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800feaa:	2303      	movs	r3, #3
 800feac:	e012      	b.n	800fed4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	2220      	movs	r2, #32
 800feb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	2220      	movs	r2, #32
 800feba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	2200      	movs	r2, #0
 800fec2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	2200      	movs	r2, #0
 800fec8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	2200      	movs	r2, #0
 800fece:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fed2:	2300      	movs	r3, #0
}
 800fed4:	4618      	mov	r0, r3
 800fed6:	3758      	adds	r7, #88	@ 0x58
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd80      	pop	{r7, pc}

0800fedc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b084      	sub	sp, #16
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	60f8      	str	r0, [r7, #12]
 800fee4:	60b9      	str	r1, [r7, #8]
 800fee6:	603b      	str	r3, [r7, #0]
 800fee8:	4613      	mov	r3, r2
 800feea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800feec:	e04f      	b.n	800ff8e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800feee:	69bb      	ldr	r3, [r7, #24]
 800fef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fef4:	d04b      	beq.n	800ff8e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fef6:	f7f7 fdf3 	bl	8007ae0 <HAL_GetTick>
 800fefa:	4602      	mov	r2, r0
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	1ad3      	subs	r3, r2, r3
 800ff00:	69ba      	ldr	r2, [r7, #24]
 800ff02:	429a      	cmp	r2, r3
 800ff04:	d302      	bcc.n	800ff0c <UART_WaitOnFlagUntilTimeout+0x30>
 800ff06:	69bb      	ldr	r3, [r7, #24]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d101      	bne.n	800ff10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ff0c:	2303      	movs	r3, #3
 800ff0e:	e04e      	b.n	800ffae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	f003 0304 	and.w	r3, r3, #4
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d037      	beq.n	800ff8e <UART_WaitOnFlagUntilTimeout+0xb2>
 800ff1e:	68bb      	ldr	r3, [r7, #8]
 800ff20:	2b80      	cmp	r3, #128	@ 0x80
 800ff22:	d034      	beq.n	800ff8e <UART_WaitOnFlagUntilTimeout+0xb2>
 800ff24:	68bb      	ldr	r3, [r7, #8]
 800ff26:	2b40      	cmp	r3, #64	@ 0x40
 800ff28:	d031      	beq.n	800ff8e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	69db      	ldr	r3, [r3, #28]
 800ff30:	f003 0308 	and.w	r3, r3, #8
 800ff34:	2b08      	cmp	r3, #8
 800ff36:	d110      	bne.n	800ff5a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	2208      	movs	r2, #8
 800ff3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ff40:	68f8      	ldr	r0, [r7, #12]
 800ff42:	f000 f838 	bl	800ffb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	2208      	movs	r2, #8
 800ff4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	2200      	movs	r2, #0
 800ff52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ff56:	2301      	movs	r3, #1
 800ff58:	e029      	b.n	800ffae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	69db      	ldr	r3, [r3, #28]
 800ff60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ff64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ff68:	d111      	bne.n	800ff8e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ff72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ff74:	68f8      	ldr	r0, [r7, #12]
 800ff76:	f000 f81e 	bl	800ffb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	2220      	movs	r2, #32
 800ff7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	2200      	movs	r2, #0
 800ff86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ff8a:	2303      	movs	r3, #3
 800ff8c:	e00f      	b.n	800ffae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	69da      	ldr	r2, [r3, #28]
 800ff94:	68bb      	ldr	r3, [r7, #8]
 800ff96:	4013      	ands	r3, r2
 800ff98:	68ba      	ldr	r2, [r7, #8]
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	bf0c      	ite	eq
 800ff9e:	2301      	moveq	r3, #1
 800ffa0:	2300      	movne	r3, #0
 800ffa2:	b2db      	uxtb	r3, r3
 800ffa4:	461a      	mov	r2, r3
 800ffa6:	79fb      	ldrb	r3, [r7, #7]
 800ffa8:	429a      	cmp	r2, r3
 800ffaa:	d0a0      	beq.n	800feee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ffac:	2300      	movs	r3, #0
}
 800ffae:	4618      	mov	r0, r3
 800ffb0:	3710      	adds	r7, #16
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	bd80      	pop	{r7, pc}

0800ffb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ffb6:	b480      	push	{r7}
 800ffb8:	b095      	sub	sp, #84	@ 0x54
 800ffba:	af00      	add	r7, sp, #0
 800ffbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ffc6:	e853 3f00 	ldrex	r3, [r3]
 800ffca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ffcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ffd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	461a      	mov	r2, r3
 800ffda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ffdc:	643b      	str	r3, [r7, #64]	@ 0x40
 800ffde:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffe0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ffe2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ffe4:	e841 2300 	strex	r3, r2, [r1]
 800ffe8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ffea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d1e6      	bne.n	800ffbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	3308      	adds	r3, #8
 800fff6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fff8:	6a3b      	ldr	r3, [r7, #32]
 800fffa:	e853 3f00 	ldrex	r3, [r3]
 800fffe:	61fb      	str	r3, [r7, #28]
   return(result);
 8010000:	69fb      	ldr	r3, [r7, #28]
 8010002:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010006:	f023 0301 	bic.w	r3, r3, #1
 801000a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	3308      	adds	r3, #8
 8010012:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010014:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010016:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010018:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801001a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801001c:	e841 2300 	strex	r3, r2, [r1]
 8010020:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010024:	2b00      	cmp	r3, #0
 8010026:	d1e3      	bne.n	800fff0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801002c:	2b01      	cmp	r3, #1
 801002e:	d118      	bne.n	8010062 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	e853 3f00 	ldrex	r3, [r3]
 801003c:	60bb      	str	r3, [r7, #8]
   return(result);
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	f023 0310 	bic.w	r3, r3, #16
 8010044:	647b      	str	r3, [r7, #68]	@ 0x44
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	461a      	mov	r2, r3
 801004c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801004e:	61bb      	str	r3, [r7, #24]
 8010050:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010052:	6979      	ldr	r1, [r7, #20]
 8010054:	69ba      	ldr	r2, [r7, #24]
 8010056:	e841 2300 	strex	r3, r2, [r1]
 801005a:	613b      	str	r3, [r7, #16]
   return(result);
 801005c:	693b      	ldr	r3, [r7, #16]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d1e6      	bne.n	8010030 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2220      	movs	r2, #32
 8010066:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	2200      	movs	r2, #0
 801006e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	2200      	movs	r2, #0
 8010074:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010076:	bf00      	nop
 8010078:	3754      	adds	r7, #84	@ 0x54
 801007a:	46bd      	mov	sp, r7
 801007c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010080:	4770      	bx	lr

08010082 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010082:	b480      	push	{r7}
 8010084:	b083      	sub	sp, #12
 8010086:	af00      	add	r7, sp, #0
 8010088:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801008a:	bf00      	nop
 801008c:	370c      	adds	r7, #12
 801008e:	46bd      	mov	sp, r7
 8010090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010094:	4770      	bx	lr

08010096 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010096:	b480      	push	{r7}
 8010098:	b083      	sub	sp, #12
 801009a:	af00      	add	r7, sp, #0
 801009c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801009e:	bf00      	nop
 80100a0:	370c      	adds	r7, #12
 80100a2:	46bd      	mov	sp, r7
 80100a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a8:	4770      	bx	lr

080100aa <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80100aa:	b480      	push	{r7}
 80100ac:	b083      	sub	sp, #12
 80100ae:	af00      	add	r7, sp, #0
 80100b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80100b2:	bf00      	nop
 80100b4:	370c      	adds	r7, #12
 80100b6:	46bd      	mov	sp, r7
 80100b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100bc:	4770      	bx	lr

080100be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80100be:	b480      	push	{r7}
 80100c0:	b085      	sub	sp, #20
 80100c2:	af00      	add	r7, sp, #0
 80100c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80100cc:	2b01      	cmp	r3, #1
 80100ce:	d101      	bne.n	80100d4 <HAL_UARTEx_DisableFifoMode+0x16>
 80100d0:	2302      	movs	r3, #2
 80100d2:	e027      	b.n	8010124 <HAL_UARTEx_DisableFifoMode+0x66>
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2201      	movs	r2, #1
 80100d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2224      	movs	r2, #36	@ 0x24
 80100e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	681a      	ldr	r2, [r3, #0]
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	f022 0201 	bic.w	r2, r2, #1
 80100fa:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010102:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2200      	movs	r2, #0
 8010108:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	68fa      	ldr	r2, [r7, #12]
 8010110:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	2220      	movs	r2, #32
 8010116:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	2200      	movs	r2, #0
 801011e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010122:	2300      	movs	r3, #0
}
 8010124:	4618      	mov	r0, r3
 8010126:	3714      	adds	r7, #20
 8010128:	46bd      	mov	sp, r7
 801012a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012e:	4770      	bx	lr

08010130 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b084      	sub	sp, #16
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
 8010138:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010140:	2b01      	cmp	r3, #1
 8010142:	d101      	bne.n	8010148 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010144:	2302      	movs	r3, #2
 8010146:	e02d      	b.n	80101a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	2201      	movs	r2, #1
 801014c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	2224      	movs	r2, #36	@ 0x24
 8010154:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	681a      	ldr	r2, [r3, #0]
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	f022 0201 	bic.w	r2, r2, #1
 801016e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	689b      	ldr	r3, [r3, #8]
 8010176:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	683a      	ldr	r2, [r7, #0]
 8010180:	430a      	orrs	r2, r1
 8010182:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010184:	6878      	ldr	r0, [r7, #4]
 8010186:	f000 f84f 	bl	8010228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	68fa      	ldr	r2, [r7, #12]
 8010190:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	2220      	movs	r2, #32
 8010196:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	2200      	movs	r2, #0
 801019e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80101a2:	2300      	movs	r3, #0
}
 80101a4:	4618      	mov	r0, r3
 80101a6:	3710      	adds	r7, #16
 80101a8:	46bd      	mov	sp, r7
 80101aa:	bd80      	pop	{r7, pc}

080101ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b084      	sub	sp, #16
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
 80101b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80101bc:	2b01      	cmp	r3, #1
 80101be:	d101      	bne.n	80101c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80101c0:	2302      	movs	r3, #2
 80101c2:	e02d      	b.n	8010220 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	2201      	movs	r2, #1
 80101c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2224      	movs	r2, #36	@ 0x24
 80101d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	681a      	ldr	r2, [r3, #0]
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	f022 0201 	bic.w	r2, r2, #1
 80101ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	689b      	ldr	r3, [r3, #8]
 80101f2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	683a      	ldr	r2, [r7, #0]
 80101fc:	430a      	orrs	r2, r1
 80101fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010200:	6878      	ldr	r0, [r7, #4]
 8010202:	f000 f811 	bl	8010228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	68fa      	ldr	r2, [r7, #12]
 801020c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	2220      	movs	r2, #32
 8010212:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	2200      	movs	r2, #0
 801021a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801021e:	2300      	movs	r3, #0
}
 8010220:	4618      	mov	r0, r3
 8010222:	3710      	adds	r7, #16
 8010224:	46bd      	mov	sp, r7
 8010226:	bd80      	pop	{r7, pc}

08010228 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010228:	b480      	push	{r7}
 801022a:	b085      	sub	sp, #20
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010234:	2b00      	cmp	r3, #0
 8010236:	d108      	bne.n	801024a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	2201      	movs	r2, #1
 801023c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	2201      	movs	r2, #1
 8010244:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010248:	e031      	b.n	80102ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801024a:	2308      	movs	r3, #8
 801024c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801024e:	2308      	movs	r3, #8
 8010250:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	689b      	ldr	r3, [r3, #8]
 8010258:	0e5b      	lsrs	r3, r3, #25
 801025a:	b2db      	uxtb	r3, r3
 801025c:	f003 0307 	and.w	r3, r3, #7
 8010260:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	689b      	ldr	r3, [r3, #8]
 8010268:	0f5b      	lsrs	r3, r3, #29
 801026a:	b2db      	uxtb	r3, r3
 801026c:	f003 0307 	and.w	r3, r3, #7
 8010270:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010272:	7bbb      	ldrb	r3, [r7, #14]
 8010274:	7b3a      	ldrb	r2, [r7, #12]
 8010276:	4911      	ldr	r1, [pc, #68]	@ (80102bc <UARTEx_SetNbDataToProcess+0x94>)
 8010278:	5c8a      	ldrb	r2, [r1, r2]
 801027a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801027e:	7b3a      	ldrb	r2, [r7, #12]
 8010280:	490f      	ldr	r1, [pc, #60]	@ (80102c0 <UARTEx_SetNbDataToProcess+0x98>)
 8010282:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010284:	fb93 f3f2 	sdiv	r3, r3, r2
 8010288:	b29a      	uxth	r2, r3
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010290:	7bfb      	ldrb	r3, [r7, #15]
 8010292:	7b7a      	ldrb	r2, [r7, #13]
 8010294:	4909      	ldr	r1, [pc, #36]	@ (80102bc <UARTEx_SetNbDataToProcess+0x94>)
 8010296:	5c8a      	ldrb	r2, [r1, r2]
 8010298:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801029c:	7b7a      	ldrb	r2, [r7, #13]
 801029e:	4908      	ldr	r1, [pc, #32]	@ (80102c0 <UARTEx_SetNbDataToProcess+0x98>)
 80102a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80102a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80102a6:	b29a      	uxth	r2, r3
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80102ae:	bf00      	nop
 80102b0:	3714      	adds	r7, #20
 80102b2:	46bd      	mov	sp, r7
 80102b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b8:	4770      	bx	lr
 80102ba:	bf00      	nop
 80102bc:	0801d930 	.word	0x0801d930
 80102c0:	0801d938 	.word	0x0801d938

080102c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80102c4:	b480      	push	{r7}
 80102c6:	b085      	sub	sp, #20
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2200      	movs	r2, #0
 80102d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80102d4:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80102d8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	b29a      	uxth	r2, r3
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80102e4:	2300      	movs	r3, #0
}
 80102e6:	4618      	mov	r0, r3
 80102e8:	3714      	adds	r7, #20
 80102ea:	46bd      	mov	sp, r7
 80102ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f0:	4770      	bx	lr

080102f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80102f2:	b480      	push	{r7}
 80102f4:	b085      	sub	sp, #20
 80102f6:	af00      	add	r7, sp, #0
 80102f8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80102fa:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80102fe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8010306:	b29a      	uxth	r2, r3
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	b29b      	uxth	r3, r3
 801030c:	43db      	mvns	r3, r3
 801030e:	b29b      	uxth	r3, r3
 8010310:	4013      	ands	r3, r2
 8010312:	b29a      	uxth	r2, r3
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 801031a:	2300      	movs	r3, #0
}
 801031c:	4618      	mov	r0, r3
 801031e:	3714      	adds	r7, #20
 8010320:	46bd      	mov	sp, r7
 8010322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010326:	4770      	bx	lr

08010328 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8010328:	b480      	push	{r7}
 801032a:	b085      	sub	sp, #20
 801032c:	af00      	add	r7, sp, #0
 801032e:	60f8      	str	r0, [r7, #12]
 8010330:	1d3b      	adds	r3, r7, #4
 8010332:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	2201      	movs	r2, #1
 801033a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	2200      	movs	r2, #0
 8010342:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	2200      	movs	r2, #0
 801034a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	2200      	movs	r2, #0
 8010352:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8010356:	2300      	movs	r3, #0
}
 8010358:	4618      	mov	r0, r3
 801035a:	3714      	adds	r7, #20
 801035c:	46bd      	mov	sp, r7
 801035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010362:	4770      	bx	lr

08010364 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010364:	b480      	push	{r7}
 8010366:	b0a7      	sub	sp, #156	@ 0x9c
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
 801036c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801036e:	2300      	movs	r3, #0
 8010370:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8010374:	687a      	ldr	r2, [r7, #4]
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	781b      	ldrb	r3, [r3, #0]
 801037a:	009b      	lsls	r3, r3, #2
 801037c:	4413      	add	r3, r2
 801037e:	881b      	ldrh	r3, [r3, #0]
 8010380:	b29b      	uxth	r3, r3
 8010382:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8010386:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801038a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 801038e:	683b      	ldr	r3, [r7, #0]
 8010390:	78db      	ldrb	r3, [r3, #3]
 8010392:	2b03      	cmp	r3, #3
 8010394:	d81f      	bhi.n	80103d6 <USB_ActivateEndpoint+0x72>
 8010396:	a201      	add	r2, pc, #4	@ (adr r2, 801039c <USB_ActivateEndpoint+0x38>)
 8010398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801039c:	080103ad 	.word	0x080103ad
 80103a0:	080103c9 	.word	0x080103c9
 80103a4:	080103df 	.word	0x080103df
 80103a8:	080103bb 	.word	0x080103bb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80103ac:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80103b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80103b4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80103b8:	e012      	b.n	80103e0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80103ba:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80103be:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80103c2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80103c6:	e00b      	b.n	80103e0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80103c8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80103cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80103d0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80103d4:	e004      	b.n	80103e0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80103d6:	2301      	movs	r3, #1
 80103d8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 80103dc:	e000      	b.n	80103e0 <USB_ActivateEndpoint+0x7c>
      break;
 80103de:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80103e0:	687a      	ldr	r2, [r7, #4]
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	781b      	ldrb	r3, [r3, #0]
 80103e6:	009b      	lsls	r3, r3, #2
 80103e8:	441a      	add	r2, r3
 80103ea:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80103ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80103f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80103f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80103fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80103fe:	b29b      	uxth	r3, r3
 8010400:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8010402:	687a      	ldr	r2, [r7, #4]
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	781b      	ldrb	r3, [r3, #0]
 8010408:	009b      	lsls	r3, r3, #2
 801040a:	4413      	add	r3, r2
 801040c:	881b      	ldrh	r3, [r3, #0]
 801040e:	b29b      	uxth	r3, r3
 8010410:	b21b      	sxth	r3, r3
 8010412:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801041a:	b21a      	sxth	r2, r3
 801041c:	683b      	ldr	r3, [r7, #0]
 801041e:	781b      	ldrb	r3, [r3, #0]
 8010420:	b21b      	sxth	r3, r3
 8010422:	4313      	orrs	r3, r2
 8010424:	b21b      	sxth	r3, r3
 8010426:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 801042a:	687a      	ldr	r2, [r7, #4]
 801042c:	683b      	ldr	r3, [r7, #0]
 801042e:	781b      	ldrb	r3, [r3, #0]
 8010430:	009b      	lsls	r3, r3, #2
 8010432:	441a      	add	r2, r3
 8010434:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8010438:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801043c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010440:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010444:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010448:	b29b      	uxth	r3, r3
 801044a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 801044c:	683b      	ldr	r3, [r7, #0]
 801044e:	7b1b      	ldrb	r3, [r3, #12]
 8010450:	2b00      	cmp	r3, #0
 8010452:	f040 8180 	bne.w	8010756 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8010456:	683b      	ldr	r3, [r7, #0]
 8010458:	785b      	ldrb	r3, [r3, #1]
 801045a:	2b00      	cmp	r3, #0
 801045c:	f000 8084 	beq.w	8010568 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	61bb      	str	r3, [r7, #24]
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801046a:	b29b      	uxth	r3, r3
 801046c:	461a      	mov	r2, r3
 801046e:	69bb      	ldr	r3, [r7, #24]
 8010470:	4413      	add	r3, r2
 8010472:	61bb      	str	r3, [r7, #24]
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	781b      	ldrb	r3, [r3, #0]
 8010478:	00da      	lsls	r2, r3, #3
 801047a:	69bb      	ldr	r3, [r7, #24]
 801047c:	4413      	add	r3, r2
 801047e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010482:	617b      	str	r3, [r7, #20]
 8010484:	683b      	ldr	r3, [r7, #0]
 8010486:	88db      	ldrh	r3, [r3, #6]
 8010488:	085b      	lsrs	r3, r3, #1
 801048a:	b29b      	uxth	r3, r3
 801048c:	005b      	lsls	r3, r3, #1
 801048e:	b29a      	uxth	r2, r3
 8010490:	697b      	ldr	r3, [r7, #20]
 8010492:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010494:	687a      	ldr	r2, [r7, #4]
 8010496:	683b      	ldr	r3, [r7, #0]
 8010498:	781b      	ldrb	r3, [r3, #0]
 801049a:	009b      	lsls	r3, r3, #2
 801049c:	4413      	add	r3, r2
 801049e:	881b      	ldrh	r3, [r3, #0]
 80104a0:	827b      	strh	r3, [r7, #18]
 80104a2:	8a7b      	ldrh	r3, [r7, #18]
 80104a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d01b      	beq.n	80104e4 <USB_ActivateEndpoint+0x180>
 80104ac:	687a      	ldr	r2, [r7, #4]
 80104ae:	683b      	ldr	r3, [r7, #0]
 80104b0:	781b      	ldrb	r3, [r3, #0]
 80104b2:	009b      	lsls	r3, r3, #2
 80104b4:	4413      	add	r3, r2
 80104b6:	881b      	ldrh	r3, [r3, #0]
 80104b8:	b29b      	uxth	r3, r3
 80104ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80104be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80104c2:	823b      	strh	r3, [r7, #16]
 80104c4:	687a      	ldr	r2, [r7, #4]
 80104c6:	683b      	ldr	r3, [r7, #0]
 80104c8:	781b      	ldrb	r3, [r3, #0]
 80104ca:	009b      	lsls	r3, r3, #2
 80104cc:	441a      	add	r2, r3
 80104ce:	8a3b      	ldrh	r3, [r7, #16]
 80104d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80104d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80104d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80104dc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80104e0:	b29b      	uxth	r3, r3
 80104e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80104e4:	683b      	ldr	r3, [r7, #0]
 80104e6:	78db      	ldrb	r3, [r3, #3]
 80104e8:	2b01      	cmp	r3, #1
 80104ea:	d020      	beq.n	801052e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80104ec:	687a      	ldr	r2, [r7, #4]
 80104ee:	683b      	ldr	r3, [r7, #0]
 80104f0:	781b      	ldrb	r3, [r3, #0]
 80104f2:	009b      	lsls	r3, r3, #2
 80104f4:	4413      	add	r3, r2
 80104f6:	881b      	ldrh	r3, [r3, #0]
 80104f8:	b29b      	uxth	r3, r3
 80104fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80104fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010502:	81bb      	strh	r3, [r7, #12]
 8010504:	89bb      	ldrh	r3, [r7, #12]
 8010506:	f083 0320 	eor.w	r3, r3, #32
 801050a:	81bb      	strh	r3, [r7, #12]
 801050c:	687a      	ldr	r2, [r7, #4]
 801050e:	683b      	ldr	r3, [r7, #0]
 8010510:	781b      	ldrb	r3, [r3, #0]
 8010512:	009b      	lsls	r3, r3, #2
 8010514:	441a      	add	r2, r3
 8010516:	89bb      	ldrh	r3, [r7, #12]
 8010518:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801051c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010520:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010528:	b29b      	uxth	r3, r3
 801052a:	8013      	strh	r3, [r2, #0]
 801052c:	e3f9      	b.n	8010d22 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801052e:	687a      	ldr	r2, [r7, #4]
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	781b      	ldrb	r3, [r3, #0]
 8010534:	009b      	lsls	r3, r3, #2
 8010536:	4413      	add	r3, r2
 8010538:	881b      	ldrh	r3, [r3, #0]
 801053a:	b29b      	uxth	r3, r3
 801053c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010540:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010544:	81fb      	strh	r3, [r7, #14]
 8010546:	687a      	ldr	r2, [r7, #4]
 8010548:	683b      	ldr	r3, [r7, #0]
 801054a:	781b      	ldrb	r3, [r3, #0]
 801054c:	009b      	lsls	r3, r3, #2
 801054e:	441a      	add	r2, r3
 8010550:	89fb      	ldrh	r3, [r7, #14]
 8010552:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010556:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801055a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801055e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010562:	b29b      	uxth	r3, r3
 8010564:	8013      	strh	r3, [r2, #0]
 8010566:	e3dc      	b.n	8010d22 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	633b      	str	r3, [r7, #48]	@ 0x30
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010572:	b29b      	uxth	r3, r3
 8010574:	461a      	mov	r2, r3
 8010576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010578:	4413      	add	r3, r2
 801057a:	633b      	str	r3, [r7, #48]	@ 0x30
 801057c:	683b      	ldr	r3, [r7, #0]
 801057e:	781b      	ldrb	r3, [r3, #0]
 8010580:	00da      	lsls	r2, r3, #3
 8010582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010584:	4413      	add	r3, r2
 8010586:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 801058a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801058c:	683b      	ldr	r3, [r7, #0]
 801058e:	88db      	ldrh	r3, [r3, #6]
 8010590:	085b      	lsrs	r3, r3, #1
 8010592:	b29b      	uxth	r3, r3
 8010594:	005b      	lsls	r3, r3, #1
 8010596:	b29a      	uxth	r2, r3
 8010598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801059a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80105a6:	b29b      	uxth	r3, r3
 80105a8:	461a      	mov	r2, r3
 80105aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105ac:	4413      	add	r3, r2
 80105ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	781b      	ldrb	r3, [r3, #0]
 80105b4:	00da      	lsls	r2, r3, #3
 80105b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105b8:	4413      	add	r3, r2
 80105ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80105be:	627b      	str	r3, [r7, #36]	@ 0x24
 80105c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105c2:	881b      	ldrh	r3, [r3, #0]
 80105c4:	b29b      	uxth	r3, r3
 80105c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80105ca:	b29a      	uxth	r2, r3
 80105cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105ce:	801a      	strh	r2, [r3, #0]
 80105d0:	683b      	ldr	r3, [r7, #0]
 80105d2:	691b      	ldr	r3, [r3, #16]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d10a      	bne.n	80105ee <USB_ActivateEndpoint+0x28a>
 80105d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105da:	881b      	ldrh	r3, [r3, #0]
 80105dc:	b29b      	uxth	r3, r3
 80105de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80105e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80105e6:	b29a      	uxth	r2, r3
 80105e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105ea:	801a      	strh	r2, [r3, #0]
 80105ec:	e041      	b.n	8010672 <USB_ActivateEndpoint+0x30e>
 80105ee:	683b      	ldr	r3, [r7, #0]
 80105f0:	691b      	ldr	r3, [r3, #16]
 80105f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80105f4:	d81c      	bhi.n	8010630 <USB_ActivateEndpoint+0x2cc>
 80105f6:	683b      	ldr	r3, [r7, #0]
 80105f8:	691b      	ldr	r3, [r3, #16]
 80105fa:	085b      	lsrs	r3, r3, #1
 80105fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010600:	683b      	ldr	r3, [r7, #0]
 8010602:	691b      	ldr	r3, [r3, #16]
 8010604:	f003 0301 	and.w	r3, r3, #1
 8010608:	2b00      	cmp	r3, #0
 801060a:	d004      	beq.n	8010616 <USB_ActivateEndpoint+0x2b2>
 801060c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010610:	3301      	adds	r3, #1
 8010612:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010618:	881b      	ldrh	r3, [r3, #0]
 801061a:	b29a      	uxth	r2, r3
 801061c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010620:	b29b      	uxth	r3, r3
 8010622:	029b      	lsls	r3, r3, #10
 8010624:	b29b      	uxth	r3, r3
 8010626:	4313      	orrs	r3, r2
 8010628:	b29a      	uxth	r2, r3
 801062a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801062c:	801a      	strh	r2, [r3, #0]
 801062e:	e020      	b.n	8010672 <USB_ActivateEndpoint+0x30e>
 8010630:	683b      	ldr	r3, [r7, #0]
 8010632:	691b      	ldr	r3, [r3, #16]
 8010634:	095b      	lsrs	r3, r3, #5
 8010636:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801063a:	683b      	ldr	r3, [r7, #0]
 801063c:	691b      	ldr	r3, [r3, #16]
 801063e:	f003 031f 	and.w	r3, r3, #31
 8010642:	2b00      	cmp	r3, #0
 8010644:	d104      	bne.n	8010650 <USB_ActivateEndpoint+0x2ec>
 8010646:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801064a:	3b01      	subs	r3, #1
 801064c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010652:	881b      	ldrh	r3, [r3, #0]
 8010654:	b29a      	uxth	r2, r3
 8010656:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801065a:	b29b      	uxth	r3, r3
 801065c:	029b      	lsls	r3, r3, #10
 801065e:	b29b      	uxth	r3, r3
 8010660:	4313      	orrs	r3, r2
 8010662:	b29b      	uxth	r3, r3
 8010664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801066c:	b29a      	uxth	r2, r3
 801066e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010670:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010672:	687a      	ldr	r2, [r7, #4]
 8010674:	683b      	ldr	r3, [r7, #0]
 8010676:	781b      	ldrb	r3, [r3, #0]
 8010678:	009b      	lsls	r3, r3, #2
 801067a:	4413      	add	r3, r2
 801067c:	881b      	ldrh	r3, [r3, #0]
 801067e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8010680:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010682:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010686:	2b00      	cmp	r3, #0
 8010688:	d01b      	beq.n	80106c2 <USB_ActivateEndpoint+0x35e>
 801068a:	687a      	ldr	r2, [r7, #4]
 801068c:	683b      	ldr	r3, [r7, #0]
 801068e:	781b      	ldrb	r3, [r3, #0]
 8010690:	009b      	lsls	r3, r3, #2
 8010692:	4413      	add	r3, r2
 8010694:	881b      	ldrh	r3, [r3, #0]
 8010696:	b29b      	uxth	r3, r3
 8010698:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801069c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80106a0:	843b      	strh	r3, [r7, #32]
 80106a2:	687a      	ldr	r2, [r7, #4]
 80106a4:	683b      	ldr	r3, [r7, #0]
 80106a6:	781b      	ldrb	r3, [r3, #0]
 80106a8:	009b      	lsls	r3, r3, #2
 80106aa:	441a      	add	r2, r3
 80106ac:	8c3b      	ldrh	r3, [r7, #32]
 80106ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80106b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80106b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80106ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80106be:	b29b      	uxth	r3, r3
 80106c0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80106c2:	683b      	ldr	r3, [r7, #0]
 80106c4:	781b      	ldrb	r3, [r3, #0]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d124      	bne.n	8010714 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80106ca:	687a      	ldr	r2, [r7, #4]
 80106cc:	683b      	ldr	r3, [r7, #0]
 80106ce:	781b      	ldrb	r3, [r3, #0]
 80106d0:	009b      	lsls	r3, r3, #2
 80106d2:	4413      	add	r3, r2
 80106d4:	881b      	ldrh	r3, [r3, #0]
 80106d6:	b29b      	uxth	r3, r3
 80106d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80106dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80106e0:	83bb      	strh	r3, [r7, #28]
 80106e2:	8bbb      	ldrh	r3, [r7, #28]
 80106e4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80106e8:	83bb      	strh	r3, [r7, #28]
 80106ea:	8bbb      	ldrh	r3, [r7, #28]
 80106ec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80106f0:	83bb      	strh	r3, [r7, #28]
 80106f2:	687a      	ldr	r2, [r7, #4]
 80106f4:	683b      	ldr	r3, [r7, #0]
 80106f6:	781b      	ldrb	r3, [r3, #0]
 80106f8:	009b      	lsls	r3, r3, #2
 80106fa:	441a      	add	r2, r3
 80106fc:	8bbb      	ldrh	r3, [r7, #28]
 80106fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010702:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010706:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801070a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801070e:	b29b      	uxth	r3, r3
 8010710:	8013      	strh	r3, [r2, #0]
 8010712:	e306      	b.n	8010d22 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8010714:	687a      	ldr	r2, [r7, #4]
 8010716:	683b      	ldr	r3, [r7, #0]
 8010718:	781b      	ldrb	r3, [r3, #0]
 801071a:	009b      	lsls	r3, r3, #2
 801071c:	4413      	add	r3, r2
 801071e:	881b      	ldrh	r3, [r3, #0]
 8010720:	b29b      	uxth	r3, r3
 8010722:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010726:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801072a:	83fb      	strh	r3, [r7, #30]
 801072c:	8bfb      	ldrh	r3, [r7, #30]
 801072e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8010732:	83fb      	strh	r3, [r7, #30]
 8010734:	687a      	ldr	r2, [r7, #4]
 8010736:	683b      	ldr	r3, [r7, #0]
 8010738:	781b      	ldrb	r3, [r3, #0]
 801073a:	009b      	lsls	r3, r3, #2
 801073c:	441a      	add	r2, r3
 801073e:	8bfb      	ldrh	r3, [r7, #30]
 8010740:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010744:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010748:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801074c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010750:	b29b      	uxth	r3, r3
 8010752:	8013      	strh	r3, [r2, #0]
 8010754:	e2e5      	b.n	8010d22 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	78db      	ldrb	r3, [r3, #3]
 801075a:	2b02      	cmp	r3, #2
 801075c:	d11e      	bne.n	801079c <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801075e:	687a      	ldr	r2, [r7, #4]
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	781b      	ldrb	r3, [r3, #0]
 8010764:	009b      	lsls	r3, r3, #2
 8010766:	4413      	add	r3, r2
 8010768:	881b      	ldrh	r3, [r3, #0]
 801076a:	b29b      	uxth	r3, r3
 801076c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010770:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010774:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8010778:	687a      	ldr	r2, [r7, #4]
 801077a:	683b      	ldr	r3, [r7, #0]
 801077c:	781b      	ldrb	r3, [r3, #0]
 801077e:	009b      	lsls	r3, r3, #2
 8010780:	441a      	add	r2, r3
 8010782:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8010786:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801078a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801078e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8010792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010796:	b29b      	uxth	r3, r3
 8010798:	8013      	strh	r3, [r2, #0]
 801079a:	e01d      	b.n	80107d8 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801079c:	687a      	ldr	r2, [r7, #4]
 801079e:	683b      	ldr	r3, [r7, #0]
 80107a0:	781b      	ldrb	r3, [r3, #0]
 80107a2:	009b      	lsls	r3, r3, #2
 80107a4:	4413      	add	r3, r2
 80107a6:	881b      	ldrh	r3, [r3, #0]
 80107a8:	b29b      	uxth	r3, r3
 80107aa:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80107ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80107b2:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 80107b6:	687a      	ldr	r2, [r7, #4]
 80107b8:	683b      	ldr	r3, [r7, #0]
 80107ba:	781b      	ldrb	r3, [r3, #0]
 80107bc:	009b      	lsls	r3, r3, #2
 80107be:	441a      	add	r2, r3
 80107c0:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80107c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80107c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80107cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80107d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80107d4:	b29b      	uxth	r3, r3
 80107d6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80107e2:	b29b      	uxth	r3, r3
 80107e4:	461a      	mov	r2, r3
 80107e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80107e8:	4413      	add	r3, r2
 80107ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80107ec:	683b      	ldr	r3, [r7, #0]
 80107ee:	781b      	ldrb	r3, [r3, #0]
 80107f0:	00da      	lsls	r2, r3, #3
 80107f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80107f4:	4413      	add	r3, r2
 80107f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80107fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80107fc:	683b      	ldr	r3, [r7, #0]
 80107fe:	891b      	ldrh	r3, [r3, #8]
 8010800:	085b      	lsrs	r3, r3, #1
 8010802:	b29b      	uxth	r3, r3
 8010804:	005b      	lsls	r3, r3, #1
 8010806:	b29a      	uxth	r2, r3
 8010808:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801080a:	801a      	strh	r2, [r3, #0]
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	677b      	str	r3, [r7, #116]	@ 0x74
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010816:	b29b      	uxth	r3, r3
 8010818:	461a      	mov	r2, r3
 801081a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801081c:	4413      	add	r3, r2
 801081e:	677b      	str	r3, [r7, #116]	@ 0x74
 8010820:	683b      	ldr	r3, [r7, #0]
 8010822:	781b      	ldrb	r3, [r3, #0]
 8010824:	00da      	lsls	r2, r3, #3
 8010826:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010828:	4413      	add	r3, r2
 801082a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 801082e:	673b      	str	r3, [r7, #112]	@ 0x70
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	895b      	ldrh	r3, [r3, #10]
 8010834:	085b      	lsrs	r3, r3, #1
 8010836:	b29b      	uxth	r3, r3
 8010838:	005b      	lsls	r3, r3, #1
 801083a:	b29a      	uxth	r2, r3
 801083c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801083e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8010840:	683b      	ldr	r3, [r7, #0]
 8010842:	785b      	ldrb	r3, [r3, #1]
 8010844:	2b00      	cmp	r3, #0
 8010846:	f040 81af 	bne.w	8010ba8 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801084a:	687a      	ldr	r2, [r7, #4]
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	781b      	ldrb	r3, [r3, #0]
 8010850:	009b      	lsls	r3, r3, #2
 8010852:	4413      	add	r3, r2
 8010854:	881b      	ldrh	r3, [r3, #0]
 8010856:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 801085a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 801085e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010862:	2b00      	cmp	r3, #0
 8010864:	d01d      	beq.n	80108a2 <USB_ActivateEndpoint+0x53e>
 8010866:	687a      	ldr	r2, [r7, #4]
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	781b      	ldrb	r3, [r3, #0]
 801086c:	009b      	lsls	r3, r3, #2
 801086e:	4413      	add	r3, r2
 8010870:	881b      	ldrh	r3, [r3, #0]
 8010872:	b29b      	uxth	r3, r3
 8010874:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010878:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801087c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8010880:	687a      	ldr	r2, [r7, #4]
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	781b      	ldrb	r3, [r3, #0]
 8010886:	009b      	lsls	r3, r3, #2
 8010888:	441a      	add	r2, r3
 801088a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801088e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010892:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010896:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801089a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801089e:	b29b      	uxth	r3, r3
 80108a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80108a2:	687a      	ldr	r2, [r7, #4]
 80108a4:	683b      	ldr	r3, [r7, #0]
 80108a6:	781b      	ldrb	r3, [r3, #0]
 80108a8:	009b      	lsls	r3, r3, #2
 80108aa:	4413      	add	r3, r2
 80108ac:	881b      	ldrh	r3, [r3, #0]
 80108ae:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80108b2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80108b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d01d      	beq.n	80108fa <USB_ActivateEndpoint+0x596>
 80108be:	687a      	ldr	r2, [r7, #4]
 80108c0:	683b      	ldr	r3, [r7, #0]
 80108c2:	781b      	ldrb	r3, [r3, #0]
 80108c4:	009b      	lsls	r3, r3, #2
 80108c6:	4413      	add	r3, r2
 80108c8:	881b      	ldrh	r3, [r3, #0]
 80108ca:	b29b      	uxth	r3, r3
 80108cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80108d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80108d4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80108d8:	687a      	ldr	r2, [r7, #4]
 80108da:	683b      	ldr	r3, [r7, #0]
 80108dc:	781b      	ldrb	r3, [r3, #0]
 80108de:	009b      	lsls	r3, r3, #2
 80108e0:	441a      	add	r2, r3
 80108e2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80108e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80108ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80108ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80108f2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80108f6:	b29b      	uxth	r3, r3
 80108f8:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80108fa:	683b      	ldr	r3, [r7, #0]
 80108fc:	785b      	ldrb	r3, [r3, #1]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d16b      	bne.n	80109da <USB_ActivateEndpoint+0x676>
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801090c:	b29b      	uxth	r3, r3
 801090e:	461a      	mov	r2, r3
 8010910:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010912:	4413      	add	r3, r2
 8010914:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010916:	683b      	ldr	r3, [r7, #0]
 8010918:	781b      	ldrb	r3, [r3, #0]
 801091a:	00da      	lsls	r2, r3, #3
 801091c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801091e:	4413      	add	r3, r2
 8010920:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010924:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010926:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010928:	881b      	ldrh	r3, [r3, #0]
 801092a:	b29b      	uxth	r3, r3
 801092c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010930:	b29a      	uxth	r2, r3
 8010932:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010934:	801a      	strh	r2, [r3, #0]
 8010936:	683b      	ldr	r3, [r7, #0]
 8010938:	691b      	ldr	r3, [r3, #16]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d10a      	bne.n	8010954 <USB_ActivateEndpoint+0x5f0>
 801093e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010940:	881b      	ldrh	r3, [r3, #0]
 8010942:	b29b      	uxth	r3, r3
 8010944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801094c:	b29a      	uxth	r2, r3
 801094e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010950:	801a      	strh	r2, [r3, #0]
 8010952:	e05d      	b.n	8010a10 <USB_ActivateEndpoint+0x6ac>
 8010954:	683b      	ldr	r3, [r7, #0]
 8010956:	691b      	ldr	r3, [r3, #16]
 8010958:	2b3e      	cmp	r3, #62	@ 0x3e
 801095a:	d81c      	bhi.n	8010996 <USB_ActivateEndpoint+0x632>
 801095c:	683b      	ldr	r3, [r7, #0]
 801095e:	691b      	ldr	r3, [r3, #16]
 8010960:	085b      	lsrs	r3, r3, #1
 8010962:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8010966:	683b      	ldr	r3, [r7, #0]
 8010968:	691b      	ldr	r3, [r3, #16]
 801096a:	f003 0301 	and.w	r3, r3, #1
 801096e:	2b00      	cmp	r3, #0
 8010970:	d004      	beq.n	801097c <USB_ActivateEndpoint+0x618>
 8010972:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010976:	3301      	adds	r3, #1
 8010978:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801097c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801097e:	881b      	ldrh	r3, [r3, #0]
 8010980:	b29a      	uxth	r2, r3
 8010982:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010986:	b29b      	uxth	r3, r3
 8010988:	029b      	lsls	r3, r3, #10
 801098a:	b29b      	uxth	r3, r3
 801098c:	4313      	orrs	r3, r2
 801098e:	b29a      	uxth	r2, r3
 8010990:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010992:	801a      	strh	r2, [r3, #0]
 8010994:	e03c      	b.n	8010a10 <USB_ActivateEndpoint+0x6ac>
 8010996:	683b      	ldr	r3, [r7, #0]
 8010998:	691b      	ldr	r3, [r3, #16]
 801099a:	095b      	lsrs	r3, r3, #5
 801099c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80109a0:	683b      	ldr	r3, [r7, #0]
 80109a2:	691b      	ldr	r3, [r3, #16]
 80109a4:	f003 031f 	and.w	r3, r3, #31
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d104      	bne.n	80109b6 <USB_ActivateEndpoint+0x652>
 80109ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80109b0:	3b01      	subs	r3, #1
 80109b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80109b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80109b8:	881b      	ldrh	r3, [r3, #0]
 80109ba:	b29a      	uxth	r2, r3
 80109bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80109c0:	b29b      	uxth	r3, r3
 80109c2:	029b      	lsls	r3, r3, #10
 80109c4:	b29b      	uxth	r3, r3
 80109c6:	4313      	orrs	r3, r2
 80109c8:	b29b      	uxth	r3, r3
 80109ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80109ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80109d2:	b29a      	uxth	r2, r3
 80109d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80109d6:	801a      	strh	r2, [r3, #0]
 80109d8:	e01a      	b.n	8010a10 <USB_ActivateEndpoint+0x6ac>
 80109da:	683b      	ldr	r3, [r7, #0]
 80109dc:	785b      	ldrb	r3, [r3, #1]
 80109de:	2b01      	cmp	r3, #1
 80109e0:	d116      	bne.n	8010a10 <USB_ActivateEndpoint+0x6ac>
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80109ec:	b29b      	uxth	r3, r3
 80109ee:	461a      	mov	r2, r3
 80109f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109f2:	4413      	add	r3, r2
 80109f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	781b      	ldrb	r3, [r3, #0]
 80109fa:	00da      	lsls	r2, r3, #3
 80109fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109fe:	4413      	add	r3, r2
 8010a00:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010a04:	653b      	str	r3, [r7, #80]	@ 0x50
 8010a06:	683b      	ldr	r3, [r7, #0]
 8010a08:	691b      	ldr	r3, [r3, #16]
 8010a0a:	b29a      	uxth	r2, r3
 8010a0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010a0e:	801a      	strh	r2, [r3, #0]
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	647b      	str	r3, [r7, #68]	@ 0x44
 8010a14:	683b      	ldr	r3, [r7, #0]
 8010a16:	785b      	ldrb	r3, [r3, #1]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d16b      	bne.n	8010af4 <USB_ActivateEndpoint+0x790>
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010a26:	b29b      	uxth	r3, r3
 8010a28:	461a      	mov	r2, r3
 8010a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a2c:	4413      	add	r3, r2
 8010a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010a30:	683b      	ldr	r3, [r7, #0]
 8010a32:	781b      	ldrb	r3, [r3, #0]
 8010a34:	00da      	lsls	r2, r3, #3
 8010a36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a38:	4413      	add	r3, r2
 8010a3a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a42:	881b      	ldrh	r3, [r3, #0]
 8010a44:	b29b      	uxth	r3, r3
 8010a46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010a4a:	b29a      	uxth	r2, r3
 8010a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a4e:	801a      	strh	r2, [r3, #0]
 8010a50:	683b      	ldr	r3, [r7, #0]
 8010a52:	691b      	ldr	r3, [r3, #16]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d10a      	bne.n	8010a6e <USB_ActivateEndpoint+0x70a>
 8010a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a5a:	881b      	ldrh	r3, [r3, #0]
 8010a5c:	b29b      	uxth	r3, r3
 8010a5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010a62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010a66:	b29a      	uxth	r2, r3
 8010a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a6a:	801a      	strh	r2, [r3, #0]
 8010a6c:	e05b      	b.n	8010b26 <USB_ActivateEndpoint+0x7c2>
 8010a6e:	683b      	ldr	r3, [r7, #0]
 8010a70:	691b      	ldr	r3, [r3, #16]
 8010a72:	2b3e      	cmp	r3, #62	@ 0x3e
 8010a74:	d81c      	bhi.n	8010ab0 <USB_ActivateEndpoint+0x74c>
 8010a76:	683b      	ldr	r3, [r7, #0]
 8010a78:	691b      	ldr	r3, [r3, #16]
 8010a7a:	085b      	lsrs	r3, r3, #1
 8010a7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010a80:	683b      	ldr	r3, [r7, #0]
 8010a82:	691b      	ldr	r3, [r3, #16]
 8010a84:	f003 0301 	and.w	r3, r3, #1
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d004      	beq.n	8010a96 <USB_ActivateEndpoint+0x732>
 8010a8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010a90:	3301      	adds	r3, #1
 8010a92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a98:	881b      	ldrh	r3, [r3, #0]
 8010a9a:	b29a      	uxth	r2, r3
 8010a9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010aa0:	b29b      	uxth	r3, r3
 8010aa2:	029b      	lsls	r3, r3, #10
 8010aa4:	b29b      	uxth	r3, r3
 8010aa6:	4313      	orrs	r3, r2
 8010aa8:	b29a      	uxth	r2, r3
 8010aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010aac:	801a      	strh	r2, [r3, #0]
 8010aae:	e03a      	b.n	8010b26 <USB_ActivateEndpoint+0x7c2>
 8010ab0:	683b      	ldr	r3, [r7, #0]
 8010ab2:	691b      	ldr	r3, [r3, #16]
 8010ab4:	095b      	lsrs	r3, r3, #5
 8010ab6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010aba:	683b      	ldr	r3, [r7, #0]
 8010abc:	691b      	ldr	r3, [r3, #16]
 8010abe:	f003 031f 	and.w	r3, r3, #31
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d104      	bne.n	8010ad0 <USB_ActivateEndpoint+0x76c>
 8010ac6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010aca:	3b01      	subs	r3, #1
 8010acc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ad2:	881b      	ldrh	r3, [r3, #0]
 8010ad4:	b29a      	uxth	r2, r3
 8010ad6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010ada:	b29b      	uxth	r3, r3
 8010adc:	029b      	lsls	r3, r3, #10
 8010ade:	b29b      	uxth	r3, r3
 8010ae0:	4313      	orrs	r3, r2
 8010ae2:	b29b      	uxth	r3, r3
 8010ae4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010ae8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010aec:	b29a      	uxth	r2, r3
 8010aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010af0:	801a      	strh	r2, [r3, #0]
 8010af2:	e018      	b.n	8010b26 <USB_ActivateEndpoint+0x7c2>
 8010af4:	683b      	ldr	r3, [r7, #0]
 8010af6:	785b      	ldrb	r3, [r3, #1]
 8010af8:	2b01      	cmp	r3, #1
 8010afa:	d114      	bne.n	8010b26 <USB_ActivateEndpoint+0x7c2>
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010b02:	b29b      	uxth	r3, r3
 8010b04:	461a      	mov	r2, r3
 8010b06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b08:	4413      	add	r3, r2
 8010b0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8010b0c:	683b      	ldr	r3, [r7, #0]
 8010b0e:	781b      	ldrb	r3, [r3, #0]
 8010b10:	00da      	lsls	r2, r3, #3
 8010b12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b14:	4413      	add	r3, r2
 8010b16:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010b1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8010b1c:	683b      	ldr	r3, [r7, #0]
 8010b1e:	691b      	ldr	r3, [r3, #16]
 8010b20:	b29a      	uxth	r2, r3
 8010b22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b24:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010b26:	687a      	ldr	r2, [r7, #4]
 8010b28:	683b      	ldr	r3, [r7, #0]
 8010b2a:	781b      	ldrb	r3, [r3, #0]
 8010b2c:	009b      	lsls	r3, r3, #2
 8010b2e:	4413      	add	r3, r2
 8010b30:	881b      	ldrh	r3, [r3, #0]
 8010b32:	b29b      	uxth	r3, r3
 8010b34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010b38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010b3c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8010b3e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010b40:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8010b44:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8010b46:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010b48:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8010b4c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8010b4e:	687a      	ldr	r2, [r7, #4]
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	781b      	ldrb	r3, [r3, #0]
 8010b54:	009b      	lsls	r3, r3, #2
 8010b56:	441a      	add	r2, r3
 8010b58:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010b5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010b5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010b62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010b66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010b6a:	b29b      	uxth	r3, r3
 8010b6c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010b6e:	687a      	ldr	r2, [r7, #4]
 8010b70:	683b      	ldr	r3, [r7, #0]
 8010b72:	781b      	ldrb	r3, [r3, #0]
 8010b74:	009b      	lsls	r3, r3, #2
 8010b76:	4413      	add	r3, r2
 8010b78:	881b      	ldrh	r3, [r3, #0]
 8010b7a:	b29b      	uxth	r3, r3
 8010b7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010b80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010b84:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8010b86:	687a      	ldr	r2, [r7, #4]
 8010b88:	683b      	ldr	r3, [r7, #0]
 8010b8a:	781b      	ldrb	r3, [r3, #0]
 8010b8c:	009b      	lsls	r3, r3, #2
 8010b8e:	441a      	add	r2, r3
 8010b90:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8010b92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010b96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010b9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010b9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010ba2:	b29b      	uxth	r3, r3
 8010ba4:	8013      	strh	r3, [r2, #0]
 8010ba6:	e0bc      	b.n	8010d22 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010ba8:	687a      	ldr	r2, [r7, #4]
 8010baa:	683b      	ldr	r3, [r7, #0]
 8010bac:	781b      	ldrb	r3, [r3, #0]
 8010bae:	009b      	lsls	r3, r3, #2
 8010bb0:	4413      	add	r3, r2
 8010bb2:	881b      	ldrh	r3, [r3, #0]
 8010bb4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8010bb8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8010bbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d01d      	beq.n	8010c00 <USB_ActivateEndpoint+0x89c>
 8010bc4:	687a      	ldr	r2, [r7, #4]
 8010bc6:	683b      	ldr	r3, [r7, #0]
 8010bc8:	781b      	ldrb	r3, [r3, #0]
 8010bca:	009b      	lsls	r3, r3, #2
 8010bcc:	4413      	add	r3, r2
 8010bce:	881b      	ldrh	r3, [r3, #0]
 8010bd0:	b29b      	uxth	r3, r3
 8010bd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010bd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010bda:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8010bde:	687a      	ldr	r2, [r7, #4]
 8010be0:	683b      	ldr	r3, [r7, #0]
 8010be2:	781b      	ldrb	r3, [r3, #0]
 8010be4:	009b      	lsls	r3, r3, #2
 8010be6:	441a      	add	r2, r3
 8010be8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8010bec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010bf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010bf4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010bf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010bfc:	b29b      	uxth	r3, r3
 8010bfe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010c00:	687a      	ldr	r2, [r7, #4]
 8010c02:	683b      	ldr	r3, [r7, #0]
 8010c04:	781b      	ldrb	r3, [r3, #0]
 8010c06:	009b      	lsls	r3, r3, #2
 8010c08:	4413      	add	r3, r2
 8010c0a:	881b      	ldrh	r3, [r3, #0]
 8010c0c:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8010c10:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8010c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d01d      	beq.n	8010c58 <USB_ActivateEndpoint+0x8f4>
 8010c1c:	687a      	ldr	r2, [r7, #4]
 8010c1e:	683b      	ldr	r3, [r7, #0]
 8010c20:	781b      	ldrb	r3, [r3, #0]
 8010c22:	009b      	lsls	r3, r3, #2
 8010c24:	4413      	add	r3, r2
 8010c26:	881b      	ldrh	r3, [r3, #0]
 8010c28:	b29b      	uxth	r3, r3
 8010c2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010c32:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8010c36:	687a      	ldr	r2, [r7, #4]
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	781b      	ldrb	r3, [r3, #0]
 8010c3c:	009b      	lsls	r3, r3, #2
 8010c3e:	441a      	add	r2, r3
 8010c40:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8010c44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010c48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010c4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010c50:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8010c54:	b29b      	uxth	r3, r3
 8010c56:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010c58:	683b      	ldr	r3, [r7, #0]
 8010c5a:	78db      	ldrb	r3, [r3, #3]
 8010c5c:	2b01      	cmp	r3, #1
 8010c5e:	d024      	beq.n	8010caa <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010c60:	687a      	ldr	r2, [r7, #4]
 8010c62:	683b      	ldr	r3, [r7, #0]
 8010c64:	781b      	ldrb	r3, [r3, #0]
 8010c66:	009b      	lsls	r3, r3, #2
 8010c68:	4413      	add	r3, r2
 8010c6a:	881b      	ldrh	r3, [r3, #0]
 8010c6c:	b29b      	uxth	r3, r3
 8010c6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010c72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010c76:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8010c7a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8010c7e:	f083 0320 	eor.w	r3, r3, #32
 8010c82:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8010c86:	687a      	ldr	r2, [r7, #4]
 8010c88:	683b      	ldr	r3, [r7, #0]
 8010c8a:	781b      	ldrb	r3, [r3, #0]
 8010c8c:	009b      	lsls	r3, r3, #2
 8010c8e:	441a      	add	r2, r3
 8010c90:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8010c94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010c98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010c9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010ca0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010ca4:	b29b      	uxth	r3, r3
 8010ca6:	8013      	strh	r3, [r2, #0]
 8010ca8:	e01d      	b.n	8010ce6 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010caa:	687a      	ldr	r2, [r7, #4]
 8010cac:	683b      	ldr	r3, [r7, #0]
 8010cae:	781b      	ldrb	r3, [r3, #0]
 8010cb0:	009b      	lsls	r3, r3, #2
 8010cb2:	4413      	add	r3, r2
 8010cb4:	881b      	ldrh	r3, [r3, #0]
 8010cb6:	b29b      	uxth	r3, r3
 8010cb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010cbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010cc0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8010cc4:	687a      	ldr	r2, [r7, #4]
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	781b      	ldrb	r3, [r3, #0]
 8010cca:	009b      	lsls	r3, r3, #2
 8010ccc:	441a      	add	r2, r3
 8010cce:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8010cd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010cd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010cda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010cde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010ce2:	b29b      	uxth	r3, r3
 8010ce4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010ce6:	687a      	ldr	r2, [r7, #4]
 8010ce8:	683b      	ldr	r3, [r7, #0]
 8010cea:	781b      	ldrb	r3, [r3, #0]
 8010cec:	009b      	lsls	r3, r3, #2
 8010cee:	4413      	add	r3, r2
 8010cf0:	881b      	ldrh	r3, [r3, #0]
 8010cf2:	b29b      	uxth	r3, r3
 8010cf4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010cf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010cfc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8010d00:	687a      	ldr	r2, [r7, #4]
 8010d02:	683b      	ldr	r3, [r7, #0]
 8010d04:	781b      	ldrb	r3, [r3, #0]
 8010d06:	009b      	lsls	r3, r3, #2
 8010d08:	441a      	add	r2, r3
 8010d0a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8010d0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010d12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010d16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010d1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010d1e:	b29b      	uxth	r3, r3
 8010d20:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8010d22:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8010d26:	4618      	mov	r0, r3
 8010d28:	379c      	adds	r7, #156	@ 0x9c
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d30:	4770      	bx	lr
 8010d32:	bf00      	nop

08010d34 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b0ac      	sub	sp, #176	@ 0xb0
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
 8010d3c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010d3e:	683b      	ldr	r3, [r7, #0]
 8010d40:	785b      	ldrb	r3, [r3, #1]
 8010d42:	2b01      	cmp	r3, #1
 8010d44:	f040 84ca 	bne.w	80116dc <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	699a      	ldr	r2, [r3, #24]
 8010d4c:	683b      	ldr	r3, [r7, #0]
 8010d4e:	691b      	ldr	r3, [r3, #16]
 8010d50:	429a      	cmp	r2, r3
 8010d52:	d904      	bls.n	8010d5e <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8010d54:	683b      	ldr	r3, [r7, #0]
 8010d56:	691b      	ldr	r3, [r3, #16]
 8010d58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010d5c:	e003      	b.n	8010d66 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	699b      	ldr	r3, [r3, #24]
 8010d62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8010d66:	683b      	ldr	r3, [r7, #0]
 8010d68:	7b1b      	ldrb	r3, [r3, #12]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d122      	bne.n	8010db4 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8010d6e:	683b      	ldr	r3, [r7, #0]
 8010d70:	6959      	ldr	r1, [r3, #20]
 8010d72:	683b      	ldr	r3, [r7, #0]
 8010d74:	88da      	ldrh	r2, [r3, #6]
 8010d76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010d7a:	b29b      	uxth	r3, r3
 8010d7c:	6878      	ldr	r0, [r7, #4]
 8010d7e:	f000 fed2 	bl	8011b26 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	613b      	str	r3, [r7, #16]
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010d8c:	b29b      	uxth	r3, r3
 8010d8e:	461a      	mov	r2, r3
 8010d90:	693b      	ldr	r3, [r7, #16]
 8010d92:	4413      	add	r3, r2
 8010d94:	613b      	str	r3, [r7, #16]
 8010d96:	683b      	ldr	r3, [r7, #0]
 8010d98:	781b      	ldrb	r3, [r3, #0]
 8010d9a:	00da      	lsls	r2, r3, #3
 8010d9c:	693b      	ldr	r3, [r7, #16]
 8010d9e:	4413      	add	r3, r2
 8010da0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010da4:	60fb      	str	r3, [r7, #12]
 8010da6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010daa:	b29a      	uxth	r2, r3
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	801a      	strh	r2, [r3, #0]
 8010db0:	f000 bc6f 	b.w	8011692 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8010db4:	683b      	ldr	r3, [r7, #0]
 8010db6:	78db      	ldrb	r3, [r3, #3]
 8010db8:	2b02      	cmp	r3, #2
 8010dba:	f040 831e 	bne.w	80113fa <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8010dbe:	683b      	ldr	r3, [r7, #0]
 8010dc0:	6a1a      	ldr	r2, [r3, #32]
 8010dc2:	683b      	ldr	r3, [r7, #0]
 8010dc4:	691b      	ldr	r3, [r3, #16]
 8010dc6:	429a      	cmp	r2, r3
 8010dc8:	f240 82cf 	bls.w	801136a <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8010dcc:	687a      	ldr	r2, [r7, #4]
 8010dce:	683b      	ldr	r3, [r7, #0]
 8010dd0:	781b      	ldrb	r3, [r3, #0]
 8010dd2:	009b      	lsls	r3, r3, #2
 8010dd4:	4413      	add	r3, r2
 8010dd6:	881b      	ldrh	r3, [r3, #0]
 8010dd8:	b29b      	uxth	r3, r3
 8010dda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010de2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8010de6:	687a      	ldr	r2, [r7, #4]
 8010de8:	683b      	ldr	r3, [r7, #0]
 8010dea:	781b      	ldrb	r3, [r3, #0]
 8010dec:	009b      	lsls	r3, r3, #2
 8010dee:	441a      	add	r2, r3
 8010df0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8010df4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010df8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010dfc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8010e00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e04:	b29b      	uxth	r3, r3
 8010e06:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8010e08:	683b      	ldr	r3, [r7, #0]
 8010e0a:	6a1a      	ldr	r2, [r3, #32]
 8010e0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010e10:	1ad2      	subs	r2, r2, r3
 8010e12:	683b      	ldr	r3, [r7, #0]
 8010e14:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8010e16:	687a      	ldr	r2, [r7, #4]
 8010e18:	683b      	ldr	r3, [r7, #0]
 8010e1a:	781b      	ldrb	r3, [r3, #0]
 8010e1c:	009b      	lsls	r3, r3, #2
 8010e1e:	4413      	add	r3, r2
 8010e20:	881b      	ldrh	r3, [r3, #0]
 8010e22:	b29b      	uxth	r3, r3
 8010e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	f000 814f 	beq.w	80110cc <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	633b      	str	r3, [r7, #48]	@ 0x30
 8010e32:	683b      	ldr	r3, [r7, #0]
 8010e34:	785b      	ldrb	r3, [r3, #1]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d16b      	bne.n	8010f12 <USB_EPStartXfer+0x1de>
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010e44:	b29b      	uxth	r3, r3
 8010e46:	461a      	mov	r2, r3
 8010e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e4a:	4413      	add	r3, r2
 8010e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010e4e:	683b      	ldr	r3, [r7, #0]
 8010e50:	781b      	ldrb	r3, [r3, #0]
 8010e52:	00da      	lsls	r2, r3, #3
 8010e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e56:	4413      	add	r3, r2
 8010e58:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010e5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8010e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e60:	881b      	ldrh	r3, [r3, #0]
 8010e62:	b29b      	uxth	r3, r3
 8010e64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010e68:	b29a      	uxth	r2, r3
 8010e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e6c:	801a      	strh	r2, [r3, #0]
 8010e6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d10a      	bne.n	8010e8c <USB_EPStartXfer+0x158>
 8010e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e78:	881b      	ldrh	r3, [r3, #0]
 8010e7a:	b29b      	uxth	r3, r3
 8010e7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010e80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010e84:	b29a      	uxth	r2, r3
 8010e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e88:	801a      	strh	r2, [r3, #0]
 8010e8a:	e05b      	b.n	8010f44 <USB_EPStartXfer+0x210>
 8010e8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010e90:	2b3e      	cmp	r3, #62	@ 0x3e
 8010e92:	d81c      	bhi.n	8010ece <USB_EPStartXfer+0x19a>
 8010e94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010e98:	085b      	lsrs	r3, r3, #1
 8010e9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010e9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010ea2:	f003 0301 	and.w	r3, r3, #1
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d004      	beq.n	8010eb4 <USB_EPStartXfer+0x180>
 8010eaa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010eae:	3301      	adds	r3, #1
 8010eb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010eb6:	881b      	ldrh	r3, [r3, #0]
 8010eb8:	b29a      	uxth	r2, r3
 8010eba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010ebe:	b29b      	uxth	r3, r3
 8010ec0:	029b      	lsls	r3, r3, #10
 8010ec2:	b29b      	uxth	r3, r3
 8010ec4:	4313      	orrs	r3, r2
 8010ec6:	b29a      	uxth	r2, r3
 8010ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010eca:	801a      	strh	r2, [r3, #0]
 8010ecc:	e03a      	b.n	8010f44 <USB_EPStartXfer+0x210>
 8010ece:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010ed2:	095b      	lsrs	r3, r3, #5
 8010ed4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010ed8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010edc:	f003 031f 	and.w	r3, r3, #31
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d104      	bne.n	8010eee <USB_EPStartXfer+0x1ba>
 8010ee4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010ee8:	3b01      	subs	r3, #1
 8010eea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ef0:	881b      	ldrh	r3, [r3, #0]
 8010ef2:	b29a      	uxth	r2, r3
 8010ef4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010ef8:	b29b      	uxth	r3, r3
 8010efa:	029b      	lsls	r3, r3, #10
 8010efc:	b29b      	uxth	r3, r3
 8010efe:	4313      	orrs	r3, r2
 8010f00:	b29b      	uxth	r3, r3
 8010f02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010f06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010f0a:	b29a      	uxth	r2, r3
 8010f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f0e:	801a      	strh	r2, [r3, #0]
 8010f10:	e018      	b.n	8010f44 <USB_EPStartXfer+0x210>
 8010f12:	683b      	ldr	r3, [r7, #0]
 8010f14:	785b      	ldrb	r3, [r3, #1]
 8010f16:	2b01      	cmp	r3, #1
 8010f18:	d114      	bne.n	8010f44 <USB_EPStartXfer+0x210>
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010f20:	b29b      	uxth	r3, r3
 8010f22:	461a      	mov	r2, r3
 8010f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f26:	4413      	add	r3, r2
 8010f28:	633b      	str	r3, [r7, #48]	@ 0x30
 8010f2a:	683b      	ldr	r3, [r7, #0]
 8010f2c:	781b      	ldrb	r3, [r3, #0]
 8010f2e:	00da      	lsls	r2, r3, #3
 8010f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f32:	4413      	add	r3, r2
 8010f34:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010f3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010f3e:	b29a      	uxth	r2, r3
 8010f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f42:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8010f44:	683b      	ldr	r3, [r7, #0]
 8010f46:	895b      	ldrh	r3, [r3, #10]
 8010f48:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010f4c:	683b      	ldr	r3, [r7, #0]
 8010f4e:	6959      	ldr	r1, [r3, #20]
 8010f50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010f54:	b29b      	uxth	r3, r3
 8010f56:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8010f5a:	6878      	ldr	r0, [r7, #4]
 8010f5c:	f000 fde3 	bl	8011b26 <USB_WritePMA>
            ep->xfer_buff += len;
 8010f60:	683b      	ldr	r3, [r7, #0]
 8010f62:	695a      	ldr	r2, [r3, #20]
 8010f64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010f68:	441a      	add	r2, r3
 8010f6a:	683b      	ldr	r3, [r7, #0]
 8010f6c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8010f6e:	683b      	ldr	r3, [r7, #0]
 8010f70:	6a1a      	ldr	r2, [r3, #32]
 8010f72:	683b      	ldr	r3, [r7, #0]
 8010f74:	691b      	ldr	r3, [r3, #16]
 8010f76:	429a      	cmp	r2, r3
 8010f78:	d907      	bls.n	8010f8a <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8010f7a:	683b      	ldr	r3, [r7, #0]
 8010f7c:	6a1a      	ldr	r2, [r3, #32]
 8010f7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010f82:	1ad2      	subs	r2, r2, r3
 8010f84:	683b      	ldr	r3, [r7, #0]
 8010f86:	621a      	str	r2, [r3, #32]
 8010f88:	e006      	b.n	8010f98 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8010f8a:	683b      	ldr	r3, [r7, #0]
 8010f8c:	6a1b      	ldr	r3, [r3, #32]
 8010f8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8010f92:	683b      	ldr	r3, [r7, #0]
 8010f94:	2200      	movs	r2, #0
 8010f96:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010f98:	683b      	ldr	r3, [r7, #0]
 8010f9a:	785b      	ldrb	r3, [r3, #1]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d16b      	bne.n	8011078 <USB_EPStartXfer+0x344>
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	61bb      	str	r3, [r7, #24]
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010faa:	b29b      	uxth	r3, r3
 8010fac:	461a      	mov	r2, r3
 8010fae:	69bb      	ldr	r3, [r7, #24]
 8010fb0:	4413      	add	r3, r2
 8010fb2:	61bb      	str	r3, [r7, #24]
 8010fb4:	683b      	ldr	r3, [r7, #0]
 8010fb6:	781b      	ldrb	r3, [r3, #0]
 8010fb8:	00da      	lsls	r2, r3, #3
 8010fba:	69bb      	ldr	r3, [r7, #24]
 8010fbc:	4413      	add	r3, r2
 8010fbe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010fc2:	617b      	str	r3, [r7, #20]
 8010fc4:	697b      	ldr	r3, [r7, #20]
 8010fc6:	881b      	ldrh	r3, [r3, #0]
 8010fc8:	b29b      	uxth	r3, r3
 8010fca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010fce:	b29a      	uxth	r2, r3
 8010fd0:	697b      	ldr	r3, [r7, #20]
 8010fd2:	801a      	strh	r2, [r3, #0]
 8010fd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d10a      	bne.n	8010ff2 <USB_EPStartXfer+0x2be>
 8010fdc:	697b      	ldr	r3, [r7, #20]
 8010fde:	881b      	ldrh	r3, [r3, #0]
 8010fe0:	b29b      	uxth	r3, r3
 8010fe2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010fe6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010fea:	b29a      	uxth	r2, r3
 8010fec:	697b      	ldr	r3, [r7, #20]
 8010fee:	801a      	strh	r2, [r3, #0]
 8010ff0:	e05d      	b.n	80110ae <USB_EPStartXfer+0x37a>
 8010ff2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010ff6:	2b3e      	cmp	r3, #62	@ 0x3e
 8010ff8:	d81c      	bhi.n	8011034 <USB_EPStartXfer+0x300>
 8010ffa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010ffe:	085b      	lsrs	r3, r3, #1
 8011000:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011004:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011008:	f003 0301 	and.w	r3, r3, #1
 801100c:	2b00      	cmp	r3, #0
 801100e:	d004      	beq.n	801101a <USB_EPStartXfer+0x2e6>
 8011010:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011014:	3301      	adds	r3, #1
 8011016:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801101a:	697b      	ldr	r3, [r7, #20]
 801101c:	881b      	ldrh	r3, [r3, #0]
 801101e:	b29a      	uxth	r2, r3
 8011020:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011024:	b29b      	uxth	r3, r3
 8011026:	029b      	lsls	r3, r3, #10
 8011028:	b29b      	uxth	r3, r3
 801102a:	4313      	orrs	r3, r2
 801102c:	b29a      	uxth	r2, r3
 801102e:	697b      	ldr	r3, [r7, #20]
 8011030:	801a      	strh	r2, [r3, #0]
 8011032:	e03c      	b.n	80110ae <USB_EPStartXfer+0x37a>
 8011034:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011038:	095b      	lsrs	r3, r3, #5
 801103a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801103e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011042:	f003 031f 	and.w	r3, r3, #31
 8011046:	2b00      	cmp	r3, #0
 8011048:	d104      	bne.n	8011054 <USB_EPStartXfer+0x320>
 801104a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801104e:	3b01      	subs	r3, #1
 8011050:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011054:	697b      	ldr	r3, [r7, #20]
 8011056:	881b      	ldrh	r3, [r3, #0]
 8011058:	b29a      	uxth	r2, r3
 801105a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801105e:	b29b      	uxth	r3, r3
 8011060:	029b      	lsls	r3, r3, #10
 8011062:	b29b      	uxth	r3, r3
 8011064:	4313      	orrs	r3, r2
 8011066:	b29b      	uxth	r3, r3
 8011068:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801106c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011070:	b29a      	uxth	r2, r3
 8011072:	697b      	ldr	r3, [r7, #20]
 8011074:	801a      	strh	r2, [r3, #0]
 8011076:	e01a      	b.n	80110ae <USB_EPStartXfer+0x37a>
 8011078:	683b      	ldr	r3, [r7, #0]
 801107a:	785b      	ldrb	r3, [r3, #1]
 801107c:	2b01      	cmp	r3, #1
 801107e:	d116      	bne.n	80110ae <USB_EPStartXfer+0x37a>
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	623b      	str	r3, [r7, #32]
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801108a:	b29b      	uxth	r3, r3
 801108c:	461a      	mov	r2, r3
 801108e:	6a3b      	ldr	r3, [r7, #32]
 8011090:	4413      	add	r3, r2
 8011092:	623b      	str	r3, [r7, #32]
 8011094:	683b      	ldr	r3, [r7, #0]
 8011096:	781b      	ldrb	r3, [r3, #0]
 8011098:	00da      	lsls	r2, r3, #3
 801109a:	6a3b      	ldr	r3, [r7, #32]
 801109c:	4413      	add	r3, r2
 801109e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80110a2:	61fb      	str	r3, [r7, #28]
 80110a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80110a8:	b29a      	uxth	r2, r3
 80110aa:	69fb      	ldr	r3, [r7, #28]
 80110ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80110ae:	683b      	ldr	r3, [r7, #0]
 80110b0:	891b      	ldrh	r3, [r3, #8]
 80110b2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80110b6:	683b      	ldr	r3, [r7, #0]
 80110b8:	6959      	ldr	r1, [r3, #20]
 80110ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80110be:	b29b      	uxth	r3, r3
 80110c0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80110c4:	6878      	ldr	r0, [r7, #4]
 80110c6:	f000 fd2e 	bl	8011b26 <USB_WritePMA>
 80110ca:	e2e2      	b.n	8011692 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80110cc:	683b      	ldr	r3, [r7, #0]
 80110ce:	785b      	ldrb	r3, [r3, #1]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d16b      	bne.n	80111ac <USB_EPStartXfer+0x478>
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80110de:	b29b      	uxth	r3, r3
 80110e0:	461a      	mov	r2, r3
 80110e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80110e4:	4413      	add	r3, r2
 80110e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80110e8:	683b      	ldr	r3, [r7, #0]
 80110ea:	781b      	ldrb	r3, [r3, #0]
 80110ec:	00da      	lsls	r2, r3, #3
 80110ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80110f0:	4413      	add	r3, r2
 80110f2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80110f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80110f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80110fa:	881b      	ldrh	r3, [r3, #0]
 80110fc:	b29b      	uxth	r3, r3
 80110fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011102:	b29a      	uxth	r2, r3
 8011104:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011106:	801a      	strh	r2, [r3, #0]
 8011108:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801110c:	2b00      	cmp	r3, #0
 801110e:	d10a      	bne.n	8011126 <USB_EPStartXfer+0x3f2>
 8011110:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011112:	881b      	ldrh	r3, [r3, #0]
 8011114:	b29b      	uxth	r3, r3
 8011116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801111a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801111e:	b29a      	uxth	r2, r3
 8011120:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011122:	801a      	strh	r2, [r3, #0]
 8011124:	e05d      	b.n	80111e2 <USB_EPStartXfer+0x4ae>
 8011126:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801112a:	2b3e      	cmp	r3, #62	@ 0x3e
 801112c:	d81c      	bhi.n	8011168 <USB_EPStartXfer+0x434>
 801112e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011132:	085b      	lsrs	r3, r3, #1
 8011134:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011138:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801113c:	f003 0301 	and.w	r3, r3, #1
 8011140:	2b00      	cmp	r3, #0
 8011142:	d004      	beq.n	801114e <USB_EPStartXfer+0x41a>
 8011144:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011148:	3301      	adds	r3, #1
 801114a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801114e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011150:	881b      	ldrh	r3, [r3, #0]
 8011152:	b29a      	uxth	r2, r3
 8011154:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011158:	b29b      	uxth	r3, r3
 801115a:	029b      	lsls	r3, r3, #10
 801115c:	b29b      	uxth	r3, r3
 801115e:	4313      	orrs	r3, r2
 8011160:	b29a      	uxth	r2, r3
 8011162:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011164:	801a      	strh	r2, [r3, #0]
 8011166:	e03c      	b.n	80111e2 <USB_EPStartXfer+0x4ae>
 8011168:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801116c:	095b      	lsrs	r3, r3, #5
 801116e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011172:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011176:	f003 031f 	and.w	r3, r3, #31
 801117a:	2b00      	cmp	r3, #0
 801117c:	d104      	bne.n	8011188 <USB_EPStartXfer+0x454>
 801117e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011182:	3b01      	subs	r3, #1
 8011184:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011188:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801118a:	881b      	ldrh	r3, [r3, #0]
 801118c:	b29a      	uxth	r2, r3
 801118e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011192:	b29b      	uxth	r3, r3
 8011194:	029b      	lsls	r3, r3, #10
 8011196:	b29b      	uxth	r3, r3
 8011198:	4313      	orrs	r3, r2
 801119a:	b29b      	uxth	r3, r3
 801119c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80111a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80111a4:	b29a      	uxth	r2, r3
 80111a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80111a8:	801a      	strh	r2, [r3, #0]
 80111aa:	e01a      	b.n	80111e2 <USB_EPStartXfer+0x4ae>
 80111ac:	683b      	ldr	r3, [r7, #0]
 80111ae:	785b      	ldrb	r3, [r3, #1]
 80111b0:	2b01      	cmp	r3, #1
 80111b2:	d116      	bne.n	80111e2 <USB_EPStartXfer+0x4ae>
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80111be:	b29b      	uxth	r3, r3
 80111c0:	461a      	mov	r2, r3
 80111c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111c4:	4413      	add	r3, r2
 80111c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80111c8:	683b      	ldr	r3, [r7, #0]
 80111ca:	781b      	ldrb	r3, [r3, #0]
 80111cc:	00da      	lsls	r2, r3, #3
 80111ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111d0:	4413      	add	r3, r2
 80111d2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80111d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80111d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80111dc:	b29a      	uxth	r2, r3
 80111de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80111e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80111e2:	683b      	ldr	r3, [r7, #0]
 80111e4:	891b      	ldrh	r3, [r3, #8]
 80111e6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80111ea:	683b      	ldr	r3, [r7, #0]
 80111ec:	6959      	ldr	r1, [r3, #20]
 80111ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80111f2:	b29b      	uxth	r3, r3
 80111f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80111f8:	6878      	ldr	r0, [r7, #4]
 80111fa:	f000 fc94 	bl	8011b26 <USB_WritePMA>
            ep->xfer_buff += len;
 80111fe:	683b      	ldr	r3, [r7, #0]
 8011200:	695a      	ldr	r2, [r3, #20]
 8011202:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011206:	441a      	add	r2, r3
 8011208:	683b      	ldr	r3, [r7, #0]
 801120a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801120c:	683b      	ldr	r3, [r7, #0]
 801120e:	6a1a      	ldr	r2, [r3, #32]
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	691b      	ldr	r3, [r3, #16]
 8011214:	429a      	cmp	r2, r3
 8011216:	d907      	bls.n	8011228 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8011218:	683b      	ldr	r3, [r7, #0]
 801121a:	6a1a      	ldr	r2, [r3, #32]
 801121c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011220:	1ad2      	subs	r2, r2, r3
 8011222:	683b      	ldr	r3, [r7, #0]
 8011224:	621a      	str	r2, [r3, #32]
 8011226:	e006      	b.n	8011236 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	6a1b      	ldr	r3, [r3, #32]
 801122c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8011230:	683b      	ldr	r3, [r7, #0]
 8011232:	2200      	movs	r2, #0
 8011234:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	643b      	str	r3, [r7, #64]	@ 0x40
 801123a:	683b      	ldr	r3, [r7, #0]
 801123c:	785b      	ldrb	r3, [r3, #1]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d16b      	bne.n	801131a <USB_EPStartXfer+0x5e6>
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801124c:	b29b      	uxth	r3, r3
 801124e:	461a      	mov	r2, r3
 8011250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011252:	4413      	add	r3, r2
 8011254:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011256:	683b      	ldr	r3, [r7, #0]
 8011258:	781b      	ldrb	r3, [r3, #0]
 801125a:	00da      	lsls	r2, r3, #3
 801125c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801125e:	4413      	add	r3, r2
 8011260:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011264:	637b      	str	r3, [r7, #52]	@ 0x34
 8011266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011268:	881b      	ldrh	r3, [r3, #0]
 801126a:	b29b      	uxth	r3, r3
 801126c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011270:	b29a      	uxth	r2, r3
 8011272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011274:	801a      	strh	r2, [r3, #0]
 8011276:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801127a:	2b00      	cmp	r3, #0
 801127c:	d10a      	bne.n	8011294 <USB_EPStartXfer+0x560>
 801127e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011280:	881b      	ldrh	r3, [r3, #0]
 8011282:	b29b      	uxth	r3, r3
 8011284:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011288:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801128c:	b29a      	uxth	r2, r3
 801128e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011290:	801a      	strh	r2, [r3, #0]
 8011292:	e05b      	b.n	801134c <USB_EPStartXfer+0x618>
 8011294:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011298:	2b3e      	cmp	r3, #62	@ 0x3e
 801129a:	d81c      	bhi.n	80112d6 <USB_EPStartXfer+0x5a2>
 801129c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112a0:	085b      	lsrs	r3, r3, #1
 80112a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80112a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112aa:	f003 0301 	and.w	r3, r3, #1
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d004      	beq.n	80112bc <USB_EPStartXfer+0x588>
 80112b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80112b6:	3301      	adds	r3, #1
 80112b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80112bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112be:	881b      	ldrh	r3, [r3, #0]
 80112c0:	b29a      	uxth	r2, r3
 80112c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80112c6:	b29b      	uxth	r3, r3
 80112c8:	029b      	lsls	r3, r3, #10
 80112ca:	b29b      	uxth	r3, r3
 80112cc:	4313      	orrs	r3, r2
 80112ce:	b29a      	uxth	r2, r3
 80112d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112d2:	801a      	strh	r2, [r3, #0]
 80112d4:	e03a      	b.n	801134c <USB_EPStartXfer+0x618>
 80112d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112da:	095b      	lsrs	r3, r3, #5
 80112dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80112e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112e4:	f003 031f 	and.w	r3, r3, #31
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d104      	bne.n	80112f6 <USB_EPStartXfer+0x5c2>
 80112ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80112f0:	3b01      	subs	r3, #1
 80112f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80112f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112f8:	881b      	ldrh	r3, [r3, #0]
 80112fa:	b29a      	uxth	r2, r3
 80112fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011300:	b29b      	uxth	r3, r3
 8011302:	029b      	lsls	r3, r3, #10
 8011304:	b29b      	uxth	r3, r3
 8011306:	4313      	orrs	r3, r2
 8011308:	b29b      	uxth	r3, r3
 801130a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801130e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011312:	b29a      	uxth	r2, r3
 8011314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011316:	801a      	strh	r2, [r3, #0]
 8011318:	e018      	b.n	801134c <USB_EPStartXfer+0x618>
 801131a:	683b      	ldr	r3, [r7, #0]
 801131c:	785b      	ldrb	r3, [r3, #1]
 801131e:	2b01      	cmp	r3, #1
 8011320:	d114      	bne.n	801134c <USB_EPStartXfer+0x618>
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011328:	b29b      	uxth	r3, r3
 801132a:	461a      	mov	r2, r3
 801132c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801132e:	4413      	add	r3, r2
 8011330:	643b      	str	r3, [r7, #64]	@ 0x40
 8011332:	683b      	ldr	r3, [r7, #0]
 8011334:	781b      	ldrb	r3, [r3, #0]
 8011336:	00da      	lsls	r2, r3, #3
 8011338:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801133a:	4413      	add	r3, r2
 801133c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011340:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011346:	b29a      	uxth	r2, r3
 8011348:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801134a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801134c:	683b      	ldr	r3, [r7, #0]
 801134e:	895b      	ldrh	r3, [r3, #10]
 8011350:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011354:	683b      	ldr	r3, [r7, #0]
 8011356:	6959      	ldr	r1, [r3, #20]
 8011358:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801135c:	b29b      	uxth	r3, r3
 801135e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8011362:	6878      	ldr	r0, [r7, #4]
 8011364:	f000 fbdf 	bl	8011b26 <USB_WritePMA>
 8011368:	e193      	b.n	8011692 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801136a:	683b      	ldr	r3, [r7, #0]
 801136c:	6a1b      	ldr	r3, [r3, #32]
 801136e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8011372:	687a      	ldr	r2, [r7, #4]
 8011374:	683b      	ldr	r3, [r7, #0]
 8011376:	781b      	ldrb	r3, [r3, #0]
 8011378:	009b      	lsls	r3, r3, #2
 801137a:	4413      	add	r3, r2
 801137c:	881b      	ldrh	r3, [r3, #0]
 801137e:	b29b      	uxth	r3, r3
 8011380:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8011384:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011388:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 801138c:	687a      	ldr	r2, [r7, #4]
 801138e:	683b      	ldr	r3, [r7, #0]
 8011390:	781b      	ldrb	r3, [r3, #0]
 8011392:	009b      	lsls	r3, r3, #2
 8011394:	441a      	add	r2, r3
 8011396:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 801139a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801139e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80113a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80113a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80113aa:	b29b      	uxth	r3, r3
 80113ac:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80113b8:	b29b      	uxth	r3, r3
 80113ba:	461a      	mov	r2, r3
 80113bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80113be:	4413      	add	r3, r2
 80113c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80113c2:	683b      	ldr	r3, [r7, #0]
 80113c4:	781b      	ldrb	r3, [r3, #0]
 80113c6:	00da      	lsls	r2, r3, #3
 80113c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80113ca:	4413      	add	r3, r2
 80113cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80113d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80113d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80113d6:	b29a      	uxth	r2, r3
 80113d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80113da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80113dc:	683b      	ldr	r3, [r7, #0]
 80113de:	891b      	ldrh	r3, [r3, #8]
 80113e0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80113e4:	683b      	ldr	r3, [r7, #0]
 80113e6:	6959      	ldr	r1, [r3, #20]
 80113e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80113ec:	b29b      	uxth	r3, r3
 80113ee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80113f2:	6878      	ldr	r0, [r7, #4]
 80113f4:	f000 fb97 	bl	8011b26 <USB_WritePMA>
 80113f8:	e14b      	b.n	8011692 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80113fa:	683b      	ldr	r3, [r7, #0]
 80113fc:	6a1a      	ldr	r2, [r3, #32]
 80113fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011402:	1ad2      	subs	r2, r2, r3
 8011404:	683b      	ldr	r3, [r7, #0]
 8011406:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8011408:	687a      	ldr	r2, [r7, #4]
 801140a:	683b      	ldr	r3, [r7, #0]
 801140c:	781b      	ldrb	r3, [r3, #0]
 801140e:	009b      	lsls	r3, r3, #2
 8011410:	4413      	add	r3, r2
 8011412:	881b      	ldrh	r3, [r3, #0]
 8011414:	b29b      	uxth	r3, r3
 8011416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801141a:	2b00      	cmp	r3, #0
 801141c:	f000 809a 	beq.w	8011554 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	673b      	str	r3, [r7, #112]	@ 0x70
 8011424:	683b      	ldr	r3, [r7, #0]
 8011426:	785b      	ldrb	r3, [r3, #1]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d16b      	bne.n	8011504 <USB_EPStartXfer+0x7d0>
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011436:	b29b      	uxth	r3, r3
 8011438:	461a      	mov	r2, r3
 801143a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801143c:	4413      	add	r3, r2
 801143e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011440:	683b      	ldr	r3, [r7, #0]
 8011442:	781b      	ldrb	r3, [r3, #0]
 8011444:	00da      	lsls	r2, r3, #3
 8011446:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011448:	4413      	add	r3, r2
 801144a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801144e:	667b      	str	r3, [r7, #100]	@ 0x64
 8011450:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011452:	881b      	ldrh	r3, [r3, #0]
 8011454:	b29b      	uxth	r3, r3
 8011456:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801145a:	b29a      	uxth	r2, r3
 801145c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801145e:	801a      	strh	r2, [r3, #0]
 8011460:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011464:	2b00      	cmp	r3, #0
 8011466:	d10a      	bne.n	801147e <USB_EPStartXfer+0x74a>
 8011468:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801146a:	881b      	ldrh	r3, [r3, #0]
 801146c:	b29b      	uxth	r3, r3
 801146e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011472:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011476:	b29a      	uxth	r2, r3
 8011478:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801147a:	801a      	strh	r2, [r3, #0]
 801147c:	e05b      	b.n	8011536 <USB_EPStartXfer+0x802>
 801147e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011482:	2b3e      	cmp	r3, #62	@ 0x3e
 8011484:	d81c      	bhi.n	80114c0 <USB_EPStartXfer+0x78c>
 8011486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801148a:	085b      	lsrs	r3, r3, #1
 801148c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011490:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011494:	f003 0301 	and.w	r3, r3, #1
 8011498:	2b00      	cmp	r3, #0
 801149a:	d004      	beq.n	80114a6 <USB_EPStartXfer+0x772>
 801149c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80114a0:	3301      	adds	r3, #1
 80114a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80114a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80114a8:	881b      	ldrh	r3, [r3, #0]
 80114aa:	b29a      	uxth	r2, r3
 80114ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80114b0:	b29b      	uxth	r3, r3
 80114b2:	029b      	lsls	r3, r3, #10
 80114b4:	b29b      	uxth	r3, r3
 80114b6:	4313      	orrs	r3, r2
 80114b8:	b29a      	uxth	r2, r3
 80114ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80114bc:	801a      	strh	r2, [r3, #0]
 80114be:	e03a      	b.n	8011536 <USB_EPStartXfer+0x802>
 80114c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80114c4:	095b      	lsrs	r3, r3, #5
 80114c6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80114ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80114ce:	f003 031f 	and.w	r3, r3, #31
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d104      	bne.n	80114e0 <USB_EPStartXfer+0x7ac>
 80114d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80114da:	3b01      	subs	r3, #1
 80114dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80114e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80114e2:	881b      	ldrh	r3, [r3, #0]
 80114e4:	b29a      	uxth	r2, r3
 80114e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80114ea:	b29b      	uxth	r3, r3
 80114ec:	029b      	lsls	r3, r3, #10
 80114ee:	b29b      	uxth	r3, r3
 80114f0:	4313      	orrs	r3, r2
 80114f2:	b29b      	uxth	r3, r3
 80114f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80114f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80114fc:	b29a      	uxth	r2, r3
 80114fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011500:	801a      	strh	r2, [r3, #0]
 8011502:	e018      	b.n	8011536 <USB_EPStartXfer+0x802>
 8011504:	683b      	ldr	r3, [r7, #0]
 8011506:	785b      	ldrb	r3, [r3, #1]
 8011508:	2b01      	cmp	r3, #1
 801150a:	d114      	bne.n	8011536 <USB_EPStartXfer+0x802>
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011512:	b29b      	uxth	r3, r3
 8011514:	461a      	mov	r2, r3
 8011516:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011518:	4413      	add	r3, r2
 801151a:	673b      	str	r3, [r7, #112]	@ 0x70
 801151c:	683b      	ldr	r3, [r7, #0]
 801151e:	781b      	ldrb	r3, [r3, #0]
 8011520:	00da      	lsls	r2, r3, #3
 8011522:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011524:	4413      	add	r3, r2
 8011526:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801152a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801152c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011530:	b29a      	uxth	r2, r3
 8011532:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011534:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8011536:	683b      	ldr	r3, [r7, #0]
 8011538:	895b      	ldrh	r3, [r3, #10]
 801153a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801153e:	683b      	ldr	r3, [r7, #0]
 8011540:	6959      	ldr	r1, [r3, #20]
 8011542:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011546:	b29b      	uxth	r3, r3
 8011548:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801154c:	6878      	ldr	r0, [r7, #4]
 801154e:	f000 faea 	bl	8011b26 <USB_WritePMA>
 8011552:	e09e      	b.n	8011692 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011554:	683b      	ldr	r3, [r7, #0]
 8011556:	785b      	ldrb	r3, [r3, #1]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d16b      	bne.n	8011634 <USB_EPStartXfer+0x900>
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011566:	b29b      	uxth	r3, r3
 8011568:	461a      	mov	r2, r3
 801156a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801156c:	4413      	add	r3, r2
 801156e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011570:	683b      	ldr	r3, [r7, #0]
 8011572:	781b      	ldrb	r3, [r3, #0]
 8011574:	00da      	lsls	r2, r3, #3
 8011576:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011578:	4413      	add	r3, r2
 801157a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 801157e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011580:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011582:	881b      	ldrh	r3, [r3, #0]
 8011584:	b29b      	uxth	r3, r3
 8011586:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801158a:	b29a      	uxth	r2, r3
 801158c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801158e:	801a      	strh	r2, [r3, #0]
 8011590:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011594:	2b00      	cmp	r3, #0
 8011596:	d10a      	bne.n	80115ae <USB_EPStartXfer+0x87a>
 8011598:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801159a:	881b      	ldrh	r3, [r3, #0]
 801159c:	b29b      	uxth	r3, r3
 801159e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80115a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80115a6:	b29a      	uxth	r2, r3
 80115a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80115aa:	801a      	strh	r2, [r3, #0]
 80115ac:	e063      	b.n	8011676 <USB_EPStartXfer+0x942>
 80115ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80115b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80115b4:	d81c      	bhi.n	80115f0 <USB_EPStartXfer+0x8bc>
 80115b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80115ba:	085b      	lsrs	r3, r3, #1
 80115bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80115c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80115c4:	f003 0301 	and.w	r3, r3, #1
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d004      	beq.n	80115d6 <USB_EPStartXfer+0x8a2>
 80115cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80115d0:	3301      	adds	r3, #1
 80115d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80115d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80115d8:	881b      	ldrh	r3, [r3, #0]
 80115da:	b29a      	uxth	r2, r3
 80115dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80115e0:	b29b      	uxth	r3, r3
 80115e2:	029b      	lsls	r3, r3, #10
 80115e4:	b29b      	uxth	r3, r3
 80115e6:	4313      	orrs	r3, r2
 80115e8:	b29a      	uxth	r2, r3
 80115ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80115ec:	801a      	strh	r2, [r3, #0]
 80115ee:	e042      	b.n	8011676 <USB_EPStartXfer+0x942>
 80115f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80115f4:	095b      	lsrs	r3, r3, #5
 80115f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80115fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80115fe:	f003 031f 	and.w	r3, r3, #31
 8011602:	2b00      	cmp	r3, #0
 8011604:	d104      	bne.n	8011610 <USB_EPStartXfer+0x8dc>
 8011606:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801160a:	3b01      	subs	r3, #1
 801160c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011610:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011612:	881b      	ldrh	r3, [r3, #0]
 8011614:	b29a      	uxth	r2, r3
 8011616:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801161a:	b29b      	uxth	r3, r3
 801161c:	029b      	lsls	r3, r3, #10
 801161e:	b29b      	uxth	r3, r3
 8011620:	4313      	orrs	r3, r2
 8011622:	b29b      	uxth	r3, r3
 8011624:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011628:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801162c:	b29a      	uxth	r2, r3
 801162e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011630:	801a      	strh	r2, [r3, #0]
 8011632:	e020      	b.n	8011676 <USB_EPStartXfer+0x942>
 8011634:	683b      	ldr	r3, [r7, #0]
 8011636:	785b      	ldrb	r3, [r3, #1]
 8011638:	2b01      	cmp	r3, #1
 801163a:	d11c      	bne.n	8011676 <USB_EPStartXfer+0x942>
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011648:	b29b      	uxth	r3, r3
 801164a:	461a      	mov	r2, r3
 801164c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011650:	4413      	add	r3, r2
 8011652:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011656:	683b      	ldr	r3, [r7, #0]
 8011658:	781b      	ldrb	r3, [r3, #0]
 801165a:	00da      	lsls	r2, r3, #3
 801165c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011660:	4413      	add	r3, r2
 8011662:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011666:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801166a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801166e:	b29a      	uxth	r2, r3
 8011670:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011674:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8011676:	683b      	ldr	r3, [r7, #0]
 8011678:	891b      	ldrh	r3, [r3, #8]
 801167a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	6959      	ldr	r1, [r3, #20]
 8011682:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011686:	b29b      	uxth	r3, r3
 8011688:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801168c:	6878      	ldr	r0, [r7, #4]
 801168e:	f000 fa4a 	bl	8011b26 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8011692:	687a      	ldr	r2, [r7, #4]
 8011694:	683b      	ldr	r3, [r7, #0]
 8011696:	781b      	ldrb	r3, [r3, #0]
 8011698:	009b      	lsls	r3, r3, #2
 801169a:	4413      	add	r3, r2
 801169c:	881b      	ldrh	r3, [r3, #0]
 801169e:	b29b      	uxth	r3, r3
 80116a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80116a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80116a8:	817b      	strh	r3, [r7, #10]
 80116aa:	897b      	ldrh	r3, [r7, #10]
 80116ac:	f083 0310 	eor.w	r3, r3, #16
 80116b0:	817b      	strh	r3, [r7, #10]
 80116b2:	897b      	ldrh	r3, [r7, #10]
 80116b4:	f083 0320 	eor.w	r3, r3, #32
 80116b8:	817b      	strh	r3, [r7, #10]
 80116ba:	687a      	ldr	r2, [r7, #4]
 80116bc:	683b      	ldr	r3, [r7, #0]
 80116be:	781b      	ldrb	r3, [r3, #0]
 80116c0:	009b      	lsls	r3, r3, #2
 80116c2:	441a      	add	r2, r3
 80116c4:	897b      	ldrh	r3, [r7, #10]
 80116c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80116ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80116ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80116d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80116d6:	b29b      	uxth	r3, r3
 80116d8:	8013      	strh	r3, [r2, #0]
 80116da:	e0d5      	b.n	8011888 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80116dc:	683b      	ldr	r3, [r7, #0]
 80116de:	7b1b      	ldrb	r3, [r3, #12]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d156      	bne.n	8011792 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 80116e4:	683b      	ldr	r3, [r7, #0]
 80116e6:	699b      	ldr	r3, [r3, #24]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d122      	bne.n	8011732 <USB_EPStartXfer+0x9fe>
 80116ec:	683b      	ldr	r3, [r7, #0]
 80116ee:	78db      	ldrb	r3, [r3, #3]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d11e      	bne.n	8011732 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 80116f4:	687a      	ldr	r2, [r7, #4]
 80116f6:	683b      	ldr	r3, [r7, #0]
 80116f8:	781b      	ldrb	r3, [r3, #0]
 80116fa:	009b      	lsls	r3, r3, #2
 80116fc:	4413      	add	r3, r2
 80116fe:	881b      	ldrh	r3, [r3, #0]
 8011700:	b29b      	uxth	r3, r3
 8011702:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801170a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 801170e:	687a      	ldr	r2, [r7, #4]
 8011710:	683b      	ldr	r3, [r7, #0]
 8011712:	781b      	ldrb	r3, [r3, #0]
 8011714:	009b      	lsls	r3, r3, #2
 8011716:	441a      	add	r2, r3
 8011718:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 801171c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011720:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011724:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8011728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801172c:	b29b      	uxth	r3, r3
 801172e:	8013      	strh	r3, [r2, #0]
 8011730:	e01d      	b.n	801176e <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8011732:	687a      	ldr	r2, [r7, #4]
 8011734:	683b      	ldr	r3, [r7, #0]
 8011736:	781b      	ldrb	r3, [r3, #0]
 8011738:	009b      	lsls	r3, r3, #2
 801173a:	4413      	add	r3, r2
 801173c:	881b      	ldrh	r3, [r3, #0]
 801173e:	b29b      	uxth	r3, r3
 8011740:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8011744:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011748:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 801174c:	687a      	ldr	r2, [r7, #4]
 801174e:	683b      	ldr	r3, [r7, #0]
 8011750:	781b      	ldrb	r3, [r3, #0]
 8011752:	009b      	lsls	r3, r3, #2
 8011754:	441a      	add	r2, r3
 8011756:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 801175a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801175e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011762:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801176a:	b29b      	uxth	r3, r3
 801176c:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801176e:	683b      	ldr	r3, [r7, #0]
 8011770:	699a      	ldr	r2, [r3, #24]
 8011772:	683b      	ldr	r3, [r7, #0]
 8011774:	691b      	ldr	r3, [r3, #16]
 8011776:	429a      	cmp	r2, r3
 8011778:	d907      	bls.n	801178a <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 801177a:	683b      	ldr	r3, [r7, #0]
 801177c:	699a      	ldr	r2, [r3, #24]
 801177e:	683b      	ldr	r3, [r7, #0]
 8011780:	691b      	ldr	r3, [r3, #16]
 8011782:	1ad2      	subs	r2, r2, r3
 8011784:	683b      	ldr	r3, [r7, #0]
 8011786:	619a      	str	r2, [r3, #24]
 8011788:	e054      	b.n	8011834 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 801178a:	683b      	ldr	r3, [r7, #0]
 801178c:	2200      	movs	r2, #0
 801178e:	619a      	str	r2, [r3, #24]
 8011790:	e050      	b.n	8011834 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8011792:	683b      	ldr	r3, [r7, #0]
 8011794:	78db      	ldrb	r3, [r3, #3]
 8011796:	2b02      	cmp	r3, #2
 8011798:	d142      	bne.n	8011820 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801179a:	683b      	ldr	r3, [r7, #0]
 801179c:	69db      	ldr	r3, [r3, #28]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d048      	beq.n	8011834 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80117a2:	687a      	ldr	r2, [r7, #4]
 80117a4:	683b      	ldr	r3, [r7, #0]
 80117a6:	781b      	ldrb	r3, [r3, #0]
 80117a8:	009b      	lsls	r3, r3, #2
 80117aa:	4413      	add	r3, r2
 80117ac:	881b      	ldrh	r3, [r3, #0]
 80117ae:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80117b2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80117b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d005      	beq.n	80117ca <USB_EPStartXfer+0xa96>
 80117be:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80117c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d10b      	bne.n	80117e2 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80117ca:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80117ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d12e      	bne.n	8011834 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80117d6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80117da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d128      	bne.n	8011834 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80117e2:	687a      	ldr	r2, [r7, #4]
 80117e4:	683b      	ldr	r3, [r7, #0]
 80117e6:	781b      	ldrb	r3, [r3, #0]
 80117e8:	009b      	lsls	r3, r3, #2
 80117ea:	4413      	add	r3, r2
 80117ec:	881b      	ldrh	r3, [r3, #0]
 80117ee:	b29b      	uxth	r3, r3
 80117f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80117f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80117f8:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 80117fc:	687a      	ldr	r2, [r7, #4]
 80117fe:	683b      	ldr	r3, [r7, #0]
 8011800:	781b      	ldrb	r3, [r3, #0]
 8011802:	009b      	lsls	r3, r3, #2
 8011804:	441a      	add	r2, r3
 8011806:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 801180a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801180e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011812:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011816:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 801181a:	b29b      	uxth	r3, r3
 801181c:	8013      	strh	r3, [r2, #0]
 801181e:	e009      	b.n	8011834 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8011820:	683b      	ldr	r3, [r7, #0]
 8011822:	78db      	ldrb	r3, [r3, #3]
 8011824:	2b01      	cmp	r3, #1
 8011826:	d103      	bne.n	8011830 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8011828:	683b      	ldr	r3, [r7, #0]
 801182a:	2200      	movs	r2, #0
 801182c:	619a      	str	r2, [r3, #24]
 801182e:	e001      	b.n	8011834 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8011830:	2301      	movs	r3, #1
 8011832:	e02a      	b.n	801188a <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011834:	687a      	ldr	r2, [r7, #4]
 8011836:	683b      	ldr	r3, [r7, #0]
 8011838:	781b      	ldrb	r3, [r3, #0]
 801183a:	009b      	lsls	r3, r3, #2
 801183c:	4413      	add	r3, r2
 801183e:	881b      	ldrh	r3, [r3, #0]
 8011840:	b29b      	uxth	r3, r3
 8011842:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801184a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 801184e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8011852:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011856:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 801185a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801185e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8011862:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8011866:	687a      	ldr	r2, [r7, #4]
 8011868:	683b      	ldr	r3, [r7, #0]
 801186a:	781b      	ldrb	r3, [r3, #0]
 801186c:	009b      	lsls	r3, r3, #2
 801186e:	441a      	add	r2, r3
 8011870:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8011874:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011878:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801187c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011880:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011884:	b29b      	uxth	r3, r3
 8011886:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011888:	2300      	movs	r3, #0
}
 801188a:	4618      	mov	r0, r3
 801188c:	37b0      	adds	r7, #176	@ 0xb0
 801188e:	46bd      	mov	sp, r7
 8011890:	bd80      	pop	{r7, pc}

08011892 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011892:	b480      	push	{r7}
 8011894:	b085      	sub	sp, #20
 8011896:	af00      	add	r7, sp, #0
 8011898:	6078      	str	r0, [r7, #4]
 801189a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801189c:	683b      	ldr	r3, [r7, #0]
 801189e:	785b      	ldrb	r3, [r3, #1]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d020      	beq.n	80118e6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80118a4:	687a      	ldr	r2, [r7, #4]
 80118a6:	683b      	ldr	r3, [r7, #0]
 80118a8:	781b      	ldrb	r3, [r3, #0]
 80118aa:	009b      	lsls	r3, r3, #2
 80118ac:	4413      	add	r3, r2
 80118ae:	881b      	ldrh	r3, [r3, #0]
 80118b0:	b29b      	uxth	r3, r3
 80118b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80118b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80118ba:	81bb      	strh	r3, [r7, #12]
 80118bc:	89bb      	ldrh	r3, [r7, #12]
 80118be:	f083 0310 	eor.w	r3, r3, #16
 80118c2:	81bb      	strh	r3, [r7, #12]
 80118c4:	687a      	ldr	r2, [r7, #4]
 80118c6:	683b      	ldr	r3, [r7, #0]
 80118c8:	781b      	ldrb	r3, [r3, #0]
 80118ca:	009b      	lsls	r3, r3, #2
 80118cc:	441a      	add	r2, r3
 80118ce:	89bb      	ldrh	r3, [r7, #12]
 80118d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80118d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80118d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80118dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80118e0:	b29b      	uxth	r3, r3
 80118e2:	8013      	strh	r3, [r2, #0]
 80118e4:	e01f      	b.n	8011926 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80118e6:	687a      	ldr	r2, [r7, #4]
 80118e8:	683b      	ldr	r3, [r7, #0]
 80118ea:	781b      	ldrb	r3, [r3, #0]
 80118ec:	009b      	lsls	r3, r3, #2
 80118ee:	4413      	add	r3, r2
 80118f0:	881b      	ldrh	r3, [r3, #0]
 80118f2:	b29b      	uxth	r3, r3
 80118f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80118f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80118fc:	81fb      	strh	r3, [r7, #14]
 80118fe:	89fb      	ldrh	r3, [r7, #14]
 8011900:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011904:	81fb      	strh	r3, [r7, #14]
 8011906:	687a      	ldr	r2, [r7, #4]
 8011908:	683b      	ldr	r3, [r7, #0]
 801190a:	781b      	ldrb	r3, [r3, #0]
 801190c:	009b      	lsls	r3, r3, #2
 801190e:	441a      	add	r2, r3
 8011910:	89fb      	ldrh	r3, [r7, #14]
 8011912:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011916:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801191a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801191e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011922:	b29b      	uxth	r3, r3
 8011924:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011926:	2300      	movs	r3, #0
}
 8011928:	4618      	mov	r0, r3
 801192a:	3714      	adds	r7, #20
 801192c:	46bd      	mov	sp, r7
 801192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011932:	4770      	bx	lr

08011934 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011934:	b480      	push	{r7}
 8011936:	b087      	sub	sp, #28
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
 801193c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801193e:	683b      	ldr	r3, [r7, #0]
 8011940:	785b      	ldrb	r3, [r3, #1]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d04c      	beq.n	80119e0 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011946:	687a      	ldr	r2, [r7, #4]
 8011948:	683b      	ldr	r3, [r7, #0]
 801194a:	781b      	ldrb	r3, [r3, #0]
 801194c:	009b      	lsls	r3, r3, #2
 801194e:	4413      	add	r3, r2
 8011950:	881b      	ldrh	r3, [r3, #0]
 8011952:	823b      	strh	r3, [r7, #16]
 8011954:	8a3b      	ldrh	r3, [r7, #16]
 8011956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801195a:	2b00      	cmp	r3, #0
 801195c:	d01b      	beq.n	8011996 <USB_EPClearStall+0x62>
 801195e:	687a      	ldr	r2, [r7, #4]
 8011960:	683b      	ldr	r3, [r7, #0]
 8011962:	781b      	ldrb	r3, [r3, #0]
 8011964:	009b      	lsls	r3, r3, #2
 8011966:	4413      	add	r3, r2
 8011968:	881b      	ldrh	r3, [r3, #0]
 801196a:	b29b      	uxth	r3, r3
 801196c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011970:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011974:	81fb      	strh	r3, [r7, #14]
 8011976:	687a      	ldr	r2, [r7, #4]
 8011978:	683b      	ldr	r3, [r7, #0]
 801197a:	781b      	ldrb	r3, [r3, #0]
 801197c:	009b      	lsls	r3, r3, #2
 801197e:	441a      	add	r2, r3
 8011980:	89fb      	ldrh	r3, [r7, #14]
 8011982:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011986:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801198a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801198e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011992:	b29b      	uxth	r3, r3
 8011994:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8011996:	683b      	ldr	r3, [r7, #0]
 8011998:	78db      	ldrb	r3, [r3, #3]
 801199a:	2b01      	cmp	r3, #1
 801199c:	d06c      	beq.n	8011a78 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801199e:	687a      	ldr	r2, [r7, #4]
 80119a0:	683b      	ldr	r3, [r7, #0]
 80119a2:	781b      	ldrb	r3, [r3, #0]
 80119a4:	009b      	lsls	r3, r3, #2
 80119a6:	4413      	add	r3, r2
 80119a8:	881b      	ldrh	r3, [r3, #0]
 80119aa:	b29b      	uxth	r3, r3
 80119ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80119b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80119b4:	81bb      	strh	r3, [r7, #12]
 80119b6:	89bb      	ldrh	r3, [r7, #12]
 80119b8:	f083 0320 	eor.w	r3, r3, #32
 80119bc:	81bb      	strh	r3, [r7, #12]
 80119be:	687a      	ldr	r2, [r7, #4]
 80119c0:	683b      	ldr	r3, [r7, #0]
 80119c2:	781b      	ldrb	r3, [r3, #0]
 80119c4:	009b      	lsls	r3, r3, #2
 80119c6:	441a      	add	r2, r3
 80119c8:	89bb      	ldrh	r3, [r7, #12]
 80119ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80119ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80119d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80119d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80119da:	b29b      	uxth	r3, r3
 80119dc:	8013      	strh	r3, [r2, #0]
 80119de:	e04b      	b.n	8011a78 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80119e0:	687a      	ldr	r2, [r7, #4]
 80119e2:	683b      	ldr	r3, [r7, #0]
 80119e4:	781b      	ldrb	r3, [r3, #0]
 80119e6:	009b      	lsls	r3, r3, #2
 80119e8:	4413      	add	r3, r2
 80119ea:	881b      	ldrh	r3, [r3, #0]
 80119ec:	82fb      	strh	r3, [r7, #22]
 80119ee:	8afb      	ldrh	r3, [r7, #22]
 80119f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d01b      	beq.n	8011a30 <USB_EPClearStall+0xfc>
 80119f8:	687a      	ldr	r2, [r7, #4]
 80119fa:	683b      	ldr	r3, [r7, #0]
 80119fc:	781b      	ldrb	r3, [r3, #0]
 80119fe:	009b      	lsls	r3, r3, #2
 8011a00:	4413      	add	r3, r2
 8011a02:	881b      	ldrh	r3, [r3, #0]
 8011a04:	b29b      	uxth	r3, r3
 8011a06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011a0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011a0e:	82bb      	strh	r3, [r7, #20]
 8011a10:	687a      	ldr	r2, [r7, #4]
 8011a12:	683b      	ldr	r3, [r7, #0]
 8011a14:	781b      	ldrb	r3, [r3, #0]
 8011a16:	009b      	lsls	r3, r3, #2
 8011a18:	441a      	add	r2, r3
 8011a1a:	8abb      	ldrh	r3, [r7, #20]
 8011a1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011a20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011a24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011a28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a2c:	b29b      	uxth	r3, r3
 8011a2e:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011a30:	687a      	ldr	r2, [r7, #4]
 8011a32:	683b      	ldr	r3, [r7, #0]
 8011a34:	781b      	ldrb	r3, [r3, #0]
 8011a36:	009b      	lsls	r3, r3, #2
 8011a38:	4413      	add	r3, r2
 8011a3a:	881b      	ldrh	r3, [r3, #0]
 8011a3c:	b29b      	uxth	r3, r3
 8011a3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011a42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011a46:	827b      	strh	r3, [r7, #18]
 8011a48:	8a7b      	ldrh	r3, [r7, #18]
 8011a4a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011a4e:	827b      	strh	r3, [r7, #18]
 8011a50:	8a7b      	ldrh	r3, [r7, #18]
 8011a52:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8011a56:	827b      	strh	r3, [r7, #18]
 8011a58:	687a      	ldr	r2, [r7, #4]
 8011a5a:	683b      	ldr	r3, [r7, #0]
 8011a5c:	781b      	ldrb	r3, [r3, #0]
 8011a5e:	009b      	lsls	r3, r3, #2
 8011a60:	441a      	add	r2, r3
 8011a62:	8a7b      	ldrh	r3, [r7, #18]
 8011a64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011a68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011a6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011a70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a74:	b29b      	uxth	r3, r3
 8011a76:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011a78:	2300      	movs	r3, #0
}
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	371c      	adds	r7, #28
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a84:	4770      	bx	lr

08011a86 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8011a86:	b480      	push	{r7}
 8011a88:	b083      	sub	sp, #12
 8011a8a:	af00      	add	r7, sp, #0
 8011a8c:	6078      	str	r0, [r7, #4]
 8011a8e:	460b      	mov	r3, r1
 8011a90:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8011a92:	78fb      	ldrb	r3, [r7, #3]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d103      	bne.n	8011aa0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	2280      	movs	r2, #128	@ 0x80
 8011a9c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8011aa0:	2300      	movs	r3, #0
}
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	370c      	adds	r7, #12
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aac:	4770      	bx	lr

08011aae <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8011aae:	b480      	push	{r7}
 8011ab0:	b083      	sub	sp, #12
 8011ab2:	af00      	add	r7, sp, #0
 8011ab4:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8011abc:	b29b      	uxth	r3, r3
 8011abe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011ac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011ac6:	b29a      	uxth	r2, r3
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8011ace:	2300      	movs	r3, #0
}
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	370c      	adds	r7, #12
 8011ad4:	46bd      	mov	sp, r7
 8011ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ada:	4770      	bx	lr

08011adc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8011adc:	b480      	push	{r7}
 8011ade:	b083      	sub	sp, #12
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8011aea:	b29b      	uxth	r3, r3
 8011aec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8011af0:	b29a      	uxth	r2, r3
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8011af8:	2300      	movs	r3, #0
}
 8011afa:	4618      	mov	r0, r3
 8011afc:	370c      	adds	r7, #12
 8011afe:	46bd      	mov	sp, r7
 8011b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b04:	4770      	bx	lr

08011b06 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8011b06:	b480      	push	{r7}
 8011b08:	b085      	sub	sp, #20
 8011b0a:	af00      	add	r7, sp, #0
 8011b0c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8011b14:	b29b      	uxth	r3, r3
 8011b16:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8011b18:	68fb      	ldr	r3, [r7, #12]
}
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	3714      	adds	r7, #20
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b24:	4770      	bx	lr

08011b26 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8011b26:	b480      	push	{r7}
 8011b28:	b08b      	sub	sp, #44	@ 0x2c
 8011b2a:	af00      	add	r7, sp, #0
 8011b2c:	60f8      	str	r0, [r7, #12]
 8011b2e:	60b9      	str	r1, [r7, #8]
 8011b30:	4611      	mov	r1, r2
 8011b32:	461a      	mov	r2, r3
 8011b34:	460b      	mov	r3, r1
 8011b36:	80fb      	strh	r3, [r7, #6]
 8011b38:	4613      	mov	r3, r2
 8011b3a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8011b3c:	88bb      	ldrh	r3, [r7, #4]
 8011b3e:	3301      	adds	r3, #1
 8011b40:	085b      	lsrs	r3, r3, #1
 8011b42:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8011b48:	68bb      	ldr	r3, [r7, #8]
 8011b4a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011b4c:	88fa      	ldrh	r2, [r7, #6]
 8011b4e:	697b      	ldr	r3, [r7, #20]
 8011b50:	4413      	add	r3, r2
 8011b52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011b56:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8011b58:	69bb      	ldr	r3, [r7, #24]
 8011b5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8011b5c:	e01c      	b.n	8011b98 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 8011b5e:	69fb      	ldr	r3, [r7, #28]
 8011b60:	781b      	ldrb	r3, [r3, #0]
 8011b62:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8011b64:	69fb      	ldr	r3, [r7, #28]
 8011b66:	3301      	adds	r3, #1
 8011b68:	781b      	ldrb	r3, [r3, #0]
 8011b6a:	b21b      	sxth	r3, r3
 8011b6c:	021b      	lsls	r3, r3, #8
 8011b6e:	b21a      	sxth	r2, r3
 8011b70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011b74:	4313      	orrs	r3, r2
 8011b76:	b21b      	sxth	r3, r3
 8011b78:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8011b7a:	6a3b      	ldr	r3, [r7, #32]
 8011b7c:	8a7a      	ldrh	r2, [r7, #18]
 8011b7e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8011b80:	6a3b      	ldr	r3, [r7, #32]
 8011b82:	3302      	adds	r3, #2
 8011b84:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8011b86:	69fb      	ldr	r3, [r7, #28]
 8011b88:	3301      	adds	r3, #1
 8011b8a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8011b8c:	69fb      	ldr	r3, [r7, #28]
 8011b8e:	3301      	adds	r3, #1
 8011b90:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8011b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b94:	3b01      	subs	r3, #1
 8011b96:	627b      	str	r3, [r7, #36]	@ 0x24
 8011b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d1df      	bne.n	8011b5e <USB_WritePMA+0x38>
  }
}
 8011b9e:	bf00      	nop
 8011ba0:	bf00      	nop
 8011ba2:	372c      	adds	r7, #44	@ 0x2c
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011baa:	4770      	bx	lr

08011bac <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8011bac:	b480      	push	{r7}
 8011bae:	b08b      	sub	sp, #44	@ 0x2c
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	60f8      	str	r0, [r7, #12]
 8011bb4:	60b9      	str	r1, [r7, #8]
 8011bb6:	4611      	mov	r1, r2
 8011bb8:	461a      	mov	r2, r3
 8011bba:	460b      	mov	r3, r1
 8011bbc:	80fb      	strh	r3, [r7, #6]
 8011bbe:	4613      	mov	r3, r2
 8011bc0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8011bc2:	88bb      	ldrh	r3, [r7, #4]
 8011bc4:	085b      	lsrs	r3, r3, #1
 8011bc6:	b29b      	uxth	r3, r3
 8011bc8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8011bce:	68bb      	ldr	r3, [r7, #8]
 8011bd0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011bd2:	88fa      	ldrh	r2, [r7, #6]
 8011bd4:	697b      	ldr	r3, [r7, #20]
 8011bd6:	4413      	add	r3, r2
 8011bd8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011bdc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8011bde:	69bb      	ldr	r3, [r7, #24]
 8011be0:	627b      	str	r3, [r7, #36]	@ 0x24
 8011be2:	e018      	b.n	8011c16 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8011be4:	6a3b      	ldr	r3, [r7, #32]
 8011be6:	881b      	ldrh	r3, [r3, #0]
 8011be8:	b29b      	uxth	r3, r3
 8011bea:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8011bec:	6a3b      	ldr	r3, [r7, #32]
 8011bee:	3302      	adds	r3, #2
 8011bf0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8011bf2:	693b      	ldr	r3, [r7, #16]
 8011bf4:	b2da      	uxtb	r2, r3
 8011bf6:	69fb      	ldr	r3, [r7, #28]
 8011bf8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8011bfa:	69fb      	ldr	r3, [r7, #28]
 8011bfc:	3301      	adds	r3, #1
 8011bfe:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8011c00:	693b      	ldr	r3, [r7, #16]
 8011c02:	0a1b      	lsrs	r3, r3, #8
 8011c04:	b2da      	uxtb	r2, r3
 8011c06:	69fb      	ldr	r3, [r7, #28]
 8011c08:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8011c0a:	69fb      	ldr	r3, [r7, #28]
 8011c0c:	3301      	adds	r3, #1
 8011c0e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8011c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c12:	3b01      	subs	r3, #1
 8011c14:	627b      	str	r3, [r7, #36]	@ 0x24
 8011c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d1e3      	bne.n	8011be4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8011c1c:	88bb      	ldrh	r3, [r7, #4]
 8011c1e:	f003 0301 	and.w	r3, r3, #1
 8011c22:	b29b      	uxth	r3, r3
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d007      	beq.n	8011c38 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8011c28:	6a3b      	ldr	r3, [r7, #32]
 8011c2a:	881b      	ldrh	r3, [r3, #0]
 8011c2c:	b29b      	uxth	r3, r3
 8011c2e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8011c30:	693b      	ldr	r3, [r7, #16]
 8011c32:	b2da      	uxtb	r2, r3
 8011c34:	69fb      	ldr	r3, [r7, #28]
 8011c36:	701a      	strb	r2, [r3, #0]
  }
}
 8011c38:	bf00      	nop
 8011c3a:	372c      	adds	r7, #44	@ 0x2c
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c42:	4770      	bx	lr

08011c44 <__NVIC_SystemReset>:
{
 8011c44:	b480      	push	{r7}
 8011c46:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8011c48:	f3bf 8f4f 	dsb	sy
}
 8011c4c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8011c4e:	4b06      	ldr	r3, [pc, #24]	@ (8011c68 <__NVIC_SystemReset+0x24>)
 8011c50:	68db      	ldr	r3, [r3, #12]
 8011c52:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8011c56:	4904      	ldr	r1, [pc, #16]	@ (8011c68 <__NVIC_SystemReset+0x24>)
 8011c58:	4b04      	ldr	r3, [pc, #16]	@ (8011c6c <__NVIC_SystemReset+0x28>)
 8011c5a:	4313      	orrs	r3, r2
 8011c5c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8011c5e:	f3bf 8f4f 	dsb	sy
}
 8011c62:	bf00      	nop
    __NOP();
 8011c64:	bf00      	nop
 8011c66:	e7fd      	b.n	8011c64 <__NVIC_SystemReset+0x20>
 8011c68:	e000ed00 	.word	0xe000ed00
 8011c6c:	05fa0004 	.word	0x05fa0004

08011c70 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011c70:	b580      	push	{r7, lr}
 8011c72:	b084      	sub	sp, #16
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	6078      	str	r0, [r7, #4]
 8011c78:	460b      	mov	r3, r1
 8011c7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = (USBD_DFU_HandleTypeDef *)USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8011c7c:	f44f 6084 	mov.w	r0, #1056	@ 0x420
 8011c80:	f007 f9e2 	bl	8019048 <USBD_static_malloc>
 8011c84:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d109      	bne.n	8011ca0 <USBD_DFU_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	32b0      	adds	r2, #176	@ 0xb0
 8011c96:	2100      	movs	r1, #0
 8011c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8011c9c:	2302      	movs	r3, #2
 8011c9e:	e052      	b.n	8011d46 <USBD_DFU_Init+0xd6>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hdfu;
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	32b0      	adds	r2, #176	@ 0xb0
 8011caa:	68f9      	ldr	r1, [r7, #12]
 8011cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	32b0      	adds	r2, #176	@ 0xb0
 8011cba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  hdfu->alt_setting = 0U;
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8011cd2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  hdfu->wblock_num = 0U;
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	2200      	movs	r2, #0
 8011cda:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	2200      	movs	r2, #0
 8011ce2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	2200      	movs	r2, #0
 8011cea:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
  hdfu->dev_state = DFU_STATE_IDLE;
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	2202      	movs	r2, #2
 8011cf2:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[1] = 0U;
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	2200      	movs	r2, #0
 8011d02:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
  hdfu->dev_status[2] = 0U;
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	2200      	movs	r2, #0
 8011d0a:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
  hdfu->dev_status[3] = 0U;
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	2200      	movs	r2, #0
 8011d12:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	2202      	movs	r2, #2
 8011d1a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
  hdfu->dev_status[5] = 0U;
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	2200      	movs	r2, #0
 8011d22:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->Init() != USBD_OK)
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011d2c:	687a      	ldr	r2, [r7, #4]
 8011d2e:	33b0      	adds	r3, #176	@ 0xb0
 8011d30:	009b      	lsls	r3, r3, #2
 8011d32:	4413      	add	r3, r2
 8011d34:	685b      	ldr	r3, [r3, #4]
 8011d36:	685b      	ldr	r3, [r3, #4]
 8011d38:	4798      	blx	r3
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d001      	beq.n	8011d44 <USBD_DFU_Init+0xd4>
  {
    return (uint8_t)USBD_FAIL;
 8011d40:	2303      	movs	r3, #3
 8011d42:	e000      	b.n	8011d46 <USBD_DFU_Init+0xd6>
  }

  return (uint8_t)USBD_OK;
 8011d44:	2300      	movs	r3, #0
}
 8011d46:	4618      	mov	r0, r3
 8011d48:	3710      	adds	r7, #16
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	bd80      	pop	{r7, pc}

08011d4e <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011d4e:	b580      	push	{r7, lr}
 8011d50:	b084      	sub	sp, #16
 8011d52:	af00      	add	r7, sp, #0
 8011d54:	6078      	str	r0, [r7, #4]
 8011d56:	460b      	mov	r3, r1
 8011d58:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	32b0      	adds	r2, #176	@ 0xb0
 8011d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d101      	bne.n	8011d70 <USBD_DFU_DeInit+0x22>
  {
    return (uint8_t)USBD_EMEM;
 8011d6c:	2302      	movs	r3, #2
 8011d6e:	e03c      	b.n	8011dea <USBD_DFU_DeInit+0x9c>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	32b0      	adds	r2, #176	@ 0xb0
 8011d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d7e:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	2200      	movs	r2, #0
 8011d84:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	2200      	movs	r2, #0
 8011d8c:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	2202      	movs	r2, #2
 8011d94:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	2202      	movs	r2, #2
 8011da4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011dae:	687a      	ldr	r2, [r7, #4]
 8011db0:	33b0      	adds	r3, #176	@ 0xb0
 8011db2:	009b      	lsls	r3, r3, #2
 8011db4:	4413      	add	r3, r2
 8011db6:	685b      	ldr	r3, [r3, #4]
 8011db8:	689b      	ldr	r3, [r3, #8]
 8011dba:	4798      	blx	r3
  USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	32b0      	adds	r2, #176	@ 0xb0
 8011dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011dca:	4618      	mov	r0, r3
 8011dcc:	f007 f94a 	bl	8019064 <USBD_static_free>
  pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	32b0      	adds	r2, #176	@ 0xb0
 8011dda:	2100      	movs	r1, #0
 8011ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = NULL;
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	2200      	movs	r2, #0
 8011de4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 8011de8:	2300      	movs	r3, #0
}
 8011dea:	4618      	mov	r0, r3
 8011dec:	3710      	adds	r7, #16
 8011dee:	46bd      	mov	sp, r7
 8011df0:	bd80      	pop	{r7, pc}
	...

08011df4 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011df4:	b580      	push	{r7, lr}
 8011df6:	b086      	sub	sp, #24
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	6078      	str	r0, [r7, #4]
 8011dfc:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	32b0      	adds	r2, #176	@ 0xb0
 8011e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e0c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8011e0e:	2300      	movs	r3, #0
 8011e10:	75fb      	strb	r3, [r7, #23]
  uint8_t *pbuf;
  uint16_t len;
  uint16_t status_info = 0U;
 8011e12:	2300      	movs	r3, #0
 8011e14:	813b      	strh	r3, [r7, #8]

  if (hdfu == NULL)
 8011e16:	693b      	ldr	r3, [r7, #16]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d101      	bne.n	8011e20 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8011e1c:	2303      	movs	r3, #3
 8011e1e:	e0e8      	b.n	8011ff2 <USBD_DFU_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011e20:	683b      	ldr	r3, [r7, #0]
 8011e22:	781b      	ldrb	r3, [r3, #0]
 8011e24:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d03e      	beq.n	8011eaa <USBD_DFU_Setup+0xb6>
 8011e2c:	2b20      	cmp	r3, #32
 8011e2e:	f040 80d8 	bne.w	8011fe2 <USBD_DFU_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8011e32:	683b      	ldr	r3, [r7, #0]
 8011e34:	785b      	ldrb	r3, [r3, #1]
 8011e36:	2b06      	cmp	r3, #6
 8011e38:	d82f      	bhi.n	8011e9a <USBD_DFU_Setup+0xa6>
 8011e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8011e40 <USBD_DFU_Setup+0x4c>)
 8011e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e40:	08011e91 	.word	0x08011e91
 8011e44:	08011e5d 	.word	0x08011e5d
 8011e48:	08011e67 	.word	0x08011e67
 8011e4c:	08011e71 	.word	0x08011e71
 8011e50:	08011e79 	.word	0x08011e79
 8011e54:	08011e81 	.word	0x08011e81
 8011e58:	08011e89 	.word	0x08011e89
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 8011e5c:	6839      	ldr	r1, [r7, #0]
 8011e5e:	6878      	ldr	r0, [r7, #4]
 8011e60:	f000 fac2 	bl	80123e8 <DFU_Download>
          break;
 8011e64:	e020      	b.n	8011ea8 <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 8011e66:	6839      	ldr	r1, [r7, #0]
 8011e68:	6878      	ldr	r0, [r7, #4]
 8011e6a:	f000 fb33 	bl	80124d4 <DFU_Upload>
          break;
 8011e6e:	e01b      	b.n	8011ea8 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 8011e70:	6878      	ldr	r0, [r7, #4]
 8011e72:	f000 fc37 	bl	80126e4 <DFU_GetStatus>
          break;
 8011e76:	e017      	b.n	8011ea8 <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 8011e78:	6878      	ldr	r0, [r7, #4]
 8011e7a:	f000 fcff 	bl	801287c <DFU_ClearStatus>
          break;
 8011e7e:	e013      	b.n	8011ea8 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 8011e80:	6878      	ldr	r0, [r7, #4]
 8011e82:	f000 fd53 	bl	801292c <DFU_GetState>
          break;
 8011e86:	e00f      	b.n	8011ea8 <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8011e88:	6878      	ldr	r0, [r7, #4]
 8011e8a:	f000 fd6b 	bl	8012964 <DFU_Abort>
          break;
 8011e8e:	e00b      	b.n	8011ea8 <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 8011e90:	6839      	ldr	r1, [r7, #0]
 8011e92:	6878      	ldr	r0, [r7, #4]
 8011e94:	f000 fa38 	bl	8012308 <DFU_Detach>
          break;
 8011e98:	e006      	b.n	8011ea8 <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 8011e9a:	6839      	ldr	r1, [r7, #0]
 8011e9c:	6878      	ldr	r0, [r7, #4]
 8011e9e:	f001 fff0 	bl	8013e82 <USBD_CtlError>
          ret = USBD_FAIL;
 8011ea2:	2303      	movs	r3, #3
 8011ea4:	75fb      	strb	r3, [r7, #23]
          break;
 8011ea6:	bf00      	nop
      }
      break;
 8011ea8:	e0a2      	b.n	8011ff0 <USBD_DFU_Setup+0x1fc>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011eaa:	683b      	ldr	r3, [r7, #0]
 8011eac:	785b      	ldrb	r3, [r3, #1]
 8011eae:	2b0b      	cmp	r3, #11
 8011eb0:	f200 808c 	bhi.w	8011fcc <USBD_DFU_Setup+0x1d8>
 8011eb4:	a201      	add	r2, pc, #4	@ (adr r2, 8011ebc <USBD_DFU_Setup+0xc8>)
 8011eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011eba:	bf00      	nop
 8011ebc:	08011eed 	.word	0x08011eed
 8011ec0:	08011fdb 	.word	0x08011fdb
 8011ec4:	08011fcd 	.word	0x08011fcd
 8011ec8:	08011fcd 	.word	0x08011fcd
 8011ecc:	08011fcd 	.word	0x08011fcd
 8011ed0:	08011fcd 	.word	0x08011fcd
 8011ed4:	08011f17 	.word	0x08011f17
 8011ed8:	08011fcd 	.word	0x08011fcd
 8011edc:	08011fcd 	.word	0x08011fcd
 8011ee0:	08011fcd 	.word	0x08011fcd
 8011ee4:	08011f5f 	.word	0x08011f5f
 8011ee8:	08011f8b 	.word	0x08011f8b
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011ef2:	b2db      	uxtb	r3, r3
 8011ef4:	2b03      	cmp	r3, #3
 8011ef6:	d107      	bne.n	8011f08 <USBD_DFU_Setup+0x114>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011ef8:	f107 0308 	add.w	r3, r7, #8
 8011efc:	2202      	movs	r2, #2
 8011efe:	4619      	mov	r1, r3
 8011f00:	6878      	ldr	r0, [r7, #4]
 8011f02:	f002 f83b 	bl	8013f7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011f06:	e06b      	b.n	8011fe0 <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8011f08:	6839      	ldr	r1, [r7, #0]
 8011f0a:	6878      	ldr	r0, [r7, #4]
 8011f0c:	f001 ffb9 	bl	8013e82 <USBD_CtlError>
            ret = USBD_FAIL;
 8011f10:	2303      	movs	r3, #3
 8011f12:	75fb      	strb	r3, [r7, #23]
          break;
 8011f14:	e064      	b.n	8011fe0 <USBD_DFU_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8011f16:	683b      	ldr	r3, [r7, #0]
 8011f18:	885b      	ldrh	r3, [r3, #2]
 8011f1a:	0a1b      	lsrs	r3, r3, #8
 8011f1c:	b29b      	uxth	r3, r3
 8011f1e:	2b21      	cmp	r3, #33	@ 0x21
 8011f20:	d15d      	bne.n	8011fde <USBD_DFU_Setup+0x1ea>
          {
            pbuf = (uint8_t *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8011f28:	4618      	mov	r0, r3
 8011f2a:	f000 fdd5 	bl	8012ad8 <USBD_DFU_GetDfuFuncDesc>
 8011f2e:	60f8      	str	r0, [r7, #12]

            if (pbuf != NULL)
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d00c      	beq.n	8011f50 <USBD_DFU_Setup+0x15c>
            {
              len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8011f36:	683b      	ldr	r3, [r7, #0]
 8011f38:	88db      	ldrh	r3, [r3, #6]
 8011f3a:	2b09      	cmp	r3, #9
 8011f3c:	bf28      	it	cs
 8011f3e:	2309      	movcs	r3, #9
 8011f40:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 8011f42:	897b      	ldrh	r3, [r7, #10]
 8011f44:	461a      	mov	r2, r3
 8011f46:	68f9      	ldr	r1, [r7, #12]
 8011f48:	6878      	ldr	r0, [r7, #4]
 8011f4a:	f002 f817 	bl	8013f7c <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 8011f4e:	e046      	b.n	8011fde <USBD_DFU_Setup+0x1ea>
              USBD_CtlError(pdev, req);
 8011f50:	6839      	ldr	r1, [r7, #0]
 8011f52:	6878      	ldr	r0, [r7, #4]
 8011f54:	f001 ff95 	bl	8013e82 <USBD_CtlError>
              ret = USBD_FAIL;
 8011f58:	2303      	movs	r3, #3
 8011f5a:	75fb      	strb	r3, [r7, #23]
          break;
 8011f5c:	e03f      	b.n	8011fde <USBD_DFU_Setup+0x1ea>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011f64:	b2db      	uxtb	r3, r3
 8011f66:	2b03      	cmp	r3, #3
 8011f68:	d108      	bne.n	8011f7c <USBD_DFU_Setup+0x188>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 8011f6a:	693b      	ldr	r3, [r7, #16]
 8011f6c:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8011f70:	2201      	movs	r2, #1
 8011f72:	4619      	mov	r1, r3
 8011f74:	6878      	ldr	r0, [r7, #4]
 8011f76:	f002 f801 	bl	8013f7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011f7a:	e031      	b.n	8011fe0 <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8011f7c:	6839      	ldr	r1, [r7, #0]
 8011f7e:	6878      	ldr	r0, [r7, #4]
 8011f80:	f001 ff7f 	bl	8013e82 <USBD_CtlError>
            ret = USBD_FAIL;
 8011f84:	2303      	movs	r3, #3
 8011f86:	75fb      	strb	r3, [r7, #23]
          break;
 8011f88:	e02a      	b.n	8011fe0 <USBD_DFU_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8011f8a:	683b      	ldr	r3, [r7, #0]
 8011f8c:	885b      	ldrh	r3, [r3, #2]
 8011f8e:	b2db      	uxtb	r3, r3
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d114      	bne.n	8011fbe <USBD_DFU_Setup+0x1ca>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011f9a:	b2db      	uxtb	r3, r3
 8011f9c:	2b03      	cmp	r3, #3
 8011f9e:	d107      	bne.n	8011fb0 <USBD_DFU_Setup+0x1bc>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8011fa0:	683b      	ldr	r3, [r7, #0]
 8011fa2:	885b      	ldrh	r3, [r3, #2]
 8011fa4:	b2db      	uxtb	r3, r3
 8011fa6:	461a      	mov	r2, r3
 8011fa8:	693b      	ldr	r3, [r7, #16]
 8011faa:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011fae:	e017      	b.n	8011fe0 <USBD_DFU_Setup+0x1ec>
              USBD_CtlError(pdev, req);
 8011fb0:	6839      	ldr	r1, [r7, #0]
 8011fb2:	6878      	ldr	r0, [r7, #4]
 8011fb4:	f001 ff65 	bl	8013e82 <USBD_CtlError>
              ret = USBD_FAIL;
 8011fb8:	2303      	movs	r3, #3
 8011fba:	75fb      	strb	r3, [r7, #23]
          break;
 8011fbc:	e010      	b.n	8011fe0 <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8011fbe:	6839      	ldr	r1, [r7, #0]
 8011fc0:	6878      	ldr	r0, [r7, #4]
 8011fc2:	f001 ff5e 	bl	8013e82 <USBD_CtlError>
            ret = USBD_FAIL;
 8011fc6:	2303      	movs	r3, #3
 8011fc8:	75fb      	strb	r3, [r7, #23]
          break;
 8011fca:	e009      	b.n	8011fe0 <USBD_DFU_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8011fcc:	6839      	ldr	r1, [r7, #0]
 8011fce:	6878      	ldr	r0, [r7, #4]
 8011fd0:	f001 ff57 	bl	8013e82 <USBD_CtlError>
          ret = USBD_FAIL;
 8011fd4:	2303      	movs	r3, #3
 8011fd6:	75fb      	strb	r3, [r7, #23]
          break;
 8011fd8:	e002      	b.n	8011fe0 <USBD_DFU_Setup+0x1ec>
          break;
 8011fda:	bf00      	nop
 8011fdc:	e008      	b.n	8011ff0 <USBD_DFU_Setup+0x1fc>
          break;
 8011fde:	bf00      	nop
      }
      break;
 8011fe0:	e006      	b.n	8011ff0 <USBD_DFU_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8011fe2:	6839      	ldr	r1, [r7, #0]
 8011fe4:	6878      	ldr	r0, [r7, #4]
 8011fe6:	f001 ff4c 	bl	8013e82 <USBD_CtlError>
      ret = USBD_FAIL;
 8011fea:	2303      	movs	r3, #3
 8011fec:	75fb      	strb	r3, [r7, #23]
      break;
 8011fee:	bf00      	nop
  }

  return (uint8_t)ret;
 8011ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	3718      	adds	r7, #24
 8011ff6:	46bd      	mov	sp, r7
 8011ff8:	bd80      	pop	{r7, pc}
 8011ffa:	bf00      	nop

08011ffc <USBD_DFU_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8011ffc:	b480      	push	{r7}
 8011ffe:	b083      	sub	sp, #12
 8012000:	af00      	add	r7, sp, #0
 8012002:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	221b      	movs	r2, #27
 8012008:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 801200a:	4b03      	ldr	r3, [pc, #12]	@ (8012018 <USBD_DFU_GetCfgDesc+0x1c>)
}
 801200c:	4618      	mov	r0, r3
 801200e:	370c      	adds	r7, #12
 8012010:	46bd      	mov	sp, r7
 8012012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012016:	4770      	bx	lr
 8012018:	2000006c 	.word	0x2000006c

0801201c <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801201c:	b480      	push	{r7}
 801201e:	b083      	sub	sp, #12
 8012020:	af00      	add	r7, sp, #0
 8012022:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8012024:	2300      	movs	r3, #0
}
 8012026:	4618      	mov	r0, r3
 8012028:	370c      	adds	r7, #12
 801202a:	46bd      	mov	sp, r7
 801202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012030:	4770      	bx	lr

08012032 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8012032:	b580      	push	{r7, lr}
 8012034:	b088      	sub	sp, #32
 8012036:	af00      	add	r7, sp, #0
 8012038:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t app_addr_ptr;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	32b0      	adds	r2, #176	@ 0xb0
 8012044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012048:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012050:	687a      	ldr	r2, [r7, #4]
 8012052:	33b0      	adds	r3, #176	@ 0xb0
 8012054:	009b      	lsls	r3, r3, #2
 8012056:	4413      	add	r3, r2
 8012058:	685b      	ldr	r3, [r3, #4]
 801205a:	61bb      	str	r3, [r7, #24]
#if (USBD_DFU_VENDOR_CMD_ENABLED == 1U) || (USBD_DFU_VENDOR_CHECK_ENABLED == 1U)
  uint32_t VendorStatus = 0U;
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */

  if (hdfu == NULL)
 801205c:	69fb      	ldr	r3, [r7, #28]
 801205e:	2b00      	cmp	r3, #0
 8012060:	d101      	bne.n	8012066 <USBD_DFU_EP0_TxReady+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8012062:	2303      	movs	r3, #3
 8012064:	e0f1      	b.n	801224a <USBD_DFU_EP0_TxReady+0x218>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8012066:	69fb      	ldr	r3, [r7, #28]
 8012068:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 801206c:	2b04      	cmp	r3, #4
 801206e:	f040 80e0 	bne.w	8012232 <USBD_DFU_EP0_TxReady+0x200>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 8012072:	69fb      	ldr	r3, [r7, #28]
 8012074:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8012078:	2b00      	cmp	r3, #0
 801207a:	f040 8085 	bne.w	8012188 <USBD_DFU_EP0_TxReady+0x156>
    {
      if (hdfu->wlength == 1U)
 801207e:	69fb      	ldr	r3, [r7, #28]
 8012080:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8012084:	2b01      	cmp	r3, #1
 8012086:	f000 80b5 	beq.w	80121f4 <USBD_DFU_EP0_TxReady+0x1c2>
            return (uint8_t)USBD_FAIL;
          }
        }
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */
      }
      else if (hdfu->wlength == 5U)
 801208a:	69fb      	ldr	r3, [r7, #28]
 801208c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8012090:	2b05      	cmp	r3, #5
 8012092:	d166      	bne.n	8012162 <USBD_DFU_EP0_TxReady+0x130>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 8012094:	69fb      	ldr	r3, [r7, #28]
 8012096:	781b      	ldrb	r3, [r3, #0]
 8012098:	2b21      	cmp	r3, #33	@ 0x21
 801209a:	d124      	bne.n	80120e6 <USBD_DFU_EP0_TxReady+0xb4>
            hdfu->dev_status[4] = hdfu->dev_state;
            return (uint8_t)USBD_FAIL;
          }
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

          hdfu->data_ptr = hdfu->buffer.d8[1];
 801209c:	69fb      	ldr	r3, [r7, #28]
 801209e:	785b      	ldrb	r3, [r3, #1]
 80120a0:	461a      	mov	r2, r3
 80120a2:	69fb      	ldr	r3, [r7, #28]
 80120a4:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80120a8:	69fb      	ldr	r3, [r7, #28]
 80120aa:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80120ae:	69fb      	ldr	r3, [r7, #28]
 80120b0:	789b      	ldrb	r3, [r3, #2]
 80120b2:	021b      	lsls	r3, r3, #8
 80120b4:	441a      	add	r2, r3
 80120b6:	69fb      	ldr	r3, [r7, #28]
 80120b8:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80120bc:	69fb      	ldr	r3, [r7, #28]
 80120be:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80120c2:	69fb      	ldr	r3, [r7, #28]
 80120c4:	78db      	ldrb	r3, [r3, #3]
 80120c6:	041b      	lsls	r3, r3, #16
 80120c8:	441a      	add	r2, r3
 80120ca:	69fb      	ldr	r3, [r7, #28]
 80120cc:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 80120d0:	69fb      	ldr	r3, [r7, #28]
 80120d2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80120d6:	69fb      	ldr	r3, [r7, #28]
 80120d8:	791b      	ldrb	r3, [r3, #4]
 80120da:	061b      	lsls	r3, r3, #24
 80120dc:	441a      	add	r2, r3
 80120de:	69fb      	ldr	r3, [r7, #28]
 80120e0:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 80120e4:	e086      	b.n	80121f4 <USBD_DFU_EP0_TxReady+0x1c2>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 80120e6:	69fb      	ldr	r3, [r7, #28]
 80120e8:	781b      	ldrb	r3, [r3, #0]
 80120ea:	2b41      	cmp	r3, #65	@ 0x41
 80120ec:	d137      	bne.n	801215e <USBD_DFU_EP0_TxReady+0x12c>
            hdfu->dev_status[4] = hdfu->dev_state;
            return (uint8_t)USBD_FAIL;
          }
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

          app_addr_ptr = hdfu->buffer.d8[1];
 80120ee:	69fb      	ldr	r3, [r7, #28]
 80120f0:	785b      	ldrb	r3, [r3, #1]
 80120f2:	613b      	str	r3, [r7, #16]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80120f4:	69fb      	ldr	r3, [r7, #28]
 80120f6:	789b      	ldrb	r3, [r3, #2]
 80120f8:	021b      	lsls	r3, r3, #8
 80120fa:	693a      	ldr	r2, [r7, #16]
 80120fc:	4413      	add	r3, r2
 80120fe:	613b      	str	r3, [r7, #16]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8012100:	69fb      	ldr	r3, [r7, #28]
 8012102:	78db      	ldrb	r3, [r3, #3]
 8012104:	041b      	lsls	r3, r3, #16
 8012106:	693a      	ldr	r2, [r7, #16]
 8012108:	4413      	add	r3, r2
 801210a:	613b      	str	r3, [r7, #16]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 801210c:	69fb      	ldr	r3, [r7, #28]
 801210e:	791b      	ldrb	r3, [r3, #4]
 8012110:	061b      	lsls	r3, r3, #24
 8012112:	693a      	ldr	r2, [r7, #16]
 8012114:	4413      	add	r3, r2
 8012116:	613b      	str	r3, [r7, #16]

          if (DfuInterface->Erase(app_addr_ptr) != USBD_OK)
 8012118:	69bb      	ldr	r3, [r7, #24]
 801211a:	68db      	ldr	r3, [r3, #12]
 801211c:	6938      	ldr	r0, [r7, #16]
 801211e:	4798      	blx	r3
 8012120:	4603      	mov	r3, r0
 8012122:	2b00      	cmp	r3, #0
 8012124:	d066      	beq.n	80121f4 <USBD_DFU_EP0_TxReady+0x1c2>
          {
            /* Update the state machine */
            hdfu->dev_state = DFU_STATE_ERROR;
 8012126:	69fb      	ldr	r3, [r7, #28]
 8012128:	220a      	movs	r2, #10
 801212a:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
            hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 801212e:	69fb      	ldr	r3, [r7, #28]
 8012130:	220b      	movs	r2, #11
 8012132:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
            hdfu->dev_status[1] = 0U;
 8012136:	69fb      	ldr	r3, [r7, #28]
 8012138:	2200      	movs	r2, #0
 801213a:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
            hdfu->dev_status[2] = 0U;
 801213e:	69fb      	ldr	r3, [r7, #28]
 8012140:	2200      	movs	r2, #0
 8012142:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
            hdfu->dev_status[3] = 0U;
 8012146:	69fb      	ldr	r3, [r7, #28]
 8012148:	2200      	movs	r2, #0
 801214a:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
            hdfu->dev_status[4] = hdfu->dev_state;
 801214e:	69fb      	ldr	r3, [r7, #28]
 8012150:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8012154:	69fb      	ldr	r3, [r7, #28]
 8012156:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            return (uint8_t)USBD_FAIL;
 801215a:	2303      	movs	r3, #3
 801215c:	e075      	b.n	801224a <USBD_DFU_EP0_TxReady+0x218>
          }
        }
#else
        else
        {
          return (uint8_t)USBD_FAIL;
 801215e:	2303      	movs	r3, #3
 8012160:	e073      	b.n	801224a <USBD_DFU_EP0_TxReady+0x218>
          req.wLength = 1U;
          USBD_CtlError(pdev, &req);
        }
#else
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 8012162:	69fb      	ldr	r3, [r7, #28]
 8012164:	2200      	movs	r2, #0
 8012166:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 801216a:	69fb      	ldr	r3, [r7, #28]
 801216c:	2200      	movs	r2, #0
 801216e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 8012172:	2300      	movs	r3, #0
 8012174:	723b      	strb	r3, [r7, #8]
        req.wLength = 1U;
 8012176:	2301      	movs	r3, #1
 8012178:	81fb      	strh	r3, [r7, #14]
        USBD_CtlError(pdev, &req);
 801217a:	f107 0308 	add.w	r3, r7, #8
 801217e:	4619      	mov	r1, r3
 8012180:	6878      	ldr	r0, [r7, #4]
 8012182:	f001 fe7e 	bl	8013e82 <USBD_CtlError>
 8012186:	e035      	b.n	80121f4 <USBD_DFU_EP0_TxReady+0x1c2>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 8012188:	69fb      	ldr	r3, [r7, #28]
 801218a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 801218e:	2b01      	cmp	r3, #1
 8012190:	d930      	bls.n	80121f4 <USBD_DFU_EP0_TxReady+0x1c2>
          return (uint8_t)USBD_FAIL;
        }
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8012192:	69fb      	ldr	r3, [r7, #28]
 8012194:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8012198:	3b02      	subs	r3, #2
 801219a:	029a      	lsls	r2, r3, #10
 801219c:	69fb      	ldr	r3, [r7, #28]
 801219e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80121a2:	4413      	add	r3, r2
 80121a4:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 80121a6:	69bb      	ldr	r3, [r7, #24]
 80121a8:	691b      	ldr	r3, [r3, #16]
 80121aa:	69f8      	ldr	r0, [r7, #28]
 80121ac:	6979      	ldr	r1, [r7, #20]
 80121ae:	69fa      	ldr	r2, [r7, #28]
 80121b0:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 80121b4:	4798      	blx	r3
 80121b6:	4603      	mov	r3, r0
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d01b      	beq.n	80121f4 <USBD_DFU_EP0_TxReady+0x1c2>
        {
          /* Update the state machine */
          hdfu->dev_state = DFU_STATE_ERROR;
 80121bc:	69fb      	ldr	r3, [r7, #28]
 80121be:	220a      	movs	r2, #10
 80121c0:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
          hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 80121c4:	69fb      	ldr	r3, [r7, #28]
 80121c6:	220b      	movs	r2, #11
 80121c8:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
          hdfu->dev_status[1] = 0U;
 80121cc:	69fb      	ldr	r3, [r7, #28]
 80121ce:	2200      	movs	r2, #0
 80121d0:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
          hdfu->dev_status[2] = 0U;
 80121d4:	69fb      	ldr	r3, [r7, #28]
 80121d6:	2200      	movs	r2, #0
 80121d8:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
          hdfu->dev_status[3] = 0U;
 80121dc:	69fb      	ldr	r3, [r7, #28]
 80121de:	2200      	movs	r2, #0
 80121e0:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
          hdfu->dev_status[4] = hdfu->dev_state;
 80121e4:	69fb      	ldr	r3, [r7, #28]
 80121e6:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 80121ea:	69fb      	ldr	r3, [r7, #28]
 80121ec:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
          return (uint8_t)USBD_FAIL;
 80121f0:	2303      	movs	r3, #3
 80121f2:	e02a      	b.n	801224a <USBD_DFU_EP0_TxReady+0x218>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 80121f4:	69fb      	ldr	r3, [r7, #28]
 80121f6:	2200      	movs	r2, #0
 80121f8:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 80121fc:	69fb      	ldr	r3, [r7, #28]
 80121fe:	2200      	movs	r2, #0
 8012200:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8012204:	69fb      	ldr	r3, [r7, #28]
 8012206:	2203      	movs	r2, #3
 8012208:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

    hdfu->dev_status[1] = 0U;
 801220c:	69fb      	ldr	r3, [r7, #28]
 801220e:	2200      	movs	r2, #0
 8012210:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8012214:	69fb      	ldr	r3, [r7, #28]
 8012216:	2200      	movs	r2, #0
 8012218:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 801221c:	69fb      	ldr	r3, [r7, #28]
 801221e:	2200      	movs	r2, #0
 8012220:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 8012224:	69fb      	ldr	r3, [r7, #28]
 8012226:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 801222a:	69fb      	ldr	r3, [r7, #28]
 801222c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 8012230:	e00a      	b.n	8012248 <USBD_DFU_EP0_TxReady+0x216>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8012232:	69fb      	ldr	r3, [r7, #28]
 8012234:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8012238:	2b07      	cmp	r3, #7
 801223a:	d103      	bne.n	8012244 <USBD_DFU_EP0_TxReady+0x212>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 801223c:	6878      	ldr	r0, [r7, #4]
 801223e:	f000 fbe6 	bl	8012a0e <DFU_Leave>
 8012242:	e001      	b.n	8012248 <USBD_DFU_EP0_TxReady+0x216>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 8012244:	2303      	movs	r3, #3
 8012246:	e000      	b.n	801224a <USBD_DFU_EP0_TxReady+0x218>
  }

  return (uint8_t)USBD_OK;
 8012248:	2300      	movs	r3, #0
}
 801224a:	4618      	mov	r0, r3
 801224c:	3720      	adds	r7, #32
 801224e:	46bd      	mov	sp, r7
 8012250:	bd80      	pop	{r7, pc}

08012252 <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 8012252:	b480      	push	{r7}
 8012254:	b083      	sub	sp, #12
 8012256:	af00      	add	r7, sp, #0
 8012258:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 801225a:	2300      	movs	r3, #0
}
 801225c:	4618      	mov	r0, r3
 801225e:	370c      	adds	r7, #12
 8012260:	46bd      	mov	sp, r7
 8012262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012266:	4770      	bx	lr

08012268 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8012268:	b480      	push	{r7}
 801226a:	b083      	sub	sp, #12
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	220a      	movs	r2, #10
 8012274:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 8012276:	4b03      	ldr	r3, [pc, #12]	@ (8012284 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 8012278:	4618      	mov	r0, r3
 801227a:	370c      	adds	r7, #12
 801227c:	46bd      	mov	sp, r7
 801227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012282:	4770      	bx	lr
 8012284:	20000088 	.word	0x20000088

08012288 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8012288:	b580      	push	{r7, lr}
 801228a:	b086      	sub	sp, #24
 801228c:	af00      	add	r7, sp, #0
 801228e:	60f8      	str	r0, [r7, #12]
 8012290:	460b      	mov	r3, r1
 8012292:	607a      	str	r2, [r7, #4]
 8012294:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801229c:	68fa      	ldr	r2, [r7, #12]
 801229e:	33b0      	adds	r3, #176	@ 0xb0
 80122a0:	009b      	lsls	r3, r3, #2
 80122a2:	4413      	add	r3, r2
 80122a4:	685b      	ldr	r3, [r3, #4]
 80122a6:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 80122a8:	7afb      	ldrb	r3, [r7, #11]
 80122aa:	2b06      	cmp	r3, #6
 80122ac:	d808      	bhi.n	80122c0 <USBD_DFU_GetUsrStringDesc+0x38>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 80122ae:	697b      	ldr	r3, [r7, #20]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	687a      	ldr	r2, [r7, #4]
 80122b4:	4906      	ldr	r1, [pc, #24]	@ (80122d0 <USBD_DFU_GetUsrStringDesc+0x48>)
 80122b6:	4618      	mov	r0, r3
 80122b8:	f001 fdf4 	bl	8013ea4 <USBD_GetString>
    return USBD_StrDesc;
 80122bc:	4b04      	ldr	r3, [pc, #16]	@ (80122d0 <USBD_DFU_GetUsrStringDesc+0x48>)
 80122be:	e003      	b.n	80122c8 <USBD_DFU_GetUsrStringDesc+0x40>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    *length = 0U;
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	2200      	movs	r2, #0
 80122c4:	801a      	strh	r2, [r3, #0]
    return NULL;
 80122c6:	2300      	movs	r3, #0
  }
}
 80122c8:	4618      	mov	r0, r3
 80122ca:	3718      	adds	r7, #24
 80122cc:	46bd      	mov	sp, r7
 80122ce:	bd80      	pop	{r7, pc}
 80122d0:	20000b50 	.word	0x20000b50

080122d4 <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 80122d4:	b480      	push	{r7}
 80122d6:	b083      	sub	sp, #12
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
 80122dc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80122de:	683b      	ldr	r3, [r7, #0]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d101      	bne.n	80122e8 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80122e4:	2303      	movs	r3, #3
 80122e6:	e009      	b.n	80122fc <USBD_DFU_RegisterMedia+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80122ee:	687a      	ldr	r2, [r7, #4]
 80122f0:	33b0      	adds	r3, #176	@ 0xb0
 80122f2:	009b      	lsls	r3, r3, #2
 80122f4:	4413      	add	r3, r2
 80122f6:	683a      	ldr	r2, [r7, #0]
 80122f8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80122fa:	2300      	movs	r3, #0
}
 80122fc:	4618      	mov	r0, r3
 80122fe:	370c      	adds	r7, #12
 8012300:	46bd      	mov	sp, r7
 8012302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012306:	4770      	bx	lr

08012308 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012308:	b580      	push	{r7, lr}
 801230a:	b084      	sub	sp, #16
 801230c:	af00      	add	r7, sp, #0
 801230e:	6078      	str	r0, [r7, #4]
 8012310:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	32b0      	adds	r2, #176	@ 0xb0
 801231c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012320:	60fb      	str	r3, [r7, #12]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8012328:	4618      	mov	r0, r3
 801232a:	f000 fbd5 	bl	8012ad8 <USBD_DFU_GetDfuFuncDesc>
 801232e:	60b8      	str	r0, [r7, #8]

  if ((hdfu == NULL) || (pDfuFunc == NULL))
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	2b00      	cmp	r3, #0
 8012334:	d054      	beq.n	80123e0 <DFU_Detach+0xd8>
 8012336:	68bb      	ldr	r3, [r7, #8]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d051      	beq.n	80123e0 <DFU_Detach+0xd8>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8012342:	2b02      	cmp	r3, #2
 8012344:	d013      	beq.n	801236e <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 801234c:	2b03      	cmp	r3, #3
 801234e:	d00e      	beq.n	801236e <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8012356:	2b05      	cmp	r3, #5
 8012358:	d009      	beq.n	801236e <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8012360:	2b06      	cmp	r3, #6
 8012362:	d004      	beq.n	801236e <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 801236a:	2b09      	cmp	r3, #9
 801236c:	d125      	bne.n	80123ba <DFU_Detach+0xb2>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	2202      	movs	r2, #2
 8012372:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	2200      	movs	r2, #0
 801237a:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	2200      	movs	r2, #0
 8012382:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	2200      	movs	r2, #0
 801238a:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	2200      	movs	r2, #0
 8012392:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /*iString*/
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	2200      	movs	r2, #0
 80123a6:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    hdfu->wblock_num = 0U;
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	2200      	movs	r2, #0
 80123ae:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	2200      	movs	r2, #0
 80123b6:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if ((pDfuFunc->bmAttributes & DFU_DETACH_MASK) != 0U)
 80123ba:	68bb      	ldr	r3, [r7, #8]
 80123bc:	789b      	ldrb	r3, [r3, #2]
 80123be:	f003 0308 	and.w	r3, r3, #8
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d006      	beq.n	80123d4 <DFU_Detach+0xcc>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 80123c6:	6878      	ldr	r0, [r7, #4]
 80123c8:	f000 fc26 	bl	8012c18 <USBD_Stop>
    (void)USBD_Start(pdev);
 80123cc:	6878      	ldr	r0, [r7, #4]
 80123ce:	f000 fc17 	bl	8012c00 <USBD_Start>
 80123d2:	e006      	b.n	80123e2 <DFU_Detach+0xda>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 80123d4:	683b      	ldr	r3, [r7, #0]
 80123d6:	885b      	ldrh	r3, [r3, #2]
 80123d8:	4618      	mov	r0, r3
 80123da:	f7f3 f8b4 	bl	8005546 <HAL_Delay>
 80123de:	e000      	b.n	80123e2 <DFU_Detach+0xda>
    return;
 80123e0:	bf00      	nop
  }
}
 80123e2:	3710      	adds	r7, #16
 80123e4:	46bd      	mov	sp, r7
 80123e6:	bd80      	pop	{r7, pc}

080123e8 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b084      	sub	sp, #16
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	6078      	str	r0, [r7, #4]
 80123f0:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	32b0      	adds	r2, #176	@ 0xb0
 80123fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012400:	60fb      	str	r3, [r7, #12]
#if (USBD_DFU_VENDOR_CHECK_ENABLED == 1U)
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
  uint32_t VendorStatus = 0U;
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

  if (hdfu == NULL)
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d061      	beq.n	80124cc <DFU_Download+0xe4>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8012408:	683b      	ldr	r3, [r7, #0]
 801240a:	88db      	ldrh	r3, [r3, #6]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d033      	beq.n	8012478 <DFU_Download+0x90>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8012416:	2b02      	cmp	r3, #2
 8012418:	d004      	beq.n	8012424 <DFU_Download+0x3c>
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8012420:	2b05      	cmp	r3, #5
 8012422:	d124      	bne.n	801246e <DFU_Download+0x86>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8012424:	683b      	ldr	r3, [r7, #0]
 8012426:	885b      	ldrh	r3, [r3, #2]
 8012428:	461a      	mov	r2, r3
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 8012430:	683b      	ldr	r3, [r7, #0]
 8012432:	88db      	ldrh	r3, [r3, #6]
 8012434:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012438:	bf28      	it	cs
 801243a:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 801243e:	b29b      	uxth	r3, r3
 8012440:	461a      	mov	r2, r3
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	2203      	movs	r2, #3
 801244c:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
      hdfu->dev_status[4] = hdfu->dev_state;
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 801245c:	68f9      	ldr	r1, [r7, #12]
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8012464:	461a      	mov	r2, r3
 8012466:	6878      	ldr	r0, [r7, #4]
 8012468:	f001 fdb4 	bl	8013fd4 <USBD_CtlPrepareRx>
 801246c:	e02f      	b.n	80124ce <DFU_Download+0xe6>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 801246e:	6839      	ldr	r1, [r7, #0]
 8012470:	6878      	ldr	r0, [r7, #4]
 8012472:	f001 fd06 	bl	8013e82 <USBD_CtlError>
 8012476:	e02a      	b.n	80124ce <DFU_Download+0xe6>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation */
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 801247e:	2b05      	cmp	r3, #5
 8012480:	d004      	beq.n	801248c <DFU_Download+0xa4>
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8012488:	2b02      	cmp	r3, #2
 801248a:	d11a      	bne.n	80124c2 <DFU_Download+0xda>
        hdfu->dev_status[4] = hdfu->dev_state;
      }
      else
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */
      {
        hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	2201      	movs	r2, #1
 8012490:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
        hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	2206      	movs	r2, #6
 8012498:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	2200      	movs	r2, #0
 80124a0:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	2200      	movs	r2, #0
 80124a8:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	2200      	movs	r2, #0
 80124b0:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 80124c0:	e005      	b.n	80124ce <DFU_Download+0xe6>
      }
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 80124c2:	6839      	ldr	r1, [r7, #0]
 80124c4:	6878      	ldr	r0, [r7, #4]
 80124c6:	f001 fcdc 	bl	8013e82 <USBD_CtlError>
 80124ca:	e000      	b.n	80124ce <DFU_Download+0xe6>
    return;
 80124cc:	bf00      	nop
    }
  }
}
 80124ce:	3710      	adds	r7, #16
 80124d0:	46bd      	mov	sp, r7
 80124d2:	bd80      	pop	{r7, pc}

080124d4 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b088      	sub	sp, #32
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
 80124dc:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	32b0      	adds	r2, #176	@ 0xb0
 80124e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80124ec:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80124f4:	687a      	ldr	r2, [r7, #4]
 80124f6:	33b0      	adds	r3, #176	@ 0xb0
 80124f8:	009b      	lsls	r3, r3, #2
 80124fa:	4413      	add	r3, r2
 80124fc:	685b      	ldr	r3, [r3, #4]
 80124fe:	61bb      	str	r3, [r7, #24]
  uint8_t VendorCmdLength = 0U;
  uint8_t VendorCmdBuffer[DFU_VENDOR_CMD_MAX];
  uint8_t idx;
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */

  if (hdfu == NULL)
 8012500:	69fb      	ldr	r3, [r7, #28]
 8012502:	2b00      	cmp	r3, #0
 8012504:	f000 80ea 	beq.w	80126dc <DFU_Upload+0x208>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8012508:	683b      	ldr	r3, [r7, #0]
 801250a:	88db      	ldrh	r3, [r3, #6]
 801250c:	2b00      	cmp	r3, #0
 801250e:	f000 80ce 	beq.w	80126ae <DFU_Upload+0x1da>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8012512:	69fb      	ldr	r3, [r7, #28]
 8012514:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8012518:	2b02      	cmp	r3, #2
 801251a:	d005      	beq.n	8012528 <DFU_Upload+0x54>
 801251c:	69fb      	ldr	r3, [r7, #28]
 801251e:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8012522:	2b09      	cmp	r3, #9
 8012524:	f040 80b6 	bne.w	8012694 <DFU_Upload+0x1c0>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8012528:	683b      	ldr	r3, [r7, #0]
 801252a:	885b      	ldrh	r3, [r3, #2]
 801252c:	461a      	mov	r2, r3
 801252e:	69fb      	ldr	r3, [r7, #28]
 8012530:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 8012534:	683b      	ldr	r3, [r7, #0]
 8012536:	88db      	ldrh	r3, [r3, #6]
 8012538:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801253c:	bf28      	it	cs
 801253e:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 8012542:	b29b      	uxth	r3, r3
 8012544:	461a      	mov	r2, r3
 8012546:	69fb      	ldr	r3, [r7, #28]
 8012548:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 801254c:	69fb      	ldr	r3, [r7, #28]
 801254e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8012552:	2b00      	cmp	r3, #0
 8012554:	d12e      	bne.n	80125b4 <DFU_Upload+0xe0>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8012556:	69fb      	ldr	r3, [r7, #28]
 8012558:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 801255c:	2b03      	cmp	r3, #3
 801255e:	d901      	bls.n	8012564 <DFU_Upload+0x90>
 8012560:	2202      	movs	r2, #2
 8012562:	e000      	b.n	8012566 <DFU_Upload+0x92>
 8012564:	2209      	movs	r2, #9
 8012566:	69fb      	ldr	r3, [r7, #28]
 8012568:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

        hdfu->dev_status[1] = 0U;
 801256c:	69fb      	ldr	r3, [r7, #28]
 801256e:	2200      	movs	r2, #0
 8012570:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8012574:	69fb      	ldr	r3, [r7, #28]
 8012576:	2200      	movs	r2, #0
 8012578:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 801257c:	69fb      	ldr	r3, [r7, #28]
 801257e:	2200      	movs	r2, #0
 8012580:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 8012584:	69fb      	ldr	r3, [r7, #28]
 8012586:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 801258a:	69fb      	ldr	r3, [r7, #28]
 801258c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8012590:	69fb      	ldr	r3, [r7, #28]
 8012592:	2200      	movs	r2, #0
 8012594:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8012596:	69fb      	ldr	r3, [r7, #28]
 8012598:	2221      	movs	r2, #33	@ 0x21
 801259a:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 801259c:	69fb      	ldr	r3, [r7, #28]
 801259e:	2241      	movs	r2, #65	@ 0x41
 80125a0:	709a      	strb	r2, [r3, #2]

        CmdLength = 3U;
 80125a2:	2303      	movs	r3, #3
 80125a4:	60fb      	str	r3, [r7, #12]
          CmdLength += MIN(VendorCmdLength, DFU_VENDOR_CMD_MAX);
        }
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), CmdLength);
 80125a6:	69fb      	ldr	r3, [r7, #28]
 80125a8:	68fa      	ldr	r2, [r7, #12]
 80125aa:	4619      	mov	r1, r3
 80125ac:	6878      	ldr	r0, [r7, #4]
 80125ae:	f001 fce5 	bl	8013f7c <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 80125b2:	e094      	b.n	80126de <DFU_Upload+0x20a>
      }
      else if (hdfu->wblock_num > 1U)
 80125b4:	69fb      	ldr	r3, [r7, #28]
 80125b6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80125ba:	2b01      	cmp	r3, #1
 80125bc:	d94f      	bls.n	801265e <DFU_Upload+0x18a>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 80125be:	69fb      	ldr	r3, [r7, #28]
 80125c0:	2209      	movs	r2, #9
 80125c2:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

        hdfu->dev_status[1] = 0U;
 80125c6:	69fb      	ldr	r3, [r7, #28]
 80125c8:	2200      	movs	r2, #0
 80125ca:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 80125ce:	69fb      	ldr	r3, [r7, #28]
 80125d0:	2200      	movs	r2, #0
 80125d2:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 80125d6:	69fb      	ldr	r3, [r7, #28]
 80125d8:	2200      	movs	r2, #0
 80125da:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 80125de:	69fb      	ldr	r3, [r7, #28]
 80125e0:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 80125e4:	69fb      	ldr	r3, [r7, #28]
 80125e6:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        }

        if (VendorStatus == IS_DFU_PHY_ADDRESS)
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */
        {
          addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 80125ea:	69fb      	ldr	r3, [r7, #28]
 80125ec:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80125f0:	3b02      	subs	r3, #2
 80125f2:	029a      	lsls	r2, r3, #10
 80125f4:	69fb      	ldr	r3, [r7, #28]
 80125f6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80125fa:	4413      	add	r3, r2
 80125fc:	617b      	str	r3, [r7, #20]

          /* Return the physical address where data are stored */
          phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 80125fe:	69bb      	ldr	r3, [r7, #24]
 8012600:	695b      	ldr	r3, [r3, #20]
 8012602:	6978      	ldr	r0, [r7, #20]
 8012604:	69f9      	ldr	r1, [r7, #28]
 8012606:	69fa      	ldr	r2, [r7, #28]
 8012608:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 801260c:	4798      	blx	r3
 801260e:	6138      	str	r0, [r7, #16]

          if (phaddr == NULL)
 8012610:	693b      	ldr	r3, [r7, #16]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d11a      	bne.n	801264c <DFU_Upload+0x178>
          {
            hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8012616:	69fb      	ldr	r3, [r7, #28]
 8012618:	220f      	movs	r2, #15
 801261a:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

            hdfu->dev_status[1] = 0U;
 801261e:	69fb      	ldr	r3, [r7, #28]
 8012620:	2200      	movs	r2, #0
 8012622:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
            hdfu->dev_status[2] = 0U;
 8012626:	69fb      	ldr	r3, [r7, #28]
 8012628:	2200      	movs	r2, #0
 801262a:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
            hdfu->dev_status[3] = 0U;
 801262e:	69fb      	ldr	r3, [r7, #28]
 8012630:	2200      	movs	r2, #0
 8012632:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
            hdfu->dev_status[4] = hdfu->dev_state;
 8012636:	69fb      	ldr	r3, [r7, #28]
 8012638:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 801263c:	69fb      	ldr	r3, [r7, #28]
 801263e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

            /* Call the error management function (command will be NAKed) */
            USBD_CtlError(pdev, req);
 8012642:	6839      	ldr	r1, [r7, #0]
 8012644:	6878      	ldr	r0, [r7, #4]
 8012646:	f001 fc1c 	bl	8013e82 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 801264a:	e048      	b.n	80126de <DFU_Upload+0x20a>
          }
          else
          {
            /* Send the status data over EP0 */
            (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 801264c:	69fb      	ldr	r3, [r7, #28]
 801264e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8012652:	461a      	mov	r2, r3
 8012654:	6939      	ldr	r1, [r7, #16]
 8012656:	6878      	ldr	r0, [r7, #4]
 8012658:	f001 fc90 	bl	8013f7c <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 801265c:	e03f      	b.n	80126de <DFU_Upload+0x20a>
          }
        }
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 801265e:	69fb      	ldr	r3, [r7, #28]
 8012660:	220f      	movs	r2, #15
 8012662:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

        hdfu->dev_status[1] = 0U;
 8012666:	69fb      	ldr	r3, [r7, #28]
 8012668:	2200      	movs	r2, #0
 801266a:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 801266e:	69fb      	ldr	r3, [r7, #28]
 8012670:	2200      	movs	r2, #0
 8012672:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8012676:	69fb      	ldr	r3, [r7, #28]
 8012678:	2200      	movs	r2, #0
 801267a:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 801267e:	69fb      	ldr	r3, [r7, #28]
 8012680:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8012684:	69fb      	ldr	r3, [r7, #28]
 8012686:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        /* Call the error management function (command will be NAKed) */
        USBD_CtlError(pdev, req);
 801268a:	6839      	ldr	r1, [r7, #0]
 801268c:	6878      	ldr	r0, [r7, #4]
 801268e:	f001 fbf8 	bl	8013e82 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 8012692:	e024      	b.n	80126de <DFU_Upload+0x20a>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 8012694:	69fb      	ldr	r3, [r7, #28]
 8012696:	2200      	movs	r2, #0
 8012698:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 801269c:	69fb      	ldr	r3, [r7, #28]
 801269e:	2200      	movs	r2, #0
 80126a0:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

      /* Call the error management function (command will be NAKed) */
      USBD_CtlError(pdev, req);
 80126a4:	6839      	ldr	r1, [r7, #0]
 80126a6:	6878      	ldr	r0, [r7, #4]
 80126a8:	f001 fbeb 	bl	8013e82 <USBD_CtlError>
 80126ac:	e017      	b.n	80126de <DFU_Upload+0x20a>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 80126ae:	69fb      	ldr	r3, [r7, #28]
 80126b0:	2202      	movs	r2, #2
 80126b2:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

    hdfu->dev_status[1] = 0U;
 80126b6:	69fb      	ldr	r3, [r7, #28]
 80126b8:	2200      	movs	r2, #0
 80126ba:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 80126be:	69fb      	ldr	r3, [r7, #28]
 80126c0:	2200      	movs	r2, #0
 80126c2:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 80126c6:	69fb      	ldr	r3, [r7, #28]
 80126c8:	2200      	movs	r2, #0
 80126ca:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 80126ce:	69fb      	ldr	r3, [r7, #28]
 80126d0:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 80126d4:	69fb      	ldr	r3, [r7, #28]
 80126d6:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 80126da:	e000      	b.n	80126de <DFU_Upload+0x20a>
    return;
 80126dc:	bf00      	nop
  }
}
 80126de:	3720      	adds	r7, #32
 80126e0:	46bd      	mov	sp, r7
 80126e2:	bd80      	pop	{r7, pc}

080126e4 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 80126e4:	b580      	push	{r7, lr}
 80126e6:	b086      	sub	sp, #24
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	32b0      	adds	r2, #176	@ 0xb0
 80126f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80126fa:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012702:	687a      	ldr	r2, [r7, #4]
 8012704:	33b0      	adds	r3, #176	@ 0xb0
 8012706:	009b      	lsls	r3, r3, #2
 8012708:	4413      	add	r3, r2
 801270a:	685b      	ldr	r3, [r3, #4]
 801270c:	613b      	str	r3, [r7, #16]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8012714:	4618      	mov	r0, r3
 8012716:	f000 f9df 	bl	8012ad8 <USBD_DFU_GetDfuFuncDesc>
 801271a:	60f8      	str	r0, [r7, #12]

  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 801271c:	697b      	ldr	r3, [r7, #20]
 801271e:	2b00      	cmp	r3, #0
 8012720:	f000 80a8 	beq.w	8012874 <DFU_GetStatus+0x190>
 8012724:	693b      	ldr	r3, [r7, #16]
 8012726:	2b00      	cmp	r3, #0
 8012728:	f000 80a4 	beq.w	8012874 <DFU_GetStatus+0x190>
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	2b00      	cmp	r3, #0
 8012730:	f000 80a0 	beq.w	8012874 <DFU_GetStatus+0x190>
  {
    return;
  }

  switch (hdfu->dev_state)
 8012734:	697b      	ldr	r3, [r7, #20]
 8012736:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 801273a:	2b03      	cmp	r3, #3
 801273c:	d002      	beq.n	8012744 <DFU_GetStatus+0x60>
 801273e:	2b06      	cmp	r3, #6
 8012740:	d051      	beq.n	80127e6 <DFU_GetStatus+0x102>
        }
      }
      break;

    default:
      break;
 8012742:	e08e      	b.n	8012862 <DFU_GetStatus+0x17e>
      if (hdfu->wlength != 0U)
 8012744:	697b      	ldr	r3, [r7, #20]
 8012746:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 801274a:	2b00      	cmp	r3, #0
 801274c:	d034      	beq.n	80127b8 <DFU_GetStatus+0xd4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 801274e:	697b      	ldr	r3, [r7, #20]
 8012750:	2204      	movs	r2, #4
 8012752:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 8012756:	697b      	ldr	r3, [r7, #20]
 8012758:	2200      	movs	r2, #0
 801275a:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 801275e:	697b      	ldr	r3, [r7, #20]
 8012760:	2200      	movs	r2, #0
 8012762:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8012766:	697b      	ldr	r3, [r7, #20]
 8012768:	2200      	movs	r2, #0
 801276a:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 801276e:	697b      	ldr	r3, [r7, #20]
 8012770:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8012774:	697b      	ldr	r3, [r7, #20]
 8012776:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 801277a:	697b      	ldr	r3, [r7, #20]
 801277c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8012780:	2b00      	cmp	r3, #0
 8012782:	d10e      	bne.n	80127a2 <DFU_GetStatus+0xbe>
 8012784:	697b      	ldr	r3, [r7, #20]
 8012786:	781b      	ldrb	r3, [r3, #0]
 8012788:	2b41      	cmp	r3, #65	@ 0x41
 801278a:	d10a      	bne.n	80127a2 <DFU_GetStatus+0xbe>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 801278c:	693b      	ldr	r3, [r7, #16]
 801278e:	699b      	ldr	r3, [r3, #24]
 8012790:	697a      	ldr	r2, [r7, #20]
 8012792:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 8012796:	697a      	ldr	r2, [r7, #20]
 8012798:	f202 4214 	addw	r2, r2, #1044	@ 0x414
 801279c:	2100      	movs	r1, #0
 801279e:	4798      	blx	r3
      break;
 80127a0:	e05f      	b.n	8012862 <DFU_GetStatus+0x17e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 80127a2:	693b      	ldr	r3, [r7, #16]
 80127a4:	699b      	ldr	r3, [r3, #24]
 80127a6:	697a      	ldr	r2, [r7, #20]
 80127a8:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 80127ac:	697a      	ldr	r2, [r7, #20]
 80127ae:	f202 4214 	addw	r2, r2, #1044	@ 0x414
 80127b2:	2101      	movs	r1, #1
 80127b4:	4798      	blx	r3
      break;
 80127b6:	e054      	b.n	8012862 <DFU_GetStatus+0x17e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 80127b8:	697b      	ldr	r3, [r7, #20]
 80127ba:	2205      	movs	r2, #5
 80127bc:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 80127c0:	697b      	ldr	r3, [r7, #20]
 80127c2:	2200      	movs	r2, #0
 80127c4:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 80127c8:	697b      	ldr	r3, [r7, #20]
 80127ca:	2200      	movs	r2, #0
 80127cc:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 80127d0:	697b      	ldr	r3, [r7, #20]
 80127d2:	2200      	movs	r2, #0
 80127d4:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 80127d8:	697b      	ldr	r3, [r7, #20]
 80127da:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 80127de:	697b      	ldr	r3, [r7, #20]
 80127e0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      break;
 80127e4:	e03d      	b.n	8012862 <DFU_GetStatus+0x17e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 80127e6:	697b      	ldr	r3, [r7, #20]
 80127e8:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 80127ec:	2b01      	cmp	r3, #1
 80127ee:	d116      	bne.n	801281e <DFU_GetStatus+0x13a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 80127f0:	697b      	ldr	r3, [r7, #20]
 80127f2:	2207      	movs	r2, #7
 80127f4:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
        hdfu->dev_status[1] = 1U;             /* bwPollTimeout = 1ms */
 80127f8:	697b      	ldr	r3, [r7, #20]
 80127fa:	2201      	movs	r2, #1
 80127fc:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8012800:	697b      	ldr	r3, [r7, #20]
 8012802:	2200      	movs	r2, #0
 8012804:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8012808:	697b      	ldr	r3, [r7, #20]
 801280a:	2200      	movs	r2, #0
 801280c:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 8012810:	697b      	ldr	r3, [r7, #20]
 8012812:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8012816:	697b      	ldr	r3, [r7, #20]
 8012818:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      break;
 801281c:	e020      	b.n	8012860 <DFU_GetStatus+0x17c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 801281e:	697b      	ldr	r3, [r7, #20]
 8012820:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 8012824:	2b00      	cmp	r3, #0
 8012826:	d11b      	bne.n	8012860 <DFU_GetStatus+0x17c>
            ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U))
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	789b      	ldrb	r3, [r3, #2]
 801282c:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8012830:	2b00      	cmp	r3, #0
 8012832:	d015      	beq.n	8012860 <DFU_GetStatus+0x17c>
          hdfu->dev_state = DFU_STATE_IDLE;
 8012834:	697b      	ldr	r3, [r7, #20]
 8012836:	2202      	movs	r2, #2
 8012838:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
          hdfu->dev_status[1] = 0U;
 801283c:	697b      	ldr	r3, [r7, #20]
 801283e:	2200      	movs	r2, #0
 8012840:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
          hdfu->dev_status[2] = 0U;
 8012844:	697b      	ldr	r3, [r7, #20]
 8012846:	2200      	movs	r2, #0
 8012848:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
          hdfu->dev_status[3] = 0U;
 801284c:	697b      	ldr	r3, [r7, #20]
 801284e:	2200      	movs	r2, #0
 8012850:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
          hdfu->dev_status[4] = hdfu->dev_state;
 8012854:	697b      	ldr	r3, [r7, #20]
 8012856:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 801285a:	697b      	ldr	r3, [r7, #20]
 801285c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      break;
 8012860:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8012862:	697b      	ldr	r3, [r7, #20]
 8012864:	f203 4314 	addw	r3, r3, #1044	@ 0x414
 8012868:	2206      	movs	r2, #6
 801286a:	4619      	mov	r1, r3
 801286c:	6878      	ldr	r0, [r7, #4]
 801286e:	f001 fb85 	bl	8013f7c <USBD_CtlSendData>
 8012872:	e000      	b.n	8012876 <DFU_GetStatus+0x192>
    return;
 8012874:	bf00      	nop
}
 8012876:	3718      	adds	r7, #24
 8012878:	46bd      	mov	sp, r7
 801287a:	bd80      	pop	{r7, pc}

0801287c <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 801287c:	b480      	push	{r7}
 801287e:	b085      	sub	sp, #20
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	32b0      	adds	r2, #176	@ 0xb0
 801288e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012892:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d042      	beq.n	8012920 <DFU_ClearStatus+0xa4>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 80128a0:	2b0a      	cmp	r3, #10
 80128a2:	d11e      	bne.n	80128e2 <DFU_ClearStatus+0x66>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	2202      	movs	r2, #2
 80128a8:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	2200      	movs	r2, #0
 80128b0:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	2200      	movs	r2, #0
 80128b8:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	2200      	movs	r2, #0
 80128c0:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	2200      	movs	r2, #0
 80128c8:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	2200      	movs	r2, #0
 80128dc:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
 80128e0:	e01f      	b.n	8012922 <DFU_ClearStatus+0xa6>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	220a      	movs	r2, #10
 80128e6:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	220e      	movs	r2, #14
 80128ee:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	2200      	movs	r2, #0
 80128f6:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	2200      	movs	r2, #0
 80128fe:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	2200      	movs	r2, #0
 8012906:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	2200      	movs	r2, #0
 801291a:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
 801291e:	e000      	b.n	8012922 <DFU_ClearStatus+0xa6>
    return;
 8012920:	bf00      	nop
  }
}
 8012922:	3714      	adds	r7, #20
 8012924:	46bd      	mov	sp, r7
 8012926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292a:	4770      	bx	lr

0801292c <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 801292c:	b580      	push	{r7, lr}
 801292e:	b084      	sub	sp, #16
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	32b0      	adds	r2, #176	@ 0xb0
 801293e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012942:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d008      	beq.n	801295c <DFU_GetState+0x30>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8012950:	2201      	movs	r2, #1
 8012952:	4619      	mov	r1, r3
 8012954:	6878      	ldr	r0, [r7, #4]
 8012956:	f001 fb11 	bl	8013f7c <USBD_CtlSendData>
 801295a:	e000      	b.n	801295e <DFU_GetState+0x32>
    return;
 801295c:	bf00      	nop
}
 801295e:	3710      	adds	r7, #16
 8012960:	46bd      	mov	sp, r7
 8012962:	bd80      	pop	{r7, pc}

08012964 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 8012964:	b480      	push	{r7}
 8012966:	b085      	sub	sp, #20
 8012968:	af00      	add	r7, sp, #0
 801296a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	32b0      	adds	r2, #176	@ 0xb0
 8012976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801297a:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d03f      	beq.n	8012a02 <DFU_Abort+0x9e>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8012988:	2b02      	cmp	r3, #2
 801298a:	d013      	beq.n	80129b4 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8012992:	2b03      	cmp	r3, #3
 8012994:	d00e      	beq.n	80129b4 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 801299c:	2b05      	cmp	r3, #5
 801299e:	d009      	beq.n	80129b4 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 80129a6:	2b06      	cmp	r3, #6
 80129a8:	d004      	beq.n	80129b4 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 80129b0:	2b09      	cmp	r3, #9
 80129b2:	d127      	bne.n	8012a04 <DFU_Abort+0xa0>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	2202      	movs	r2, #2
 80129b8:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	2200      	movs	r2, #0
 80129c0:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	2200      	movs	r2, #0
 80129c8:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	2200      	movs	r2, #0
 80129d0:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	2200      	movs	r2, #0
 80129d8:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	2200      	movs	r2, #0
 80129ec:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    hdfu->wblock_num = 0U;
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	2200      	movs	r2, #0
 80129f4:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	2200      	movs	r2, #0
 80129fc:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8012a00:	e000      	b.n	8012a04 <DFU_Abort+0xa0>
    return;
 8012a02:	bf00      	nop
  }
}
 8012a04:	3714      	adds	r7, #20
 8012a06:	46bd      	mov	sp, r7
 8012a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a0c:	4770      	bx	lr

08012a0e <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8012a0e:	b580      	push	{r7, lr}
 8012a10:	b086      	sub	sp, #24
 8012a12:	af00      	add	r7, sp, #0
 8012a14:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	32b0      	adds	r2, #176	@ 0xb0
 8012a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a24:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012a2c:	687a      	ldr	r2, [r7, #4]
 8012a2e:	33b0      	adds	r3, #176	@ 0xb0
 8012a30:	009b      	lsls	r3, r3, #2
 8012a32:	4413      	add	r3, r2
 8012a34:	685b      	ldr	r3, [r3, #4]
 8012a36:	613b      	str	r3, [r7, #16]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8012a3e:	4618      	mov	r0, r3
 8012a40:	f000 f84a 	bl	8012ad8 <USBD_DFU_GetDfuFuncDesc>
 8012a44:	60f8      	str	r0, [r7, #12]

  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 8012a46:	697b      	ldr	r3, [r7, #20]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d041      	beq.n	8012ad0 <DFU_Leave+0xc2>
 8012a4c:	693b      	ldr	r3, [r7, #16]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d03e      	beq.n	8012ad0 <DFU_Leave+0xc2>
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d03b      	beq.n	8012ad0 <DFU_Leave+0xc2>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8012a58:	697b      	ldr	r3, [r7, #20]
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d

  if ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U)
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	789b      	ldrb	r3, [r3, #2]
 8012a64:	f003 0304 	and.w	r3, r3, #4
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d016      	beq.n	8012a9a <DFU_Leave+0x8c>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8012a6c:	697b      	ldr	r3, [r7, #20]
 8012a6e:	2206      	movs	r2, #6
 8012a70:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

    hdfu->dev_status[1] = 0U;
 8012a74:	697b      	ldr	r3, [r7, #20]
 8012a76:	2200      	movs	r2, #0
 8012a78:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8012a7c:	697b      	ldr	r3, [r7, #20]
 8012a7e:	2200      	movs	r2, #0
 8012a80:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 8012a84:	697b      	ldr	r3, [r7, #20]
 8012a86:	2200      	movs	r2, #0
 8012a88:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 8012a8c:	697b      	ldr	r3, [r7, #20]
 8012a8e:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8012a92:	697b      	ldr	r3, [r7, #20]
 8012a94:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    return;
 8012a98:	e01b      	b.n	8012ad2 <DFU_Leave+0xc4>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8012a9a:	697b      	ldr	r3, [r7, #20]
 8012a9c:	2208      	movs	r2, #8
 8012a9e:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

    hdfu->dev_status[1] = 0U;
 8012aa2:	697b      	ldr	r3, [r7, #20]
 8012aa4:	2200      	movs	r2, #0
 8012aa6:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8012aaa:	697b      	ldr	r3, [r7, #20]
 8012aac:	2200      	movs	r2, #0
 8012aae:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 8012ab2:	697b      	ldr	r3, [r7, #20]
 8012ab4:	2200      	movs	r2, #0
 8012ab6:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 8012aba:	697b      	ldr	r3, [r7, #20]
 8012abc:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8012ac0:	697b      	ldr	r3, [r7, #20]
 8012ac2:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 8012ac6:	6878      	ldr	r0, [r7, #4]
 8012ac8:	f000 f8a6 	bl	8012c18 <USBD_Stop>
#if (USBD_DFU_VENDOR_EXIT_ENABLED == 1U)
    /* Jump should be ensured by user application */
    DfuInterface->LeaveDFU(hdfu->data_ptr);
#else
    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 8012acc:	f7ff f8ba 	bl	8011c44 <__NVIC_SystemReset>
    return;
 8012ad0:	bf00      	nop
#endif /* USBD_DFU_VENDOR_EXIT_ENABLED */

    /* The next instructions will not be reached (system reset) */
  }
}
 8012ad2:	3718      	adds	r7, #24
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	bd80      	pop	{r7, pc}

08012ad8 <USBD_DFU_GetDfuFuncDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the DFU descriptor
  */
static void *USBD_DFU_GetDfuFuncDesc(uint8_t *pConfDesc)
{
 8012ad8:	b580      	push	{r7, lr}
 8012ada:	b086      	sub	sp, #24
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	617b      	str	r3, [r7, #20]
  uint8_t *pDfuDesc = NULL;
 8012ae8:	2300      	movs	r3, #0
 8012aea:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	885b      	ldrh	r3, [r3, #2]
 8012af0:	b29b      	uxth	r3, r3
 8012af2:	68fa      	ldr	r2, [r7, #12]
 8012af4:	7812      	ldrb	r2, [r2, #0]
 8012af6:	4293      	cmp	r3, r2
 8012af8:	d917      	bls.n	8012b2a <USBD_DFU_GetDfuFuncDesc+0x52>
  {
    ptr = desc->bLength;
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	781b      	ldrb	r3, [r3, #0]
 8012afe:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8012b00:	e00d      	b.n	8012b1e <USBD_DFU_GetDfuFuncDesc+0x46>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8012b02:	f107 030a 	add.w	r3, r7, #10
 8012b06:	4619      	mov	r1, r3
 8012b08:	6978      	ldr	r0, [r7, #20]
 8012b0a:	f000 fb6b 	bl	80131e4 <USBD_GetNextDesc>
 8012b0e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == DFU_DESCRIPTOR_TYPE)
 8012b10:	697b      	ldr	r3, [r7, #20]
 8012b12:	785b      	ldrb	r3, [r3, #1]
 8012b14:	2b21      	cmp	r3, #33	@ 0x21
 8012b16:	d102      	bne.n	8012b1e <USBD_DFU_GetDfuFuncDesc+0x46>
      {
        pDfuDesc = (uint8_t *)pdesc;
 8012b18:	697b      	ldr	r3, [r7, #20]
 8012b1a:	613b      	str	r3, [r7, #16]
        break;
 8012b1c:	e005      	b.n	8012b2a <USBD_DFU_GetDfuFuncDesc+0x52>
    while (ptr < desc->wTotalLength)
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	885b      	ldrh	r3, [r3, #2]
 8012b22:	b29a      	uxth	r2, r3
 8012b24:	897b      	ldrh	r3, [r7, #10]
 8012b26:	429a      	cmp	r2, r3
 8012b28:	d8eb      	bhi.n	8012b02 <USBD_DFU_GetDfuFuncDesc+0x2a>
      }
    }
  }
  return pDfuDesc;
 8012b2a:	693b      	ldr	r3, [r7, #16]
}
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	3718      	adds	r7, #24
 8012b30:	46bd      	mov	sp, r7
 8012b32:	bd80      	pop	{r7, pc}

08012b34 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8012b34:	b580      	push	{r7, lr}
 8012b36:	b086      	sub	sp, #24
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	60f8      	str	r0, [r7, #12]
 8012b3c:	60b9      	str	r1, [r7, #8]
 8012b3e:	4613      	mov	r3, r2
 8012b40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d101      	bne.n	8012b4c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8012b48:	2303      	movs	r3, #3
 8012b4a:	e01f      	b.n	8012b8c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	2200      	movs	r2, #0
 8012b50:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	2200      	movs	r2, #0
 8012b58:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	2200      	movs	r2, #0
 8012b60:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8012b64:	68bb      	ldr	r3, [r7, #8]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d003      	beq.n	8012b72 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	68ba      	ldr	r2, [r7, #8]
 8012b6e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	2201      	movs	r2, #1
 8012b76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	79fa      	ldrb	r2, [r7, #7]
 8012b7e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8012b80:	68f8      	ldr	r0, [r7, #12]
 8012b82:	f006 f8bb 	bl	8018cfc <USBD_LL_Init>
 8012b86:	4603      	mov	r3, r0
 8012b88:	75fb      	strb	r3, [r7, #23]

  return ret;
 8012b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	3718      	adds	r7, #24
 8012b90:	46bd      	mov	sp, r7
 8012b92:	bd80      	pop	{r7, pc}

08012b94 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b084      	sub	sp, #16
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	6078      	str	r0, [r7, #4]
 8012b9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8012ba2:	683b      	ldr	r3, [r7, #0]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d101      	bne.n	8012bac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8012ba8:	2303      	movs	r3, #3
 8012baa:	e025      	b.n	8012bf8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	683a      	ldr	r2, [r7, #0]
 8012bb0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	32ae      	adds	r2, #174	@ 0xae
 8012bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d00f      	beq.n	8012be8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	32ae      	adds	r2, #174	@ 0xae
 8012bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012bd8:	f107 020e 	add.w	r2, r7, #14
 8012bdc:	4610      	mov	r0, r2
 8012bde:	4798      	blx	r3
 8012be0:	4602      	mov	r2, r0
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012bee:	1c5a      	adds	r2, r3, #1
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8012bf6:	2300      	movs	r3, #0
}
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	3710      	adds	r7, #16
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	bd80      	pop	{r7, pc}

08012c00 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b082      	sub	sp, #8
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8012c08:	6878      	ldr	r0, [r7, #4]
 8012c0a:	f006 f8bf 	bl	8018d8c <USBD_LL_Start>
 8012c0e:	4603      	mov	r3, r0
}
 8012c10:	4618      	mov	r0, r3
 8012c12:	3708      	adds	r7, #8
 8012c14:	46bd      	mov	sp, r7
 8012c16:	bd80      	pop	{r7, pc}

08012c18 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b082      	sub	sp, #8
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8012c20:	6878      	ldr	r0, [r7, #4]
 8012c22:	f006 f8ce 	bl	8018dc2 <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d009      	beq.n	8012c44 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012c36:	685b      	ldr	r3, [r3, #4]
 8012c38:	687a      	ldr	r2, [r7, #4]
 8012c3a:	6852      	ldr	r2, [r2, #4]
 8012c3c:	b2d2      	uxtb	r2, r2
 8012c3e:	4611      	mov	r1, r2
 8012c40:	6878      	ldr	r0, [r7, #4]
 8012c42:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 8012c44:	2300      	movs	r3, #0
}
 8012c46:	4618      	mov	r0, r3
 8012c48:	3708      	adds	r7, #8
 8012c4a:	46bd      	mov	sp, r7
 8012c4c:	bd80      	pop	{r7, pc}

08012c4e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8012c4e:	b480      	push	{r7}
 8012c50:	b083      	sub	sp, #12
 8012c52:	af00      	add	r7, sp, #0
 8012c54:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012c56:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8012c58:	4618      	mov	r0, r3
 8012c5a:	370c      	adds	r7, #12
 8012c5c:	46bd      	mov	sp, r7
 8012c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c62:	4770      	bx	lr

08012c64 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b084      	sub	sp, #16
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	6078      	str	r0, [r7, #4]
 8012c6c:	460b      	mov	r3, r1
 8012c6e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8012c70:	2300      	movs	r3, #0
 8012c72:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d009      	beq.n	8012c92 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	78fa      	ldrb	r2, [r7, #3]
 8012c88:	4611      	mov	r1, r2
 8012c8a:	6878      	ldr	r0, [r7, #4]
 8012c8c:	4798      	blx	r3
 8012c8e:	4603      	mov	r3, r0
 8012c90:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c94:	4618      	mov	r0, r3
 8012c96:	3710      	adds	r7, #16
 8012c98:	46bd      	mov	sp, r7
 8012c9a:	bd80      	pop	{r7, pc}

08012c9c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	b084      	sub	sp, #16
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	6078      	str	r0, [r7, #4]
 8012ca4:	460b      	mov	r3, r1
 8012ca6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8012ca8:	2300      	movs	r3, #0
 8012caa:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012cb2:	685b      	ldr	r3, [r3, #4]
 8012cb4:	78fa      	ldrb	r2, [r7, #3]
 8012cb6:	4611      	mov	r1, r2
 8012cb8:	6878      	ldr	r0, [r7, #4]
 8012cba:	4798      	blx	r3
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d001      	beq.n	8012cc6 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8012cc2:	2303      	movs	r3, #3
 8012cc4:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cc8:	4618      	mov	r0, r3
 8012cca:	3710      	adds	r7, #16
 8012ccc:	46bd      	mov	sp, r7
 8012cce:	bd80      	pop	{r7, pc}

08012cd0 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	b084      	sub	sp, #16
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	6078      	str	r0, [r7, #4]
 8012cd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012ce0:	6839      	ldr	r1, [r7, #0]
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	f001 f893 	bl	8013e0e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	2201      	movs	r2, #1
 8012cec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8012cf6:	461a      	mov	r2, r3
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012d04:	f003 031f 	and.w	r3, r3, #31
 8012d08:	2b02      	cmp	r3, #2
 8012d0a:	d01a      	beq.n	8012d42 <USBD_LL_SetupStage+0x72>
 8012d0c:	2b02      	cmp	r3, #2
 8012d0e:	d822      	bhi.n	8012d56 <USBD_LL_SetupStage+0x86>
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d002      	beq.n	8012d1a <USBD_LL_SetupStage+0x4a>
 8012d14:	2b01      	cmp	r3, #1
 8012d16:	d00a      	beq.n	8012d2e <USBD_LL_SetupStage+0x5e>
 8012d18:	e01d      	b.n	8012d56 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012d20:	4619      	mov	r1, r3
 8012d22:	6878      	ldr	r0, [r7, #4]
 8012d24:	f000 fa9a 	bl	801325c <USBD_StdDevReq>
 8012d28:	4603      	mov	r3, r0
 8012d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8012d2c:	e020      	b.n	8012d70 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012d34:	4619      	mov	r1, r3
 8012d36:	6878      	ldr	r0, [r7, #4]
 8012d38:	f000 fb02 	bl	8013340 <USBD_StdItfReq>
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8012d40:	e016      	b.n	8012d70 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012d48:	4619      	mov	r1, r3
 8012d4a:	6878      	ldr	r0, [r7, #4]
 8012d4c:	f000 fb64 	bl	8013418 <USBD_StdEPReq>
 8012d50:	4603      	mov	r3, r0
 8012d52:	73fb      	strb	r3, [r7, #15]
      break;
 8012d54:	e00c      	b.n	8012d70 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012d5c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8012d60:	b2db      	uxtb	r3, r3
 8012d62:	4619      	mov	r1, r3
 8012d64:	6878      	ldr	r0, [r7, #4]
 8012d66:	f006 f86d 	bl	8018e44 <USBD_LL_StallEP>
 8012d6a:	4603      	mov	r3, r0
 8012d6c:	73fb      	strb	r3, [r7, #15]
      break;
 8012d6e:	bf00      	nop
  }

  return ret;
 8012d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d72:	4618      	mov	r0, r3
 8012d74:	3710      	adds	r7, #16
 8012d76:	46bd      	mov	sp, r7
 8012d78:	bd80      	pop	{r7, pc}

08012d7a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012d7a:	b580      	push	{r7, lr}
 8012d7c:	b086      	sub	sp, #24
 8012d7e:	af00      	add	r7, sp, #0
 8012d80:	60f8      	str	r0, [r7, #12]
 8012d82:	460b      	mov	r3, r1
 8012d84:	607a      	str	r2, [r7, #4]
 8012d86:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8012d88:	2300      	movs	r3, #0
 8012d8a:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8012d8c:	7afb      	ldrb	r3, [r7, #11]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d16e      	bne.n	8012e70 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8012d98:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012da0:	2b03      	cmp	r3, #3
 8012da2:	f040 8098 	bne.w	8012ed6 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8012da6:	693b      	ldr	r3, [r7, #16]
 8012da8:	689a      	ldr	r2, [r3, #8]
 8012daa:	693b      	ldr	r3, [r7, #16]
 8012dac:	68db      	ldr	r3, [r3, #12]
 8012dae:	429a      	cmp	r2, r3
 8012db0:	d913      	bls.n	8012dda <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8012db2:	693b      	ldr	r3, [r7, #16]
 8012db4:	689a      	ldr	r2, [r3, #8]
 8012db6:	693b      	ldr	r3, [r7, #16]
 8012db8:	68db      	ldr	r3, [r3, #12]
 8012dba:	1ad2      	subs	r2, r2, r3
 8012dbc:	693b      	ldr	r3, [r7, #16]
 8012dbe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8012dc0:	693b      	ldr	r3, [r7, #16]
 8012dc2:	68da      	ldr	r2, [r3, #12]
 8012dc4:	693b      	ldr	r3, [r7, #16]
 8012dc6:	689b      	ldr	r3, [r3, #8]
 8012dc8:	4293      	cmp	r3, r2
 8012dca:	bf28      	it	cs
 8012dcc:	4613      	movcs	r3, r2
 8012dce:	461a      	mov	r2, r3
 8012dd0:	6879      	ldr	r1, [r7, #4]
 8012dd2:	68f8      	ldr	r0, [r7, #12]
 8012dd4:	f001 f91b 	bl	801400e <USBD_CtlContinueRx>
 8012dd8:	e07d      	b.n	8012ed6 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012de0:	f003 031f 	and.w	r3, r3, #31
 8012de4:	2b02      	cmp	r3, #2
 8012de6:	d014      	beq.n	8012e12 <USBD_LL_DataOutStage+0x98>
 8012de8:	2b02      	cmp	r3, #2
 8012dea:	d81d      	bhi.n	8012e28 <USBD_LL_DataOutStage+0xae>
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d002      	beq.n	8012df6 <USBD_LL_DataOutStage+0x7c>
 8012df0:	2b01      	cmp	r3, #1
 8012df2:	d003      	beq.n	8012dfc <USBD_LL_DataOutStage+0x82>
 8012df4:	e018      	b.n	8012e28 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8012df6:	2300      	movs	r3, #0
 8012df8:	75bb      	strb	r3, [r7, #22]
            break;
 8012dfa:	e018      	b.n	8012e2e <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8012e02:	b2db      	uxtb	r3, r3
 8012e04:	4619      	mov	r1, r3
 8012e06:	68f8      	ldr	r0, [r7, #12]
 8012e08:	f000 f9d2 	bl	80131b0 <USBD_CoreFindIF>
 8012e0c:	4603      	mov	r3, r0
 8012e0e:	75bb      	strb	r3, [r7, #22]
            break;
 8012e10:	e00d      	b.n	8012e2e <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8012e18:	b2db      	uxtb	r3, r3
 8012e1a:	4619      	mov	r1, r3
 8012e1c:	68f8      	ldr	r0, [r7, #12]
 8012e1e:	f000 f9d4 	bl	80131ca <USBD_CoreFindEP>
 8012e22:	4603      	mov	r3, r0
 8012e24:	75bb      	strb	r3, [r7, #22]
            break;
 8012e26:	e002      	b.n	8012e2e <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8012e28:	2300      	movs	r3, #0
 8012e2a:	75bb      	strb	r3, [r7, #22]
            break;
 8012e2c:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8012e2e:	7dbb      	ldrb	r3, [r7, #22]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d119      	bne.n	8012e68 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012e3a:	b2db      	uxtb	r3, r3
 8012e3c:	2b03      	cmp	r3, #3
 8012e3e:	d113      	bne.n	8012e68 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8012e40:	7dba      	ldrb	r2, [r7, #22]
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	32ae      	adds	r2, #174	@ 0xae
 8012e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e4a:	691b      	ldr	r3, [r3, #16]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d00b      	beq.n	8012e68 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8012e50:	7dba      	ldrb	r2, [r7, #22]
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8012e58:	7dba      	ldrb	r2, [r7, #22]
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	32ae      	adds	r2, #174	@ 0xae
 8012e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e62:	691b      	ldr	r3, [r3, #16]
 8012e64:	68f8      	ldr	r0, [r7, #12]
 8012e66:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8012e68:	68f8      	ldr	r0, [r7, #12]
 8012e6a:	f001 f8e1 	bl	8014030 <USBD_CtlSendStatus>
 8012e6e:	e032      	b.n	8012ed6 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8012e70:	7afb      	ldrb	r3, [r7, #11]
 8012e72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012e76:	b2db      	uxtb	r3, r3
 8012e78:	4619      	mov	r1, r3
 8012e7a:	68f8      	ldr	r0, [r7, #12]
 8012e7c:	f000 f9a5 	bl	80131ca <USBD_CoreFindEP>
 8012e80:	4603      	mov	r3, r0
 8012e82:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012e84:	7dbb      	ldrb	r3, [r7, #22]
 8012e86:	2bff      	cmp	r3, #255	@ 0xff
 8012e88:	d025      	beq.n	8012ed6 <USBD_LL_DataOutStage+0x15c>
 8012e8a:	7dbb      	ldrb	r3, [r7, #22]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d122      	bne.n	8012ed6 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012e96:	b2db      	uxtb	r3, r3
 8012e98:	2b03      	cmp	r3, #3
 8012e9a:	d117      	bne.n	8012ecc <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8012e9c:	7dba      	ldrb	r2, [r7, #22]
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	32ae      	adds	r2, #174	@ 0xae
 8012ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ea6:	699b      	ldr	r3, [r3, #24]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d00f      	beq.n	8012ecc <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8012eac:	7dba      	ldrb	r2, [r7, #22]
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8012eb4:	7dba      	ldrb	r2, [r7, #22]
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	32ae      	adds	r2, #174	@ 0xae
 8012eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ebe:	699b      	ldr	r3, [r3, #24]
 8012ec0:	7afa      	ldrb	r2, [r7, #11]
 8012ec2:	4611      	mov	r1, r2
 8012ec4:	68f8      	ldr	r0, [r7, #12]
 8012ec6:	4798      	blx	r3
 8012ec8:	4603      	mov	r3, r0
 8012eca:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8012ecc:	7dfb      	ldrb	r3, [r7, #23]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d001      	beq.n	8012ed6 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8012ed2:	7dfb      	ldrb	r3, [r7, #23]
 8012ed4:	e000      	b.n	8012ed8 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8012ed6:	2300      	movs	r3, #0
}
 8012ed8:	4618      	mov	r0, r3
 8012eda:	3718      	adds	r7, #24
 8012edc:	46bd      	mov	sp, r7
 8012ede:	bd80      	pop	{r7, pc}

08012ee0 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8012ee0:	b580      	push	{r7, lr}
 8012ee2:	b086      	sub	sp, #24
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	60f8      	str	r0, [r7, #12]
 8012ee8:	460b      	mov	r3, r1
 8012eea:	607a      	str	r2, [r7, #4]
 8012eec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8012eee:	7afb      	ldrb	r3, [r7, #11]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d16f      	bne.n	8012fd4 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	3314      	adds	r3, #20
 8012ef8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012f00:	2b02      	cmp	r3, #2
 8012f02:	d15a      	bne.n	8012fba <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8012f04:	693b      	ldr	r3, [r7, #16]
 8012f06:	689a      	ldr	r2, [r3, #8]
 8012f08:	693b      	ldr	r3, [r7, #16]
 8012f0a:	68db      	ldr	r3, [r3, #12]
 8012f0c:	429a      	cmp	r2, r3
 8012f0e:	d914      	bls.n	8012f3a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012f10:	693b      	ldr	r3, [r7, #16]
 8012f12:	689a      	ldr	r2, [r3, #8]
 8012f14:	693b      	ldr	r3, [r7, #16]
 8012f16:	68db      	ldr	r3, [r3, #12]
 8012f18:	1ad2      	subs	r2, r2, r3
 8012f1a:	693b      	ldr	r3, [r7, #16]
 8012f1c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8012f1e:	693b      	ldr	r3, [r7, #16]
 8012f20:	689b      	ldr	r3, [r3, #8]
 8012f22:	461a      	mov	r2, r3
 8012f24:	6879      	ldr	r1, [r7, #4]
 8012f26:	68f8      	ldr	r0, [r7, #12]
 8012f28:	f001 f843 	bl	8013fb2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	2200      	movs	r2, #0
 8012f30:	2100      	movs	r1, #0
 8012f32:	68f8      	ldr	r0, [r7, #12]
 8012f34:	f006 f830 	bl	8018f98 <USBD_LL_PrepareReceive>
 8012f38:	e03f      	b.n	8012fba <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8012f3a:	693b      	ldr	r3, [r7, #16]
 8012f3c:	68da      	ldr	r2, [r3, #12]
 8012f3e:	693b      	ldr	r3, [r7, #16]
 8012f40:	689b      	ldr	r3, [r3, #8]
 8012f42:	429a      	cmp	r2, r3
 8012f44:	d11c      	bne.n	8012f80 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8012f46:	693b      	ldr	r3, [r7, #16]
 8012f48:	685a      	ldr	r2, [r3, #4]
 8012f4a:	693b      	ldr	r3, [r7, #16]
 8012f4c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8012f4e:	429a      	cmp	r2, r3
 8012f50:	d316      	bcc.n	8012f80 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8012f52:	693b      	ldr	r3, [r7, #16]
 8012f54:	685a      	ldr	r2, [r3, #4]
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8012f5c:	429a      	cmp	r2, r3
 8012f5e:	d20f      	bcs.n	8012f80 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8012f60:	2200      	movs	r2, #0
 8012f62:	2100      	movs	r1, #0
 8012f64:	68f8      	ldr	r0, [r7, #12]
 8012f66:	f001 f824 	bl	8013fb2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	2200      	movs	r2, #0
 8012f6e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012f72:	2300      	movs	r3, #0
 8012f74:	2200      	movs	r2, #0
 8012f76:	2100      	movs	r1, #0
 8012f78:	68f8      	ldr	r0, [r7, #12]
 8012f7a:	f006 f80d 	bl	8018f98 <USBD_LL_PrepareReceive>
 8012f7e:	e01c      	b.n	8012fba <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012f86:	b2db      	uxtb	r3, r3
 8012f88:	2b03      	cmp	r3, #3
 8012f8a:	d10f      	bne.n	8012fac <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012f92:	68db      	ldr	r3, [r3, #12]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d009      	beq.n	8012fac <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012fa6:	68db      	ldr	r3, [r3, #12]
 8012fa8:	68f8      	ldr	r0, [r7, #12]
 8012faa:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8012fac:	2180      	movs	r1, #128	@ 0x80
 8012fae:	68f8      	ldr	r0, [r7, #12]
 8012fb0:	f005 ff48 	bl	8018e44 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8012fb4:	68f8      	ldr	r0, [r7, #12]
 8012fb6:	f001 f84e 	bl	8014056 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d03a      	beq.n	801303a <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8012fc4:	68f8      	ldr	r0, [r7, #12]
 8012fc6:	f7ff fe42 	bl	8012c4e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	2200      	movs	r2, #0
 8012fce:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8012fd2:	e032      	b.n	801303a <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8012fd4:	7afb      	ldrb	r3, [r7, #11]
 8012fd6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8012fda:	b2db      	uxtb	r3, r3
 8012fdc:	4619      	mov	r1, r3
 8012fde:	68f8      	ldr	r0, [r7, #12]
 8012fe0:	f000 f8f3 	bl	80131ca <USBD_CoreFindEP>
 8012fe4:	4603      	mov	r3, r0
 8012fe6:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012fe8:	7dfb      	ldrb	r3, [r7, #23]
 8012fea:	2bff      	cmp	r3, #255	@ 0xff
 8012fec:	d025      	beq.n	801303a <USBD_LL_DataInStage+0x15a>
 8012fee:	7dfb      	ldrb	r3, [r7, #23]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d122      	bne.n	801303a <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012ffa:	b2db      	uxtb	r3, r3
 8012ffc:	2b03      	cmp	r3, #3
 8012ffe:	d11c      	bne.n	801303a <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8013000:	7dfa      	ldrb	r2, [r7, #23]
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	32ae      	adds	r2, #174	@ 0xae
 8013006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801300a:	695b      	ldr	r3, [r3, #20]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d014      	beq.n	801303a <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8013010:	7dfa      	ldrb	r2, [r7, #23]
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8013018:	7dfa      	ldrb	r2, [r7, #23]
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	32ae      	adds	r2, #174	@ 0xae
 801301e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013022:	695b      	ldr	r3, [r3, #20]
 8013024:	7afa      	ldrb	r2, [r7, #11]
 8013026:	4611      	mov	r1, r2
 8013028:	68f8      	ldr	r0, [r7, #12]
 801302a:	4798      	blx	r3
 801302c:	4603      	mov	r3, r0
 801302e:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8013030:	7dbb      	ldrb	r3, [r7, #22]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d001      	beq.n	801303a <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8013036:	7dbb      	ldrb	r3, [r7, #22]
 8013038:	e000      	b.n	801303c <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801303a:	2300      	movs	r3, #0
}
 801303c:	4618      	mov	r0, r3
 801303e:	3718      	adds	r7, #24
 8013040:	46bd      	mov	sp, r7
 8013042:	bd80      	pop	{r7, pc}

08013044 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013044:	b580      	push	{r7, lr}
 8013046:	b084      	sub	sp, #16
 8013048:	af00      	add	r7, sp, #0
 801304a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801304c:	2300      	movs	r3, #0
 801304e:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	2201      	movs	r2, #1
 8013054:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	2200      	movs	r2, #0
 801305c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	2200      	movs	r2, #0
 8013064:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	2200      	movs	r2, #0
 801306a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	2200      	movs	r2, #0
 8013072:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801307c:	2b00      	cmp	r3, #0
 801307e:	d014      	beq.n	80130aa <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013086:	685b      	ldr	r3, [r3, #4]
 8013088:	2b00      	cmp	r3, #0
 801308a:	d00e      	beq.n	80130aa <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013092:	685b      	ldr	r3, [r3, #4]
 8013094:	687a      	ldr	r2, [r7, #4]
 8013096:	6852      	ldr	r2, [r2, #4]
 8013098:	b2d2      	uxtb	r2, r2
 801309a:	4611      	mov	r1, r2
 801309c:	6878      	ldr	r0, [r7, #4]
 801309e:	4798      	blx	r3
 80130a0:	4603      	mov	r3, r0
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d001      	beq.n	80130aa <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80130a6:	2303      	movs	r3, #3
 80130a8:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80130aa:	2340      	movs	r3, #64	@ 0x40
 80130ac:	2200      	movs	r2, #0
 80130ae:	2100      	movs	r1, #0
 80130b0:	6878      	ldr	r0, [r7, #4]
 80130b2:	f005 fea1 	bl	8018df8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	2201      	movs	r2, #1
 80130ba:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	2240      	movs	r2, #64	@ 0x40
 80130c2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80130c6:	2340      	movs	r3, #64	@ 0x40
 80130c8:	2200      	movs	r2, #0
 80130ca:	2180      	movs	r1, #128	@ 0x80
 80130cc:	6878      	ldr	r0, [r7, #4]
 80130ce:	f005 fe93 	bl	8018df8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	2201      	movs	r2, #1
 80130d6:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	2240      	movs	r2, #64	@ 0x40
 80130dc:	621a      	str	r2, [r3, #32]

  return ret;
 80130de:	7bfb      	ldrb	r3, [r7, #15]
}
 80130e0:	4618      	mov	r0, r3
 80130e2:	3710      	adds	r7, #16
 80130e4:	46bd      	mov	sp, r7
 80130e6:	bd80      	pop	{r7, pc}

080130e8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80130e8:	b480      	push	{r7}
 80130ea:	b083      	sub	sp, #12
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	6078      	str	r0, [r7, #4]
 80130f0:	460b      	mov	r3, r1
 80130f2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	78fa      	ldrb	r2, [r7, #3]
 80130f8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80130fa:	2300      	movs	r3, #0
}
 80130fc:	4618      	mov	r0, r3
 80130fe:	370c      	adds	r7, #12
 8013100:	46bd      	mov	sp, r7
 8013102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013106:	4770      	bx	lr

08013108 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013108:	b480      	push	{r7}
 801310a:	b083      	sub	sp, #12
 801310c:	af00      	add	r7, sp, #0
 801310e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013116:	b2db      	uxtb	r3, r3
 8013118:	2b04      	cmp	r3, #4
 801311a:	d006      	beq.n	801312a <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013122:	b2da      	uxtb	r2, r3
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	2204      	movs	r2, #4
 801312e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8013132:	2300      	movs	r3, #0
}
 8013134:	4618      	mov	r0, r3
 8013136:	370c      	adds	r7, #12
 8013138:	46bd      	mov	sp, r7
 801313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801313e:	4770      	bx	lr

08013140 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013140:	b480      	push	{r7}
 8013142:	b083      	sub	sp, #12
 8013144:	af00      	add	r7, sp, #0
 8013146:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801314e:	b2db      	uxtb	r3, r3
 8013150:	2b04      	cmp	r3, #4
 8013152:	d106      	bne.n	8013162 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 801315a:	b2da      	uxtb	r2, r3
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8013162:	2300      	movs	r3, #0
}
 8013164:	4618      	mov	r0, r3
 8013166:	370c      	adds	r7, #12
 8013168:	46bd      	mov	sp, r7
 801316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801316e:	4770      	bx	lr

08013170 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013170:	b580      	push	{r7, lr}
 8013172:	b082      	sub	sp, #8
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801317e:	b2db      	uxtb	r3, r3
 8013180:	2b03      	cmp	r3, #3
 8013182:	d110      	bne.n	80131a6 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801318a:	2b00      	cmp	r3, #0
 801318c:	d00b      	beq.n	80131a6 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013194:	69db      	ldr	r3, [r3, #28]
 8013196:	2b00      	cmp	r3, #0
 8013198:	d005      	beq.n	80131a6 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80131a0:	69db      	ldr	r3, [r3, #28]
 80131a2:	6878      	ldr	r0, [r7, #4]
 80131a4:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80131a6:	2300      	movs	r3, #0
}
 80131a8:	4618      	mov	r0, r3
 80131aa:	3708      	adds	r7, #8
 80131ac:	46bd      	mov	sp, r7
 80131ae:	bd80      	pop	{r7, pc}

080131b0 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80131b0:	b480      	push	{r7}
 80131b2:	b083      	sub	sp, #12
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]
 80131b8:	460b      	mov	r3, r1
 80131ba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80131bc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80131be:	4618      	mov	r0, r3
 80131c0:	370c      	adds	r7, #12
 80131c2:	46bd      	mov	sp, r7
 80131c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c8:	4770      	bx	lr

080131ca <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80131ca:	b480      	push	{r7}
 80131cc:	b083      	sub	sp, #12
 80131ce:	af00      	add	r7, sp, #0
 80131d0:	6078      	str	r0, [r7, #4]
 80131d2:	460b      	mov	r3, r1
 80131d4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80131d6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80131d8:	4618      	mov	r0, r3
 80131da:	370c      	adds	r7, #12
 80131dc:	46bd      	mov	sp, r7
 80131de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e2:	4770      	bx	lr

080131e4 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80131e4:	b480      	push	{r7}
 80131e6:	b085      	sub	sp, #20
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	6078      	str	r0, [r7, #4]
 80131ec:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80131f2:	683b      	ldr	r3, [r7, #0]
 80131f4:	881b      	ldrh	r3, [r3, #0]
 80131f6:	68fa      	ldr	r2, [r7, #12]
 80131f8:	7812      	ldrb	r2, [r2, #0]
 80131fa:	4413      	add	r3, r2
 80131fc:	b29a      	uxth	r2, r3
 80131fe:	683b      	ldr	r3, [r7, #0]
 8013200:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	781b      	ldrb	r3, [r3, #0]
 8013206:	461a      	mov	r2, r3
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	4413      	add	r3, r2
 801320c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801320e:	68fb      	ldr	r3, [r7, #12]
}
 8013210:	4618      	mov	r0, r3
 8013212:	3714      	adds	r7, #20
 8013214:	46bd      	mov	sp, r7
 8013216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801321a:	4770      	bx	lr

0801321c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801321c:	b480      	push	{r7}
 801321e:	b087      	sub	sp, #28
 8013220:	af00      	add	r7, sp, #0
 8013222:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8013228:	697b      	ldr	r3, [r7, #20]
 801322a:	781b      	ldrb	r3, [r3, #0]
 801322c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801322e:	697b      	ldr	r3, [r7, #20]
 8013230:	3301      	adds	r3, #1
 8013232:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8013234:	697b      	ldr	r3, [r7, #20]
 8013236:	781b      	ldrb	r3, [r3, #0]
 8013238:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801323a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801323e:	021b      	lsls	r3, r3, #8
 8013240:	b21a      	sxth	r2, r3
 8013242:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013246:	4313      	orrs	r3, r2
 8013248:	b21b      	sxth	r3, r3
 801324a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801324c:	89fb      	ldrh	r3, [r7, #14]
}
 801324e:	4618      	mov	r0, r3
 8013250:	371c      	adds	r7, #28
 8013252:	46bd      	mov	sp, r7
 8013254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013258:	4770      	bx	lr
	...

0801325c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801325c:	b580      	push	{r7, lr}
 801325e:	b084      	sub	sp, #16
 8013260:	af00      	add	r7, sp, #0
 8013262:	6078      	str	r0, [r7, #4]
 8013264:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013266:	2300      	movs	r3, #0
 8013268:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801326a:	683b      	ldr	r3, [r7, #0]
 801326c:	781b      	ldrb	r3, [r3, #0]
 801326e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013272:	2b40      	cmp	r3, #64	@ 0x40
 8013274:	d005      	beq.n	8013282 <USBD_StdDevReq+0x26>
 8013276:	2b40      	cmp	r3, #64	@ 0x40
 8013278:	d857      	bhi.n	801332a <USBD_StdDevReq+0xce>
 801327a:	2b00      	cmp	r3, #0
 801327c:	d00f      	beq.n	801329e <USBD_StdDevReq+0x42>
 801327e:	2b20      	cmp	r3, #32
 8013280:	d153      	bne.n	801332a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	32ae      	adds	r2, #174	@ 0xae
 801328c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013290:	689b      	ldr	r3, [r3, #8]
 8013292:	6839      	ldr	r1, [r7, #0]
 8013294:	6878      	ldr	r0, [r7, #4]
 8013296:	4798      	blx	r3
 8013298:	4603      	mov	r3, r0
 801329a:	73fb      	strb	r3, [r7, #15]
      break;
 801329c:	e04a      	b.n	8013334 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801329e:	683b      	ldr	r3, [r7, #0]
 80132a0:	785b      	ldrb	r3, [r3, #1]
 80132a2:	2b09      	cmp	r3, #9
 80132a4:	d83b      	bhi.n	801331e <USBD_StdDevReq+0xc2>
 80132a6:	a201      	add	r2, pc, #4	@ (adr r2, 80132ac <USBD_StdDevReq+0x50>)
 80132a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132ac:	08013301 	.word	0x08013301
 80132b0:	08013315 	.word	0x08013315
 80132b4:	0801331f 	.word	0x0801331f
 80132b8:	0801330b 	.word	0x0801330b
 80132bc:	0801331f 	.word	0x0801331f
 80132c0:	080132df 	.word	0x080132df
 80132c4:	080132d5 	.word	0x080132d5
 80132c8:	0801331f 	.word	0x0801331f
 80132cc:	080132f7 	.word	0x080132f7
 80132d0:	080132e9 	.word	0x080132e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80132d4:	6839      	ldr	r1, [r7, #0]
 80132d6:	6878      	ldr	r0, [r7, #4]
 80132d8:	f000 fa3c 	bl	8013754 <USBD_GetDescriptor>
          break;
 80132dc:	e024      	b.n	8013328 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80132de:	6839      	ldr	r1, [r7, #0]
 80132e0:	6878      	ldr	r0, [r7, #4]
 80132e2:	f000 fbf1 	bl	8013ac8 <USBD_SetAddress>
          break;
 80132e6:	e01f      	b.n	8013328 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80132e8:	6839      	ldr	r1, [r7, #0]
 80132ea:	6878      	ldr	r0, [r7, #4]
 80132ec:	f000 fc30 	bl	8013b50 <USBD_SetConfig>
 80132f0:	4603      	mov	r3, r0
 80132f2:	73fb      	strb	r3, [r7, #15]
          break;
 80132f4:	e018      	b.n	8013328 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80132f6:	6839      	ldr	r1, [r7, #0]
 80132f8:	6878      	ldr	r0, [r7, #4]
 80132fa:	f000 fcd3 	bl	8013ca4 <USBD_GetConfig>
          break;
 80132fe:	e013      	b.n	8013328 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013300:	6839      	ldr	r1, [r7, #0]
 8013302:	6878      	ldr	r0, [r7, #4]
 8013304:	f000 fd04 	bl	8013d10 <USBD_GetStatus>
          break;
 8013308:	e00e      	b.n	8013328 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801330a:	6839      	ldr	r1, [r7, #0]
 801330c:	6878      	ldr	r0, [r7, #4]
 801330e:	f000 fd33 	bl	8013d78 <USBD_SetFeature>
          break;
 8013312:	e009      	b.n	8013328 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013314:	6839      	ldr	r1, [r7, #0]
 8013316:	6878      	ldr	r0, [r7, #4]
 8013318:	f000 fd57 	bl	8013dca <USBD_ClrFeature>
          break;
 801331c:	e004      	b.n	8013328 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801331e:	6839      	ldr	r1, [r7, #0]
 8013320:	6878      	ldr	r0, [r7, #4]
 8013322:	f000 fdae 	bl	8013e82 <USBD_CtlError>
          break;
 8013326:	bf00      	nop
      }
      break;
 8013328:	e004      	b.n	8013334 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801332a:	6839      	ldr	r1, [r7, #0]
 801332c:	6878      	ldr	r0, [r7, #4]
 801332e:	f000 fda8 	bl	8013e82 <USBD_CtlError>
      break;
 8013332:	bf00      	nop
  }

  return ret;
 8013334:	7bfb      	ldrb	r3, [r7, #15]
}
 8013336:	4618      	mov	r0, r3
 8013338:	3710      	adds	r7, #16
 801333a:	46bd      	mov	sp, r7
 801333c:	bd80      	pop	{r7, pc}
 801333e:	bf00      	nop

08013340 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013340:	b580      	push	{r7, lr}
 8013342:	b084      	sub	sp, #16
 8013344:	af00      	add	r7, sp, #0
 8013346:	6078      	str	r0, [r7, #4]
 8013348:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801334a:	2300      	movs	r3, #0
 801334c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801334e:	683b      	ldr	r3, [r7, #0]
 8013350:	781b      	ldrb	r3, [r3, #0]
 8013352:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013356:	2b40      	cmp	r3, #64	@ 0x40
 8013358:	d005      	beq.n	8013366 <USBD_StdItfReq+0x26>
 801335a:	2b40      	cmp	r3, #64	@ 0x40
 801335c:	d852      	bhi.n	8013404 <USBD_StdItfReq+0xc4>
 801335e:	2b00      	cmp	r3, #0
 8013360:	d001      	beq.n	8013366 <USBD_StdItfReq+0x26>
 8013362:	2b20      	cmp	r3, #32
 8013364:	d14e      	bne.n	8013404 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801336c:	b2db      	uxtb	r3, r3
 801336e:	3b01      	subs	r3, #1
 8013370:	2b02      	cmp	r3, #2
 8013372:	d840      	bhi.n	80133f6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013374:	683b      	ldr	r3, [r7, #0]
 8013376:	889b      	ldrh	r3, [r3, #4]
 8013378:	b2db      	uxtb	r3, r3
 801337a:	2b01      	cmp	r3, #1
 801337c:	d836      	bhi.n	80133ec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801337e:	683b      	ldr	r3, [r7, #0]
 8013380:	889b      	ldrh	r3, [r3, #4]
 8013382:	b2db      	uxtb	r3, r3
 8013384:	4619      	mov	r1, r3
 8013386:	6878      	ldr	r0, [r7, #4]
 8013388:	f7ff ff12 	bl	80131b0 <USBD_CoreFindIF>
 801338c:	4603      	mov	r3, r0
 801338e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013390:	7bbb      	ldrb	r3, [r7, #14]
 8013392:	2bff      	cmp	r3, #255	@ 0xff
 8013394:	d01d      	beq.n	80133d2 <USBD_StdItfReq+0x92>
 8013396:	7bbb      	ldrb	r3, [r7, #14]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d11a      	bne.n	80133d2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801339c:	7bba      	ldrb	r2, [r7, #14]
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	32ae      	adds	r2, #174	@ 0xae
 80133a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133a6:	689b      	ldr	r3, [r3, #8]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d00f      	beq.n	80133cc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80133ac:	7bba      	ldrb	r2, [r7, #14]
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80133b4:	7bba      	ldrb	r2, [r7, #14]
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	32ae      	adds	r2, #174	@ 0xae
 80133ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133be:	689b      	ldr	r3, [r3, #8]
 80133c0:	6839      	ldr	r1, [r7, #0]
 80133c2:	6878      	ldr	r0, [r7, #4]
 80133c4:	4798      	blx	r3
 80133c6:	4603      	mov	r3, r0
 80133c8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80133ca:	e004      	b.n	80133d6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80133cc:	2303      	movs	r3, #3
 80133ce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80133d0:	e001      	b.n	80133d6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80133d2:	2303      	movs	r3, #3
 80133d4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80133d6:	683b      	ldr	r3, [r7, #0]
 80133d8:	88db      	ldrh	r3, [r3, #6]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d110      	bne.n	8013400 <USBD_StdItfReq+0xc0>
 80133de:	7bfb      	ldrb	r3, [r7, #15]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d10d      	bne.n	8013400 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80133e4:	6878      	ldr	r0, [r7, #4]
 80133e6:	f000 fe23 	bl	8014030 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80133ea:	e009      	b.n	8013400 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80133ec:	6839      	ldr	r1, [r7, #0]
 80133ee:	6878      	ldr	r0, [r7, #4]
 80133f0:	f000 fd47 	bl	8013e82 <USBD_CtlError>
          break;
 80133f4:	e004      	b.n	8013400 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80133f6:	6839      	ldr	r1, [r7, #0]
 80133f8:	6878      	ldr	r0, [r7, #4]
 80133fa:	f000 fd42 	bl	8013e82 <USBD_CtlError>
          break;
 80133fe:	e000      	b.n	8013402 <USBD_StdItfReq+0xc2>
          break;
 8013400:	bf00      	nop
      }
      break;
 8013402:	e004      	b.n	801340e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8013404:	6839      	ldr	r1, [r7, #0]
 8013406:	6878      	ldr	r0, [r7, #4]
 8013408:	f000 fd3b 	bl	8013e82 <USBD_CtlError>
      break;
 801340c:	bf00      	nop
  }

  return ret;
 801340e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013410:	4618      	mov	r0, r3
 8013412:	3710      	adds	r7, #16
 8013414:	46bd      	mov	sp, r7
 8013416:	bd80      	pop	{r7, pc}

08013418 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013418:	b580      	push	{r7, lr}
 801341a:	b084      	sub	sp, #16
 801341c:	af00      	add	r7, sp, #0
 801341e:	6078      	str	r0, [r7, #4]
 8013420:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8013422:	2300      	movs	r3, #0
 8013424:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8013426:	683b      	ldr	r3, [r7, #0]
 8013428:	889b      	ldrh	r3, [r3, #4]
 801342a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801342c:	683b      	ldr	r3, [r7, #0]
 801342e:	781b      	ldrb	r3, [r3, #0]
 8013430:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013434:	2b40      	cmp	r3, #64	@ 0x40
 8013436:	d007      	beq.n	8013448 <USBD_StdEPReq+0x30>
 8013438:	2b40      	cmp	r3, #64	@ 0x40
 801343a:	f200 817f 	bhi.w	801373c <USBD_StdEPReq+0x324>
 801343e:	2b00      	cmp	r3, #0
 8013440:	d02a      	beq.n	8013498 <USBD_StdEPReq+0x80>
 8013442:	2b20      	cmp	r3, #32
 8013444:	f040 817a 	bne.w	801373c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8013448:	7bbb      	ldrb	r3, [r7, #14]
 801344a:	4619      	mov	r1, r3
 801344c:	6878      	ldr	r0, [r7, #4]
 801344e:	f7ff febc 	bl	80131ca <USBD_CoreFindEP>
 8013452:	4603      	mov	r3, r0
 8013454:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013456:	7b7b      	ldrb	r3, [r7, #13]
 8013458:	2bff      	cmp	r3, #255	@ 0xff
 801345a:	f000 8174 	beq.w	8013746 <USBD_StdEPReq+0x32e>
 801345e:	7b7b      	ldrb	r3, [r7, #13]
 8013460:	2b00      	cmp	r3, #0
 8013462:	f040 8170 	bne.w	8013746 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8013466:	7b7a      	ldrb	r2, [r7, #13]
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801346e:	7b7a      	ldrb	r2, [r7, #13]
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	32ae      	adds	r2, #174	@ 0xae
 8013474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013478:	689b      	ldr	r3, [r3, #8]
 801347a:	2b00      	cmp	r3, #0
 801347c:	f000 8163 	beq.w	8013746 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8013480:	7b7a      	ldrb	r2, [r7, #13]
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	32ae      	adds	r2, #174	@ 0xae
 8013486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801348a:	689b      	ldr	r3, [r3, #8]
 801348c:	6839      	ldr	r1, [r7, #0]
 801348e:	6878      	ldr	r0, [r7, #4]
 8013490:	4798      	blx	r3
 8013492:	4603      	mov	r3, r0
 8013494:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8013496:	e156      	b.n	8013746 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013498:	683b      	ldr	r3, [r7, #0]
 801349a:	785b      	ldrb	r3, [r3, #1]
 801349c:	2b03      	cmp	r3, #3
 801349e:	d008      	beq.n	80134b2 <USBD_StdEPReq+0x9a>
 80134a0:	2b03      	cmp	r3, #3
 80134a2:	f300 8145 	bgt.w	8013730 <USBD_StdEPReq+0x318>
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	f000 809b 	beq.w	80135e2 <USBD_StdEPReq+0x1ca>
 80134ac:	2b01      	cmp	r3, #1
 80134ae:	d03c      	beq.n	801352a <USBD_StdEPReq+0x112>
 80134b0:	e13e      	b.n	8013730 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80134b8:	b2db      	uxtb	r3, r3
 80134ba:	2b02      	cmp	r3, #2
 80134bc:	d002      	beq.n	80134c4 <USBD_StdEPReq+0xac>
 80134be:	2b03      	cmp	r3, #3
 80134c0:	d016      	beq.n	80134f0 <USBD_StdEPReq+0xd8>
 80134c2:	e02c      	b.n	801351e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80134c4:	7bbb      	ldrb	r3, [r7, #14]
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d00d      	beq.n	80134e6 <USBD_StdEPReq+0xce>
 80134ca:	7bbb      	ldrb	r3, [r7, #14]
 80134cc:	2b80      	cmp	r3, #128	@ 0x80
 80134ce:	d00a      	beq.n	80134e6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80134d0:	7bbb      	ldrb	r3, [r7, #14]
 80134d2:	4619      	mov	r1, r3
 80134d4:	6878      	ldr	r0, [r7, #4]
 80134d6:	f005 fcb5 	bl	8018e44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80134da:	2180      	movs	r1, #128	@ 0x80
 80134dc:	6878      	ldr	r0, [r7, #4]
 80134de:	f005 fcb1 	bl	8018e44 <USBD_LL_StallEP>
 80134e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80134e4:	e020      	b.n	8013528 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80134e6:	6839      	ldr	r1, [r7, #0]
 80134e8:	6878      	ldr	r0, [r7, #4]
 80134ea:	f000 fcca 	bl	8013e82 <USBD_CtlError>
              break;
 80134ee:	e01b      	b.n	8013528 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80134f0:	683b      	ldr	r3, [r7, #0]
 80134f2:	885b      	ldrh	r3, [r3, #2]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d10e      	bne.n	8013516 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80134f8:	7bbb      	ldrb	r3, [r7, #14]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d00b      	beq.n	8013516 <USBD_StdEPReq+0xfe>
 80134fe:	7bbb      	ldrb	r3, [r7, #14]
 8013500:	2b80      	cmp	r3, #128	@ 0x80
 8013502:	d008      	beq.n	8013516 <USBD_StdEPReq+0xfe>
 8013504:	683b      	ldr	r3, [r7, #0]
 8013506:	88db      	ldrh	r3, [r3, #6]
 8013508:	2b00      	cmp	r3, #0
 801350a:	d104      	bne.n	8013516 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801350c:	7bbb      	ldrb	r3, [r7, #14]
 801350e:	4619      	mov	r1, r3
 8013510:	6878      	ldr	r0, [r7, #4]
 8013512:	f005 fc97 	bl	8018e44 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8013516:	6878      	ldr	r0, [r7, #4]
 8013518:	f000 fd8a 	bl	8014030 <USBD_CtlSendStatus>

              break;
 801351c:	e004      	b.n	8013528 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801351e:	6839      	ldr	r1, [r7, #0]
 8013520:	6878      	ldr	r0, [r7, #4]
 8013522:	f000 fcae 	bl	8013e82 <USBD_CtlError>
              break;
 8013526:	bf00      	nop
          }
          break;
 8013528:	e107      	b.n	801373a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013530:	b2db      	uxtb	r3, r3
 8013532:	2b02      	cmp	r3, #2
 8013534:	d002      	beq.n	801353c <USBD_StdEPReq+0x124>
 8013536:	2b03      	cmp	r3, #3
 8013538:	d016      	beq.n	8013568 <USBD_StdEPReq+0x150>
 801353a:	e04b      	b.n	80135d4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801353c:	7bbb      	ldrb	r3, [r7, #14]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d00d      	beq.n	801355e <USBD_StdEPReq+0x146>
 8013542:	7bbb      	ldrb	r3, [r7, #14]
 8013544:	2b80      	cmp	r3, #128	@ 0x80
 8013546:	d00a      	beq.n	801355e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013548:	7bbb      	ldrb	r3, [r7, #14]
 801354a:	4619      	mov	r1, r3
 801354c:	6878      	ldr	r0, [r7, #4]
 801354e:	f005 fc79 	bl	8018e44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013552:	2180      	movs	r1, #128	@ 0x80
 8013554:	6878      	ldr	r0, [r7, #4]
 8013556:	f005 fc75 	bl	8018e44 <USBD_LL_StallEP>
 801355a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801355c:	e040      	b.n	80135e0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801355e:	6839      	ldr	r1, [r7, #0]
 8013560:	6878      	ldr	r0, [r7, #4]
 8013562:	f000 fc8e 	bl	8013e82 <USBD_CtlError>
              break;
 8013566:	e03b      	b.n	80135e0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013568:	683b      	ldr	r3, [r7, #0]
 801356a:	885b      	ldrh	r3, [r3, #2]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d136      	bne.n	80135de <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013570:	7bbb      	ldrb	r3, [r7, #14]
 8013572:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013576:	2b00      	cmp	r3, #0
 8013578:	d004      	beq.n	8013584 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801357a:	7bbb      	ldrb	r3, [r7, #14]
 801357c:	4619      	mov	r1, r3
 801357e:	6878      	ldr	r0, [r7, #4]
 8013580:	f005 fc7f 	bl	8018e82 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8013584:	6878      	ldr	r0, [r7, #4]
 8013586:	f000 fd53 	bl	8014030 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801358a:	7bbb      	ldrb	r3, [r7, #14]
 801358c:	4619      	mov	r1, r3
 801358e:	6878      	ldr	r0, [r7, #4]
 8013590:	f7ff fe1b 	bl	80131ca <USBD_CoreFindEP>
 8013594:	4603      	mov	r3, r0
 8013596:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013598:	7b7b      	ldrb	r3, [r7, #13]
 801359a:	2bff      	cmp	r3, #255	@ 0xff
 801359c:	d01f      	beq.n	80135de <USBD_StdEPReq+0x1c6>
 801359e:	7b7b      	ldrb	r3, [r7, #13]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d11c      	bne.n	80135de <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80135a4:	7b7a      	ldrb	r2, [r7, #13]
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80135ac:	7b7a      	ldrb	r2, [r7, #13]
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	32ae      	adds	r2, #174	@ 0xae
 80135b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80135b6:	689b      	ldr	r3, [r3, #8]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d010      	beq.n	80135de <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80135bc:	7b7a      	ldrb	r2, [r7, #13]
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	32ae      	adds	r2, #174	@ 0xae
 80135c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80135c6:	689b      	ldr	r3, [r3, #8]
 80135c8:	6839      	ldr	r1, [r7, #0]
 80135ca:	6878      	ldr	r0, [r7, #4]
 80135cc:	4798      	blx	r3
 80135ce:	4603      	mov	r3, r0
 80135d0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80135d2:	e004      	b.n	80135de <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80135d4:	6839      	ldr	r1, [r7, #0]
 80135d6:	6878      	ldr	r0, [r7, #4]
 80135d8:	f000 fc53 	bl	8013e82 <USBD_CtlError>
              break;
 80135dc:	e000      	b.n	80135e0 <USBD_StdEPReq+0x1c8>
              break;
 80135de:	bf00      	nop
          }
          break;
 80135e0:	e0ab      	b.n	801373a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80135e8:	b2db      	uxtb	r3, r3
 80135ea:	2b02      	cmp	r3, #2
 80135ec:	d002      	beq.n	80135f4 <USBD_StdEPReq+0x1dc>
 80135ee:	2b03      	cmp	r3, #3
 80135f0:	d032      	beq.n	8013658 <USBD_StdEPReq+0x240>
 80135f2:	e097      	b.n	8013724 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80135f4:	7bbb      	ldrb	r3, [r7, #14]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d007      	beq.n	801360a <USBD_StdEPReq+0x1f2>
 80135fa:	7bbb      	ldrb	r3, [r7, #14]
 80135fc:	2b80      	cmp	r3, #128	@ 0x80
 80135fe:	d004      	beq.n	801360a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8013600:	6839      	ldr	r1, [r7, #0]
 8013602:	6878      	ldr	r0, [r7, #4]
 8013604:	f000 fc3d 	bl	8013e82 <USBD_CtlError>
                break;
 8013608:	e091      	b.n	801372e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801360a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801360e:	2b00      	cmp	r3, #0
 8013610:	da0b      	bge.n	801362a <USBD_StdEPReq+0x212>
 8013612:	7bbb      	ldrb	r3, [r7, #14]
 8013614:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013618:	4613      	mov	r3, r2
 801361a:	009b      	lsls	r3, r3, #2
 801361c:	4413      	add	r3, r2
 801361e:	009b      	lsls	r3, r3, #2
 8013620:	3310      	adds	r3, #16
 8013622:	687a      	ldr	r2, [r7, #4]
 8013624:	4413      	add	r3, r2
 8013626:	3304      	adds	r3, #4
 8013628:	e00b      	b.n	8013642 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801362a:	7bbb      	ldrb	r3, [r7, #14]
 801362c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013630:	4613      	mov	r3, r2
 8013632:	009b      	lsls	r3, r3, #2
 8013634:	4413      	add	r3, r2
 8013636:	009b      	lsls	r3, r3, #2
 8013638:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801363c:	687a      	ldr	r2, [r7, #4]
 801363e:	4413      	add	r3, r2
 8013640:	3304      	adds	r3, #4
 8013642:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8013644:	68bb      	ldr	r3, [r7, #8]
 8013646:	2200      	movs	r2, #0
 8013648:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801364a:	68bb      	ldr	r3, [r7, #8]
 801364c:	2202      	movs	r2, #2
 801364e:	4619      	mov	r1, r3
 8013650:	6878      	ldr	r0, [r7, #4]
 8013652:	f000 fc93 	bl	8013f7c <USBD_CtlSendData>
              break;
 8013656:	e06a      	b.n	801372e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013658:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801365c:	2b00      	cmp	r3, #0
 801365e:	da11      	bge.n	8013684 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013660:	7bbb      	ldrb	r3, [r7, #14]
 8013662:	f003 020f 	and.w	r2, r3, #15
 8013666:	6879      	ldr	r1, [r7, #4]
 8013668:	4613      	mov	r3, r2
 801366a:	009b      	lsls	r3, r3, #2
 801366c:	4413      	add	r3, r2
 801366e:	009b      	lsls	r3, r3, #2
 8013670:	440b      	add	r3, r1
 8013672:	3324      	adds	r3, #36	@ 0x24
 8013674:	881b      	ldrh	r3, [r3, #0]
 8013676:	2b00      	cmp	r3, #0
 8013678:	d117      	bne.n	80136aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801367a:	6839      	ldr	r1, [r7, #0]
 801367c:	6878      	ldr	r0, [r7, #4]
 801367e:	f000 fc00 	bl	8013e82 <USBD_CtlError>
                  break;
 8013682:	e054      	b.n	801372e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013684:	7bbb      	ldrb	r3, [r7, #14]
 8013686:	f003 020f 	and.w	r2, r3, #15
 801368a:	6879      	ldr	r1, [r7, #4]
 801368c:	4613      	mov	r3, r2
 801368e:	009b      	lsls	r3, r3, #2
 8013690:	4413      	add	r3, r2
 8013692:	009b      	lsls	r3, r3, #2
 8013694:	440b      	add	r3, r1
 8013696:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801369a:	881b      	ldrh	r3, [r3, #0]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d104      	bne.n	80136aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80136a0:	6839      	ldr	r1, [r7, #0]
 80136a2:	6878      	ldr	r0, [r7, #4]
 80136a4:	f000 fbed 	bl	8013e82 <USBD_CtlError>
                  break;
 80136a8:	e041      	b.n	801372e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80136aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	da0b      	bge.n	80136ca <USBD_StdEPReq+0x2b2>
 80136b2:	7bbb      	ldrb	r3, [r7, #14]
 80136b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80136b8:	4613      	mov	r3, r2
 80136ba:	009b      	lsls	r3, r3, #2
 80136bc:	4413      	add	r3, r2
 80136be:	009b      	lsls	r3, r3, #2
 80136c0:	3310      	adds	r3, #16
 80136c2:	687a      	ldr	r2, [r7, #4]
 80136c4:	4413      	add	r3, r2
 80136c6:	3304      	adds	r3, #4
 80136c8:	e00b      	b.n	80136e2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80136ca:	7bbb      	ldrb	r3, [r7, #14]
 80136cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80136d0:	4613      	mov	r3, r2
 80136d2:	009b      	lsls	r3, r3, #2
 80136d4:	4413      	add	r3, r2
 80136d6:	009b      	lsls	r3, r3, #2
 80136d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80136dc:	687a      	ldr	r2, [r7, #4]
 80136de:	4413      	add	r3, r2
 80136e0:	3304      	adds	r3, #4
 80136e2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80136e4:	7bbb      	ldrb	r3, [r7, #14]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d002      	beq.n	80136f0 <USBD_StdEPReq+0x2d8>
 80136ea:	7bbb      	ldrb	r3, [r7, #14]
 80136ec:	2b80      	cmp	r3, #128	@ 0x80
 80136ee:	d103      	bne.n	80136f8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80136f0:	68bb      	ldr	r3, [r7, #8]
 80136f2:	2200      	movs	r2, #0
 80136f4:	601a      	str	r2, [r3, #0]
 80136f6:	e00e      	b.n	8013716 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80136f8:	7bbb      	ldrb	r3, [r7, #14]
 80136fa:	4619      	mov	r1, r3
 80136fc:	6878      	ldr	r0, [r7, #4]
 80136fe:	f005 fbdf 	bl	8018ec0 <USBD_LL_IsStallEP>
 8013702:	4603      	mov	r3, r0
 8013704:	2b00      	cmp	r3, #0
 8013706:	d003      	beq.n	8013710 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8013708:	68bb      	ldr	r3, [r7, #8]
 801370a:	2201      	movs	r2, #1
 801370c:	601a      	str	r2, [r3, #0]
 801370e:	e002      	b.n	8013716 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8013710:	68bb      	ldr	r3, [r7, #8]
 8013712:	2200      	movs	r2, #0
 8013714:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013716:	68bb      	ldr	r3, [r7, #8]
 8013718:	2202      	movs	r2, #2
 801371a:	4619      	mov	r1, r3
 801371c:	6878      	ldr	r0, [r7, #4]
 801371e:	f000 fc2d 	bl	8013f7c <USBD_CtlSendData>
              break;
 8013722:	e004      	b.n	801372e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8013724:	6839      	ldr	r1, [r7, #0]
 8013726:	6878      	ldr	r0, [r7, #4]
 8013728:	f000 fbab 	bl	8013e82 <USBD_CtlError>
              break;
 801372c:	bf00      	nop
          }
          break;
 801372e:	e004      	b.n	801373a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8013730:	6839      	ldr	r1, [r7, #0]
 8013732:	6878      	ldr	r0, [r7, #4]
 8013734:	f000 fba5 	bl	8013e82 <USBD_CtlError>
          break;
 8013738:	bf00      	nop
      }
      break;
 801373a:	e005      	b.n	8013748 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801373c:	6839      	ldr	r1, [r7, #0]
 801373e:	6878      	ldr	r0, [r7, #4]
 8013740:	f000 fb9f 	bl	8013e82 <USBD_CtlError>
      break;
 8013744:	e000      	b.n	8013748 <USBD_StdEPReq+0x330>
      break;
 8013746:	bf00      	nop
  }

  return ret;
 8013748:	7bfb      	ldrb	r3, [r7, #15]
}
 801374a:	4618      	mov	r0, r3
 801374c:	3710      	adds	r7, #16
 801374e:	46bd      	mov	sp, r7
 8013750:	bd80      	pop	{r7, pc}
	...

08013754 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013754:	b580      	push	{r7, lr}
 8013756:	b086      	sub	sp, #24
 8013758:	af00      	add	r7, sp, #0
 801375a:	6078      	str	r0, [r7, #4]
 801375c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801375e:	2300      	movs	r3, #0
 8013760:	817b      	strh	r3, [r7, #10]
  uint8_t *pbuf = NULL;
 8013762:	2300      	movs	r3, #0
 8013764:	617b      	str	r3, [r7, #20]
  uint8_t err = 0U;
 8013766:	2300      	movs	r3, #0
 8013768:	74fb      	strb	r3, [r7, #19]

  switch (req->wValue >> 8)
 801376a:	683b      	ldr	r3, [r7, #0]
 801376c:	885b      	ldrh	r3, [r3, #2]
 801376e:	0a1b      	lsrs	r3, r3, #8
 8013770:	b29b      	uxth	r3, r3
 8013772:	3b01      	subs	r3, #1
 8013774:	2b0e      	cmp	r3, #14
 8013776:	f200 8179 	bhi.w	8013a6c <USBD_GetDescriptor+0x318>
 801377a:	a201      	add	r2, pc, #4	@ (adr r2, 8013780 <USBD_GetDescriptor+0x2c>)
 801377c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013780:	080137f1 	.word	0x080137f1
 8013784:	08013809 	.word	0x08013809
 8013788:	08013849 	.word	0x08013849
 801378c:	08013a6d 	.word	0x08013a6d
 8013790:	08013a6d 	.word	0x08013a6d
 8013794:	08013a0d 	.word	0x08013a0d
 8013798:	08013a39 	.word	0x08013a39
 801379c:	08013a6d 	.word	0x08013a6d
 80137a0:	08013a6d 	.word	0x08013a6d
 80137a4:	08013a6d 	.word	0x08013a6d
 80137a8:	08013a6d 	.word	0x08013a6d
 80137ac:	08013a6d 	.word	0x08013a6d
 80137b0:	08013a6d 	.word	0x08013a6d
 80137b4:	08013a6d 	.word	0x08013a6d
 80137b8:	080137bd 	.word	0x080137bd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80137c2:	69db      	ldr	r3, [r3, #28]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d00b      	beq.n	80137e0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80137ce:	69db      	ldr	r3, [r3, #28]
 80137d0:	687a      	ldr	r2, [r7, #4]
 80137d2:	7c12      	ldrb	r2, [r2, #16]
 80137d4:	f107 010a 	add.w	r1, r7, #10
 80137d8:	4610      	mov	r0, r2
 80137da:	4798      	blx	r3
 80137dc:	6178      	str	r0, [r7, #20]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80137de:	e14d      	b.n	8013a7c <USBD_GetDescriptor+0x328>
        USBD_CtlError(pdev, req);
 80137e0:	6839      	ldr	r1, [r7, #0]
 80137e2:	6878      	ldr	r0, [r7, #4]
 80137e4:	f000 fb4d 	bl	8013e82 <USBD_CtlError>
        err++;
 80137e8:	7cfb      	ldrb	r3, [r7, #19]
 80137ea:	3301      	adds	r3, #1
 80137ec:	74fb      	strb	r3, [r7, #19]
      break;
 80137ee:	e145      	b.n	8013a7c <USBD_GetDescriptor+0x328>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	687a      	ldr	r2, [r7, #4]
 80137fa:	7c12      	ldrb	r2, [r2, #16]
 80137fc:	f107 010a 	add.w	r1, r7, #10
 8013800:	4610      	mov	r0, r2
 8013802:	4798      	blx	r3
 8013804:	6178      	str	r0, [r7, #20]
      break;
 8013806:	e139      	b.n	8013a7c <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	7c1b      	ldrb	r3, [r3, #16]
 801380c:	2b00      	cmp	r3, #0
 801380e:	d10d      	bne.n	801382c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013818:	f107 020a 	add.w	r2, r7, #10
 801381c:	4610      	mov	r0, r2
 801381e:	4798      	blx	r3
 8013820:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013822:	697b      	ldr	r3, [r7, #20]
 8013824:	3301      	adds	r3, #1
 8013826:	2202      	movs	r2, #2
 8013828:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801382a:	e127      	b.n	8013a7c <USBD_GetDescriptor+0x328>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013834:	f107 020a 	add.w	r2, r7, #10
 8013838:	4610      	mov	r0, r2
 801383a:	4798      	blx	r3
 801383c:	6178      	str	r0, [r7, #20]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801383e:	697b      	ldr	r3, [r7, #20]
 8013840:	3301      	adds	r3, #1
 8013842:	2202      	movs	r2, #2
 8013844:	701a      	strb	r2, [r3, #0]
      break;
 8013846:	e119      	b.n	8013a7c <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013848:	683b      	ldr	r3, [r7, #0]
 801384a:	885b      	ldrh	r3, [r3, #2]
 801384c:	b2db      	uxtb	r3, r3
 801384e:	2b05      	cmp	r3, #5
 8013850:	f200 80ac 	bhi.w	80139ac <USBD_GetDescriptor+0x258>
 8013854:	a201      	add	r2, pc, #4	@ (adr r2, 801385c <USBD_GetDescriptor+0x108>)
 8013856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801385a:	bf00      	nop
 801385c:	08013875 	.word	0x08013875
 8013860:	080138a9 	.word	0x080138a9
 8013864:	080138dd 	.word	0x080138dd
 8013868:	08013911 	.word	0x08013911
 801386c:	08013945 	.word	0x08013945
 8013870:	08013979 	.word	0x08013979
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801387a:	685b      	ldr	r3, [r3, #4]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d00b      	beq.n	8013898 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013886:	685b      	ldr	r3, [r3, #4]
 8013888:	687a      	ldr	r2, [r7, #4]
 801388a:	7c12      	ldrb	r2, [r2, #16]
 801388c:	f107 010a 	add.w	r1, r7, #10
 8013890:	4610      	mov	r0, r2
 8013892:	4798      	blx	r3
 8013894:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013896:	e0b8      	b.n	8013a0a <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 8013898:	6839      	ldr	r1, [r7, #0]
 801389a:	6878      	ldr	r0, [r7, #4]
 801389c:	f000 faf1 	bl	8013e82 <USBD_CtlError>
            err++;
 80138a0:	7cfb      	ldrb	r3, [r7, #19]
 80138a2:	3301      	adds	r3, #1
 80138a4:	74fb      	strb	r3, [r7, #19]
          break;
 80138a6:	e0b0      	b.n	8013a0a <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80138ae:	689b      	ldr	r3, [r3, #8]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d00b      	beq.n	80138cc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80138ba:	689b      	ldr	r3, [r3, #8]
 80138bc:	687a      	ldr	r2, [r7, #4]
 80138be:	7c12      	ldrb	r2, [r2, #16]
 80138c0:	f107 010a 	add.w	r1, r7, #10
 80138c4:	4610      	mov	r0, r2
 80138c6:	4798      	blx	r3
 80138c8:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80138ca:	e09e      	b.n	8013a0a <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 80138cc:	6839      	ldr	r1, [r7, #0]
 80138ce:	6878      	ldr	r0, [r7, #4]
 80138d0:	f000 fad7 	bl	8013e82 <USBD_CtlError>
            err++;
 80138d4:	7cfb      	ldrb	r3, [r7, #19]
 80138d6:	3301      	adds	r3, #1
 80138d8:	74fb      	strb	r3, [r7, #19]
          break;
 80138da:	e096      	b.n	8013a0a <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80138e2:	68db      	ldr	r3, [r3, #12]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d00b      	beq.n	8013900 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80138ee:	68db      	ldr	r3, [r3, #12]
 80138f0:	687a      	ldr	r2, [r7, #4]
 80138f2:	7c12      	ldrb	r2, [r2, #16]
 80138f4:	f107 010a 	add.w	r1, r7, #10
 80138f8:	4610      	mov	r0, r2
 80138fa:	4798      	blx	r3
 80138fc:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80138fe:	e084      	b.n	8013a0a <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 8013900:	6839      	ldr	r1, [r7, #0]
 8013902:	6878      	ldr	r0, [r7, #4]
 8013904:	f000 fabd 	bl	8013e82 <USBD_CtlError>
            err++;
 8013908:	7cfb      	ldrb	r3, [r7, #19]
 801390a:	3301      	adds	r3, #1
 801390c:	74fb      	strb	r3, [r7, #19]
          break;
 801390e:	e07c      	b.n	8013a0a <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013916:	691b      	ldr	r3, [r3, #16]
 8013918:	2b00      	cmp	r3, #0
 801391a:	d00b      	beq.n	8013934 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013922:	691b      	ldr	r3, [r3, #16]
 8013924:	687a      	ldr	r2, [r7, #4]
 8013926:	7c12      	ldrb	r2, [r2, #16]
 8013928:	f107 010a 	add.w	r1, r7, #10
 801392c:	4610      	mov	r0, r2
 801392e:	4798      	blx	r3
 8013930:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013932:	e06a      	b.n	8013a0a <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 8013934:	6839      	ldr	r1, [r7, #0]
 8013936:	6878      	ldr	r0, [r7, #4]
 8013938:	f000 faa3 	bl	8013e82 <USBD_CtlError>
            err++;
 801393c:	7cfb      	ldrb	r3, [r7, #19]
 801393e:	3301      	adds	r3, #1
 8013940:	74fb      	strb	r3, [r7, #19]
          break;
 8013942:	e062      	b.n	8013a0a <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801394a:	695b      	ldr	r3, [r3, #20]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d00b      	beq.n	8013968 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013956:	695b      	ldr	r3, [r3, #20]
 8013958:	687a      	ldr	r2, [r7, #4]
 801395a:	7c12      	ldrb	r2, [r2, #16]
 801395c:	f107 010a 	add.w	r1, r7, #10
 8013960:	4610      	mov	r0, r2
 8013962:	4798      	blx	r3
 8013964:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013966:	e050      	b.n	8013a0a <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 8013968:	6839      	ldr	r1, [r7, #0]
 801396a:	6878      	ldr	r0, [r7, #4]
 801396c:	f000 fa89 	bl	8013e82 <USBD_CtlError>
            err++;
 8013970:	7cfb      	ldrb	r3, [r7, #19]
 8013972:	3301      	adds	r3, #1
 8013974:	74fb      	strb	r3, [r7, #19]
          break;
 8013976:	e048      	b.n	8013a0a <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801397e:	699b      	ldr	r3, [r3, #24]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d00b      	beq.n	801399c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801398a:	699b      	ldr	r3, [r3, #24]
 801398c:	687a      	ldr	r2, [r7, #4]
 801398e:	7c12      	ldrb	r2, [r2, #16]
 8013990:	f107 010a 	add.w	r1, r7, #10
 8013994:	4610      	mov	r0, r2
 8013996:	4798      	blx	r3
 8013998:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801399a:	e036      	b.n	8013a0a <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 801399c:	6839      	ldr	r1, [r7, #0]
 801399e:	6878      	ldr	r0, [r7, #4]
 80139a0:	f000 fa6f 	bl	8013e82 <USBD_CtlError>
            err++;
 80139a4:	7cfb      	ldrb	r3, [r7, #19]
 80139a6:	3301      	adds	r3, #1
 80139a8:	74fb      	strb	r3, [r7, #19]
          break;
 80139aa:	e02e      	b.n	8013a0a <USBD_GetDescriptor+0x2b6>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          pbuf = NULL;
 80139ac:	2300      	movs	r3, #0
 80139ae:	617b      	str	r3, [r7, #20]

          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 80139b0:	2300      	movs	r3, #0
 80139b2:	60fb      	str	r3, [r7, #12]
 80139b4:	e020      	b.n	80139f8 <USBD_GetDescriptor+0x2a4>
          {
            if (pdev->pClass[idx]->GetUsrStrDescriptor != NULL)
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	68fa      	ldr	r2, [r7, #12]
 80139ba:	32ae      	adds	r2, #174	@ 0xae
 80139bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d015      	beq.n	80139f2 <USBD_GetDescriptor+0x29e>
            {
              pdev->classId = idx;
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	68fa      	ldr	r2, [r7, #12]
 80139ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pbuf = pdev->pClass[idx]->GetUsrStrDescriptor(pdev, LOBYTE(req->wValue), &len);
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	68fa      	ldr	r2, [r7, #12]
 80139d2:	32ae      	adds	r2, #174	@ 0xae
 80139d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80139da:	683a      	ldr	r2, [r7, #0]
 80139dc:	8852      	ldrh	r2, [r2, #2]
 80139de:	b2d1      	uxtb	r1, r2
 80139e0:	f107 020a 	add.w	r2, r7, #10
 80139e4:	6878      	ldr	r0, [r7, #4]
 80139e6:	4798      	blx	r3
 80139e8:	6178      	str	r0, [r7, #20]

              if (pbuf == NULL) /* This means that no class recognized the string index */
 80139ea:	697b      	ldr	r3, [r7, #20]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d10a      	bne.n	8013a06 <USBD_GetDescriptor+0x2b2>
              {
                continue;
 80139f0:	bf00      	nop
          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	3301      	adds	r3, #1
 80139f6:	60fb      	str	r3, [r7, #12]
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80139fe:	68fa      	ldr	r2, [r7, #12]
 8013a00:	429a      	cmp	r2, r3
 8013a02:	d3d8      	bcc.n	80139b6 <USBD_GetDescriptor+0x262>

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8013a04:	e000      	b.n	8013a08 <USBD_GetDescriptor+0x2b4>
                break;
 8013a06:	bf00      	nop
          break;
 8013a08:	bf00      	nop
      }
      break;
 8013a0a:	e037      	b.n	8013a7c <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	7c1b      	ldrb	r3, [r3, #16]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d109      	bne.n	8013a28 <USBD_GetDescriptor+0x2d4>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013a1c:	f107 020a 	add.w	r2, r7, #10
 8013a20:	4610      	mov	r0, r2
 8013a22:	4798      	blx	r3
 8013a24:	6178      	str	r0, [r7, #20]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013a26:	e029      	b.n	8013a7c <USBD_GetDescriptor+0x328>
        USBD_CtlError(pdev, req);
 8013a28:	6839      	ldr	r1, [r7, #0]
 8013a2a:	6878      	ldr	r0, [r7, #4]
 8013a2c:	f000 fa29 	bl	8013e82 <USBD_CtlError>
        err++;
 8013a30:	7cfb      	ldrb	r3, [r7, #19]
 8013a32:	3301      	adds	r3, #1
 8013a34:	74fb      	strb	r3, [r7, #19]
      break;
 8013a36:	e021      	b.n	8013a7c <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	7c1b      	ldrb	r3, [r3, #16]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d10d      	bne.n	8013a5c <USBD_GetDescriptor+0x308>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013a48:	f107 020a 	add.w	r2, r7, #10
 8013a4c:	4610      	mov	r0, r2
 8013a4e:	4798      	blx	r3
 8013a50:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013a52:	697b      	ldr	r3, [r7, #20]
 8013a54:	3301      	adds	r3, #1
 8013a56:	2207      	movs	r2, #7
 8013a58:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013a5a:	e00f      	b.n	8013a7c <USBD_GetDescriptor+0x328>
        USBD_CtlError(pdev, req);
 8013a5c:	6839      	ldr	r1, [r7, #0]
 8013a5e:	6878      	ldr	r0, [r7, #4]
 8013a60:	f000 fa0f 	bl	8013e82 <USBD_CtlError>
        err++;
 8013a64:	7cfb      	ldrb	r3, [r7, #19]
 8013a66:	3301      	adds	r3, #1
 8013a68:	74fb      	strb	r3, [r7, #19]
      break;
 8013a6a:	e007      	b.n	8013a7c <USBD_GetDescriptor+0x328>

    default:
      USBD_CtlError(pdev, req);
 8013a6c:	6839      	ldr	r1, [r7, #0]
 8013a6e:	6878      	ldr	r0, [r7, #4]
 8013a70:	f000 fa07 	bl	8013e82 <USBD_CtlError>
      err++;
 8013a74:	7cfb      	ldrb	r3, [r7, #19]
 8013a76:	3301      	adds	r3, #1
 8013a78:	74fb      	strb	r3, [r7, #19]
      break;
 8013a7a:	bf00      	nop
  }

  if (err != 0U)
 8013a7c:	7cfb      	ldrb	r3, [r7, #19]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d11e      	bne.n	8013ac0 <USBD_GetDescriptor+0x36c>
  {
    return;
  }

  if (req->wLength != 0U)
 8013a82:	683b      	ldr	r3, [r7, #0]
 8013a84:	88db      	ldrh	r3, [r3, #6]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d016      	beq.n	8013ab8 <USBD_GetDescriptor+0x364>
  {
    if (len != 0U)
 8013a8a:	897b      	ldrh	r3, [r7, #10]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d00e      	beq.n	8013aae <USBD_GetDescriptor+0x35a>
    {
      len = MIN(len, req->wLength);
 8013a90:	683b      	ldr	r3, [r7, #0]
 8013a92:	88da      	ldrh	r2, [r3, #6]
 8013a94:	897b      	ldrh	r3, [r7, #10]
 8013a96:	4293      	cmp	r3, r2
 8013a98:	bf28      	it	cs
 8013a9a:	4613      	movcs	r3, r2
 8013a9c:	b29b      	uxth	r3, r3
 8013a9e:	817b      	strh	r3, [r7, #10]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8013aa0:	897b      	ldrh	r3, [r7, #10]
 8013aa2:	461a      	mov	r2, r3
 8013aa4:	6979      	ldr	r1, [r7, #20]
 8013aa6:	6878      	ldr	r0, [r7, #4]
 8013aa8:	f000 fa68 	bl	8013f7c <USBD_CtlSendData>
 8013aac:	e009      	b.n	8013ac2 <USBD_GetDescriptor+0x36e>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8013aae:	6839      	ldr	r1, [r7, #0]
 8013ab0:	6878      	ldr	r0, [r7, #4]
 8013ab2:	f000 f9e6 	bl	8013e82 <USBD_CtlError>
 8013ab6:	e004      	b.n	8013ac2 <USBD_GetDescriptor+0x36e>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8013ab8:	6878      	ldr	r0, [r7, #4]
 8013aba:	f000 fab9 	bl	8014030 <USBD_CtlSendStatus>
 8013abe:	e000      	b.n	8013ac2 <USBD_GetDescriptor+0x36e>
    return;
 8013ac0:	bf00      	nop
  }
}
 8013ac2:	3718      	adds	r7, #24
 8013ac4:	46bd      	mov	sp, r7
 8013ac6:	bd80      	pop	{r7, pc}

08013ac8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	b084      	sub	sp, #16
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	6078      	str	r0, [r7, #4]
 8013ad0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8013ad2:	683b      	ldr	r3, [r7, #0]
 8013ad4:	889b      	ldrh	r3, [r3, #4]
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d131      	bne.n	8013b3e <USBD_SetAddress+0x76>
 8013ada:	683b      	ldr	r3, [r7, #0]
 8013adc:	88db      	ldrh	r3, [r3, #6]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d12d      	bne.n	8013b3e <USBD_SetAddress+0x76>
 8013ae2:	683b      	ldr	r3, [r7, #0]
 8013ae4:	885b      	ldrh	r3, [r3, #2]
 8013ae6:	2b7f      	cmp	r3, #127	@ 0x7f
 8013ae8:	d829      	bhi.n	8013b3e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8013aea:	683b      	ldr	r3, [r7, #0]
 8013aec:	885b      	ldrh	r3, [r3, #2]
 8013aee:	b2db      	uxtb	r3, r3
 8013af0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013af4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013afc:	b2db      	uxtb	r3, r3
 8013afe:	2b03      	cmp	r3, #3
 8013b00:	d104      	bne.n	8013b0c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8013b02:	6839      	ldr	r1, [r7, #0]
 8013b04:	6878      	ldr	r0, [r7, #4]
 8013b06:	f000 f9bc 	bl	8013e82 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013b0a:	e01d      	b.n	8013b48 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	7bfa      	ldrb	r2, [r7, #15]
 8013b10:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8013b14:	7bfb      	ldrb	r3, [r7, #15]
 8013b16:	4619      	mov	r1, r3
 8013b18:	6878      	ldr	r0, [r7, #4]
 8013b1a:	f005 f9fd 	bl	8018f18 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8013b1e:	6878      	ldr	r0, [r7, #4]
 8013b20:	f000 fa86 	bl	8014030 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8013b24:	7bfb      	ldrb	r3, [r7, #15]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d004      	beq.n	8013b34 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	2202      	movs	r2, #2
 8013b2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013b32:	e009      	b.n	8013b48 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	2201      	movs	r2, #1
 8013b38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013b3c:	e004      	b.n	8013b48 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8013b3e:	6839      	ldr	r1, [r7, #0]
 8013b40:	6878      	ldr	r0, [r7, #4]
 8013b42:	f000 f99e 	bl	8013e82 <USBD_CtlError>
  }
}
 8013b46:	bf00      	nop
 8013b48:	bf00      	nop
 8013b4a:	3710      	adds	r7, #16
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	bd80      	pop	{r7, pc}

08013b50 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b084      	sub	sp, #16
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	6078      	str	r0, [r7, #4]
 8013b58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013b5a:	2300      	movs	r3, #0
 8013b5c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8013b5e:	683b      	ldr	r3, [r7, #0]
 8013b60:	885b      	ldrh	r3, [r3, #2]
 8013b62:	b2da      	uxtb	r2, r3
 8013b64:	4b4e      	ldr	r3, [pc, #312]	@ (8013ca0 <USBD_SetConfig+0x150>)
 8013b66:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013b68:	4b4d      	ldr	r3, [pc, #308]	@ (8013ca0 <USBD_SetConfig+0x150>)
 8013b6a:	781b      	ldrb	r3, [r3, #0]
 8013b6c:	2b01      	cmp	r3, #1
 8013b6e:	d905      	bls.n	8013b7c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8013b70:	6839      	ldr	r1, [r7, #0]
 8013b72:	6878      	ldr	r0, [r7, #4]
 8013b74:	f000 f985 	bl	8013e82 <USBD_CtlError>
    return USBD_FAIL;
 8013b78:	2303      	movs	r3, #3
 8013b7a:	e08c      	b.n	8013c96 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013b82:	b2db      	uxtb	r3, r3
 8013b84:	2b02      	cmp	r3, #2
 8013b86:	d002      	beq.n	8013b8e <USBD_SetConfig+0x3e>
 8013b88:	2b03      	cmp	r3, #3
 8013b8a:	d029      	beq.n	8013be0 <USBD_SetConfig+0x90>
 8013b8c:	e075      	b.n	8013c7a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8013b8e:	4b44      	ldr	r3, [pc, #272]	@ (8013ca0 <USBD_SetConfig+0x150>)
 8013b90:	781b      	ldrb	r3, [r3, #0]
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d020      	beq.n	8013bd8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8013b96:	4b42      	ldr	r3, [pc, #264]	@ (8013ca0 <USBD_SetConfig+0x150>)
 8013b98:	781b      	ldrb	r3, [r3, #0]
 8013b9a:	461a      	mov	r2, r3
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013ba0:	4b3f      	ldr	r3, [pc, #252]	@ (8013ca0 <USBD_SetConfig+0x150>)
 8013ba2:	781b      	ldrb	r3, [r3, #0]
 8013ba4:	4619      	mov	r1, r3
 8013ba6:	6878      	ldr	r0, [r7, #4]
 8013ba8:	f7ff f85c 	bl	8012c64 <USBD_SetClassConfig>
 8013bac:	4603      	mov	r3, r0
 8013bae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8013bb0:	7bfb      	ldrb	r3, [r7, #15]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d008      	beq.n	8013bc8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8013bb6:	6839      	ldr	r1, [r7, #0]
 8013bb8:	6878      	ldr	r0, [r7, #4]
 8013bba:	f000 f962 	bl	8013e82 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	2202      	movs	r2, #2
 8013bc2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013bc6:	e065      	b.n	8013c94 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8013bc8:	6878      	ldr	r0, [r7, #4]
 8013bca:	f000 fa31 	bl	8014030 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	2203      	movs	r2, #3
 8013bd2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8013bd6:	e05d      	b.n	8013c94 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8013bd8:	6878      	ldr	r0, [r7, #4]
 8013bda:	f000 fa29 	bl	8014030 <USBD_CtlSendStatus>
      break;
 8013bde:	e059      	b.n	8013c94 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8013be0:	4b2f      	ldr	r3, [pc, #188]	@ (8013ca0 <USBD_SetConfig+0x150>)
 8013be2:	781b      	ldrb	r3, [r3, #0]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d112      	bne.n	8013c0e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	2202      	movs	r2, #2
 8013bec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8013bf0:	4b2b      	ldr	r3, [pc, #172]	@ (8013ca0 <USBD_SetConfig+0x150>)
 8013bf2:	781b      	ldrb	r3, [r3, #0]
 8013bf4:	461a      	mov	r2, r3
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013bfa:	4b29      	ldr	r3, [pc, #164]	@ (8013ca0 <USBD_SetConfig+0x150>)
 8013bfc:	781b      	ldrb	r3, [r3, #0]
 8013bfe:	4619      	mov	r1, r3
 8013c00:	6878      	ldr	r0, [r7, #4]
 8013c02:	f7ff f84b 	bl	8012c9c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8013c06:	6878      	ldr	r0, [r7, #4]
 8013c08:	f000 fa12 	bl	8014030 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013c0c:	e042      	b.n	8013c94 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8013c0e:	4b24      	ldr	r3, [pc, #144]	@ (8013ca0 <USBD_SetConfig+0x150>)
 8013c10:	781b      	ldrb	r3, [r3, #0]
 8013c12:	461a      	mov	r2, r3
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	685b      	ldr	r3, [r3, #4]
 8013c18:	429a      	cmp	r2, r3
 8013c1a:	d02a      	beq.n	8013c72 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	685b      	ldr	r3, [r3, #4]
 8013c20:	b2db      	uxtb	r3, r3
 8013c22:	4619      	mov	r1, r3
 8013c24:	6878      	ldr	r0, [r7, #4]
 8013c26:	f7ff f839 	bl	8012c9c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8013c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8013ca0 <USBD_SetConfig+0x150>)
 8013c2c:	781b      	ldrb	r3, [r3, #0]
 8013c2e:	461a      	mov	r2, r3
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013c34:	4b1a      	ldr	r3, [pc, #104]	@ (8013ca0 <USBD_SetConfig+0x150>)
 8013c36:	781b      	ldrb	r3, [r3, #0]
 8013c38:	4619      	mov	r1, r3
 8013c3a:	6878      	ldr	r0, [r7, #4]
 8013c3c:	f7ff f812 	bl	8012c64 <USBD_SetClassConfig>
 8013c40:	4603      	mov	r3, r0
 8013c42:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8013c44:	7bfb      	ldrb	r3, [r7, #15]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d00f      	beq.n	8013c6a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8013c4a:	6839      	ldr	r1, [r7, #0]
 8013c4c:	6878      	ldr	r0, [r7, #4]
 8013c4e:	f000 f918 	bl	8013e82 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	685b      	ldr	r3, [r3, #4]
 8013c56:	b2db      	uxtb	r3, r3
 8013c58:	4619      	mov	r1, r3
 8013c5a:	6878      	ldr	r0, [r7, #4]
 8013c5c:	f7ff f81e 	bl	8012c9c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	2202      	movs	r2, #2
 8013c64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8013c68:	e014      	b.n	8013c94 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8013c6a:	6878      	ldr	r0, [r7, #4]
 8013c6c:	f000 f9e0 	bl	8014030 <USBD_CtlSendStatus>
      break;
 8013c70:	e010      	b.n	8013c94 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8013c72:	6878      	ldr	r0, [r7, #4]
 8013c74:	f000 f9dc 	bl	8014030 <USBD_CtlSendStatus>
      break;
 8013c78:	e00c      	b.n	8013c94 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8013c7a:	6839      	ldr	r1, [r7, #0]
 8013c7c:	6878      	ldr	r0, [r7, #4]
 8013c7e:	f000 f900 	bl	8013e82 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013c82:	4b07      	ldr	r3, [pc, #28]	@ (8013ca0 <USBD_SetConfig+0x150>)
 8013c84:	781b      	ldrb	r3, [r3, #0]
 8013c86:	4619      	mov	r1, r3
 8013c88:	6878      	ldr	r0, [r7, #4]
 8013c8a:	f7ff f807 	bl	8012c9c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8013c8e:	2303      	movs	r3, #3
 8013c90:	73fb      	strb	r3, [r7, #15]
      break;
 8013c92:	bf00      	nop
  }

  return ret;
 8013c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c96:	4618      	mov	r0, r3
 8013c98:	3710      	adds	r7, #16
 8013c9a:	46bd      	mov	sp, r7
 8013c9c:	bd80      	pop	{r7, pc}
 8013c9e:	bf00      	nop
 8013ca0:	20000c4f 	.word	0x20000c4f

08013ca4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013ca4:	b580      	push	{r7, lr}
 8013ca6:	b082      	sub	sp, #8
 8013ca8:	af00      	add	r7, sp, #0
 8013caa:	6078      	str	r0, [r7, #4]
 8013cac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8013cae:	683b      	ldr	r3, [r7, #0]
 8013cb0:	88db      	ldrh	r3, [r3, #6]
 8013cb2:	2b01      	cmp	r3, #1
 8013cb4:	d004      	beq.n	8013cc0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8013cb6:	6839      	ldr	r1, [r7, #0]
 8013cb8:	6878      	ldr	r0, [r7, #4]
 8013cba:	f000 f8e2 	bl	8013e82 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8013cbe:	e023      	b.n	8013d08 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013cc6:	b2db      	uxtb	r3, r3
 8013cc8:	2b02      	cmp	r3, #2
 8013cca:	dc02      	bgt.n	8013cd2 <USBD_GetConfig+0x2e>
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	dc03      	bgt.n	8013cd8 <USBD_GetConfig+0x34>
 8013cd0:	e015      	b.n	8013cfe <USBD_GetConfig+0x5a>
 8013cd2:	2b03      	cmp	r3, #3
 8013cd4:	d00b      	beq.n	8013cee <USBD_GetConfig+0x4a>
 8013cd6:	e012      	b.n	8013cfe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	2200      	movs	r2, #0
 8013cdc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	3308      	adds	r3, #8
 8013ce2:	2201      	movs	r2, #1
 8013ce4:	4619      	mov	r1, r3
 8013ce6:	6878      	ldr	r0, [r7, #4]
 8013ce8:	f000 f948 	bl	8013f7c <USBD_CtlSendData>
        break;
 8013cec:	e00c      	b.n	8013d08 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	3304      	adds	r3, #4
 8013cf2:	2201      	movs	r2, #1
 8013cf4:	4619      	mov	r1, r3
 8013cf6:	6878      	ldr	r0, [r7, #4]
 8013cf8:	f000 f940 	bl	8013f7c <USBD_CtlSendData>
        break;
 8013cfc:	e004      	b.n	8013d08 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8013cfe:	6839      	ldr	r1, [r7, #0]
 8013d00:	6878      	ldr	r0, [r7, #4]
 8013d02:	f000 f8be 	bl	8013e82 <USBD_CtlError>
        break;
 8013d06:	bf00      	nop
}
 8013d08:	bf00      	nop
 8013d0a:	3708      	adds	r7, #8
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	bd80      	pop	{r7, pc}

08013d10 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013d10:	b580      	push	{r7, lr}
 8013d12:	b082      	sub	sp, #8
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	6078      	str	r0, [r7, #4]
 8013d18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013d20:	b2db      	uxtb	r3, r3
 8013d22:	3b01      	subs	r3, #1
 8013d24:	2b02      	cmp	r3, #2
 8013d26:	d81e      	bhi.n	8013d66 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013d28:	683b      	ldr	r3, [r7, #0]
 8013d2a:	88db      	ldrh	r3, [r3, #6]
 8013d2c:	2b02      	cmp	r3, #2
 8013d2e:	d004      	beq.n	8013d3a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8013d30:	6839      	ldr	r1, [r7, #0]
 8013d32:	6878      	ldr	r0, [r7, #4]
 8013d34:	f000 f8a5 	bl	8013e82 <USBD_CtlError>
        break;
 8013d38:	e01a      	b.n	8013d70 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	2201      	movs	r2, #1
 8013d3e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d005      	beq.n	8013d56 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	68db      	ldr	r3, [r3, #12]
 8013d4e:	f043 0202 	orr.w	r2, r3, #2
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	330c      	adds	r3, #12
 8013d5a:	2202      	movs	r2, #2
 8013d5c:	4619      	mov	r1, r3
 8013d5e:	6878      	ldr	r0, [r7, #4]
 8013d60:	f000 f90c 	bl	8013f7c <USBD_CtlSendData>
      break;
 8013d64:	e004      	b.n	8013d70 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8013d66:	6839      	ldr	r1, [r7, #0]
 8013d68:	6878      	ldr	r0, [r7, #4]
 8013d6a:	f000 f88a 	bl	8013e82 <USBD_CtlError>
      break;
 8013d6e:	bf00      	nop
  }
}
 8013d70:	bf00      	nop
 8013d72:	3708      	adds	r7, #8
 8013d74:	46bd      	mov	sp, r7
 8013d76:	bd80      	pop	{r7, pc}

08013d78 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	b082      	sub	sp, #8
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	6078      	str	r0, [r7, #4]
 8013d80:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013d82:	683b      	ldr	r3, [r7, #0]
 8013d84:	885b      	ldrh	r3, [r3, #2]
 8013d86:	2b01      	cmp	r3, #1
 8013d88:	d107      	bne.n	8013d9a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	2201      	movs	r2, #1
 8013d8e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8013d92:	6878      	ldr	r0, [r7, #4]
 8013d94:	f000 f94c 	bl	8014030 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8013d98:	e013      	b.n	8013dc2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8013d9a:	683b      	ldr	r3, [r7, #0]
 8013d9c:	885b      	ldrh	r3, [r3, #2]
 8013d9e:	2b02      	cmp	r3, #2
 8013da0:	d10b      	bne.n	8013dba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8013da2:	683b      	ldr	r3, [r7, #0]
 8013da4:	889b      	ldrh	r3, [r3, #4]
 8013da6:	0a1b      	lsrs	r3, r3, #8
 8013da8:	b29b      	uxth	r3, r3
 8013daa:	b2da      	uxtb	r2, r3
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8013db2:	6878      	ldr	r0, [r7, #4]
 8013db4:	f000 f93c 	bl	8014030 <USBD_CtlSendStatus>
}
 8013db8:	e003      	b.n	8013dc2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8013dba:	6839      	ldr	r1, [r7, #0]
 8013dbc:	6878      	ldr	r0, [r7, #4]
 8013dbe:	f000 f860 	bl	8013e82 <USBD_CtlError>
}
 8013dc2:	bf00      	nop
 8013dc4:	3708      	adds	r7, #8
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	bd80      	pop	{r7, pc}

08013dca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013dca:	b580      	push	{r7, lr}
 8013dcc:	b082      	sub	sp, #8
 8013dce:	af00      	add	r7, sp, #0
 8013dd0:	6078      	str	r0, [r7, #4]
 8013dd2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013dda:	b2db      	uxtb	r3, r3
 8013ddc:	3b01      	subs	r3, #1
 8013dde:	2b02      	cmp	r3, #2
 8013de0:	d80b      	bhi.n	8013dfa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013de2:	683b      	ldr	r3, [r7, #0]
 8013de4:	885b      	ldrh	r3, [r3, #2]
 8013de6:	2b01      	cmp	r3, #1
 8013de8:	d10c      	bne.n	8013e04 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	2200      	movs	r2, #0
 8013dee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8013df2:	6878      	ldr	r0, [r7, #4]
 8013df4:	f000 f91c 	bl	8014030 <USBD_CtlSendStatus>
      }
      break;
 8013df8:	e004      	b.n	8013e04 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8013dfa:	6839      	ldr	r1, [r7, #0]
 8013dfc:	6878      	ldr	r0, [r7, #4]
 8013dfe:	f000 f840 	bl	8013e82 <USBD_CtlError>
      break;
 8013e02:	e000      	b.n	8013e06 <USBD_ClrFeature+0x3c>
      break;
 8013e04:	bf00      	nop
  }
}
 8013e06:	bf00      	nop
 8013e08:	3708      	adds	r7, #8
 8013e0a:	46bd      	mov	sp, r7
 8013e0c:	bd80      	pop	{r7, pc}

08013e0e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8013e0e:	b580      	push	{r7, lr}
 8013e10:	b084      	sub	sp, #16
 8013e12:	af00      	add	r7, sp, #0
 8013e14:	6078      	str	r0, [r7, #4]
 8013e16:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8013e18:	683b      	ldr	r3, [r7, #0]
 8013e1a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	781a      	ldrb	r2, [r3, #0]
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	3301      	adds	r3, #1
 8013e28:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	781a      	ldrb	r2, [r3, #0]
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	3301      	adds	r3, #1
 8013e36:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8013e38:	68f8      	ldr	r0, [r7, #12]
 8013e3a:	f7ff f9ef 	bl	801321c <SWAPBYTE>
 8013e3e:	4603      	mov	r3, r0
 8013e40:	461a      	mov	r2, r3
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	3301      	adds	r3, #1
 8013e4a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	3301      	adds	r3, #1
 8013e50:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8013e52:	68f8      	ldr	r0, [r7, #12]
 8013e54:	f7ff f9e2 	bl	801321c <SWAPBYTE>
 8013e58:	4603      	mov	r3, r0
 8013e5a:	461a      	mov	r2, r3
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	3301      	adds	r3, #1
 8013e64:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	3301      	adds	r3, #1
 8013e6a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8013e6c:	68f8      	ldr	r0, [r7, #12]
 8013e6e:	f7ff f9d5 	bl	801321c <SWAPBYTE>
 8013e72:	4603      	mov	r3, r0
 8013e74:	461a      	mov	r2, r3
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	80da      	strh	r2, [r3, #6]
}
 8013e7a:	bf00      	nop
 8013e7c:	3710      	adds	r7, #16
 8013e7e:	46bd      	mov	sp, r7
 8013e80:	bd80      	pop	{r7, pc}

08013e82 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013e82:	b580      	push	{r7, lr}
 8013e84:	b082      	sub	sp, #8
 8013e86:	af00      	add	r7, sp, #0
 8013e88:	6078      	str	r0, [r7, #4]
 8013e8a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013e8c:	2180      	movs	r1, #128	@ 0x80
 8013e8e:	6878      	ldr	r0, [r7, #4]
 8013e90:	f004 ffd8 	bl	8018e44 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8013e94:	2100      	movs	r1, #0
 8013e96:	6878      	ldr	r0, [r7, #4]
 8013e98:	f004 ffd4 	bl	8018e44 <USBD_LL_StallEP>
}
 8013e9c:	bf00      	nop
 8013e9e:	3708      	adds	r7, #8
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	bd80      	pop	{r7, pc}

08013ea4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	b086      	sub	sp, #24
 8013ea8:	af00      	add	r7, sp, #0
 8013eaa:	60f8      	str	r0, [r7, #12]
 8013eac:	60b9      	str	r1, [r7, #8]
 8013eae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d042      	beq.n	8013f40 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8013ebe:	6938      	ldr	r0, [r7, #16]
 8013ec0:	f000 f842 	bl	8013f48 <USBD_GetLen>
 8013ec4:	4603      	mov	r3, r0
 8013ec6:	3301      	adds	r3, #1
 8013ec8:	005b      	lsls	r3, r3, #1
 8013eca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013ece:	d808      	bhi.n	8013ee2 <USBD_GetString+0x3e>
 8013ed0:	6938      	ldr	r0, [r7, #16]
 8013ed2:	f000 f839 	bl	8013f48 <USBD_GetLen>
 8013ed6:	4603      	mov	r3, r0
 8013ed8:	3301      	adds	r3, #1
 8013eda:	b29b      	uxth	r3, r3
 8013edc:	005b      	lsls	r3, r3, #1
 8013ede:	b29a      	uxth	r2, r3
 8013ee0:	e001      	b.n	8013ee6 <USBD_GetString+0x42>
 8013ee2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8013eea:	7dfb      	ldrb	r3, [r7, #23]
 8013eec:	68ba      	ldr	r2, [r7, #8]
 8013eee:	4413      	add	r3, r2
 8013ef0:	687a      	ldr	r2, [r7, #4]
 8013ef2:	7812      	ldrb	r2, [r2, #0]
 8013ef4:	701a      	strb	r2, [r3, #0]
  idx++;
 8013ef6:	7dfb      	ldrb	r3, [r7, #23]
 8013ef8:	3301      	adds	r3, #1
 8013efa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8013efc:	7dfb      	ldrb	r3, [r7, #23]
 8013efe:	68ba      	ldr	r2, [r7, #8]
 8013f00:	4413      	add	r3, r2
 8013f02:	2203      	movs	r2, #3
 8013f04:	701a      	strb	r2, [r3, #0]
  idx++;
 8013f06:	7dfb      	ldrb	r3, [r7, #23]
 8013f08:	3301      	adds	r3, #1
 8013f0a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8013f0c:	e013      	b.n	8013f36 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8013f0e:	7dfb      	ldrb	r3, [r7, #23]
 8013f10:	68ba      	ldr	r2, [r7, #8]
 8013f12:	4413      	add	r3, r2
 8013f14:	693a      	ldr	r2, [r7, #16]
 8013f16:	7812      	ldrb	r2, [r2, #0]
 8013f18:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8013f1a:	693b      	ldr	r3, [r7, #16]
 8013f1c:	3301      	adds	r3, #1
 8013f1e:	613b      	str	r3, [r7, #16]
    idx++;
 8013f20:	7dfb      	ldrb	r3, [r7, #23]
 8013f22:	3301      	adds	r3, #1
 8013f24:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8013f26:	7dfb      	ldrb	r3, [r7, #23]
 8013f28:	68ba      	ldr	r2, [r7, #8]
 8013f2a:	4413      	add	r3, r2
 8013f2c:	2200      	movs	r2, #0
 8013f2e:	701a      	strb	r2, [r3, #0]
    idx++;
 8013f30:	7dfb      	ldrb	r3, [r7, #23]
 8013f32:	3301      	adds	r3, #1
 8013f34:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8013f36:	693b      	ldr	r3, [r7, #16]
 8013f38:	781b      	ldrb	r3, [r3, #0]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d1e7      	bne.n	8013f0e <USBD_GetString+0x6a>
 8013f3e:	e000      	b.n	8013f42 <USBD_GetString+0x9e>
    return;
 8013f40:	bf00      	nop
  }
}
 8013f42:	3718      	adds	r7, #24
 8013f44:	46bd      	mov	sp, r7
 8013f46:	bd80      	pop	{r7, pc}

08013f48 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8013f48:	b480      	push	{r7}
 8013f4a:	b085      	sub	sp, #20
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8013f50:	2300      	movs	r3, #0
 8013f52:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8013f58:	e005      	b.n	8013f66 <USBD_GetLen+0x1e>
  {
    len++;
 8013f5a:	7bfb      	ldrb	r3, [r7, #15]
 8013f5c:	3301      	adds	r3, #1
 8013f5e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8013f60:	68bb      	ldr	r3, [r7, #8]
 8013f62:	3301      	adds	r3, #1
 8013f64:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8013f66:	68bb      	ldr	r3, [r7, #8]
 8013f68:	781b      	ldrb	r3, [r3, #0]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d1f5      	bne.n	8013f5a <USBD_GetLen+0x12>
  }

  return len;
 8013f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f70:	4618      	mov	r0, r3
 8013f72:	3714      	adds	r7, #20
 8013f74:	46bd      	mov	sp, r7
 8013f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f7a:	4770      	bx	lr

08013f7c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	b084      	sub	sp, #16
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	60f8      	str	r0, [r7, #12]
 8013f84:	60b9      	str	r1, [r7, #8]
 8013f86:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	2202      	movs	r2, #2
 8013f8c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	687a      	ldr	r2, [r7, #4]
 8013f94:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	687a      	ldr	r2, [r7, #4]
 8013f9a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	68ba      	ldr	r2, [r7, #8]
 8013fa0:	2100      	movs	r1, #0
 8013fa2:	68f8      	ldr	r0, [r7, #12]
 8013fa4:	f004 ffd7 	bl	8018f56 <USBD_LL_Transmit>

  return USBD_OK;
 8013fa8:	2300      	movs	r3, #0
}
 8013faa:	4618      	mov	r0, r3
 8013fac:	3710      	adds	r7, #16
 8013fae:	46bd      	mov	sp, r7
 8013fb0:	bd80      	pop	{r7, pc}

08013fb2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8013fb2:	b580      	push	{r7, lr}
 8013fb4:	b084      	sub	sp, #16
 8013fb6:	af00      	add	r7, sp, #0
 8013fb8:	60f8      	str	r0, [r7, #12]
 8013fba:	60b9      	str	r1, [r7, #8]
 8013fbc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	68ba      	ldr	r2, [r7, #8]
 8013fc2:	2100      	movs	r1, #0
 8013fc4:	68f8      	ldr	r0, [r7, #12]
 8013fc6:	f004 ffc6 	bl	8018f56 <USBD_LL_Transmit>

  return USBD_OK;
 8013fca:	2300      	movs	r3, #0
}
 8013fcc:	4618      	mov	r0, r3
 8013fce:	3710      	adds	r7, #16
 8013fd0:	46bd      	mov	sp, r7
 8013fd2:	bd80      	pop	{r7, pc}

08013fd4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8013fd4:	b580      	push	{r7, lr}
 8013fd6:	b084      	sub	sp, #16
 8013fd8:	af00      	add	r7, sp, #0
 8013fda:	60f8      	str	r0, [r7, #12]
 8013fdc:	60b9      	str	r1, [r7, #8]
 8013fde:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	2203      	movs	r2, #3
 8013fe4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	687a      	ldr	r2, [r7, #4]
 8013fec:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	687a      	ldr	r2, [r7, #4]
 8013ff4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	68ba      	ldr	r2, [r7, #8]
 8013ffc:	2100      	movs	r1, #0
 8013ffe:	68f8      	ldr	r0, [r7, #12]
 8014000:	f004 ffca 	bl	8018f98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014004:	2300      	movs	r3, #0
}
 8014006:	4618      	mov	r0, r3
 8014008:	3710      	adds	r7, #16
 801400a:	46bd      	mov	sp, r7
 801400c:	bd80      	pop	{r7, pc}

0801400e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801400e:	b580      	push	{r7, lr}
 8014010:	b084      	sub	sp, #16
 8014012:	af00      	add	r7, sp, #0
 8014014:	60f8      	str	r0, [r7, #12]
 8014016:	60b9      	str	r1, [r7, #8]
 8014018:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	68ba      	ldr	r2, [r7, #8]
 801401e:	2100      	movs	r1, #0
 8014020:	68f8      	ldr	r0, [r7, #12]
 8014022:	f004 ffb9 	bl	8018f98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014026:	2300      	movs	r3, #0
}
 8014028:	4618      	mov	r0, r3
 801402a:	3710      	adds	r7, #16
 801402c:	46bd      	mov	sp, r7
 801402e:	bd80      	pop	{r7, pc}

08014030 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014030:	b580      	push	{r7, lr}
 8014032:	b082      	sub	sp, #8
 8014034:	af00      	add	r7, sp, #0
 8014036:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	2204      	movs	r2, #4
 801403c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014040:	2300      	movs	r3, #0
 8014042:	2200      	movs	r2, #0
 8014044:	2100      	movs	r1, #0
 8014046:	6878      	ldr	r0, [r7, #4]
 8014048:	f004 ff85 	bl	8018f56 <USBD_LL_Transmit>

  return USBD_OK;
 801404c:	2300      	movs	r3, #0
}
 801404e:	4618      	mov	r0, r3
 8014050:	3708      	adds	r7, #8
 8014052:	46bd      	mov	sp, r7
 8014054:	bd80      	pop	{r7, pc}

08014056 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014056:	b580      	push	{r7, lr}
 8014058:	b082      	sub	sp, #8
 801405a:	af00      	add	r7, sp, #0
 801405c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	2205      	movs	r2, #5
 8014062:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014066:	2300      	movs	r3, #0
 8014068:	2200      	movs	r2, #0
 801406a:	2100      	movs	r1, #0
 801406c:	6878      	ldr	r0, [r7, #4]
 801406e:	f004 ff93 	bl	8018f98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014072:	2300      	movs	r3, #0
}
 8014074:	4618      	mov	r0, r3
 8014076:	3708      	adds	r7, #8
 8014078:	46bd      	mov	sp, r7
 801407a:	bd80      	pop	{r7, pc}

0801407c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 801407c:	b580      	push	{r7, lr}
 801407e:	b088      	sub	sp, #32
 8014080:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8014082:	2300      	movs	r3, #0
 8014084:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014086:	f107 0308 	add.w	r3, r7, #8
 801408a:	2218      	movs	r2, #24
 801408c:	2100      	movs	r1, #0
 801408e:	4618      	mov	r0, r3
 8014090:	f001 f92d 	bl	80152ee <Osal_MemSet>
  rq.ogf = 0x3f;
 8014094:	233f      	movs	r3, #63	@ 0x3f
 8014096:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8014098:	2381      	movs	r3, #129	@ 0x81
 801409a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 801409c:	1dfb      	adds	r3, r7, #7
 801409e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80140a0:	2301      	movs	r3, #1
 80140a2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80140a4:	f107 0308 	add.w	r3, r7, #8
 80140a8:	2100      	movs	r1, #0
 80140aa:	4618      	mov	r0, r3
 80140ac:	f001 fba8 	bl	8015800 <hci_send_req>
 80140b0:	4603      	mov	r3, r0
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	da01      	bge.n	80140ba <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80140b6:	23ff      	movs	r3, #255	@ 0xff
 80140b8:	e000      	b.n	80140bc <aci_gap_set_non_discoverable+0x40>
  return status;
 80140ba:	79fb      	ldrb	r3, [r7, #7]
}
 80140bc:	4618      	mov	r0, r3
 80140be:	3720      	adds	r7, #32
 80140c0:	46bd      	mov	sp, r7
 80140c2:	bd80      	pop	{r7, pc}

080140c4 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 80140c4:	b5b0      	push	{r4, r5, r7, lr}
 80140c6:	b0ce      	sub	sp, #312	@ 0x138
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	4605      	mov	r5, r0
 80140cc:	460c      	mov	r4, r1
 80140ce:	4610      	mov	r0, r2
 80140d0:	4619      	mov	r1, r3
 80140d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80140d6:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80140da:	462a      	mov	r2, r5
 80140dc:	701a      	strb	r2, [r3, #0]
 80140de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80140e2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80140e6:	4622      	mov	r2, r4
 80140e8:	801a      	strh	r2, [r3, #0]
 80140ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80140ee:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80140f2:	4602      	mov	r2, r0
 80140f4:	801a      	strh	r2, [r3, #0]
 80140f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80140fa:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80140fe:	460a      	mov	r2, r1
 8014100:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8014102:	f107 0310 	add.w	r3, r7, #16
 8014106:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 801410a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 801410e:	3308      	adds	r3, #8
 8014110:	f107 0210 	add.w	r2, r7, #16
 8014114:	4413      	add	r3, r2
 8014116:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 801411a:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 801411e:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8014122:	4413      	add	r3, r2
 8014124:	3309      	adds	r3, #9
 8014126:	f107 0210 	add.w	r2, r7, #16
 801412a:	4413      	add	r3, r2
 801412c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014130:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014134:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014138:	2200      	movs	r2, #0
 801413a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801413c:	2300      	movs	r3, #0
 801413e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8014142:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014146:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801414a:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 801414e:	7812      	ldrb	r2, [r2, #0]
 8014150:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8014152:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014156:	3301      	adds	r3, #1
 8014158:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 801415c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014160:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014164:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8014168:	8812      	ldrh	r2, [r2, #0]
 801416a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 801416e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014172:	3302      	adds	r3, #2
 8014174:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8014178:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801417c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014180:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8014184:	8812      	ldrh	r2, [r2, #0]
 8014186:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 801418a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801418e:	3302      	adds	r3, #2
 8014190:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8014194:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014198:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801419c:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80141a0:	7812      	ldrb	r2, [r2, #0]
 80141a2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80141a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80141a8:	3301      	adds	r3, #1
 80141aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80141ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80141b2:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80141b6:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80141b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80141bc:	3301      	adds	r3, #1
 80141be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80141c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80141c6:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80141ca:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80141cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80141d0:	3301      	adds	r3, #1
 80141d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80141d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80141da:	3308      	adds	r3, #8
 80141dc:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80141e0:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 80141e4:	4618      	mov	r0, r3
 80141e6:	f001 f872 	bl	80152ce <Osal_MemCpy>
    index_input += Local_Name_Length;
 80141ea:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80141ee:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80141f2:	4413      	add	r3, r2
 80141f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80141f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80141fc:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8014200:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8014202:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014206:	3301      	adds	r3, #1
 8014208:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 801420c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014210:	3301      	adds	r3, #1
 8014212:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8014216:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 801421a:	4618      	mov	r0, r3
 801421c:	f001 f857 	bl	80152ce <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8014220:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8014224:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8014228:	4413      	add	r3, r2
 801422a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 801422e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014232:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8014236:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8014238:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801423c:	3302      	adds	r3, #2
 801423e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8014242:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014246:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 801424a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 801424c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014250:	3302      	adds	r3, #2
 8014252:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014256:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801425a:	2218      	movs	r2, #24
 801425c:	2100      	movs	r1, #0
 801425e:	4618      	mov	r0, r3
 8014260:	f001 f845 	bl	80152ee <Osal_MemSet>
  rq.ogf = 0x3f;
 8014264:	233f      	movs	r3, #63	@ 0x3f
 8014266:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 801426a:	2383      	movs	r3, #131	@ 0x83
 801426c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014270:	f107 0310 	add.w	r3, r7, #16
 8014274:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014278:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801427c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014280:	f107 030f 	add.w	r3, r7, #15
 8014284:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014288:	2301      	movs	r3, #1
 801428a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801428e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014292:	2100      	movs	r1, #0
 8014294:	4618      	mov	r0, r3
 8014296:	f001 fab3 	bl	8015800 <hci_send_req>
 801429a:	4603      	mov	r3, r0
 801429c:	2b00      	cmp	r3, #0
 801429e:	da01      	bge.n	80142a4 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80142a0:	23ff      	movs	r3, #255	@ 0xff
 80142a2:	e004      	b.n	80142ae <aci_gap_set_discoverable+0x1ea>
  return status;
 80142a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80142a8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80142ac:	781b      	ldrb	r3, [r3, #0]
}
 80142ae:	4618      	mov	r0, r3
 80142b0:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80142b4:	46bd      	mov	sp, r7
 80142b6:	bdb0      	pop	{r4, r5, r7, pc}

080142b8 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80142b8:	b580      	push	{r7, lr}
 80142ba:	b0cc      	sub	sp, #304	@ 0x130
 80142bc:	af00      	add	r7, sp, #0
 80142be:	4602      	mov	r2, r0
 80142c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80142c4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80142c8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80142ca:	f107 0310 	add.w	r3, r7, #16
 80142ce:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80142d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80142d6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80142da:	2200      	movs	r2, #0
 80142dc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80142de:	2300      	movs	r3, #0
 80142e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 80142e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80142e8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80142ec:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80142f0:	7812      	ldrb	r2, [r2, #0]
 80142f2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80142f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80142f8:	3301      	adds	r3, #1
 80142fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80142fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014302:	2218      	movs	r2, #24
 8014304:	2100      	movs	r1, #0
 8014306:	4618      	mov	r0, r3
 8014308:	f000 fff1 	bl	80152ee <Osal_MemSet>
  rq.ogf = 0x3f;
 801430c:	233f      	movs	r3, #63	@ 0x3f
 801430e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8014312:	2385      	movs	r3, #133	@ 0x85
 8014314:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014318:	f107 0310 	add.w	r3, r7, #16
 801431c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014320:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014324:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014328:	f107 030f 	add.w	r3, r7, #15
 801432c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014330:	2301      	movs	r3, #1
 8014332:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014336:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801433a:	2100      	movs	r1, #0
 801433c:	4618      	mov	r0, r3
 801433e:	f001 fa5f 	bl	8015800 <hci_send_req>
 8014342:	4603      	mov	r3, r0
 8014344:	2b00      	cmp	r3, #0
 8014346:	da01      	bge.n	801434c <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8014348:	23ff      	movs	r3, #255	@ 0xff
 801434a:	e004      	b.n	8014356 <aci_gap_set_io_capability+0x9e>
  return status;
 801434c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014350:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014354:	781b      	ldrb	r3, [r3, #0]
}
 8014356:	4618      	mov	r0, r3
 8014358:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 801435c:	46bd      	mov	sp, r7
 801435e:	bd80      	pop	{r7, pc}

08014360 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8014360:	b5b0      	push	{r4, r5, r7, lr}
 8014362:	b0cc      	sub	sp, #304	@ 0x130
 8014364:	af00      	add	r7, sp, #0
 8014366:	4605      	mov	r5, r0
 8014368:	460c      	mov	r4, r1
 801436a:	4610      	mov	r0, r2
 801436c:	4619      	mov	r1, r3
 801436e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014372:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014376:	462a      	mov	r2, r5
 8014378:	701a      	strb	r2, [r3, #0]
 801437a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801437e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8014382:	4622      	mov	r2, r4
 8014384:	701a      	strb	r2, [r3, #0]
 8014386:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801438a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 801438e:	4602      	mov	r2, r0
 8014390:	701a      	strb	r2, [r3, #0]
 8014392:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014396:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801439a:	460a      	mov	r2, r1
 801439c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 801439e:	f107 0310 	add.w	r3, r7, #16
 80143a2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80143a6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80143aa:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80143ae:	2200      	movs	r2, #0
 80143b0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80143b2:	2300      	movs	r3, #0
 80143b4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80143b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80143bc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80143c0:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80143c4:	7812      	ldrb	r2, [r2, #0]
 80143c6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80143c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80143cc:	3301      	adds	r3, #1
 80143ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 80143d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80143d6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80143da:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80143de:	7812      	ldrb	r2, [r2, #0]
 80143e0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80143e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80143e6:	3301      	adds	r3, #1
 80143e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 80143ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80143f0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80143f4:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80143f8:	7812      	ldrb	r2, [r2, #0]
 80143fa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80143fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014400:	3301      	adds	r3, #1
 8014402:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8014406:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801440a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801440e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8014412:	7812      	ldrb	r2, [r2, #0]
 8014414:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8014416:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801441a:	3301      	adds	r3, #1
 801441c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8014420:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014424:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8014428:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 801442a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801442e:	3301      	adds	r3, #1
 8014430:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8014434:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014438:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 801443c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 801443e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014442:	3301      	adds	r3, #1
 8014444:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8014448:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801444c:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8014450:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8014452:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014456:	3301      	adds	r3, #1
 8014458:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 801445c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014460:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8014464:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8014468:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801446c:	3304      	adds	r3, #4
 801446e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8014472:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014476:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 801447a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 801447c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014480:	3301      	adds	r3, #1
 8014482:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014486:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801448a:	2218      	movs	r2, #24
 801448c:	2100      	movs	r1, #0
 801448e:	4618      	mov	r0, r3
 8014490:	f000 ff2d 	bl	80152ee <Osal_MemSet>
  rq.ogf = 0x3f;
 8014494:	233f      	movs	r3, #63	@ 0x3f
 8014496:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 801449a:	2386      	movs	r3, #134	@ 0x86
 801449c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80144a0:	f107 0310 	add.w	r3, r7, #16
 80144a4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80144a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80144ac:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80144b0:	f107 030f 	add.w	r3, r7, #15
 80144b4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80144b8:	2301      	movs	r3, #1
 80144ba:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80144be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80144c2:	2100      	movs	r1, #0
 80144c4:	4618      	mov	r0, r3
 80144c6:	f001 f99b 	bl	8015800 <hci_send_req>
 80144ca:	4603      	mov	r3, r0
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	da01      	bge.n	80144d4 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80144d0:	23ff      	movs	r3, #255	@ 0xff
 80144d2:	e004      	b.n	80144de <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80144d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80144d8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80144dc:	781b      	ldrb	r3, [r3, #0]
}
 80144de:	4618      	mov	r0, r3
 80144e0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80144e4:	46bd      	mov	sp, r7
 80144e6:	bdb0      	pop	{r4, r5, r7, pc}

080144e8 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80144e8:	b580      	push	{r7, lr}
 80144ea:	b0cc      	sub	sp, #304	@ 0x130
 80144ec:	af00      	add	r7, sp, #0
 80144ee:	4602      	mov	r2, r0
 80144f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80144f4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80144f8:	6019      	str	r1, [r3, #0]
 80144fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80144fe:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8014502:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8014504:	f107 0310 	add.w	r3, r7, #16
 8014508:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801450c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014510:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014514:	2200      	movs	r2, #0
 8014516:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014518:	2300      	movs	r3, #0
 801451a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 801451e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014522:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014526:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801452a:	8812      	ldrh	r2, [r2, #0]
 801452c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801452e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014532:	3302      	adds	r3, #2
 8014534:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8014538:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801453c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014540:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8014544:	6812      	ldr	r2, [r2, #0]
 8014546:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 801454a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801454e:	3304      	adds	r3, #4
 8014550:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014554:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014558:	2218      	movs	r2, #24
 801455a:	2100      	movs	r1, #0
 801455c:	4618      	mov	r0, r3
 801455e:	f000 fec6 	bl	80152ee <Osal_MemSet>
  rq.ogf = 0x3f;
 8014562:	233f      	movs	r3, #63	@ 0x3f
 8014564:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8014568:	2388      	movs	r3, #136	@ 0x88
 801456a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801456e:	f107 0310 	add.w	r3, r7, #16
 8014572:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014576:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801457a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801457e:	f107 030f 	add.w	r3, r7, #15
 8014582:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014586:	2301      	movs	r3, #1
 8014588:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801458c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014590:	2100      	movs	r1, #0
 8014592:	4618      	mov	r0, r3
 8014594:	f001 f934 	bl	8015800 <hci_send_req>
 8014598:	4603      	mov	r3, r0
 801459a:	2b00      	cmp	r3, #0
 801459c:	da01      	bge.n	80145a2 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 801459e:	23ff      	movs	r3, #255	@ 0xff
 80145a0:	e004      	b.n	80145ac <aci_gap_pass_key_resp+0xc4>
  return status;
 80145a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80145a6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80145aa:	781b      	ldrb	r3, [r3, #0]
}
 80145ac:	4618      	mov	r0, r3
 80145ae:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80145b2:	46bd      	mov	sp, r7
 80145b4:	bd80      	pop	{r7, pc}

080145b6 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80145b6:	b590      	push	{r4, r7, lr}
 80145b8:	b0cd      	sub	sp, #308	@ 0x134
 80145ba:	af00      	add	r7, sp, #0
 80145bc:	4604      	mov	r4, r0
 80145be:	4608      	mov	r0, r1
 80145c0:	4611      	mov	r1, r2
 80145c2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80145c6:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80145ca:	6013      	str	r3, [r2, #0]
 80145cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80145d0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80145d4:	4622      	mov	r2, r4
 80145d6:	701a      	strb	r2, [r3, #0]
 80145d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80145dc:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80145e0:	4602      	mov	r2, r0
 80145e2:	701a      	strb	r2, [r3, #0]
 80145e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80145e8:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80145ec:	460a      	mov	r2, r1
 80145ee:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80145f0:	f107 0310 	add.w	r3, r7, #16
 80145f4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80145f8:	f107 0308 	add.w	r3, r7, #8
 80145fc:	2207      	movs	r2, #7
 80145fe:	2100      	movs	r1, #0
 8014600:	4618      	mov	r0, r3
 8014602:	f000 fe74 	bl	80152ee <Osal_MemSet>
  int index_input = 0;
 8014606:	2300      	movs	r3, #0
 8014608:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 801460c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014610:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014614:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8014618:	7812      	ldrb	r2, [r2, #0]
 801461a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801461c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014620:	3301      	adds	r3, #1
 8014622:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8014626:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801462a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801462e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8014632:	7812      	ldrb	r2, [r2, #0]
 8014634:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8014636:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801463a:	3301      	adds	r3, #1
 801463c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8014640:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014644:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014648:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 801464c:	7812      	ldrb	r2, [r2, #0]
 801464e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8014650:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014654:	3301      	adds	r3, #1
 8014656:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801465a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801465e:	2218      	movs	r2, #24
 8014660:	2100      	movs	r1, #0
 8014662:	4618      	mov	r0, r3
 8014664:	f000 fe43 	bl	80152ee <Osal_MemSet>
  rq.ogf = 0x3f;
 8014668:	233f      	movs	r3, #63	@ 0x3f
 801466a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 801466e:	238a      	movs	r3, #138	@ 0x8a
 8014670:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014674:	f107 0310 	add.w	r3, r7, #16
 8014678:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801467c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014680:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8014684:	f107 0308 	add.w	r3, r7, #8
 8014688:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 801468c:	2307      	movs	r3, #7
 801468e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014692:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014696:	2100      	movs	r1, #0
 8014698:	4618      	mov	r0, r3
 801469a:	f001 f8b1 	bl	8015800 <hci_send_req>
 801469e:	4603      	mov	r3, r0
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	da01      	bge.n	80146a8 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80146a4:	23ff      	movs	r3, #255	@ 0xff
 80146a6:	e02e      	b.n	8014706 <aci_gap_init+0x150>
  if ( resp.Status )
 80146a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80146ac:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80146b0:	781b      	ldrb	r3, [r3, #0]
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d005      	beq.n	80146c2 <aci_gap_init+0x10c>
    return resp.Status;
 80146b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80146ba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80146be:	781b      	ldrb	r3, [r3, #0]
 80146c0:	e021      	b.n	8014706 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 80146c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80146c6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80146ca:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80146ce:	b29a      	uxth	r2, r3
 80146d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80146d4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80146dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80146e0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80146e4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80146e8:	b29a      	uxth	r2, r3
 80146ea:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80146ee:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80146f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80146f4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80146f8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80146fc:	b29a      	uxth	r2, r3
 80146fe:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8014702:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8014704:	2300      	movs	r3, #0
}
 8014706:	4618      	mov	r0, r3
 8014708:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 801470c:	46bd      	mov	sp, r7
 801470e:	bd90      	pop	{r4, r7, pc}

08014710 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8014710:	b580      	push	{r7, lr}
 8014712:	b0cc      	sub	sp, #304	@ 0x130
 8014714:	af00      	add	r7, sp, #0
 8014716:	4602      	mov	r2, r0
 8014718:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801471c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8014720:	6019      	str	r1, [r3, #0]
 8014722:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014726:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801472a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 801472c:	f107 0310 	add.w	r3, r7, #16
 8014730:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014734:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014738:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801473c:	2200      	movs	r2, #0
 801473e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014740:	2300      	movs	r3, #0
 8014742:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8014746:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801474a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801474e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8014752:	7812      	ldrb	r2, [r2, #0]
 8014754:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8014756:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801475a:	3301      	adds	r3, #1
 801475c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8014760:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014764:	1c58      	adds	r0, r3, #1
 8014766:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801476a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801476e:	781a      	ldrb	r2, [r3, #0]
 8014770:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014774:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8014778:	6819      	ldr	r1, [r3, #0]
 801477a:	f000 fda8 	bl	80152ce <Osal_MemCpy>
  index_input += AdvDataLen;
 801477e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014782:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014786:	781b      	ldrb	r3, [r3, #0]
 8014788:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801478c:	4413      	add	r3, r2
 801478e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014792:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014796:	2218      	movs	r2, #24
 8014798:	2100      	movs	r1, #0
 801479a:	4618      	mov	r0, r3
 801479c:	f000 fda7 	bl	80152ee <Osal_MemSet>
  rq.ogf = 0x3f;
 80147a0:	233f      	movs	r3, #63	@ 0x3f
 80147a2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 80147a6:	238e      	movs	r3, #142	@ 0x8e
 80147a8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80147ac:	f107 0310 	add.w	r3, r7, #16
 80147b0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80147b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80147b8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80147bc:	f107 030f 	add.w	r3, r7, #15
 80147c0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80147c4:	2301      	movs	r3, #1
 80147c6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80147ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80147ce:	2100      	movs	r1, #0
 80147d0:	4618      	mov	r0, r3
 80147d2:	f001 f815 	bl	8015800 <hci_send_req>
 80147d6:	4603      	mov	r3, r0
 80147d8:	2b00      	cmp	r3, #0
 80147da:	da01      	bge.n	80147e0 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80147dc:	23ff      	movs	r3, #255	@ 0xff
 80147de:	e004      	b.n	80147ea <aci_gap_update_adv_data+0xda>
  return status;
 80147e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80147e4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80147e8:	781b      	ldrb	r3, [r3, #0]
}
 80147ea:	4618      	mov	r0, r3
 80147ec:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80147f0:	46bd      	mov	sp, r7
 80147f2:	bd80      	pop	{r7, pc}

080147f4 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 80147f4:	b580      	push	{r7, lr}
 80147f6:	b088      	sub	sp, #32
 80147f8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80147fa:	2300      	movs	r3, #0
 80147fc:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80147fe:	f107 0308 	add.w	r3, r7, #8
 8014802:	2218      	movs	r2, #24
 8014804:	2100      	movs	r1, #0
 8014806:	4618      	mov	r0, r3
 8014808:	f000 fd71 	bl	80152ee <Osal_MemSet>
  rq.ogf = 0x3f;
 801480c:	233f      	movs	r3, #63	@ 0x3f
 801480e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8014810:	2392      	movs	r3, #146	@ 0x92
 8014812:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8014814:	1dfb      	adds	r3, r7, #7
 8014816:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8014818:	2301      	movs	r3, #1
 801481a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 801481c:	f107 0308 	add.w	r3, r7, #8
 8014820:	2100      	movs	r1, #0
 8014822:	4618      	mov	r0, r3
 8014824:	f000 ffec 	bl	8015800 <hci_send_req>
 8014828:	4603      	mov	r3, r0
 801482a:	2b00      	cmp	r3, #0
 801482c:	da01      	bge.n	8014832 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 801482e:	23ff      	movs	r3, #255	@ 0xff
 8014830:	e000      	b.n	8014834 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8014832:	79fb      	ldrb	r3, [r7, #7]
}
 8014834:	4618      	mov	r0, r3
 8014836:	3720      	adds	r7, #32
 8014838:	46bd      	mov	sp, r7
 801483a:	bd80      	pop	{r7, pc}

0801483c <aci_gap_numeric_comparison_value_confirm_yesno>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 801483c:	b580      	push	{r7, lr}
 801483e:	b0cc      	sub	sp, #304	@ 0x130
 8014840:	af00      	add	r7, sp, #0
 8014842:	4602      	mov	r2, r0
 8014844:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014848:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801484c:	801a      	strh	r2, [r3, #0]
 801484e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014852:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8014856:	460a      	mov	r2, r1
 8014858:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 801485a:	f107 0310 	add.w	r3, r7, #16
 801485e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014862:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014866:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801486a:	2200      	movs	r2, #0
 801486c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801486e:	2300      	movs	r3, #0
 8014870:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8014874:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014878:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801487c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8014880:	8812      	ldrh	r2, [r2, #0]
 8014882:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8014884:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014888:	3302      	adds	r3, #2
 801488a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 801488e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014892:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014896:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 801489a:	7812      	ldrb	r2, [r2, #0]
 801489c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 801489e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80148a2:	3301      	adds	r3, #1
 80148a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80148a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80148ac:	2218      	movs	r2, #24
 80148ae:	2100      	movs	r1, #0
 80148b0:	4618      	mov	r0, r3
 80148b2:	f000 fd1c 	bl	80152ee <Osal_MemSet>
  rq.ogf = 0x3f;
 80148b6:	233f      	movs	r3, #63	@ 0x3f
 80148b8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 80148bc:	23a5      	movs	r3, #165	@ 0xa5
 80148be:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80148c2:	f107 0310 	add.w	r3, r7, #16
 80148c6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80148ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80148ce:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80148d2:	f107 030f 	add.w	r3, r7, #15
 80148d6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80148da:	2301      	movs	r3, #1
 80148dc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80148e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80148e4:	2100      	movs	r1, #0
 80148e6:	4618      	mov	r0, r3
 80148e8:	f000 ff8a 	bl	8015800 <hci_send_req>
 80148ec:	4603      	mov	r3, r0
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	da01      	bge.n	80148f6 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80148f2:	23ff      	movs	r3, #255	@ 0xff
 80148f4:	e004      	b.n	8014900 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 80148f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80148fa:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80148fe:	781b      	ldrb	r3, [r3, #0]
}
 8014900:	4618      	mov	r0, r3
 8014902:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8014906:	46bd      	mov	sp, r7
 8014908:	bd80      	pop	{r7, pc}

0801490a <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 801490a:	b580      	push	{r7, lr}
 801490c:	b088      	sub	sp, #32
 801490e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8014910:	2300      	movs	r3, #0
 8014912:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014914:	f107 0308 	add.w	r3, r7, #8
 8014918:	2218      	movs	r2, #24
 801491a:	2100      	movs	r1, #0
 801491c:	4618      	mov	r0, r3
 801491e:	f000 fce6 	bl	80152ee <Osal_MemSet>
  rq.ogf = 0x3f;
 8014922:	233f      	movs	r3, #63	@ 0x3f
 8014924:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8014926:	f240 1301 	movw	r3, #257	@ 0x101
 801492a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 801492c:	1dfb      	adds	r3, r7, #7
 801492e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8014930:	2301      	movs	r3, #1
 8014932:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014934:	f107 0308 	add.w	r3, r7, #8
 8014938:	2100      	movs	r1, #0
 801493a:	4618      	mov	r0, r3
 801493c:	f000 ff60 	bl	8015800 <hci_send_req>
 8014940:	4603      	mov	r3, r0
 8014942:	2b00      	cmp	r3, #0
 8014944:	da01      	bge.n	801494a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8014946:	23ff      	movs	r3, #255	@ 0xff
 8014948:	e000      	b.n	801494c <aci_gatt_init+0x42>
  return status;
 801494a:	79fb      	ldrb	r3, [r7, #7]
}
 801494c:	4618      	mov	r0, r3
 801494e:	3720      	adds	r7, #32
 8014950:	46bd      	mov	sp, r7
 8014952:	bd80      	pop	{r7, pc}

08014954 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8014954:	b590      	push	{r4, r7, lr}
 8014956:	b0cf      	sub	sp, #316	@ 0x13c
 8014958:	af00      	add	r7, sp, #0
 801495a:	4604      	mov	r4, r0
 801495c:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8014960:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8014964:	6001      	str	r1, [r0, #0]
 8014966:	4610      	mov	r0, r2
 8014968:	4619      	mov	r1, r3
 801496a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801496e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8014972:	4622      	mov	r2, r4
 8014974:	701a      	strb	r2, [r3, #0]
 8014976:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801497a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 801497e:	4602      	mov	r2, r0
 8014980:	701a      	strb	r2, [r3, #0]
 8014982:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014986:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 801498a:	460a      	mov	r2, r1
 801498c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 801498e:	f107 0310 	add.w	r3, r7, #16
 8014992:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8014996:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801499a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 801499e:	781b      	ldrb	r3, [r3, #0]
 80149a0:	2b01      	cmp	r3, #1
 80149a2:	d00a      	beq.n	80149ba <aci_gatt_add_service+0x66>
 80149a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80149a8:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80149ac:	781b      	ldrb	r3, [r3, #0]
 80149ae:	2b02      	cmp	r3, #2
 80149b0:	d101      	bne.n	80149b6 <aci_gatt_add_service+0x62>
 80149b2:	2311      	movs	r3, #17
 80149b4:	e002      	b.n	80149bc <aci_gatt_add_service+0x68>
 80149b6:	2301      	movs	r3, #1
 80149b8:	e000      	b.n	80149bc <aci_gatt_add_service+0x68>
 80149ba:	2303      	movs	r3, #3
 80149bc:	f107 0210 	add.w	r2, r7, #16
 80149c0:	4413      	add	r3, r2
 80149c2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80149c6:	f107 030c 	add.w	r3, r7, #12
 80149ca:	2203      	movs	r2, #3
 80149cc:	2100      	movs	r1, #0
 80149ce:	4618      	mov	r0, r3
 80149d0:	f000 fc8d 	bl	80152ee <Osal_MemSet>
  int index_input = 0;
 80149d4:	2300      	movs	r3, #0
 80149d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80149da:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80149de:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80149e2:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80149e6:	7812      	ldrb	r2, [r2, #0]
 80149e8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80149ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80149ee:	3301      	adds	r3, #1
 80149f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80149f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80149f8:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80149fc:	781b      	ldrb	r3, [r3, #0]
 80149fe:	2b01      	cmp	r3, #1
 8014a00:	d002      	beq.n	8014a08 <aci_gatt_add_service+0xb4>
 8014a02:	2b02      	cmp	r3, #2
 8014a04:	d004      	beq.n	8014a10 <aci_gatt_add_service+0xbc>
 8014a06:	e007      	b.n	8014a18 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8014a08:	2302      	movs	r3, #2
 8014a0a:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8014a0e:	e005      	b.n	8014a1c <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8014a10:	2310      	movs	r3, #16
 8014a12:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8014a16:	e001      	b.n	8014a1c <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8014a18:	2397      	movs	r3, #151	@ 0x97
 8014a1a:	e06c      	b.n	8014af6 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8014a1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014a20:	1c58      	adds	r0, r3, #1
 8014a22:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8014a26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a2a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8014a2e:	6819      	ldr	r1, [r3, #0]
 8014a30:	f000 fc4d 	bl	80152ce <Osal_MemCpy>
    index_input += size;
 8014a34:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8014a38:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8014a3c:	4413      	add	r3, r2
 8014a3e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8014a42:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014a46:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014a4a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8014a4e:	7812      	ldrb	r2, [r2, #0]
 8014a50:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8014a52:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014a56:	3301      	adds	r3, #1
 8014a58:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8014a5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014a60:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014a64:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8014a68:	7812      	ldrb	r2, [r2, #0]
 8014a6a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8014a6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014a70:	3301      	adds	r3, #1
 8014a72:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014a76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014a7a:	2218      	movs	r2, #24
 8014a7c:	2100      	movs	r1, #0
 8014a7e:	4618      	mov	r0, r3
 8014a80:	f000 fc35 	bl	80152ee <Osal_MemSet>
  rq.ogf = 0x3f;
 8014a84:	233f      	movs	r3, #63	@ 0x3f
 8014a86:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8014a8a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8014a8e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014a92:	f107 0310 	add.w	r3, r7, #16
 8014a96:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014a9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014a9e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8014aa2:	f107 030c 	add.w	r3, r7, #12
 8014aa6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8014aaa:	2303      	movs	r3, #3
 8014aac:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014ab0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014ab4:	2100      	movs	r1, #0
 8014ab6:	4618      	mov	r0, r3
 8014ab8:	f000 fea2 	bl	8015800 <hci_send_req>
 8014abc:	4603      	mov	r3, r0
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	da01      	bge.n	8014ac6 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8014ac2:	23ff      	movs	r3, #255	@ 0xff
 8014ac4:	e017      	b.n	8014af6 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8014ac6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014aca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014ace:	781b      	ldrb	r3, [r3, #0]
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d005      	beq.n	8014ae0 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8014ad4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ad8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014adc:	781b      	ldrb	r3, [r3, #0]
 8014ade:	e00a      	b.n	8014af6 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8014ae0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ae4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014ae8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8014aec:	b29a      	uxth	r2, r3
 8014aee:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8014af2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8014af4:	2300      	movs	r3, #0
}
 8014af6:	4618      	mov	r0, r3
 8014af8:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8014afc:	46bd      	mov	sp, r7
 8014afe:	bd90      	pop	{r4, r7, pc}

08014b00 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8014b00:	b590      	push	{r4, r7, lr}
 8014b02:	b0d1      	sub	sp, #324	@ 0x144
 8014b04:	af00      	add	r7, sp, #0
 8014b06:	4604      	mov	r4, r0
 8014b08:	4608      	mov	r0, r1
 8014b0a:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8014b0e:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8014b12:	600a      	str	r2, [r1, #0]
 8014b14:	4619      	mov	r1, r3
 8014b16:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014b1a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8014b1e:	4622      	mov	r2, r4
 8014b20:	801a      	strh	r2, [r3, #0]
 8014b22:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014b26:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8014b2a:	4602      	mov	r2, r0
 8014b2c:	701a      	strb	r2, [r3, #0]
 8014b2e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014b32:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8014b36:	460a      	mov	r2, r1
 8014b38:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8014b3a:	f107 0318 	add.w	r3, r7, #24
 8014b3e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8014b42:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014b46:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8014b4a:	781b      	ldrb	r3, [r3, #0]
 8014b4c:	2b01      	cmp	r3, #1
 8014b4e:	d00a      	beq.n	8014b66 <aci_gatt_add_char+0x66>
 8014b50:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014b54:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8014b58:	781b      	ldrb	r3, [r3, #0]
 8014b5a:	2b02      	cmp	r3, #2
 8014b5c:	d101      	bne.n	8014b62 <aci_gatt_add_char+0x62>
 8014b5e:	2313      	movs	r3, #19
 8014b60:	e002      	b.n	8014b68 <aci_gatt_add_char+0x68>
 8014b62:	2303      	movs	r3, #3
 8014b64:	e000      	b.n	8014b68 <aci_gatt_add_char+0x68>
 8014b66:	2305      	movs	r3, #5
 8014b68:	f107 0218 	add.w	r2, r7, #24
 8014b6c:	4413      	add	r3, r2
 8014b6e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8014b72:	f107 0314 	add.w	r3, r7, #20
 8014b76:	2203      	movs	r2, #3
 8014b78:	2100      	movs	r1, #0
 8014b7a:	4618      	mov	r0, r3
 8014b7c:	f000 fbb7 	bl	80152ee <Osal_MemSet>
  int index_input = 0;
 8014b80:	2300      	movs	r3, #0
 8014b82:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8014b86:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8014b8a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8014b8e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8014b92:	8812      	ldrh	r2, [r2, #0]
 8014b94:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8014b96:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014b9a:	3302      	adds	r3, #2
 8014b9c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8014ba0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8014ba4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8014ba8:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8014bac:	7812      	ldrb	r2, [r2, #0]
 8014bae:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8014bb0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014bb4:	3301      	adds	r3, #1
 8014bb6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8014bba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014bbe:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8014bc2:	781b      	ldrb	r3, [r3, #0]
 8014bc4:	2b01      	cmp	r3, #1
 8014bc6:	d002      	beq.n	8014bce <aci_gatt_add_char+0xce>
 8014bc8:	2b02      	cmp	r3, #2
 8014bca:	d004      	beq.n	8014bd6 <aci_gatt_add_char+0xd6>
 8014bcc:	e007      	b.n	8014bde <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8014bce:	2302      	movs	r3, #2
 8014bd0:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8014bd4:	e005      	b.n	8014be2 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8014bd6:	2310      	movs	r3, #16
 8014bd8:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8014bdc:	e001      	b.n	8014be2 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8014bde:	2397      	movs	r3, #151	@ 0x97
 8014be0:	e091      	b.n	8014d06 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8014be2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8014be6:	1cd8      	adds	r0, r3, #3
 8014be8:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8014bec:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014bf0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8014bf4:	6819      	ldr	r1, [r3, #0]
 8014bf6:	f000 fb6a 	bl	80152ce <Osal_MemCpy>
    index_input += size;
 8014bfa:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8014bfe:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8014c02:	4413      	add	r3, r2
 8014c04:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8014c08:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014c0c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8014c10:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8014c14:	8812      	ldrh	r2, [r2, #0]
 8014c16:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8014c18:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014c1c:	3302      	adds	r3, #2
 8014c1e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8014c22:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014c26:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8014c2a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8014c2c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014c30:	3301      	adds	r3, #1
 8014c32:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8014c36:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014c3a:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8014c3e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8014c40:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014c44:	3301      	adds	r3, #1
 8014c46:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8014c4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014c4e:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8014c52:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8014c54:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014c58:	3301      	adds	r3, #1
 8014c5a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8014c5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014c62:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8014c66:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8014c68:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014c6c:	3301      	adds	r3, #1
 8014c6e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8014c72:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014c76:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8014c7a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8014c7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014c80:	3301      	adds	r3, #1
 8014c82:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014c86:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014c8a:	2218      	movs	r2, #24
 8014c8c:	2100      	movs	r1, #0
 8014c8e:	4618      	mov	r0, r3
 8014c90:	f000 fb2d 	bl	80152ee <Osal_MemSet>
  rq.ogf = 0x3f;
 8014c94:	233f      	movs	r3, #63	@ 0x3f
 8014c96:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8014c9a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8014c9e:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8014ca2:	f107 0318 	add.w	r3, r7, #24
 8014ca6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8014caa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014cae:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8014cb2:	f107 0314 	add.w	r3, r7, #20
 8014cb6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8014cba:	2303      	movs	r3, #3
 8014cbc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014cc0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014cc4:	2100      	movs	r1, #0
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	f000 fd9a 	bl	8015800 <hci_send_req>
 8014ccc:	4603      	mov	r3, r0
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	da01      	bge.n	8014cd6 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8014cd2:	23ff      	movs	r3, #255	@ 0xff
 8014cd4:	e017      	b.n	8014d06 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8014cd6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014cda:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014cde:	781b      	ldrb	r3, [r3, #0]
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d005      	beq.n	8014cf0 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8014ce4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014ce8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014cec:	781b      	ldrb	r3, [r3, #0]
 8014cee:	e00a      	b.n	8014d06 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8014cf0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014cf4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014cf8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8014cfc:	b29a      	uxth	r2, r3
 8014cfe:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8014d02:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8014d04:	2300      	movs	r3, #0
}
 8014d06:	4618      	mov	r0, r3
 8014d08:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8014d0c:	46bd      	mov	sp, r7
 8014d0e:	bd90      	pop	{r4, r7, pc}

08014d10 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8014d10:	b5b0      	push	{r4, r5, r7, lr}
 8014d12:	b0cc      	sub	sp, #304	@ 0x130
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	4605      	mov	r5, r0
 8014d18:	460c      	mov	r4, r1
 8014d1a:	4610      	mov	r0, r2
 8014d1c:	4619      	mov	r1, r3
 8014d1e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014d22:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8014d26:	462a      	mov	r2, r5
 8014d28:	801a      	strh	r2, [r3, #0]
 8014d2a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014d2e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014d32:	4622      	mov	r2, r4
 8014d34:	801a      	strh	r2, [r3, #0]
 8014d36:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014d3a:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8014d3e:	4602      	mov	r2, r0
 8014d40:	701a      	strb	r2, [r3, #0]
 8014d42:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014d46:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8014d4a:	460a      	mov	r2, r1
 8014d4c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8014d4e:	f107 0310 	add.w	r3, r7, #16
 8014d52:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014d56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014d5a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014d5e:	2200      	movs	r2, #0
 8014d60:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014d62:	2300      	movs	r3, #0
 8014d64:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8014d68:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014d6c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014d70:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8014d74:	8812      	ldrh	r2, [r2, #0]
 8014d76:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8014d78:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d7c:	3302      	adds	r3, #2
 8014d7e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8014d82:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014d86:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014d8a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8014d8e:	8812      	ldrh	r2, [r2, #0]
 8014d90:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8014d92:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d96:	3302      	adds	r3, #2
 8014d98:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8014d9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014da0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014da4:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8014da8:	7812      	ldrb	r2, [r2, #0]
 8014daa:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8014dac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014db0:	3301      	adds	r3, #1
 8014db2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8014db6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014dba:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014dbe:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8014dc2:	7812      	ldrb	r2, [r2, #0]
 8014dc4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8014dc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014dca:	3301      	adds	r3, #1
 8014dcc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8014dd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014dd4:	1d98      	adds	r0, r3, #6
 8014dd6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014dda:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8014dde:	781b      	ldrb	r3, [r3, #0]
 8014de0:	461a      	mov	r2, r3
 8014de2:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8014de6:	f000 fa72 	bl	80152ce <Osal_MemCpy>
  index_input += Char_Value_Length;
 8014dea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014dee:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8014df2:	781b      	ldrb	r3, [r3, #0]
 8014df4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8014df8:	4413      	add	r3, r2
 8014dfa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014dfe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014e02:	2218      	movs	r2, #24
 8014e04:	2100      	movs	r1, #0
 8014e06:	4618      	mov	r0, r3
 8014e08:	f000 fa71 	bl	80152ee <Osal_MemSet>
  rq.ogf = 0x3f;
 8014e0c:	233f      	movs	r3, #63	@ 0x3f
 8014e0e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8014e12:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8014e16:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014e1a:	f107 0310 	add.w	r3, r7, #16
 8014e1e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014e22:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e26:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014e2a:	f107 030f 	add.w	r3, r7, #15
 8014e2e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014e32:	2301      	movs	r3, #1
 8014e34:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014e38:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014e3c:	2100      	movs	r1, #0
 8014e3e:	4618      	mov	r0, r3
 8014e40:	f000 fcde 	bl	8015800 <hci_send_req>
 8014e44:	4603      	mov	r3, r0
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	da01      	bge.n	8014e4e <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8014e4a:	23ff      	movs	r3, #255	@ 0xff
 8014e4c:	e004      	b.n	8014e58 <aci_gatt_update_char_value+0x148>
  return status;
 8014e4e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014e52:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014e56:	781b      	ldrb	r3, [r3, #0]
}
 8014e58:	4618      	mov	r0, r3
 8014e5a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8014e5e:	46bd      	mov	sp, r7
 8014e60:	bdb0      	pop	{r4, r5, r7, pc}

08014e62 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8014e62:	b580      	push	{r7, lr}
 8014e64:	b0cc      	sub	sp, #304	@ 0x130
 8014e66:	af00      	add	r7, sp, #0
 8014e68:	4602      	mov	r2, r0
 8014e6a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014e6e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8014e72:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8014e74:	f107 0310 	add.w	r3, r7, #16
 8014e78:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014e7c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014e80:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014e84:	2200      	movs	r2, #0
 8014e86:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014e88:	2300      	movs	r3, #0
 8014e8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8014e8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014e92:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014e96:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8014e9a:	8812      	ldrh	r2, [r2, #0]
 8014e9c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8014e9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ea2:	3302      	adds	r3, #2
 8014ea4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014ea8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014eac:	2218      	movs	r2, #24
 8014eae:	2100      	movs	r1, #0
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	f000 fa1c 	bl	80152ee <Osal_MemSet>
  rq.ogf = 0x3f;
 8014eb6:	233f      	movs	r3, #63	@ 0x3f
 8014eb8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8014ebc:	f240 1325 	movw	r3, #293	@ 0x125
 8014ec0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014ec4:	f107 0310 	add.w	r3, r7, #16
 8014ec8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014ecc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ed0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014ed4:	f107 030f 	add.w	r3, r7, #15
 8014ed8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014edc:	2301      	movs	r3, #1
 8014ede:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014ee2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014ee6:	2100      	movs	r1, #0
 8014ee8:	4618      	mov	r0, r3
 8014eea:	f000 fc89 	bl	8015800 <hci_send_req>
 8014eee:	4603      	mov	r3, r0
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	da01      	bge.n	8014ef8 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8014ef4:	23ff      	movs	r3, #255	@ 0xff
 8014ef6:	e004      	b.n	8014f02 <aci_gatt_confirm_indication+0xa0>
  return status;
 8014ef8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014efc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014f00:	781b      	ldrb	r3, [r3, #0]
}
 8014f02:	4618      	mov	r0, r3
 8014f04:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	bd80      	pop	{r7, pc}

08014f0c <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8014f0c:	b580      	push	{r7, lr}
 8014f0e:	b0cc      	sub	sp, #304	@ 0x130
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014f16:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8014f1a:	601a      	str	r2, [r3, #0]
 8014f1c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014f20:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014f24:	4602      	mov	r2, r0
 8014f26:	701a      	strb	r2, [r3, #0]
 8014f28:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014f2c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8014f30:	460a      	mov	r2, r1
 8014f32:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8014f34:	f107 0310 	add.w	r3, r7, #16
 8014f38:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014f3c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014f40:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014f44:	2200      	movs	r2, #0
 8014f46:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014f48:	2300      	movs	r3, #0
 8014f4a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8014f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014f52:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014f56:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8014f5a:	7812      	ldrb	r2, [r2, #0]
 8014f5c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8014f5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f62:	3301      	adds	r3, #1
 8014f64:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8014f68:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014f6c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014f70:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8014f74:	7812      	ldrb	r2, [r2, #0]
 8014f76:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8014f78:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f7c:	3301      	adds	r3, #1
 8014f7e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8014f82:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014f86:	1c98      	adds	r0, r3, #2
 8014f88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014f8c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8014f90:	781a      	ldrb	r2, [r3, #0]
 8014f92:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014f96:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8014f9a:	6819      	ldr	r1, [r3, #0]
 8014f9c:	f000 f997 	bl	80152ce <Osal_MemCpy>
  index_input += Length;
 8014fa0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014fa4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8014fa8:	781b      	ldrb	r3, [r3, #0]
 8014faa:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8014fae:	4413      	add	r3, r2
 8014fb0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014fb4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014fb8:	2218      	movs	r2, #24
 8014fba:	2100      	movs	r1, #0
 8014fbc:	4618      	mov	r0, r3
 8014fbe:	f000 f996 	bl	80152ee <Osal_MemSet>
  rq.ogf = 0x3f;
 8014fc2:	233f      	movs	r3, #63	@ 0x3f
 8014fc4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8014fc8:	230c      	movs	r3, #12
 8014fca:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014fce:	f107 0310 	add.w	r3, r7, #16
 8014fd2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014fd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014fda:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014fde:	f107 030f 	add.w	r3, r7, #15
 8014fe2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014fe6:	2301      	movs	r3, #1
 8014fe8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014fec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014ff0:	2100      	movs	r1, #0
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	f000 fc04 	bl	8015800 <hci_send_req>
 8014ff8:	4603      	mov	r3, r0
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	da01      	bge.n	8015002 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8014ffe:	23ff      	movs	r3, #255	@ 0xff
 8015000:	e004      	b.n	801500c <aci_hal_write_config_data+0x100>
  return status;
 8015002:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015006:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801500a:	781b      	ldrb	r3, [r3, #0]
}
 801500c:	4618      	mov	r0, r3
 801500e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015012:	46bd      	mov	sp, r7
 8015014:	bd80      	pop	{r7, pc}

08015016 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8015016:	b580      	push	{r7, lr}
 8015018:	b0cc      	sub	sp, #304	@ 0x130
 801501a:	af00      	add	r7, sp, #0
 801501c:	4602      	mov	r2, r0
 801501e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015022:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015026:	701a      	strb	r2, [r3, #0]
 8015028:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801502c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015030:	460a      	mov	r2, r1
 8015032:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8015034:	f107 0310 	add.w	r3, r7, #16
 8015038:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801503c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015040:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015044:	2200      	movs	r2, #0
 8015046:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015048:	2300      	movs	r3, #0
 801504a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 801504e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015052:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015056:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 801505a:	7812      	ldrb	r2, [r2, #0]
 801505c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801505e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015062:	3301      	adds	r3, #1
 8015064:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8015068:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801506c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015070:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015074:	7812      	ldrb	r2, [r2, #0]
 8015076:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015078:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801507c:	3301      	adds	r3, #1
 801507e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015082:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015086:	2218      	movs	r2, #24
 8015088:	2100      	movs	r1, #0
 801508a:	4618      	mov	r0, r3
 801508c:	f000 f92f 	bl	80152ee <Osal_MemSet>
  rq.ogf = 0x3f;
 8015090:	233f      	movs	r3, #63	@ 0x3f
 8015092:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8015096:	230f      	movs	r3, #15
 8015098:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801509c:	f107 0310 	add.w	r3, r7, #16
 80150a0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80150a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80150a8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80150ac:	f107 030f 	add.w	r3, r7, #15
 80150b0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80150b4:	2301      	movs	r3, #1
 80150b6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80150ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80150be:	2100      	movs	r1, #0
 80150c0:	4618      	mov	r0, r3
 80150c2:	f000 fb9d 	bl	8015800 <hci_send_req>
 80150c6:	4603      	mov	r3, r0
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	da01      	bge.n	80150d0 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80150cc:	23ff      	movs	r3, #255	@ 0xff
 80150ce:	e004      	b.n	80150da <aci_hal_set_tx_power_level+0xc4>
  return status;
 80150d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80150d4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80150d8:	781b      	ldrb	r3, [r3, #0]
}
 80150da:	4618      	mov	r0, r3
 80150dc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80150e0:	46bd      	mov	sp, r7
 80150e2:	bd80      	pop	{r7, pc}

080150e4 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80150e4:	b580      	push	{r7, lr}
 80150e6:	b0cc      	sub	sp, #304	@ 0x130
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	4602      	mov	r2, r0
 80150ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80150f0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80150f4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80150f6:	f107 0310 	add.w	r3, r7, #16
 80150fa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80150fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015102:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015106:	2200      	movs	r2, #0
 8015108:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801510a:	2300      	movs	r3, #0
 801510c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8015110:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015114:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015118:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801511c:	8812      	ldrh	r2, [r2, #0]
 801511e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015120:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015124:	3302      	adds	r3, #2
 8015126:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801512a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801512e:	2218      	movs	r2, #24
 8015130:	2100      	movs	r1, #0
 8015132:	4618      	mov	r0, r3
 8015134:	f000 f8db 	bl	80152ee <Osal_MemSet>
  rq.ogf = 0x3f;
 8015138:	233f      	movs	r3, #63	@ 0x3f
 801513a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 801513e:	2318      	movs	r3, #24
 8015140:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015144:	f107 0310 	add.w	r3, r7, #16
 8015148:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801514c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015150:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015154:	f107 030f 	add.w	r3, r7, #15
 8015158:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801515c:	2301      	movs	r3, #1
 801515e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015162:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015166:	2100      	movs	r1, #0
 8015168:	4618      	mov	r0, r3
 801516a:	f000 fb49 	bl	8015800 <hci_send_req>
 801516e:	4603      	mov	r3, r0
 8015170:	2b00      	cmp	r3, #0
 8015172:	da01      	bge.n	8015178 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8015174:	23ff      	movs	r3, #255	@ 0xff
 8015176:	e004      	b.n	8015182 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8015178:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801517c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015180:	781b      	ldrb	r3, [r3, #0]
}
 8015182:	4618      	mov	r0, r3
 8015184:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015188:	46bd      	mov	sp, r7
 801518a:	bd80      	pop	{r7, pc}

0801518c <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 801518c:	b580      	push	{r7, lr}
 801518e:	b088      	sub	sp, #32
 8015190:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8015192:	2300      	movs	r3, #0
 8015194:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015196:	f107 0308 	add.w	r3, r7, #8
 801519a:	2218      	movs	r2, #24
 801519c:	2100      	movs	r1, #0
 801519e:	4618      	mov	r0, r3
 80151a0:	f000 f8a5 	bl	80152ee <Osal_MemSet>
  rq.ogf = 0x03;
 80151a4:	2303      	movs	r3, #3
 80151a6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80151a8:	2303      	movs	r3, #3
 80151aa:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80151ac:	1dfb      	adds	r3, r7, #7
 80151ae:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80151b0:	2301      	movs	r3, #1
 80151b2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80151b4:	f107 0308 	add.w	r3, r7, #8
 80151b8:	2100      	movs	r1, #0
 80151ba:	4618      	mov	r0, r3
 80151bc:	f000 fb20 	bl	8015800 <hci_send_req>
 80151c0:	4603      	mov	r3, r0
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	da01      	bge.n	80151ca <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80151c6:	23ff      	movs	r3, #255	@ 0xff
 80151c8:	e000      	b.n	80151cc <hci_reset+0x40>
  return status;
 80151ca:	79fb      	ldrb	r3, [r7, #7]
}
 80151cc:	4618      	mov	r0, r3
 80151ce:	3720      	adds	r7, #32
 80151d0:	46bd      	mov	sp, r7
 80151d2:	bd80      	pop	{r7, pc}

080151d4 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80151d4:	b590      	push	{r4, r7, lr}
 80151d6:	b0cd      	sub	sp, #308	@ 0x134
 80151d8:	af00      	add	r7, sp, #0
 80151da:	4604      	mov	r4, r0
 80151dc:	4608      	mov	r0, r1
 80151de:	4611      	mov	r1, r2
 80151e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80151e4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80151e8:	4622      	mov	r2, r4
 80151ea:	701a      	strb	r2, [r3, #0]
 80151ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80151f0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80151f4:	4602      	mov	r2, r0
 80151f6:	701a      	strb	r2, [r3, #0]
 80151f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80151fc:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8015200:	460a      	mov	r2, r1
 8015202:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8015204:	f107 0310 	add.w	r3, r7, #16
 8015208:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801520c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015210:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015214:	2200      	movs	r2, #0
 8015216:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015218:	2300      	movs	r3, #0
 801521a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 801521e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015222:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015226:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 801522a:	7812      	ldrb	r2, [r2, #0]
 801522c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801522e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015232:	3301      	adds	r3, #1
 8015234:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8015238:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801523c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015240:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015244:	7812      	ldrb	r2, [r2, #0]
 8015246:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015248:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801524c:	3301      	adds	r3, #1
 801524e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8015252:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015256:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801525a:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 801525e:	7812      	ldrb	r2, [r2, #0]
 8015260:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8015262:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015266:	3301      	adds	r3, #1
 8015268:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801526c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015270:	2218      	movs	r2, #24
 8015272:	2100      	movs	r1, #0
 8015274:	4618      	mov	r0, r3
 8015276:	f000 f83a 	bl	80152ee <Osal_MemSet>
  rq.ogf = 0x08;
 801527a:	2308      	movs	r3, #8
 801527c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8015280:	2331      	movs	r3, #49	@ 0x31
 8015282:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015286:	f107 0310 	add.w	r3, r7, #16
 801528a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801528e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015292:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015296:	f107 030f 	add.w	r3, r7, #15
 801529a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801529e:	2301      	movs	r3, #1
 80152a0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80152a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80152a8:	2100      	movs	r1, #0
 80152aa:	4618      	mov	r0, r3
 80152ac:	f000 faa8 	bl	8015800 <hci_send_req>
 80152b0:	4603      	mov	r3, r0
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	da01      	bge.n	80152ba <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80152b6:	23ff      	movs	r3, #255	@ 0xff
 80152b8:	e004      	b.n	80152c4 <hci_le_set_default_phy+0xf0>
  return status;
 80152ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80152be:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80152c2:	781b      	ldrb	r3, [r3, #0]
}
 80152c4:	4618      	mov	r0, r3
 80152c6:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80152ca:	46bd      	mov	sp, r7
 80152cc:	bd90      	pop	{r4, r7, pc}

080152ce <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80152ce:	b580      	push	{r7, lr}
 80152d0:	b084      	sub	sp, #16
 80152d2:	af00      	add	r7, sp, #0
 80152d4:	60f8      	str	r0, [r7, #12]
 80152d6:	60b9      	str	r1, [r7, #8]
 80152d8:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 80152da:	687a      	ldr	r2, [r7, #4]
 80152dc:	68b9      	ldr	r1, [r7, #8]
 80152de:	68f8      	ldr	r0, [r7, #12]
 80152e0:	f005 fecb 	bl	801b07a <memcpy>
 80152e4:	4603      	mov	r3, r0
}
 80152e6:	4618      	mov	r0, r3
 80152e8:	3710      	adds	r7, #16
 80152ea:	46bd      	mov	sp, r7
 80152ec:	bd80      	pop	{r7, pc}

080152ee <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80152ee:	b580      	push	{r7, lr}
 80152f0:	b084      	sub	sp, #16
 80152f2:	af00      	add	r7, sp, #0
 80152f4:	60f8      	str	r0, [r7, #12]
 80152f6:	60b9      	str	r1, [r7, #8]
 80152f8:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80152fa:	687a      	ldr	r2, [r7, #4]
 80152fc:	68b9      	ldr	r1, [r7, #8]
 80152fe:	68f8      	ldr	r0, [r7, #12]
 8015300:	f005 fdd0 	bl	801aea4 <memset>
 8015304:	4603      	mov	r3, r0
}
 8015306:	4618      	mov	r0, r3
 8015308:	3710      	adds	r7, #16
 801530a:	46bd      	mov	sp, r7
 801530c:	bd80      	pop	{r7, pc}

0801530e <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 801530e:	b480      	push	{r7}
 8015310:	af00      	add	r7, sp, #0
  return;
 8015312:	bf00      	nop
}
 8015314:	46bd      	mov	sp, r7
 8015316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801531a:	4770      	bx	lr

0801531c <BLS_Init>:

__WEAK void BLS_Init( void )
{
 801531c:	b480      	push	{r7}
 801531e:	af00      	add	r7, sp, #0
  return;
 8015320:	bf00      	nop
}
 8015322:	46bd      	mov	sp, r7
 8015324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015328:	4770      	bx	lr

0801532a <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 801532a:	b480      	push	{r7}
 801532c:	af00      	add	r7, sp, #0
  return;
 801532e:	bf00      	nop
}
 8015330:	46bd      	mov	sp, r7
 8015332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015336:	4770      	bx	lr

08015338 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8015338:	b480      	push	{r7}
 801533a:	af00      	add	r7, sp, #0
  return;
 801533c:	bf00      	nop
}
 801533e:	46bd      	mov	sp, r7
 8015340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015344:	4770      	bx	lr

08015346 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8015346:	b480      	push	{r7}
 8015348:	af00      	add	r7, sp, #0
  return;
 801534a:	bf00      	nop
}
 801534c:	46bd      	mov	sp, r7
 801534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015352:	4770      	bx	lr

08015354 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8015354:	b480      	push	{r7}
 8015356:	af00      	add	r7, sp, #0
  return;
 8015358:	bf00      	nop
}
 801535a:	46bd      	mov	sp, r7
 801535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015360:	4770      	bx	lr

08015362 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8015362:	b480      	push	{r7}
 8015364:	af00      	add	r7, sp, #0
  return;
 8015366:	bf00      	nop
}
 8015368:	46bd      	mov	sp, r7
 801536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801536e:	4770      	bx	lr

08015370 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8015370:	b480      	push	{r7}
 8015372:	af00      	add	r7, sp, #0
  return;
 8015374:	bf00      	nop
}
 8015376:	46bd      	mov	sp, r7
 8015378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801537c:	4770      	bx	lr

0801537e <IAS_Init>:
__WEAK void IAS_Init( void )
{
 801537e:	b480      	push	{r7}
 8015380:	af00      	add	r7, sp, #0
  return;
 8015382:	bf00      	nop
}
 8015384:	46bd      	mov	sp, r7
 8015386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801538a:	4770      	bx	lr

0801538c <LLS_Init>:
__WEAK void LLS_Init( void )
{
 801538c:	b480      	push	{r7}
 801538e:	af00      	add	r7, sp, #0
  return;
 8015390:	bf00      	nop
}
 8015392:	46bd      	mov	sp, r7
 8015394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015398:	4770      	bx	lr

0801539a <TPS_Init>:
__WEAK void TPS_Init( void )
{
 801539a:	b480      	push	{r7}
 801539c:	af00      	add	r7, sp, #0
  return;
 801539e:	bf00      	nop
}
 80153a0:	46bd      	mov	sp, r7
 80153a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153a6:	4770      	bx	lr

080153a8 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 80153a8:	b480      	push	{r7}
 80153aa:	af00      	add	r7, sp, #0
  return;
 80153ac:	bf00      	nop
}
 80153ae:	46bd      	mov	sp, r7
 80153b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b4:	4770      	bx	lr

080153b6 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 80153b6:	b480      	push	{r7}
 80153b8:	af00      	add	r7, sp, #0
  return;
 80153ba:	bf00      	nop
}
 80153bc:	46bd      	mov	sp, r7
 80153be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153c2:	4770      	bx	lr

080153c4 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 80153c4:	b480      	push	{r7}
 80153c6:	af00      	add	r7, sp, #0
  return;
 80153c8:	bf00      	nop
}
 80153ca:	46bd      	mov	sp, r7
 80153cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d0:	4770      	bx	lr

080153d2 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 80153d2:	b480      	push	{r7}
 80153d4:	af00      	add	r7, sp, #0
  return;
 80153d6:	bf00      	nop
}
 80153d8:	46bd      	mov	sp, r7
 80153da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153de:	4770      	bx	lr

080153e0 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 80153e0:	b480      	push	{r7}
 80153e2:	af00      	add	r7, sp, #0
  return;
 80153e4:	bf00      	nop
}
 80153e6:	46bd      	mov	sp, r7
 80153e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ec:	4770      	bx	lr

080153ee <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 80153ee:	b480      	push	{r7}
 80153f0:	af00      	add	r7, sp, #0
  return;
 80153f2:	bf00      	nop
}
 80153f4:	46bd      	mov	sp, r7
 80153f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153fa:	4770      	bx	lr

080153fc <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80153fc:	b580      	push	{r7, lr}
 80153fe:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8015400:	4b04      	ldr	r3, [pc, #16]	@ (8015414 <SVCCTL_Init+0x18>)
 8015402:	2200      	movs	r2, #0
 8015404:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8015406:	4b04      	ldr	r3, [pc, #16]	@ (8015418 <SVCCTL_Init+0x1c>)
 8015408:	2200      	movs	r2, #0
 801540a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 801540c:	f000 f806 	bl	801541c <SVCCTL_SvcInit>

  return;
 8015410:	bf00      	nop
}
 8015412:	bd80      	pop	{r7, pc}
 8015414:	200002ec 	.word	0x200002ec
 8015418:	2000030c 	.word	0x2000030c

0801541c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 801541c:	b580      	push	{r7, lr}
 801541e:	af00      	add	r7, sp, #0
  BAS_Init();
 8015420:	f7ff ff75 	bl	801530e <BAS_Init>

  BLS_Init();
 8015424:	f7ff ff7a 	bl	801531c <BLS_Init>

  CRS_STM_Init();
 8015428:	f7ff ff7f 	bl	801532a <CRS_STM_Init>

  DIS_Init();
 801542c:	f7ff ff84 	bl	8015338 <DIS_Init>

  EDS_STM_Init();
 8015430:	f7ff ff89 	bl	8015346 <EDS_STM_Init>

  HIDS_Init();
 8015434:	f7ff ff8e 	bl	8015354 <HIDS_Init>

  HRS_Init();
 8015438:	f7ff ff93 	bl	8015362 <HRS_Init>

  HTS_Init();
 801543c:	f7ff ff98 	bl	8015370 <HTS_Init>

  IAS_Init();
 8015440:	f7ff ff9d 	bl	801537e <IAS_Init>

  LLS_Init();
 8015444:	f7ff ffa2 	bl	801538c <LLS_Init>

  TPS_Init();
 8015448:	f7ff ffa7 	bl	801539a <TPS_Init>

  MOTENV_STM_Init();
 801544c:	f7ff ffac 	bl	80153a8 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8015450:	f7ff ffb1 	bl	80153b6 <P2PS_STM_Init>

  ZDD_STM_Init();
 8015454:	f7ff ffb6 	bl	80153c4 <ZDD_STM_Init>

  OTAS_STM_Init();
 8015458:	f7ff ffbb 	bl	80153d2 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 801545c:	f7ff ffc7 	bl	80153ee <BVOPUS_STM_Init>

  MESH_Init();
 8015460:	f7ff ffbe 	bl	80153e0 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8015464:	f001 fb84 	bl	8016b70 <SVCCTL_InitCustomSvc>
  
  return;
 8015468:	bf00      	nop
}
 801546a:	bd80      	pop	{r7, pc}

0801546c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 801546c:	b480      	push	{r7}
 801546e:	b083      	sub	sp, #12
 8015470:	af00      	add	r7, sp, #0
 8015472:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8015474:	4b09      	ldr	r3, [pc, #36]	@ (801549c <SVCCTL_RegisterSvcHandler+0x30>)
 8015476:	7f1b      	ldrb	r3, [r3, #28]
 8015478:	4619      	mov	r1, r3
 801547a:	4a08      	ldr	r2, [pc, #32]	@ (801549c <SVCCTL_RegisterSvcHandler+0x30>)
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8015482:	4b06      	ldr	r3, [pc, #24]	@ (801549c <SVCCTL_RegisterSvcHandler+0x30>)
 8015484:	7f1b      	ldrb	r3, [r3, #28]
 8015486:	3301      	adds	r3, #1
 8015488:	b2da      	uxtb	r2, r3
 801548a:	4b04      	ldr	r3, [pc, #16]	@ (801549c <SVCCTL_RegisterSvcHandler+0x30>)
 801548c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 801548e:	bf00      	nop
}
 8015490:	370c      	adds	r7, #12
 8015492:	46bd      	mov	sp, r7
 8015494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015498:	4770      	bx	lr
 801549a:	bf00      	nop
 801549c:	200002ec 	.word	0x200002ec

080154a0 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80154a0:	b580      	push	{r7, lr}
 80154a2:	b086      	sub	sp, #24
 80154a4:	af00      	add	r7, sp, #0
 80154a6:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	3301      	adds	r3, #1
 80154ac:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80154ae:	2300      	movs	r3, #0
 80154b0:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80154b2:	693b      	ldr	r3, [r7, #16]
 80154b4:	781b      	ldrb	r3, [r3, #0]
 80154b6:	2bff      	cmp	r3, #255	@ 0xff
 80154b8:	d125      	bne.n	8015506 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80154ba:	693b      	ldr	r3, [r7, #16]
 80154bc:	3302      	adds	r3, #2
 80154be:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80154c0:	68fb      	ldr	r3, [r7, #12]
 80154c2:	881b      	ldrh	r3, [r3, #0]
 80154c4:	b29b      	uxth	r3, r3
 80154c6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80154ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80154ce:	d118      	bne.n	8015502 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80154d0:	2300      	movs	r3, #0
 80154d2:	757b      	strb	r3, [r7, #21]
 80154d4:	e00d      	b.n	80154f2 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80154d6:	7d7b      	ldrb	r3, [r7, #21]
 80154d8:	4a1a      	ldr	r2, [pc, #104]	@ (8015544 <SVCCTL_UserEvtRx+0xa4>)
 80154da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80154de:	6878      	ldr	r0, [r7, #4]
 80154e0:	4798      	blx	r3
 80154e2:	4603      	mov	r3, r0
 80154e4:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 80154e6:	7dfb      	ldrb	r3, [r7, #23]
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d108      	bne.n	80154fe <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80154ec:	7d7b      	ldrb	r3, [r7, #21]
 80154ee:	3301      	adds	r3, #1
 80154f0:	757b      	strb	r3, [r7, #21]
 80154f2:	4b14      	ldr	r3, [pc, #80]	@ (8015544 <SVCCTL_UserEvtRx+0xa4>)
 80154f4:	7f1b      	ldrb	r3, [r3, #28]
 80154f6:	7d7a      	ldrb	r2, [r7, #21]
 80154f8:	429a      	cmp	r2, r3
 80154fa:	d3ec      	bcc.n	80154d6 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 80154fc:	e002      	b.n	8015504 <SVCCTL_UserEvtRx+0x64>
              break;
 80154fe:	bf00      	nop
          break;
 8015500:	e000      	b.n	8015504 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8015502:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8015504:	e000      	b.n	8015508 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8015506:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8015508:	7dfb      	ldrb	r3, [r7, #23]
 801550a:	2b02      	cmp	r3, #2
 801550c:	d00f      	beq.n	801552e <SVCCTL_UserEvtRx+0x8e>
 801550e:	2b02      	cmp	r3, #2
 8015510:	dc10      	bgt.n	8015534 <SVCCTL_UserEvtRx+0x94>
 8015512:	2b00      	cmp	r3, #0
 8015514:	d002      	beq.n	801551c <SVCCTL_UserEvtRx+0x7c>
 8015516:	2b01      	cmp	r3, #1
 8015518:	d006      	beq.n	8015528 <SVCCTL_UserEvtRx+0x88>
 801551a:	e00b      	b.n	8015534 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 801551c:	6878      	ldr	r0, [r7, #4]
 801551e:	f000 ff85 	bl	801642c <SVCCTL_App_Notification>
 8015522:	4603      	mov	r3, r0
 8015524:	75bb      	strb	r3, [r7, #22]
      break;
 8015526:	e008      	b.n	801553a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8015528:	2301      	movs	r3, #1
 801552a:	75bb      	strb	r3, [r7, #22]
      break;
 801552c:	e005      	b.n	801553a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 801552e:	2300      	movs	r3, #0
 8015530:	75bb      	strb	r3, [r7, #22]
      break;
 8015532:	e002      	b.n	801553a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8015534:	2301      	movs	r3, #1
 8015536:	75bb      	strb	r3, [r7, #22]
      break;
 8015538:	bf00      	nop
  }

  return (return_status);
 801553a:	7dbb      	ldrb	r3, [r7, #22]
}
 801553c:	4618      	mov	r0, r3
 801553e:	3718      	adds	r7, #24
 8015540:	46bd      	mov	sp, r7
 8015542:	bd80      	pop	{r7, pc}
 8015544:	200002ec 	.word	0x200002ec

08015548 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8015548:	b580      	push	{r7, lr}
 801554a:	b088      	sub	sp, #32
 801554c:	af00      	add	r7, sp, #0
 801554e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8015550:	f107 030c 	add.w	r3, r7, #12
 8015554:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 801555c:	69fb      	ldr	r3, [r7, #28]
 801555e:	212e      	movs	r1, #46	@ 0x2e
 8015560:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8015564:	f000 fae8 	bl	8015b38 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8015568:	69fb      	ldr	r3, [r7, #28]
 801556a:	330b      	adds	r3, #11
 801556c:	78db      	ldrb	r3, [r3, #3]
}
 801556e:	4618      	mov	r0, r3
 8015570:	3720      	adds	r7, #32
 8015572:	46bd      	mov	sp, r7
 8015574:	bd80      	pop	{r7, pc}

08015576 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8015576:	b580      	push	{r7, lr}
 8015578:	b088      	sub	sp, #32
 801557a:	af00      	add	r7, sp, #0
 801557c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 801557e:	f107 030c 	add.w	r3, r7, #12
 8015582:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 801558a:	69fb      	ldr	r3, [r7, #28]
 801558c:	210f      	movs	r1, #15
 801558e:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8015592:	f000 fad1 	bl	8015b38 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8015596:	69fb      	ldr	r3, [r7, #28]
 8015598:	330b      	adds	r3, #11
 801559a:	78db      	ldrb	r3, [r3, #3]
}
 801559c:	4618      	mov	r0, r3
 801559e:	3720      	adds	r7, #32
 80155a0:	46bd      	mov	sp, r7
 80155a2:	bd80      	pop	{r7, pc}

080155a4 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80155a4:	b580      	push	{r7, lr}
 80155a6:	b088      	sub	sp, #32
 80155a8:	af00      	add	r7, sp, #0
 80155aa:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80155ac:	f107 030c 	add.w	r3, r7, #12
 80155b0:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 80155b2:	69fb      	ldr	r3, [r7, #28]
 80155b4:	687a      	ldr	r2, [r7, #4]
 80155b6:	2110      	movs	r1, #16
 80155b8:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 80155bc:	f000 fabc 	bl	8015b38 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80155c0:	69fb      	ldr	r3, [r7, #28]
 80155c2:	330b      	adds	r3, #11
 80155c4:	78db      	ldrb	r3, [r3, #3]
}
 80155c6:	4618      	mov	r0, r3
 80155c8:	3720      	adds	r7, #32
 80155ca:	46bd      	mov	sp, r7
 80155cc:	bd80      	pop	{r7, pc}
	...

080155d0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80155d0:	b480      	push	{r7}
 80155d2:	b08b      	sub	sp, #44	@ 0x2c
 80155d4:	af00      	add	r7, sp, #0
 80155d6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80155d8:	2300      	movs	r3, #0
 80155da:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 80155dc:	2300      	movs	r3, #0
 80155de:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 80155e0:	2300      	movs	r3, #0
 80155e2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80155e4:	2300      	movs	r3, #0
 80155e6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80155e8:	2300      	movs	r3, #0
 80155ea:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80155ec:	2300      	movs	r3, #0
 80155ee:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80155f0:	2300      	movs	r3, #0
 80155f2:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 80155f4:	2300      	movs	r3, #0
 80155f6:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80155f8:	4b4a      	ldr	r3, [pc, #296]	@ (8015724 <SHCI_GetWirelessFwInfo+0x154>)
 80155fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80155fc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015600:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8015602:	693b      	ldr	r3, [r7, #16]
 8015604:	009b      	lsls	r3, r3, #2
 8015606:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 801560a:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 801560e:	681b      	ldr	r3, [r3, #0]
 8015610:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8015612:	68bb      	ldr	r3, [r7, #8]
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	4a44      	ldr	r2, [pc, #272]	@ (8015728 <SHCI_GetWirelessFwInfo+0x158>)
 8015618:	4293      	cmp	r3, r2
 801561a:	d10f      	bne.n	801563c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 801561c:	68bb      	ldr	r3, [r7, #8]
 801561e:	695b      	ldr	r3, [r3, #20]
 8015620:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8015622:	68bb      	ldr	r3, [r7, #8]
 8015624:	699b      	ldr	r3, [r3, #24]
 8015626:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8015628:	68bb      	ldr	r3, [r7, #8]
 801562a:	69db      	ldr	r3, [r3, #28]
 801562c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 801562e:	68bb      	ldr	r3, [r7, #8]
 8015630:	68db      	ldr	r3, [r3, #12]
 8015632:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8015634:	68bb      	ldr	r3, [r7, #8]
 8015636:	691b      	ldr	r3, [r3, #16]
 8015638:	617b      	str	r3, [r7, #20]
 801563a:	e01a      	b.n	8015672 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 801563c:	693b      	ldr	r3, [r7, #16]
 801563e:	009b      	lsls	r3, r3, #2
 8015640:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8015644:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8015648:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	681b      	ldr	r3, [r3, #0]
 801564e:	691b      	ldr	r3, [r3, #16]
 8015650:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	695b      	ldr	r3, [r3, #20]
 8015658:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	699b      	ldr	r3, [r3, #24]
 8015660:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	685b      	ldr	r3, [r3, #4]
 8015668:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	689b      	ldr	r3, [r3, #8]
 8015670:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8015672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015674:	0e1b      	lsrs	r3, r3, #24
 8015676:	b2da      	uxtb	r2, r3
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 801567c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801567e:	0c1b      	lsrs	r3, r3, #16
 8015680:	b2da      	uxtb	r2, r3
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8015686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015688:	0a1b      	lsrs	r3, r3, #8
 801568a:	b2da      	uxtb	r2, r3
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8015690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015692:	091b      	lsrs	r3, r3, #4
 8015694:	b2db      	uxtb	r3, r3
 8015696:	f003 030f 	and.w	r3, r3, #15
 801569a:	b2da      	uxtb	r2, r3
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80156a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156a2:	b2db      	uxtb	r3, r3
 80156a4:	f003 030f 	and.w	r3, r3, #15
 80156a8:	b2da      	uxtb	r2, r3
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80156ae:	6a3b      	ldr	r3, [r7, #32]
 80156b0:	0e1b      	lsrs	r3, r3, #24
 80156b2:	b2da      	uxtb	r2, r3
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80156b8:	6a3b      	ldr	r3, [r7, #32]
 80156ba:	0c1b      	lsrs	r3, r3, #16
 80156bc:	b2da      	uxtb	r2, r3
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80156c2:	6a3b      	ldr	r3, [r7, #32]
 80156c4:	0a1b      	lsrs	r3, r3, #8
 80156c6:	b2da      	uxtb	r2, r3
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80156cc:	6a3b      	ldr	r3, [r7, #32]
 80156ce:	b2da      	uxtb	r2, r3
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80156d4:	69fb      	ldr	r3, [r7, #28]
 80156d6:	b2da      	uxtb	r2, r3
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80156dc:	69bb      	ldr	r3, [r7, #24]
 80156de:	0e1b      	lsrs	r3, r3, #24
 80156e0:	b2da      	uxtb	r2, r3
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80156e6:	69bb      	ldr	r3, [r7, #24]
 80156e8:	0c1b      	lsrs	r3, r3, #16
 80156ea:	b2da      	uxtb	r2, r3
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80156f0:	69bb      	ldr	r3, [r7, #24]
 80156f2:	0a1b      	lsrs	r3, r3, #8
 80156f4:	b2da      	uxtb	r2, r3
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80156fa:	697b      	ldr	r3, [r7, #20]
 80156fc:	0e1b      	lsrs	r3, r3, #24
 80156fe:	b2da      	uxtb	r2, r3
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8015704:	697b      	ldr	r3, [r7, #20]
 8015706:	0c1b      	lsrs	r3, r3, #16
 8015708:	b2da      	uxtb	r2, r3
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 801570e:	697b      	ldr	r3, [r7, #20]
 8015710:	b2da      	uxtb	r2, r3
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8015716:	2300      	movs	r3, #0
}
 8015718:	4618      	mov	r0, r3
 801571a:	372c      	adds	r7, #44	@ 0x2c
 801571c:	46bd      	mov	sp, r7
 801571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015722:	4770      	bx	lr
 8015724:	58004000 	.word	0x58004000
 8015728:	a94656b9 	.word	0xa94656b9

0801572c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 801572c:	b580      	push	{r7, lr}
 801572e:	b082      	sub	sp, #8
 8015730:	af00      	add	r7, sp, #0
 8015732:	6078      	str	r0, [r7, #4]
 8015734:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8015736:	683b      	ldr	r3, [r7, #0]
 8015738:	685b      	ldr	r3, [r3, #4]
 801573a:	4a08      	ldr	r2, [pc, #32]	@ (801575c <hci_init+0x30>)
 801573c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 801573e:	4a08      	ldr	r2, [pc, #32]	@ (8015760 <hci_init+0x34>)
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8015744:	4806      	ldr	r0, [pc, #24]	@ (8015760 <hci_init+0x34>)
 8015746:	f000 f979 	bl	8015a3c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 801574a:	683b      	ldr	r3, [r7, #0]
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	4618      	mov	r0, r3
 8015750:	f000 f8da 	bl	8015908 <TlInit>

  return;
 8015754:	bf00      	nop
}
 8015756:	3708      	adds	r7, #8
 8015758:	46bd      	mov	sp, r7
 801575a:	bd80      	pop	{r7, pc}
 801575c:	20000c78 	.word	0x20000c78
 8015760:	20000c50 	.word	0x20000c50

08015764 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8015764:	b580      	push	{r7, lr}
 8015766:	b084      	sub	sp, #16
 8015768:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 801576a:	4822      	ldr	r0, [pc, #136]	@ (80157f4 <hci_user_evt_proc+0x90>)
 801576c:	f000 fd32 	bl	80161d4 <LST_is_empty>
 8015770:	4603      	mov	r3, r0
 8015772:	2b00      	cmp	r3, #0
 8015774:	d12b      	bne.n	80157ce <hci_user_evt_proc+0x6a>
 8015776:	4b20      	ldr	r3, [pc, #128]	@ (80157f8 <hci_user_evt_proc+0x94>)
 8015778:	781b      	ldrb	r3, [r3, #0]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d027      	beq.n	80157ce <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 801577e:	f107 030c 	add.w	r3, r7, #12
 8015782:	4619      	mov	r1, r3
 8015784:	481b      	ldr	r0, [pc, #108]	@ (80157f4 <hci_user_evt_proc+0x90>)
 8015786:	f000 fdb4 	bl	80162f2 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 801578a:	4b1c      	ldr	r3, [pc, #112]	@ (80157fc <hci_user_evt_proc+0x98>)
 801578c:	69db      	ldr	r3, [r3, #28]
 801578e:	2b00      	cmp	r3, #0
 8015790:	d00c      	beq.n	80157ac <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8015796:	2301      	movs	r3, #1
 8015798:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 801579a:	4b18      	ldr	r3, [pc, #96]	@ (80157fc <hci_user_evt_proc+0x98>)
 801579c:	69db      	ldr	r3, [r3, #28]
 801579e:	1d3a      	adds	r2, r7, #4
 80157a0:	4610      	mov	r0, r2
 80157a2:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80157a4:	793a      	ldrb	r2, [r7, #4]
 80157a6:	4b14      	ldr	r3, [pc, #80]	@ (80157f8 <hci_user_evt_proc+0x94>)
 80157a8:	701a      	strb	r2, [r3, #0]
 80157aa:	e002      	b.n	80157b2 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80157ac:	4b12      	ldr	r3, [pc, #72]	@ (80157f8 <hci_user_evt_proc+0x94>)
 80157ae:	2201      	movs	r2, #1
 80157b0:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80157b2:	4b11      	ldr	r3, [pc, #68]	@ (80157f8 <hci_user_evt_proc+0x94>)
 80157b4:	781b      	ldrb	r3, [r3, #0]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d004      	beq.n	80157c4 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	4618      	mov	r0, r3
 80157be:	f000 fc0d 	bl	8015fdc <TL_MM_EvtDone>
 80157c2:	e004      	b.n	80157ce <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	4619      	mov	r1, r3
 80157c8:	480a      	ldr	r0, [pc, #40]	@ (80157f4 <hci_user_evt_proc+0x90>)
 80157ca:	f000 fd25 	bl	8016218 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80157ce:	4809      	ldr	r0, [pc, #36]	@ (80157f4 <hci_user_evt_proc+0x90>)
 80157d0:	f000 fd00 	bl	80161d4 <LST_is_empty>
 80157d4:	4603      	mov	r3, r0
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d107      	bne.n	80157ea <hci_user_evt_proc+0x86>
 80157da:	4b07      	ldr	r3, [pc, #28]	@ (80157f8 <hci_user_evt_proc+0x94>)
 80157dc:	781b      	ldrb	r3, [r3, #0]
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d003      	beq.n	80157ea <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80157e2:	4804      	ldr	r0, [pc, #16]	@ (80157f4 <hci_user_evt_proc+0x90>)
 80157e4:	f001 f856 	bl	8016894 <hci_notify_asynch_evt>
  }


  return;
 80157e8:	bf00      	nop
 80157ea:	bf00      	nop
}
 80157ec:	3710      	adds	r7, #16
 80157ee:	46bd      	mov	sp, r7
 80157f0:	bd80      	pop	{r7, pc}
 80157f2:	bf00      	nop
 80157f4:	20000314 	.word	0x20000314
 80157f8:	20000320 	.word	0x20000320
 80157fc:	20000c50 	.word	0x20000c50

08015800 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8015800:	b580      	push	{r7, lr}
 8015802:	b088      	sub	sp, #32
 8015804:	af00      	add	r7, sp, #0
 8015806:	6078      	str	r0, [r7, #4]
 8015808:	460b      	mov	r3, r1
 801580a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 801580c:	2000      	movs	r0, #0
 801580e:	f000 f8d1 	bl	80159b4 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8015812:	2300      	movs	r3, #0
 8015814:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	885b      	ldrh	r3, [r3, #2]
 801581a:	b21b      	sxth	r3, r3
 801581c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8015820:	b21a      	sxth	r2, r3
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	881b      	ldrh	r3, [r3, #0]
 8015826:	b21b      	sxth	r3, r3
 8015828:	029b      	lsls	r3, r3, #10
 801582a:	b21b      	sxth	r3, r3
 801582c:	4313      	orrs	r3, r2
 801582e:	b21b      	sxth	r3, r3
 8015830:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8015832:	4b33      	ldr	r3, [pc, #204]	@ (8015900 <hci_send_req+0x100>)
 8015834:	2201      	movs	r2, #1
 8015836:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	68db      	ldr	r3, [r3, #12]
 801583c:	b2d9      	uxtb	r1, r3
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	689a      	ldr	r2, [r3, #8]
 8015842:	8bbb      	ldrh	r3, [r7, #28]
 8015844:	4618      	mov	r0, r3
 8015846:	f000 f88f 	bl	8015968 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 801584a:	e04e      	b.n	80158ea <hci_send_req+0xea>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 801584c:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8015850:	f001 f837 	bl	80168c2 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8015854:	e043      	b.n	80158de <hci_send_req+0xde>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8015856:	f107 030c 	add.w	r3, r7, #12
 801585a:	4619      	mov	r1, r3
 801585c:	4829      	ldr	r0, [pc, #164]	@ (8015904 <hci_send_req+0x104>)
 801585e:	f000 fd48 	bl	80162f2 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	7a5b      	ldrb	r3, [r3, #9]
 8015866:	2b0f      	cmp	r3, #15
 8015868:	d114      	bne.n	8015894 <hci_send_req+0x94>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	330b      	adds	r3, #11
 801586e:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8015870:	693b      	ldr	r3, [r7, #16]
 8015872:	885b      	ldrh	r3, [r3, #2]
 8015874:	b29b      	uxth	r3, r3
 8015876:	8bba      	ldrh	r2, [r7, #28]
 8015878:	429a      	cmp	r2, r3
 801587a:	d104      	bne.n	8015886 <hci_send_req+0x86>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	691b      	ldr	r3, [r3, #16]
 8015880:	693a      	ldr	r2, [r7, #16]
 8015882:	7812      	ldrb	r2, [r2, #0]
 8015884:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8015886:	693b      	ldr	r3, [r7, #16]
 8015888:	785b      	ldrb	r3, [r3, #1]
 801588a:	2b00      	cmp	r3, #0
 801588c:	d027      	beq.n	80158de <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 801588e:	2301      	movs	r3, #1
 8015890:	77fb      	strb	r3, [r7, #31]
 8015892:	e024      	b.n	80158de <hci_send_req+0xde>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	330b      	adds	r3, #11
 8015898:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 801589a:	69bb      	ldr	r3, [r7, #24]
 801589c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80158a0:	b29b      	uxth	r3, r3
 80158a2:	8bba      	ldrh	r2, [r7, #28]
 80158a4:	429a      	cmp	r2, r3
 80158a6:	d114      	bne.n	80158d2 <hci_send_req+0xd2>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	7a9b      	ldrb	r3, [r3, #10]
 80158ac:	3b03      	subs	r3, #3
 80158ae:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	695a      	ldr	r2, [r3, #20]
 80158b4:	7dfb      	ldrb	r3, [r7, #23]
 80158b6:	429a      	cmp	r2, r3
 80158b8:	bfa8      	it	ge
 80158ba:	461a      	movge	r2, r3
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	6918      	ldr	r0, [r3, #16]
 80158c4:	69bb      	ldr	r3, [r7, #24]
 80158c6:	1cd9      	adds	r1, r3, #3
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	695b      	ldr	r3, [r3, #20]
 80158cc:	461a      	mov	r2, r3
 80158ce:	f005 fbd4 	bl	801b07a <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80158d2:	69bb      	ldr	r3, [r7, #24]
 80158d4:	781b      	ldrb	r3, [r3, #0]
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d001      	beq.n	80158de <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80158da:	2301      	movs	r3, #1
 80158dc:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80158de:	4809      	ldr	r0, [pc, #36]	@ (8015904 <hci_send_req+0x104>)
 80158e0:	f000 fc78 	bl	80161d4 <LST_is_empty>
 80158e4:	4603      	mov	r3, r0
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d0b5      	beq.n	8015856 <hci_send_req+0x56>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80158ea:	7ffb      	ldrb	r3, [r7, #31]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d0ad      	beq.n	801584c <hci_send_req+0x4c>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80158f0:	2001      	movs	r0, #1
 80158f2:	f000 f85f 	bl	80159b4 <NotifyCmdStatus>

  return 0;
 80158f6:	2300      	movs	r3, #0
}
 80158f8:	4618      	mov	r0, r3
 80158fa:	3720      	adds	r7, #32
 80158fc:	46bd      	mov	sp, r7
 80158fe:	bd80      	pop	{r7, pc}
 8015900:	20000c7c 	.word	0x20000c7c
 8015904:	20000c70 	.word	0x20000c70

08015908 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8015908:	b580      	push	{r7, lr}
 801590a:	b086      	sub	sp, #24
 801590c:	af00      	add	r7, sp, #0
 801590e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8015910:	480f      	ldr	r0, [pc, #60]	@ (8015950 <TlInit+0x48>)
 8015912:	f000 fc4f 	bl	80161b4 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8015916:	4a0f      	ldr	r2, [pc, #60]	@ (8015954 <TlInit+0x4c>)
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 801591c:	480e      	ldr	r0, [pc, #56]	@ (8015958 <TlInit+0x50>)
 801591e:	f000 fc49 	bl	80161b4 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8015922:	4b0e      	ldr	r3, [pc, #56]	@ (801595c <TlInit+0x54>)
 8015924:	2201      	movs	r2, #1
 8015926:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8015928:	4b0d      	ldr	r3, [pc, #52]	@ (8015960 <TlInit+0x58>)
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	2b00      	cmp	r3, #0
 801592e:	d00a      	beq.n	8015946 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8015934:	4b0b      	ldr	r3, [pc, #44]	@ (8015964 <TlInit+0x5c>)
 8015936:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8015938:	4b09      	ldr	r3, [pc, #36]	@ (8015960 <TlInit+0x58>)
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	f107 0208 	add.w	r2, r7, #8
 8015940:	4610      	mov	r0, r2
 8015942:	4798      	blx	r3
  }

  return;
 8015944:	bf00      	nop
 8015946:	bf00      	nop
}
 8015948:	3718      	adds	r7, #24
 801594a:	46bd      	mov	sp, r7
 801594c:	bd80      	pop	{r7, pc}
 801594e:	bf00      	nop
 8015950:	20000c70 	.word	0x20000c70
 8015954:	2000031c 	.word	0x2000031c
 8015958:	20000314 	.word	0x20000314
 801595c:	20000320 	.word	0x20000320
 8015960:	20000c50 	.word	0x20000c50
 8015964:	080159f5 	.word	0x080159f5

08015968 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8015968:	b580      	push	{r7, lr}
 801596a:	b082      	sub	sp, #8
 801596c:	af00      	add	r7, sp, #0
 801596e:	4603      	mov	r3, r0
 8015970:	603a      	str	r2, [r7, #0]
 8015972:	80fb      	strh	r3, [r7, #6]
 8015974:	460b      	mov	r3, r1
 8015976:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8015978:	4b0c      	ldr	r3, [pc, #48]	@ (80159ac <SendCmd+0x44>)
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	88fa      	ldrh	r2, [r7, #6]
 801597e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8015982:	4b0a      	ldr	r3, [pc, #40]	@ (80159ac <SendCmd+0x44>)
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	797a      	ldrb	r2, [r7, #5]
 8015988:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 801598a:	4b08      	ldr	r3, [pc, #32]	@ (80159ac <SendCmd+0x44>)
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	330c      	adds	r3, #12
 8015990:	797a      	ldrb	r2, [r7, #5]
 8015992:	6839      	ldr	r1, [r7, #0]
 8015994:	4618      	mov	r0, r3
 8015996:	f005 fb70 	bl	801b07a <memcpy>

  hciContext.io.Send(0,0);
 801599a:	4b05      	ldr	r3, [pc, #20]	@ (80159b0 <SendCmd+0x48>)
 801599c:	691b      	ldr	r3, [r3, #16]
 801599e:	2100      	movs	r1, #0
 80159a0:	2000      	movs	r0, #0
 80159a2:	4798      	blx	r3

  return;
 80159a4:	bf00      	nop
}
 80159a6:	3708      	adds	r7, #8
 80159a8:	46bd      	mov	sp, r7
 80159aa:	bd80      	pop	{r7, pc}
 80159ac:	2000031c 	.word	0x2000031c
 80159b0:	20000c50 	.word	0x20000c50

080159b4 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80159b4:	b580      	push	{r7, lr}
 80159b6:	b082      	sub	sp, #8
 80159b8:	af00      	add	r7, sp, #0
 80159ba:	4603      	mov	r3, r0
 80159bc:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80159be:	79fb      	ldrb	r3, [r7, #7]
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d108      	bne.n	80159d6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80159c4:	4b0a      	ldr	r3, [pc, #40]	@ (80159f0 <NotifyCmdStatus+0x3c>)
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d00d      	beq.n	80159e8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80159cc:	4b08      	ldr	r3, [pc, #32]	@ (80159f0 <NotifyCmdStatus+0x3c>)
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	2000      	movs	r0, #0
 80159d2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80159d4:	e008      	b.n	80159e8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80159d6:	4b06      	ldr	r3, [pc, #24]	@ (80159f0 <NotifyCmdStatus+0x3c>)
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d004      	beq.n	80159e8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80159de:	4b04      	ldr	r3, [pc, #16]	@ (80159f0 <NotifyCmdStatus+0x3c>)
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	2001      	movs	r0, #1
 80159e4:	4798      	blx	r3
  return;
 80159e6:	bf00      	nop
 80159e8:	bf00      	nop
}
 80159ea:	3708      	adds	r7, #8
 80159ec:	46bd      	mov	sp, r7
 80159ee:	bd80      	pop	{r7, pc}
 80159f0:	20000c78 	.word	0x20000c78

080159f4 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80159f4:	b580      	push	{r7, lr}
 80159f6:	b082      	sub	sp, #8
 80159f8:	af00      	add	r7, sp, #0
 80159fa:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	7a5b      	ldrb	r3, [r3, #9]
 8015a00:	2b0f      	cmp	r3, #15
 8015a02:	d003      	beq.n	8015a0c <TlEvtReceived+0x18>
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	7a5b      	ldrb	r3, [r3, #9]
 8015a08:	2b0e      	cmp	r3, #14
 8015a0a:	d107      	bne.n	8015a1c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8015a0c:	6879      	ldr	r1, [r7, #4]
 8015a0e:	4809      	ldr	r0, [pc, #36]	@ (8015a34 <TlEvtReceived+0x40>)
 8015a10:	f000 fc28 	bl	8016264 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8015a14:	2000      	movs	r0, #0
 8015a16:	f000 ff49 	bl	80168ac <hci_cmd_resp_release>
 8015a1a:	e006      	b.n	8015a2a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8015a1c:	6879      	ldr	r1, [r7, #4]
 8015a1e:	4806      	ldr	r0, [pc, #24]	@ (8015a38 <TlEvtReceived+0x44>)
 8015a20:	f000 fc20 	bl	8016264 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8015a24:	4804      	ldr	r0, [pc, #16]	@ (8015a38 <TlEvtReceived+0x44>)
 8015a26:	f000 ff35 	bl	8016894 <hci_notify_asynch_evt>
  }

  return;
 8015a2a:	bf00      	nop
}
 8015a2c:	3708      	adds	r7, #8
 8015a2e:	46bd      	mov	sp, r7
 8015a30:	bd80      	pop	{r7, pc}
 8015a32:	bf00      	nop
 8015a34:	20000c70 	.word	0x20000c70
 8015a38:	20000314 	.word	0x20000314

08015a3c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8015a3c:	b480      	push	{r7}
 8015a3e:	b083      	sub	sp, #12
 8015a40:	af00      	add	r7, sp, #0
 8015a42:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	4a05      	ldr	r2, [pc, #20]	@ (8015a5c <hci_register_io_bus+0x20>)
 8015a48:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	4a04      	ldr	r2, [pc, #16]	@ (8015a60 <hci_register_io_bus+0x24>)
 8015a4e:	611a      	str	r2, [r3, #16]

  return;
 8015a50:	bf00      	nop
}
 8015a52:	370c      	adds	r7, #12
 8015a54:	46bd      	mov	sp, r7
 8015a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a5a:	4770      	bx	lr
 8015a5c:	08015d55 	.word	0x08015d55
 8015a60:	08015dbd 	.word	0x08015dbd

08015a64 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8015a64:	b580      	push	{r7, lr}
 8015a66:	b082      	sub	sp, #8
 8015a68:	af00      	add	r7, sp, #0
 8015a6a:	6078      	str	r0, [r7, #4]
 8015a6c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8015a6e:	683b      	ldr	r3, [r7, #0]
 8015a70:	685b      	ldr	r3, [r3, #4]
 8015a72:	4a08      	ldr	r2, [pc, #32]	@ (8015a94 <shci_init+0x30>)
 8015a74:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8015a76:	4a08      	ldr	r2, [pc, #32]	@ (8015a98 <shci_init+0x34>)
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8015a7c:	4806      	ldr	r0, [pc, #24]	@ (8015a98 <shci_init+0x34>)
 8015a7e:	f000 f915 	bl	8015cac <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8015a82:	683b      	ldr	r3, [r7, #0]
 8015a84:	681b      	ldr	r3, [r3, #0]
 8015a86:	4618      	mov	r0, r3
 8015a88:	f000 f898 	bl	8015bbc <TlInit>

  return;
 8015a8c:	bf00      	nop
}
 8015a8e:	3708      	adds	r7, #8
 8015a90:	46bd      	mov	sp, r7
 8015a92:	bd80      	pop	{r7, pc}
 8015a94:	20000ca0 	.word	0x20000ca0
 8015a98:	20000c80 	.word	0x20000c80

08015a9c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	b084      	sub	sp, #16
 8015aa0:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8015aa2:	4822      	ldr	r0, [pc, #136]	@ (8015b2c <shci_user_evt_proc+0x90>)
 8015aa4:	f000 fb96 	bl	80161d4 <LST_is_empty>
 8015aa8:	4603      	mov	r3, r0
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d12b      	bne.n	8015b06 <shci_user_evt_proc+0x6a>
 8015aae:	4b20      	ldr	r3, [pc, #128]	@ (8015b30 <shci_user_evt_proc+0x94>)
 8015ab0:	781b      	ldrb	r3, [r3, #0]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d027      	beq.n	8015b06 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8015ab6:	f107 030c 	add.w	r3, r7, #12
 8015aba:	4619      	mov	r1, r3
 8015abc:	481b      	ldr	r0, [pc, #108]	@ (8015b2c <shci_user_evt_proc+0x90>)
 8015abe:	f000 fc18 	bl	80162f2 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8015ac2:	4b1c      	ldr	r3, [pc, #112]	@ (8015b34 <shci_user_evt_proc+0x98>)
 8015ac4:	69db      	ldr	r3, [r3, #28]
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d00c      	beq.n	8015ae4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8015ace:	2301      	movs	r3, #1
 8015ad0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8015ad2:	4b18      	ldr	r3, [pc, #96]	@ (8015b34 <shci_user_evt_proc+0x98>)
 8015ad4:	69db      	ldr	r3, [r3, #28]
 8015ad6:	1d3a      	adds	r2, r7, #4
 8015ad8:	4610      	mov	r0, r2
 8015ada:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8015adc:	793a      	ldrb	r2, [r7, #4]
 8015ade:	4b14      	ldr	r3, [pc, #80]	@ (8015b30 <shci_user_evt_proc+0x94>)
 8015ae0:	701a      	strb	r2, [r3, #0]
 8015ae2:	e002      	b.n	8015aea <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8015ae4:	4b12      	ldr	r3, [pc, #72]	@ (8015b30 <shci_user_evt_proc+0x94>)
 8015ae6:	2201      	movs	r2, #1
 8015ae8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8015aea:	4b11      	ldr	r3, [pc, #68]	@ (8015b30 <shci_user_evt_proc+0x94>)
 8015aec:	781b      	ldrb	r3, [r3, #0]
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d004      	beq.n	8015afc <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	4618      	mov	r0, r3
 8015af6:	f000 fa71 	bl	8015fdc <TL_MM_EvtDone>
 8015afa:	e004      	b.n	8015b06 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	4619      	mov	r1, r3
 8015b00:	480a      	ldr	r0, [pc, #40]	@ (8015b2c <shci_user_evt_proc+0x90>)
 8015b02:	f000 fb89 	bl	8016218 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8015b06:	4809      	ldr	r0, [pc, #36]	@ (8015b2c <shci_user_evt_proc+0x90>)
 8015b08:	f000 fb64 	bl	80161d4 <LST_is_empty>
 8015b0c:	4603      	mov	r3, r0
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d107      	bne.n	8015b22 <shci_user_evt_proc+0x86>
 8015b12:	4b07      	ldr	r3, [pc, #28]	@ (8015b30 <shci_user_evt_proc+0x94>)
 8015b14:	781b      	ldrb	r3, [r3, #0]
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d003      	beq.n	8015b22 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8015b1a:	4804      	ldr	r0, [pc, #16]	@ (8015b2c <shci_user_evt_proc+0x90>)
 8015b1c:	f7ef fd47 	bl	80055ae <shci_notify_asynch_evt>
  }


  return;
 8015b20:	bf00      	nop
 8015b22:	bf00      	nop
}
 8015b24:	3710      	adds	r7, #16
 8015b26:	46bd      	mov	sp, r7
 8015b28:	bd80      	pop	{r7, pc}
 8015b2a:	bf00      	nop
 8015b2c:	20000324 	.word	0x20000324
 8015b30:	20000334 	.word	0x20000334
 8015b34:	20000c80 	.word	0x20000c80

08015b38 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8015b38:	b580      	push	{r7, lr}
 8015b3a:	b084      	sub	sp, #16
 8015b3c:	af00      	add	r7, sp, #0
 8015b3e:	60ba      	str	r2, [r7, #8]
 8015b40:	607b      	str	r3, [r7, #4]
 8015b42:	4603      	mov	r3, r0
 8015b44:	81fb      	strh	r3, [r7, #14]
 8015b46:	460b      	mov	r3, r1
 8015b48:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8015b4a:	2000      	movs	r0, #0
 8015b4c:	f000 f868 	bl	8015c20 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8015b50:	4b17      	ldr	r3, [pc, #92]	@ (8015bb0 <shci_send+0x78>)
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	89fa      	ldrh	r2, [r7, #14]
 8015b56:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8015b5a:	4b15      	ldr	r3, [pc, #84]	@ (8015bb0 <shci_send+0x78>)
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	7b7a      	ldrb	r2, [r7, #13]
 8015b60:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8015b62:	4b13      	ldr	r3, [pc, #76]	@ (8015bb0 <shci_send+0x78>)
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	330c      	adds	r3, #12
 8015b68:	7b7a      	ldrb	r2, [r7, #13]
 8015b6a:	68b9      	ldr	r1, [r7, #8]
 8015b6c:	4618      	mov	r0, r3
 8015b6e:	f005 fa84 	bl	801b07a <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8015b72:	4b10      	ldr	r3, [pc, #64]	@ (8015bb4 <shci_send+0x7c>)
 8015b74:	2201      	movs	r2, #1
 8015b76:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8015b78:	4b0f      	ldr	r3, [pc, #60]	@ (8015bb8 <shci_send+0x80>)
 8015b7a:	691b      	ldr	r3, [r3, #16]
 8015b7c:	2100      	movs	r1, #0
 8015b7e:	2000      	movs	r0, #0
 8015b80:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8015b82:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8015b86:	f7ef fd29 	bl	80055dc <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	f103 0008 	add.w	r0, r3, #8
 8015b90:	4b07      	ldr	r3, [pc, #28]	@ (8015bb0 <shci_send+0x78>)
 8015b92:	6819      	ldr	r1, [r3, #0]
 8015b94:	4b06      	ldr	r3, [pc, #24]	@ (8015bb0 <shci_send+0x78>)
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	789b      	ldrb	r3, [r3, #2]
 8015b9a:	3303      	adds	r3, #3
 8015b9c:	461a      	mov	r2, r3
 8015b9e:	f005 fa6c 	bl	801b07a <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8015ba2:	2001      	movs	r0, #1
 8015ba4:	f000 f83c 	bl	8015c20 <Cmd_SetStatus>

  return;
 8015ba8:	bf00      	nop
}
 8015baa:	3710      	adds	r7, #16
 8015bac:	46bd      	mov	sp, r7
 8015bae:	bd80      	pop	{r7, pc}
 8015bb0:	20000330 	.word	0x20000330
 8015bb4:	20000ca4 	.word	0x20000ca4
 8015bb8:	20000c80 	.word	0x20000c80

08015bbc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8015bbc:	b580      	push	{r7, lr}
 8015bbe:	b086      	sub	sp, #24
 8015bc0:	af00      	add	r7, sp, #0
 8015bc2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8015bc4:	4a10      	ldr	r2, [pc, #64]	@ (8015c08 <TlInit+0x4c>)
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8015bca:	4810      	ldr	r0, [pc, #64]	@ (8015c0c <TlInit+0x50>)
 8015bcc:	f000 faf2 	bl	80161b4 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8015bd0:	2001      	movs	r0, #1
 8015bd2:	f000 f825 	bl	8015c20 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8015bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8015c10 <TlInit+0x54>)
 8015bd8:	2201      	movs	r2, #1
 8015bda:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8015bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8015c14 <TlInit+0x58>)
 8015bde:	681b      	ldr	r3, [r3, #0]
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d00c      	beq.n	8015bfe <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8015be8:	4b0b      	ldr	r3, [pc, #44]	@ (8015c18 <TlInit+0x5c>)
 8015bea:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8015bec:	4b0b      	ldr	r3, [pc, #44]	@ (8015c1c <TlInit+0x60>)
 8015bee:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8015bf0:	4b08      	ldr	r3, [pc, #32]	@ (8015c14 <TlInit+0x58>)
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	f107 020c 	add.w	r2, r7, #12
 8015bf8:	4610      	mov	r0, r2
 8015bfa:	4798      	blx	r3
  }

  return;
 8015bfc:	bf00      	nop
 8015bfe:	bf00      	nop
}
 8015c00:	3718      	adds	r7, #24
 8015c02:	46bd      	mov	sp, r7
 8015c04:	bd80      	pop	{r7, pc}
 8015c06:	bf00      	nop
 8015c08:	20000330 	.word	0x20000330
 8015c0c:	20000324 	.word	0x20000324
 8015c10:	20000334 	.word	0x20000334
 8015c14:	20000c80 	.word	0x20000c80
 8015c18:	08015c71 	.word	0x08015c71
 8015c1c:	08015c89 	.word	0x08015c89

08015c20 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8015c20:	b580      	push	{r7, lr}
 8015c22:	b082      	sub	sp, #8
 8015c24:	af00      	add	r7, sp, #0
 8015c26:	4603      	mov	r3, r0
 8015c28:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8015c2a:	79fb      	ldrb	r3, [r7, #7]
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d10b      	bne.n	8015c48 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8015c30:	4b0d      	ldr	r3, [pc, #52]	@ (8015c68 <Cmd_SetStatus+0x48>)
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d003      	beq.n	8015c40 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8015c38:	4b0b      	ldr	r3, [pc, #44]	@ (8015c68 <Cmd_SetStatus+0x48>)
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	2000      	movs	r0, #0
 8015c3e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8015c40:	4b0a      	ldr	r3, [pc, #40]	@ (8015c6c <Cmd_SetStatus+0x4c>)
 8015c42:	2200      	movs	r2, #0
 8015c44:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8015c46:	e00b      	b.n	8015c60 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8015c48:	4b08      	ldr	r3, [pc, #32]	@ (8015c6c <Cmd_SetStatus+0x4c>)
 8015c4a:	2201      	movs	r2, #1
 8015c4c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8015c4e:	4b06      	ldr	r3, [pc, #24]	@ (8015c68 <Cmd_SetStatus+0x48>)
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d004      	beq.n	8015c60 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8015c56:	4b04      	ldr	r3, [pc, #16]	@ (8015c68 <Cmd_SetStatus+0x48>)
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	2001      	movs	r0, #1
 8015c5c:	4798      	blx	r3
  return;
 8015c5e:	bf00      	nop
 8015c60:	bf00      	nop
}
 8015c62:	3708      	adds	r7, #8
 8015c64:	46bd      	mov	sp, r7
 8015c66:	bd80      	pop	{r7, pc}
 8015c68:	20000ca0 	.word	0x20000ca0
 8015c6c:	2000032c 	.word	0x2000032c

08015c70 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8015c70:	b580      	push	{r7, lr}
 8015c72:	b082      	sub	sp, #8
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8015c78:	2000      	movs	r0, #0
 8015c7a:	f7ef fca4 	bl	80055c6 <shci_cmd_resp_release>

  return;
 8015c7e:	bf00      	nop
}
 8015c80:	3708      	adds	r7, #8
 8015c82:	46bd      	mov	sp, r7
 8015c84:	bd80      	pop	{r7, pc}
	...

08015c88 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8015c88:	b580      	push	{r7, lr}
 8015c8a:	b082      	sub	sp, #8
 8015c8c:	af00      	add	r7, sp, #0
 8015c8e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8015c90:	6879      	ldr	r1, [r7, #4]
 8015c92:	4805      	ldr	r0, [pc, #20]	@ (8015ca8 <TlUserEvtReceived+0x20>)
 8015c94:	f000 fae6 	bl	8016264 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8015c98:	4803      	ldr	r0, [pc, #12]	@ (8015ca8 <TlUserEvtReceived+0x20>)
 8015c9a:	f7ef fc88 	bl	80055ae <shci_notify_asynch_evt>

  return;
 8015c9e:	bf00      	nop
}
 8015ca0:	3708      	adds	r7, #8
 8015ca2:	46bd      	mov	sp, r7
 8015ca4:	bd80      	pop	{r7, pc}
 8015ca6:	bf00      	nop
 8015ca8:	20000324 	.word	0x20000324

08015cac <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8015cac:	b480      	push	{r7}
 8015cae:	b083      	sub	sp, #12
 8015cb0:	af00      	add	r7, sp, #0
 8015cb2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	4a05      	ldr	r2, [pc, #20]	@ (8015ccc <shci_register_io_bus+0x20>)
 8015cb8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	4a04      	ldr	r2, [pc, #16]	@ (8015cd0 <shci_register_io_bus+0x24>)
 8015cbe:	611a      	str	r2, [r3, #16]

  return;
 8015cc0:	bf00      	nop
}
 8015cc2:	370c      	adds	r7, #12
 8015cc4:	46bd      	mov	sp, r7
 8015cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cca:	4770      	bx	lr
 8015ccc:	08015e69 	.word	0x08015e69
 8015cd0:	08015ebd 	.word	0x08015ebd

08015cd4 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8015cd4:	b580      	push	{r7, lr}
 8015cd6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8015cd8:	f001 f9e4 	bl	80170a4 <HW_IPCC_Enable>

  return;
 8015cdc:	bf00      	nop
}
 8015cde:	bd80      	pop	{r7, pc}

08015ce0 <TL_Init>:


void TL_Init( void )
{
 8015ce0:	b580      	push	{r7, lr}
 8015ce2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8015ce4:	4b10      	ldr	r3, [pc, #64]	@ (8015d28 <TL_Init+0x48>)
 8015ce6:	4a11      	ldr	r2, [pc, #68]	@ (8015d2c <TL_Init+0x4c>)
 8015ce8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8015cea:	4b0f      	ldr	r3, [pc, #60]	@ (8015d28 <TL_Init+0x48>)
 8015cec:	4a10      	ldr	r2, [pc, #64]	@ (8015d30 <TL_Init+0x50>)
 8015cee:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8015cf0:	4b0d      	ldr	r3, [pc, #52]	@ (8015d28 <TL_Init+0x48>)
 8015cf2:	4a10      	ldr	r2, [pc, #64]	@ (8015d34 <TL_Init+0x54>)
 8015cf4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8015cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8015d28 <TL_Init+0x48>)
 8015cf8:	4a0f      	ldr	r2, [pc, #60]	@ (8015d38 <TL_Init+0x58>)
 8015cfa:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8015cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8015d28 <TL_Init+0x48>)
 8015cfe:	4a0f      	ldr	r2, [pc, #60]	@ (8015d3c <TL_Init+0x5c>)
 8015d00:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8015d02:	4b09      	ldr	r3, [pc, #36]	@ (8015d28 <TL_Init+0x48>)
 8015d04:	4a0e      	ldr	r2, [pc, #56]	@ (8015d40 <TL_Init+0x60>)
 8015d06:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8015d08:	4b07      	ldr	r3, [pc, #28]	@ (8015d28 <TL_Init+0x48>)
 8015d0a:	4a0e      	ldr	r2, [pc, #56]	@ (8015d44 <TL_Init+0x64>)
 8015d0c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8015d0e:	4b06      	ldr	r3, [pc, #24]	@ (8015d28 <TL_Init+0x48>)
 8015d10:	4a0d      	ldr	r2, [pc, #52]	@ (8015d48 <TL_Init+0x68>)
 8015d12:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8015d14:	4b04      	ldr	r3, [pc, #16]	@ (8015d28 <TL_Init+0x48>)
 8015d16:	4a0d      	ldr	r2, [pc, #52]	@ (8015d4c <TL_Init+0x6c>)
 8015d18:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8015d1a:	4b03      	ldr	r3, [pc, #12]	@ (8015d28 <TL_Init+0x48>)
 8015d1c:	4a0c      	ldr	r2, [pc, #48]	@ (8015d50 <TL_Init+0x70>)
 8015d1e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8015d20:	f001 f9d4 	bl	80170cc <HW_IPCC_Init>

  return;
 8015d24:	bf00      	nop
}
 8015d26:	bd80      	pop	{r7, pc}
 8015d28:	20030000 	.word	0x20030000
 8015d2c:	20030028 	.word	0x20030028
 8015d30:	20030048 	.word	0x20030048
 8015d34:	20030058 	.word	0x20030058
 8015d38:	20030068 	.word	0x20030068
 8015d3c:	20030070 	.word	0x20030070
 8015d40:	20030078 	.word	0x20030078
 8015d44:	20030080 	.word	0x20030080
 8015d48:	2003009c 	.word	0x2003009c
 8015d4c:	200300a0 	.word	0x200300a0
 8015d50:	200300ac 	.word	0x200300ac

08015d54 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8015d54:	b580      	push	{r7, lr}
 8015d56:	b084      	sub	sp, #16
 8015d58:	af00      	add	r7, sp, #0
 8015d5a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8015d60:	4811      	ldr	r0, [pc, #68]	@ (8015da8 <TL_BLE_Init+0x54>)
 8015d62:	f000 fa27 	bl	80161b4 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8015d66:	4b11      	ldr	r3, [pc, #68]	@ (8015dac <TL_BLE_Init+0x58>)
 8015d68:	685b      	ldr	r3, [r3, #4]
 8015d6a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	689a      	ldr	r2, [r3, #8]
 8015d70:	68bb      	ldr	r3, [r7, #8]
 8015d72:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	68da      	ldr	r2, [r3, #12]
 8015d78:	68bb      	ldr	r3, [r7, #8]
 8015d7a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8015d7c:	68bb      	ldr	r3, [r7, #8]
 8015d7e:	4a0c      	ldr	r2, [pc, #48]	@ (8015db0 <TL_BLE_Init+0x5c>)
 8015d80:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8015d82:	68bb      	ldr	r3, [r7, #8]
 8015d84:	4a08      	ldr	r2, [pc, #32]	@ (8015da8 <TL_BLE_Init+0x54>)
 8015d86:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8015d88:	f001 f9b6 	bl	80170f8 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	4a08      	ldr	r2, [pc, #32]	@ (8015db4 <TL_BLE_Init+0x60>)
 8015d92:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	685b      	ldr	r3, [r3, #4]
 8015d98:	4a07      	ldr	r2, [pc, #28]	@ (8015db8 <TL_BLE_Init+0x64>)
 8015d9a:	6013      	str	r3, [r2, #0]

  return 0;
 8015d9c:	2300      	movs	r3, #0
}
 8015d9e:	4618      	mov	r0, r3
 8015da0:	3710      	adds	r7, #16
 8015da2:	46bd      	mov	sp, r7
 8015da4:	bd80      	pop	{r7, pc}
 8015da6:	bf00      	nop
 8015da8:	200300c8 	.word	0x200300c8
 8015dac:	20030000 	.word	0x20030000
 8015db0:	20030a58 	.word	0x20030a58
 8015db4:	20000cb0 	.word	0x20000cb0
 8015db8:	20000cb4 	.word	0x20000cb4

08015dbc <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8015dbc:	b580      	push	{r7, lr}
 8015dbe:	b082      	sub	sp, #8
 8015dc0:	af00      	add	r7, sp, #0
 8015dc2:	6078      	str	r0, [r7, #4]
 8015dc4:	460b      	mov	r3, r1
 8015dc6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8015dc8:	4b09      	ldr	r3, [pc, #36]	@ (8015df0 <TL_BLE_SendCmd+0x34>)
 8015dca:	685b      	ldr	r3, [r3, #4]
 8015dcc:	681b      	ldr	r3, [r3, #0]
 8015dce:	2201      	movs	r2, #1
 8015dd0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8015dd2:	4b07      	ldr	r3, [pc, #28]	@ (8015df0 <TL_BLE_SendCmd+0x34>)
 8015dd4:	685b      	ldr	r3, [r3, #4]
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	4619      	mov	r1, r3
 8015dda:	2001      	movs	r0, #1
 8015ddc:	f000 f96c 	bl	80160b8 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8015de0:	f001 f9a4 	bl	801712c <HW_IPCC_BLE_SendCmd>

  return 0;
 8015de4:	2300      	movs	r3, #0
}
 8015de6:	4618      	mov	r0, r3
 8015de8:	3708      	adds	r7, #8
 8015dea:	46bd      	mov	sp, r7
 8015dec:	bd80      	pop	{r7, pc}
 8015dee:	bf00      	nop
 8015df0:	20030000 	.word	0x20030000

08015df4 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8015df4:	b580      	push	{r7, lr}
 8015df6:	b082      	sub	sp, #8
 8015df8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8015dfa:	e01c      	b.n	8015e36 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8015dfc:	1d3b      	adds	r3, r7, #4
 8015dfe:	4619      	mov	r1, r3
 8015e00:	4812      	ldr	r0, [pc, #72]	@ (8015e4c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8015e02:	f000 fa76 	bl	80162f2 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	7a5b      	ldrb	r3, [r3, #9]
 8015e0a:	2b0f      	cmp	r3, #15
 8015e0c:	d003      	beq.n	8015e16 <HW_IPCC_BLE_RxEvtNot+0x22>
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	7a5b      	ldrb	r3, [r3, #9]
 8015e12:	2b0e      	cmp	r3, #14
 8015e14:	d105      	bne.n	8015e22 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	4619      	mov	r1, r3
 8015e1a:	2002      	movs	r0, #2
 8015e1c:	f000 f94c 	bl	80160b8 <OutputDbgTrace>
 8015e20:	e004      	b.n	8015e2c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	4619      	mov	r1, r3
 8015e26:	2003      	movs	r0, #3
 8015e28:	f000 f946 	bl	80160b8 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8015e2c:	4b08      	ldr	r3, [pc, #32]	@ (8015e50 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8015e2e:	681b      	ldr	r3, [r3, #0]
 8015e30:	687a      	ldr	r2, [r7, #4]
 8015e32:	4610      	mov	r0, r2
 8015e34:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8015e36:	4805      	ldr	r0, [pc, #20]	@ (8015e4c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8015e38:	f000 f9cc 	bl	80161d4 <LST_is_empty>
 8015e3c:	4603      	mov	r3, r0
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d0dc      	beq.n	8015dfc <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8015e42:	bf00      	nop
}
 8015e44:	3708      	adds	r7, #8
 8015e46:	46bd      	mov	sp, r7
 8015e48:	bd80      	pop	{r7, pc}
 8015e4a:	bf00      	nop
 8015e4c:	200300c8 	.word	0x200300c8
 8015e50:	20000cb0 	.word	0x20000cb0

08015e54 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8015e54:	b580      	push	{r7, lr}
 8015e56:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8015e58:	4b02      	ldr	r3, [pc, #8]	@ (8015e64 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	4798      	blx	r3

  return;
 8015e5e:	bf00      	nop
}
 8015e60:	bd80      	pop	{r7, pc}
 8015e62:	bf00      	nop
 8015e64:	20000cb4 	.word	0x20000cb4

08015e68 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8015e68:	b580      	push	{r7, lr}
 8015e6a:	b084      	sub	sp, #16
 8015e6c:	af00      	add	r7, sp, #0
 8015e6e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8015e74:	480d      	ldr	r0, [pc, #52]	@ (8015eac <TL_SYS_Init+0x44>)
 8015e76:	f000 f99d 	bl	80161b4 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8015e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8015eb0 <TL_SYS_Init+0x48>)
 8015e7c:	68db      	ldr	r3, [r3, #12]
 8015e7e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	689a      	ldr	r2, [r3, #8]
 8015e84:	68bb      	ldr	r3, [r7, #8]
 8015e86:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8015e88:	68bb      	ldr	r3, [r7, #8]
 8015e8a:	4a08      	ldr	r2, [pc, #32]	@ (8015eac <TL_SYS_Init+0x44>)
 8015e8c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8015e8e:	f001 f97f 	bl	8017190 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	4a07      	ldr	r2, [pc, #28]	@ (8015eb4 <TL_SYS_Init+0x4c>)
 8015e98:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	685b      	ldr	r3, [r3, #4]
 8015e9e:	4a06      	ldr	r2, [pc, #24]	@ (8015eb8 <TL_SYS_Init+0x50>)
 8015ea0:	6013      	str	r3, [r2, #0]

  return 0;
 8015ea2:	2300      	movs	r3, #0
}
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	3710      	adds	r7, #16
 8015ea8:	46bd      	mov	sp, r7
 8015eaa:	bd80      	pop	{r7, pc}
 8015eac:	200300d0 	.word	0x200300d0
 8015eb0:	20030000 	.word	0x20030000
 8015eb4:	20000cb8 	.word	0x20000cb8
 8015eb8:	20000cbc 	.word	0x20000cbc

08015ebc <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8015ebc:	b580      	push	{r7, lr}
 8015ebe:	b082      	sub	sp, #8
 8015ec0:	af00      	add	r7, sp, #0
 8015ec2:	6078      	str	r0, [r7, #4]
 8015ec4:	460b      	mov	r3, r1
 8015ec6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8015ec8:	4b09      	ldr	r3, [pc, #36]	@ (8015ef0 <TL_SYS_SendCmd+0x34>)
 8015eca:	68db      	ldr	r3, [r3, #12]
 8015ecc:	681b      	ldr	r3, [r3, #0]
 8015ece:	2210      	movs	r2, #16
 8015ed0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8015ed2:	4b07      	ldr	r3, [pc, #28]	@ (8015ef0 <TL_SYS_SendCmd+0x34>)
 8015ed4:	68db      	ldr	r3, [r3, #12]
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	4619      	mov	r1, r3
 8015eda:	2004      	movs	r0, #4
 8015edc:	f000 f8ec 	bl	80160b8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8015ee0:	f001 f970 	bl	80171c4 <HW_IPCC_SYS_SendCmd>

  return 0;
 8015ee4:	2300      	movs	r3, #0
}
 8015ee6:	4618      	mov	r0, r3
 8015ee8:	3708      	adds	r7, #8
 8015eea:	46bd      	mov	sp, r7
 8015eec:	bd80      	pop	{r7, pc}
 8015eee:	bf00      	nop
 8015ef0:	20030000 	.word	0x20030000

08015ef4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8015ef4:	b580      	push	{r7, lr}
 8015ef6:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8015ef8:	4b07      	ldr	r3, [pc, #28]	@ (8015f18 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8015efa:	68db      	ldr	r3, [r3, #12]
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	4619      	mov	r1, r3
 8015f00:	2005      	movs	r0, #5
 8015f02:	f000 f8d9 	bl	80160b8 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8015f06:	4b05      	ldr	r3, [pc, #20]	@ (8015f1c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	4a03      	ldr	r2, [pc, #12]	@ (8015f18 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8015f0c:	68d2      	ldr	r2, [r2, #12]
 8015f0e:	6812      	ldr	r2, [r2, #0]
 8015f10:	4610      	mov	r0, r2
 8015f12:	4798      	blx	r3

  return;
 8015f14:	bf00      	nop
}
 8015f16:	bd80      	pop	{r7, pc}
 8015f18:	20030000 	.word	0x20030000
 8015f1c:	20000cb8 	.word	0x20000cb8

08015f20 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8015f20:	b580      	push	{r7, lr}
 8015f22:	b082      	sub	sp, #8
 8015f24:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8015f26:	e00e      	b.n	8015f46 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8015f28:	1d3b      	adds	r3, r7, #4
 8015f2a:	4619      	mov	r1, r3
 8015f2c:	480b      	ldr	r0, [pc, #44]	@ (8015f5c <HW_IPCC_SYS_EvtNot+0x3c>)
 8015f2e:	f000 f9e0 	bl	80162f2 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	4619      	mov	r1, r3
 8015f36:	2006      	movs	r0, #6
 8015f38:	f000 f8be 	bl	80160b8 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8015f3c:	4b08      	ldr	r3, [pc, #32]	@ (8015f60 <HW_IPCC_SYS_EvtNot+0x40>)
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	687a      	ldr	r2, [r7, #4]
 8015f42:	4610      	mov	r0, r2
 8015f44:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8015f46:	4805      	ldr	r0, [pc, #20]	@ (8015f5c <HW_IPCC_SYS_EvtNot+0x3c>)
 8015f48:	f000 f944 	bl	80161d4 <LST_is_empty>
 8015f4c:	4603      	mov	r3, r0
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d0ea      	beq.n	8015f28 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8015f52:	bf00      	nop
}
 8015f54:	3708      	adds	r7, #8
 8015f56:	46bd      	mov	sp, r7
 8015f58:	bd80      	pop	{r7, pc}
 8015f5a:	bf00      	nop
 8015f5c:	200300d0 	.word	0x200300d0
 8015f60:	20000cbc 	.word	0x20000cbc

08015f64 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8015f64:	b580      	push	{r7, lr}
 8015f66:	b082      	sub	sp, #8
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8015f6c:	4817      	ldr	r0, [pc, #92]	@ (8015fcc <TL_MM_Init+0x68>)
 8015f6e:	f000 f921 	bl	80161b4 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8015f72:	4817      	ldr	r0, [pc, #92]	@ (8015fd0 <TL_MM_Init+0x6c>)
 8015f74:	f000 f91e 	bl	80161b4 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8015f78:	4b16      	ldr	r3, [pc, #88]	@ (8015fd4 <TL_MM_Init+0x70>)
 8015f7a:	691b      	ldr	r3, [r3, #16]
 8015f7c:	4a16      	ldr	r2, [pc, #88]	@ (8015fd8 <TL_MM_Init+0x74>)
 8015f7e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8015f80:	4b15      	ldr	r3, [pc, #84]	@ (8015fd8 <TL_MM_Init+0x74>)
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	687a      	ldr	r2, [r7, #4]
 8015f86:	6892      	ldr	r2, [r2, #8]
 8015f88:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8015f8a:	4b13      	ldr	r3, [pc, #76]	@ (8015fd8 <TL_MM_Init+0x74>)
 8015f8c:	681b      	ldr	r3, [r3, #0]
 8015f8e:	687a      	ldr	r2, [r7, #4]
 8015f90:	68d2      	ldr	r2, [r2, #12]
 8015f92:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8015f94:	4b10      	ldr	r3, [pc, #64]	@ (8015fd8 <TL_MM_Init+0x74>)
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	4a0c      	ldr	r2, [pc, #48]	@ (8015fcc <TL_MM_Init+0x68>)
 8015f9a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8015f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8015fd8 <TL_MM_Init+0x74>)
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	687a      	ldr	r2, [r7, #4]
 8015fa2:	6812      	ldr	r2, [r2, #0]
 8015fa4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8015fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8015fd8 <TL_MM_Init+0x74>)
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	687a      	ldr	r2, [r7, #4]
 8015fac:	6852      	ldr	r2, [r2, #4]
 8015fae:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8015fb0:	4b09      	ldr	r3, [pc, #36]	@ (8015fd8 <TL_MM_Init+0x74>)
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	687a      	ldr	r2, [r7, #4]
 8015fb6:	6912      	ldr	r2, [r2, #16]
 8015fb8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8015fba:	4b07      	ldr	r3, [pc, #28]	@ (8015fd8 <TL_MM_Init+0x74>)
 8015fbc:	681b      	ldr	r3, [r3, #0]
 8015fbe:	687a      	ldr	r2, [r7, #4]
 8015fc0:	6952      	ldr	r2, [r2, #20]
 8015fc2:	619a      	str	r2, [r3, #24]

  return;
 8015fc4:	bf00      	nop
}
 8015fc6:	3708      	adds	r7, #8
 8015fc8:	46bd      	mov	sp, r7
 8015fca:	bd80      	pop	{r7, pc}
 8015fcc:	200300b8 	.word	0x200300b8
 8015fd0:	20000ca8 	.word	0x20000ca8
 8015fd4:	20030000 	.word	0x20030000
 8015fd8:	20000cc0 	.word	0x20000cc0

08015fdc <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8015fdc:	b580      	push	{r7, lr}
 8015fde:	b082      	sub	sp, #8
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8015fe4:	6879      	ldr	r1, [r7, #4]
 8015fe6:	4807      	ldr	r0, [pc, #28]	@ (8016004 <TL_MM_EvtDone+0x28>)
 8015fe8:	f000 f93c 	bl	8016264 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8015fec:	6879      	ldr	r1, [r7, #4]
 8015fee:	2000      	movs	r0, #0
 8015ff0:	f000 f862 	bl	80160b8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8015ff4:	4804      	ldr	r0, [pc, #16]	@ (8016008 <TL_MM_EvtDone+0x2c>)
 8015ff6:	f001 f92b 	bl	8017250 <HW_IPCC_MM_SendFreeBuf>

  return;
 8015ffa:	bf00      	nop
}
 8015ffc:	3708      	adds	r7, #8
 8015ffe:	46bd      	mov	sp, r7
 8016000:	bd80      	pop	{r7, pc}
 8016002:	bf00      	nop
 8016004:	20000ca8 	.word	0x20000ca8
 8016008:	0801600d 	.word	0x0801600d

0801600c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 801600c:	b580      	push	{r7, lr}
 801600e:	b082      	sub	sp, #8
 8016010:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8016012:	e00c      	b.n	801602e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8016014:	1d3b      	adds	r3, r7, #4
 8016016:	4619      	mov	r1, r3
 8016018:	480a      	ldr	r0, [pc, #40]	@ (8016044 <SendFreeBuf+0x38>)
 801601a:	f000 f96a 	bl	80162f2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 801601e:	4b0a      	ldr	r3, [pc, #40]	@ (8016048 <SendFreeBuf+0x3c>)
 8016020:	691b      	ldr	r3, [r3, #16]
 8016022:	691b      	ldr	r3, [r3, #16]
 8016024:	687a      	ldr	r2, [r7, #4]
 8016026:	4611      	mov	r1, r2
 8016028:	4618      	mov	r0, r3
 801602a:	f000 f91b 	bl	8016264 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 801602e:	4805      	ldr	r0, [pc, #20]	@ (8016044 <SendFreeBuf+0x38>)
 8016030:	f000 f8d0 	bl	80161d4 <LST_is_empty>
 8016034:	4603      	mov	r3, r0
 8016036:	2b00      	cmp	r3, #0
 8016038:	d0ec      	beq.n	8016014 <SendFreeBuf+0x8>
  }

  return;
 801603a:	bf00      	nop
}
 801603c:	3708      	adds	r7, #8
 801603e:	46bd      	mov	sp, r7
 8016040:	bd80      	pop	{r7, pc}
 8016042:	bf00      	nop
 8016044:	20000ca8 	.word	0x20000ca8
 8016048:	20030000 	.word	0x20030000

0801604c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 801604c:	b580      	push	{r7, lr}
 801604e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8016050:	4805      	ldr	r0, [pc, #20]	@ (8016068 <TL_TRACES_Init+0x1c>)
 8016052:	f000 f8af 	bl	80161b4 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8016056:	4b05      	ldr	r3, [pc, #20]	@ (801606c <TL_TRACES_Init+0x20>)
 8016058:	695b      	ldr	r3, [r3, #20]
 801605a:	4a03      	ldr	r2, [pc, #12]	@ (8016068 <TL_TRACES_Init+0x1c>)
 801605c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 801605e:	f001 f949 	bl	80172f4 <HW_IPCC_TRACES_Init>

  return;
 8016062:	bf00      	nop
}
 8016064:	bd80      	pop	{r7, pc}
 8016066:	bf00      	nop
 8016068:	200300c0 	.word	0x200300c0
 801606c:	20030000 	.word	0x20030000

08016070 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8016070:	b580      	push	{r7, lr}
 8016072:	b082      	sub	sp, #8
 8016074:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8016076:	e008      	b.n	801608a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8016078:	1d3b      	adds	r3, r7, #4
 801607a:	4619      	mov	r1, r3
 801607c:	4808      	ldr	r0, [pc, #32]	@ (80160a0 <HW_IPCC_TRACES_EvtNot+0x30>)
 801607e:	f000 f938 	bl	80162f2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	4618      	mov	r0, r3
 8016086:	f000 f80d 	bl	80160a4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 801608a:	4805      	ldr	r0, [pc, #20]	@ (80160a0 <HW_IPCC_TRACES_EvtNot+0x30>)
 801608c:	f000 f8a2 	bl	80161d4 <LST_is_empty>
 8016090:	4603      	mov	r3, r0
 8016092:	2b00      	cmp	r3, #0
 8016094:	d0f0      	beq.n	8016078 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8016096:	bf00      	nop
}
 8016098:	3708      	adds	r7, #8
 801609a:	46bd      	mov	sp, r7
 801609c:	bd80      	pop	{r7, pc}
 801609e:	bf00      	nop
 80160a0:	200300c0 	.word	0x200300c0

080160a4 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80160a4:	b480      	push	{r7}
 80160a6:	b083      	sub	sp, #12
 80160a8:	af00      	add	r7, sp, #0
 80160aa:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80160ac:	bf00      	nop
 80160ae:	370c      	adds	r7, #12
 80160b0:	46bd      	mov	sp, r7
 80160b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160b6:	4770      	bx	lr

080160b8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80160b8:	b480      	push	{r7}
 80160ba:	b087      	sub	sp, #28
 80160bc:	af00      	add	r7, sp, #0
 80160be:	4603      	mov	r3, r0
 80160c0:	6039      	str	r1, [r7, #0]
 80160c2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 80160c4:	79fb      	ldrb	r3, [r7, #7]
 80160c6:	2b06      	cmp	r3, #6
 80160c8:	d845      	bhi.n	8016156 <OutputDbgTrace+0x9e>
 80160ca:	a201      	add	r2, pc, #4	@ (adr r2, 80160d0 <OutputDbgTrace+0x18>)
 80160cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80160d0:	080160ed 	.word	0x080160ed
 80160d4:	08016111 	.word	0x08016111
 80160d8:	08016117 	.word	0x08016117
 80160dc:	0801612b 	.word	0x0801612b
 80160e0:	08016137 	.word	0x08016137
 80160e4:	0801613d 	.word	0x0801613d
 80160e8:	0801614b 	.word	0x0801614b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80160ec:	683b      	ldr	r3, [r7, #0]
 80160ee:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80160f0:	697b      	ldr	r3, [r7, #20]
 80160f2:	7a5b      	ldrb	r3, [r3, #9]
 80160f4:	2bff      	cmp	r3, #255	@ 0xff
 80160f6:	d005      	beq.n	8016104 <OutputDbgTrace+0x4c>
 80160f8:	2bff      	cmp	r3, #255	@ 0xff
 80160fa:	dc05      	bgt.n	8016108 <OutputDbgTrace+0x50>
 80160fc:	2b0e      	cmp	r3, #14
 80160fe:	d005      	beq.n	801610c <OutputDbgTrace+0x54>
 8016100:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8016102:	e001      	b.n	8016108 <OutputDbgTrace+0x50>
          break;
 8016104:	bf00      	nop
 8016106:	e027      	b.n	8016158 <OutputDbgTrace+0xa0>
          break;
 8016108:	bf00      	nop
 801610a:	e025      	b.n	8016158 <OutputDbgTrace+0xa0>
          break;
 801610c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 801610e:	e023      	b.n	8016158 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8016110:	683b      	ldr	r3, [r7, #0]
 8016112:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8016114:	e020      	b.n	8016158 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016116:	683b      	ldr	r3, [r7, #0]
 8016118:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 801611a:	697b      	ldr	r3, [r7, #20]
 801611c:	7a5b      	ldrb	r3, [r3, #9]
 801611e:	2b0e      	cmp	r3, #14
 8016120:	d001      	beq.n	8016126 <OutputDbgTrace+0x6e>
 8016122:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8016124:	e000      	b.n	8016128 <OutputDbgTrace+0x70>
          break;
 8016126:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016128:	e016      	b.n	8016158 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801612a:	683b      	ldr	r3, [r7, #0]
 801612c:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 801612e:	697b      	ldr	r3, [r7, #20]
 8016130:	7a5b      	ldrb	r3, [r3, #9]
 8016132:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016134:	e010      	b.n	8016158 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8016136:	683b      	ldr	r3, [r7, #0]
 8016138:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 801613a:	e00d      	b.n	8016158 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 801613c:	683b      	ldr	r3, [r7, #0]
 801613e:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 8016140:	693b      	ldr	r3, [r7, #16]
 8016142:	785b      	ldrb	r3, [r3, #1]
 8016144:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 8016146:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016148:	e006      	b.n	8016158 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801614a:	683b      	ldr	r3, [r7, #0]
 801614c:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 801614e:	697b      	ldr	r3, [r7, #20]
 8016150:	7a5b      	ldrb	r3, [r3, #9]
 8016152:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016154:	e000      	b.n	8016158 <OutputDbgTrace+0xa0>

    default:
      break;
 8016156:	bf00      	nop
  }

  return;
 8016158:	bf00      	nop
}
 801615a:	371c      	adds	r7, #28
 801615c:	46bd      	mov	sp, r7
 801615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016162:	4770      	bx	lr

08016164 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8016164:	b480      	push	{r7}
 8016166:	b085      	sub	sp, #20
 8016168:	af00      	add	r7, sp, #0
 801616a:	4603      	mov	r3, r0
 801616c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 801616e:	4b0f      	ldr	r3, [pc, #60]	@ (80161ac <OTP_Read+0x48>)
 8016170:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8016172:	e002      	b.n	801617a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	3b08      	subs	r3, #8
 8016178:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	3307      	adds	r3, #7
 801617e:	781b      	ldrb	r3, [r3, #0]
 8016180:	79fa      	ldrb	r2, [r7, #7]
 8016182:	429a      	cmp	r2, r3
 8016184:	d003      	beq.n	801618e <OTP_Read+0x2a>
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	4a09      	ldr	r2, [pc, #36]	@ (80161b0 <OTP_Read+0x4c>)
 801618a:	4293      	cmp	r3, r2
 801618c:	d1f2      	bne.n	8016174 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	3307      	adds	r3, #7
 8016192:	781b      	ldrb	r3, [r3, #0]
 8016194:	79fa      	ldrb	r2, [r7, #7]
 8016196:	429a      	cmp	r2, r3
 8016198:	d001      	beq.n	801619e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 801619a:	2300      	movs	r3, #0
 801619c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 801619e:	68fb      	ldr	r3, [r7, #12]
}
 80161a0:	4618      	mov	r0, r3
 80161a2:	3714      	adds	r7, #20
 80161a4:	46bd      	mov	sp, r7
 80161a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161aa:	4770      	bx	lr
 80161ac:	1fff73f8 	.word	0x1fff73f8
 80161b0:	1fff7000 	.word	0x1fff7000

080161b4 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80161b4:	b480      	push	{r7}
 80161b6:	b083      	sub	sp, #12
 80161b8:	af00      	add	r7, sp, #0
 80161ba:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	687a      	ldr	r2, [r7, #4]
 80161c0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	687a      	ldr	r2, [r7, #4]
 80161c6:	605a      	str	r2, [r3, #4]
}
 80161c8:	bf00      	nop
 80161ca:	370c      	adds	r7, #12
 80161cc:	46bd      	mov	sp, r7
 80161ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161d2:	4770      	bx	lr

080161d4 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80161d4:	b480      	push	{r7}
 80161d6:	b087      	sub	sp, #28
 80161d8:	af00      	add	r7, sp, #0
 80161da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80161dc:	f3ef 8310 	mrs	r3, PRIMASK
 80161e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80161e2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80161e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80161e6:	b672      	cpsid	i
}
 80161e8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	687a      	ldr	r2, [r7, #4]
 80161f0:	429a      	cmp	r2, r3
 80161f2:	d102      	bne.n	80161fa <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80161f4:	2301      	movs	r3, #1
 80161f6:	75fb      	strb	r3, [r7, #23]
 80161f8:	e001      	b.n	80161fe <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80161fa:	2300      	movs	r3, #0
 80161fc:	75fb      	strb	r3, [r7, #23]
 80161fe:	693b      	ldr	r3, [r7, #16]
 8016200:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016202:	68bb      	ldr	r3, [r7, #8]
 8016204:	f383 8810 	msr	PRIMASK, r3
}
 8016208:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 801620a:	7dfb      	ldrb	r3, [r7, #23]
}
 801620c:	4618      	mov	r0, r3
 801620e:	371c      	adds	r7, #28
 8016210:	46bd      	mov	sp, r7
 8016212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016216:	4770      	bx	lr

08016218 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8016218:	b480      	push	{r7}
 801621a:	b087      	sub	sp, #28
 801621c:	af00      	add	r7, sp, #0
 801621e:	6078      	str	r0, [r7, #4]
 8016220:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016222:	f3ef 8310 	mrs	r3, PRIMASK
 8016226:	60fb      	str	r3, [r7, #12]
  return(result);
 8016228:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801622a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801622c:	b672      	cpsid	i
}
 801622e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	681a      	ldr	r2, [r3, #0]
 8016234:	683b      	ldr	r3, [r7, #0]
 8016236:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8016238:	683b      	ldr	r3, [r7, #0]
 801623a:	687a      	ldr	r2, [r7, #4]
 801623c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	683a      	ldr	r2, [r7, #0]
 8016242:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8016244:	683b      	ldr	r3, [r7, #0]
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	683a      	ldr	r2, [r7, #0]
 801624a:	605a      	str	r2, [r3, #4]
 801624c:	697b      	ldr	r3, [r7, #20]
 801624e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016250:	693b      	ldr	r3, [r7, #16]
 8016252:	f383 8810 	msr	PRIMASK, r3
}
 8016256:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016258:	bf00      	nop
 801625a:	371c      	adds	r7, #28
 801625c:	46bd      	mov	sp, r7
 801625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016262:	4770      	bx	lr

08016264 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8016264:	b480      	push	{r7}
 8016266:	b087      	sub	sp, #28
 8016268:	af00      	add	r7, sp, #0
 801626a:	6078      	str	r0, [r7, #4]
 801626c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801626e:	f3ef 8310 	mrs	r3, PRIMASK
 8016272:	60fb      	str	r3, [r7, #12]
  return(result);
 8016274:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016276:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016278:	b672      	cpsid	i
}
 801627a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 801627c:	683b      	ldr	r3, [r7, #0]
 801627e:	687a      	ldr	r2, [r7, #4]
 8016280:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	685a      	ldr	r2, [r3, #4]
 8016286:	683b      	ldr	r3, [r7, #0]
 8016288:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	683a      	ldr	r2, [r7, #0]
 801628e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8016290:	683b      	ldr	r3, [r7, #0]
 8016292:	685b      	ldr	r3, [r3, #4]
 8016294:	683a      	ldr	r2, [r7, #0]
 8016296:	601a      	str	r2, [r3, #0]
 8016298:	697b      	ldr	r3, [r7, #20]
 801629a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801629c:	693b      	ldr	r3, [r7, #16]
 801629e:	f383 8810 	msr	PRIMASK, r3
}
 80162a2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80162a4:	bf00      	nop
 80162a6:	371c      	adds	r7, #28
 80162a8:	46bd      	mov	sp, r7
 80162aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ae:	4770      	bx	lr

080162b0 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80162b0:	b480      	push	{r7}
 80162b2:	b087      	sub	sp, #28
 80162b4:	af00      	add	r7, sp, #0
 80162b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80162b8:	f3ef 8310 	mrs	r3, PRIMASK
 80162bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80162be:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80162c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80162c2:	b672      	cpsid	i
}
 80162c4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	685b      	ldr	r3, [r3, #4]
 80162ca:	687a      	ldr	r2, [r7, #4]
 80162cc:	6812      	ldr	r2, [r2, #0]
 80162ce:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	687a      	ldr	r2, [r7, #4]
 80162d6:	6852      	ldr	r2, [r2, #4]
 80162d8:	605a      	str	r2, [r3, #4]
 80162da:	697b      	ldr	r3, [r7, #20]
 80162dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80162de:	693b      	ldr	r3, [r7, #16]
 80162e0:	f383 8810 	msr	PRIMASK, r3
}
 80162e4:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80162e6:	bf00      	nop
 80162e8:	371c      	adds	r7, #28
 80162ea:	46bd      	mov	sp, r7
 80162ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162f0:	4770      	bx	lr

080162f2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80162f2:	b580      	push	{r7, lr}
 80162f4:	b086      	sub	sp, #24
 80162f6:	af00      	add	r7, sp, #0
 80162f8:	6078      	str	r0, [r7, #4]
 80162fa:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80162fc:	f3ef 8310 	mrs	r3, PRIMASK
 8016300:	60fb      	str	r3, [r7, #12]
  return(result);
 8016302:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016304:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016306:	b672      	cpsid	i
}
 8016308:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	681a      	ldr	r2, [r3, #0]
 801630e:	683b      	ldr	r3, [r7, #0]
 8016310:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	4618      	mov	r0, r3
 8016318:	f7ff ffca 	bl	80162b0 <LST_remove_node>
 801631c:	697b      	ldr	r3, [r7, #20]
 801631e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016320:	693b      	ldr	r3, [r7, #16]
 8016322:	f383 8810 	msr	PRIMASK, r3
}
 8016326:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016328:	bf00      	nop
 801632a:	3718      	adds	r7, #24
 801632c:	46bd      	mov	sp, r7
 801632e:	bd80      	pop	{r7, pc}

08016330 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8016330:	b480      	push	{r7}
 8016332:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8016334:	4b03      	ldr	r3, [pc, #12]	@ (8016344 <LL_FLASH_GetUDN+0x14>)
 8016336:	681b      	ldr	r3, [r3, #0]
}
 8016338:	4618      	mov	r0, r3
 801633a:	46bd      	mov	sp, r7
 801633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016340:	4770      	bx	lr
 8016342:	bf00      	nop
 8016344:	1fff7580 	.word	0x1fff7580

08016348 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8016348:	b480      	push	{r7}
 801634a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 801634c:	4b03      	ldr	r3, [pc, #12]	@ (801635c <LL_FLASH_GetDeviceID+0x14>)
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	b2db      	uxtb	r3, r3
}
 8016352:	4618      	mov	r0, r3
 8016354:	46bd      	mov	sp, r7
 8016356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801635a:	4770      	bx	lr
 801635c:	1fff7584 	.word	0x1fff7584

08016360 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8016360:	b480      	push	{r7}
 8016362:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8016364:	4b03      	ldr	r3, [pc, #12]	@ (8016374 <LL_FLASH_GetSTCompanyID+0x14>)
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	0a1b      	lsrs	r3, r3, #8
}
 801636a:	4618      	mov	r0, r3
 801636c:	46bd      	mov	sp, r7
 801636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016372:	4770      	bx	lr
 8016374:	1fff7584 	.word	0x1fff7584

08016378 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8016378:	b5b0      	push	{r4, r5, r7, lr}
 801637a:	b090      	sub	sp, #64	@ 0x40
 801637c:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801637e:	2392      	movs	r3, #146	@ 0x92
 8016380:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8016384:	4b25      	ldr	r3, [pc, #148]	@ (801641c <APP_BLE_Init+0xa4>)
 8016386:	1d3c      	adds	r4, r7, #4
 8016388:	461d      	mov	r5, r3
 801638a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801638c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801638e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016390:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016396:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801639a:	c403      	stmia	r4!, {r0, r1}
 801639c:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 801639e:	f000 f921 	bl	80165e4 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80163a2:	2101      	movs	r1, #1
 80163a4:	2002      	movs	r0, #2
 80163a6:	f002 feab 	bl	8019100 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80163aa:	4a1d      	ldr	r2, [pc, #116]	@ (8016420 <APP_BLE_Init+0xa8>)
 80163ac:	2100      	movs	r1, #0
 80163ae:	2002      	movs	r0, #2
 80163b0:	f002 ffd2 	bl	8019358 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 80163b4:	1d3b      	adds	r3, r7, #4
 80163b6:	4618      	mov	r0, r3
 80163b8:	f7ff f8c6 	bl	8015548 <SHCI_C2_BLE_Init>
 80163bc:	4603      	mov	r3, r0
 80163be:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 80163c2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d001      	beq.n	80163ce <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 80163ca:	f7f0 fd0f 	bl	8006dec <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80163ce:	f000 f91f 	bl	8016610 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80163d2:	f7ff f813 	bl	80153fc <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80163d6:	4b13      	ldr	r3, [pc, #76]	@ (8016424 <APP_BLE_Init+0xac>)
 80163d8:	2200      	movs	r2, #0
 80163da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80163de:	4b11      	ldr	r3, [pc, #68]	@ (8016424 <APP_BLE_Init+0xac>)
 80163e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80163e4:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80163e6:	4a10      	ldr	r2, [pc, #64]	@ (8016428 <APP_BLE_Init+0xb0>)
 80163e8:	2100      	movs	r1, #0
 80163ea:	2001      	movs	r0, #1
 80163ec:	f002 ffb4 	bl	8019358 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 80163f0:	2006      	movs	r0, #6
 80163f2:	f7fe fe77 	bl	80150e4 <aci_hal_set_radio_activity_mask>
 80163f6:	4603      	mov	r3, r0
 80163f8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 80163fc:	f000 fadc 	bl	80169b8 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8016400:	4b08      	ldr	r3, [pc, #32]	@ (8016424 <APP_BLE_Init+0xac>)
 8016402:	2200      	movs	r2, #0
 8016404:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8016406:	4b07      	ldr	r3, [pc, #28]	@ (8016424 <APP_BLE_Init+0xac>)
 8016408:	2200      	movs	r2, #0
 801640a:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 801640c:	2001      	movs	r0, #1
 801640e:	f000 f9b3 	bl	8016778 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8016412:	bf00      	nop
}
 8016414:	3740      	adds	r7, #64	@ 0x40
 8016416:	46bd      	mov	sp, r7
 8016418:	bdb0      	pop	{r4, r5, r7, pc}
 801641a:	bf00      	nop
 801641c:	0801cf94 	.word	0x0801cf94
 8016420:	08015765 	.word	0x08015765
 8016424:	20000ccc 	.word	0x20000ccc
 8016428:	08016861 	.word	0x08016861

0801642c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 801642c:	b580      	push	{r7, lr}
 801642e:	b08c      	sub	sp, #48	@ 0x30
 8016430:	af00      	add	r7, sp, #0
 8016432:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8016434:	2392      	movs	r3, #146	@ 0x92
 8016436:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	3301      	adds	r3, #1
 801643e:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 8016440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016442:	781b      	ldrb	r3, [r3, #0]
 8016444:	2bff      	cmp	r3, #255	@ 0xff
 8016446:	d05c      	beq.n	8016502 <SVCCTL_App_Notification+0xd6>
 8016448:	2bff      	cmp	r3, #255	@ 0xff
 801644a:	f300 80bd 	bgt.w	80165c8 <SVCCTL_App_Notification+0x19c>
 801644e:	2b3e      	cmp	r3, #62	@ 0x3e
 8016450:	d02b      	beq.n	80164aa <SVCCTL_App_Notification+0x7e>
 8016452:	2b3e      	cmp	r3, #62	@ 0x3e
 8016454:	f300 80b8 	bgt.w	80165c8 <SVCCTL_App_Notification+0x19c>
 8016458:	2b05      	cmp	r3, #5
 801645a:	d002      	beq.n	8016462 <SVCCTL_App_Notification+0x36>
 801645c:	2b10      	cmp	r3, #16
 801645e:	d020      	beq.n	80164a2 <SVCCTL_App_Notification+0x76>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8016460:	e0b2      	b.n	80165c8 <SVCCTL_App_Notification+0x19c>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8016462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016464:	3302      	adds	r3, #2
 8016466:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801646e:	b29a      	uxth	r2, r3
 8016470:	4b59      	ldr	r3, [pc, #356]	@ (80165d8 <SVCCTL_App_Notification+0x1ac>)
 8016472:	8adb      	ldrh	r3, [r3, #22]
 8016474:	429a      	cmp	r2, r3
 8016476:	d106      	bne.n	8016486 <SVCCTL_App_Notification+0x5a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8016478:	4b57      	ldr	r3, [pc, #348]	@ (80165d8 <SVCCTL_App_Notification+0x1ac>)
 801647a:	2200      	movs	r2, #0
 801647c:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 801647e:	4b56      	ldr	r3, [pc, #344]	@ (80165d8 <SVCCTL_App_Notification+0x1ac>)
 8016480:	2200      	movs	r2, #0
 8016482:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8016486:	2001      	movs	r0, #1
 8016488:	f000 f976 	bl	8016778 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 801648c:	4b53      	ldr	r3, [pc, #332]	@ (80165dc <SVCCTL_App_Notification+0x1b0>)
 801648e:	2201      	movs	r2, #1
 8016490:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8016492:	4b51      	ldr	r3, [pc, #324]	@ (80165d8 <SVCCTL_App_Notification+0x1ac>)
 8016494:	8ada      	ldrh	r2, [r3, #22]
 8016496:	4b51      	ldr	r3, [pc, #324]	@ (80165dc <SVCCTL_App_Notification+0x1b0>)
 8016498:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 801649a:	4850      	ldr	r0, [pc, #320]	@ (80165dc <SVCCTL_App_Notification+0x1b0>)
 801649c:	f000 fa78 	bl	8016990 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80164a0:	e095      	b.n	80165ce <SVCCTL_App_Notification+0x1a2>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 80164a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80164a4:	3302      	adds	r3, #2
 80164a6:	613b      	str	r3, [r7, #16]
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 80164a8:	e091      	b.n	80165ce <SVCCTL_App_Notification+0x1a2>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 80164aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80164ac:	3302      	adds	r3, #2
 80164ae:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 80164b0:	69bb      	ldr	r3, [r7, #24]
 80164b2:	781b      	ldrb	r3, [r3, #0]
 80164b4:	2b01      	cmp	r3, #1
 80164b6:	d001      	beq.n	80164bc <SVCCTL_App_Notification+0x90>
 80164b8:	2b03      	cmp	r3, #3
          break;
 80164ba:	e021      	b.n	8016500 <SVCCTL_App_Notification+0xd4>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 80164bc:	69bb      	ldr	r3, [r7, #24]
 80164be:	3301      	adds	r3, #1
 80164c0:	617b      	str	r3, [r7, #20]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80164c2:	4b45      	ldr	r3, [pc, #276]	@ (80165d8 <SVCCTL_App_Notification+0x1ac>)
 80164c4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80164c8:	2b04      	cmp	r3, #4
 80164ca:	d104      	bne.n	80164d6 <SVCCTL_App_Notification+0xaa>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80164cc:	4b42      	ldr	r3, [pc, #264]	@ (80165d8 <SVCCTL_App_Notification+0x1ac>)
 80164ce:	2206      	movs	r2, #6
 80164d0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80164d4:	e003      	b.n	80164de <SVCCTL_App_Notification+0xb2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80164d6:	4b40      	ldr	r3, [pc, #256]	@ (80165d8 <SVCCTL_App_Notification+0x1ac>)
 80164d8:	2205      	movs	r2, #5
 80164da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 80164de:	697b      	ldr	r3, [r7, #20]
 80164e0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80164e4:	b29a      	uxth	r2, r3
 80164e6:	4b3c      	ldr	r3, [pc, #240]	@ (80165d8 <SVCCTL_App_Notification+0x1ac>)
 80164e8:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 80164ea:	4b3c      	ldr	r3, [pc, #240]	@ (80165dc <SVCCTL_App_Notification+0x1b0>)
 80164ec:	2200      	movs	r2, #0
 80164ee:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80164f0:	4b39      	ldr	r3, [pc, #228]	@ (80165d8 <SVCCTL_App_Notification+0x1ac>)
 80164f2:	8ada      	ldrh	r2, [r3, #22]
 80164f4:	4b39      	ldr	r3, [pc, #228]	@ (80165dc <SVCCTL_App_Notification+0x1b0>)
 80164f6:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 80164f8:	4838      	ldr	r0, [pc, #224]	@ (80165dc <SVCCTL_App_Notification+0x1b0>)
 80164fa:	f000 fa49 	bl	8016990 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80164fe:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8016500:	e065      	b.n	80165ce <SVCCTL_App_Notification+0x1a2>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8016502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016504:	3302      	adds	r3, #2
 8016506:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 8016508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801650a:	881b      	ldrh	r3, [r3, #0]
 801650c:	b29b      	uxth	r3, r3
 801650e:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8016512:	4293      	cmp	r3, r2
 8016514:	d048      	beq.n	80165a8 <SVCCTL_App_Notification+0x17c>
 8016516:	f640 420e 	movw	r2, #3086	@ 0xc0e
 801651a:	4293      	cmp	r3, r2
 801651c:	dc56      	bgt.n	80165cc <SVCCTL_App_Notification+0x1a0>
 801651e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016522:	d04b      	beq.n	80165bc <SVCCTL_App_Notification+0x190>
 8016524:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016528:	dc50      	bgt.n	80165cc <SVCCTL_App_Notification+0x1a0>
 801652a:	f240 420a 	movw	r2, #1034	@ 0x40a
 801652e:	4293      	cmp	r3, r2
 8016530:	dc4c      	bgt.n	80165cc <SVCCTL_App_Notification+0x1a0>
 8016532:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016536:	dc04      	bgt.n	8016542 <SVCCTL_App_Notification+0x116>
 8016538:	2b04      	cmp	r3, #4
 801653a:	d041      	beq.n	80165c0 <SVCCTL_App_Notification+0x194>
 801653c:	2b06      	cmp	r3, #6
 801653e:	d039      	beq.n	80165b4 <SVCCTL_App_Notification+0x188>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8016540:	e044      	b.n	80165cc <SVCCTL_App_Notification+0x1a0>
      switch (p_blecore_evt->ecode)
 8016542:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8016546:	2b09      	cmp	r3, #9
 8016548:	d840      	bhi.n	80165cc <SVCCTL_App_Notification+0x1a0>
 801654a:	a201      	add	r2, pc, #4	@ (adr r2, 8016550 <SVCCTL_App_Notification+0x124>)
 801654c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016550:	080165a1 	.word	0x080165a1
 8016554:	08016579 	.word	0x08016579
 8016558:	080165cd 	.word	0x080165cd
 801655c:	080165cd 	.word	0x080165cd
 8016560:	080165cd 	.word	0x080165cd
 8016564:	080165cd 	.word	0x080165cd
 8016568:	080165c5 	.word	0x080165c5
 801656c:	080165cd 	.word	0x080165cd
 8016570:	0801658d 	.word	0x0801658d
 8016574:	080165c5 	.word	0x080165c5
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8016578:	4b17      	ldr	r3, [pc, #92]	@ (80165d8 <SVCCTL_App_Notification+0x1ac>)
 801657a:	8adb      	ldrh	r3, [r3, #22]
 801657c:	4918      	ldr	r1, [pc, #96]	@ (80165e0 <SVCCTL_App_Notification+0x1b4>)
 801657e:	4618      	mov	r0, r3
 8016580:	f7fd ffb2 	bl	80144e8 <aci_gap_pass_key_resp>
 8016584:	4603      	mov	r3, r0
 8016586:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 801658a:	e01c      	b.n	80165c6 <SVCCTL_App_Notification+0x19a>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 801658c:	4b12      	ldr	r3, [pc, #72]	@ (80165d8 <SVCCTL_App_Notification+0x1ac>)
 801658e:	8adb      	ldrh	r3, [r3, #22]
 8016590:	2101      	movs	r1, #1
 8016592:	4618      	mov	r0, r3
 8016594:	f7fe f952 	bl	801483c <aci_gap_numeric_comparison_value_confirm_yesno>
 8016598:	4603      	mov	r3, r0
 801659a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 801659e:	e012      	b.n	80165c6 <SVCCTL_App_Notification+0x19a>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 80165a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165a2:	3302      	adds	r3, #2
 80165a4:	623b      	str	r3, [r7, #32]
          break;
 80165a6:	e00e      	b.n	80165c6 <SVCCTL_App_Notification+0x19a>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 80165a8:	4b0b      	ldr	r3, [pc, #44]	@ (80165d8 <SVCCTL_App_Notification+0x1ac>)
 80165aa:	8adb      	ldrh	r3, [r3, #22]
 80165ac:	4618      	mov	r0, r3
 80165ae:	f7fe fc58 	bl	8014e62 <aci_gatt_confirm_indication>
        break;
 80165b2:	e008      	b.n	80165c6 <SVCCTL_App_Notification+0x19a>
	      p_warning_event = (aci_hal_warning_event_rp0 *)p_blecore_evt->data;
 80165b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165b6:	3302      	adds	r3, #2
 80165b8:	61fb      	str	r3, [r7, #28]
          break;
 80165ba:	e004      	b.n	80165c6 <SVCCTL_App_Notification+0x19a>
          break;
 80165bc:	bf00      	nop
 80165be:	e005      	b.n	80165cc <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 80165c0:	bf00      	nop
 80165c2:	e003      	b.n	80165cc <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 80165c4:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80165c6:	e001      	b.n	80165cc <SVCCTL_App_Notification+0x1a0>
      break;
 80165c8:	bf00      	nop
 80165ca:	e000      	b.n	80165ce <SVCCTL_App_Notification+0x1a2>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80165cc:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80165ce:	2301      	movs	r3, #1
}
 80165d0:	4618      	mov	r0, r3
 80165d2:	3730      	adds	r7, #48	@ 0x30
 80165d4:	46bd      	mov	sp, r7
 80165d6:	bd80      	pop	{r7, pc}
 80165d8:	20000ccc 	.word	0x20000ccc
 80165dc:	20000d50 	.word	0x20000d50
 80165e0:	0001b207 	.word	0x0001b207

080165e4 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80165e4:	b580      	push	{r7, lr}
 80165e6:	b082      	sub	sp, #8
 80165e8:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80165ea:	4b06      	ldr	r3, [pc, #24]	@ (8016604 <Ble_Tl_Init+0x20>)
 80165ec:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80165ee:	4b06      	ldr	r3, [pc, #24]	@ (8016608 <Ble_Tl_Init+0x24>)
 80165f0:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80165f2:	463b      	mov	r3, r7
 80165f4:	4619      	mov	r1, r3
 80165f6:	4805      	ldr	r0, [pc, #20]	@ (801660c <Ble_Tl_Init+0x28>)
 80165f8:	f7ff f898 	bl	801572c <hci_init>

  return;
 80165fc:	bf00      	nop
}
 80165fe:	3708      	adds	r7, #8
 8016600:	46bd      	mov	sp, r7
 8016602:	bd80      	pop	{r7, pc}
 8016604:	200300d8 	.word	0x200300d8
 8016608:	08016911 	.word	0x08016911
 801660c:	080168d9 	.word	0x080168d9

08016610 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8016610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016612:	b08d      	sub	sp, #52	@ 0x34
 8016614:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8016616:	2300      	movs	r3, #0
 8016618:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801661a:	2392      	movs	r3, #146	@ 0x92
 801661c:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 801661e:	f7fe fdb5 	bl	801518c <hci_reset>
 8016622:	4603      	mov	r3, r0
 8016624:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8016626:	f000 f8d7 	bl	80167d8 <BleGetBdAddress>
 801662a:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBLIC_ADDRESS_OFFSET, CONFIG_DATA_PUBLIC_ADDRESS_LEN, (uint8_t*) p_bd_addr);
 801662c:	693a      	ldr	r2, [r7, #16]
 801662e:	2106      	movs	r1, #6
 8016630:	2000      	movs	r0, #0
 8016632:	f7fe fc6b 	bl	8014f0c <aci_hal_write_config_data>
 8016636:	4603      	mov	r3, r0
 8016638:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 801663a:	4a4a      	ldr	r2, [pc, #296]	@ (8016764 <Ble_Hci_Gap_Gatt_Init+0x154>)
 801663c:	2110      	movs	r1, #16
 801663e:	2018      	movs	r0, #24
 8016640:	f7fe fc64 	bl	8014f0c <aci_hal_write_config_data>
 8016644:	4603      	mov	r3, r0
 8016646:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8016648:	4a47      	ldr	r2, [pc, #284]	@ (8016768 <Ble_Hci_Gap_Gatt_Init+0x158>)
 801664a:	2110      	movs	r1, #16
 801664c:	2008      	movs	r0, #8
 801664e:	f7fe fc5d 	bl	8014f0c <aci_hal_write_config_data>
 8016652:	4603      	mov	r3, r0
 8016654:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8016656:	2118      	movs	r1, #24
 8016658:	2001      	movs	r0, #1
 801665a:	f7fe fcdc 	bl	8015016 <aci_hal_set_tx_power_level>
 801665e:	4603      	mov	r3, r0
 8016660:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8016662:	f7fe f952 	bl	801490a <aci_gatt_init>
 8016666:	4603      	mov	r3, r0
 8016668:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 801666a:	2300      	movs	r3, #0
 801666c:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 801666e:	7bfb      	ldrb	r3, [r7, #15]
 8016670:	f043 0301 	orr.w	r3, r3, #1
 8016674:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8016676:	7bfb      	ldrb	r3, [r7, #15]
 8016678:	2b00      	cmp	r3, #0
 801667a:	d01f      	beq.n	80166bc <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 801667c:	4b3b      	ldr	r3, [pc, #236]	@ (801676c <Ble_Hci_Gap_Gatt_Init+0x15c>)
 801667e:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8016680:	1dba      	adds	r2, r7, #6
 8016682:	7bf8      	ldrb	r0, [r7, #15]
 8016684:	1cbb      	adds	r3, r7, #2
 8016686:	9301      	str	r3, [sp, #4]
 8016688:	1d3b      	adds	r3, r7, #4
 801668a:	9300      	str	r3, [sp, #0]
 801668c:	4613      	mov	r3, r2
 801668e:	2208      	movs	r2, #8
 8016690:	2100      	movs	r1, #0
 8016692:	f7fd ff90 	bl	80145b6 <aci_gap_init>
 8016696:	4603      	mov	r3, r0
 8016698:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 801669a:	88fc      	ldrh	r4, [r7, #6]
 801669c:	88bd      	ldrh	r5, [r7, #4]
 801669e:	68b8      	ldr	r0, [r7, #8]
 80166a0:	f7e9 fdce 	bl	8000240 <strlen>
 80166a4:	4603      	mov	r3, r0
 80166a6:	b2da      	uxtb	r2, r3
 80166a8:	68bb      	ldr	r3, [r7, #8]
 80166aa:	9300      	str	r3, [sp, #0]
 80166ac:	4613      	mov	r3, r2
 80166ae:	2200      	movs	r2, #0
 80166b0:	4629      	mov	r1, r5
 80166b2:	4620      	mov	r0, r4
 80166b4:	f7fe fb2c 	bl	8014d10 <aci_gatt_update_char_value>
 80166b8:	4603      	mov	r3, r0
 80166ba:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 80166bc:	88f8      	ldrh	r0, [r7, #6]
 80166be:	8879      	ldrh	r1, [r7, #2]
 80166c0:	463b      	mov	r3, r7
 80166c2:	9300      	str	r3, [sp, #0]
 80166c4:	2302      	movs	r3, #2
 80166c6:	2200      	movs	r2, #0
 80166c8:	f7fe fb22 	bl	8014d10 <aci_gatt_update_char_value>
 80166cc:	4603      	mov	r3, r0
 80166ce:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80166d0:	2202      	movs	r2, #2
 80166d2:	2102      	movs	r1, #2
 80166d4:	2000      	movs	r0, #0
 80166d6:	f7fe fd7d 	bl	80151d4 <hci_le_set_default_phy>
 80166da:	4603      	mov	r3, r0
 80166dc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80166de:	4b24      	ldr	r3, [pc, #144]	@ (8016770 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80166e0:	2201      	movs	r2, #1
 80166e2:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80166e4:	4b22      	ldr	r3, [pc, #136]	@ (8016770 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80166e6:	781b      	ldrb	r3, [r3, #0]
 80166e8:	4618      	mov	r0, r3
 80166ea:	f7fd fde5 	bl	80142b8 <aci_gap_set_io_capability>
 80166ee:	4603      	mov	r3, r0
 80166f0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80166f2:	4b1f      	ldr	r3, [pc, #124]	@ (8016770 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80166f4:	2201      	movs	r2, #1
 80166f6:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80166f8:	4b1d      	ldr	r3, [pc, #116]	@ (8016770 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80166fa:	2208      	movs	r2, #8
 80166fc:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80166fe:	4b1c      	ldr	r3, [pc, #112]	@ (8016770 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8016700:	2210      	movs	r2, #16
 8016702:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8016704:	4b1a      	ldr	r3, [pc, #104]	@ (8016770 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8016706:	2200      	movs	r2, #0
 8016708:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 801670a:	4b19      	ldr	r3, [pc, #100]	@ (8016770 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801670c:	4a19      	ldr	r2, [pc, #100]	@ (8016774 <Ble_Hci_Gap_Gatt_Init+0x164>)
 801670e:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8016710:	4b17      	ldr	r3, [pc, #92]	@ (8016770 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8016712:	2200      	movs	r2, #0
 8016714:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8016716:	4b16      	ldr	r3, [pc, #88]	@ (8016770 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8016718:	789c      	ldrb	r4, [r3, #2]
 801671a:	4b15      	ldr	r3, [pc, #84]	@ (8016770 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801671c:	785d      	ldrb	r5, [r3, #1]
 801671e:	4b14      	ldr	r3, [pc, #80]	@ (8016770 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8016720:	791b      	ldrb	r3, [r3, #4]
 8016722:	4a13      	ldr	r2, [pc, #76]	@ (8016770 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8016724:	7952      	ldrb	r2, [r2, #5]
 8016726:	4912      	ldr	r1, [pc, #72]	@ (8016770 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8016728:	78c9      	ldrb	r1, [r1, #3]
 801672a:	4811      	ldr	r0, [pc, #68]	@ (8016770 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801672c:	6880      	ldr	r0, [r0, #8]
 801672e:	2600      	movs	r6, #0
 8016730:	9604      	str	r6, [sp, #16]
 8016732:	9003      	str	r0, [sp, #12]
 8016734:	9102      	str	r1, [sp, #8]
 8016736:	9201      	str	r2, [sp, #4]
 8016738:	9300      	str	r3, [sp, #0]
 801673a:	2300      	movs	r3, #0
 801673c:	2201      	movs	r2, #1
 801673e:	4629      	mov	r1, r5
 8016740:	4620      	mov	r0, r4
 8016742:	f7fd fe0d 	bl	8014360 <aci_gap_set_authentication_requirement>
 8016746:	4603      	mov	r3, r0
 8016748:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 801674a:	4b09      	ldr	r3, [pc, #36]	@ (8016770 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801674c:	789b      	ldrb	r3, [r3, #2]
 801674e:	2b00      	cmp	r3, #0
 8016750:	d003      	beq.n	801675a <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8016752:	f7fe f84f 	bl	80147f4 <aci_gap_configure_filter_accept_list>
 8016756:	4603      	mov	r3, r0
 8016758:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 801675a:	bf00      	nop
 801675c:	371c      	adds	r7, #28
 801675e:	46bd      	mov	sp, r7
 8016760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016762:	bf00      	nop
 8016764:	0801d948 	.word	0x0801d948
 8016768:	0801d958 	.word	0x0801d958
 801676c:	0801cfd0 	.word	0x0801cfd0
 8016770:	20000ccc 	.word	0x20000ccc
 8016774:	0001b207 	.word	0x0001b207

08016778 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8016778:	b580      	push	{r7, lr}
 801677a:	b08c      	sub	sp, #48	@ 0x30
 801677c:	af08      	add	r7, sp, #32
 801677e:	4603      	mov	r3, r0
 8016780:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8016782:	2392      	movs	r3, #146	@ 0x92
 8016784:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8016786:	4a12      	ldr	r2, [pc, #72]	@ (80167d0 <Adv_Request+0x58>)
 8016788:	79fb      	ldrb	r3, [r7, #7]
 801678a:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 801678e:	2300      	movs	r3, #0
 8016790:	9306      	str	r3, [sp, #24]
 8016792:	2300      	movs	r3, #0
 8016794:	9305      	str	r3, [sp, #20]
 8016796:	2300      	movs	r3, #0
 8016798:	9304      	str	r3, [sp, #16]
 801679a:	2300      	movs	r3, #0
 801679c:	9303      	str	r3, [sp, #12]
 801679e:	2300      	movs	r3, #0
 80167a0:	9302      	str	r3, [sp, #8]
 80167a2:	2300      	movs	r3, #0
 80167a4:	9301      	str	r3, [sp, #4]
 80167a6:	2300      	movs	r3, #0
 80167a8:	9300      	str	r3, [sp, #0]
 80167aa:	2300      	movs	r3, #0
 80167ac:	22a0      	movs	r2, #160	@ 0xa0
 80167ae:	2180      	movs	r1, #128	@ 0x80
 80167b0:	2000      	movs	r0, #0
 80167b2:	f7fd fc87 	bl	80140c4 <aci_gap_set_discoverable>
 80167b6:	4603      	mov	r3, r0
 80167b8:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 80167ba:	4906      	ldr	r1, [pc, #24]	@ (80167d4 <Adv_Request+0x5c>)
 80167bc:	200f      	movs	r0, #15
 80167be:	f7fd ffa7 	bl	8014710 <aci_gap_update_adv_data>
 80167c2:	4603      	mov	r3, r0
 80167c4:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 80167c6:	bf00      	nop
}
 80167c8:	3710      	adds	r7, #16
 80167ca:	46bd      	mov	sp, r7
 80167cc:	bd80      	pop	{r7, pc}
 80167ce:	bf00      	nop
 80167d0:	20000ccc 	.word	0x20000ccc
 80167d4:	20000094 	.word	0x20000094

080167d8 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 80167d8:	b580      	push	{r7, lr}
 80167da:	b086      	sub	sp, #24
 80167dc:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80167de:	f7ff fda7 	bl	8016330 <LL_FLASH_GetUDN>
 80167e2:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80167e4:	693b      	ldr	r3, [r7, #16]
 80167e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167ea:	d023      	beq.n	8016834 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80167ec:	f7ff fdb8 	bl	8016360 <LL_FLASH_GetSTCompanyID>
 80167f0:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80167f2:	f7ff fda9 	bl	8016348 <LL_FLASH_GetDeviceID>
 80167f6:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80167f8:	693b      	ldr	r3, [r7, #16]
 80167fa:	b2da      	uxtb	r2, r3
 80167fc:	4b16      	ldr	r3, [pc, #88]	@ (8016858 <BleGetBdAddress+0x80>)
 80167fe:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8016800:	693b      	ldr	r3, [r7, #16]
 8016802:	0a1b      	lsrs	r3, r3, #8
 8016804:	b2da      	uxtb	r2, r3
 8016806:	4b14      	ldr	r3, [pc, #80]	@ (8016858 <BleGetBdAddress+0x80>)
 8016808:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	b2da      	uxtb	r2, r3
 801680e:	4b12      	ldr	r3, [pc, #72]	@ (8016858 <BleGetBdAddress+0x80>)
 8016810:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8016812:	68bb      	ldr	r3, [r7, #8]
 8016814:	b2da      	uxtb	r2, r3
 8016816:	4b10      	ldr	r3, [pc, #64]	@ (8016858 <BleGetBdAddress+0x80>)
 8016818:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 801681a:	68bb      	ldr	r3, [r7, #8]
 801681c:	0a1b      	lsrs	r3, r3, #8
 801681e:	b2da      	uxtb	r2, r3
 8016820:	4b0d      	ldr	r3, [pc, #52]	@ (8016858 <BleGetBdAddress+0x80>)
 8016822:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8016824:	68bb      	ldr	r3, [r7, #8]
 8016826:	0c1b      	lsrs	r3, r3, #16
 8016828:	b2da      	uxtb	r2, r3
 801682a:	4b0b      	ldr	r3, [pc, #44]	@ (8016858 <BleGetBdAddress+0x80>)
 801682c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 801682e:	4b0a      	ldr	r3, [pc, #40]	@ (8016858 <BleGetBdAddress+0x80>)
 8016830:	617b      	str	r3, [r7, #20]
 8016832:	e00b      	b.n	801684c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8016834:	2000      	movs	r0, #0
 8016836:	f7ff fc95 	bl	8016164 <OTP_Read>
 801683a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 801683c:	68fb      	ldr	r3, [r7, #12]
 801683e:	2b00      	cmp	r3, #0
 8016840:	d002      	beq.n	8016848 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	617b      	str	r3, [r7, #20]
 8016846:	e001      	b.n	801684c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8016848:	4b04      	ldr	r3, [pc, #16]	@ (801685c <BleGetBdAddress+0x84>)
 801684a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 801684c:	697b      	ldr	r3, [r7, #20]
}
 801684e:	4618      	mov	r0, r3
 8016850:	3718      	adds	r7, #24
 8016852:	46bd      	mov	sp, r7
 8016854:	bd80      	pop	{r7, pc}
 8016856:	bf00      	nop
 8016858:	20000cc4 	.word	0x20000cc4
 801685c:	0801d940 	.word	0x0801d940

08016860 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8016860:	b580      	push	{r7, lr}
 8016862:	b082      	sub	sp, #8
 8016864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8016866:	4b0a      	ldr	r3, [pc, #40]	@ (8016890 <Adv_Cancel+0x30>)
 8016868:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 801686c:	2b05      	cmp	r3, #5
 801686e:	d00a      	beq.n	8016886 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8016870:	2392      	movs	r3, #146	@ 0x92
 8016872:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8016874:	f7fd fc02 	bl	801407c <aci_gap_set_non_discoverable>
 8016878:	4603      	mov	r3, r0
 801687a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 801687c:	4b04      	ldr	r3, [pc, #16]	@ (8016890 <Adv_Cancel+0x30>)
 801687e:	2200      	movs	r2, #0
 8016880:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8016884:	bf00      	nop
 8016886:	bf00      	nop
}
 8016888:	3708      	adds	r7, #8
 801688a:	46bd      	mov	sp, r7
 801688c:	bd80      	pop	{r7, pc}
 801688e:	bf00      	nop
 8016890:	20000ccc 	.word	0x20000ccc

08016894 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8016894:	b580      	push	{r7, lr}
 8016896:	b082      	sub	sp, #8
 8016898:	af00      	add	r7, sp, #0
 801689a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 801689c:	2100      	movs	r1, #0
 801689e:	2002      	movs	r0, #2
 80168a0:	f002 fd7c 	bl	801939c <UTIL_SEQ_SetTask>

  return;
 80168a4:	bf00      	nop
}
 80168a6:	3708      	adds	r7, #8
 80168a8:	46bd      	mov	sp, r7
 80168aa:	bd80      	pop	{r7, pc}

080168ac <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80168ac:	b580      	push	{r7, lr}
 80168ae:	b082      	sub	sp, #8
 80168b0:	af00      	add	r7, sp, #0
 80168b2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80168b4:	2001      	movs	r0, #1
 80168b6:	f002 fddd 	bl	8019474 <UTIL_SEQ_SetEvt>

  return;
 80168ba:	bf00      	nop
}
 80168bc:	3708      	adds	r7, #8
 80168be:	46bd      	mov	sp, r7
 80168c0:	bd80      	pop	{r7, pc}

080168c2 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80168c2:	b580      	push	{r7, lr}
 80168c4:	b082      	sub	sp, #8
 80168c6:	af00      	add	r7, sp, #0
 80168c8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80168ca:	2001      	movs	r0, #1
 80168cc:	f002 fdf2 	bl	80194b4 <UTIL_SEQ_WaitEvt>

  return;
 80168d0:	bf00      	nop
}
 80168d2:	3708      	adds	r7, #8
 80168d4:	46bd      	mov	sp, r7
 80168d6:	bd80      	pop	{r7, pc}

080168d8 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80168d8:	b580      	push	{r7, lr}
 80168da:	b084      	sub	sp, #16
 80168dc:	af00      	add	r7, sp, #0
 80168de:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	685b      	ldr	r3, [r3, #4]
 80168e8:	3308      	adds	r3, #8
 80168ea:	4618      	mov	r0, r3
 80168ec:	f7fe fdd8 	bl	80154a0 <SVCCTL_UserEvtRx>
 80168f0:	4603      	mov	r3, r0
 80168f2:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80168f4:	7afb      	ldrb	r3, [r7, #11]
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d003      	beq.n	8016902 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 80168fa:	68fb      	ldr	r3, [r7, #12]
 80168fc:	2201      	movs	r2, #1
 80168fe:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8016900:	e003      	b.n	801690a <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8016902:	68fb      	ldr	r3, [r7, #12]
 8016904:	2200      	movs	r2, #0
 8016906:	701a      	strb	r2, [r3, #0]
  return;
 8016908:	bf00      	nop
}
 801690a:	3710      	adds	r7, #16
 801690c:	46bd      	mov	sp, r7
 801690e:	bd80      	pop	{r7, pc}

08016910 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8016910:	b580      	push	{r7, lr}
 8016912:	b084      	sub	sp, #16
 8016914:	af00      	add	r7, sp, #0
 8016916:	4603      	mov	r3, r0
 8016918:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 801691a:	79fb      	ldrb	r3, [r7, #7]
 801691c:	2b00      	cmp	r3, #0
 801691e:	d002      	beq.n	8016926 <BLE_StatusNot+0x16>
 8016920:	2b01      	cmp	r3, #1
 8016922:	d006      	beq.n	8016932 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8016924:	e00b      	b.n	801693e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8016926:	2307      	movs	r3, #7
 8016928:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 801692a:	68f8      	ldr	r0, [r7, #12]
 801692c:	f002 fd62 	bl	80193f4 <UTIL_SEQ_PauseTask>
      break;
 8016930:	e005      	b.n	801693e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8016932:	2307      	movs	r3, #7
 8016934:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8016936:	68f8      	ldr	r0, [r7, #12]
 8016938:	f002 fd7c 	bl	8019434 <UTIL_SEQ_ResumeTask>
      break;
 801693c:	bf00      	nop
  }

  return;
 801693e:	bf00      	nop
}
 8016940:	3710      	adds	r7, #16
 8016942:	46bd      	mov	sp, r7
 8016944:	bd80      	pop	{r7, pc}
	...

08016948 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8016948:	b480      	push	{r7}
 801694a:	b083      	sub	sp, #12
 801694c:	af00      	add	r7, sp, #0
 801694e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	781b      	ldrb	r3, [r3, #0]
 8016954:	2b07      	cmp	r3, #7
 8016956:	d813      	bhi.n	8016980 <Custom_STM_App_Notification+0x38>
 8016958:	a201      	add	r2, pc, #4	@ (adr r2, 8016960 <Custom_STM_App_Notification+0x18>)
 801695a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801695e:	bf00      	nop
 8016960:	08016981 	.word	0x08016981
 8016964:	08016981 	.word	0x08016981
 8016968:	08016981 	.word	0x08016981
 801696c:	08016981 	.word	0x08016981
 8016970:	08016981 	.word	0x08016981
 8016974:	08016981 	.word	0x08016981
 8016978:	08016981 	.word	0x08016981
 801697c:	08016981 	.word	0x08016981

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8016980:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8016982:	bf00      	nop
}
 8016984:	370c      	adds	r7, #12
 8016986:	46bd      	mov	sp, r7
 8016988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801698c:	4770      	bx	lr
 801698e:	bf00      	nop

08016990 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8016990:	b480      	push	{r7}
 8016992:	b083      	sub	sp, #12
 8016994:	af00      	add	r7, sp, #0
 8016996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	781b      	ldrb	r3, [r3, #0]
 801699c:	2b00      	cmp	r3, #0
 801699e:	d002      	beq.n	80169a6 <Custom_APP_Notification+0x16>
 80169a0:	2b01      	cmp	r3, #1
 80169a2:	d002      	beq.n	80169aa <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 80169a4:	e002      	b.n	80169ac <Custom_APP_Notification+0x1c>
      break;
 80169a6:	bf00      	nop
 80169a8:	e000      	b.n	80169ac <Custom_APP_Notification+0x1c>
      break;
 80169aa:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 80169ac:	bf00      	nop
}
 80169ae:	370c      	adds	r7, #12
 80169b0:	46bd      	mov	sp, r7
 80169b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169b6:	4770      	bx	lr

080169b8 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 80169b8:	b480      	push	{r7}
 80169ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 80169bc:	bf00      	nop
}
 80169be:	46bd      	mov	sp, r7
 80169c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c4:	4770      	bx	lr
	...

080169c8 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 80169c8:	b580      	push	{r7, lr}
 80169ca:	b08c      	sub	sp, #48	@ 0x30
 80169cc:	af00      	add	r7, sp, #0
 80169ce:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 80169d0:	2300      	movs	r3, #0
 80169d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	3301      	adds	r3, #1
 80169da:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 80169dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80169de:	781b      	ldrb	r3, [r3, #0]
 80169e0:	2bff      	cmp	r3, #255	@ 0xff
 80169e2:	f040 80bc 	bne.w	8016b5e <Custom_STM_Event_Handler+0x196>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80169e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80169e8:	3302      	adds	r3, #2
 80169ea:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 80169ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169ee:	881b      	ldrh	r3, [r3, #0]
 80169f0:	b29b      	uxth	r3, r3
 80169f2:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 80169f6:	2b1a      	cmp	r3, #26
 80169f8:	f200 80ad 	bhi.w	8016b56 <Custom_STM_Event_Handler+0x18e>
 80169fc:	a201      	add	r2, pc, #4	@ (adr r2, 8016a04 <Custom_STM_Event_Handler+0x3c>)
 80169fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a02:	bf00      	nop
 8016a04:	08016a71 	.word	0x08016a71
 8016a08:	08016b57 	.word	0x08016b57
 8016a0c:	08016b57 	.word	0x08016b57
 8016a10:	08016b57 	.word	0x08016b57
 8016a14:	08016b57 	.word	0x08016b57
 8016a18:	08016b57 	.word	0x08016b57
 8016a1c:	08016b57 	.word	0x08016b57
 8016a20:	08016b57 	.word	0x08016b57
 8016a24:	08016b57 	.word	0x08016b57
 8016a28:	08016b57 	.word	0x08016b57
 8016a2c:	08016b57 	.word	0x08016b57
 8016a30:	08016b57 	.word	0x08016b57
 8016a34:	08016b57 	.word	0x08016b57
 8016a38:	08016b57 	.word	0x08016b57
 8016a3c:	08016b57 	.word	0x08016b57
 8016a40:	08016b57 	.word	0x08016b57
 8016a44:	08016b57 	.word	0x08016b57
 8016a48:	08016b57 	.word	0x08016b57
 8016a4c:	08016b57 	.word	0x08016b57
 8016a50:	08016b57 	.word	0x08016b57
 8016a54:	08016b57 	.word	0x08016b57
 8016a58:	08016b57 	.word	0x08016b57
 8016a5c:	08016b57 	.word	0x08016b57
 8016a60:	08016b57 	.word	0x08016b57
 8016a64:	08016b57 	.word	0x08016b57
 8016a68:	08016b57 	.word	0x08016b57
 8016a6c:	08016b39 	.word	0x08016b39
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8016a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a72:	3302      	adds	r3, #2
 8016a74:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomSwitch_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8016a76:	69fb      	ldr	r3, [r7, #28]
 8016a78:	885b      	ldrh	r3, [r3, #2]
 8016a7a:	b29b      	uxth	r3, r3
 8016a7c:	461a      	mov	r2, r3
 8016a7e:	4b3b      	ldr	r3, [pc, #236]	@ (8016b6c <Custom_STM_Event_Handler+0x1a4>)
 8016a80:	889b      	ldrh	r3, [r3, #4]
 8016a82:	3302      	adds	r3, #2
 8016a84:	429a      	cmp	r2, r3
 8016a86:	d119      	bne.n	8016abc <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8016a88:	2301      	movs	r3, #1
 8016a8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 8016a8e:	69fb      	ldr	r3, [r7, #28]
 8016a90:	7a1b      	ldrb	r3, [r3, #8]
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	d002      	beq.n	8016a9c <Custom_STM_Event_Handler+0xd4>
 8016a96:	2b01      	cmp	r3, #1
 8016a98:	d008      	beq.n	8016aac <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 8016a9a:	e04c      	b.n	8016b36 <Custom_STM_Event_Handler+0x16e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT;
 8016a9c:	2303      	movs	r3, #3
 8016a9e:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8016aa0:	f107 0308 	add.w	r3, r7, #8
 8016aa4:	4618      	mov	r0, r3
 8016aa6:	f7ff ff4f 	bl	8016948 <Custom_STM_App_Notification>
                break;
 8016aaa:	e044      	b.n	8016b36 <Custom_STM_Event_Handler+0x16e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT;
 8016aac:	2302      	movs	r3, #2
 8016aae:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8016ab0:	f107 0308 	add.w	r3, r7, #8
 8016ab4:	4618      	mov	r0, r3
 8016ab6:	f7ff ff47 	bl	8016948 <Custom_STM_App_Notification>
                break;
 8016aba:	e03c      	b.n	8016b36 <Custom_STM_Event_Handler+0x16e>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomSwitch_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomDelta_T_ChHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8016abc:	69fb      	ldr	r3, [r7, #28]
 8016abe:	885b      	ldrh	r3, [r3, #2]
 8016ac0:	b29b      	uxth	r3, r3
 8016ac2:	461a      	mov	r2, r3
 8016ac4:	4b29      	ldr	r3, [pc, #164]	@ (8016b6c <Custom_STM_Event_Handler+0x1a4>)
 8016ac6:	891b      	ldrh	r3, [r3, #8]
 8016ac8:	3302      	adds	r3, #2
 8016aca:	429a      	cmp	r2, r3
 8016acc:	d119      	bne.n	8016b02 <Custom_STM_Event_Handler+0x13a>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8016ace:	2301      	movs	r3, #1
 8016ad0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_4 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_4 */
            switch (attribute_modified->Attr_Data[0])
 8016ad4:	69fb      	ldr	r3, [r7, #28]
 8016ad6:	7a1b      	ldrb	r3, [r3, #8]
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d002      	beq.n	8016ae2 <Custom_STM_Event_Handler+0x11a>
 8016adc:	2b01      	cmp	r3, #1
 8016ade:	d008      	beq.n	8016af2 <Custom_STM_Event_Handler+0x12a>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_4_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_4_default */
              break;
 8016ae0:	e029      	b.n	8016b36 <Custom_STM_Event_Handler+0x16e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_DELTA_T_CH_NOTIFY_DISABLED_EVT;
 8016ae2:	2306      	movs	r3, #6
 8016ae4:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8016ae6:	f107 0308 	add.w	r3, r7, #8
 8016aea:	4618      	mov	r0, r3
 8016aec:	f7ff ff2c 	bl	8016948 <Custom_STM_App_Notification>
                break;
 8016af0:	e021      	b.n	8016b36 <Custom_STM_Event_Handler+0x16e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_DELTA_T_CH_NOTIFY_ENABLED_EVT;
 8016af2:	2305      	movs	r3, #5
 8016af4:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8016af6:	f107 0308 	add.w	r3, r7, #8
 8016afa:	4618      	mov	r0, r3
 8016afc:	f7ff ff24 	bl	8016948 <Custom_STM_App_Notification>
                break;
 8016b00:	e019      	b.n	8016b36 <Custom_STM_Event_Handler+0x16e>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomDelta_T_ChHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomLed_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8016b02:	69fb      	ldr	r3, [r7, #28]
 8016b04:	885b      	ldrh	r3, [r3, #2]
 8016b06:	b29b      	uxth	r3, r3
 8016b08:	461a      	mov	r2, r3
 8016b0a:	4b18      	ldr	r3, [pc, #96]	@ (8016b6c <Custom_STM_Event_Handler+0x1a4>)
 8016b0c:	885b      	ldrh	r3, [r3, #2]
 8016b0e:	3301      	adds	r3, #1
 8016b10:	429a      	cmp	r2, r3
 8016b12:	d103      	bne.n	8016b1c <Custom_STM_Event_Handler+0x154>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8016b14:	2301      	movs	r3, #1
 8016b16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE END CUSTOM_STM_Service_1_Char_3_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomReboot_Request_ChHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 8016b1a:	e01e      	b.n	8016b5a <Custom_STM_Event_Handler+0x192>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomReboot_Request_ChHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8016b1c:	69fb      	ldr	r3, [r7, #28]
 8016b1e:	885b      	ldrh	r3, [r3, #2]
 8016b20:	b29b      	uxth	r3, r3
 8016b22:	461a      	mov	r2, r3
 8016b24:	4b11      	ldr	r3, [pc, #68]	@ (8016b6c <Custom_STM_Event_Handler+0x1a4>)
 8016b26:	88db      	ldrh	r3, [r3, #6]
 8016b28:	3301      	adds	r3, #1
 8016b2a:	429a      	cmp	r2, r3
 8016b2c:	d115      	bne.n	8016b5a <Custom_STM_Event_Handler+0x192>
            return_value = SVCCTL_EvtAckFlowEnable;
 8016b2e:	2301      	movs	r3, #1
 8016b30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8016b34:	e011      	b.n	8016b5a <Custom_STM_Event_Handler+0x192>
 8016b36:	e010      	b.n	8016b5a <Custom_STM_Event_Handler+0x192>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 8016b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b3a:	3302      	adds	r3, #2
 8016b3c:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8016b3e:	2307      	movs	r3, #7
 8016b40:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8016b42:	6a3b      	ldr	r3, [r7, #32]
 8016b44:	881b      	ldrh	r3, [r3, #0]
 8016b46:	b29b      	uxth	r3, r3
 8016b48:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 8016b4a:	f107 0308 	add.w	r3, r7, #8
 8016b4e:	4618      	mov	r0, r3
 8016b50:	f7ff fefa 	bl	8016948 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8016b54:	e002      	b.n	8016b5c <Custom_STM_Event_Handler+0x194>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8016b56:	bf00      	nop
 8016b58:	e002      	b.n	8016b60 <Custom_STM_Event_Handler+0x198>
          break;
 8016b5a:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8016b5c:	e000      	b.n	8016b60 <Custom_STM_Event_Handler+0x198>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8016b5e:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8016b60:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 8016b64:	4618      	mov	r0, r3
 8016b66:	3730      	adds	r7, #48	@ 0x30
 8016b68:	46bd      	mov	sp, r7
 8016b6a:	bd80      	pop	{r7, pc}
 8016b6c:	20000d54 	.word	0x20000d54

08016b70 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8016b70:	b580      	push	{r7, lr}
 8016b72:	b08c      	sub	sp, #48	@ 0x30
 8016b74:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8016b76:	2392      	movs	r3, #146	@ 0x92
 8016b78:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8016b7a:	4885      	ldr	r0, [pc, #532]	@ (8016d90 <SVCCTL_InitCustomSvc+0x220>)
 8016b7c:	f7fe fc76 	bl	801546c <SVCCTL_RegisterSvcHandler>
   *                              = 12
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 12;
 8016b80:	230c      	movs	r3, #12
 8016b82:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService1 */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService1 */

  COPY_MY_P2P_SERVER_UUID(uuid.Char_UUID_128);
 8016b84:	238f      	movs	r3, #143	@ 0x8f
 8016b86:	713b      	strb	r3, [r7, #4]
 8016b88:	23e5      	movs	r3, #229	@ 0xe5
 8016b8a:	717b      	strb	r3, [r7, #5]
 8016b8c:	23b3      	movs	r3, #179	@ 0xb3
 8016b8e:	71bb      	strb	r3, [r7, #6]
 8016b90:	23d5      	movs	r3, #213	@ 0xd5
 8016b92:	71fb      	strb	r3, [r7, #7]
 8016b94:	232e      	movs	r3, #46	@ 0x2e
 8016b96:	723b      	strb	r3, [r7, #8]
 8016b98:	237f      	movs	r3, #127	@ 0x7f
 8016b9a:	727b      	strb	r3, [r7, #9]
 8016b9c:	234a      	movs	r3, #74	@ 0x4a
 8016b9e:	72bb      	strb	r3, [r7, #10]
 8016ba0:	2398      	movs	r3, #152	@ 0x98
 8016ba2:	72fb      	strb	r3, [r7, #11]
 8016ba4:	232a      	movs	r3, #42	@ 0x2a
 8016ba6:	733b      	strb	r3, [r7, #12]
 8016ba8:	2348      	movs	r3, #72	@ 0x48
 8016baa:	737b      	strb	r3, [r7, #13]
 8016bac:	237a      	movs	r3, #122	@ 0x7a
 8016bae:	73bb      	strb	r3, [r7, #14]
 8016bb0:	23cc      	movs	r3, #204	@ 0xcc
 8016bb2:	73fb      	strb	r3, [r7, #15]
 8016bb4:	2340      	movs	r3, #64	@ 0x40
 8016bb6:	743b      	strb	r3, [r7, #16]
 8016bb8:	23fe      	movs	r3, #254	@ 0xfe
 8016bba:	747b      	strb	r3, [r7, #17]
 8016bbc:	2300      	movs	r3, #0
 8016bbe:	74bb      	strb	r3, [r7, #18]
 8016bc0:	2300      	movs	r3, #0
 8016bc2:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8016bc4:	7dbb      	ldrb	r3, [r7, #22]
 8016bc6:	1d39      	adds	r1, r7, #4
 8016bc8:	4a72      	ldr	r2, [pc, #456]	@ (8016d94 <SVCCTL_InitCustomSvc+0x224>)
 8016bca:	9200      	str	r2, [sp, #0]
 8016bcc:	2201      	movs	r2, #1
 8016bce:	2002      	movs	r0, #2
 8016bd0:	f7fd fec0 	bl	8014954 <aci_gatt_add_service>
 8016bd4:	4603      	mov	r3, r0
 8016bd6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  My_LED_Char
   */
  COPY_MY_LED_CHAR_UUID(uuid.Char_UUID_128);
 8016bd8:	2319      	movs	r3, #25
 8016bda:	713b      	strb	r3, [r7, #4]
 8016bdc:	23ed      	movs	r3, #237	@ 0xed
 8016bde:	717b      	strb	r3, [r7, #5]
 8016be0:	2382      	movs	r3, #130	@ 0x82
 8016be2:	71bb      	strb	r3, [r7, #6]
 8016be4:	23ae      	movs	r3, #174	@ 0xae
 8016be6:	71fb      	strb	r3, [r7, #7]
 8016be8:	23ed      	movs	r3, #237	@ 0xed
 8016bea:	723b      	strb	r3, [r7, #8]
 8016bec:	2321      	movs	r3, #33	@ 0x21
 8016bee:	727b      	strb	r3, [r7, #9]
 8016bf0:	234c      	movs	r3, #76	@ 0x4c
 8016bf2:	72bb      	strb	r3, [r7, #10]
 8016bf4:	239d      	movs	r3, #157	@ 0x9d
 8016bf6:	72fb      	strb	r3, [r7, #11]
 8016bf8:	2341      	movs	r3, #65	@ 0x41
 8016bfa:	733b      	strb	r3, [r7, #12]
 8016bfc:	2345      	movs	r3, #69	@ 0x45
 8016bfe:	737b      	strb	r3, [r7, #13]
 8016c00:	2322      	movs	r3, #34	@ 0x22
 8016c02:	73bb      	strb	r3, [r7, #14]
 8016c04:	238e      	movs	r3, #142	@ 0x8e
 8016c06:	73fb      	strb	r3, [r7, #15]
 8016c08:	2341      	movs	r3, #65	@ 0x41
 8016c0a:	743b      	strb	r3, [r7, #16]
 8016c0c:	23fe      	movs	r3, #254	@ 0xfe
 8016c0e:	747b      	strb	r3, [r7, #17]
 8016c10:	2300      	movs	r3, #0
 8016c12:	74bb      	strb	r3, [r7, #18]
 8016c14:	2300      	movs	r3, #0
 8016c16:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomP2PsHdle,
 8016c18:	4b5e      	ldr	r3, [pc, #376]	@ (8016d94 <SVCCTL_InitCustomSvc+0x224>)
 8016c1a:	8818      	ldrh	r0, [r3, #0]
 8016c1c:	4b5e      	ldr	r3, [pc, #376]	@ (8016d98 <SVCCTL_InitCustomSvc+0x228>)
 8016c1e:	881b      	ldrh	r3, [r3, #0]
 8016c20:	1d3a      	adds	r2, r7, #4
 8016c22:	495e      	ldr	r1, [pc, #376]	@ (8016d9c <SVCCTL_InitCustomSvc+0x22c>)
 8016c24:	9105      	str	r1, [sp, #20]
 8016c26:	2101      	movs	r1, #1
 8016c28:	9104      	str	r1, [sp, #16]
 8016c2a:	2110      	movs	r1, #16
 8016c2c:	9103      	str	r1, [sp, #12]
 8016c2e:	2101      	movs	r1, #1
 8016c30:	9102      	str	r1, [sp, #8]
 8016c32:	2100      	movs	r1, #0
 8016c34:	9101      	str	r1, [sp, #4]
 8016c36:	2106      	movs	r1, #6
 8016c38:	9100      	str	r1, [sp, #0]
 8016c3a:	2102      	movs	r1, #2
 8016c3c:	f7fd ff60 	bl	8014b00 <aci_gatt_add_char>
 8016c40:	4603      	mov	r3, r0
 8016c42:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  My_Switch_Char
   */
  COPY_MY_SWITCH_CHAR_UUID(uuid.Char_UUID_128);
 8016c44:	2319      	movs	r3, #25
 8016c46:	713b      	strb	r3, [r7, #4]
 8016c48:	23ed      	movs	r3, #237	@ 0xed
 8016c4a:	717b      	strb	r3, [r7, #5]
 8016c4c:	2382      	movs	r3, #130	@ 0x82
 8016c4e:	71bb      	strb	r3, [r7, #6]
 8016c50:	23ae      	movs	r3, #174	@ 0xae
 8016c52:	71fb      	strb	r3, [r7, #7]
 8016c54:	23ed      	movs	r3, #237	@ 0xed
 8016c56:	723b      	strb	r3, [r7, #8]
 8016c58:	2321      	movs	r3, #33	@ 0x21
 8016c5a:	727b      	strb	r3, [r7, #9]
 8016c5c:	234c      	movs	r3, #76	@ 0x4c
 8016c5e:	72bb      	strb	r3, [r7, #10]
 8016c60:	239d      	movs	r3, #157	@ 0x9d
 8016c62:	72fb      	strb	r3, [r7, #11]
 8016c64:	2341      	movs	r3, #65	@ 0x41
 8016c66:	733b      	strb	r3, [r7, #12]
 8016c68:	2345      	movs	r3, #69	@ 0x45
 8016c6a:	737b      	strb	r3, [r7, #13]
 8016c6c:	2322      	movs	r3, #34	@ 0x22
 8016c6e:	73bb      	strb	r3, [r7, #14]
 8016c70:	238e      	movs	r3, #142	@ 0x8e
 8016c72:	73fb      	strb	r3, [r7, #15]
 8016c74:	2342      	movs	r3, #66	@ 0x42
 8016c76:	743b      	strb	r3, [r7, #16]
 8016c78:	23fe      	movs	r3, #254	@ 0xfe
 8016c7a:	747b      	strb	r3, [r7, #17]
 8016c7c:	2300      	movs	r3, #0
 8016c7e:	74bb      	strb	r3, [r7, #18]
 8016c80:	2300      	movs	r3, #0
 8016c82:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomP2PsHdle,
 8016c84:	4b43      	ldr	r3, [pc, #268]	@ (8016d94 <SVCCTL_InitCustomSvc+0x224>)
 8016c86:	8818      	ldrh	r0, [r3, #0]
 8016c88:	4b45      	ldr	r3, [pc, #276]	@ (8016da0 <SVCCTL_InitCustomSvc+0x230>)
 8016c8a:	881b      	ldrh	r3, [r3, #0]
 8016c8c:	1d3a      	adds	r2, r7, #4
 8016c8e:	4945      	ldr	r1, [pc, #276]	@ (8016da4 <SVCCTL_InitCustomSvc+0x234>)
 8016c90:	9105      	str	r1, [sp, #20]
 8016c92:	2101      	movs	r1, #1
 8016c94:	9104      	str	r1, [sp, #16]
 8016c96:	2110      	movs	r1, #16
 8016c98:	9103      	str	r1, [sp, #12]
 8016c9a:	2101      	movs	r1, #1
 8016c9c:	9102      	str	r1, [sp, #8]
 8016c9e:	2100      	movs	r1, #0
 8016ca0:	9101      	str	r1, [sp, #4]
 8016ca2:	2110      	movs	r1, #16
 8016ca4:	9100      	str	r1, [sp, #0]
 8016ca6:	2102      	movs	r1, #2
 8016ca8:	f7fd ff2a 	bl	8014b00 <aci_gatt_add_char>
 8016cac:	4603      	mov	r3, r0
 8016cae:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char2 */
  /**
   *  REBOOT_REQUEST_CHAR
   */
  COPY_REBOOT_REQUEST_CHAR_UUID(uuid.Char_UUID_128);
 8016cb0:	2319      	movs	r3, #25
 8016cb2:	713b      	strb	r3, [r7, #4]
 8016cb4:	23ed      	movs	r3, #237	@ 0xed
 8016cb6:	717b      	strb	r3, [r7, #5]
 8016cb8:	2382      	movs	r3, #130	@ 0x82
 8016cba:	71bb      	strb	r3, [r7, #6]
 8016cbc:	23ae      	movs	r3, #174	@ 0xae
 8016cbe:	71fb      	strb	r3, [r7, #7]
 8016cc0:	23ed      	movs	r3, #237	@ 0xed
 8016cc2:	723b      	strb	r3, [r7, #8]
 8016cc4:	2321      	movs	r3, #33	@ 0x21
 8016cc6:	727b      	strb	r3, [r7, #9]
 8016cc8:	234c      	movs	r3, #76	@ 0x4c
 8016cca:	72bb      	strb	r3, [r7, #10]
 8016ccc:	239d      	movs	r3, #157	@ 0x9d
 8016cce:	72fb      	strb	r3, [r7, #11]
 8016cd0:	2341      	movs	r3, #65	@ 0x41
 8016cd2:	733b      	strb	r3, [r7, #12]
 8016cd4:	2345      	movs	r3, #69	@ 0x45
 8016cd6:	737b      	strb	r3, [r7, #13]
 8016cd8:	2322      	movs	r3, #34	@ 0x22
 8016cda:	73bb      	strb	r3, [r7, #14]
 8016cdc:	238e      	movs	r3, #142	@ 0x8e
 8016cde:	73fb      	strb	r3, [r7, #15]
 8016ce0:	2311      	movs	r3, #17
 8016ce2:	743b      	strb	r3, [r7, #16]
 8016ce4:	23fe      	movs	r3, #254	@ 0xfe
 8016ce6:	747b      	strb	r3, [r7, #17]
 8016ce8:	2300      	movs	r3, #0
 8016cea:	74bb      	strb	r3, [r7, #18]
 8016cec:	2300      	movs	r3, #0
 8016cee:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomP2PsHdle,
 8016cf0:	4b28      	ldr	r3, [pc, #160]	@ (8016d94 <SVCCTL_InitCustomSvc+0x224>)
 8016cf2:	8818      	ldrh	r0, [r3, #0]
 8016cf4:	4b2c      	ldr	r3, [pc, #176]	@ (8016da8 <SVCCTL_InitCustomSvc+0x238>)
 8016cf6:	881b      	ldrh	r3, [r3, #0]
 8016cf8:	1d3a      	adds	r2, r7, #4
 8016cfa:	492c      	ldr	r1, [pc, #176]	@ (8016dac <SVCCTL_InitCustomSvc+0x23c>)
 8016cfc:	9105      	str	r1, [sp, #20]
 8016cfe:	2101      	movs	r1, #1
 8016d00:	9104      	str	r1, [sp, #16]
 8016d02:	2110      	movs	r1, #16
 8016d04:	9103      	str	r1, [sp, #12]
 8016d06:	2101      	movs	r1, #1
 8016d08:	9102      	str	r1, [sp, #8]
 8016d0a:	2100      	movs	r1, #0
 8016d0c:	9101      	str	r1, [sp, #4]
 8016d0e:	2104      	movs	r1, #4
 8016d10:	9100      	str	r1, [sp, #0]
 8016d12:	2102      	movs	r1, #2
 8016d14:	f7fd fef4 	bl	8014b00 <aci_gatt_add_char>
 8016d18:	4603      	mov	r3, r0
 8016d1a:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char3 */
  /**
   *  DELTA_T_CHAR
   */
  COPY_DELTA_T_CHAR_UUID(uuid.Char_UUID_128);
 8016d1c:	2319      	movs	r3, #25
 8016d1e:	713b      	strb	r3, [r7, #4]
 8016d20:	23ed      	movs	r3, #237	@ 0xed
 8016d22:	717b      	strb	r3, [r7, #5]
 8016d24:	2382      	movs	r3, #130	@ 0x82
 8016d26:	71bb      	strb	r3, [r7, #6]
 8016d28:	23ae      	movs	r3, #174	@ 0xae
 8016d2a:	71fb      	strb	r3, [r7, #7]
 8016d2c:	23ed      	movs	r3, #237	@ 0xed
 8016d2e:	723b      	strb	r3, [r7, #8]
 8016d30:	2321      	movs	r3, #33	@ 0x21
 8016d32:	727b      	strb	r3, [r7, #9]
 8016d34:	234c      	movs	r3, #76	@ 0x4c
 8016d36:	72bb      	strb	r3, [r7, #10]
 8016d38:	239d      	movs	r3, #157	@ 0x9d
 8016d3a:	72fb      	strb	r3, [r7, #11]
 8016d3c:	2341      	movs	r3, #65	@ 0x41
 8016d3e:	733b      	strb	r3, [r7, #12]
 8016d40:	2345      	movs	r3, #69	@ 0x45
 8016d42:	737b      	strb	r3, [r7, #13]
 8016d44:	2322      	movs	r3, #34	@ 0x22
 8016d46:	73bb      	strb	r3, [r7, #14]
 8016d48:	238e      	movs	r3, #142	@ 0x8e
 8016d4a:	73fb      	strb	r3, [r7, #15]
 8016d4c:	2343      	movs	r3, #67	@ 0x43
 8016d4e:	743b      	strb	r3, [r7, #16]
 8016d50:	23fe      	movs	r3, #254	@ 0xfe
 8016d52:	747b      	strb	r3, [r7, #17]
 8016d54:	2300      	movs	r3, #0
 8016d56:	74bb      	strb	r3, [r7, #18]
 8016d58:	2300      	movs	r3, #0
 8016d5a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomP2PsHdle,
 8016d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8016d94 <SVCCTL_InitCustomSvc+0x224>)
 8016d5e:	8818      	ldrh	r0, [r3, #0]
 8016d60:	4b13      	ldr	r3, [pc, #76]	@ (8016db0 <SVCCTL_InitCustomSvc+0x240>)
 8016d62:	881b      	ldrh	r3, [r3, #0]
 8016d64:	1d3a      	adds	r2, r7, #4
 8016d66:	4913      	ldr	r1, [pc, #76]	@ (8016db4 <SVCCTL_InitCustomSvc+0x244>)
 8016d68:	9105      	str	r1, [sp, #20]
 8016d6a:	2101      	movs	r1, #1
 8016d6c:	9104      	str	r1, [sp, #16]
 8016d6e:	2110      	movs	r1, #16
 8016d70:	9103      	str	r1, [sp, #12]
 8016d72:	2100      	movs	r1, #0
 8016d74:	9102      	str	r1, [sp, #8]
 8016d76:	2100      	movs	r1, #0
 8016d78:	9101      	str	r1, [sp, #4]
 8016d7a:	2111      	movs	r1, #17
 8016d7c:	9100      	str	r1, [sp, #0]
 8016d7e:	2102      	movs	r1, #2
 8016d80:	f7fd febe 	bl	8014b00 <aci_gatt_add_char>
 8016d84:	4603      	mov	r3, r0
 8016d86:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8016d88:	bf00      	nop
}
 8016d8a:	3718      	adds	r7, #24
 8016d8c:	46bd      	mov	sp, r7
 8016d8e:	bd80      	pop	{r7, pc}
 8016d90:	080169c9 	.word	0x080169c9
 8016d94:	20000d54 	.word	0x20000d54
 8016d98:	200000a4 	.word	0x200000a4
 8016d9c:	20000d56 	.word	0x20000d56
 8016da0:	200000a6 	.word	0x200000a6
 8016da4:	20000d58 	.word	0x20000d58
 8016da8:	200000a8 	.word	0x200000a8
 8016dac:	20000d5a 	.word	0x20000d5a
 8016db0:	200000aa 	.word	0x200000aa
 8016db4:	20000d5c 	.word	0x20000d5c

08016db8 <LL_PWR_EnableBootC2>:
{
 8016db8:	b480      	push	{r7}
 8016dba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8016dbc:	4b05      	ldr	r3, [pc, #20]	@ (8016dd4 <LL_PWR_EnableBootC2+0x1c>)
 8016dbe:	68db      	ldr	r3, [r3, #12]
 8016dc0:	4a04      	ldr	r2, [pc, #16]	@ (8016dd4 <LL_PWR_EnableBootC2+0x1c>)
 8016dc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8016dc6:	60d3      	str	r3, [r2, #12]
}
 8016dc8:	bf00      	nop
 8016dca:	46bd      	mov	sp, r7
 8016dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dd0:	4770      	bx	lr
 8016dd2:	bf00      	nop
 8016dd4:	58000400 	.word	0x58000400

08016dd8 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8016dd8:	b480      	push	{r7}
 8016dda:	b083      	sub	sp, #12
 8016ddc:	af00      	add	r7, sp, #0
 8016dde:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8016de0:	4b06      	ldr	r3, [pc, #24]	@ (8016dfc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8016de2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8016de6:	4905      	ldr	r1, [pc, #20]	@ (8016dfc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	4313      	orrs	r3, r2
 8016dec:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8016df0:	bf00      	nop
 8016df2:	370c      	adds	r7, #12
 8016df4:	46bd      	mov	sp, r7
 8016df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dfa:	4770      	bx	lr
 8016dfc:	58000800 	.word	0x58000800

08016e00 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8016e00:	b480      	push	{r7}
 8016e02:	b083      	sub	sp, #12
 8016e04:	af00      	add	r7, sp, #0
 8016e06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8016e08:	4b05      	ldr	r3, [pc, #20]	@ (8016e20 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8016e0a:	6a1a      	ldr	r2, [r3, #32]
 8016e0c:	4904      	ldr	r1, [pc, #16]	@ (8016e20 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	4313      	orrs	r3, r2
 8016e12:	620b      	str	r3, [r1, #32]
}
 8016e14:	bf00      	nop
 8016e16:	370c      	adds	r7, #12
 8016e18:	46bd      	mov	sp, r7
 8016e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e1e:	4770      	bx	lr
 8016e20:	58000800 	.word	0x58000800

08016e24 <LL_AHB3_GRP1_EnableClock>:
{
 8016e24:	b480      	push	{r7}
 8016e26:	b085      	sub	sp, #20
 8016e28:	af00      	add	r7, sp, #0
 8016e2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8016e2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016e30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016e32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	4313      	orrs	r3, r2
 8016e3a:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8016e3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016e40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	4013      	ands	r3, r2
 8016e46:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8016e48:	68fb      	ldr	r3, [r7, #12]
}
 8016e4a:	bf00      	nop
 8016e4c:	3714      	adds	r7, #20
 8016e4e:	46bd      	mov	sp, r7
 8016e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e54:	4770      	bx	lr

08016e56 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8016e56:	b480      	push	{r7}
 8016e58:	b085      	sub	sp, #20
 8016e5a:	af00      	add	r7, sp, #0
 8016e5c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8016e5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016e62:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8016e66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	4313      	orrs	r3, r2
 8016e6e:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8016e72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016e76:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	4013      	ands	r3, r2
 8016e7e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8016e80:	68fb      	ldr	r3, [r7, #12]
}
 8016e82:	bf00      	nop
 8016e84:	3714      	adds	r7, #20
 8016e86:	46bd      	mov	sp, r7
 8016e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e8c:	4770      	bx	lr

08016e8e <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8016e8e:	b480      	push	{r7}
 8016e90:	b083      	sub	sp, #12
 8016e92:	af00      	add	r7, sp, #0
 8016e94:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	601a      	str	r2, [r3, #0]
}
 8016ea2:	bf00      	nop
 8016ea4:	370c      	adds	r7, #12
 8016ea6:	46bd      	mov	sp, r7
 8016ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eac:	4770      	bx	lr

08016eae <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8016eae:	b480      	push	{r7}
 8016eb0:	b083      	sub	sp, #12
 8016eb2:	af00      	add	r7, sp, #0
 8016eb4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	f043 0201 	orr.w	r2, r3, #1
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	601a      	str	r2, [r3, #0]
}
 8016ec2:	bf00      	nop
 8016ec4:	370c      	adds	r7, #12
 8016ec6:	46bd      	mov	sp, r7
 8016ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ecc:	4770      	bx	lr

08016ece <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8016ece:	b480      	push	{r7}
 8016ed0:	b083      	sub	sp, #12
 8016ed2:	af00      	add	r7, sp, #0
 8016ed4:	6078      	str	r0, [r7, #4]
 8016ed6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	685a      	ldr	r2, [r3, #4]
 8016edc:	683b      	ldr	r3, [r7, #0]
 8016ede:	041b      	lsls	r3, r3, #16
 8016ee0:	43db      	mvns	r3, r3
 8016ee2:	401a      	ands	r2, r3
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	605a      	str	r2, [r3, #4]
}
 8016ee8:	bf00      	nop
 8016eea:	370c      	adds	r7, #12
 8016eec:	46bd      	mov	sp, r7
 8016eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ef2:	4770      	bx	lr

08016ef4 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8016ef4:	b480      	push	{r7}
 8016ef6:	b083      	sub	sp, #12
 8016ef8:	af00      	add	r7, sp, #0
 8016efa:	6078      	str	r0, [r7, #4]
 8016efc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	685a      	ldr	r2, [r3, #4]
 8016f02:	683b      	ldr	r3, [r7, #0]
 8016f04:	041b      	lsls	r3, r3, #16
 8016f06:	431a      	orrs	r2, r3
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	605a      	str	r2, [r3, #4]
}
 8016f0c:	bf00      	nop
 8016f0e:	370c      	adds	r7, #12
 8016f10:	46bd      	mov	sp, r7
 8016f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f16:	4770      	bx	lr

08016f18 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8016f18:	b480      	push	{r7}
 8016f1a:	b083      	sub	sp, #12
 8016f1c:	af00      	add	r7, sp, #0
 8016f1e:	6078      	str	r0, [r7, #4]
 8016f20:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	685a      	ldr	r2, [r3, #4]
 8016f26:	683b      	ldr	r3, [r7, #0]
 8016f28:	43db      	mvns	r3, r3
 8016f2a:	401a      	ands	r2, r3
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	605a      	str	r2, [r3, #4]
}
 8016f30:	bf00      	nop
 8016f32:	370c      	adds	r7, #12
 8016f34:	46bd      	mov	sp, r7
 8016f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f3a:	4770      	bx	lr

08016f3c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8016f3c:	b480      	push	{r7}
 8016f3e:	b083      	sub	sp, #12
 8016f40:	af00      	add	r7, sp, #0
 8016f42:	6078      	str	r0, [r7, #4]
 8016f44:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	683a      	ldr	r2, [r7, #0]
 8016f4a:	609a      	str	r2, [r3, #8]
}
 8016f4c:	bf00      	nop
 8016f4e:	370c      	adds	r7, #12
 8016f50:	46bd      	mov	sp, r7
 8016f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f56:	4770      	bx	lr

08016f58 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8016f58:	b480      	push	{r7}
 8016f5a:	b083      	sub	sp, #12
 8016f5c:	af00      	add	r7, sp, #0
 8016f5e:	6078      	str	r0, [r7, #4]
 8016f60:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8016f62:	683b      	ldr	r3, [r7, #0]
 8016f64:	041a      	lsls	r2, r3, #16
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	609a      	str	r2, [r3, #8]
}
 8016f6a:	bf00      	nop
 8016f6c:	370c      	adds	r7, #12
 8016f6e:	46bd      	mov	sp, r7
 8016f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f74:	4770      	bx	lr

08016f76 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8016f76:	b480      	push	{r7}
 8016f78:	b083      	sub	sp, #12
 8016f7a:	af00      	add	r7, sp, #0
 8016f7c:	6078      	str	r0, [r7, #4]
 8016f7e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	68da      	ldr	r2, [r3, #12]
 8016f84:	683b      	ldr	r3, [r7, #0]
 8016f86:	4013      	ands	r3, r2
 8016f88:	683a      	ldr	r2, [r7, #0]
 8016f8a:	429a      	cmp	r2, r3
 8016f8c:	d101      	bne.n	8016f92 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8016f8e:	2301      	movs	r3, #1
 8016f90:	e000      	b.n	8016f94 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8016f92:	2300      	movs	r3, #0
}
 8016f94:	4618      	mov	r0, r3
 8016f96:	370c      	adds	r7, #12
 8016f98:	46bd      	mov	sp, r7
 8016f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f9e:	4770      	bx	lr

08016fa0 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8016fa0:	b480      	push	{r7}
 8016fa2:	b083      	sub	sp, #12
 8016fa4:	af00      	add	r7, sp, #0
 8016fa6:	6078      	str	r0, [r7, #4]
 8016fa8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	69da      	ldr	r2, [r3, #28]
 8016fae:	683b      	ldr	r3, [r7, #0]
 8016fb0:	4013      	ands	r3, r2
 8016fb2:	683a      	ldr	r2, [r7, #0]
 8016fb4:	429a      	cmp	r2, r3
 8016fb6:	d101      	bne.n	8016fbc <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8016fb8:	2301      	movs	r3, #1
 8016fba:	e000      	b.n	8016fbe <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8016fbc:	2300      	movs	r3, #0
}
 8016fbe:	4618      	mov	r0, r3
 8016fc0:	370c      	adds	r7, #12
 8016fc2:	46bd      	mov	sp, r7
 8016fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fc8:	4770      	bx	lr
	...

08016fcc <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8016fcc:	b580      	push	{r7, lr}
 8016fce:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8016fd0:	2102      	movs	r1, #2
 8016fd2:	4818      	ldr	r0, [pc, #96]	@ (8017034 <HW_IPCC_Rx_Handler+0x68>)
 8016fd4:	f7ff ffe4 	bl	8016fa0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8016fd8:	4603      	mov	r3, r0
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d008      	beq.n	8016ff0 <HW_IPCC_Rx_Handler+0x24>
 8016fde:	4b15      	ldr	r3, [pc, #84]	@ (8017034 <HW_IPCC_Rx_Handler+0x68>)
 8016fe0:	685b      	ldr	r3, [r3, #4]
 8016fe2:	f003 0302 	and.w	r3, r3, #2
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d102      	bne.n	8016ff0 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8016fea:	f000 f925 	bl	8017238 <HW_IPCC_SYS_EvtHandler>
 8016fee:	e01e      	b.n	801702e <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8016ff0:	2101      	movs	r1, #1
 8016ff2:	4810      	ldr	r0, [pc, #64]	@ (8017034 <HW_IPCC_Rx_Handler+0x68>)
 8016ff4:	f7ff ffd4 	bl	8016fa0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8016ff8:	4603      	mov	r3, r0
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	d008      	beq.n	8017010 <HW_IPCC_Rx_Handler+0x44>
 8016ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8017034 <HW_IPCC_Rx_Handler+0x68>)
 8017000:	685b      	ldr	r3, [r3, #4]
 8017002:	f003 0301 	and.w	r3, r3, #1
 8017006:	2b00      	cmp	r3, #0
 8017008:	d102      	bne.n	8017010 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 801700a:	f000 f899 	bl	8017140 <HW_IPCC_BLE_EvtHandler>
 801700e:	e00e      	b.n	801702e <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8017010:	2108      	movs	r1, #8
 8017012:	4808      	ldr	r0, [pc, #32]	@ (8017034 <HW_IPCC_Rx_Handler+0x68>)
 8017014:	f7ff ffc4 	bl	8016fa0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8017018:	4603      	mov	r3, r0
 801701a:	2b00      	cmp	r3, #0
 801701c:	d008      	beq.n	8017030 <HW_IPCC_Rx_Handler+0x64>
 801701e:	4b05      	ldr	r3, [pc, #20]	@ (8017034 <HW_IPCC_Rx_Handler+0x68>)
 8017020:	685b      	ldr	r3, [r3, #4]
 8017022:	f003 0308 	and.w	r3, r3, #8
 8017026:	2b00      	cmp	r3, #0
 8017028:	d102      	bne.n	8017030 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 801702a:	f000 f97d 	bl	8017328 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 801702e:	bf00      	nop
 8017030:	bf00      	nop
}
 8017032:	bd80      	pop	{r7, pc}
 8017034:	58000c00 	.word	0x58000c00

08017038 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8017038:	b580      	push	{r7, lr}
 801703a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 801703c:	2102      	movs	r1, #2
 801703e:	4818      	ldr	r0, [pc, #96]	@ (80170a0 <HW_IPCC_Tx_Handler+0x68>)
 8017040:	f7ff ff99 	bl	8016f76 <LL_C1_IPCC_IsActiveFlag_CHx>
 8017044:	4603      	mov	r3, r0
 8017046:	2b00      	cmp	r3, #0
 8017048:	d108      	bne.n	801705c <HW_IPCC_Tx_Handler+0x24>
 801704a:	4b15      	ldr	r3, [pc, #84]	@ (80170a0 <HW_IPCC_Tx_Handler+0x68>)
 801704c:	685b      	ldr	r3, [r3, #4]
 801704e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017052:	2b00      	cmp	r3, #0
 8017054:	d102      	bne.n	801705c <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8017056:	f000 f8d3 	bl	8017200 <HW_IPCC_SYS_CmdEvtHandler>
 801705a:	e01e      	b.n	801709a <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 801705c:	2108      	movs	r1, #8
 801705e:	4810      	ldr	r0, [pc, #64]	@ (80170a0 <HW_IPCC_Tx_Handler+0x68>)
 8017060:	f7ff ff89 	bl	8016f76 <LL_C1_IPCC_IsActiveFlag_CHx>
 8017064:	4603      	mov	r3, r0
 8017066:	2b00      	cmp	r3, #0
 8017068:	d108      	bne.n	801707c <HW_IPCC_Tx_Handler+0x44>
 801706a:	4b0d      	ldr	r3, [pc, #52]	@ (80170a0 <HW_IPCC_Tx_Handler+0x68>)
 801706c:	685b      	ldr	r3, [r3, #4]
 801706e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8017072:	2b00      	cmp	r3, #0
 8017074:	d102      	bne.n	801707c <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8017076:	f000 f919 	bl	80172ac <HW_IPCC_MM_FreeBufHandler>
 801707a:	e00e      	b.n	801709a <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 801707c:	2120      	movs	r1, #32
 801707e:	4808      	ldr	r0, [pc, #32]	@ (80170a0 <HW_IPCC_Tx_Handler+0x68>)
 8017080:	f7ff ff79 	bl	8016f76 <LL_C1_IPCC_IsActiveFlag_CHx>
 8017084:	4603      	mov	r3, r0
 8017086:	2b00      	cmp	r3, #0
 8017088:	d108      	bne.n	801709c <HW_IPCC_Tx_Handler+0x64>
 801708a:	4b05      	ldr	r3, [pc, #20]	@ (80170a0 <HW_IPCC_Tx_Handler+0x68>)
 801708c:	685b      	ldr	r3, [r3, #4]
 801708e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8017092:	2b00      	cmp	r3, #0
 8017094:	d102      	bne.n	801709c <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8017096:	f000 f85f 	bl	8017158 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 801709a:	bf00      	nop
 801709c:	bf00      	nop
}
 801709e:	bd80      	pop	{r7, pc}
 80170a0:	58000c00 	.word	0x58000c00

080170a4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80170a4:	b580      	push	{r7, lr}
 80170a6:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80170a8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80170ac:	f7ff fed3 	bl	8016e56 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80170b0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80170b4:	f7ff fea4 	bl	8016e00 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80170b8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80170bc:	f7ff fe8c 	bl	8016dd8 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80170c0:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80170c2:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80170c4:	f7ff fe78 	bl	8016db8 <LL_PWR_EnableBootC2>

  return;
 80170c8:	bf00      	nop
}
 80170ca:	bd80      	pop	{r7, pc}

080170cc <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80170cc:	b580      	push	{r7, lr}
 80170ce:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80170d0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80170d4:	f7ff fea6 	bl	8016e24 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80170d8:	4806      	ldr	r0, [pc, #24]	@ (80170f4 <HW_IPCC_Init+0x28>)
 80170da:	f7ff fee8 	bl	8016eae <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80170de:	4805      	ldr	r0, [pc, #20]	@ (80170f4 <HW_IPCC_Init+0x28>)
 80170e0:	f7ff fed5 	bl	8016e8e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80170e4:	202c      	movs	r0, #44	@ 0x2c
 80170e6:	f7f0 fe74 	bl	8007dd2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80170ea:	202d      	movs	r0, #45	@ 0x2d
 80170ec:	f7f0 fe71 	bl	8007dd2 <HAL_NVIC_EnableIRQ>

  return;
 80170f0:	bf00      	nop
}
 80170f2:	bd80      	pop	{r7, pc}
 80170f4:	58000c00 	.word	0x58000c00

080170f8 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80170f8:	b580      	push	{r7, lr}
 80170fa:	b084      	sub	sp, #16
 80170fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80170fe:	f3ef 8310 	mrs	r3, PRIMASK
 8017102:	607b      	str	r3, [r7, #4]
  return(result);
 8017104:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8017106:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8017108:	b672      	cpsid	i
}
 801710a:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 801710c:	2101      	movs	r1, #1
 801710e:	4806      	ldr	r0, [pc, #24]	@ (8017128 <HW_IPCC_BLE_Init+0x30>)
 8017110:	f7ff ff02 	bl	8016f18 <LL_C1_IPCC_EnableReceiveChannel>
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017118:	68bb      	ldr	r3, [r7, #8]
 801711a:	f383 8810 	msr	PRIMASK, r3
}
 801711e:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 8017120:	bf00      	nop
}
 8017122:	3710      	adds	r7, #16
 8017124:	46bd      	mov	sp, r7
 8017126:	bd80      	pop	{r7, pc}
 8017128:	58000c00 	.word	0x58000c00

0801712c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 801712c:	b580      	push	{r7, lr}
 801712e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8017130:	2101      	movs	r1, #1
 8017132:	4802      	ldr	r0, [pc, #8]	@ (801713c <HW_IPCC_BLE_SendCmd+0x10>)
 8017134:	f7ff ff10 	bl	8016f58 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8017138:	bf00      	nop
}
 801713a:	bd80      	pop	{r7, pc}
 801713c:	58000c00 	.word	0x58000c00

08017140 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8017140:	b580      	push	{r7, lr}
 8017142:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8017144:	f7fe fe56 	bl	8015df4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8017148:	2101      	movs	r1, #1
 801714a:	4802      	ldr	r0, [pc, #8]	@ (8017154 <HW_IPCC_BLE_EvtHandler+0x14>)
 801714c:	f7ff fef6 	bl	8016f3c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8017150:	bf00      	nop
}
 8017152:	bd80      	pop	{r7, pc}
 8017154:	58000c00 	.word	0x58000c00

08017158 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8017158:	b580      	push	{r7, lr}
 801715a:	b084      	sub	sp, #16
 801715c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801715e:	f3ef 8310 	mrs	r3, PRIMASK
 8017162:	607b      	str	r3, [r7, #4]
  return(result);
 8017164:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8017166:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8017168:	b672      	cpsid	i
}
 801716a:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 801716c:	2120      	movs	r1, #32
 801716e:	4807      	ldr	r0, [pc, #28]	@ (801718c <HW_IPCC_BLE_AclDataEvtHandler+0x34>)
 8017170:	f7ff fec0 	bl	8016ef4 <LL_C1_IPCC_DisableTransmitChannel>
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017178:	68bb      	ldr	r3, [r7, #8]
 801717a:	f383 8810 	msr	PRIMASK, r3
}
 801717e:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_BLE_AclDataAckNot();
 8017180:	f7fe fe68 	bl	8015e54 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8017184:	bf00      	nop
}
 8017186:	3710      	adds	r7, #16
 8017188:	46bd      	mov	sp, r7
 801718a:	bd80      	pop	{r7, pc}
 801718c:	58000c00 	.word	0x58000c00

08017190 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8017190:	b580      	push	{r7, lr}
 8017192:	b084      	sub	sp, #16
 8017194:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017196:	f3ef 8310 	mrs	r3, PRIMASK
 801719a:	607b      	str	r3, [r7, #4]
  return(result);
 801719c:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 801719e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80171a0:	b672      	cpsid	i
}
 80171a2:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80171a4:	2102      	movs	r1, #2
 80171a6:	4806      	ldr	r0, [pc, #24]	@ (80171c0 <HW_IPCC_SYS_Init+0x30>)
 80171a8:	f7ff feb6 	bl	8016f18 <LL_C1_IPCC_EnableReceiveChannel>
 80171ac:	68fb      	ldr	r3, [r7, #12]
 80171ae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80171b0:	68bb      	ldr	r3, [r7, #8]
 80171b2:	f383 8810 	msr	PRIMASK, r3
}
 80171b6:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 80171b8:	bf00      	nop
}
 80171ba:	3710      	adds	r7, #16
 80171bc:	46bd      	mov	sp, r7
 80171be:	bd80      	pop	{r7, pc}
 80171c0:	58000c00 	.word	0x58000c00

080171c4 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80171c4:	b580      	push	{r7, lr}
 80171c6:	b084      	sub	sp, #16
 80171c8:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80171ca:	2102      	movs	r1, #2
 80171cc:	480b      	ldr	r0, [pc, #44]	@ (80171fc <HW_IPCC_SYS_SendCmd+0x38>)
 80171ce:	f7ff fec3 	bl	8016f58 <LL_C1_IPCC_SetFlag_CHx>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80171d2:	f3ef 8310 	mrs	r3, PRIMASK
 80171d6:	607b      	str	r3, [r7, #4]
  return(result);
 80171d8:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 80171da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80171dc:	b672      	cpsid	i
}
 80171de:	bf00      	nop
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80171e0:	2102      	movs	r1, #2
 80171e2:	4806      	ldr	r0, [pc, #24]	@ (80171fc <HW_IPCC_SYS_SendCmd+0x38>)
 80171e4:	f7ff fe73 	bl	8016ece <LL_C1_IPCC_EnableTransmitChannel>
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80171ec:	68bb      	ldr	r3, [r7, #8]
 80171ee:	f383 8810 	msr	PRIMASK, r3
}
 80171f2:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 80171f4:	bf00      	nop
}
 80171f6:	3710      	adds	r7, #16
 80171f8:	46bd      	mov	sp, r7
 80171fa:	bd80      	pop	{r7, pc}
 80171fc:	58000c00 	.word	0x58000c00

08017200 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8017200:	b580      	push	{r7, lr}
 8017202:	b084      	sub	sp, #16
 8017204:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017206:	f3ef 8310 	mrs	r3, PRIMASK
 801720a:	607b      	str	r3, [r7, #4]
  return(result);
 801720c:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 801720e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8017210:	b672      	cpsid	i
}
 8017212:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8017214:	2102      	movs	r1, #2
 8017216:	4807      	ldr	r0, [pc, #28]	@ (8017234 <HW_IPCC_SYS_CmdEvtHandler+0x34>)
 8017218:	f7ff fe6c 	bl	8016ef4 <LL_C1_IPCC_DisableTransmitChannel>
 801721c:	68fb      	ldr	r3, [r7, #12]
 801721e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017220:	68bb      	ldr	r3, [r7, #8]
 8017222:	f383 8810 	msr	PRIMASK, r3
}
 8017226:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_SYS_CmdEvtNot();
 8017228:	f7fe fe64 	bl	8015ef4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 801722c:	bf00      	nop
}
 801722e:	3710      	adds	r7, #16
 8017230:	46bd      	mov	sp, r7
 8017232:	bd80      	pop	{r7, pc}
 8017234:	58000c00 	.word	0x58000c00

08017238 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8017238:	b580      	push	{r7, lr}
 801723a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 801723c:	f7fe fe70 	bl	8015f20 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8017240:	2102      	movs	r1, #2
 8017242:	4802      	ldr	r0, [pc, #8]	@ (801724c <HW_IPCC_SYS_EvtHandler+0x14>)
 8017244:	f7ff fe7a 	bl	8016f3c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8017248:	bf00      	nop
}
 801724a:	bd80      	pop	{r7, pc}
 801724c:	58000c00 	.word	0x58000c00

08017250 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8017250:	b580      	push	{r7, lr}
 8017252:	b086      	sub	sp, #24
 8017254:	af00      	add	r7, sp, #0
 8017256:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8017258:	2108      	movs	r1, #8
 801725a:	4812      	ldr	r0, [pc, #72]	@ (80172a4 <HW_IPCC_MM_SendFreeBuf+0x54>)
 801725c:	f7ff fe8b 	bl	8016f76 <LL_C1_IPCC_IsActiveFlag_CHx>
 8017260:	4603      	mov	r3, r0
 8017262:	2b00      	cmp	r3, #0
 8017264:	d013      	beq.n	801728e <HW_IPCC_MM_SendFreeBuf+0x3e>
  {
    FreeBufCb = cb;
 8017266:	4a10      	ldr	r2, [pc, #64]	@ (80172a8 <HW_IPCC_MM_SendFreeBuf+0x58>)
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801726c:	f3ef 8310 	mrs	r3, PRIMASK
 8017270:	60fb      	str	r3, [r7, #12]
  return(result);
 8017272:	68fb      	ldr	r3, [r7, #12]
    UTILS_ENTER_CRITICAL_SECTION();
 8017274:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8017276:	b672      	cpsid	i
}
 8017278:	bf00      	nop
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801727a:	2108      	movs	r1, #8
 801727c:	4809      	ldr	r0, [pc, #36]	@ (80172a4 <HW_IPCC_MM_SendFreeBuf+0x54>)
 801727e:	f7ff fe26 	bl	8016ece <LL_C1_IPCC_EnableTransmitChannel>
 8017282:	697b      	ldr	r3, [r7, #20]
 8017284:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017286:	693b      	ldr	r3, [r7, #16]
 8017288:	f383 8810 	msr	PRIMASK, r3
}
 801728c:	e005      	b.n	801729a <HW_IPCC_MM_SendFreeBuf+0x4a>
    UTILS_EXIT_CRITICAL_SECTION();
  }
  else
  {
    cb();
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	4798      	blx	r3

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8017292:	2108      	movs	r1, #8
 8017294:	4803      	ldr	r0, [pc, #12]	@ (80172a4 <HW_IPCC_MM_SendFreeBuf+0x54>)
 8017296:	f7ff fe5f 	bl	8016f58 <LL_C1_IPCC_SetFlag_CHx>
  }

  return;
 801729a:	bf00      	nop
}
 801729c:	3718      	adds	r7, #24
 801729e:	46bd      	mov	sp, r7
 80172a0:	bd80      	pop	{r7, pc}
 80172a2:	bf00      	nop
 80172a4:	58000c00 	.word	0x58000c00
 80172a8:	20000d60 	.word	0x20000d60

080172ac <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80172ac:	b580      	push	{r7, lr}
 80172ae:	b084      	sub	sp, #16
 80172b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80172b2:	f3ef 8310 	mrs	r3, PRIMASK
 80172b6:	607b      	str	r3, [r7, #4]
  return(result);
 80172b8:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 80172ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80172bc:	b672      	cpsid	i
}
 80172be:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80172c0:	2108      	movs	r1, #8
 80172c2:	480a      	ldr	r0, [pc, #40]	@ (80172ec <HW_IPCC_MM_FreeBufHandler+0x40>)
 80172c4:	f7ff fe16 	bl	8016ef4 <LL_C1_IPCC_DisableTransmitChannel>
 80172c8:	68fb      	ldr	r3, [r7, #12]
 80172ca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80172cc:	68bb      	ldr	r3, [r7, #8]
 80172ce:	f383 8810 	msr	PRIMASK, r3
}
 80172d2:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  FreeBufCb();
 80172d4:	4b06      	ldr	r3, [pc, #24]	@ (80172f0 <HW_IPCC_MM_FreeBufHandler+0x44>)
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80172da:	2108      	movs	r1, #8
 80172dc:	4803      	ldr	r0, [pc, #12]	@ (80172ec <HW_IPCC_MM_FreeBufHandler+0x40>)
 80172de:	f7ff fe3b 	bl	8016f58 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80172e2:	bf00      	nop
}
 80172e4:	3710      	adds	r7, #16
 80172e6:	46bd      	mov	sp, r7
 80172e8:	bd80      	pop	{r7, pc}
 80172ea:	bf00      	nop
 80172ec:	58000c00 	.word	0x58000c00
 80172f0:	20000d60 	.word	0x20000d60

080172f4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80172f4:	b580      	push	{r7, lr}
 80172f6:	b084      	sub	sp, #16
 80172f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80172fa:	f3ef 8310 	mrs	r3, PRIMASK
 80172fe:	607b      	str	r3, [r7, #4]
  return(result);
 8017300:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8017302:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8017304:	b672      	cpsid	i
}
 8017306:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8017308:	2108      	movs	r1, #8
 801730a:	4806      	ldr	r0, [pc, #24]	@ (8017324 <HW_IPCC_TRACES_Init+0x30>)
 801730c:	f7ff fe04 	bl	8016f18 <LL_C1_IPCC_EnableReceiveChannel>
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017314:	68bb      	ldr	r3, [r7, #8]
 8017316:	f383 8810 	msr	PRIMASK, r3
}
 801731a:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 801731c:	bf00      	nop
}
 801731e:	3710      	adds	r7, #16
 8017320:	46bd      	mov	sp, r7
 8017322:	bd80      	pop	{r7, pc}
 8017324:	58000c00 	.word	0x58000c00

08017328 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8017328:	b580      	push	{r7, lr}
 801732a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 801732c:	f7fe fea0 	bl	8016070 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8017330:	2108      	movs	r1, #8
 8017332:	4802      	ldr	r0, [pc, #8]	@ (801733c <HW_IPCC_TRACES_EvtHandler+0x14>)
 8017334:	f7ff fe02 	bl	8016f3c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8017338:	bf00      	nop
}
 801733a:	bd80      	pop	{r7, pc}
 801733c:	58000c00 	.word	0x58000c00

08017340 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8017340:	b580      	push	{r7, lr}
 8017342:	b082      	sub	sp, #8
 8017344:	af00      	add	r7, sp, #0
 8017346:	ed87 0a01 	vstr	s0, [r7, #4]
 801734a:	ed97 0a01 	vldr	s0, [r7, #4]
 801734e:	f002 f92f 	bl	80195b0 <cosf>
 8017352:	eef0 7a40 	vmov.f32	s15, s0
 8017356:	eeb0 0a67 	vmov.f32	s0, s15
 801735a:	3708      	adds	r7, #8
 801735c:	46bd      	mov	sp, r7
 801735e:	bd80      	pop	{r7, pc}

08017360 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8017360:	b580      	push	{r7, lr}
 8017362:	b082      	sub	sp, #8
 8017364:	af00      	add	r7, sp, #0
 8017366:	ed87 0a01 	vstr	s0, [r7, #4]
 801736a:	ed97 0a01 	vldr	s0, [r7, #4]
 801736e:	f002 f963 	bl	8019638 <sinf>
 8017372:	eef0 7a40 	vmov.f32	s15, s0
 8017376:	eeb0 0a67 	vmov.f32	s0, s15
 801737a:	3708      	adds	r7, #8
 801737c:	46bd      	mov	sp, r7
 801737e:	bd80      	pop	{r7, pc}

08017380 <_ZN6Screen11renderMeterEv>:
}

void Screen::renderMeter()

// void Screen::renderMeter(GFXcanvas16 &canvas)
{
 8017380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017382:	b089      	sub	sp, #36	@ 0x24
 8017384:	af04      	add	r7, sp, #16
 8017386:	6078      	str	r0, [r7, #4]

    // background
    // canvas.fillRect(0, 0, canvas.width(), canvas.height(), BACKGROUND_COLOR);

    canvas.fillScreen(BACKGROUND_COLOR);
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	336c      	adds	r3, #108	@ 0x6c
 801738c:	f64d 41ff 	movw	r1, #56575	@ 0xdcff
 8017390:	4618      	mov	r0, r3
 8017392:	f7eb fcf3 	bl	8002d7c <_ZN11GFXcanvas1610fillScreenEt>

    // border
    for (int i = 0; i < 3; i++)
 8017396:	2300      	movs	r3, #0
 8017398:	60fb      	str	r3, [r7, #12]
 801739a:	e035      	b.n	8017408 <_ZN6Screen11renderMeterEv+0x88>
    {
        canvas.drawRect(overallBorderX - i, overallBorderY - i, overallBorderWidth + 2 * i, overallBorderHeight + 2 * i, TEXT_COLOR);
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80173a8:	b29a      	uxth	r2, r3
 80173aa:	68fb      	ldr	r3, [r7, #12]
 80173ac:	b29b      	uxth	r3, r3
 80173ae:	1ad3      	subs	r3, r2, r3
 80173b0:	b29b      	uxth	r3, r3
 80173b2:	b219      	sxth	r1, r3
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80173ba:	b29a      	uxth	r2, r3
 80173bc:	68fb      	ldr	r3, [r7, #12]
 80173be:	b29b      	uxth	r3, r3
 80173c0:	1ad3      	subs	r3, r2, r3
 80173c2:	b29b      	uxth	r3, r3
 80173c4:	b21c      	sxth	r4, r3
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80173cc:	b29a      	uxth	r2, r3
 80173ce:	68fb      	ldr	r3, [r7, #12]
 80173d0:	b29b      	uxth	r3, r3
 80173d2:	005b      	lsls	r3, r3, #1
 80173d4:	b29b      	uxth	r3, r3
 80173d6:	4413      	add	r3, r2
 80173d8:	b29b      	uxth	r3, r3
 80173da:	b21d      	sxth	r5, r3
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80173e2:	b29a      	uxth	r2, r3
 80173e4:	68fb      	ldr	r3, [r7, #12]
 80173e6:	b29b      	uxth	r3, r3
 80173e8:	005b      	lsls	r3, r3, #1
 80173ea:	b29b      	uxth	r3, r3
 80173ec:	4413      	add	r3, r2
 80173ee:	b29b      	uxth	r3, r3
 80173f0:	b21b      	sxth	r3, r3
 80173f2:	f24a 3229 	movw	r2, #41769	@ 0xa329
 80173f6:	9201      	str	r2, [sp, #4]
 80173f8:	9300      	str	r3, [sp, #0]
 80173fa:	462b      	mov	r3, r5
 80173fc:	4622      	mov	r2, r4
 80173fe:	f7ea fca5 	bl	8001d4c <_ZN12Adafruit_GFX8drawRectEsssst>
    for (int i = 0; i < 3; i++)
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	3301      	adds	r3, #1
 8017406:	60fb      	str	r3, [r7, #12]
 8017408:	68fb      	ldr	r3, [r7, #12]
 801740a:	2b02      	cmp	r3, #2
 801740c:	ddc6      	ble.n	801739c <_ZN6Screen11renderMeterEv+0x1c>
    }
    // yield();
    // status border
    canvas.drawRect(statusBorderX, statusBorderY, statusWidth, statusHeight, TEXT_COLOR);
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801741a:	b219      	sxth	r1, r3
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8017422:	b21a      	sxth	r2, r3
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801742a:	b21c      	sxth	r4, r3
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8017432:	b21b      	sxth	r3, r3
 8017434:	f24a 3529 	movw	r5, #41769	@ 0xa329
 8017438:	9501      	str	r5, [sp, #4]
 801743a:	9300      	str	r3, [sp, #0]
 801743c:	4623      	mov	r3, r4
 801743e:	f7ea fc85 	bl	8001d4c <_ZN12Adafruit_GFX8drawRectEsssst>

    canvas.drawRect(meterX, meterY, meterWidth, meterHeight, TEXT_COLOR);
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 801744e:	b219      	sxth	r1, r3
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8017456:	b21a      	sxth	r2, r3
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 801745e:	b21c      	sxth	r4, r3
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8017466:	b21b      	sxth	r3, r3
 8017468:	f24a 3529 	movw	r5, #41769	@ 0xa329
 801746c:	9501      	str	r5, [sp, #4]
 801746e:	9300      	str	r3, [sp, #0]
 8017470:	4623      	mov	r3, r4
 8017472:	f7ea fc6b 	bl	8001d4c <_ZN12Adafruit_GFX8drawRectEsssst>
    canvas.drawRect(labelX, labelY, labelWidth, labelHeight, TEXT_COLOR);
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8017482:	b219      	sxth	r1, r3
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 801748a:	b21a      	sxth	r2, r3
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8017492:	b21c      	sxth	r4, r3
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 801749a:	b21b      	sxth	r3, r3
 801749c:	f24a 3529 	movw	r5, #41769	@ 0xa329
 80174a0:	9501      	str	r5, [sp, #4]
 80174a2:	9300      	str	r3, [sp, #0]
 80174a4:	4623      	mov	r3, r4
 80174a6:	f7ea fc51 	bl	8001d4c <_ZN12Adafruit_GFX8drawRectEsssst>
    canvas.drawRect(buttonBorderX, buttonBorderY, buttonBorderWidth, buttonBorderHeight, TEXT_COLOR);
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 80174b6:	b219      	sxth	r1, r3
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80174be:	b21a      	sxth	r2, r3
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80174c6:	b21c      	sxth	r4, r3
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 80174ce:	b21b      	sxth	r3, r3
 80174d0:	f24a 3529 	movw	r5, #41769	@ 0xa329
 80174d4:	9501      	str	r5, [sp, #4]
 80174d6:	9300      	str	r3, [sp, #0]
 80174d8:	4623      	mov	r3, r4
 80174da:	f7ea fc37 	bl	8001d4c <_ZN12Adafruit_GFX8drawRectEsssst>

    canvas.fillRoundRect(buttonX1, buttonY1, buttonWidth, buttonHeight, buttonRadius, ACCENT_COLOR);
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80174ea:	b219      	sxth	r1, r3
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 80174f2:	b21c      	sxth	r4, r3
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 80174fa:	b21d      	sxth	r5, r3
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8017502:	b21b      	sxth	r3, r3
 8017504:	687a      	ldr	r2, [r7, #4]
 8017506:	f8d2 21c0 	ldr.w	r2, [r2, #448]	@ 0x1c0
 801750a:	b212      	sxth	r2, r2
 801750c:	f246 7663 	movw	r6, #26467	@ 0x6763
 8017510:	9602      	str	r6, [sp, #8]
 8017512:	9201      	str	r2, [sp, #4]
 8017514:	9300      	str	r3, [sp, #0]
 8017516:	462b      	mov	r3, r5
 8017518:	4622      	mov	r2, r4
 801751a:	f7ea fc7a 	bl	8001e12 <_ZN12Adafruit_GFX13fillRoundRectEssssst>
    canvas.fillRoundRect(buttonX2, buttonY2, buttonWidth, buttonHeight, buttonRadius, ACCENT_COLOR);
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 801752a:	b219      	sxth	r1, r3
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 8017532:	b21c      	sxth	r4, r3
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 801753a:	b21d      	sxth	r5, r3
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8017542:	b21b      	sxth	r3, r3
 8017544:	687a      	ldr	r2, [r7, #4]
 8017546:	f8d2 21c0 	ldr.w	r2, [r2, #448]	@ 0x1c0
 801754a:	b212      	sxth	r2, r2
 801754c:	f246 7663 	movw	r6, #26467	@ 0x6763
 8017550:	9602      	str	r6, [sp, #8]
 8017552:	9201      	str	r2, [sp, #4]
 8017554:	9300      	str	r3, [sp, #0]
 8017556:	462b      	mov	r3, r5
 8017558:	4622      	mov	r2, r4
 801755a:	f7ea fc5a 	bl	8001e12 <_ZN12Adafruit_GFX13fillRoundRectEssssst>

    canvas.drawPixel(10, 10, ACCENT_COLOR);
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017564:	f246 7363 	movw	r3, #26467	@ 0x6763
 8017568:	220a      	movs	r2, #10
 801756a:	210a      	movs	r1, #10
 801756c:	f7eb fb8a 	bl	8002c84 <_ZN11GFXcanvas169drawPixelEsst>
    canvas.drawPixel(11, 10, ACCENT_COLOR);
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017576:	f246 7363 	movw	r3, #26467	@ 0x6763
 801757a:	220a      	movs	r2, #10
 801757c:	210b      	movs	r1, #11
 801757e:	f7eb fb81 	bl	8002c84 <_ZN11GFXcanvas169drawPixelEsst>
    canvas.drawPixel(12, 10, ACCENT_COLOR);
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017588:	f246 7363 	movw	r3, #26467	@ 0x6763
 801758c:	220a      	movs	r2, #10
 801758e:	210c      	movs	r1, #12
 8017590:	f7eb fb78 	bl	8002c84 <_ZN11GFXcanvas169drawPixelEsst>
    canvas.drawPixel(13, 10, ACCENT_COLOR);
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 801759a:	f246 7363 	movw	r3, #26467	@ 0x6763
 801759e:	220a      	movs	r2, #10
 80175a0:	210d      	movs	r1, #13
 80175a2:	f7eb fb6f 	bl	8002c84 <_ZN11GFXcanvas169drawPixelEsst>
    canvas.drawPixel(10, 11, ACCENT_COLOR);
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 80175ac:	f246 7363 	movw	r3, #26467	@ 0x6763
 80175b0:	220b      	movs	r2, #11
 80175b2:	210a      	movs	r1, #10
 80175b4:	f7eb fb66 	bl	8002c84 <_ZN11GFXcanvas169drawPixelEsst>
    canvas.drawPixel(10, 12, ACCENT_COLOR);
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 80175be:	f246 7363 	movw	r3, #26467	@ 0x6763
 80175c2:	220c      	movs	r2, #12
 80175c4:	210a      	movs	r1, #10
 80175c6:	f7eb fb5d 	bl	8002c84 <_ZN11GFXcanvas169drawPixelEsst>
    canvas.drawPixel(10, 13, ACCENT_COLOR);
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 80175d0:	f246 7363 	movw	r3, #26467	@ 0x6763
 80175d4:	220d      	movs	r2, #13
 80175d6:	210a      	movs	r1, #10
 80175d8:	f7eb fb54 	bl	8002c84 <_ZN11GFXcanvas169drawPixelEsst>
    snprintf(batteryLevel, sizeof(batteryLevel), "% %d\r\n", BatteryMonitor::charge);
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	f203 2029 	addw	r0, r3, #553	@ 0x229
 80175e2:	4bbc      	ldr	r3, [pc, #752]	@ (80178d4 <_ZN6Screen11renderMeterEv+0x554>)
 80175e4:	881b      	ldrh	r3, [r3, #0]
 80175e6:	4abc      	ldr	r2, [pc, #752]	@ (80178d8 <_ZN6Screen11renderMeterEv+0x558>)
 80175e8:	2120      	movs	r1, #32
 80175ea:	f003 fb33 	bl	801ac54 <sniprintf>

    // calculate the size of a few things....
    canvas.getTextBounds(batteryLevel, 0, 0, &batteryTextX, &batteryTextY, &batteryW, &batteryH);
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	f203 2529 	addw	r5, r3, #553	@ 0x229
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	33cc      	adds	r3, #204	@ 0xcc
 80175fe:	687a      	ldr	r2, [r7, #4]
 8017600:	32ce      	adds	r2, #206	@ 0xce
 8017602:	6879      	ldr	r1, [r7, #4]
 8017604:	31d0      	adds	r1, #208	@ 0xd0
 8017606:	6878      	ldr	r0, [r7, #4]
 8017608:	30d2      	adds	r0, #210	@ 0xd2
 801760a:	9003      	str	r0, [sp, #12]
 801760c:	9102      	str	r1, [sp, #8]
 801760e:	9201      	str	r2, [sp, #4]
 8017610:	9300      	str	r3, [sp, #0]
 8017612:	2300      	movs	r3, #0
 8017614:	2200      	movs	r2, #0
 8017616:	4629      	mov	r1, r5
 8017618:	4620      	mov	r0, r4
 801761a:	f7eb fa4c 	bl	8002ab6 <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>
    // origin of battery text based on its size...
    batteryX = overallBorderWidth - batteryW - 2 * batterySpacer;
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8017624:	687a      	ldr	r2, [r7, #4]
 8017626:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	@ 0xd0
 801762a:	1a9a      	subs	r2, r3, r2
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8017632:	005b      	lsls	r3, r3, #1
 8017634:	1ad2      	subs	r2, r2, r3
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    batteryY = statusBorderY + statusHeight / 2 + batteryH / 2;
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8017648:	0fd9      	lsrs	r1, r3, #31
 801764a:	440b      	add	r3, r1
 801764c:	105b      	asrs	r3, r3, #1
 801764e:	4413      	add	r3, r2
 8017650:	687a      	ldr	r2, [r7, #4]
 8017652:	f8b2 20d2 	ldrh.w	r2, [r2, #210]	@ 0xd2
 8017656:	0852      	lsrs	r2, r2, #1
 8017658:	b292      	uxth	r2, r2
 801765a:	441a      	add	r2, r3
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

    canvas.getTextBounds("HIGH", 0, 0, &switchTextX, &switchTextY, &switchW, &switchH);
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	33dc      	adds	r3, #220	@ 0xdc
 801766c:	687a      	ldr	r2, [r7, #4]
 801766e:	32de      	adds	r2, #222	@ 0xde
 8017670:	6879      	ldr	r1, [r7, #4]
 8017672:	31e0      	adds	r1, #224	@ 0xe0
 8017674:	6878      	ldr	r0, [r7, #4]
 8017676:	30e2      	adds	r0, #226	@ 0xe2
 8017678:	9003      	str	r0, [sp, #12]
 801767a:	9102      	str	r1, [sp, #8]
 801767c:	9201      	str	r2, [sp, #4]
 801767e:	9300      	str	r3, [sp, #0]
 8017680:	2300      	movs	r3, #0
 8017682:	2200      	movs	r2, #0
 8017684:	4995      	ldr	r1, [pc, #596]	@ (80178dc <_ZN6Screen11renderMeterEv+0x55c>)
 8017686:	4620      	mov	r0, r4
 8017688:	f7eb fa15 	bl	8002ab6 <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>
    switchX = overallBorderWidth - batteryX - 2 * batterySpacer;
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8017698:	1ad2      	subs	r2, r2, r3
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80176a0:	005b      	lsls	r3, r3, #1
 80176a2:	1ad2      	subs	r2, r2, r3
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    switchY = statusBorderY + statusHeight / 2 + batteryH / 2;
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80176b6:	0fd9      	lsrs	r1, r3, #31
 80176b8:	440b      	add	r3, r1
 80176ba:	105b      	asrs	r3, r3, #1
 80176bc:	4413      	add	r3, r2
 80176be:	687a      	ldr	r2, [r7, #4]
 80176c0:	f8b2 20d2 	ldrh.w	r2, [r2, #210]	@ 0xd2
 80176c4:	0852      	lsrs	r2, r2, #1
 80176c6:	b292      	uxth	r2, r2
 80176c8:	441a      	add	r2, r3
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

    // // Serial.println(batteryX);
    // // Serial.println(batteryY);
    canvas.setTextColor(TEXT_COLOR);
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	336c      	adds	r3, #108	@ 0x6c
 80176d4:	f24a 3129 	movw	r1, #41769	@ 0xa329
 80176d8:	4618      	mov	r0, r3
 80176da:	f7e9 feee 	bl	80014ba <_ZN12Adafruit_GFX12setTextColorEt>
    canvas.setCursor(batteryX, batteryY);
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80176ea:	b219      	sxth	r1, r3
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80176f2:	b21b      	sxth	r3, r3
 80176f4:	461a      	mov	r2, r3
 80176f6:	f7e9 fecc 	bl	8001492 <_ZN12Adafruit_GFX9setCursorEss>
    canvas.print(batteryLevel);
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	f203 2329 	addw	r3, r3, #553	@ 0x229
 8017706:	4619      	mov	r1, r3
 8017708:	4610      	mov	r0, r2
 801770a:	f7eb fe66 	bl	80033da <_ZN5Print5printEPKc>

    // calculate size of charging:
    canvas.getTextBounds("+ ", 0, 0, &chargingTextX, &chargingTextY, &chargingW, &chargingH);
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	33f0      	adds	r3, #240	@ 0xf0
 8017718:	687a      	ldr	r2, [r7, #4]
 801771a:	32f2      	adds	r2, #242	@ 0xf2
 801771c:	6879      	ldr	r1, [r7, #4]
 801771e:	31f4      	adds	r1, #244	@ 0xf4
 8017720:	6878      	ldr	r0, [r7, #4]
 8017722:	30f6      	adds	r0, #246	@ 0xf6
 8017724:	9003      	str	r0, [sp, #12]
 8017726:	9102      	str	r1, [sp, #8]
 8017728:	9201      	str	r2, [sp, #4]
 801772a:	9300      	str	r3, [sp, #0]
 801772c:	2300      	movs	r3, #0
 801772e:	2200      	movs	r2, #0
 8017730:	496b      	ldr	r1, [pc, #428]	@ (80178e0 <_ZN6Screen11renderMeterEv+0x560>)
 8017732:	4620      	mov	r0, r4
 8017734:	f7eb f9bf 	bl	8002ab6 <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>
    chargingX = overallBorderWidth - batteryW - chargingW - 2 * batterySpacer;
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801773e:	687a      	ldr	r2, [r7, #4]
 8017740:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	@ 0xd0
 8017744:	1a9b      	subs	r3, r3, r2
 8017746:	687a      	ldr	r2, [r7, #4]
 8017748:	f8b2 20f4 	ldrh.w	r2, [r2, #244]	@ 0xf4
 801774c:	1a9a      	subs	r2, r3, r2
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8017754:	005b      	lsls	r3, r3, #1
 8017756:	1ad2      	subs	r2, r2, r3
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
    chargingY = statusBorderY + statusHeight / 2 + chargingH / 2;
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801776a:	0fd9      	lsrs	r1, r3, #31
 801776c:	440b      	add	r3, r1
 801776e:	105b      	asrs	r3, r3, #1
 8017770:	4413      	add	r3, r2
 8017772:	687a      	ldr	r2, [r7, #4]
 8017774:	f8b2 20f6 	ldrh.w	r2, [r2, #246]	@ 0xf6
 8017778:	0852      	lsrs	r2, r2, #1
 801777a:	b292      	uxth	r2, r2
 801777c:	441a      	add	r2, r3
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
    canvas.setTextColor(TEXT_COLOR);
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	336c      	adds	r3, #108	@ 0x6c
 8017788:	f24a 3129 	movw	r1, #41769	@ 0xa329
 801778c:	4618      	mov	r0, r3
 801778e:	f7e9 fe94 	bl	80014ba <_ZN12Adafruit_GFX12setTextColorEt>
    // // Serial.println(chargingX);
    // // Serial.println(chargingY);
    canvas.setCursor(chargingX, chargingY);
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801779e:	b219      	sxth	r1, r3
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80177a6:	b21b      	sxth	r3, r3
 80177a8:	461a      	mov	r2, r3
 80177aa:	f7e9 fe72 	bl	8001492 <_ZN12Adafruit_GFX9setCursorEss>
    canvas.print("+");
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	336c      	adds	r3, #108	@ 0x6c
 80177b2:	494c      	ldr	r1, [pc, #304]	@ (80178e4 <_ZN6Screen11renderMeterEv+0x564>)
 80177b4:	4618      	mov	r0, r3
 80177b6:	f7eb fe10 	bl	80033da <_ZN5Print5printEPKc>

    // calculate size of settings:
    canvas.getTextBounds("Settings", 0, 0, &label1X, &label1Y, &label1W, &label1H);
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80177c6:	687a      	ldr	r2, [r7, #4]
 80177c8:	f502 72b3 	add.w	r2, r2, #358	@ 0x166
 80177cc:	6879      	ldr	r1, [r7, #4]
 80177ce:	f501 71b4 	add.w	r1, r1, #360	@ 0x168
 80177d2:	6878      	ldr	r0, [r7, #4]
 80177d4:	f500 70b5 	add.w	r0, r0, #362	@ 0x16a
 80177d8:	9003      	str	r0, [sp, #12]
 80177da:	9102      	str	r1, [sp, #8]
 80177dc:	9201      	str	r2, [sp, #4]
 80177de:	9300      	str	r3, [sp, #0]
 80177e0:	2300      	movs	r3, #0
 80177e2:	2200      	movs	r2, #0
 80177e4:	4940      	ldr	r1, [pc, #256]	@ (80178e8 <_ZN6Screen11renderMeterEv+0x568>)
 80177e6:	4620      	mov	r0, r4
 80177e8:	f7eb f965 	bl	8002ab6 <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>
    label1X = buttonX1 + buttonWidth / 2 - label1W / 2;
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80177f2:	b29a      	uxth	r2, r3
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 80177fa:	0fd9      	lsrs	r1, r3, #31
 80177fc:	440b      	add	r3, r1
 80177fe:	105b      	asrs	r3, r3, #1
 8017800:	b29b      	uxth	r3, r3
 8017802:	4413      	add	r3, r2
 8017804:	b29a      	uxth	r2, r3
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	f8b3 3168 	ldrh.w	r3, [r3, #360]	@ 0x168
 801780c:	085b      	lsrs	r3, r3, #1
 801780e:	b29b      	uxth	r3, r3
 8017810:	1ad3      	subs	r3, r2, r3
 8017812:	b29b      	uxth	r3, r3
 8017814:	b21a      	sxth	r2, r3
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164
    label1Y = buttonY1 + buttonHeight - label1H;
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 8017822:	b29a      	uxth	r2, r3
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 801782a:	b29b      	uxth	r3, r3
 801782c:	4413      	add	r3, r2
 801782e:	b29a      	uxth	r2, r3
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	f8b3 316a 	ldrh.w	r3, [r3, #362]	@ 0x16a
 8017836:	1ad3      	subs	r3, r2, r3
 8017838:	b29b      	uxth	r3, r3
 801783a:	b21a      	sxth	r2, r3
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	f8a3 2166 	strh.w	r2, [r3, #358]	@ 0x166
    canvas.setTextColor(BACKGROUND_COLOR);
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	336c      	adds	r3, #108	@ 0x6c
 8017846:	f64d 41ff 	movw	r1, #56575	@ 0xdcff
 801784a:	4618      	mov	r0, r3
 801784c:	f7e9 fe35 	bl	80014ba <_ZN12Adafruit_GFX12setTextColorEt>
    // Serial.println(label1X);
    // Serial.println(label1Y);
    canvas.setCursor(label1X, label1Y);
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	f9b3 1164 	ldrsh.w	r1, [r3, #356]	@ 0x164
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	f9b3 3166 	ldrsh.w	r3, [r3, #358]	@ 0x166
 8017862:	461a      	mov	r2, r3
 8017864:	f7e9 fe15 	bl	8001492 <_ZN12Adafruit_GFX9setCursorEss>
    canvas.print("Settings");
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	336c      	adds	r3, #108	@ 0x6c
 801786c:	491e      	ldr	r1, [pc, #120]	@ (80178e8 <_ZN6Screen11renderMeterEv+0x568>)
 801786e:	4618      	mov	r0, r3
 8017870:	f7eb fdb3 	bl	80033da <_ZN5Print5printEPKc>

    canvas.getTextBounds("Sleep", 0, 0, &label2X, &label2Y, &label2W, &label2H);
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8017880:	687a      	ldr	r2, [r7, #4]
 8017882:	f502 72b7 	add.w	r2, r2, #366	@ 0x16e
 8017886:	6879      	ldr	r1, [r7, #4]
 8017888:	f501 71b8 	add.w	r1, r1, #368	@ 0x170
 801788c:	6878      	ldr	r0, [r7, #4]
 801788e:	f500 70b9 	add.w	r0, r0, #370	@ 0x172
 8017892:	9003      	str	r0, [sp, #12]
 8017894:	9102      	str	r1, [sp, #8]
 8017896:	9201      	str	r2, [sp, #4]
 8017898:	9300      	str	r3, [sp, #0]
 801789a:	2300      	movs	r3, #0
 801789c:	2200      	movs	r2, #0
 801789e:	4913      	ldr	r1, [pc, #76]	@ (80178ec <_ZN6Screen11renderMeterEv+0x56c>)
 80178a0:	4620      	mov	r0, r4
 80178a2:	f7eb f908 	bl	8002ab6 <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>
    label2X = buttonX2 + buttonWidth / 2 - label2W / 2;
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 80178ac:	b29a      	uxth	r2, r3
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 80178b4:	0fd9      	lsrs	r1, r3, #31
 80178b6:	440b      	add	r3, r1
 80178b8:	105b      	asrs	r3, r3, #1
 80178ba:	b29b      	uxth	r3, r3
 80178bc:	4413      	add	r3, r2
 80178be:	b29a      	uxth	r2, r3
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	f8b3 3170 	ldrh.w	r3, [r3, #368]	@ 0x170
 80178c6:	085b      	lsrs	r3, r3, #1
 80178c8:	b29b      	uxth	r3, r3
 80178ca:	1ad3      	subs	r3, r2, r3
 80178cc:	b29b      	uxth	r3, r3
 80178ce:	b21a      	sxth	r2, r3
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	e00d      	b.n	80178f0 <_ZN6Screen11renderMeterEv+0x570>
 80178d4:	20000358 	.word	0x20000358
 80178d8:	0801cfdc 	.word	0x0801cfdc
 80178dc:	0801cfe4 	.word	0x0801cfe4
 80178e0:	0801cfec 	.word	0x0801cfec
 80178e4:	0801cff0 	.word	0x0801cff0
 80178e8:	0801cff4 	.word	0x0801cff4
 80178ec:	0801d000 	.word	0x0801d000
 80178f0:	f8a3 216c 	strh.w	r2, [r3, #364]	@ 0x16c
    label2Y = buttonY2 + buttonHeight - label2H;
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 80178fa:	b29a      	uxth	r2, r3
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8017902:	b29b      	uxth	r3, r3
 8017904:	4413      	add	r3, r2
 8017906:	b29a      	uxth	r2, r3
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	f8b3 3172 	ldrh.w	r3, [r3, #370]	@ 0x172
 801790e:	1ad3      	subs	r3, r2, r3
 8017910:	b29b      	uxth	r3, r3
 8017912:	b21a      	sxth	r2, r3
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	f8a3 216e 	strh.w	r2, [r3, #366]	@ 0x16e
    canvas.setTextColor(BACKGROUND_COLOR);
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	336c      	adds	r3, #108	@ 0x6c
 801791e:	f64d 41ff 	movw	r1, #56575	@ 0xdcff
 8017922:	4618      	mov	r0, r3
 8017924:	f7e9 fdc9 	bl	80014ba <_ZN12Adafruit_GFX12setTextColorEt>
    // Serial.println(label2X);
    // Serial.println(label2Y);
    canvas.setCursor(label2X, label2Y);
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	f9b3 116c 	ldrsh.w	r1, [r3, #364]	@ 0x16c
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	f9b3 316e 	ldrsh.w	r3, [r3, #366]	@ 0x16e
 801793a:	461a      	mov	r2, r3
 801793c:	f7e9 fda9 	bl	8001492 <_ZN12Adafruit_GFX9setCursorEss>
    canvas.print("Sleep");
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	336c      	adds	r3, #108	@ 0x6c
 8017944:	498f      	ldr	r1, [pc, #572]	@ (8017b84 <_ZN6Screen11renderMeterEv+0x804>)
 8017946:	4618      	mov	r0, r3
 8017948:	f7eb fd47 	bl	80033da <_ZN5Print5printEPKc>

    drawMeterLines(meterOriginX, meterOriginY, meterHeight - 40, -8, 8);
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	f8d3 1108 	ldr.w	r1, [r3, #264]	@ 0x108
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 801795e:	3b28      	subs	r3, #40	@ 0x28
 8017960:	2008      	movs	r0, #8
 8017962:	9001      	str	r0, [sp, #4]
 8017964:	f06f 0007 	mvn.w	r0, #7
 8017968:	9000      	str	r0, [sp, #0]
 801796a:	6878      	ldr	r0, [r7, #4]
 801796c:	f000 f914 	bl	8017b98 <_ZN6Screen14drawMeterLinesEiiiii>

    canvas.getTextBounds("DELTA T PROBE", 0, 0, &textOriginX, &textOriginY, &textWidth, &textHeight);
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 801797c:	687a      	ldr	r2, [r7, #4]
 801797e:	f502 72bb 	add.w	r2, r2, #374	@ 0x176
 8017982:	6879      	ldr	r1, [r7, #4]
 8017984:	f501 71bc 	add.w	r1, r1, #376	@ 0x178
 8017988:	6878      	ldr	r0, [r7, #4]
 801798a:	f500 70bd 	add.w	r0, r0, #378	@ 0x17a
 801798e:	9003      	str	r0, [sp, #12]
 8017990:	9102      	str	r1, [sp, #8]
 8017992:	9201      	str	r2, [sp, #4]
 8017994:	9300      	str	r3, [sp, #0]
 8017996:	2300      	movs	r3, #0
 8017998:	2200      	movs	r2, #0
 801799a:	497b      	ldr	r1, [pc, #492]	@ (8017b88 <_ZN6Screen11renderMeterEv+0x808>)
 801799c:	4620      	mov	r0, r4
 801799e:	f7eb f88a 	bl	8002ab6 <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>
    textX = labelX + labelWidth / 2 - textWidth / 2;
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 80179ae:	0fd9      	lsrs	r1, r3, #31
 80179b0:	440b      	add	r3, r1
 80179b2:	105b      	asrs	r3, r3, #1
 80179b4:	4413      	add	r3, r2
 80179b6:	687a      	ldr	r2, [r7, #4]
 80179b8:	f8b2 2178 	ldrh.w	r2, [r2, #376]	@ 0x178
 80179bc:	0852      	lsrs	r2, r2, #1
 80179be:	b292      	uxth	r2, r2
 80179c0:	1a9a      	subs	r2, r3, r2
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
    textY = labelY + textHeight + meterSpacer;
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80179ce:	687a      	ldr	r2, [r7, #4]
 80179d0:	f8b2 217a 	ldrh.w	r2, [r2, #378]	@ 0x17a
 80179d4:	441a      	add	r2, r3
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80179dc:	441a      	add	r2, r3
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
    canvas.setTextColor(TEXT_COLOR);
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	336c      	adds	r3, #108	@ 0x6c
 80179e8:	f24a 3129 	movw	r1, #41769	@ 0xa329
 80179ec:	4618      	mov	r0, r3
 80179ee:	f7e9 fd64 	bl	80014ba <_ZN12Adafruit_GFX12setTextColorEt>

    canvas.setCursor(textX, textY);
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 80179fe:	b219      	sxth	r1, r3
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8017a06:	b21b      	sxth	r3, r3
 8017a08:	461a      	mov	r2, r3
 8017a0a:	f7e9 fd42 	bl	8001492 <_ZN12Adafruit_GFX9setCursorEss>
    canvas.print("DELTA T PROBE");
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	336c      	adds	r3, #108	@ 0x6c
 8017a12:	495d      	ldr	r1, [pc, #372]	@ (8017b88 <_ZN6Screen11renderMeterEv+0x808>)
 8017a14:	4618      	mov	r0, r3
 8017a16:	f7eb fce0 	bl	80033da <_ZN5Print5printEPKc>

    canvas.getTextBounds("The Instrument Company", 0, 0, &textOriginX, &textOriginY, &textWidth, &textHeight);
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 8017a26:	687a      	ldr	r2, [r7, #4]
 8017a28:	f502 72bb 	add.w	r2, r2, #374	@ 0x176
 8017a2c:	6879      	ldr	r1, [r7, #4]
 8017a2e:	f501 71bc 	add.w	r1, r1, #376	@ 0x178
 8017a32:	6878      	ldr	r0, [r7, #4]
 8017a34:	f500 70bd 	add.w	r0, r0, #378	@ 0x17a
 8017a38:	9003      	str	r0, [sp, #12]
 8017a3a:	9102      	str	r1, [sp, #8]
 8017a3c:	9201      	str	r2, [sp, #4]
 8017a3e:	9300      	str	r3, [sp, #0]
 8017a40:	2300      	movs	r3, #0
 8017a42:	2200      	movs	r2, #0
 8017a44:	4951      	ldr	r1, [pc, #324]	@ (8017b8c <_ZN6Screen11renderMeterEv+0x80c>)
 8017a46:	4620      	mov	r0, r4
 8017a48:	f7eb f835 	bl	8002ab6 <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>
    textX = labelX + labelWidth / 2 - textWidth / 2;
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8017a58:	0fd9      	lsrs	r1, r3, #31
 8017a5a:	440b      	add	r3, r1
 8017a5c:	105b      	asrs	r3, r3, #1
 8017a5e:	4413      	add	r3, r2
 8017a60:	687a      	ldr	r2, [r7, #4]
 8017a62:	f8b2 2178 	ldrh.w	r2, [r2, #376]	@ 0x178
 8017a66:	0852      	lsrs	r2, r2, #1
 8017a68:	b292      	uxth	r2, r2
 8017a6a:	1a9a      	subs	r2, r3, r2
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
    textY = labelY + textHeight * 2 + meterSpacer;
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	f8b3 317a 	ldrh.w	r3, [r3, #378]	@ 0x17a
 8017a7e:	005b      	lsls	r3, r3, #1
 8017a80:	441a      	add	r2, r3
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8017a88:	441a      	add	r2, r3
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
    canvas.setTextColor(TEXT_COLOR);
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	336c      	adds	r3, #108	@ 0x6c
 8017a94:	f24a 3129 	movw	r1, #41769	@ 0xa329
 8017a98:	4618      	mov	r0, r3
 8017a9a:	f7e9 fd0e 	bl	80014ba <_ZN12Adafruit_GFX12setTextColorEt>

    canvas.setCursor(textX, textY);
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8017aaa:	b219      	sxth	r1, r3
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8017ab2:	b21b      	sxth	r3, r3
 8017ab4:	461a      	mov	r2, r3
 8017ab6:	f7e9 fcec 	bl	8001492 <_ZN12Adafruit_GFX9setCursorEss>
    canvas.print("The Instrument Company");
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	336c      	adds	r3, #108	@ 0x6c
 8017abe:	4933      	ldr	r1, [pc, #204]	@ (8017b8c <_ZN6Screen11renderMeterEv+0x80c>)
 8017ac0:	4618      	mov	r0, r3
 8017ac2:	f7eb fc8a 	bl	80033da <_ZN5Print5printEPKc>

    canvas.getTextBounds("Dr. Ed Carr, Fort Collins, CO", 0, 0, &textOriginX, &textOriginY, &textWidth, &textHeight);
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 8017ad2:	687a      	ldr	r2, [r7, #4]
 8017ad4:	f502 72bb 	add.w	r2, r2, #374	@ 0x176
 8017ad8:	6879      	ldr	r1, [r7, #4]
 8017ada:	f501 71bc 	add.w	r1, r1, #376	@ 0x178
 8017ade:	6878      	ldr	r0, [r7, #4]
 8017ae0:	f500 70bd 	add.w	r0, r0, #378	@ 0x17a
 8017ae4:	9003      	str	r0, [sp, #12]
 8017ae6:	9102      	str	r1, [sp, #8]
 8017ae8:	9201      	str	r2, [sp, #4]
 8017aea:	9300      	str	r3, [sp, #0]
 8017aec:	2300      	movs	r3, #0
 8017aee:	2200      	movs	r2, #0
 8017af0:	4927      	ldr	r1, [pc, #156]	@ (8017b90 <_ZN6Screen11renderMeterEv+0x810>)
 8017af2:	4620      	mov	r0, r4
 8017af4:	f7ea ffdf 	bl	8002ab6 <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>
    textX = labelX + labelWidth / 2 - textWidth / 2;
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8017b04:	0fd9      	lsrs	r1, r3, #31
 8017b06:	440b      	add	r3, r1
 8017b08:	105b      	asrs	r3, r3, #1
 8017b0a:	4413      	add	r3, r2
 8017b0c:	687a      	ldr	r2, [r7, #4]
 8017b0e:	f8b2 2178 	ldrh.w	r2, [r2, #376]	@ 0x178
 8017b12:	0852      	lsrs	r2, r2, #1
 8017b14:	b292      	uxth	r2, r2
 8017b16:	1a9a      	subs	r2, r3, r2
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
    textY = labelY + textHeight * 3 + meterSpacer * 2;
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	f8b3 317a 	ldrh.w	r3, [r3, #378]	@ 0x17a
 8017b2a:	4619      	mov	r1, r3
 8017b2c:	460b      	mov	r3, r1
 8017b2e:	005b      	lsls	r3, r3, #1
 8017b30:	440b      	add	r3, r1
 8017b32:	441a      	add	r2, r3
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8017b3a:	005b      	lsls	r3, r3, #1
 8017b3c:	441a      	add	r2, r3
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
    canvas.setTextColor(TEXT_COLOR);
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	336c      	adds	r3, #108	@ 0x6c
 8017b48:	f24a 3129 	movw	r1, #41769	@ 0xa329
 8017b4c:	4618      	mov	r0, r3
 8017b4e:	f7e9 fcb4 	bl	80014ba <_ZN12Adafruit_GFX12setTextColorEt>

    canvas.setCursor(textX, textY);
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8017b5e:	b219      	sxth	r1, r3
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8017b66:	b21b      	sxth	r3, r3
 8017b68:	461a      	mov	r2, r3
 8017b6a:	f7e9 fc92 	bl	8001492 <_ZN12Adafruit_GFX9setCursorEss>
    canvas.print("Dr. Ed Carr, Fort Collins, CO");
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	336c      	adds	r3, #108	@ 0x6c
 8017b72:	4907      	ldr	r1, [pc, #28]	@ (8017b90 <_ZN6Screen11renderMeterEv+0x810>)
 8017b74:	4618      	mov	r0, r3
 8017b76:	f7eb fc30 	bl	80033da <_ZN5Print5printEPKc>
    //
    // canvas.getTextBounds("Fort Collins, CO", 0, 0, &textOriginX, &textOriginY, &fccotextWidth, &fccotextHeight);
    // canvas.setCursor(width / 2 - fccotextWidth / 2, screenOffset + statusHeight + meterHeight + dttextHeight + tictextHeight + fccotextHeight + screenOffset);
    // canvas.print("Fort Collins, CO");
    //
}
 8017b7a:	bf00      	nop
 8017b7c:	3714      	adds	r7, #20
 8017b7e:	46bd      	mov	sp, r7
 8017b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b82:	bf00      	nop
 8017b84:	0801d000 	.word	0x0801d000
 8017b88:	0801d008 	.word	0x0801d008
 8017b8c:	0801d018 	.word	0x0801d018
 8017b90:	0801d030 	.word	0x0801d030
 8017b94:	00000000 	.word	0x00000000

08017b98 <_ZN6Screen14drawMeterLinesEiiiii>:

void Screen::drawMeterLines(int centerX, int centerY, int radius, int lineStart, int lineEnd)
{ // points = 8 - - 8 = 16
 8017b98:	b5b0      	push	{r4, r5, r7, lr}
 8017b9a:	ed2d 8b02 	vpush	{d8}
 8017b9e:	b098      	sub	sp, #96	@ 0x60
 8017ba0:	af04      	add	r7, sp, #16
 8017ba2:	60f8      	str	r0, [r7, #12]
 8017ba4:	60b9      	str	r1, [r7, #8]
 8017ba6:	607a      	str	r2, [r7, #4]
 8017ba8:	603b      	str	r3, [r7, #0]
    int points = lineEnd - lineStart;
 8017baa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8017bac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017bae:	1ad3      	subs	r3, r2, r3
 8017bb0:	647b      	str	r3, [r7, #68]	@ 0x44
    //[0 1 2 ... 17 18]
    canvas.fillCircle(centerX, centerY, 3, ST7789V_BLACK);
 8017bb2:	68fb      	ldr	r3, [r7, #12]
 8017bb4:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017bb8:	68bb      	ldr	r3, [r7, #8]
 8017bba:	b219      	sxth	r1, r3
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	b21a      	sxth	r2, r3
 8017bc0:	2300      	movs	r3, #0
 8017bc2:	9300      	str	r3, [sp, #0]
 8017bc4:	2303      	movs	r3, #3
 8017bc6:	f7e9 ff92 	bl	8001aee <_ZN12Adafruit_GFX10fillCircleEssst>

    // Loop to draw the lines
    for (int i = lineStart; i <= lineEnd; i++)
 8017bca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017bcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017bce:	e270      	b.n	80180b2 <_ZN6Screen14drawMeterLinesEiiiii+0x51a>
    {
        // Calculate angle for the line
        // float angle = (i * (90.0 / points)) + 235 - 90 / points;
        // goes from -8 * 90/16 + 270 = 225, to 8 * 90/18 + 270 = 315
        float angle = (i * (90.0 / points)) + 270; // distribute over 90 deg and shift by 270
 8017bd0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8017bd2:	f7e8 fc8f 	bl	80004f4 <__aeabi_i2d>
 8017bd6:	4604      	mov	r4, r0
 8017bd8:	460d      	mov	r5, r1
 8017bda:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8017bdc:	f7e8 fc8a 	bl	80004f4 <__aeabi_i2d>
 8017be0:	4602      	mov	r2, r0
 8017be2:	460b      	mov	r3, r1
 8017be4:	f04f 0000 	mov.w	r0, #0
 8017be8:	49bd      	ldr	r1, [pc, #756]	@ (8017ee0 <_ZN6Screen14drawMeterLinesEiiiii+0x348>)
 8017bea:	f7e8 fe17 	bl	800081c <__aeabi_ddiv>
 8017bee:	4602      	mov	r2, r0
 8017bf0:	460b      	mov	r3, r1
 8017bf2:	4620      	mov	r0, r4
 8017bf4:	4629      	mov	r1, r5
 8017bf6:	f7e8 fce7 	bl	80005c8 <__aeabi_dmul>
 8017bfa:	4602      	mov	r2, r0
 8017bfc:	460b      	mov	r3, r1
 8017bfe:	4610      	mov	r0, r2
 8017c00:	4619      	mov	r1, r3
 8017c02:	a3b5      	add	r3, pc, #724	@ (adr r3, 8017ed8 <_ZN6Screen14drawMeterLinesEiiiii+0x340>)
 8017c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c08:	f7e8 fb28 	bl	800025c <__adddf3>
 8017c0c:	4602      	mov	r2, r0
 8017c0e:	460b      	mov	r3, r1
 8017c10:	4610      	mov	r0, r2
 8017c12:	4619      	mov	r1, r3
 8017c14:	f7e8 ffb0 	bl	8000b78 <__aeabi_d2f>
 8017c18:	4603      	mov	r3, r0
 8017c1a:	643b      	str	r3, [r7, #64]	@ 0x40

        // Convert angle to radians
        float rad = radians(angle);
 8017c1c:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 8017c20:	68f8      	ldr	r0, [r7, #12]
 8017c22:	f000 fb05 	bl	8018230 <_ZN6Screen7radiansEf>
 8017c26:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c

        // Calculate the endpoint of the line (on the circle's perimeter) // outer ring i think
        int xEnd = centerX + radius * cos(rad);
 8017c2a:	68bb      	ldr	r3, [r7, #8]
 8017c2c:	ee07 3a90 	vmov	s15, r3
 8017c30:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8017c34:	683b      	ldr	r3, [r7, #0]
 8017c36:	ee07 3a90 	vmov	s15, r3
 8017c3a:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8017c3e:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8017c42:	f7ff fb7d 	bl	8017340 <_ZSt3cosf>
 8017c46:	eef0 7a40 	vmov.f32	s15, s0
 8017c4a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8017c4e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8017c52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017c56:	ee17 3a90 	vmov	r3, s15
 8017c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
        int yEnd = centerY + radius * sin(rad);
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	ee07 3a90 	vmov	s15, r3
 8017c62:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8017c66:	683b      	ldr	r3, [r7, #0]
 8017c68:	ee07 3a90 	vmov	s15, r3
 8017c6c:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8017c70:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8017c74:	f7ff fb74 	bl	8017360 <_ZSt3sinf>
 8017c78:	eef0 7a40 	vmov.f32	s15, s0
 8017c7c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8017c80:	ee78 7a27 	vadd.f32	s15, s16, s15
 8017c84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017c88:	ee17 3a90 	vmov	r3, s15
 8017c8c:	637b      	str	r3, [r7, #52]	@ 0x34

        // Calculate the endpoint of the line (on the circle's perimeter)
        int xStart = centerX + (radius - 20) * cos(rad);
 8017c8e:	68bb      	ldr	r3, [r7, #8]
 8017c90:	ee07 3a90 	vmov	s15, r3
 8017c94:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8017c98:	683b      	ldr	r3, [r7, #0]
 8017c9a:	3b14      	subs	r3, #20
 8017c9c:	ee07 3a90 	vmov	s15, r3
 8017ca0:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8017ca4:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8017ca8:	f7ff fb4a 	bl	8017340 <_ZSt3cosf>
 8017cac:	eef0 7a40 	vmov.f32	s15, s0
 8017cb0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8017cb4:	ee78 7a27 	vadd.f32	s15, s16, s15
 8017cb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017cbc:	ee17 3a90 	vmov	r3, s15
 8017cc0:	633b      	str	r3, [r7, #48]	@ 0x30
        int yStart = centerY + (radius - 20) * sin(rad);
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	ee07 3a90 	vmov	s15, r3
 8017cc8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8017ccc:	683b      	ldr	r3, [r7, #0]
 8017cce:	3b14      	subs	r3, #20
 8017cd0:	ee07 3a90 	vmov	s15, r3
 8017cd4:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8017cd8:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8017cdc:	f7ff fb40 	bl	8017360 <_ZSt3sinf>
 8017ce0:	eef0 7a40 	vmov.f32	s15, s0
 8017ce4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8017ce8:	ee78 7a27 	vadd.f32	s15, s16, s15
 8017cec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017cf0:	ee17 3a90 	vmov	r3, s15
 8017cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c

        // Draw a normal line
        canvas.drawLine(xStart, yStart, xEnd, yEnd, ST7789V_BLACK);
 8017cf6:	68fb      	ldr	r3, [r7, #12]
 8017cf8:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017cfe:	b219      	sxth	r1, r3
 8017d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d02:	b21a      	sxth	r2, r3
 8017d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d06:	b21c      	sxth	r4, r3
 8017d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017d0a:	b21b      	sxth	r3, r3
 8017d0c:	2500      	movs	r5, #0
 8017d0e:	9501      	str	r5, [sp, #4]
 8017d10:	9300      	str	r3, [sp, #0]
 8017d12:	4623      	mov	r3, r4
 8017d14:	f7e9 fe6e 	bl	80019f4 <_ZN12Adafruit_GFX8drawLineEsssst>

        if (i == lineStart)
 8017d18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017d1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017d1c:	429a      	cmp	r2, r3
 8017d1e:	d122      	bne.n	8017d66 <_ZN6Screen14drawMeterLinesEiiiii+0x1ce>
        {

            canvas.setCursor(overallBorderX + meterSpacer, yEnd - 10);
 8017d20:	68fb      	ldr	r3, [r7, #12]
 8017d22:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8017d2c:	b29a      	uxth	r2, r3
 8017d2e:	68fb      	ldr	r3, [r7, #12]
 8017d30:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8017d34:	b29b      	uxth	r3, r3
 8017d36:	4413      	add	r3, r2
 8017d38:	b29b      	uxth	r3, r3
 8017d3a:	b219      	sxth	r1, r3
 8017d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017d3e:	b29b      	uxth	r3, r3
 8017d40:	3b0a      	subs	r3, #10
 8017d42:	b29b      	uxth	r3, r3
 8017d44:	b21b      	sxth	r3, r3
 8017d46:	461a      	mov	r2, r3
 8017d48:	f7e9 fba3 	bl	8001492 <_ZN12Adafruit_GFX9setCursorEss>
            canvas.setTextColor(TEXT_COLOR);
 8017d4c:	68fb      	ldr	r3, [r7, #12]
 8017d4e:	336c      	adds	r3, #108	@ 0x6c
 8017d50:	f24a 3129 	movw	r1, #41769	@ 0xa329
 8017d54:	4618      	mov	r0, r3
 8017d56:	f7e9 fbb0 	bl	80014ba <_ZN12Adafruit_GFX12setTextColorEt>
            canvas.print("25");
 8017d5a:	68fb      	ldr	r3, [r7, #12]
 8017d5c:	336c      	adds	r3, #108	@ 0x6c
 8017d5e:	4961      	ldr	r1, [pc, #388]	@ (8017ee4 <_ZN6Screen14drawMeterLinesEiiiii+0x34c>)
 8017d60:	4618      	mov	r0, r3
 8017d62:	f7eb fb3a 	bl	80033da <_ZN5Print5printEPKc>
        }

        if (i == -3)
 8017d66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017d68:	f113 0f03 	cmn.w	r3, #3
 8017d6c:	d151      	bne.n	8017e12 <_ZN6Screen14drawMeterLinesEiiiii+0x27a>
        {
            canvas.setTextColor(TEXT_COLOR);
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	336c      	adds	r3, #108	@ 0x6c
 8017d72:	f24a 3129 	movw	r1, #41769	@ 0xa329
 8017d76:	4618      	mov	r0, r3
 8017d78:	f7e9 fb9f 	bl	80014ba <_ZN12Adafruit_GFX12setTextColorEt>

            canvas.setCursor(xEnd, yEnd - 20);
 8017d7c:	68fb      	ldr	r3, [r7, #12]
 8017d7e:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d84:	b219      	sxth	r1, r3
 8017d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017d88:	b29b      	uxth	r3, r3
 8017d8a:	3b14      	subs	r3, #20
 8017d8c:	b29b      	uxth	r3, r3
 8017d8e:	b21b      	sxth	r3, r3
 8017d90:	461a      	mov	r2, r3
 8017d92:	f7e9 fb7e 	bl	8001492 <_ZN12Adafruit_GFX9setCursorEss>

            canvas.print("LO");
 8017d96:	68fb      	ldr	r3, [r7, #12]
 8017d98:	336c      	adds	r3, #108	@ 0x6c
 8017d9a:	4953      	ldr	r1, [pc, #332]	@ (8017ee8 <_ZN6Screen14drawMeterLinesEiiiii+0x350>)
 8017d9c:	4618      	mov	r0, r3
 8017d9e:	f7eb fb1c 	bl	80033da <_ZN5Print5printEPKc>

            canvas.getTextBounds("HI", 0, 0, &textOriginX, &textOriginY, &textWidth, &textHeight);
 8017da2:	68fb      	ldr	r3, [r7, #12]
 8017da4:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8017da8:	68fb      	ldr	r3, [r7, #12]
 8017daa:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 8017dae:	68fa      	ldr	r2, [r7, #12]
 8017db0:	f502 72bb 	add.w	r2, r2, #374	@ 0x176
 8017db4:	68f9      	ldr	r1, [r7, #12]
 8017db6:	f501 71bc 	add.w	r1, r1, #376	@ 0x178
 8017dba:	68f8      	ldr	r0, [r7, #12]
 8017dbc:	f500 70bd 	add.w	r0, r0, #378	@ 0x17a
 8017dc0:	9003      	str	r0, [sp, #12]
 8017dc2:	9102      	str	r1, [sp, #8]
 8017dc4:	9201      	str	r2, [sp, #4]
 8017dc6:	9300      	str	r3, [sp, #0]
 8017dc8:	2300      	movs	r3, #0
 8017dca:	2200      	movs	r2, #0
 8017dcc:	4947      	ldr	r1, [pc, #284]	@ (8017eec <_ZN6Screen14drawMeterLinesEiiiii+0x354>)
 8017dce:	4620      	mov	r0, r4
 8017dd0:	f7ea fe71 	bl	8002ab6 <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>

            canvas.setCursor(overallBorderWidth - xEnd - textWidth, yEnd - 20);
 8017dd4:	68fb      	ldr	r3, [r7, #12]
 8017dd6:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017dda:	68fb      	ldr	r3, [r7, #12]
 8017ddc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8017de0:	b29a      	uxth	r2, r3
 8017de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017de4:	b29b      	uxth	r3, r3
 8017de6:	1ad3      	subs	r3, r2, r3
 8017de8:	b29a      	uxth	r2, r3
 8017dea:	68fb      	ldr	r3, [r7, #12]
 8017dec:	f8b3 3178 	ldrh.w	r3, [r3, #376]	@ 0x178
 8017df0:	1ad3      	subs	r3, r2, r3
 8017df2:	b29b      	uxth	r3, r3
 8017df4:	b219      	sxth	r1, r3
 8017df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017df8:	b29b      	uxth	r3, r3
 8017dfa:	3b14      	subs	r3, #20
 8017dfc:	b29b      	uxth	r3, r3
 8017dfe:	b21b      	sxth	r3, r3
 8017e00:	461a      	mov	r2, r3
 8017e02:	f7e9 fb46 	bl	8001492 <_ZN12Adafruit_GFX9setCursorEss>

            canvas.print("HI");
 8017e06:	68fb      	ldr	r3, [r7, #12]
 8017e08:	336c      	adds	r3, #108	@ 0x6c
 8017e0a:	4938      	ldr	r1, [pc, #224]	@ (8017eec <_ZN6Screen14drawMeterLinesEiiiii+0x354>)
 8017e0c:	4618      	mov	r0, r3
 8017e0e:	f7eb fae4 	bl	80033da <_ZN5Print5printEPKc>
        }

        if (i == 0)
 8017e12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d13a      	bne.n	8017e8e <_ZN6Screen14drawMeterLinesEiiiii+0x2f6>
        {
            canvas.getTextBounds("0", 0, 0, &textOriginX, &textOriginY, &textWidth, &textHeight);
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8017e1e:	68fb      	ldr	r3, [r7, #12]
 8017e20:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 8017e24:	68fa      	ldr	r2, [r7, #12]
 8017e26:	f502 72bb 	add.w	r2, r2, #374	@ 0x176
 8017e2a:	68f9      	ldr	r1, [r7, #12]
 8017e2c:	f501 71bc 	add.w	r1, r1, #376	@ 0x178
 8017e30:	68f8      	ldr	r0, [r7, #12]
 8017e32:	f500 70bd 	add.w	r0, r0, #378	@ 0x17a
 8017e36:	9003      	str	r0, [sp, #12]
 8017e38:	9102      	str	r1, [sp, #8]
 8017e3a:	9201      	str	r2, [sp, #4]
 8017e3c:	9300      	str	r3, [sp, #0]
 8017e3e:	2300      	movs	r3, #0
 8017e40:	2200      	movs	r2, #0
 8017e42:	492b      	ldr	r1, [pc, #172]	@ (8017ef0 <_ZN6Screen14drawMeterLinesEiiiii+0x358>)
 8017e44:	4620      	mov	r0, r4
 8017e46:	f7ea fe36 	bl	8002ab6 <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>

            canvas.setCursor(xEnd - textWidth / 2, yEnd - 5);
 8017e4a:	68fb      	ldr	r3, [r7, #12]
 8017e4c:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017e52:	b29a      	uxth	r2, r3
 8017e54:	68fb      	ldr	r3, [r7, #12]
 8017e56:	f8b3 3178 	ldrh.w	r3, [r3, #376]	@ 0x178
 8017e5a:	085b      	lsrs	r3, r3, #1
 8017e5c:	b29b      	uxth	r3, r3
 8017e5e:	1ad3      	subs	r3, r2, r3
 8017e60:	b29b      	uxth	r3, r3
 8017e62:	b219      	sxth	r1, r3
 8017e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017e66:	b29b      	uxth	r3, r3
 8017e68:	3b05      	subs	r3, #5
 8017e6a:	b29b      	uxth	r3, r3
 8017e6c:	b21b      	sxth	r3, r3
 8017e6e:	461a      	mov	r2, r3
 8017e70:	f7e9 fb0f 	bl	8001492 <_ZN12Adafruit_GFX9setCursorEss>
            canvas.setTextColor(TEXT_COLOR);
 8017e74:	68fb      	ldr	r3, [r7, #12]
 8017e76:	336c      	adds	r3, #108	@ 0x6c
 8017e78:	f24a 3129 	movw	r1, #41769	@ 0xa329
 8017e7c:	4618      	mov	r0, r3
 8017e7e:	f7e9 fb1c 	bl	80014ba <_ZN12Adafruit_GFX12setTextColorEt>

            canvas.print("0");
 8017e82:	68fb      	ldr	r3, [r7, #12]
 8017e84:	336c      	adds	r3, #108	@ 0x6c
 8017e86:	491a      	ldr	r1, [pc, #104]	@ (8017ef0 <_ZN6Screen14drawMeterLinesEiiiii+0x358>)
 8017e88:	4618      	mov	r0, r3
 8017e8a:	f7eb faa6 	bl	80033da <_ZN5Print5printEPKc>
        }

        if (i == lineEnd)
 8017e8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017e90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017e92:	429a      	cmp	r2, r3
 8017e94:	d150      	bne.n	8017f38 <_ZN6Screen14drawMeterLinesEiiiii+0x3a0>
        {
            canvas.getTextBounds("25", 0, 0, &textOriginX, &textOriginY, &textWidth, &textHeight);
 8017e96:	68fb      	ldr	r3, [r7, #12]
 8017e98:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8017e9c:	68fb      	ldr	r3, [r7, #12]
 8017e9e:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 8017ea2:	68fa      	ldr	r2, [r7, #12]
 8017ea4:	f502 72bb 	add.w	r2, r2, #374	@ 0x176
 8017ea8:	68f9      	ldr	r1, [r7, #12]
 8017eaa:	f501 71bc 	add.w	r1, r1, #376	@ 0x178
 8017eae:	68f8      	ldr	r0, [r7, #12]
 8017eb0:	f500 70bd 	add.w	r0, r0, #378	@ 0x17a
 8017eb4:	9003      	str	r0, [sp, #12]
 8017eb6:	9102      	str	r1, [sp, #8]
 8017eb8:	9201      	str	r2, [sp, #4]
 8017eba:	9300      	str	r3, [sp, #0]
 8017ebc:	2300      	movs	r3, #0
 8017ebe:	2200      	movs	r2, #0
 8017ec0:	4908      	ldr	r1, [pc, #32]	@ (8017ee4 <_ZN6Screen14drawMeterLinesEiiiii+0x34c>)
 8017ec2:	4620      	mov	r0, r4
 8017ec4:	f7ea fdf7 	bl	8002ab6 <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>

            canvas.setCursor(overallBorderWidth - textWidth - meterSpacer, yEnd - 10);
 8017ec8:	68fb      	ldr	r3, [r7, #12]
 8017eca:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017ece:	68fb      	ldr	r3, [r7, #12]
 8017ed0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8017ed4:	e00e      	b.n	8017ef4 <_ZN6Screen14drawMeterLinesEiiiii+0x35c>
 8017ed6:	bf00      	nop
 8017ed8:	00000000 	.word	0x00000000
 8017edc:	4070e000 	.word	0x4070e000
 8017ee0:	40568000 	.word	0x40568000
 8017ee4:	0801d050 	.word	0x0801d050
 8017ee8:	0801d054 	.word	0x0801d054
 8017eec:	0801d058 	.word	0x0801d058
 8017ef0:	0801d05c 	.word	0x0801d05c
 8017ef4:	b29a      	uxth	r2, r3
 8017ef6:	68fb      	ldr	r3, [r7, #12]
 8017ef8:	f8b3 3178 	ldrh.w	r3, [r3, #376]	@ 0x178
 8017efc:	1ad3      	subs	r3, r2, r3
 8017efe:	b29a      	uxth	r2, r3
 8017f00:	68fb      	ldr	r3, [r7, #12]
 8017f02:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8017f06:	b29b      	uxth	r3, r3
 8017f08:	1ad3      	subs	r3, r2, r3
 8017f0a:	b29b      	uxth	r3, r3
 8017f0c:	b219      	sxth	r1, r3
 8017f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017f10:	b29b      	uxth	r3, r3
 8017f12:	3b0a      	subs	r3, #10
 8017f14:	b29b      	uxth	r3, r3
 8017f16:	b21b      	sxth	r3, r3
 8017f18:	461a      	mov	r2, r3
 8017f1a:	f7e9 faba 	bl	8001492 <_ZN12Adafruit_GFX9setCursorEss>
            canvas.setTextColor(TEXT_COLOR);
 8017f1e:	68fb      	ldr	r3, [r7, #12]
 8017f20:	336c      	adds	r3, #108	@ 0x6c
 8017f22:	f24a 3129 	movw	r1, #41769	@ 0xa329
 8017f26:	4618      	mov	r0, r3
 8017f28:	f7e9 fac7 	bl	80014ba <_ZN12Adafruit_GFX12setTextColorEt>
            canvas.print("25");
 8017f2c:	68fb      	ldr	r3, [r7, #12]
 8017f2e:	336c      	adds	r3, #108	@ 0x6c
 8017f30:	4969      	ldr	r1, [pc, #420]	@ (80180d8 <_ZN6Screen14drawMeterLinesEiiiii+0x540>)
 8017f32:	4618      	mov	r0, r3
 8017f34:	f7eb fa51 	bl	80033da <_ZN5Print5printEPKc>
        }

        // draw all the little tick marks
        for (int i = lineStart * 4; i <= lineEnd * 4; i++)
 8017f38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017f3a:	009b      	lsls	r3, r3, #2
 8017f3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017f3e:	e0af      	b.n	80180a0 <_ZN6Screen14drawMeterLinesEiiiii+0x508>
        {
            float angle = (i * 0.25 * (90.0 / points)) + 270; // distribute over 90 deg and shift by 270
 8017f40:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8017f42:	f7e8 fad7 	bl	80004f4 <__aeabi_i2d>
 8017f46:	f04f 0200 	mov.w	r2, #0
 8017f4a:	4b64      	ldr	r3, [pc, #400]	@ (80180dc <_ZN6Screen14drawMeterLinesEiiiii+0x544>)
 8017f4c:	f7e8 fb3c 	bl	80005c8 <__aeabi_dmul>
 8017f50:	4602      	mov	r2, r0
 8017f52:	460b      	mov	r3, r1
 8017f54:	4614      	mov	r4, r2
 8017f56:	461d      	mov	r5, r3
 8017f58:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8017f5a:	f7e8 facb 	bl	80004f4 <__aeabi_i2d>
 8017f5e:	4602      	mov	r2, r0
 8017f60:	460b      	mov	r3, r1
 8017f62:	f04f 0000 	mov.w	r0, #0
 8017f66:	495e      	ldr	r1, [pc, #376]	@ (80180e0 <_ZN6Screen14drawMeterLinesEiiiii+0x548>)
 8017f68:	f7e8 fc58 	bl	800081c <__aeabi_ddiv>
 8017f6c:	4602      	mov	r2, r0
 8017f6e:	460b      	mov	r3, r1
 8017f70:	4620      	mov	r0, r4
 8017f72:	4629      	mov	r1, r5
 8017f74:	f7e8 fb28 	bl	80005c8 <__aeabi_dmul>
 8017f78:	4602      	mov	r2, r0
 8017f7a:	460b      	mov	r3, r1
 8017f7c:	4610      	mov	r0, r2
 8017f7e:	4619      	mov	r1, r3
 8017f80:	a353      	add	r3, pc, #332	@ (adr r3, 80180d0 <_ZN6Screen14drawMeterLinesEiiiii+0x538>)
 8017f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f86:	f7e8 f969 	bl	800025c <__adddf3>
 8017f8a:	4602      	mov	r2, r0
 8017f8c:	460b      	mov	r3, r1
 8017f8e:	4610      	mov	r0, r2
 8017f90:	4619      	mov	r1, r3
 8017f92:	f7e8 fdf1 	bl	8000b78 <__aeabi_d2f>
 8017f96:	4603      	mov	r3, r0
 8017f98:	62bb      	str	r3, [r7, #40]	@ 0x28

            // Convert angle to radians
            float rad = radians(angle);
 8017f9a:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8017f9e:	68f8      	ldr	r0, [r7, #12]
 8017fa0:	f000 f946 	bl	8018230 <_ZN6Screen7radiansEf>
 8017fa4:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

            // Calculate the endpoint of the line (on the circle's perimeter) // outer ring i think
            int xEnd = centerX + (radius - 10) * cos(rad);
 8017fa8:	68bb      	ldr	r3, [r7, #8]
 8017faa:	ee07 3a90 	vmov	s15, r3
 8017fae:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8017fb2:	683b      	ldr	r3, [r7, #0]
 8017fb4:	3b0a      	subs	r3, #10
 8017fb6:	ee07 3a90 	vmov	s15, r3
 8017fba:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8017fbe:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8017fc2:	f7ff f9bd 	bl	8017340 <_ZSt3cosf>
 8017fc6:	eef0 7a40 	vmov.f32	s15, s0
 8017fca:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8017fce:	ee78 7a27 	vadd.f32	s15, s16, s15
 8017fd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017fd6:	ee17 3a90 	vmov	r3, s15
 8017fda:	623b      	str	r3, [r7, #32]
            int yEnd = centerY + (radius - 10) * sin(rad);
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	ee07 3a90 	vmov	s15, r3
 8017fe2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8017fe6:	683b      	ldr	r3, [r7, #0]
 8017fe8:	3b0a      	subs	r3, #10
 8017fea:	ee07 3a90 	vmov	s15, r3
 8017fee:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8017ff2:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8017ff6:	f7ff f9b3 	bl	8017360 <_ZSt3sinf>
 8017ffa:	eef0 7a40 	vmov.f32	s15, s0
 8017ffe:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8018002:	ee78 7a27 	vadd.f32	s15, s16, s15
 8018006:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801800a:	ee17 3a90 	vmov	r3, s15
 801800e:	61fb      	str	r3, [r7, #28]

            // Calculate the endpoint of the line (on the circle's perimeter)
            int xStart = centerX + (radius - 20) * cos(rad);
 8018010:	68bb      	ldr	r3, [r7, #8]
 8018012:	ee07 3a90 	vmov	s15, r3
 8018016:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 801801a:	683b      	ldr	r3, [r7, #0]
 801801c:	3b14      	subs	r3, #20
 801801e:	ee07 3a90 	vmov	s15, r3
 8018022:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8018026:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 801802a:	f7ff f989 	bl	8017340 <_ZSt3cosf>
 801802e:	eef0 7a40 	vmov.f32	s15, s0
 8018032:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8018036:	ee78 7a27 	vadd.f32	s15, s16, s15
 801803a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801803e:	ee17 3a90 	vmov	r3, s15
 8018042:	61bb      	str	r3, [r7, #24]
            int yStart = centerY + (radius - 20) * sin(rad);
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	ee07 3a90 	vmov	s15, r3
 801804a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 801804e:	683b      	ldr	r3, [r7, #0]
 8018050:	3b14      	subs	r3, #20
 8018052:	ee07 3a90 	vmov	s15, r3
 8018056:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 801805a:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 801805e:	f7ff f97f 	bl	8017360 <_ZSt3sinf>
 8018062:	eef0 7a40 	vmov.f32	s15, s0
 8018066:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801806a:	ee78 7a27 	vadd.f32	s15, s16, s15
 801806e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018072:	ee17 3a90 	vmov	r3, s15
 8018076:	617b      	str	r3, [r7, #20]

            // Draw a normal line
            canvas.drawLine(xStart, yStart, xEnd, yEnd, ST7789V_BLACK);
 8018078:	68fb      	ldr	r3, [r7, #12]
 801807a:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 801807e:	69bb      	ldr	r3, [r7, #24]
 8018080:	b219      	sxth	r1, r3
 8018082:	697b      	ldr	r3, [r7, #20]
 8018084:	b21a      	sxth	r2, r3
 8018086:	6a3b      	ldr	r3, [r7, #32]
 8018088:	b21c      	sxth	r4, r3
 801808a:	69fb      	ldr	r3, [r7, #28]
 801808c:	b21b      	sxth	r3, r3
 801808e:	2500      	movs	r5, #0
 8018090:	9501      	str	r5, [sp, #4]
 8018092:	9300      	str	r3, [sp, #0]
 8018094:	4623      	mov	r3, r4
 8018096:	f7e9 fcad 	bl	80019f4 <_ZN12Adafruit_GFX8drawLineEsssst>
        for (int i = lineStart * 4; i <= lineEnd * 4; i++)
 801809a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801809c:	3301      	adds	r3, #1
 801809e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80180a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80180a2:	009b      	lsls	r3, r3, #2
 80180a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80180a6:	429a      	cmp	r2, r3
 80180a8:	f77f af4a 	ble.w	8017f40 <_ZN6Screen14drawMeterLinesEiiiii+0x3a8>
    for (int i = lineStart; i <= lineEnd; i++)
 80180ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80180ae:	3301      	adds	r3, #1
 80180b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80180b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80180b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80180b6:	429a      	cmp	r2, r3
 80180b8:	f77f ad8a 	ble.w	8017bd0 <_ZN6Screen14drawMeterLinesEiiiii+0x38>
        }
    }
}
 80180bc:	bf00      	nop
 80180be:	bf00      	nop
 80180c0:	3750      	adds	r7, #80	@ 0x50
 80180c2:	46bd      	mov	sp, r7
 80180c4:	ecbd 8b02 	vpop	{d8}
 80180c8:	bdb0      	pop	{r4, r5, r7, pc}
 80180ca:	bf00      	nop
 80180cc:	f3af 8000 	nop.w
 80180d0:	00000000 	.word	0x00000000
 80180d4:	4070e000 	.word	0x4070e000
 80180d8:	0801d050 	.word	0x0801d050
 80180dc:	3fd00000 	.word	0x3fd00000
 80180e0:	40568000 	.word	0x40568000

080180e4 <_ZN12Adafruit_GFX11setTextWrapEb>:
  @brief  Set whether text that is too long for the screen width should
          automatically wrap around to the next line (else clip right).
  @param  w  true for wrapping, false for clipping
  */
  /**********************************************************************/
  void setTextWrap(bool w) { wrap = w; }
 80180e4:	b480      	push	{r7}
 80180e6:	b083      	sub	sp, #12
 80180e8:	af00      	add	r7, sp, #0
 80180ea:	6078      	str	r0, [r7, #4]
 80180ec:	460b      	mov	r3, r1
 80180ee:	70fb      	strb	r3, [r7, #3]
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	78fa      	ldrb	r2, [r7, #3]
 80180f4:	76da      	strb	r2, [r3, #27]
 80180f6:	bf00      	nop
 80180f8:	370c      	adds	r7, #12
 80180fa:	46bd      	mov	sp, r7
 80180fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018100:	4770      	bx	lr

08018102 <_ZNK11GFXcanvas169getBufferEv>:
  /*!
    @brief    Get a pointer to the internal buffer memory
    @returns  A pointer to the allocated buffer
  */
  /**********************************************************************/
  uint16_t *getBuffer(void) const { return buffer; }
 8018102:	b480      	push	{r7}
 8018104:	b083      	sub	sp, #12
 8018106:	af00      	add	r7, sp, #0
 8018108:	6078      	str	r0, [r7, #4]
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801810e:	4618      	mov	r0, r3
 8018110:	370c      	adds	r7, #12
 8018112:	46bd      	mov	sp, r7
 8018114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018118:	4770      	bx	lr
	...

0801811c <_ZN6Screen5setupEv>:
#include "Screen.hpp"

void Screen::setup(void)
{
 801811c:	b5b0      	push	{r4, r5, r7, lr}
 801811e:	b084      	sub	sp, #16
 8018120:	af02      	add	r7, sp, #8
 8018122:	6078      	str	r0, [r7, #4]

    needleBuffer[32] = {0};
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	2200      	movs	r2, #0
 8018128:	f883 2269 	strb.w	r2, [r3, #617]	@ 0x269
    switchBuffer[32] = {0};
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	2200      	movs	r2, #0
 8018130:	f883 2289 	strb.w	r2, [r3, #649]	@ 0x289
    lastSwitchBuffer[32] = {0};
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	2200      	movs	r2, #0
 8018138:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

    // SPI_Set_Mode(0);

    totalPixels = canvas.width() * canvas.height();
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	336c      	adds	r3, #108	@ 0x6c
 8018140:	4618      	mov	r0, r3
 8018142:	f7e9 f9cd 	bl	80014e0 <_ZNK12Adafruit_GFX5widthEv>
 8018146:	4603      	mov	r3, r0
 8018148:	461c      	mov	r4, r3
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	336c      	adds	r3, #108	@ 0x6c
 801814e:	4618      	mov	r0, r3
 8018150:	f7e9 f9d3 	bl	80014fa <_ZNK12Adafruit_GFX6heightEv>
 8018154:	4603      	mov	r3, r0
 8018156:	fb04 f303 	mul.w	r3, r4, r3
 801815a:	461a      	mov	r2, r3
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	669a      	str	r2, [r3, #104]	@ 0x68

    tft.begin();
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	4618      	mov	r0, r3
 8018164:	f7eb f988 	bl	8003478 <_ZN13ST7789V_STM325beginEv>
    tft.setRotation(2); // places the screen connector further away from the probe tubes
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	2102      	movs	r1, #2
 801816c:	4618      	mov	r0, r3
 801816e:	f7eb fce3 	bl	8003b38 <_ZN13ST7789V_STM3211setRotationEh>
    canvas.setFont(&FreeSerif9pt7b);
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	336c      	adds	r3, #108	@ 0x6c
 8018176:	491c      	ldr	r1, [pc, #112]	@ (80181e8 <_ZN6Screen5setupEv+0xcc>)
 8018178:	4618      	mov	r0, r3
 801817a:	f7ea facf 	bl	800271c <_ZN12Adafruit_GFX7setFontEPK7GFXfont>
    canvas.setTextWrap(true);
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	336c      	adds	r3, #108	@ 0x6c
 8018182:	2101      	movs	r1, #1
 8018184:	4618      	mov	r0, r3
 8018186:	f7ff ffad 	bl	80180e4 <_ZN12Adafruit_GFX11setTextWrapEb>
    canvas.setTextSize(0);
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	336c      	adds	r3, #108	@ 0x6c
 801818e:	2100      	movs	r1, #0
 8018190:	4618      	mov	r0, r3
 8018192:	f7ea fa5c 	bl	800264e <_ZN12Adafruit_GFX11setTextSizeEh>
    tft.setWindow(0, 0, canvas.width() - 1, canvas.height() - 1);
 8018196:	687c      	ldr	r4, [r7, #4]
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	336c      	adds	r3, #108	@ 0x6c
 801819c:	4618      	mov	r0, r3
 801819e:	f7e9 f99f 	bl	80014e0 <_ZNK12Adafruit_GFX5widthEv>
 80181a2:	4603      	mov	r3, r0
 80181a4:	b29b      	uxth	r3, r3
 80181a6:	3b01      	subs	r3, #1
 80181a8:	b29d      	uxth	r5, r3
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	336c      	adds	r3, #108	@ 0x6c
 80181ae:	4618      	mov	r0, r3
 80181b0:	f7e9 f9a3 	bl	80014fa <_ZNK12Adafruit_GFX6heightEv>
 80181b4:	4603      	mov	r3, r0
 80181b6:	b29b      	uxth	r3, r3
 80181b8:	3b01      	subs	r3, #1
 80181ba:	b29b      	uxth	r3, r3
 80181bc:	9300      	str	r3, [sp, #0]
 80181be:	462b      	mov	r3, r5
 80181c0:	2200      	movs	r2, #0
 80181c2:	2100      	movs	r1, #0
 80181c4:	4620      	mov	r0, r4
 80181c6:	f7eb fd96 	bl	8003cf6 <_ZN13ST7789V_STM329setWindowEtttt>

    // initial state: meter
    page = METER;
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	2200      	movs	r2, #0
 80181ce:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    renderMeter();
 80181d2:	6878      	ldr	r0, [r7, #4]
 80181d4:	f7ff f8d4 	bl	8017380 <_ZN6Screen11renderMeterEv>
    // canvas.byteSwap();

    writeCanvas();
 80181d8:	6878      	ldr	r0, [r7, #4]
 80181da:	f000 f812 	bl	8018202 <_ZN6Screen11writeCanvasEv>
    // renderMeter(canvas);

    // fadeIn();
}
 80181de:	bf00      	nop
 80181e0:	3708      	adds	r7, #8
 80181e2:	46bd      	mov	sp, r7
 80181e4:	bdb0      	pop	{r4, r5, r7, pc}
 80181e6:	bf00      	nop
 80181e8:	0801e098 	.word	0x0801e098

080181ec <_ZN6Screen12stateMachineEv>:

void Screen::stateMachine(void)

{
 80181ec:	b580      	push	{r7, lr}
 80181ee:	b082      	sub	sp, #8
 80181f0:	af00      	add	r7, sp, #0
 80181f2:	6078      	str	r0, [r7, #4]

    // switch (page)
    // {
    // case METER:
    //
    updateMeter();
 80181f4:	6878      	ldr	r0, [r7, #4]
 80181f6:	f000 f849 	bl	801828c <_ZN6Screen11updateMeterEv>
    //     break;
    //
    // default:
    //     break;
    // }
}
 80181fa:	bf00      	nop
 80181fc:	3708      	adds	r7, #8
 80181fe:	46bd      	mov	sp, r7
 8018200:	bd80      	pop	{r7, pc}

08018202 <_ZN6Screen11writeCanvasEv>:

void Screen::writeCanvas(void)
{
 8018202:	b580      	push	{r7, lr}
 8018204:	b084      	sub	sp, #16
 8018206:	af00      	add	r7, sp, #0
 8018208:	6078      	str	r0, [r7, #4]

    // SPI_Set_Mode(0);
    uint16_t *buffer = canvas.getBuffer();
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	336c      	adds	r3, #108	@ 0x6c
 801820e:	4618      	mov	r0, r3
 8018210:	f7ff ff77 	bl	8018102 <_ZNK11GFXcanvas169getBufferEv>
 8018214:	60f8      	str	r0, [r7, #12]
    // tft.startWrite();
    // tft.writeBuffer(buffer, totalPixels);
    //  tft.writeBufferDMA(buffer, totalPixels);
    tft.writeBufferDMA(buffer, totalPixels);
 8018216:	6878      	ldr	r0, [r7, #4]
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801821c:	461a      	mov	r2, r3
 801821e:	68f9      	ldr	r1, [r7, #12]
 8018220:	f7eb fe51 	bl	8003ec6 <_ZN13ST7789V_STM3214writeBufferDMAEPtm>
    // tft.endWrite();
    //  SPI_Set_Mode(1);
}
 8018224:	bf00      	nop
 8018226:	3710      	adds	r7, #16
 8018228:	46bd      	mov	sp, r7
 801822a:	bd80      	pop	{r7, pc}
 801822c:	0000      	movs	r0, r0
	...

08018230 <_ZN6Screen7radiansEf>:
//     tft.endWrite();
//     SPI_Set_Mode(1);
// }

float Screen::radians(float degrees)
{
 8018230:	b580      	push	{r7, lr}
 8018232:	b082      	sub	sp, #8
 8018234:	af00      	add	r7, sp, #0
 8018236:	6078      	str	r0, [r7, #4]
 8018238:	ed87 0a00 	vstr	s0, [r7]
    return degrees * M_PI / 180.0f;
 801823c:	6838      	ldr	r0, [r7, #0]
 801823e:	f7e8 f96b 	bl	8000518 <__aeabi_f2d>
 8018242:	a310      	add	r3, pc, #64	@ (adr r3, 8018284 <_ZN6Screen7radiansEf+0x54>)
 8018244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018248:	f7e8 f9be 	bl	80005c8 <__aeabi_dmul>
 801824c:	4602      	mov	r2, r0
 801824e:	460b      	mov	r3, r1
 8018250:	4610      	mov	r0, r2
 8018252:	4619      	mov	r1, r3
 8018254:	f04f 0200 	mov.w	r2, #0
 8018258:	4b09      	ldr	r3, [pc, #36]	@ (8018280 <_ZN6Screen7radiansEf+0x50>)
 801825a:	f7e8 fadf 	bl	800081c <__aeabi_ddiv>
 801825e:	4602      	mov	r2, r0
 8018260:	460b      	mov	r3, r1
 8018262:	4610      	mov	r0, r2
 8018264:	4619      	mov	r1, r3
 8018266:	f7e8 fc87 	bl	8000b78 <__aeabi_d2f>
 801826a:	4603      	mov	r3, r0
 801826c:	ee07 3a90 	vmov	s15, r3
}
 8018270:	eeb0 0a67 	vmov.f32	s0, s15
 8018274:	3708      	adds	r7, #8
 8018276:	46bd      	mov	sp, r7
 8018278:	bd80      	pop	{r7, pc}
 801827a:	bf00      	nop
 801827c:	f3af 8000 	nop.w
 8018280:	40668000 	.word	0x40668000
 8018284:	54442d18 	.word	0x54442d18
 8018288:	400921fb 	.word	0x400921fb

0801828c <_ZN6Screen11updateMeterEv>:
#include "BatteryMonitor.hpp"
#include "Thermocouples.hpp"
#include "Switch.hpp"
#include <stdlib.h>
void Screen::updateMeter(void)
{
 801828c:	b5b0      	push	{r4, r5, r7, lr}
 801828e:	ed2d 8b02 	vpush	{d8}
 8018292:	b08a      	sub	sp, #40	@ 0x28
 8018294:	af04      	add	r7, sp, #16
 8018296:	6078      	str	r0, [r7, #4]
    snprintf(batteryLevel, sizeof(batteryLevel), "%d %%\r\n", BatteryMonitor::charge);
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	f203 2029 	addw	r0, r3, #553	@ 0x229
 801829e:	4b68      	ldr	r3, [pc, #416]	@ (8018440 <_ZN6Screen11updateMeterEv+0x1b4>)
 80182a0:	881b      	ldrh	r3, [r3, #0]
 80182a2:	4a68      	ldr	r2, [pc, #416]	@ (8018444 <_ZN6Screen11updateMeterEv+0x1b8>)
 80182a4:	2120      	movs	r1, #32
 80182a6:	f002 fcd5 	bl	801ac54 <sniprintf>

    canvas.getTextBounds(batteryLevel, 0, 0, &batteryTextX, &batteryTextY, &batteryW, &batteryH);
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	f203 2529 	addw	r5, r3, #553	@ 0x229
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	33cc      	adds	r3, #204	@ 0xcc
 80182ba:	687a      	ldr	r2, [r7, #4]
 80182bc:	32ce      	adds	r2, #206	@ 0xce
 80182be:	6879      	ldr	r1, [r7, #4]
 80182c0:	31d0      	adds	r1, #208	@ 0xd0
 80182c2:	6878      	ldr	r0, [r7, #4]
 80182c4:	30d2      	adds	r0, #210	@ 0xd2
 80182c6:	9003      	str	r0, [sp, #12]
 80182c8:	9102      	str	r1, [sp, #8]
 80182ca:	9201      	str	r2, [sp, #4]
 80182cc:	9300      	str	r3, [sp, #0]
 80182ce:	2300      	movs	r3, #0
 80182d0:	2200      	movs	r2, #0
 80182d2:	4629      	mov	r1, r5
 80182d4:	4620      	mov	r0, r4
 80182d6:	f7ea fbee 	bl	8002ab6 <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>
    batteryX = overallBorderWidth - batteryW - batterySpacer;
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80182e0:	687a      	ldr	r2, [r7, #4]
 80182e2:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	@ 0xd0
 80182e6:	1a9a      	subs	r2, r3, r2
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80182ee:	1ad2      	subs	r2, r2, r3
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

    // Clear the larger of the two areas (old and new position)
    int clearX = batteryX;
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80182fc:	617b      	str	r3, [r7, #20]
    int clearWidth = batteryX + batteryW - clearX;
 80182fe:	687b      	ldr	r3, [r7, #4]
 8018300:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8018304:	687a      	ldr	r2, [r7, #4]
 8018306:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	@ 0xd0
 801830a:	441a      	add	r2, r3
 801830c:	697b      	ldr	r3, [r7, #20]
 801830e:	1ad3      	subs	r3, r2, r3
 8018310:	613b      	str	r3, [r7, #16]

    canvas.fillRect(clearX, batteryY - batteryH + 1,
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8018318:	697b      	ldr	r3, [r7, #20]
 801831a:	b219      	sxth	r1, r3
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8018322:	b29a      	uxth	r2, r3
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	@ 0xd2
 801832a:	1ad3      	subs	r3, r2, r3
 801832c:	b29b      	uxth	r3, r3
 801832e:	3301      	adds	r3, #1
 8018330:	b29b      	uxth	r3, r3
 8018332:	b21a      	sxth	r2, r3
 8018334:	693b      	ldr	r3, [r7, #16]
 8018336:	b21c      	sxth	r4, r3
                    clearWidth, batteryH, BACKGROUND_COLOR);
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	@ 0xd2
    canvas.fillRect(clearX, batteryY - batteryH + 1,
 801833e:	b21b      	sxth	r3, r3
 8018340:	f64d 45ff 	movw	r5, #56575	@ 0xdcff
 8018344:	9501      	str	r5, [sp, #4]
 8018346:	9300      	str	r3, [sp, #0]
 8018348:	4623      	mov	r3, r4
 801834a:	f7e9 faf9 	bl	8001940 <_ZN12Adafruit_GFX8fillRectEsssst>

    // Draw new percentage
    canvas.setTextColor(TEXT_COLOR);
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	336c      	adds	r3, #108	@ 0x6c
 8018352:	f24a 3129 	movw	r1, #41769	@ 0xa329
 8018356:	4618      	mov	r0, r3
 8018358:	f7e9 f8af 	bl	80014ba <_ZN12Adafruit_GFX12setTextColorEt>
    canvas.setCursor(batteryX, batteryY);
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8018368:	b219      	sxth	r1, r3
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8018370:	b21b      	sxth	r3, r3
 8018372:	461a      	mov	r2, r3
 8018374:	f7e9 f88d 	bl	8001492 <_ZN12Adafruit_GFX9setCursorEss>
    canvas.print(batteryLevel);
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	f203 2329 	addw	r3, r3, #553	@ 0x229
 8018384:	4619      	mov	r1, r3
 8018386:	4610      	mov	r0, r2
 8018388:	f7eb f827 	bl	80033da <_ZN5Print5printEPKc>

    if (!BatteryMonitor::charging)
 801838c:	4b2e      	ldr	r3, [pc, #184]	@ (8018448 <_ZN6Screen11updateMeterEv+0x1bc>)
 801838e:	781b      	ldrb	r3, [r3, #0]
 8018390:	f083 0301 	eor.w	r3, r3, #1
 8018394:	b2db      	uxtb	r3, r3
 8018396:	2b00      	cmp	r3, #0
 8018398:	d016      	beq.n	80183c8 <_ZN6Screen11updateMeterEv+0x13c>
    {
        canvas.drawChar(chargingX, chargingY, '+ ', BACKGROUND_COLOR, BACKGROUND_COLOR, 1);
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80183a6:	b219      	sxth	r1, r3
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80183ae:	b21a      	sxth	r2, r3
 80183b0:	2301      	movs	r3, #1
 80183b2:	9302      	str	r3, [sp, #8]
 80183b4:	f64d 43ff 	movw	r3, #56575	@ 0xdcff
 80183b8:	9301      	str	r3, [sp, #4]
 80183ba:	f64d 43ff 	movw	r3, #56575	@ 0xdcff
 80183be:	9300      	str	r3, [sp, #0]
 80183c0:	2320      	movs	r3, #32
 80183c2:	f7e9 fdb4 	bl	8001f2e <_ZN12Adafruit_GFX8drawCharEsshtth>
 80183c6:	e015      	b.n	80183f4 <_ZN6Screen11updateMeterEv+0x168>
        // Serial.println("not charging");
    }
    else
    {
        canvas.drawChar(chargingX, chargingY, '+ ', TEXT_COLOR, BACKGROUND_COLOR, 1);
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80183d4:	b219      	sxth	r1, r3
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80183dc:	b21a      	sxth	r2, r3
 80183de:	2301      	movs	r3, #1
 80183e0:	9302      	str	r3, [sp, #8]
 80183e2:	f64d 43ff 	movw	r3, #56575	@ 0xdcff
 80183e6:	9301      	str	r3, [sp, #4]
 80183e8:	f24a 3329 	movw	r3, #41769	@ 0xa329
 80183ec:	9300      	str	r3, [sp, #0]
 80183ee:	2320      	movs	r3, #32
 80183f0:	f7e9 fd9d 	bl	8001f2e <_ZN12Adafruit_GFX8drawCharEsshtth>

    //{
    //  Serial.println(Thermocouples::deltaTemp);
    //  Serial.println();

    needleAngle = Thermocouples::deltaTemp - 90.0;
 80183f4:	4b15      	ldr	r3, [pc, #84]	@ (801844c <_ZN6Screen11updateMeterEv+0x1c0>)
 80183f6:	edd3 7a00 	vldr	s15, [r3]
 80183fa:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8018450 <_ZN6Screen11updateMeterEv+0x1c4>
 80183fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	edc3 7a4e 	vstr	s15, [r3, #312]	@ 0x138

    canvas.setCursor(switchX, switchY);
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 801840e:	687b      	ldr	r3, [r7, #4]
 8018410:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8018414:	b219      	sxth	r1, r3
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801841c:	b21b      	sxth	r3, r3
 801841e:	461a      	mov	r2, r3
 8018420:	f7e9 f837 	bl	8001492 <_ZN12Adafruit_GFX9setCursorEss>
    if (Switch::state)
 8018424:	4b0b      	ldr	r3, [pc, #44]	@ (8018454 <_ZN6Screen11updateMeterEv+0x1c8>)
 8018426:	781b      	ldrb	r3, [r3, #0]
 8018428:	2b00      	cmp	r3, #0
 801842a:	d017      	beq.n	801845c <_ZN6Screen11updateMeterEv+0x1d0>
    {
        snprintf(switchBuffer, sizeof(switchBuffer), "HIGH\r\n");
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	f203 2369 	addw	r3, r3, #617	@ 0x269
 8018432:	4a09      	ldr	r2, [pc, #36]	@ (8018458 <_ZN6Screen11updateMeterEv+0x1cc>)
 8018434:	2120      	movs	r1, #32
 8018436:	4618      	mov	r0, r3
 8018438:	f002 fc0c 	bl	801ac54 <sniprintf>
 801843c:	e016      	b.n	801846c <_ZN6Screen11updateMeterEv+0x1e0>
 801843e:	bf00      	nop
 8018440:	20000358 	.word	0x20000358
 8018444:	0801d060 	.word	0x0801d060
 8018448:	20000356 	.word	0x20000356
 801844c:	2000035c 	.word	0x2000035c
 8018450:	42b40000 	.word	0x42b40000
 8018454:	2000035a 	.word	0x2000035a
 8018458:	0801d068 	.word	0x0801d068
    }
    else
    {
        snprintf(switchBuffer, sizeof(switchBuffer), "LOW\r\n");
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	f203 2369 	addw	r3, r3, #617	@ 0x269
 8018462:	4abf      	ldr	r2, [pc, #764]	@ (8018760 <_ZN6Screen11updateMeterEv+0x4d4>)
 8018464:	2120      	movs	r1, #32
 8018466:	4618      	mov	r0, r3
 8018468:	f002 fbf4 	bl	801ac54 <sniprintf>
    }

    // only if state changes
    if (strcmp(switchBuffer, lastSwitchBuffer) != 0)
 801846c:	687b      	ldr	r3, [r7, #4]
 801846e:	f203 2269 	addw	r2, r3, #617	@ 0x269
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	f203 2389 	addw	r3, r3, #649	@ 0x289
 8018478:	4619      	mov	r1, r3
 801847a:	4610      	mov	r0, r2
 801847c:	f7e7 fe80 	bl	8000180 <strcmp>
 8018480:	4603      	mov	r3, r0
 8018482:	2b00      	cmp	r3, #0
 8018484:	d057      	beq.n	8018536 <_ZN6Screen11updateMeterEv+0x2aa>
    {

        int16_t x1, y1;
        uint16_t w, h;
        canvas.getTextBounds(lastSwitchBuffer, switchX, switchY, &x1, &y1, &w, &h); // calculate area to erase
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	f203 2189 	addw	r1, r3, #649	@ 0x289
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8018498:	b21a      	sxth	r2, r3
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80184a0:	b21c      	sxth	r4, r3
 80184a2:	f107 0308 	add.w	r3, r7, #8
 80184a6:	9303      	str	r3, [sp, #12]
 80184a8:	f107 030a 	add.w	r3, r7, #10
 80184ac:	9302      	str	r3, [sp, #8]
 80184ae:	f107 030c 	add.w	r3, r7, #12
 80184b2:	9301      	str	r3, [sp, #4]
 80184b4:	f107 030e 	add.w	r3, r7, #14
 80184b8:	9300      	str	r3, [sp, #0]
 80184ba:	4623      	mov	r3, r4
 80184bc:	f7ea fafb 	bl	8002ab6 <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>
        canvas.fillRect(x1, y1, w, h, BACKGROUND_COLOR);                            // erase
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 80184c6:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80184ca:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80184ce:	897b      	ldrh	r3, [r7, #10]
 80184d0:	b21c      	sxth	r4, r3
 80184d2:	893b      	ldrh	r3, [r7, #8]
 80184d4:	b21b      	sxth	r3, r3
 80184d6:	f64d 45ff 	movw	r5, #56575	@ 0xdcff
 80184da:	9501      	str	r5, [sp, #4]
 80184dc:	9300      	str	r3, [sp, #0]
 80184de:	4623      	mov	r3, r4
 80184e0:	f7e9 fa2e 	bl	8001940 <_ZN12Adafruit_GFX8fillRectEsssst>

        canvas.setCursor(switchX, switchY); // draw new text
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 80184ea:	687b      	ldr	r3, [r7, #4]
 80184ec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80184f0:	b219      	sxth	r1, r3
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80184f8:	b21b      	sxth	r3, r3
 80184fa:	461a      	mov	r2, r3
 80184fc:	f7e8 ffc9 	bl	8001492 <_ZN12Adafruit_GFX9setCursorEss>
        canvas.setTextColor(TEXT_COLOR);
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	336c      	adds	r3, #108	@ 0x6c
 8018504:	f24a 3129 	movw	r1, #41769	@ 0xa329
 8018508:	4618      	mov	r0, r3
 801850a:	f7e8 ffd6 	bl	80014ba <_ZN12Adafruit_GFX12setTextColorEt>
        canvas.print(switchBuffer);
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	f203 2369 	addw	r3, r3, #617	@ 0x269
 801851a:	4619      	mov	r1, r3
 801851c:	4610      	mov	r0, r2
 801851e:	f7ea ff5c 	bl	80033da <_ZN5Print5printEPKc>
        strcpy(lastSwitchBuffer, switchBuffer); // update buffer
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	f203 2289 	addw	r2, r3, #649	@ 0x289
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	f203 2369 	addw	r3, r3, #617	@ 0x269
 801852e:	4619      	mov	r1, r3
 8018530:	4610      	mov	r0, r2
 8018532:	f002 fd9a 	bl	801b06a <strcpy>
    }

    // are switchbuffer, lastswitchbuffer, text position, and uint16_t passed in??

    if (needleAngle > -45)
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	edd3 7a4e 	vldr	s15, [r3, #312]	@ 0x138
 801853c:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 8018764 <_ZN6Screen11updateMeterEv+0x4d8>
 8018540:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018548:	dd03      	ble.n	8018552 <_ZN6Screen11updateMeterEv+0x2c6>
    {
        needleAngle = -45;
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	4a86      	ldr	r2, [pc, #536]	@ (8018768 <_ZN6Screen11updateMeterEv+0x4dc>)
 801854e:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    }

    if (needleAngle < -135)
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	edd3 7a4e 	vldr	s15, [r3, #312]	@ 0x138
 8018558:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 801876c <_ZN6Screen11updateMeterEv+0x4e0>
 801855c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018564:	d503      	bpl.n	801856e <_ZN6Screen11updateMeterEv+0x2e2>
    {
        needleAngle = -135;
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	4a81      	ldr	r2, [pc, #516]	@ (8018770 <_ZN6Screen11updateMeterEv+0x4e4>)
 801856a:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    //       needleAngle = needleAngle - 1.0; // decrease by 1 deg
    //   }

    // 90 / 2 is degs per point
    // Convert angle to radians
    needleRad = radians(needleAngle);
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	edd3 7a4e 	vldr	s15, [r3, #312]	@ 0x138
 8018574:	eeb0 0a67 	vmov.f32	s0, s15
 8018578:	6878      	ldr	r0, [r7, #4]
 801857a:	f7ff fe59 	bl	8018230 <_ZN6Screen7radiansEf>
 801857e:	eef0 7a40 	vmov.f32	s15, s0
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	edc3 7a4d 	vstr	s15, [r3, #308]	@ 0x134
    // Serial.println(needleAngle);

    // Calculate the endpoint of the line (on the circle's perimeter)
    needleX1 = float(meterOriginX) + (float(meterHeight) - 80) * std::cos(needleRad);
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801858e:	ee07 3a90 	vmov	s15, r3
 8018592:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 801859c:	ee07 3a90 	vmov	s15, r3
 80185a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80185a4:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8018774 <_ZN6Screen11updateMeterEv+0x4e8>
 80185a8:	ee77 8ac7 	vsub.f32	s17, s15, s14
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	edd3 7a4d 	vldr	s15, [r3, #308]	@ 0x134
 80185b2:	eeb0 0a67 	vmov.f32	s0, s15
 80185b6:	f7fe fec3 	bl	8017340 <_ZSt3cosf>
 80185ba:	eef0 7a40 	vmov.f32	s15, s0
 80185be:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80185c2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80185c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80185ca:	ee17 2a90 	vmov	r2, s15
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    needleY1 = float(meterOriginY) + (float(meterHeight) - 80) * std::sin(needleRad);
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80185da:	ee07 3a90 	vmov	s15, r3
 80185de:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80185e8:	ee07 3a90 	vmov	s15, r3
 80185ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80185f0:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8018774 <_ZN6Screen11updateMeterEv+0x4e8>
 80185f4:	ee77 8ac7 	vsub.f32	s17, s15, s14
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	edd3 7a4d 	vldr	s15, [r3, #308]	@ 0x134
 80185fe:	eeb0 0a67 	vmov.f32	s0, s15
 8018602:	f7fe fead 	bl	8017360 <_ZSt3sinf>
 8018606:	eef0 7a40 	vmov.f32	s15, s0
 801860a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801860e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8018612:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018616:	ee17 2a90 	vmov	r2, s15
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
    // Serial.println(needleX1);
    // Serial.println(needleY1);
    //  Calculate the endpoint of the line (on the circle's perimeter)
    needleX2 = float(meterOriginX) + (float(meterHeight) - 170) * std::cos(needleRad);
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8018626:	ee07 3a90 	vmov	s15, r3
 801862a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8018634:	ee07 3a90 	vmov	s15, r3
 8018638:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801863c:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8018778 <_ZN6Screen11updateMeterEv+0x4ec>
 8018640:	ee77 8ac7 	vsub.f32	s17, s15, s14
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	edd3 7a4d 	vldr	s15, [r3, #308]	@ 0x134
 801864a:	eeb0 0a67 	vmov.f32	s0, s15
 801864e:	f7fe fe77 	bl	8017340 <_ZSt3cosf>
 8018652:	eef0 7a40 	vmov.f32	s15, s0
 8018656:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801865a:	ee78 7a27 	vadd.f32	s15, s16, s15
 801865e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018662:	ee17 2a90 	vmov	r2, s15
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    needleY2 = float(meterOriginY) + (float(meterHeight) - 170) * std::sin(needleRad);
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8018672:	ee07 3a90 	vmov	s15, r3
 8018676:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 801867a:	687b      	ldr	r3, [r7, #4]
 801867c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8018680:	ee07 3a90 	vmov	s15, r3
 8018684:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018688:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8018778 <_ZN6Screen11updateMeterEv+0x4ec>
 801868c:	ee77 8ac7 	vsub.f32	s17, s15, s14
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	edd3 7a4d 	vldr	s15, [r3, #308]	@ 0x134
 8018696:	eeb0 0a67 	vmov.f32	s0, s15
 801869a:	f7fe fe61 	bl	8017360 <_ZSt3sinf>
 801869e:	eef0 7a40 	vmov.f32	s15, s0
 80186a2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80186a6:	ee78 7a27 	vadd.f32	s15, s16, s15
 80186aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80186ae:	ee17 2a90 	vmov	r2, s15
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120

    canvas.drawLine(lastNeedleX1, lastNeedleY1, lastNeedleX2, lastNeedleY2, BACKGROUND_COLOR);
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80186c4:	b219      	sxth	r1, r3
 80186c6:	687b      	ldr	r3, [r7, #4]
 80186c8:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80186cc:	b21a      	sxth	r2, r3
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 80186d4:	b21c      	sxth	r4, r3
 80186d6:	687b      	ldr	r3, [r7, #4]
 80186d8:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 80186dc:	b21b      	sxth	r3, r3
 80186de:	f64d 45ff 	movw	r5, #56575	@ 0xdcff
 80186e2:	9501      	str	r5, [sp, #4]
 80186e4:	9300      	str	r3, [sp, #0]
 80186e6:	4623      	mov	r3, r4
 80186e8:	f7e9 f984 	bl	80019f4 <_ZN12Adafruit_GFX8drawLineEsssst>
    // writeNeedleFromCanvas(x0, y0, x1, y1, color);

    // Draw a normal line
    canvas.drawLine(needleX1, needleY1, needleX2, needleY2, ST7789V_BLACK);
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80186f8:	b219      	sxth	r1, r3
 80186fa:	687b      	ldr	r3, [r7, #4]
 80186fc:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8018700:	b21a      	sxth	r2, r3
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8018708:	b21c      	sxth	r4, r3
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8018710:	b21b      	sxth	r3, r3
 8018712:	2500      	movs	r5, #0
 8018714:	9501      	str	r5, [sp, #4]
 8018716:	9300      	str	r3, [sp, #0]
 8018718:	4623      	mov	r3, r4
 801871a:	f7e9 f96b 	bl	80019f4 <_ZN12Adafruit_GFX8drawLineEsssst>
    // writeNeedleFromCanvas(x0, y0, x1, y1, color);

    lastNeedleX1 = needleX1;
 801871e:	687b      	ldr	r3, [r7, #4]
 8018720:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
    lastNeedleX2 = needleX2;
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
    lastNeedleY1 = needleY1;
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
    lastNeedleY2 = needleY2;
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
    // renderDelay = 15; // about a 60hz refresh rate
    writeCanvas();
 801874e:	6878      	ldr	r0, [r7, #4]
 8018750:	f7ff fd57 	bl	8018202 <_ZN6Screen11writeCanvasEv>
    //     ledcWrite(backlightChannel, 0);
    //     esp_sleep_enable_timer_wakeup(1000000);
    //     esp_light_sleep_start();
    //     fadeIn();
    // }
} // update meter f(x)
 8018754:	bf00      	nop
 8018756:	3718      	adds	r7, #24
 8018758:	46bd      	mov	sp, r7
 801875a:	ecbd 8b02 	vpop	{d8}
 801875e:	bdb0      	pop	{r4, r5, r7, pc}
 8018760:	0801d070 	.word	0x0801d070
 8018764:	c2340000 	.word	0xc2340000
 8018768:	c2340000 	.word	0xc2340000
 801876c:	c3070000 	.word	0xc3070000
 8018770:	c3070000 	.word	0xc3070000
 8018774:	42a00000 	.word	0x42a00000
 8018778:	432a0000 	.word	0x432a0000

0801877c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 801877c:	b580      	push	{r7, lr}
 801877e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &DFU_Desc, DEVICE_FS) != USBD_OK) {
 8018780:	2200      	movs	r2, #0
 8018782:	4912      	ldr	r1, [pc, #72]	@ (80187cc <MX_USB_Device_Init+0x50>)
 8018784:	4812      	ldr	r0, [pc, #72]	@ (80187d0 <MX_USB_Device_Init+0x54>)
 8018786:	f7fa f9d5 	bl	8012b34 <USBD_Init>
 801878a:	4603      	mov	r3, r0
 801878c:	2b00      	cmp	r3, #0
 801878e:	d001      	beq.n	8018794 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8018790:	f7ee fb2c 	bl	8006dec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK) {
 8018794:	490f      	ldr	r1, [pc, #60]	@ (80187d4 <MX_USB_Device_Init+0x58>)
 8018796:	480e      	ldr	r0, [pc, #56]	@ (80187d0 <MX_USB_Device_Init+0x54>)
 8018798:	f7fa f9fc 	bl	8012b94 <USBD_RegisterClass>
 801879c:	4603      	mov	r3, r0
 801879e:	2b00      	cmp	r3, #0
 80187a0:	d001      	beq.n	80187a6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80187a2:	f7ee fb23 	bl	8006dec <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_Flash_fops) != USBD_OK) {
 80187a6:	490c      	ldr	r1, [pc, #48]	@ (80187d8 <MX_USB_Device_Init+0x5c>)
 80187a8:	4809      	ldr	r0, [pc, #36]	@ (80187d0 <MX_USB_Device_Init+0x54>)
 80187aa:	f7f9 fd93 	bl	80122d4 <USBD_DFU_RegisterMedia>
 80187ae:	4603      	mov	r3, r0
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	d001      	beq.n	80187b8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80187b4:	f7ee fb1a 	bl	8006dec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80187b8:	4805      	ldr	r0, [pc, #20]	@ (80187d0 <MX_USB_Device_Init+0x54>)
 80187ba:	f7fa fa21 	bl	8012c00 <USBD_Start>
 80187be:	4603      	mov	r3, r0
 80187c0:	2b00      	cmp	r3, #0
 80187c2:	d001      	beq.n	80187c8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80187c4:	f7ee fb12 	bl	8006dec <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80187c8:	bf00      	nop
 80187ca:	bd80      	pop	{r7, pc}
 80187cc:	200000ac 	.word	0x200000ac
 80187d0:	20000d64 	.word	0x20000d64
 80187d4:	20000030 	.word	0x20000030
 80187d8:	20000100 	.word	0x20000100

080187dc <USBD_DFU_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80187dc:	b480      	push	{r7}
 80187de:	b083      	sub	sp, #12
 80187e0:	af00      	add	r7, sp, #0
 80187e2:	4603      	mov	r3, r0
 80187e4:	6039      	str	r1, [r7, #0]
 80187e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DFU_DeviceDesc);
 80187e8:	683b      	ldr	r3, [r7, #0]
 80187ea:	2212      	movs	r2, #18
 80187ec:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_DeviceDesc;
 80187ee:	4b03      	ldr	r3, [pc, #12]	@ (80187fc <USBD_DFU_DeviceDescriptor+0x20>)
}
 80187f0:	4618      	mov	r0, r3
 80187f2:	370c      	adds	r7, #12
 80187f4:	46bd      	mov	sp, r7
 80187f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187fa:	4770      	bx	lr
 80187fc:	200000cc 	.word	0x200000cc

08018800 <USBD_DFU_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018800:	b480      	push	{r7}
 8018802:	b083      	sub	sp, #12
 8018804:	af00      	add	r7, sp, #0
 8018806:	4603      	mov	r3, r0
 8018808:	6039      	str	r1, [r7, #0]
 801880a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801880c:	683b      	ldr	r3, [r7, #0]
 801880e:	2204      	movs	r2, #4
 8018810:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018812:	4b03      	ldr	r3, [pc, #12]	@ (8018820 <USBD_DFU_LangIDStrDescriptor+0x20>)
}
 8018814:	4618      	mov	r0, r3
 8018816:	370c      	adds	r7, #12
 8018818:	46bd      	mov	sp, r7
 801881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801881e:	4770      	bx	lr
 8018820:	200000e0 	.word	0x200000e0

08018824 <USBD_DFU_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018824:	b580      	push	{r7, lr}
 8018826:	b082      	sub	sp, #8
 8018828:	af00      	add	r7, sp, #0
 801882a:	4603      	mov	r3, r0
 801882c:	6039      	str	r1, [r7, #0]
 801882e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018830:	79fb      	ldrb	r3, [r7, #7]
 8018832:	2b00      	cmp	r3, #0
 8018834:	d105      	bne.n	8018842 <USBD_DFU_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8018836:	683a      	ldr	r2, [r7, #0]
 8018838:	4907      	ldr	r1, [pc, #28]	@ (8018858 <USBD_DFU_ProductStrDescriptor+0x34>)
 801883a:	4808      	ldr	r0, [pc, #32]	@ (801885c <USBD_DFU_ProductStrDescriptor+0x38>)
 801883c:	f7fb fb32 	bl	8013ea4 <USBD_GetString>
 8018840:	e004      	b.n	801884c <USBD_DFU_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8018842:	683a      	ldr	r2, [r7, #0]
 8018844:	4904      	ldr	r1, [pc, #16]	@ (8018858 <USBD_DFU_ProductStrDescriptor+0x34>)
 8018846:	4805      	ldr	r0, [pc, #20]	@ (801885c <USBD_DFU_ProductStrDescriptor+0x38>)
 8018848:	f7fb fb2c 	bl	8013ea4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801884c:	4b02      	ldr	r3, [pc, #8]	@ (8018858 <USBD_DFU_ProductStrDescriptor+0x34>)
}
 801884e:	4618      	mov	r0, r3
 8018850:	3708      	adds	r7, #8
 8018852:	46bd      	mov	sp, r7
 8018854:	bd80      	pop	{r7, pc}
 8018856:	bf00      	nop
 8018858:	20001040 	.word	0x20001040
 801885c:	0801d078 	.word	0x0801d078

08018860 <USBD_DFU_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018860:	b580      	push	{r7, lr}
 8018862:	b082      	sub	sp, #8
 8018864:	af00      	add	r7, sp, #0
 8018866:	4603      	mov	r3, r0
 8018868:	6039      	str	r1, [r7, #0]
 801886a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801886c:	683a      	ldr	r2, [r7, #0]
 801886e:	4904      	ldr	r1, [pc, #16]	@ (8018880 <USBD_DFU_ManufacturerStrDescriptor+0x20>)
 8018870:	4804      	ldr	r0, [pc, #16]	@ (8018884 <USBD_DFU_ManufacturerStrDescriptor+0x24>)
 8018872:	f7fb fb17 	bl	8013ea4 <USBD_GetString>
  return USBD_StrDesc;
 8018876:	4b02      	ldr	r3, [pc, #8]	@ (8018880 <USBD_DFU_ManufacturerStrDescriptor+0x20>)
}
 8018878:	4618      	mov	r0, r3
 801887a:	3708      	adds	r7, #8
 801887c:	46bd      	mov	sp, r7
 801887e:	bd80      	pop	{r7, pc}
 8018880:	20001040 	.word	0x20001040
 8018884:	0801d098 	.word	0x0801d098

08018888 <USBD_DFU_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018888:	b580      	push	{r7, lr}
 801888a:	b082      	sub	sp, #8
 801888c:	af00      	add	r7, sp, #0
 801888e:	4603      	mov	r3, r0
 8018890:	6039      	str	r1, [r7, #0]
 8018892:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018894:	683b      	ldr	r3, [r7, #0]
 8018896:	221a      	movs	r2, #26
 8018898:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801889a:	f000 f843 	bl	8018924 <Get_SerialNum>

  /* USER CODE BEGIN USBD_DFU_SerialStrDescriptor */

  /* USER CODE END USBD_DFU_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801889e:	4b02      	ldr	r3, [pc, #8]	@ (80188a8 <USBD_DFU_SerialStrDescriptor+0x20>)
}
 80188a0:	4618      	mov	r0, r3
 80188a2:	3708      	adds	r7, #8
 80188a4:	46bd      	mov	sp, r7
 80188a6:	bd80      	pop	{r7, pc}
 80188a8:	200000e4 	.word	0x200000e4

080188ac <USBD_DFU_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80188ac:	b580      	push	{r7, lr}
 80188ae:	b082      	sub	sp, #8
 80188b0:	af00      	add	r7, sp, #0
 80188b2:	4603      	mov	r3, r0
 80188b4:	6039      	str	r1, [r7, #0]
 80188b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80188b8:	79fb      	ldrb	r3, [r7, #7]
 80188ba:	2b00      	cmp	r3, #0
 80188bc:	d105      	bne.n	80188ca <USBD_DFU_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80188be:	683a      	ldr	r2, [r7, #0]
 80188c0:	4907      	ldr	r1, [pc, #28]	@ (80188e0 <USBD_DFU_ConfigStrDescriptor+0x34>)
 80188c2:	4808      	ldr	r0, [pc, #32]	@ (80188e4 <USBD_DFU_ConfigStrDescriptor+0x38>)
 80188c4:	f7fb faee 	bl	8013ea4 <USBD_GetString>
 80188c8:	e004      	b.n	80188d4 <USBD_DFU_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80188ca:	683a      	ldr	r2, [r7, #0]
 80188cc:	4904      	ldr	r1, [pc, #16]	@ (80188e0 <USBD_DFU_ConfigStrDescriptor+0x34>)
 80188ce:	4805      	ldr	r0, [pc, #20]	@ (80188e4 <USBD_DFU_ConfigStrDescriptor+0x38>)
 80188d0:	f7fb fae8 	bl	8013ea4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80188d4:	4b02      	ldr	r3, [pc, #8]	@ (80188e0 <USBD_DFU_ConfigStrDescriptor+0x34>)
}
 80188d6:	4618      	mov	r0, r3
 80188d8:	3708      	adds	r7, #8
 80188da:	46bd      	mov	sp, r7
 80188dc:	bd80      	pop	{r7, pc}
 80188de:	bf00      	nop
 80188e0:	20001040 	.word	0x20001040
 80188e4:	0801d0ac 	.word	0x0801d0ac

080188e8 <USBD_DFU_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80188e8:	b580      	push	{r7, lr}
 80188ea:	b082      	sub	sp, #8
 80188ec:	af00      	add	r7, sp, #0
 80188ee:	4603      	mov	r3, r0
 80188f0:	6039      	str	r1, [r7, #0]
 80188f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80188f4:	79fb      	ldrb	r3, [r7, #7]
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	d105      	bne.n	8018906 <USBD_DFU_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80188fa:	683a      	ldr	r2, [r7, #0]
 80188fc:	4907      	ldr	r1, [pc, #28]	@ (801891c <USBD_DFU_InterfaceStrDescriptor+0x34>)
 80188fe:	4808      	ldr	r0, [pc, #32]	@ (8018920 <USBD_DFU_InterfaceStrDescriptor+0x38>)
 8018900:	f7fb fad0 	bl	8013ea4 <USBD_GetString>
 8018904:	e004      	b.n	8018910 <USBD_DFU_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8018906:	683a      	ldr	r2, [r7, #0]
 8018908:	4904      	ldr	r1, [pc, #16]	@ (801891c <USBD_DFU_InterfaceStrDescriptor+0x34>)
 801890a:	4805      	ldr	r0, [pc, #20]	@ (8018920 <USBD_DFU_InterfaceStrDescriptor+0x38>)
 801890c:	f7fb faca 	bl	8013ea4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018910:	4b02      	ldr	r3, [pc, #8]	@ (801891c <USBD_DFU_InterfaceStrDescriptor+0x34>)
}
 8018912:	4618      	mov	r0, r3
 8018914:	3708      	adds	r7, #8
 8018916:	46bd      	mov	sp, r7
 8018918:	bd80      	pop	{r7, pc}
 801891a:	bf00      	nop
 801891c:	20001040 	.word	0x20001040
 8018920:	0801d0b8 	.word	0x0801d0b8

08018924 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018924:	b580      	push	{r7, lr}
 8018926:	b084      	sub	sp, #16
 8018928:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801892a:	4b0f      	ldr	r3, [pc, #60]	@ (8018968 <Get_SerialNum+0x44>)
 801892c:	681b      	ldr	r3, [r3, #0]
 801892e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018930:	4b0e      	ldr	r3, [pc, #56]	@ (801896c <Get_SerialNum+0x48>)
 8018932:	681b      	ldr	r3, [r3, #0]
 8018934:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018936:	4b0e      	ldr	r3, [pc, #56]	@ (8018970 <Get_SerialNum+0x4c>)
 8018938:	681b      	ldr	r3, [r3, #0]
 801893a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801893c:	68fa      	ldr	r2, [r7, #12]
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	4413      	add	r3, r2
 8018942:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018944:	68fb      	ldr	r3, [r7, #12]
 8018946:	2b00      	cmp	r3, #0
 8018948:	d009      	beq.n	801895e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801894a:	2208      	movs	r2, #8
 801894c:	4909      	ldr	r1, [pc, #36]	@ (8018974 <Get_SerialNum+0x50>)
 801894e:	68f8      	ldr	r0, [r7, #12]
 8018950:	f000 f814 	bl	801897c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018954:	2204      	movs	r2, #4
 8018956:	4908      	ldr	r1, [pc, #32]	@ (8018978 <Get_SerialNum+0x54>)
 8018958:	68b8      	ldr	r0, [r7, #8]
 801895a:	f000 f80f 	bl	801897c <IntToUnicode>
  }
}
 801895e:	bf00      	nop
 8018960:	3710      	adds	r7, #16
 8018962:	46bd      	mov	sp, r7
 8018964:	bd80      	pop	{r7, pc}
 8018966:	bf00      	nop
 8018968:	1fff7590 	.word	0x1fff7590
 801896c:	1fff7594 	.word	0x1fff7594
 8018970:	1fff7598 	.word	0x1fff7598
 8018974:	200000e6 	.word	0x200000e6
 8018978:	200000f6 	.word	0x200000f6

0801897c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801897c:	b480      	push	{r7}
 801897e:	b087      	sub	sp, #28
 8018980:	af00      	add	r7, sp, #0
 8018982:	60f8      	str	r0, [r7, #12]
 8018984:	60b9      	str	r1, [r7, #8]
 8018986:	4613      	mov	r3, r2
 8018988:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801898a:	2300      	movs	r3, #0
 801898c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801898e:	2300      	movs	r3, #0
 8018990:	75fb      	strb	r3, [r7, #23]
 8018992:	e027      	b.n	80189e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018994:	68fb      	ldr	r3, [r7, #12]
 8018996:	0f1b      	lsrs	r3, r3, #28
 8018998:	2b09      	cmp	r3, #9
 801899a:	d80b      	bhi.n	80189b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801899c:	68fb      	ldr	r3, [r7, #12]
 801899e:	0f1b      	lsrs	r3, r3, #28
 80189a0:	b2da      	uxtb	r2, r3
 80189a2:	7dfb      	ldrb	r3, [r7, #23]
 80189a4:	005b      	lsls	r3, r3, #1
 80189a6:	4619      	mov	r1, r3
 80189a8:	68bb      	ldr	r3, [r7, #8]
 80189aa:	440b      	add	r3, r1
 80189ac:	3230      	adds	r2, #48	@ 0x30
 80189ae:	b2d2      	uxtb	r2, r2
 80189b0:	701a      	strb	r2, [r3, #0]
 80189b2:	e00a      	b.n	80189ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80189b4:	68fb      	ldr	r3, [r7, #12]
 80189b6:	0f1b      	lsrs	r3, r3, #28
 80189b8:	b2da      	uxtb	r2, r3
 80189ba:	7dfb      	ldrb	r3, [r7, #23]
 80189bc:	005b      	lsls	r3, r3, #1
 80189be:	4619      	mov	r1, r3
 80189c0:	68bb      	ldr	r3, [r7, #8]
 80189c2:	440b      	add	r3, r1
 80189c4:	3237      	adds	r2, #55	@ 0x37
 80189c6:	b2d2      	uxtb	r2, r2
 80189c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80189ca:	68fb      	ldr	r3, [r7, #12]
 80189cc:	011b      	lsls	r3, r3, #4
 80189ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80189d0:	7dfb      	ldrb	r3, [r7, #23]
 80189d2:	005b      	lsls	r3, r3, #1
 80189d4:	3301      	adds	r3, #1
 80189d6:	68ba      	ldr	r2, [r7, #8]
 80189d8:	4413      	add	r3, r2
 80189da:	2200      	movs	r2, #0
 80189dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80189de:	7dfb      	ldrb	r3, [r7, #23]
 80189e0:	3301      	adds	r3, #1
 80189e2:	75fb      	strb	r3, [r7, #23]
 80189e4:	7dfa      	ldrb	r2, [r7, #23]
 80189e6:	79fb      	ldrb	r3, [r7, #7]
 80189e8:	429a      	cmp	r2, r3
 80189ea:	d3d3      	bcc.n	8018994 <IntToUnicode+0x18>
  }
}
 80189ec:	bf00      	nop
 80189ee:	bf00      	nop
 80189f0:	371c      	adds	r7, #28
 80189f2:	46bd      	mov	sp, r7
 80189f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189f8:	4770      	bx	lr

080189fa <FLASH_If_Init>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Init(void)
{
 80189fa:	b480      	push	{r7}
 80189fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 80189fe:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8018a00:	4618      	mov	r0, r3
 8018a02:	46bd      	mov	sp, r7
 8018a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a08:	4770      	bx	lr

08018a0a <FLASH_If_DeInit>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t FLASH_If_DeInit(void)
{
 8018a0a:	b480      	push	{r7}
 8018a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 8018a0e:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8018a10:	4618      	mov	r0, r3
 8018a12:	46bd      	mov	sp, r7
 8018a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a18:	4770      	bx	lr

08018a1a <FLASH_If_Erase>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Erase(uint32_t Add)
{
 8018a1a:	b480      	push	{r7}
 8018a1c:	b083      	sub	sp, #12
 8018a1e:	af00      	add	r7, sp, #0
 8018a20:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 8018a22:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8018a24:	4618      	mov	r0, r3
 8018a26:	370c      	adds	r7, #12
 8018a28:	46bd      	mov	sp, r7
 8018a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a2e:	4770      	bx	lr

08018a30 <FLASH_If_Write>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Write(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8018a30:	b480      	push	{r7}
 8018a32:	b085      	sub	sp, #20
 8018a34:	af00      	add	r7, sp, #0
 8018a36:	60f8      	str	r0, [r7, #12]
 8018a38:	60b9      	str	r1, [r7, #8]
 8018a3a:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 8018a3c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8018a3e:	4618      	mov	r0, r3
 8018a40:	3714      	adds	r7, #20
 8018a42:	46bd      	mov	sp, r7
 8018a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a48:	4770      	bx	lr

08018a4a <FLASH_If_Read>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *FLASH_If_Read(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8018a4a:	b480      	push	{r7}
 8018a4c:	b085      	sub	sp, #20
 8018a4e:	af00      	add	r7, sp, #0
 8018a50:	60f8      	str	r0, [r7, #12]
 8018a52:	60b9      	str	r1, [r7, #8]
 8018a54:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(FLASH_BASE);
 8018a56:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
  /* USER CODE END 4 */
}
 8018a5a:	4618      	mov	r0, r3
 8018a5c:	3714      	adds	r7, #20
 8018a5e:	46bd      	mov	sp, r7
 8018a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a64:	4770      	bx	lr

08018a66 <FLASH_If_GetStatus>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t FLASH_If_GetStatus(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 8018a66:	b480      	push	{r7}
 8018a68:	b085      	sub	sp, #20
 8018a6a:	af00      	add	r7, sp, #0
 8018a6c:	60f8      	str	r0, [r7, #12]
 8018a6e:	460b      	mov	r3, r1
 8018a70:	607a      	str	r2, [r7, #4]
 8018a72:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 8018a74:	7afb      	ldrb	r3, [r7, #11]
 8018a76:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 8018a78:	bf00      	nop
  }
  return (USBD_OK);
 8018a7a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018a7c:	4618      	mov	r0, r3
 8018a7e:	3714      	adds	r7, #20
 8018a80:	46bd      	mov	sp, r7
 8018a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a86:	4770      	bx	lr

08018a88 <LL_AHB2_GRP1_EnableClock>:
{
 8018a88:	b480      	push	{r7}
 8018a8a:	b085      	sub	sp, #20
 8018a8c:	af00      	add	r7, sp, #0
 8018a8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8018a90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018a94:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018a96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	4313      	orrs	r3, r2
 8018a9e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8018aa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018aa4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	4013      	ands	r3, r2
 8018aaa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8018aac:	68fb      	ldr	r3, [r7, #12]
}
 8018aae:	bf00      	nop
 8018ab0:	3714      	adds	r7, #20
 8018ab2:	46bd      	mov	sp, r7
 8018ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ab8:	4770      	bx	lr

08018aba <LL_APB1_GRP1_EnableClock>:
{
 8018aba:	b480      	push	{r7}
 8018abc:	b085      	sub	sp, #20
 8018abe:	af00      	add	r7, sp, #0
 8018ac0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8018ac2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018ac6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018ac8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	4313      	orrs	r3, r2
 8018ad0:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8018ad2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018ad6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	4013      	ands	r3, r2
 8018adc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8018ade:	68fb      	ldr	r3, [r7, #12]
}
 8018ae0:	bf00      	nop
 8018ae2:	3714      	adds	r7, #20
 8018ae4:	46bd      	mov	sp, r7
 8018ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aea:	4770      	bx	lr

08018aec <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018aec:	b580      	push	{r7, lr}
 8018aee:	b09c      	sub	sp, #112	@ 0x70
 8018af0:	af00      	add	r7, sp, #0
 8018af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018af4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8018af8:	2200      	movs	r2, #0
 8018afa:	601a      	str	r2, [r3, #0]
 8018afc:	605a      	str	r2, [r3, #4]
 8018afe:	609a      	str	r2, [r3, #8]
 8018b00:	60da      	str	r2, [r3, #12]
 8018b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8018b04:	f107 030c 	add.w	r3, r7, #12
 8018b08:	2250      	movs	r2, #80	@ 0x50
 8018b0a:	2100      	movs	r1, #0
 8018b0c:	4618      	mov	r0, r3
 8018b0e:	f002 f9c9 	bl	801aea4 <memset>
  if(pcdHandle->Instance==USB)
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	681b      	ldr	r3, [r3, #0]
 8018b16:	4a23      	ldr	r2, [pc, #140]	@ (8018ba4 <HAL_PCD_MspInit+0xb8>)
 8018b18:	4293      	cmp	r3, r2
 8018b1a:	d13e      	bne.n	8018b9a <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8018b1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8018b20:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8018b22:	2318      	movs	r3, #24
 8018b24:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8018b26:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8018b2a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8018b2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8018b30:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8018b32:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8018b36:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8018b38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8018b3c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8018b3e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8018b42:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8018b44:	f107 030c 	add.w	r3, r7, #12
 8018b48:	4618      	mov	r0, r3
 8018b4a:	f7f3 ff8b 	bl	800ca64 <HAL_RCCEx_PeriphCLKConfig>
 8018b4e:	4603      	mov	r3, r0
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d001      	beq.n	8018b58 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8018b54:	f7ee f94a 	bl	8006dec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018b58:	2001      	movs	r0, #1
 8018b5a:	f7ff ff95 	bl	8018a88 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018b5e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8018b62:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018b64:	2302      	movs	r3, #2
 8018b66:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018b68:	2300      	movs	r3, #0
 8018b6a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018b6c:	2300      	movs	r3, #0
 8018b6e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8018b70:	230a      	movs	r3, #10
 8018b72:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018b74:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8018b78:	4619      	mov	r1, r3
 8018b7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8018b7e:	f7ef fc41 	bl	8008404 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8018b82:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8018b86:	f7ff ff98 	bl	8018aba <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8018b8a:	2200      	movs	r2, #0
 8018b8c:	2100      	movs	r1, #0
 8018b8e:	2014      	movs	r0, #20
 8018b90:	f7ef f905 	bl	8007d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8018b94:	2014      	movs	r0, #20
 8018b96:	f7ef f91c 	bl	8007dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8018b9a:	bf00      	nop
 8018b9c:	3770      	adds	r7, #112	@ 0x70
 8018b9e:	46bd      	mov	sp, r7
 8018ba0:	bd80      	pop	{r7, pc}
 8018ba2:	bf00      	nop
 8018ba4:	40006800 	.word	0x40006800

08018ba8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018ba8:	b580      	push	{r7, lr}
 8018baa:	b082      	sub	sp, #8
 8018bac:	af00      	add	r7, sp, #0
 8018bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8018bb6:	687b      	ldr	r3, [r7, #4]
 8018bb8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8018bbc:	4619      	mov	r1, r3
 8018bbe:	4610      	mov	r0, r2
 8018bc0:	f7fa f886 	bl	8012cd0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8018bc4:	bf00      	nop
 8018bc6:	3708      	adds	r7, #8
 8018bc8:	46bd      	mov	sp, r7
 8018bca:	bd80      	pop	{r7, pc}

08018bcc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018bcc:	b580      	push	{r7, lr}
 8018bce:	b082      	sub	sp, #8
 8018bd0:	af00      	add	r7, sp, #0
 8018bd2:	6078      	str	r0, [r7, #4]
 8018bd4:	460b      	mov	r3, r1
 8018bd6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8018bde:	78fa      	ldrb	r2, [r7, #3]
 8018be0:	6879      	ldr	r1, [r7, #4]
 8018be2:	4613      	mov	r3, r2
 8018be4:	009b      	lsls	r3, r3, #2
 8018be6:	4413      	add	r3, r2
 8018be8:	00db      	lsls	r3, r3, #3
 8018bea:	440b      	add	r3, r1
 8018bec:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8018bf0:	681a      	ldr	r2, [r3, #0]
 8018bf2:	78fb      	ldrb	r3, [r7, #3]
 8018bf4:	4619      	mov	r1, r3
 8018bf6:	f7fa f8c0 	bl	8012d7a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8018bfa:	bf00      	nop
 8018bfc:	3708      	adds	r7, #8
 8018bfe:	46bd      	mov	sp, r7
 8018c00:	bd80      	pop	{r7, pc}

08018c02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018c02:	b580      	push	{r7, lr}
 8018c04:	b082      	sub	sp, #8
 8018c06:	af00      	add	r7, sp, #0
 8018c08:	6078      	str	r0, [r7, #4]
 8018c0a:	460b      	mov	r3, r1
 8018c0c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8018c14:	78fa      	ldrb	r2, [r7, #3]
 8018c16:	6879      	ldr	r1, [r7, #4]
 8018c18:	4613      	mov	r3, r2
 8018c1a:	009b      	lsls	r3, r3, #2
 8018c1c:	4413      	add	r3, r2
 8018c1e:	00db      	lsls	r3, r3, #3
 8018c20:	440b      	add	r3, r1
 8018c22:	3324      	adds	r3, #36	@ 0x24
 8018c24:	681a      	ldr	r2, [r3, #0]
 8018c26:	78fb      	ldrb	r3, [r7, #3]
 8018c28:	4619      	mov	r1, r3
 8018c2a:	f7fa f959 	bl	8012ee0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8018c2e:	bf00      	nop
 8018c30:	3708      	adds	r7, #8
 8018c32:	46bd      	mov	sp, r7
 8018c34:	bd80      	pop	{r7, pc}

08018c36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018c36:	b580      	push	{r7, lr}
 8018c38:	b082      	sub	sp, #8
 8018c3a:	af00      	add	r7, sp, #0
 8018c3c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018c44:	4618      	mov	r0, r3
 8018c46:	f7fa fa93 	bl	8013170 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8018c4a:	bf00      	nop
 8018c4c:	3708      	adds	r7, #8
 8018c4e:	46bd      	mov	sp, r7
 8018c50:	bd80      	pop	{r7, pc}

08018c52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018c52:	b580      	push	{r7, lr}
 8018c54:	b084      	sub	sp, #16
 8018c56:	af00      	add	r7, sp, #0
 8018c58:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018c5a:	2301      	movs	r3, #1
 8018c5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	795b      	ldrb	r3, [r3, #5]
 8018c62:	2b02      	cmp	r3, #2
 8018c64:	d001      	beq.n	8018c6a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8018c66:	f7ee f8c1 	bl	8006dec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018c70:	7bfa      	ldrb	r2, [r7, #15]
 8018c72:	4611      	mov	r1, r2
 8018c74:	4618      	mov	r0, r3
 8018c76:	f7fa fa37 	bl	80130e8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018c80:	4618      	mov	r0, r3
 8018c82:	f7fa f9df 	bl	8013044 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8018c86:	bf00      	nop
 8018c88:	3710      	adds	r7, #16
 8018c8a:	46bd      	mov	sp, r7
 8018c8c:	bd80      	pop	{r7, pc}
	...

08018c90 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018c90:	b580      	push	{r7, lr}
 8018c92:	b082      	sub	sp, #8
 8018c94:	af00      	add	r7, sp, #0
 8018c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018c9e:	4618      	mov	r0, r3
 8018ca0:	f7fa fa32 	bl	8013108 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	7a5b      	ldrb	r3, [r3, #9]
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	d005      	beq.n	8018cb8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018cac:	4b04      	ldr	r3, [pc, #16]	@ (8018cc0 <HAL_PCD_SuspendCallback+0x30>)
 8018cae:	691b      	ldr	r3, [r3, #16]
 8018cb0:	4a03      	ldr	r2, [pc, #12]	@ (8018cc0 <HAL_PCD_SuspendCallback+0x30>)
 8018cb2:	f043 0306 	orr.w	r3, r3, #6
 8018cb6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8018cb8:	bf00      	nop
 8018cba:	3708      	adds	r7, #8
 8018cbc:	46bd      	mov	sp, r7
 8018cbe:	bd80      	pop	{r7, pc}
 8018cc0:	e000ed00 	.word	0xe000ed00

08018cc4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018cc4:	b580      	push	{r7, lr}
 8018cc6:	b082      	sub	sp, #8
 8018cc8:	af00      	add	r7, sp, #0
 8018cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	7a5b      	ldrb	r3, [r3, #9]
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	d007      	beq.n	8018ce4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018cd4:	4b08      	ldr	r3, [pc, #32]	@ (8018cf8 <HAL_PCD_ResumeCallback+0x34>)
 8018cd6:	691b      	ldr	r3, [r3, #16]
 8018cd8:	4a07      	ldr	r2, [pc, #28]	@ (8018cf8 <HAL_PCD_ResumeCallback+0x34>)
 8018cda:	f023 0306 	bic.w	r3, r3, #6
 8018cde:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8018ce0:	f000 f9ca 	bl	8019078 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018cea:	4618      	mov	r0, r3
 8018cec:	f7fa fa28 	bl	8013140 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8018cf0:	bf00      	nop
 8018cf2:	3708      	adds	r7, #8
 8018cf4:	46bd      	mov	sp, r7
 8018cf6:	bd80      	pop	{r7, pc}
 8018cf8:	e000ed00 	.word	0xe000ed00

08018cfc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018cfc:	b580      	push	{r7, lr}
 8018cfe:	b082      	sub	sp, #8
 8018d00:	af00      	add	r7, sp, #0
 8018d02:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8018d04:	4a1f      	ldr	r2, [pc, #124]	@ (8018d84 <USBD_LL_Init+0x88>)
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	4a1d      	ldr	r2, [pc, #116]	@ (8018d84 <USBD_LL_Init+0x88>)
 8018d10:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8018d14:	f7f2 fb60 	bl	800b3d8 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8018d18:	4b1a      	ldr	r3, [pc, #104]	@ (8018d84 <USBD_LL_Init+0x88>)
 8018d1a:	4a1b      	ldr	r2, [pc, #108]	@ (8018d88 <USBD_LL_Init+0x8c>)
 8018d1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8018d1e:	4b19      	ldr	r3, [pc, #100]	@ (8018d84 <USBD_LL_Init+0x88>)
 8018d20:	2208      	movs	r2, #8
 8018d22:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8018d24:	4b17      	ldr	r3, [pc, #92]	@ (8018d84 <USBD_LL_Init+0x88>)
 8018d26:	2202      	movs	r2, #2
 8018d28:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018d2a:	4b16      	ldr	r3, [pc, #88]	@ (8018d84 <USBD_LL_Init+0x88>)
 8018d2c:	2202      	movs	r2, #2
 8018d2e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8018d30:	4b14      	ldr	r3, [pc, #80]	@ (8018d84 <USBD_LL_Init+0x88>)
 8018d32:	2200      	movs	r2, #0
 8018d34:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8018d36:	4b13      	ldr	r3, [pc, #76]	@ (8018d84 <USBD_LL_Init+0x88>)
 8018d38:	2200      	movs	r2, #0
 8018d3a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8018d3c:	4b11      	ldr	r3, [pc, #68]	@ (8018d84 <USBD_LL_Init+0x88>)
 8018d3e:	2200      	movs	r2, #0
 8018d40:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8018d42:	4b10      	ldr	r3, [pc, #64]	@ (8018d84 <USBD_LL_Init+0x88>)
 8018d44:	2200      	movs	r2, #0
 8018d46:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8018d48:	480e      	ldr	r0, [pc, #56]	@ (8018d84 <USBD_LL_Init+0x88>)
 8018d4a:	f7f0 fe63 	bl	8009a14 <HAL_PCD_Init>
 8018d4e:	4603      	mov	r3, r0
 8018d50:	2b00      	cmp	r3, #0
 8018d52:	d001      	beq.n	8018d58 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8018d54:	f7ee f84a 	bl	8006dec <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018d5e:	2318      	movs	r3, #24
 8018d60:	2200      	movs	r2, #0
 8018d62:	2100      	movs	r1, #0
 8018d64:	f7f2 faac 	bl	800b2c0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018d6e:	2358      	movs	r3, #88	@ 0x58
 8018d70:	2200      	movs	r2, #0
 8018d72:	2180      	movs	r1, #128	@ 0x80
 8018d74:	f7f2 faa4 	bl	800b2c0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 8018d78:	2300      	movs	r3, #0
}
 8018d7a:	4618      	mov	r0, r3
 8018d7c:	3708      	adds	r7, #8
 8018d7e:	46bd      	mov	sp, r7
 8018d80:	bd80      	pop	{r7, pc}
 8018d82:	bf00      	nop
 8018d84:	20001240 	.word	0x20001240
 8018d88:	40006800 	.word	0x40006800

08018d8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018d8c:	b580      	push	{r7, lr}
 8018d8e:	b084      	sub	sp, #16
 8018d90:	af00      	add	r7, sp, #0
 8018d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018d94:	2300      	movs	r3, #0
 8018d96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018d98:	2300      	movs	r3, #0
 8018d9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018da2:	4618      	mov	r0, r3
 8018da4:	f7f0 ff04 	bl	8009bb0 <HAL_PCD_Start>
 8018da8:	4603      	mov	r3, r0
 8018daa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018dac:	7bfb      	ldrb	r3, [r7, #15]
 8018dae:	4618      	mov	r0, r3
 8018db0:	f000 f968 	bl	8019084 <USBD_Get_USB_Status>
 8018db4:	4603      	mov	r3, r0
 8018db6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018db8:	7bbb      	ldrb	r3, [r7, #14]
}
 8018dba:	4618      	mov	r0, r3
 8018dbc:	3710      	adds	r7, #16
 8018dbe:	46bd      	mov	sp, r7
 8018dc0:	bd80      	pop	{r7, pc}

08018dc2 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8018dc2:	b580      	push	{r7, lr}
 8018dc4:	b084      	sub	sp, #16
 8018dc6:	af00      	add	r7, sp, #0
 8018dc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018dca:	2300      	movs	r3, #0
 8018dcc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018dce:	2300      	movs	r3, #0
 8018dd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018dd8:	4618      	mov	r0, r3
 8018dda:	f7f0 ff0b 	bl	8009bf4 <HAL_PCD_Stop>
 8018dde:	4603      	mov	r3, r0
 8018de0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018de2:	7bfb      	ldrb	r3, [r7, #15]
 8018de4:	4618      	mov	r0, r3
 8018de6:	f000 f94d 	bl	8019084 <USBD_Get_USB_Status>
 8018dea:	4603      	mov	r3, r0
 8018dec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018dee:	7bbb      	ldrb	r3, [r7, #14]
}
 8018df0:	4618      	mov	r0, r3
 8018df2:	3710      	adds	r7, #16
 8018df4:	46bd      	mov	sp, r7
 8018df6:	bd80      	pop	{r7, pc}

08018df8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018df8:	b580      	push	{r7, lr}
 8018dfa:	b084      	sub	sp, #16
 8018dfc:	af00      	add	r7, sp, #0
 8018dfe:	6078      	str	r0, [r7, #4]
 8018e00:	4608      	mov	r0, r1
 8018e02:	4611      	mov	r1, r2
 8018e04:	461a      	mov	r2, r3
 8018e06:	4603      	mov	r3, r0
 8018e08:	70fb      	strb	r3, [r7, #3]
 8018e0a:	460b      	mov	r3, r1
 8018e0c:	70bb      	strb	r3, [r7, #2]
 8018e0e:	4613      	mov	r3, r2
 8018e10:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018e12:	2300      	movs	r3, #0
 8018e14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018e16:	2300      	movs	r3, #0
 8018e18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018e20:	78bb      	ldrb	r3, [r7, #2]
 8018e22:	883a      	ldrh	r2, [r7, #0]
 8018e24:	78f9      	ldrb	r1, [r7, #3]
 8018e26:	f7f1 f852 	bl	8009ece <HAL_PCD_EP_Open>
 8018e2a:	4603      	mov	r3, r0
 8018e2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018e2e:	7bfb      	ldrb	r3, [r7, #15]
 8018e30:	4618      	mov	r0, r3
 8018e32:	f000 f927 	bl	8019084 <USBD_Get_USB_Status>
 8018e36:	4603      	mov	r3, r0
 8018e38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018e3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8018e3c:	4618      	mov	r0, r3
 8018e3e:	3710      	adds	r7, #16
 8018e40:	46bd      	mov	sp, r7
 8018e42:	bd80      	pop	{r7, pc}

08018e44 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018e44:	b580      	push	{r7, lr}
 8018e46:	b084      	sub	sp, #16
 8018e48:	af00      	add	r7, sp, #0
 8018e4a:	6078      	str	r0, [r7, #4]
 8018e4c:	460b      	mov	r3, r1
 8018e4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018e50:	2300      	movs	r3, #0
 8018e52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018e54:	2300      	movs	r3, #0
 8018e56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018e5e:	78fa      	ldrb	r2, [r7, #3]
 8018e60:	4611      	mov	r1, r2
 8018e62:	4618      	mov	r0, r3
 8018e64:	f7f1 f8fa 	bl	800a05c <HAL_PCD_EP_SetStall>
 8018e68:	4603      	mov	r3, r0
 8018e6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018e6c:	7bfb      	ldrb	r3, [r7, #15]
 8018e6e:	4618      	mov	r0, r3
 8018e70:	f000 f908 	bl	8019084 <USBD_Get_USB_Status>
 8018e74:	4603      	mov	r3, r0
 8018e76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018e78:	7bbb      	ldrb	r3, [r7, #14]
}
 8018e7a:	4618      	mov	r0, r3
 8018e7c:	3710      	adds	r7, #16
 8018e7e:	46bd      	mov	sp, r7
 8018e80:	bd80      	pop	{r7, pc}

08018e82 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018e82:	b580      	push	{r7, lr}
 8018e84:	b084      	sub	sp, #16
 8018e86:	af00      	add	r7, sp, #0
 8018e88:	6078      	str	r0, [r7, #4]
 8018e8a:	460b      	mov	r3, r1
 8018e8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018e8e:	2300      	movs	r3, #0
 8018e90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018e92:	2300      	movs	r3, #0
 8018e94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018e9c:	78fa      	ldrb	r2, [r7, #3]
 8018e9e:	4611      	mov	r1, r2
 8018ea0:	4618      	mov	r0, r3
 8018ea2:	f7f1 f92d 	bl	800a100 <HAL_PCD_EP_ClrStall>
 8018ea6:	4603      	mov	r3, r0
 8018ea8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018eaa:	7bfb      	ldrb	r3, [r7, #15]
 8018eac:	4618      	mov	r0, r3
 8018eae:	f000 f8e9 	bl	8019084 <USBD_Get_USB_Status>
 8018eb2:	4603      	mov	r3, r0
 8018eb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018eb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8018eb8:	4618      	mov	r0, r3
 8018eba:	3710      	adds	r7, #16
 8018ebc:	46bd      	mov	sp, r7
 8018ebe:	bd80      	pop	{r7, pc}

08018ec0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018ec0:	b480      	push	{r7}
 8018ec2:	b085      	sub	sp, #20
 8018ec4:	af00      	add	r7, sp, #0
 8018ec6:	6078      	str	r0, [r7, #4]
 8018ec8:	460b      	mov	r3, r1
 8018eca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018ed2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018ed4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	da0b      	bge.n	8018ef4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018edc:	78fb      	ldrb	r3, [r7, #3]
 8018ede:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018ee2:	68f9      	ldr	r1, [r7, #12]
 8018ee4:	4613      	mov	r3, r2
 8018ee6:	009b      	lsls	r3, r3, #2
 8018ee8:	4413      	add	r3, r2
 8018eea:	00db      	lsls	r3, r3, #3
 8018eec:	440b      	add	r3, r1
 8018eee:	3312      	adds	r3, #18
 8018ef0:	781b      	ldrb	r3, [r3, #0]
 8018ef2:	e00b      	b.n	8018f0c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018ef4:	78fb      	ldrb	r3, [r7, #3]
 8018ef6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018efa:	68f9      	ldr	r1, [r7, #12]
 8018efc:	4613      	mov	r3, r2
 8018efe:	009b      	lsls	r3, r3, #2
 8018f00:	4413      	add	r3, r2
 8018f02:	00db      	lsls	r3, r3, #3
 8018f04:	440b      	add	r3, r1
 8018f06:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8018f0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018f0c:	4618      	mov	r0, r3
 8018f0e:	3714      	adds	r7, #20
 8018f10:	46bd      	mov	sp, r7
 8018f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f16:	4770      	bx	lr

08018f18 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018f18:	b580      	push	{r7, lr}
 8018f1a:	b084      	sub	sp, #16
 8018f1c:	af00      	add	r7, sp, #0
 8018f1e:	6078      	str	r0, [r7, #4]
 8018f20:	460b      	mov	r3, r1
 8018f22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018f24:	2300      	movs	r3, #0
 8018f26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018f28:	2300      	movs	r3, #0
 8018f2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018f32:	78fa      	ldrb	r2, [r7, #3]
 8018f34:	4611      	mov	r1, r2
 8018f36:	4618      	mov	r0, r3
 8018f38:	f7f0 ffa5 	bl	8009e86 <HAL_PCD_SetAddress>
 8018f3c:	4603      	mov	r3, r0
 8018f3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018f40:	7bfb      	ldrb	r3, [r7, #15]
 8018f42:	4618      	mov	r0, r3
 8018f44:	f000 f89e 	bl	8019084 <USBD_Get_USB_Status>
 8018f48:	4603      	mov	r3, r0
 8018f4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018f4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8018f4e:	4618      	mov	r0, r3
 8018f50:	3710      	adds	r7, #16
 8018f52:	46bd      	mov	sp, r7
 8018f54:	bd80      	pop	{r7, pc}

08018f56 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018f56:	b580      	push	{r7, lr}
 8018f58:	b086      	sub	sp, #24
 8018f5a:	af00      	add	r7, sp, #0
 8018f5c:	60f8      	str	r0, [r7, #12]
 8018f5e:	607a      	str	r2, [r7, #4]
 8018f60:	603b      	str	r3, [r7, #0]
 8018f62:	460b      	mov	r3, r1
 8018f64:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018f66:	2300      	movs	r3, #0
 8018f68:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018f6a:	2300      	movs	r3, #0
 8018f6c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018f6e:	68fb      	ldr	r3, [r7, #12]
 8018f70:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018f74:	7af9      	ldrb	r1, [r7, #11]
 8018f76:	683b      	ldr	r3, [r7, #0]
 8018f78:	687a      	ldr	r2, [r7, #4]
 8018f7a:	f7f1 f838 	bl	8009fee <HAL_PCD_EP_Transmit>
 8018f7e:	4603      	mov	r3, r0
 8018f80:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018f82:	7dfb      	ldrb	r3, [r7, #23]
 8018f84:	4618      	mov	r0, r3
 8018f86:	f000 f87d 	bl	8019084 <USBD_Get_USB_Status>
 8018f8a:	4603      	mov	r3, r0
 8018f8c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018f8e:	7dbb      	ldrb	r3, [r7, #22]
}
 8018f90:	4618      	mov	r0, r3
 8018f92:	3718      	adds	r7, #24
 8018f94:	46bd      	mov	sp, r7
 8018f96:	bd80      	pop	{r7, pc}

08018f98 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018f98:	b580      	push	{r7, lr}
 8018f9a:	b086      	sub	sp, #24
 8018f9c:	af00      	add	r7, sp, #0
 8018f9e:	60f8      	str	r0, [r7, #12]
 8018fa0:	607a      	str	r2, [r7, #4]
 8018fa2:	603b      	str	r3, [r7, #0]
 8018fa4:	460b      	mov	r3, r1
 8018fa6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018fa8:	2300      	movs	r3, #0
 8018faa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018fac:	2300      	movs	r3, #0
 8018fae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018fb0:	68fb      	ldr	r3, [r7, #12]
 8018fb2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018fb6:	7af9      	ldrb	r1, [r7, #11]
 8018fb8:	683b      	ldr	r3, [r7, #0]
 8018fba:	687a      	ldr	r2, [r7, #4]
 8018fbc:	f7f0 ffe6 	bl	8009f8c <HAL_PCD_EP_Receive>
 8018fc0:	4603      	mov	r3, r0
 8018fc2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018fc4:	7dfb      	ldrb	r3, [r7, #23]
 8018fc6:	4618      	mov	r0, r3
 8018fc8:	f000 f85c 	bl	8019084 <USBD_Get_USB_Status>
 8018fcc:	4603      	mov	r3, r0
 8018fce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018fd0:	7dbb      	ldrb	r3, [r7, #22]
}
 8018fd2:	4618      	mov	r0, r3
 8018fd4:	3718      	adds	r7, #24
 8018fd6:	46bd      	mov	sp, r7
 8018fd8:	bd80      	pop	{r7, pc}
	...

08018fdc <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018fdc:	b580      	push	{r7, lr}
 8018fde:	b082      	sub	sp, #8
 8018fe0:	af00      	add	r7, sp, #0
 8018fe2:	6078      	str	r0, [r7, #4]
 8018fe4:	460b      	mov	r3, r1
 8018fe6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8018fe8:	78fb      	ldrb	r3, [r7, #3]
 8018fea:	2b00      	cmp	r3, #0
 8018fec:	d002      	beq.n	8018ff4 <HAL_PCDEx_LPM_Callback+0x18>
 8018fee:	2b01      	cmp	r3, #1
 8018ff0:	d013      	beq.n	801901a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8018ff2:	e023      	b.n	801903c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	7a5b      	ldrb	r3, [r3, #9]
 8018ff8:	2b00      	cmp	r3, #0
 8018ffa:	d007      	beq.n	801900c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8018ffc:	f000 f83c 	bl	8019078 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019000:	4b10      	ldr	r3, [pc, #64]	@ (8019044 <HAL_PCDEx_LPM_Callback+0x68>)
 8019002:	691b      	ldr	r3, [r3, #16]
 8019004:	4a0f      	ldr	r2, [pc, #60]	@ (8019044 <HAL_PCDEx_LPM_Callback+0x68>)
 8019006:	f023 0306 	bic.w	r3, r3, #6
 801900a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8019012:	4618      	mov	r0, r3
 8019014:	f7fa f894 	bl	8013140 <USBD_LL_Resume>
    break;
 8019018:	e010      	b.n	801903c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8019020:	4618      	mov	r0, r3
 8019022:	f7fa f871 	bl	8013108 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8019026:	687b      	ldr	r3, [r7, #4]
 8019028:	7a5b      	ldrb	r3, [r3, #9]
 801902a:	2b00      	cmp	r3, #0
 801902c:	d005      	beq.n	801903a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801902e:	4b05      	ldr	r3, [pc, #20]	@ (8019044 <HAL_PCDEx_LPM_Callback+0x68>)
 8019030:	691b      	ldr	r3, [r3, #16]
 8019032:	4a04      	ldr	r2, [pc, #16]	@ (8019044 <HAL_PCDEx_LPM_Callback+0x68>)
 8019034:	f043 0306 	orr.w	r3, r3, #6
 8019038:	6113      	str	r3, [r2, #16]
    break;
 801903a:	bf00      	nop
}
 801903c:	bf00      	nop
 801903e:	3708      	adds	r7, #8
 8019040:	46bd      	mov	sp, r7
 8019042:	bd80      	pop	{r7, pc}
 8019044:	e000ed00 	.word	0xe000ed00

08019048 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019048:	b480      	push	{r7}
 801904a:	b083      	sub	sp, #12
 801904c:	af00      	add	r7, sp, #0
 801904e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8019050:	4b03      	ldr	r3, [pc, #12]	@ (8019060 <USBD_static_malloc+0x18>)
}
 8019052:	4618      	mov	r0, r3
 8019054:	370c      	adds	r7, #12
 8019056:	46bd      	mov	sp, r7
 8019058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801905c:	4770      	bx	lr
 801905e:	bf00      	nop
 8019060:	2000151c 	.word	0x2000151c

08019064 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8019064:	b480      	push	{r7}
 8019066:	b083      	sub	sp, #12
 8019068:	af00      	add	r7, sp, #0
 801906a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801906c:	bf00      	nop
 801906e:	370c      	adds	r7, #12
 8019070:	46bd      	mov	sp, r7
 8019072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019076:	4770      	bx	lr

08019078 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8019078:	b580      	push	{r7, lr}
 801907a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801907c:	f7ed fe0a 	bl	8006c94 <SystemClock_Config>
}
 8019080:	bf00      	nop
 8019082:	bd80      	pop	{r7, pc}

08019084 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019084:	b480      	push	{r7}
 8019086:	b085      	sub	sp, #20
 8019088:	af00      	add	r7, sp, #0
 801908a:	4603      	mov	r3, r0
 801908c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801908e:	2300      	movs	r3, #0
 8019090:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019092:	79fb      	ldrb	r3, [r7, #7]
 8019094:	2b03      	cmp	r3, #3
 8019096:	d817      	bhi.n	80190c8 <USBD_Get_USB_Status+0x44>
 8019098:	a201      	add	r2, pc, #4	@ (adr r2, 80190a0 <USBD_Get_USB_Status+0x1c>)
 801909a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801909e:	bf00      	nop
 80190a0:	080190b1 	.word	0x080190b1
 80190a4:	080190b7 	.word	0x080190b7
 80190a8:	080190bd 	.word	0x080190bd
 80190ac:	080190c3 	.word	0x080190c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80190b0:	2300      	movs	r3, #0
 80190b2:	73fb      	strb	r3, [r7, #15]
    break;
 80190b4:	e00b      	b.n	80190ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80190b6:	2303      	movs	r3, #3
 80190b8:	73fb      	strb	r3, [r7, #15]
    break;
 80190ba:	e008      	b.n	80190ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80190bc:	2301      	movs	r3, #1
 80190be:	73fb      	strb	r3, [r7, #15]
    break;
 80190c0:	e005      	b.n	80190ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80190c2:	2303      	movs	r3, #3
 80190c4:	73fb      	strb	r3, [r7, #15]
    break;
 80190c6:	e002      	b.n	80190ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80190c8:	2303      	movs	r3, #3
 80190ca:	73fb      	strb	r3, [r7, #15]
    break;
 80190cc:	bf00      	nop
  }
  return usb_status;
 80190ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80190d0:	4618      	mov	r0, r3
 80190d2:	3714      	adds	r7, #20
 80190d4:	46bd      	mov	sp, r7
 80190d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190da:	4770      	bx	lr

080190dc <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80190dc:	b480      	push	{r7}
 80190de:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80190e0:	4b05      	ldr	r3, [pc, #20]	@ (80190f8 <UTIL_LPM_Init+0x1c>)
 80190e2:	2200      	movs	r2, #0
 80190e4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80190e6:	4b05      	ldr	r3, [pc, #20]	@ (80190fc <UTIL_LPM_Init+0x20>)
 80190e8:	2200      	movs	r2, #0
 80190ea:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80190ec:	bf00      	nop
 80190ee:	46bd      	mov	sp, r7
 80190f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190f4:	4770      	bx	lr
 80190f6:	bf00      	nop
 80190f8:	20001940 	.word	0x20001940
 80190fc:	20001944 	.word	0x20001944

08019100 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8019100:	b480      	push	{r7}
 8019102:	b087      	sub	sp, #28
 8019104:	af00      	add	r7, sp, #0
 8019106:	6078      	str	r0, [r7, #4]
 8019108:	460b      	mov	r3, r1
 801910a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801910c:	f3ef 8310 	mrs	r3, PRIMASK
 8019110:	613b      	str	r3, [r7, #16]
  return(result);
 8019112:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019114:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019116:	b672      	cpsid	i
}
 8019118:	bf00      	nop
  
  switch(state)
 801911a:	78fb      	ldrb	r3, [r7, #3]
 801911c:	2b00      	cmp	r3, #0
 801911e:	d008      	beq.n	8019132 <UTIL_LPM_SetOffMode+0x32>
 8019120:	2b01      	cmp	r3, #1
 8019122:	d10e      	bne.n	8019142 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8019124:	4b0d      	ldr	r3, [pc, #52]	@ (801915c <UTIL_LPM_SetOffMode+0x5c>)
 8019126:	681a      	ldr	r2, [r3, #0]
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	4313      	orrs	r3, r2
 801912c:	4a0b      	ldr	r2, [pc, #44]	@ (801915c <UTIL_LPM_SetOffMode+0x5c>)
 801912e:	6013      	str	r3, [r2, #0]
      break;
 8019130:	e008      	b.n	8019144 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	43da      	mvns	r2, r3
 8019136:	4b09      	ldr	r3, [pc, #36]	@ (801915c <UTIL_LPM_SetOffMode+0x5c>)
 8019138:	681b      	ldr	r3, [r3, #0]
 801913a:	4013      	ands	r3, r2
 801913c:	4a07      	ldr	r2, [pc, #28]	@ (801915c <UTIL_LPM_SetOffMode+0x5c>)
 801913e:	6013      	str	r3, [r2, #0]
      break;
 8019140:	e000      	b.n	8019144 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8019142:	bf00      	nop
 8019144:	697b      	ldr	r3, [r7, #20]
 8019146:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019148:	68fb      	ldr	r3, [r7, #12]
 801914a:	f383 8810 	msr	PRIMASK, r3
}
 801914e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019150:	bf00      	nop
 8019152:	371c      	adds	r7, #28
 8019154:	46bd      	mov	sp, r7
 8019156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801915a:	4770      	bx	lr
 801915c:	20001944 	.word	0x20001944

08019160 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8019160:	b580      	push	{r7, lr}
 8019162:	b090      	sub	sp, #64	@ 0x40
 8019164:	af00      	add	r7, sp, #0
 8019166:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8019168:	4b73      	ldr	r3, [pc, #460]	@ (8019338 <UTIL_SEQ_Run+0x1d8>)
 801916a:	681b      	ldr	r3, [r3, #0]
 801916c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801916e:	4b72      	ldr	r3, [pc, #456]	@ (8019338 <UTIL_SEQ_Run+0x1d8>)
 8019170:	681a      	ldr	r2, [r3, #0]
 8019172:	687b      	ldr	r3, [r7, #4]
 8019174:	4013      	ands	r3, r2
 8019176:	4a70      	ldr	r2, [pc, #448]	@ (8019338 <UTIL_SEQ_Run+0x1d8>)
 8019178:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801917a:	4b70      	ldr	r3, [pc, #448]	@ (801933c <UTIL_SEQ_Run+0x1dc>)
 801917c:	681b      	ldr	r3, [r3, #0]
 801917e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8019180:	4b6f      	ldr	r3, [pc, #444]	@ (8019340 <UTIL_SEQ_Run+0x1e0>)
 8019182:	681b      	ldr	r3, [r3, #0]
 8019184:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8019186:	4b6f      	ldr	r3, [pc, #444]	@ (8019344 <UTIL_SEQ_Run+0x1e4>)
 8019188:	681b      	ldr	r3, [r3, #0]
 801918a:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 801918c:	4b6e      	ldr	r3, [pc, #440]	@ (8019348 <UTIL_SEQ_Run+0x1e8>)
 801918e:	681b      	ldr	r3, [r3, #0]
 8019190:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8019192:	e08d      	b.n	80192b0 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8019194:	2300      	movs	r3, #0
 8019196:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8019198:	e002      	b.n	80191a0 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801919a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801919c:	3301      	adds	r3, #1
 801919e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80191a0:	4a6a      	ldr	r2, [pc, #424]	@ (801934c <UTIL_SEQ_Run+0x1ec>)
 80191a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80191a4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80191a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80191aa:	401a      	ands	r2, r3
 80191ac:	4b62      	ldr	r3, [pc, #392]	@ (8019338 <UTIL_SEQ_Run+0x1d8>)
 80191ae:	681b      	ldr	r3, [r3, #0]
 80191b0:	4013      	ands	r3, r2
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	d0f1      	beq.n	801919a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80191b6:	4a65      	ldr	r2, [pc, #404]	@ (801934c <UTIL_SEQ_Run+0x1ec>)
 80191b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80191ba:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80191be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80191c0:	401a      	ands	r2, r3
 80191c2:	4b5d      	ldr	r3, [pc, #372]	@ (8019338 <UTIL_SEQ_Run+0x1d8>)
 80191c4:	681b      	ldr	r3, [r3, #0]
 80191c6:	4013      	ands	r3, r2
 80191c8:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80191ca:	4a60      	ldr	r2, [pc, #384]	@ (801934c <UTIL_SEQ_Run+0x1ec>)
 80191cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80191ce:	00db      	lsls	r3, r3, #3
 80191d0:	4413      	add	r3, r2
 80191d2:	685a      	ldr	r2, [r3, #4]
 80191d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191d6:	4013      	ands	r3, r2
 80191d8:	2b00      	cmp	r3, #0
 80191da:	d106      	bne.n	80191ea <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80191dc:	4a5b      	ldr	r2, [pc, #364]	@ (801934c <UTIL_SEQ_Run+0x1ec>)
 80191de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80191e0:	00db      	lsls	r3, r3, #3
 80191e2:	4413      	add	r3, r2
 80191e4:	f04f 32ff 	mov.w	r2, #4294967295
 80191e8:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80191ea:	4a58      	ldr	r2, [pc, #352]	@ (801934c <UTIL_SEQ_Run+0x1ec>)
 80191ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80191ee:	00db      	lsls	r3, r3, #3
 80191f0:	4413      	add	r3, r2
 80191f2:	685a      	ldr	r2, [r3, #4]
 80191f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191f6:	4013      	ands	r3, r2
 80191f8:	4618      	mov	r0, r3
 80191fa:	f000 f9c1 	bl	8019580 <SEQ_BitPosition>
 80191fe:	4603      	mov	r3, r0
 8019200:	461a      	mov	r2, r3
 8019202:	4b53      	ldr	r3, [pc, #332]	@ (8019350 <UTIL_SEQ_Run+0x1f0>)
 8019204:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8019206:	4a51      	ldr	r2, [pc, #324]	@ (801934c <UTIL_SEQ_Run+0x1ec>)
 8019208:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801920a:	00db      	lsls	r3, r3, #3
 801920c:	4413      	add	r3, r2
 801920e:	685a      	ldr	r2, [r3, #4]
 8019210:	4b4f      	ldr	r3, [pc, #316]	@ (8019350 <UTIL_SEQ_Run+0x1f0>)
 8019212:	681b      	ldr	r3, [r3, #0]
 8019214:	2101      	movs	r1, #1
 8019216:	fa01 f303 	lsl.w	r3, r1, r3
 801921a:	43db      	mvns	r3, r3
 801921c:	401a      	ands	r2, r3
 801921e:	494b      	ldr	r1, [pc, #300]	@ (801934c <UTIL_SEQ_Run+0x1ec>)
 8019220:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019222:	00db      	lsls	r3, r3, #3
 8019224:	440b      	add	r3, r1
 8019226:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019228:	f3ef 8310 	mrs	r3, PRIMASK
 801922c:	61bb      	str	r3, [r7, #24]
  return(result);
 801922e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8019230:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8019232:	b672      	cpsid	i
}
 8019234:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8019236:	4b46      	ldr	r3, [pc, #280]	@ (8019350 <UTIL_SEQ_Run+0x1f0>)
 8019238:	681b      	ldr	r3, [r3, #0]
 801923a:	2201      	movs	r2, #1
 801923c:	fa02 f303 	lsl.w	r3, r2, r3
 8019240:	43da      	mvns	r2, r3
 8019242:	4b3e      	ldr	r3, [pc, #248]	@ (801933c <UTIL_SEQ_Run+0x1dc>)
 8019244:	681b      	ldr	r3, [r3, #0]
 8019246:	4013      	ands	r3, r2
 8019248:	4a3c      	ldr	r2, [pc, #240]	@ (801933c <UTIL_SEQ_Run+0x1dc>)
 801924a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801924c:	2301      	movs	r3, #1
 801924e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019250:	e013      	b.n	801927a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8019252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019254:	3b01      	subs	r3, #1
 8019256:	4a3d      	ldr	r2, [pc, #244]	@ (801934c <UTIL_SEQ_Run+0x1ec>)
 8019258:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801925c:	4b3c      	ldr	r3, [pc, #240]	@ (8019350 <UTIL_SEQ_Run+0x1f0>)
 801925e:	681b      	ldr	r3, [r3, #0]
 8019260:	2201      	movs	r2, #1
 8019262:	fa02 f303 	lsl.w	r3, r2, r3
 8019266:	43da      	mvns	r2, r3
 8019268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801926a:	3b01      	subs	r3, #1
 801926c:	400a      	ands	r2, r1
 801926e:	4937      	ldr	r1, [pc, #220]	@ (801934c <UTIL_SEQ_Run+0x1ec>)
 8019270:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8019274:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019276:	3b01      	subs	r3, #1
 8019278:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801927a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801927c:	2b00      	cmp	r3, #0
 801927e:	d1e8      	bne.n	8019252 <UTIL_SEQ_Run+0xf2>
 8019280:	6a3b      	ldr	r3, [r7, #32]
 8019282:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019284:	697b      	ldr	r3, [r7, #20]
 8019286:	f383 8810 	msr	PRIMASK, r3
}
 801928a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801928c:	4b30      	ldr	r3, [pc, #192]	@ (8019350 <UTIL_SEQ_Run+0x1f0>)
 801928e:	681b      	ldr	r3, [r3, #0]
 8019290:	4a30      	ldr	r2, [pc, #192]	@ (8019354 <UTIL_SEQ_Run+0x1f4>)
 8019292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019296:	4798      	blx	r3

    local_taskset = TaskSet;
 8019298:	4b28      	ldr	r3, [pc, #160]	@ (801933c <UTIL_SEQ_Run+0x1dc>)
 801929a:	681b      	ldr	r3, [r3, #0]
 801929c:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801929e:	4b28      	ldr	r3, [pc, #160]	@ (8019340 <UTIL_SEQ_Run+0x1e0>)
 80192a0:	681b      	ldr	r3, [r3, #0]
 80192a2:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 80192a4:	4b27      	ldr	r3, [pc, #156]	@ (8019344 <UTIL_SEQ_Run+0x1e4>)
 80192a6:	681b      	ldr	r3, [r3, #0]
 80192a8:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 80192aa:	4b27      	ldr	r3, [pc, #156]	@ (8019348 <UTIL_SEQ_Run+0x1e8>)
 80192ac:	681b      	ldr	r3, [r3, #0]
 80192ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80192b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80192b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80192b4:	401a      	ands	r2, r3
 80192b6:	4b20      	ldr	r3, [pc, #128]	@ (8019338 <UTIL_SEQ_Run+0x1d8>)
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	4013      	ands	r3, r2
 80192bc:	2b00      	cmp	r3, #0
 80192be:	d005      	beq.n	80192cc <UTIL_SEQ_Run+0x16c>
 80192c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80192c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80192c4:	4013      	ands	r3, r2
 80192c6:	2b00      	cmp	r3, #0
 80192c8:	f43f af64 	beq.w	8019194 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80192cc:	4b20      	ldr	r3, [pc, #128]	@ (8019350 <UTIL_SEQ_Run+0x1f0>)
 80192ce:	f04f 32ff 	mov.w	r2, #4294967295
 80192d2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80192d4:	f000 f946 	bl	8019564 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80192d8:	f3ef 8310 	mrs	r3, PRIMASK
 80192dc:	613b      	str	r3, [r7, #16]
  return(result);
 80192de:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 80192e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80192e2:	b672      	cpsid	i
}
 80192e4:	bf00      	nop
  local_taskset = TaskSet;
 80192e6:	4b15      	ldr	r3, [pc, #84]	@ (801933c <UTIL_SEQ_Run+0x1dc>)
 80192e8:	681b      	ldr	r3, [r3, #0]
 80192ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 80192ec:	4b14      	ldr	r3, [pc, #80]	@ (8019340 <UTIL_SEQ_Run+0x1e0>)
 80192ee:	681b      	ldr	r3, [r3, #0]
 80192f0:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 80192f2:	4b14      	ldr	r3, [pc, #80]	@ (8019344 <UTIL_SEQ_Run+0x1e4>)
 80192f4:	681b      	ldr	r3, [r3, #0]
 80192f6:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 80192f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80192fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80192fc:	401a      	ands	r2, r3
 80192fe:	4b0e      	ldr	r3, [pc, #56]	@ (8019338 <UTIL_SEQ_Run+0x1d8>)
 8019300:	681b      	ldr	r3, [r3, #0]
 8019302:	4013      	ands	r3, r2
 8019304:	2b00      	cmp	r3, #0
 8019306:	d107      	bne.n	8019318 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8019308:	4b0f      	ldr	r3, [pc, #60]	@ (8019348 <UTIL_SEQ_Run+0x1e8>)
 801930a:	681a      	ldr	r2, [r3, #0]
 801930c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801930e:	4013      	ands	r3, r2
 8019310:	2b00      	cmp	r3, #0
 8019312:	d101      	bne.n	8019318 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8019314:	f7ec f944 	bl	80055a0 <UTIL_SEQ_Idle>
 8019318:	69fb      	ldr	r3, [r7, #28]
 801931a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801931c:	68fb      	ldr	r3, [r7, #12]
 801931e:	f383 8810 	msr	PRIMASK, r3
}
 8019322:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8019324:	f000 f925 	bl	8019572 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8019328:	4a03      	ldr	r2, [pc, #12]	@ (8019338 <UTIL_SEQ_Run+0x1d8>)
 801932a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801932c:	6013      	str	r3, [r2, #0]

  return;
 801932e:	bf00      	nop
}
 8019330:	3740      	adds	r7, #64	@ 0x40
 8019332:	46bd      	mov	sp, r7
 8019334:	bd80      	pop	{r7, pc}
 8019336:	bf00      	nop
 8019338:	20000120 	.word	0x20000120
 801933c:	20001948 	.word	0x20001948
 8019340:	2000194c 	.word	0x2000194c
 8019344:	2000011c 	.word	0x2000011c
 8019348:	20001950 	.word	0x20001950
 801934c:	200019d8 	.word	0x200019d8
 8019350:	20001954 	.word	0x20001954
 8019354:	20001958 	.word	0x20001958

08019358 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8019358:	b580      	push	{r7, lr}
 801935a:	b088      	sub	sp, #32
 801935c:	af00      	add	r7, sp, #0
 801935e:	60f8      	str	r0, [r7, #12]
 8019360:	60b9      	str	r1, [r7, #8]
 8019362:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019364:	f3ef 8310 	mrs	r3, PRIMASK
 8019368:	617b      	str	r3, [r7, #20]
  return(result);
 801936a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801936c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801936e:	b672      	cpsid	i
}
 8019370:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8019372:	68f8      	ldr	r0, [r7, #12]
 8019374:	f000 f904 	bl	8019580 <SEQ_BitPosition>
 8019378:	4603      	mov	r3, r0
 801937a:	4619      	mov	r1, r3
 801937c:	4a06      	ldr	r2, [pc, #24]	@ (8019398 <UTIL_SEQ_RegTask+0x40>)
 801937e:	687b      	ldr	r3, [r7, #4]
 8019380:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8019384:	69fb      	ldr	r3, [r7, #28]
 8019386:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019388:	69bb      	ldr	r3, [r7, #24]
 801938a:	f383 8810 	msr	PRIMASK, r3
}
 801938e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8019390:	bf00      	nop
}
 8019392:	3720      	adds	r7, #32
 8019394:	46bd      	mov	sp, r7
 8019396:	bd80      	pop	{r7, pc}
 8019398:	20001958 	.word	0x20001958

0801939c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801939c:	b480      	push	{r7}
 801939e:	b087      	sub	sp, #28
 80193a0:	af00      	add	r7, sp, #0
 80193a2:	6078      	str	r0, [r7, #4]
 80193a4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80193a6:	f3ef 8310 	mrs	r3, PRIMASK
 80193aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80193ac:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80193ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80193b0:	b672      	cpsid	i
}
 80193b2:	bf00      	nop

  TaskSet |= TaskId_bm;
 80193b4:	4b0d      	ldr	r3, [pc, #52]	@ (80193ec <UTIL_SEQ_SetTask+0x50>)
 80193b6:	681a      	ldr	r2, [r3, #0]
 80193b8:	687b      	ldr	r3, [r7, #4]
 80193ba:	4313      	orrs	r3, r2
 80193bc:	4a0b      	ldr	r2, [pc, #44]	@ (80193ec <UTIL_SEQ_SetTask+0x50>)
 80193be:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80193c0:	4a0b      	ldr	r2, [pc, #44]	@ (80193f0 <UTIL_SEQ_SetTask+0x54>)
 80193c2:	683b      	ldr	r3, [r7, #0]
 80193c4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	431a      	orrs	r2, r3
 80193cc:	4908      	ldr	r1, [pc, #32]	@ (80193f0 <UTIL_SEQ_SetTask+0x54>)
 80193ce:	683b      	ldr	r3, [r7, #0]
 80193d0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80193d4:	697b      	ldr	r3, [r7, #20]
 80193d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80193d8:	693b      	ldr	r3, [r7, #16]
 80193da:	f383 8810 	msr	PRIMASK, r3
}
 80193de:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80193e0:	bf00      	nop
}
 80193e2:	371c      	adds	r7, #28
 80193e4:	46bd      	mov	sp, r7
 80193e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ea:	4770      	bx	lr
 80193ec:	20001948 	.word	0x20001948
 80193f0:	200019d8 	.word	0x200019d8

080193f4 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80193f4:	b480      	push	{r7}
 80193f6:	b087      	sub	sp, #28
 80193f8:	af00      	add	r7, sp, #0
 80193fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80193fc:	f3ef 8310 	mrs	r3, PRIMASK
 8019400:	60fb      	str	r3, [r7, #12]
  return(result);
 8019402:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8019404:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019406:	b672      	cpsid	i
}
 8019408:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	43da      	mvns	r2, r3
 801940e:	4b08      	ldr	r3, [pc, #32]	@ (8019430 <UTIL_SEQ_PauseTask+0x3c>)
 8019410:	681b      	ldr	r3, [r3, #0]
 8019412:	4013      	ands	r3, r2
 8019414:	4a06      	ldr	r2, [pc, #24]	@ (8019430 <UTIL_SEQ_PauseTask+0x3c>)
 8019416:	6013      	str	r3, [r2, #0]
 8019418:	697b      	ldr	r3, [r7, #20]
 801941a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801941c:	693b      	ldr	r3, [r7, #16]
 801941e:	f383 8810 	msr	PRIMASK, r3
}
 8019422:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8019424:	bf00      	nop
}
 8019426:	371c      	adds	r7, #28
 8019428:	46bd      	mov	sp, r7
 801942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801942e:	4770      	bx	lr
 8019430:	2000011c 	.word	0x2000011c

08019434 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8019434:	b480      	push	{r7}
 8019436:	b087      	sub	sp, #28
 8019438:	af00      	add	r7, sp, #0
 801943a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801943c:	f3ef 8310 	mrs	r3, PRIMASK
 8019440:	60fb      	str	r3, [r7, #12]
  return(result);
 8019442:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8019444:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019446:	b672      	cpsid	i
}
 8019448:	bf00      	nop

  TaskMask |= TaskId_bm;
 801944a:	4b09      	ldr	r3, [pc, #36]	@ (8019470 <UTIL_SEQ_ResumeTask+0x3c>)
 801944c:	681a      	ldr	r2, [r3, #0]
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	4313      	orrs	r3, r2
 8019452:	4a07      	ldr	r2, [pc, #28]	@ (8019470 <UTIL_SEQ_ResumeTask+0x3c>)
 8019454:	6013      	str	r3, [r2, #0]
 8019456:	697b      	ldr	r3, [r7, #20]
 8019458:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801945a:	693b      	ldr	r3, [r7, #16]
 801945c:	f383 8810 	msr	PRIMASK, r3
}
 8019460:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8019462:	bf00      	nop
}
 8019464:	371c      	adds	r7, #28
 8019466:	46bd      	mov	sp, r7
 8019468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801946c:	4770      	bx	lr
 801946e:	bf00      	nop
 8019470:	2000011c 	.word	0x2000011c

08019474 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8019474:	b480      	push	{r7}
 8019476:	b087      	sub	sp, #28
 8019478:	af00      	add	r7, sp, #0
 801947a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801947c:	f3ef 8310 	mrs	r3, PRIMASK
 8019480:	60fb      	str	r3, [r7, #12]
  return(result);
 8019482:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8019484:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019486:	b672      	cpsid	i
}
 8019488:	bf00      	nop

  EvtSet |= EvtId_bm;
 801948a:	4b09      	ldr	r3, [pc, #36]	@ (80194b0 <UTIL_SEQ_SetEvt+0x3c>)
 801948c:	681a      	ldr	r2, [r3, #0]
 801948e:	687b      	ldr	r3, [r7, #4]
 8019490:	4313      	orrs	r3, r2
 8019492:	4a07      	ldr	r2, [pc, #28]	@ (80194b0 <UTIL_SEQ_SetEvt+0x3c>)
 8019494:	6013      	str	r3, [r2, #0]
 8019496:	697b      	ldr	r3, [r7, #20]
 8019498:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801949a:	693b      	ldr	r3, [r7, #16]
 801949c:	f383 8810 	msr	PRIMASK, r3
}
 80194a0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80194a2:	bf00      	nop
}
 80194a4:	371c      	adds	r7, #28
 80194a6:	46bd      	mov	sp, r7
 80194a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ac:	4770      	bx	lr
 80194ae:	bf00      	nop
 80194b0:	2000194c 	.word	0x2000194c

080194b4 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80194b4:	b580      	push	{r7, lr}
 80194b6:	b088      	sub	sp, #32
 80194b8:	af00      	add	r7, sp, #0
 80194ba:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80194bc:	4b1f      	ldr	r3, [pc, #124]	@ (801953c <UTIL_SEQ_WaitEvt+0x88>)
 80194be:	681b      	ldr	r3, [r3, #0]
 80194c0:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80194c2:	4b1e      	ldr	r3, [pc, #120]	@ (801953c <UTIL_SEQ_WaitEvt+0x88>)
 80194c4:	681b      	ldr	r3, [r3, #0]
 80194c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80194ca:	d102      	bne.n	80194d2 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 80194cc:	2300      	movs	r3, #0
 80194ce:	61fb      	str	r3, [r7, #28]
 80194d0:	e005      	b.n	80194de <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 80194d2:	4b1a      	ldr	r3, [pc, #104]	@ (801953c <UTIL_SEQ_WaitEvt+0x88>)
 80194d4:	681b      	ldr	r3, [r3, #0]
 80194d6:	2201      	movs	r2, #1
 80194d8:	fa02 f303 	lsl.w	r3, r2, r3
 80194dc:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80194de:	4b18      	ldr	r3, [pc, #96]	@ (8019540 <UTIL_SEQ_WaitEvt+0x8c>)
 80194e0:	681b      	ldr	r3, [r3, #0]
 80194e2:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80194e4:	4a16      	ldr	r2, [pc, #88]	@ (8019540 <UTIL_SEQ_WaitEvt+0x8c>)
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 80194ea:	e003      	b.n	80194f4 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 80194ec:	6879      	ldr	r1, [r7, #4]
 80194ee:	69f8      	ldr	r0, [r7, #28]
 80194f0:	f000 f82a 	bl	8019548 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 80194f4:	4b13      	ldr	r3, [pc, #76]	@ (8019544 <UTIL_SEQ_WaitEvt+0x90>)
 80194f6:	681a      	ldr	r2, [r3, #0]
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	4013      	ands	r3, r2
 80194fc:	2b00      	cmp	r3, #0
 80194fe:	d0f5      	beq.n	80194ec <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8019500:	4a0e      	ldr	r2, [pc, #56]	@ (801953c <UTIL_SEQ_WaitEvt+0x88>)
 8019502:	69bb      	ldr	r3, [r7, #24]
 8019504:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019506:	f3ef 8310 	mrs	r3, PRIMASK
 801950a:	60bb      	str	r3, [r7, #8]
  return(result);
 801950c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801950e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8019510:	b672      	cpsid	i
}
 8019512:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	43da      	mvns	r2, r3
 8019518:	4b0a      	ldr	r3, [pc, #40]	@ (8019544 <UTIL_SEQ_WaitEvt+0x90>)
 801951a:	681b      	ldr	r3, [r3, #0]
 801951c:	4013      	ands	r3, r2
 801951e:	4a09      	ldr	r2, [pc, #36]	@ (8019544 <UTIL_SEQ_WaitEvt+0x90>)
 8019520:	6013      	str	r3, [r2, #0]
 8019522:	693b      	ldr	r3, [r7, #16]
 8019524:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019526:	68fb      	ldr	r3, [r7, #12]
 8019528:	f383 8810 	msr	PRIMASK, r3
}
 801952c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 801952e:	4a04      	ldr	r2, [pc, #16]	@ (8019540 <UTIL_SEQ_WaitEvt+0x8c>)
 8019530:	697b      	ldr	r3, [r7, #20]
 8019532:	6013      	str	r3, [r2, #0]
  return;
 8019534:	bf00      	nop
}
 8019536:	3720      	adds	r7, #32
 8019538:	46bd      	mov	sp, r7
 801953a:	bd80      	pop	{r7, pc}
 801953c:	20001954 	.word	0x20001954
 8019540:	20001950 	.word	0x20001950
 8019544:	2000194c 	.word	0x2000194c

08019548 <UTIL_SEQ_EvtIdle>:
  UTIL_SEQ_bm_t local_evtwaited = EvtWaited;
  return (EvtSet & local_evtwaited);
}

__WEAK void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t TaskId_bm, UTIL_SEQ_bm_t EvtWaited_bm )
{
 8019548:	b580      	push	{r7, lr}
 801954a:	b082      	sub	sp, #8
 801954c:	af00      	add	r7, sp, #0
 801954e:	6078      	str	r0, [r7, #4]
 8019550:	6039      	str	r1, [r7, #0]
  (void)EvtWaited_bm;
  UTIL_SEQ_Run(~TaskId_bm);
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	43db      	mvns	r3, r3
 8019556:	4618      	mov	r0, r3
 8019558:	f7ff fe02 	bl	8019160 <UTIL_SEQ_Run>
  return;
 801955c:	bf00      	nop
}
 801955e:	3708      	adds	r7, #8
 8019560:	46bd      	mov	sp, r7
 8019562:	bd80      	pop	{r7, pc}

08019564 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8019564:	b480      	push	{r7}
 8019566:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8019568:	bf00      	nop
}
 801956a:	46bd      	mov	sp, r7
 801956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019570:	4770      	bx	lr

08019572 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8019572:	b480      	push	{r7}
 8019574:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8019576:	bf00      	nop
}
 8019578:	46bd      	mov	sp, r7
 801957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801957e:	4770      	bx	lr

08019580 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8019580:	b480      	push	{r7}
 8019582:	b085      	sub	sp, #20
 8019584:	af00      	add	r7, sp, #0
 8019586:	6078      	str	r0, [r7, #4]
 8019588:	687b      	ldr	r3, [r7, #4]
 801958a:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 801958c:	68fb      	ldr	r3, [r7, #12]
 801958e:	2b00      	cmp	r3, #0
 8019590:	d101      	bne.n	8019596 <SEQ_BitPosition+0x16>
    return 32U;
 8019592:	2320      	movs	r3, #32
 8019594:	e003      	b.n	801959e <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 8019596:	68fb      	ldr	r3, [r7, #12]
 8019598:	fab3 f383 	clz	r3, r3
 801959c:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 801959e:	f1c3 031f 	rsb	r3, r3, #31
 80195a2:	b2db      	uxtb	r3, r3
}
 80195a4:	4618      	mov	r0, r3
 80195a6:	3714      	adds	r7, #20
 80195a8:	46bd      	mov	sp, r7
 80195aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195ae:	4770      	bx	lr

080195b0 <cosf>:
 80195b0:	ee10 3a10 	vmov	r3, s0
 80195b4:	b507      	push	{r0, r1, r2, lr}
 80195b6:	4a1e      	ldr	r2, [pc, #120]	@ (8019630 <cosf+0x80>)
 80195b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80195bc:	4293      	cmp	r3, r2
 80195be:	d806      	bhi.n	80195ce <cosf+0x1e>
 80195c0:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8019634 <cosf+0x84>
 80195c4:	b003      	add	sp, #12
 80195c6:	f85d eb04 	ldr.w	lr, [sp], #4
 80195ca:	f000 b87b 	b.w	80196c4 <__kernel_cosf>
 80195ce:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80195d2:	d304      	bcc.n	80195de <cosf+0x2e>
 80195d4:	ee30 0a40 	vsub.f32	s0, s0, s0
 80195d8:	b003      	add	sp, #12
 80195da:	f85d fb04 	ldr.w	pc, [sp], #4
 80195de:	4668      	mov	r0, sp
 80195e0:	f000 f910 	bl	8019804 <__ieee754_rem_pio2f>
 80195e4:	f000 0003 	and.w	r0, r0, #3
 80195e8:	2801      	cmp	r0, #1
 80195ea:	d009      	beq.n	8019600 <cosf+0x50>
 80195ec:	2802      	cmp	r0, #2
 80195ee:	d010      	beq.n	8019612 <cosf+0x62>
 80195f0:	b9b0      	cbnz	r0, 8019620 <cosf+0x70>
 80195f2:	eddd 0a01 	vldr	s1, [sp, #4]
 80195f6:	ed9d 0a00 	vldr	s0, [sp]
 80195fa:	f000 f863 	bl	80196c4 <__kernel_cosf>
 80195fe:	e7eb      	b.n	80195d8 <cosf+0x28>
 8019600:	eddd 0a01 	vldr	s1, [sp, #4]
 8019604:	ed9d 0a00 	vldr	s0, [sp]
 8019608:	f000 f8b4 	bl	8019774 <__kernel_sinf>
 801960c:	eeb1 0a40 	vneg.f32	s0, s0
 8019610:	e7e2      	b.n	80195d8 <cosf+0x28>
 8019612:	eddd 0a01 	vldr	s1, [sp, #4]
 8019616:	ed9d 0a00 	vldr	s0, [sp]
 801961a:	f000 f853 	bl	80196c4 <__kernel_cosf>
 801961e:	e7f5      	b.n	801960c <cosf+0x5c>
 8019620:	eddd 0a01 	vldr	s1, [sp, #4]
 8019624:	ed9d 0a00 	vldr	s0, [sp]
 8019628:	2001      	movs	r0, #1
 801962a:	f000 f8a3 	bl	8019774 <__kernel_sinf>
 801962e:	e7d3      	b.n	80195d8 <cosf+0x28>
 8019630:	3f490fd8 	.word	0x3f490fd8
 8019634:	00000000 	.word	0x00000000

08019638 <sinf>:
 8019638:	ee10 3a10 	vmov	r3, s0
 801963c:	b507      	push	{r0, r1, r2, lr}
 801963e:	4a1f      	ldr	r2, [pc, #124]	@ (80196bc <sinf+0x84>)
 8019640:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019644:	4293      	cmp	r3, r2
 8019646:	d807      	bhi.n	8019658 <sinf+0x20>
 8019648:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80196c0 <sinf+0x88>
 801964c:	2000      	movs	r0, #0
 801964e:	b003      	add	sp, #12
 8019650:	f85d eb04 	ldr.w	lr, [sp], #4
 8019654:	f000 b88e 	b.w	8019774 <__kernel_sinf>
 8019658:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801965c:	d304      	bcc.n	8019668 <sinf+0x30>
 801965e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8019662:	b003      	add	sp, #12
 8019664:	f85d fb04 	ldr.w	pc, [sp], #4
 8019668:	4668      	mov	r0, sp
 801966a:	f000 f8cb 	bl	8019804 <__ieee754_rem_pio2f>
 801966e:	f000 0003 	and.w	r0, r0, #3
 8019672:	2801      	cmp	r0, #1
 8019674:	d00a      	beq.n	801968c <sinf+0x54>
 8019676:	2802      	cmp	r0, #2
 8019678:	d00f      	beq.n	801969a <sinf+0x62>
 801967a:	b9c0      	cbnz	r0, 80196ae <sinf+0x76>
 801967c:	eddd 0a01 	vldr	s1, [sp, #4]
 8019680:	ed9d 0a00 	vldr	s0, [sp]
 8019684:	2001      	movs	r0, #1
 8019686:	f000 f875 	bl	8019774 <__kernel_sinf>
 801968a:	e7ea      	b.n	8019662 <sinf+0x2a>
 801968c:	eddd 0a01 	vldr	s1, [sp, #4]
 8019690:	ed9d 0a00 	vldr	s0, [sp]
 8019694:	f000 f816 	bl	80196c4 <__kernel_cosf>
 8019698:	e7e3      	b.n	8019662 <sinf+0x2a>
 801969a:	eddd 0a01 	vldr	s1, [sp, #4]
 801969e:	ed9d 0a00 	vldr	s0, [sp]
 80196a2:	2001      	movs	r0, #1
 80196a4:	f000 f866 	bl	8019774 <__kernel_sinf>
 80196a8:	eeb1 0a40 	vneg.f32	s0, s0
 80196ac:	e7d9      	b.n	8019662 <sinf+0x2a>
 80196ae:	eddd 0a01 	vldr	s1, [sp, #4]
 80196b2:	ed9d 0a00 	vldr	s0, [sp]
 80196b6:	f000 f805 	bl	80196c4 <__kernel_cosf>
 80196ba:	e7f5      	b.n	80196a8 <sinf+0x70>
 80196bc:	3f490fd8 	.word	0x3f490fd8
 80196c0:	00000000 	.word	0x00000000

080196c4 <__kernel_cosf>:
 80196c4:	ee10 3a10 	vmov	r3, s0
 80196c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80196cc:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80196d0:	eef0 6a40 	vmov.f32	s13, s0
 80196d4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80196d8:	d204      	bcs.n	80196e4 <__kernel_cosf+0x20>
 80196da:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80196de:	ee17 2a90 	vmov	r2, s15
 80196e2:	b342      	cbz	r2, 8019736 <__kernel_cosf+0x72>
 80196e4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80196e8:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8019754 <__kernel_cosf+0x90>
 80196ec:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8019758 <__kernel_cosf+0x94>
 80196f0:	4a1a      	ldr	r2, [pc, #104]	@ (801975c <__kernel_cosf+0x98>)
 80196f2:	eea7 6a27 	vfma.f32	s12, s14, s15
 80196f6:	4293      	cmp	r3, r2
 80196f8:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8019760 <__kernel_cosf+0x9c>
 80196fc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019700:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8019764 <__kernel_cosf+0xa0>
 8019704:	eea7 6a87 	vfma.f32	s12, s15, s14
 8019708:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8019768 <__kernel_cosf+0xa4>
 801970c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019710:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 801976c <__kernel_cosf+0xa8>
 8019714:	eea7 6a87 	vfma.f32	s12, s15, s14
 8019718:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 801971c:	ee26 6a07 	vmul.f32	s12, s12, s14
 8019720:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8019724:	eee7 0a06 	vfma.f32	s1, s14, s12
 8019728:	ee67 7a27 	vmul.f32	s15, s14, s15
 801972c:	d804      	bhi.n	8019738 <__kernel_cosf+0x74>
 801972e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8019732:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019736:	4770      	bx	lr
 8019738:	4a0d      	ldr	r2, [pc, #52]	@ (8019770 <__kernel_cosf+0xac>)
 801973a:	4293      	cmp	r3, r2
 801973c:	bf9a      	itte	ls
 801973e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8019742:	ee07 3a10 	vmovls	s14, r3
 8019746:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 801974a:	ee30 0a47 	vsub.f32	s0, s0, s14
 801974e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019752:	e7ec      	b.n	801972e <__kernel_cosf+0x6a>
 8019754:	ad47d74e 	.word	0xad47d74e
 8019758:	310f74f6 	.word	0x310f74f6
 801975c:	3e999999 	.word	0x3e999999
 8019760:	b493f27c 	.word	0xb493f27c
 8019764:	37d00d01 	.word	0x37d00d01
 8019768:	bab60b61 	.word	0xbab60b61
 801976c:	3d2aaaab 	.word	0x3d2aaaab
 8019770:	3f480000 	.word	0x3f480000

08019774 <__kernel_sinf>:
 8019774:	ee10 3a10 	vmov	r3, s0
 8019778:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801977c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8019780:	d204      	bcs.n	801978c <__kernel_sinf+0x18>
 8019782:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8019786:	ee17 3a90 	vmov	r3, s15
 801978a:	b35b      	cbz	r3, 80197e4 <__kernel_sinf+0x70>
 801978c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8019790:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80197e8 <__kernel_sinf+0x74>
 8019794:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80197ec <__kernel_sinf+0x78>
 8019798:	eea7 6a27 	vfma.f32	s12, s14, s15
 801979c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80197f0 <__kernel_sinf+0x7c>
 80197a0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80197a4:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80197f4 <__kernel_sinf+0x80>
 80197a8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80197ac:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80197f8 <__kernel_sinf+0x84>
 80197b0:	ee60 6a07 	vmul.f32	s13, s0, s14
 80197b4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80197b8:	b930      	cbnz	r0, 80197c8 <__kernel_sinf+0x54>
 80197ba:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80197fc <__kernel_sinf+0x88>
 80197be:	eea7 6a27 	vfma.f32	s12, s14, s15
 80197c2:	eea6 0a26 	vfma.f32	s0, s12, s13
 80197c6:	4770      	bx	lr
 80197c8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80197cc:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80197d0:	eee0 7a86 	vfma.f32	s15, s1, s12
 80197d4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80197d8:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8019800 <__kernel_sinf+0x8c>
 80197dc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80197e0:	ee30 0a60 	vsub.f32	s0, s0, s1
 80197e4:	4770      	bx	lr
 80197e6:	bf00      	nop
 80197e8:	2f2ec9d3 	.word	0x2f2ec9d3
 80197ec:	b2d72f34 	.word	0xb2d72f34
 80197f0:	3638ef1b 	.word	0x3638ef1b
 80197f4:	b9500d01 	.word	0xb9500d01
 80197f8:	3c088889 	.word	0x3c088889
 80197fc:	be2aaaab 	.word	0xbe2aaaab
 8019800:	3e2aaaab 	.word	0x3e2aaaab

08019804 <__ieee754_rem_pio2f>:
 8019804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019806:	ee10 6a10 	vmov	r6, s0
 801980a:	4b88      	ldr	r3, [pc, #544]	@ (8019a2c <__ieee754_rem_pio2f+0x228>)
 801980c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8019810:	429d      	cmp	r5, r3
 8019812:	b087      	sub	sp, #28
 8019814:	4604      	mov	r4, r0
 8019816:	d805      	bhi.n	8019824 <__ieee754_rem_pio2f+0x20>
 8019818:	2300      	movs	r3, #0
 801981a:	ed80 0a00 	vstr	s0, [r0]
 801981e:	6043      	str	r3, [r0, #4]
 8019820:	2000      	movs	r0, #0
 8019822:	e022      	b.n	801986a <__ieee754_rem_pio2f+0x66>
 8019824:	4b82      	ldr	r3, [pc, #520]	@ (8019a30 <__ieee754_rem_pio2f+0x22c>)
 8019826:	429d      	cmp	r5, r3
 8019828:	d83a      	bhi.n	80198a0 <__ieee754_rem_pio2f+0x9c>
 801982a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801982e:	2e00      	cmp	r6, #0
 8019830:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8019a34 <__ieee754_rem_pio2f+0x230>
 8019834:	4a80      	ldr	r2, [pc, #512]	@ (8019a38 <__ieee754_rem_pio2f+0x234>)
 8019836:	f023 030f 	bic.w	r3, r3, #15
 801983a:	dd18      	ble.n	801986e <__ieee754_rem_pio2f+0x6a>
 801983c:	4293      	cmp	r3, r2
 801983e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8019842:	bf09      	itett	eq
 8019844:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8019a3c <__ieee754_rem_pio2f+0x238>
 8019848:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8019a40 <__ieee754_rem_pio2f+0x23c>
 801984c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8019a44 <__ieee754_rem_pio2f+0x240>
 8019850:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8019854:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8019858:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801985c:	ed80 7a00 	vstr	s14, [r0]
 8019860:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019864:	edc0 7a01 	vstr	s15, [r0, #4]
 8019868:	2001      	movs	r0, #1
 801986a:	b007      	add	sp, #28
 801986c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801986e:	4293      	cmp	r3, r2
 8019870:	ee70 7a07 	vadd.f32	s15, s0, s14
 8019874:	bf09      	itett	eq
 8019876:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8019a3c <__ieee754_rem_pio2f+0x238>
 801987a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8019a40 <__ieee754_rem_pio2f+0x23c>
 801987e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8019a44 <__ieee754_rem_pio2f+0x240>
 8019882:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8019886:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801988a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801988e:	ed80 7a00 	vstr	s14, [r0]
 8019892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019896:	edc0 7a01 	vstr	s15, [r0, #4]
 801989a:	f04f 30ff 	mov.w	r0, #4294967295
 801989e:	e7e4      	b.n	801986a <__ieee754_rem_pio2f+0x66>
 80198a0:	4b69      	ldr	r3, [pc, #420]	@ (8019a48 <__ieee754_rem_pio2f+0x244>)
 80198a2:	429d      	cmp	r5, r3
 80198a4:	d873      	bhi.n	801998e <__ieee754_rem_pio2f+0x18a>
 80198a6:	f000 f8dd 	bl	8019a64 <fabsf>
 80198aa:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8019a4c <__ieee754_rem_pio2f+0x248>
 80198ae:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80198b2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80198b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80198ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80198be:	ee17 0a90 	vmov	r0, s15
 80198c2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8019a34 <__ieee754_rem_pio2f+0x230>
 80198c6:	eea7 0a67 	vfms.f32	s0, s14, s15
 80198ca:	281f      	cmp	r0, #31
 80198cc:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8019a40 <__ieee754_rem_pio2f+0x23c>
 80198d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80198d4:	eeb1 6a47 	vneg.f32	s12, s14
 80198d8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80198dc:	ee16 1a90 	vmov	r1, s13
 80198e0:	dc09      	bgt.n	80198f6 <__ieee754_rem_pio2f+0xf2>
 80198e2:	4a5b      	ldr	r2, [pc, #364]	@ (8019a50 <__ieee754_rem_pio2f+0x24c>)
 80198e4:	1e47      	subs	r7, r0, #1
 80198e6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80198ea:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80198ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80198f2:	4293      	cmp	r3, r2
 80198f4:	d107      	bne.n	8019906 <__ieee754_rem_pio2f+0x102>
 80198f6:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80198fa:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80198fe:	2a08      	cmp	r2, #8
 8019900:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8019904:	dc14      	bgt.n	8019930 <__ieee754_rem_pio2f+0x12c>
 8019906:	6021      	str	r1, [r4, #0]
 8019908:	ed94 7a00 	vldr	s14, [r4]
 801990c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019910:	2e00      	cmp	r6, #0
 8019912:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019916:	ed84 0a01 	vstr	s0, [r4, #4]
 801991a:	daa6      	bge.n	801986a <__ieee754_rem_pio2f+0x66>
 801991c:	eeb1 7a47 	vneg.f32	s14, s14
 8019920:	eeb1 0a40 	vneg.f32	s0, s0
 8019924:	ed84 7a00 	vstr	s14, [r4]
 8019928:	ed84 0a01 	vstr	s0, [r4, #4]
 801992c:	4240      	negs	r0, r0
 801992e:	e79c      	b.n	801986a <__ieee754_rem_pio2f+0x66>
 8019930:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8019a3c <__ieee754_rem_pio2f+0x238>
 8019934:	eef0 6a40 	vmov.f32	s13, s0
 8019938:	eee6 6a25 	vfma.f32	s13, s12, s11
 801993c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8019940:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019944:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8019a44 <__ieee754_rem_pio2f+0x240>
 8019948:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801994c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8019950:	ee15 2a90 	vmov	r2, s11
 8019954:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8019958:	1a5b      	subs	r3, r3, r1
 801995a:	2b19      	cmp	r3, #25
 801995c:	dc04      	bgt.n	8019968 <__ieee754_rem_pio2f+0x164>
 801995e:	edc4 5a00 	vstr	s11, [r4]
 8019962:	eeb0 0a66 	vmov.f32	s0, s13
 8019966:	e7cf      	b.n	8019908 <__ieee754_rem_pio2f+0x104>
 8019968:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8019a54 <__ieee754_rem_pio2f+0x250>
 801996c:	eeb0 0a66 	vmov.f32	s0, s13
 8019970:	eea6 0a25 	vfma.f32	s0, s12, s11
 8019974:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8019978:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8019a58 <__ieee754_rem_pio2f+0x254>
 801997c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019980:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8019984:	ee30 7a67 	vsub.f32	s14, s0, s15
 8019988:	ed84 7a00 	vstr	s14, [r4]
 801998c:	e7bc      	b.n	8019908 <__ieee754_rem_pio2f+0x104>
 801998e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8019992:	d306      	bcc.n	80199a2 <__ieee754_rem_pio2f+0x19e>
 8019994:	ee70 7a40 	vsub.f32	s15, s0, s0
 8019998:	edc0 7a01 	vstr	s15, [r0, #4]
 801999c:	edc0 7a00 	vstr	s15, [r0]
 80199a0:	e73e      	b.n	8019820 <__ieee754_rem_pio2f+0x1c>
 80199a2:	15ea      	asrs	r2, r5, #23
 80199a4:	3a86      	subs	r2, #134	@ 0x86
 80199a6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80199aa:	ee07 3a90 	vmov	s15, r3
 80199ae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80199b2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8019a5c <__ieee754_rem_pio2f+0x258>
 80199b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80199ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80199be:	ed8d 7a03 	vstr	s14, [sp, #12]
 80199c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80199c6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80199ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80199ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80199d2:	ed8d 7a04 	vstr	s14, [sp, #16]
 80199d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80199da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80199de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199e2:	edcd 7a05 	vstr	s15, [sp, #20]
 80199e6:	d11e      	bne.n	8019a26 <__ieee754_rem_pio2f+0x222>
 80199e8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80199ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199f0:	bf0c      	ite	eq
 80199f2:	2301      	moveq	r3, #1
 80199f4:	2302      	movne	r3, #2
 80199f6:	491a      	ldr	r1, [pc, #104]	@ (8019a60 <__ieee754_rem_pio2f+0x25c>)
 80199f8:	9101      	str	r1, [sp, #4]
 80199fa:	2102      	movs	r1, #2
 80199fc:	9100      	str	r1, [sp, #0]
 80199fe:	a803      	add	r0, sp, #12
 8019a00:	4621      	mov	r1, r4
 8019a02:	f000 f837 	bl	8019a74 <__kernel_rem_pio2f>
 8019a06:	2e00      	cmp	r6, #0
 8019a08:	f6bf af2f 	bge.w	801986a <__ieee754_rem_pio2f+0x66>
 8019a0c:	edd4 7a00 	vldr	s15, [r4]
 8019a10:	eef1 7a67 	vneg.f32	s15, s15
 8019a14:	edc4 7a00 	vstr	s15, [r4]
 8019a18:	edd4 7a01 	vldr	s15, [r4, #4]
 8019a1c:	eef1 7a67 	vneg.f32	s15, s15
 8019a20:	edc4 7a01 	vstr	s15, [r4, #4]
 8019a24:	e782      	b.n	801992c <__ieee754_rem_pio2f+0x128>
 8019a26:	2303      	movs	r3, #3
 8019a28:	e7e5      	b.n	80199f6 <__ieee754_rem_pio2f+0x1f2>
 8019a2a:	bf00      	nop
 8019a2c:	3f490fd8 	.word	0x3f490fd8
 8019a30:	4016cbe3 	.word	0x4016cbe3
 8019a34:	3fc90f80 	.word	0x3fc90f80
 8019a38:	3fc90fd0 	.word	0x3fc90fd0
 8019a3c:	37354400 	.word	0x37354400
 8019a40:	37354443 	.word	0x37354443
 8019a44:	2e85a308 	.word	0x2e85a308
 8019a48:	43490f80 	.word	0x43490f80
 8019a4c:	3f22f984 	.word	0x3f22f984
 8019a50:	0801e0a8 	.word	0x0801e0a8
 8019a54:	2e85a300 	.word	0x2e85a300
 8019a58:	248d3132 	.word	0x248d3132
 8019a5c:	43800000 	.word	0x43800000
 8019a60:	0801e128 	.word	0x0801e128

08019a64 <fabsf>:
 8019a64:	ee10 3a10 	vmov	r3, s0
 8019a68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019a6c:	ee00 3a10 	vmov	s0, r3
 8019a70:	4770      	bx	lr
	...

08019a74 <__kernel_rem_pio2f>:
 8019a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a78:	ed2d 8b04 	vpush	{d8-d9}
 8019a7c:	b0d9      	sub	sp, #356	@ 0x164
 8019a7e:	4690      	mov	r8, r2
 8019a80:	9001      	str	r0, [sp, #4]
 8019a82:	4ab6      	ldr	r2, [pc, #728]	@ (8019d5c <__kernel_rem_pio2f+0x2e8>)
 8019a84:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8019a86:	f118 0f04 	cmn.w	r8, #4
 8019a8a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8019a8e:	460f      	mov	r7, r1
 8019a90:	f103 3bff 	add.w	fp, r3, #4294967295
 8019a94:	db26      	blt.n	8019ae4 <__kernel_rem_pio2f+0x70>
 8019a96:	f1b8 0203 	subs.w	r2, r8, #3
 8019a9a:	bf48      	it	mi
 8019a9c:	f108 0204 	addmi.w	r2, r8, #4
 8019aa0:	10d2      	asrs	r2, r2, #3
 8019aa2:	1c55      	adds	r5, r2, #1
 8019aa4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8019aa6:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8019d6c <__kernel_rem_pio2f+0x2f8>
 8019aaa:	00e8      	lsls	r0, r5, #3
 8019aac:	eba2 060b 	sub.w	r6, r2, fp
 8019ab0:	9002      	str	r0, [sp, #8]
 8019ab2:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8019ab6:	eb0a 0c0b 	add.w	ip, sl, fp
 8019aba:	ac1c      	add	r4, sp, #112	@ 0x70
 8019abc:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8019ac0:	2000      	movs	r0, #0
 8019ac2:	4560      	cmp	r0, ip
 8019ac4:	dd10      	ble.n	8019ae8 <__kernel_rem_pio2f+0x74>
 8019ac6:	a91c      	add	r1, sp, #112	@ 0x70
 8019ac8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8019acc:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8019ad0:	2600      	movs	r6, #0
 8019ad2:	4556      	cmp	r6, sl
 8019ad4:	dc24      	bgt.n	8019b20 <__kernel_rem_pio2f+0xac>
 8019ad6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8019ada:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8019d6c <__kernel_rem_pio2f+0x2f8>
 8019ade:	4684      	mov	ip, r0
 8019ae0:	2400      	movs	r4, #0
 8019ae2:	e016      	b.n	8019b12 <__kernel_rem_pio2f+0x9e>
 8019ae4:	2200      	movs	r2, #0
 8019ae6:	e7dc      	b.n	8019aa2 <__kernel_rem_pio2f+0x2e>
 8019ae8:	42c6      	cmn	r6, r0
 8019aea:	bf5d      	ittte	pl
 8019aec:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8019af0:	ee07 1a90 	vmovpl	s15, r1
 8019af4:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8019af8:	eef0 7a47 	vmovmi.f32	s15, s14
 8019afc:	ece4 7a01 	vstmia	r4!, {s15}
 8019b00:	3001      	adds	r0, #1
 8019b02:	e7de      	b.n	8019ac2 <__kernel_rem_pio2f+0x4e>
 8019b04:	ecfe 6a01 	vldmia	lr!, {s13}
 8019b08:	ed3c 7a01 	vldmdb	ip!, {s14}
 8019b0c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019b10:	3401      	adds	r4, #1
 8019b12:	455c      	cmp	r4, fp
 8019b14:	ddf6      	ble.n	8019b04 <__kernel_rem_pio2f+0x90>
 8019b16:	ece9 7a01 	vstmia	r9!, {s15}
 8019b1a:	3601      	adds	r6, #1
 8019b1c:	3004      	adds	r0, #4
 8019b1e:	e7d8      	b.n	8019ad2 <__kernel_rem_pio2f+0x5e>
 8019b20:	a908      	add	r1, sp, #32
 8019b22:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019b26:	9104      	str	r1, [sp, #16]
 8019b28:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8019b2a:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8019d68 <__kernel_rem_pio2f+0x2f4>
 8019b2e:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8019d64 <__kernel_rem_pio2f+0x2f0>
 8019b32:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8019b36:	9203      	str	r2, [sp, #12]
 8019b38:	4654      	mov	r4, sl
 8019b3a:	00a2      	lsls	r2, r4, #2
 8019b3c:	9205      	str	r2, [sp, #20]
 8019b3e:	aa58      	add	r2, sp, #352	@ 0x160
 8019b40:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8019b44:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8019b48:	a944      	add	r1, sp, #272	@ 0x110
 8019b4a:	aa08      	add	r2, sp, #32
 8019b4c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8019b50:	4694      	mov	ip, r2
 8019b52:	4626      	mov	r6, r4
 8019b54:	2e00      	cmp	r6, #0
 8019b56:	dc4c      	bgt.n	8019bf2 <__kernel_rem_pio2f+0x17e>
 8019b58:	4628      	mov	r0, r5
 8019b5a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019b5e:	f000 f9f1 	bl	8019f44 <scalbnf>
 8019b62:	eeb0 8a40 	vmov.f32	s16, s0
 8019b66:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8019b6a:	ee28 0a00 	vmul.f32	s0, s16, s0
 8019b6e:	f000 fa4f 	bl	801a010 <floorf>
 8019b72:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8019b76:	eea0 8a67 	vfms.f32	s16, s0, s15
 8019b7a:	2d00      	cmp	r5, #0
 8019b7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019b80:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8019b84:	ee17 9a90 	vmov	r9, s15
 8019b88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019b8c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8019b90:	dd41      	ble.n	8019c16 <__kernel_rem_pio2f+0x1a2>
 8019b92:	f104 3cff 	add.w	ip, r4, #4294967295
 8019b96:	a908      	add	r1, sp, #32
 8019b98:	f1c5 0e08 	rsb	lr, r5, #8
 8019b9c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8019ba0:	fa46 f00e 	asr.w	r0, r6, lr
 8019ba4:	4481      	add	r9, r0
 8019ba6:	fa00 f00e 	lsl.w	r0, r0, lr
 8019baa:	1a36      	subs	r6, r6, r0
 8019bac:	f1c5 0007 	rsb	r0, r5, #7
 8019bb0:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8019bb4:	4106      	asrs	r6, r0
 8019bb6:	2e00      	cmp	r6, #0
 8019bb8:	dd3c      	ble.n	8019c34 <__kernel_rem_pio2f+0x1c0>
 8019bba:	f04f 0e00 	mov.w	lr, #0
 8019bbe:	f109 0901 	add.w	r9, r9, #1
 8019bc2:	4670      	mov	r0, lr
 8019bc4:	4574      	cmp	r4, lr
 8019bc6:	dc68      	bgt.n	8019c9a <__kernel_rem_pio2f+0x226>
 8019bc8:	2d00      	cmp	r5, #0
 8019bca:	dd03      	ble.n	8019bd4 <__kernel_rem_pio2f+0x160>
 8019bcc:	2d01      	cmp	r5, #1
 8019bce:	d074      	beq.n	8019cba <__kernel_rem_pio2f+0x246>
 8019bd0:	2d02      	cmp	r5, #2
 8019bd2:	d07d      	beq.n	8019cd0 <__kernel_rem_pio2f+0x25c>
 8019bd4:	2e02      	cmp	r6, #2
 8019bd6:	d12d      	bne.n	8019c34 <__kernel_rem_pio2f+0x1c0>
 8019bd8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8019bdc:	ee30 8a48 	vsub.f32	s16, s0, s16
 8019be0:	b340      	cbz	r0, 8019c34 <__kernel_rem_pio2f+0x1c0>
 8019be2:	4628      	mov	r0, r5
 8019be4:	9306      	str	r3, [sp, #24]
 8019be6:	f000 f9ad 	bl	8019f44 <scalbnf>
 8019bea:	9b06      	ldr	r3, [sp, #24]
 8019bec:	ee38 8a40 	vsub.f32	s16, s16, s0
 8019bf0:	e020      	b.n	8019c34 <__kernel_rem_pio2f+0x1c0>
 8019bf2:	ee60 7a28 	vmul.f32	s15, s0, s17
 8019bf6:	3e01      	subs	r6, #1
 8019bf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019bfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019c00:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8019c04:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019c08:	ecac 0a01 	vstmia	ip!, {s0}
 8019c0c:	ed30 0a01 	vldmdb	r0!, {s0}
 8019c10:	ee37 0a80 	vadd.f32	s0, s15, s0
 8019c14:	e79e      	b.n	8019b54 <__kernel_rem_pio2f+0xe0>
 8019c16:	d105      	bne.n	8019c24 <__kernel_rem_pio2f+0x1b0>
 8019c18:	1e60      	subs	r0, r4, #1
 8019c1a:	a908      	add	r1, sp, #32
 8019c1c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8019c20:	11f6      	asrs	r6, r6, #7
 8019c22:	e7c8      	b.n	8019bb6 <__kernel_rem_pio2f+0x142>
 8019c24:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8019c28:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8019c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c30:	da31      	bge.n	8019c96 <__kernel_rem_pio2f+0x222>
 8019c32:	2600      	movs	r6, #0
 8019c34:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8019c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c3c:	f040 8098 	bne.w	8019d70 <__kernel_rem_pio2f+0x2fc>
 8019c40:	1e60      	subs	r0, r4, #1
 8019c42:	2200      	movs	r2, #0
 8019c44:	4550      	cmp	r0, sl
 8019c46:	da4b      	bge.n	8019ce0 <__kernel_rem_pio2f+0x26c>
 8019c48:	2a00      	cmp	r2, #0
 8019c4a:	d065      	beq.n	8019d18 <__kernel_rem_pio2f+0x2a4>
 8019c4c:	3c01      	subs	r4, #1
 8019c4e:	ab08      	add	r3, sp, #32
 8019c50:	3d08      	subs	r5, #8
 8019c52:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8019c56:	2b00      	cmp	r3, #0
 8019c58:	d0f8      	beq.n	8019c4c <__kernel_rem_pio2f+0x1d8>
 8019c5a:	4628      	mov	r0, r5
 8019c5c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8019c60:	f000 f970 	bl	8019f44 <scalbnf>
 8019c64:	1c63      	adds	r3, r4, #1
 8019c66:	aa44      	add	r2, sp, #272	@ 0x110
 8019c68:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8019d68 <__kernel_rem_pio2f+0x2f4>
 8019c6c:	0099      	lsls	r1, r3, #2
 8019c6e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8019c72:	4623      	mov	r3, r4
 8019c74:	2b00      	cmp	r3, #0
 8019c76:	f280 80a9 	bge.w	8019dcc <__kernel_rem_pio2f+0x358>
 8019c7a:	4623      	mov	r3, r4
 8019c7c:	2b00      	cmp	r3, #0
 8019c7e:	f2c0 80c7 	blt.w	8019e10 <__kernel_rem_pio2f+0x39c>
 8019c82:	aa44      	add	r2, sp, #272	@ 0x110
 8019c84:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8019c88:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8019d60 <__kernel_rem_pio2f+0x2ec>
 8019c8c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8019d6c <__kernel_rem_pio2f+0x2f8>
 8019c90:	2000      	movs	r0, #0
 8019c92:	1ae2      	subs	r2, r4, r3
 8019c94:	e0b1      	b.n	8019dfa <__kernel_rem_pio2f+0x386>
 8019c96:	2602      	movs	r6, #2
 8019c98:	e78f      	b.n	8019bba <__kernel_rem_pio2f+0x146>
 8019c9a:	f852 1b04 	ldr.w	r1, [r2], #4
 8019c9e:	b948      	cbnz	r0, 8019cb4 <__kernel_rem_pio2f+0x240>
 8019ca0:	b121      	cbz	r1, 8019cac <__kernel_rem_pio2f+0x238>
 8019ca2:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8019ca6:	f842 1c04 	str.w	r1, [r2, #-4]
 8019caa:	2101      	movs	r1, #1
 8019cac:	f10e 0e01 	add.w	lr, lr, #1
 8019cb0:	4608      	mov	r0, r1
 8019cb2:	e787      	b.n	8019bc4 <__kernel_rem_pio2f+0x150>
 8019cb4:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8019cb8:	e7f5      	b.n	8019ca6 <__kernel_rem_pio2f+0x232>
 8019cba:	f104 3cff 	add.w	ip, r4, #4294967295
 8019cbe:	aa08      	add	r2, sp, #32
 8019cc0:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8019cc4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8019cc8:	a908      	add	r1, sp, #32
 8019cca:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8019cce:	e781      	b.n	8019bd4 <__kernel_rem_pio2f+0x160>
 8019cd0:	f104 3cff 	add.w	ip, r4, #4294967295
 8019cd4:	aa08      	add	r2, sp, #32
 8019cd6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8019cda:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8019cde:	e7f3      	b.n	8019cc8 <__kernel_rem_pio2f+0x254>
 8019ce0:	a908      	add	r1, sp, #32
 8019ce2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8019ce6:	3801      	subs	r0, #1
 8019ce8:	430a      	orrs	r2, r1
 8019cea:	e7ab      	b.n	8019c44 <__kernel_rem_pio2f+0x1d0>
 8019cec:	3201      	adds	r2, #1
 8019cee:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8019cf2:	2e00      	cmp	r6, #0
 8019cf4:	d0fa      	beq.n	8019cec <__kernel_rem_pio2f+0x278>
 8019cf6:	9905      	ldr	r1, [sp, #20]
 8019cf8:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8019cfc:	eb0d 0001 	add.w	r0, sp, r1
 8019d00:	18e6      	adds	r6, r4, r3
 8019d02:	a91c      	add	r1, sp, #112	@ 0x70
 8019d04:	f104 0c01 	add.w	ip, r4, #1
 8019d08:	384c      	subs	r0, #76	@ 0x4c
 8019d0a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8019d0e:	4422      	add	r2, r4
 8019d10:	4562      	cmp	r2, ip
 8019d12:	da04      	bge.n	8019d1e <__kernel_rem_pio2f+0x2aa>
 8019d14:	4614      	mov	r4, r2
 8019d16:	e710      	b.n	8019b3a <__kernel_rem_pio2f+0xc6>
 8019d18:	9804      	ldr	r0, [sp, #16]
 8019d1a:	2201      	movs	r2, #1
 8019d1c:	e7e7      	b.n	8019cee <__kernel_rem_pio2f+0x27a>
 8019d1e:	9903      	ldr	r1, [sp, #12]
 8019d20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8019d24:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8019d28:	9105      	str	r1, [sp, #20]
 8019d2a:	ee07 1a90 	vmov	s15, r1
 8019d2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019d32:	2400      	movs	r4, #0
 8019d34:	ece6 7a01 	vstmia	r6!, {s15}
 8019d38:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8019d6c <__kernel_rem_pio2f+0x2f8>
 8019d3c:	46b1      	mov	r9, r6
 8019d3e:	455c      	cmp	r4, fp
 8019d40:	dd04      	ble.n	8019d4c <__kernel_rem_pio2f+0x2d8>
 8019d42:	ece0 7a01 	vstmia	r0!, {s15}
 8019d46:	f10c 0c01 	add.w	ip, ip, #1
 8019d4a:	e7e1      	b.n	8019d10 <__kernel_rem_pio2f+0x29c>
 8019d4c:	ecfe 6a01 	vldmia	lr!, {s13}
 8019d50:	ed39 7a01 	vldmdb	r9!, {s14}
 8019d54:	3401      	adds	r4, #1
 8019d56:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019d5a:	e7f0      	b.n	8019d3e <__kernel_rem_pio2f+0x2ca>
 8019d5c:	0801e46c 	.word	0x0801e46c
 8019d60:	0801e440 	.word	0x0801e440
 8019d64:	43800000 	.word	0x43800000
 8019d68:	3b800000 	.word	0x3b800000
 8019d6c:	00000000 	.word	0x00000000
 8019d70:	9b02      	ldr	r3, [sp, #8]
 8019d72:	eeb0 0a48 	vmov.f32	s0, s16
 8019d76:	eba3 0008 	sub.w	r0, r3, r8
 8019d7a:	f000 f8e3 	bl	8019f44 <scalbnf>
 8019d7e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8019d64 <__kernel_rem_pio2f+0x2f0>
 8019d82:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8019d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d8a:	db19      	blt.n	8019dc0 <__kernel_rem_pio2f+0x34c>
 8019d8c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8019d68 <__kernel_rem_pio2f+0x2f4>
 8019d90:	ee60 7a27 	vmul.f32	s15, s0, s15
 8019d94:	aa08      	add	r2, sp, #32
 8019d96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019d9a:	3508      	adds	r5, #8
 8019d9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019da0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8019da4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019da8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019dac:	ee10 3a10 	vmov	r3, s0
 8019db0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8019db4:	ee17 3a90 	vmov	r3, s15
 8019db8:	3401      	adds	r4, #1
 8019dba:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8019dbe:	e74c      	b.n	8019c5a <__kernel_rem_pio2f+0x1e6>
 8019dc0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019dc4:	aa08      	add	r2, sp, #32
 8019dc6:	ee10 3a10 	vmov	r3, s0
 8019dca:	e7f6      	b.n	8019dba <__kernel_rem_pio2f+0x346>
 8019dcc:	a808      	add	r0, sp, #32
 8019dce:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8019dd2:	9001      	str	r0, [sp, #4]
 8019dd4:	ee07 0a90 	vmov	s15, r0
 8019dd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019ddc:	3b01      	subs	r3, #1
 8019dde:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019de2:	ee20 0a07 	vmul.f32	s0, s0, s14
 8019de6:	ed62 7a01 	vstmdb	r2!, {s15}
 8019dea:	e743      	b.n	8019c74 <__kernel_rem_pio2f+0x200>
 8019dec:	ecfc 6a01 	vldmia	ip!, {s13}
 8019df0:	ecb5 7a01 	vldmia	r5!, {s14}
 8019df4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019df8:	3001      	adds	r0, #1
 8019dfa:	4550      	cmp	r0, sl
 8019dfc:	dc01      	bgt.n	8019e02 <__kernel_rem_pio2f+0x38e>
 8019dfe:	4290      	cmp	r0, r2
 8019e00:	ddf4      	ble.n	8019dec <__kernel_rem_pio2f+0x378>
 8019e02:	a858      	add	r0, sp, #352	@ 0x160
 8019e04:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8019e08:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8019e0c:	3b01      	subs	r3, #1
 8019e0e:	e735      	b.n	8019c7c <__kernel_rem_pio2f+0x208>
 8019e10:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8019e12:	2b02      	cmp	r3, #2
 8019e14:	dc09      	bgt.n	8019e2a <__kernel_rem_pio2f+0x3b6>
 8019e16:	2b00      	cmp	r3, #0
 8019e18:	dc27      	bgt.n	8019e6a <__kernel_rem_pio2f+0x3f6>
 8019e1a:	d040      	beq.n	8019e9e <__kernel_rem_pio2f+0x42a>
 8019e1c:	f009 0007 	and.w	r0, r9, #7
 8019e20:	b059      	add	sp, #356	@ 0x164
 8019e22:	ecbd 8b04 	vpop	{d8-d9}
 8019e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e2a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8019e2c:	2b03      	cmp	r3, #3
 8019e2e:	d1f5      	bne.n	8019e1c <__kernel_rem_pio2f+0x3a8>
 8019e30:	aa30      	add	r2, sp, #192	@ 0xc0
 8019e32:	1f0b      	subs	r3, r1, #4
 8019e34:	4413      	add	r3, r2
 8019e36:	461a      	mov	r2, r3
 8019e38:	4620      	mov	r0, r4
 8019e3a:	2800      	cmp	r0, #0
 8019e3c:	dc50      	bgt.n	8019ee0 <__kernel_rem_pio2f+0x46c>
 8019e3e:	4622      	mov	r2, r4
 8019e40:	2a01      	cmp	r2, #1
 8019e42:	dc5d      	bgt.n	8019f00 <__kernel_rem_pio2f+0x48c>
 8019e44:	ab30      	add	r3, sp, #192	@ 0xc0
 8019e46:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8019d6c <__kernel_rem_pio2f+0x2f8>
 8019e4a:	440b      	add	r3, r1
 8019e4c:	2c01      	cmp	r4, #1
 8019e4e:	dc67      	bgt.n	8019f20 <__kernel_rem_pio2f+0x4ac>
 8019e50:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8019e54:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8019e58:	2e00      	cmp	r6, #0
 8019e5a:	d167      	bne.n	8019f2c <__kernel_rem_pio2f+0x4b8>
 8019e5c:	edc7 6a00 	vstr	s13, [r7]
 8019e60:	ed87 7a01 	vstr	s14, [r7, #4]
 8019e64:	edc7 7a02 	vstr	s15, [r7, #8]
 8019e68:	e7d8      	b.n	8019e1c <__kernel_rem_pio2f+0x3a8>
 8019e6a:	ab30      	add	r3, sp, #192	@ 0xc0
 8019e6c:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8019d6c <__kernel_rem_pio2f+0x2f8>
 8019e70:	440b      	add	r3, r1
 8019e72:	4622      	mov	r2, r4
 8019e74:	2a00      	cmp	r2, #0
 8019e76:	da24      	bge.n	8019ec2 <__kernel_rem_pio2f+0x44e>
 8019e78:	b34e      	cbz	r6, 8019ece <__kernel_rem_pio2f+0x45a>
 8019e7a:	eef1 7a47 	vneg.f32	s15, s14
 8019e7e:	edc7 7a00 	vstr	s15, [r7]
 8019e82:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8019e86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019e8a:	aa31      	add	r2, sp, #196	@ 0xc4
 8019e8c:	2301      	movs	r3, #1
 8019e8e:	429c      	cmp	r4, r3
 8019e90:	da20      	bge.n	8019ed4 <__kernel_rem_pio2f+0x460>
 8019e92:	b10e      	cbz	r6, 8019e98 <__kernel_rem_pio2f+0x424>
 8019e94:	eef1 7a67 	vneg.f32	s15, s15
 8019e98:	edc7 7a01 	vstr	s15, [r7, #4]
 8019e9c:	e7be      	b.n	8019e1c <__kernel_rem_pio2f+0x3a8>
 8019e9e:	ab30      	add	r3, sp, #192	@ 0xc0
 8019ea0:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8019d6c <__kernel_rem_pio2f+0x2f8>
 8019ea4:	440b      	add	r3, r1
 8019ea6:	2c00      	cmp	r4, #0
 8019ea8:	da05      	bge.n	8019eb6 <__kernel_rem_pio2f+0x442>
 8019eaa:	b10e      	cbz	r6, 8019eb0 <__kernel_rem_pio2f+0x43c>
 8019eac:	eef1 7a67 	vneg.f32	s15, s15
 8019eb0:	edc7 7a00 	vstr	s15, [r7]
 8019eb4:	e7b2      	b.n	8019e1c <__kernel_rem_pio2f+0x3a8>
 8019eb6:	ed33 7a01 	vldmdb	r3!, {s14}
 8019eba:	3c01      	subs	r4, #1
 8019ebc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019ec0:	e7f1      	b.n	8019ea6 <__kernel_rem_pio2f+0x432>
 8019ec2:	ed73 7a01 	vldmdb	r3!, {s15}
 8019ec6:	3a01      	subs	r2, #1
 8019ec8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019ecc:	e7d2      	b.n	8019e74 <__kernel_rem_pio2f+0x400>
 8019ece:	eef0 7a47 	vmov.f32	s15, s14
 8019ed2:	e7d4      	b.n	8019e7e <__kernel_rem_pio2f+0x40a>
 8019ed4:	ecb2 7a01 	vldmia	r2!, {s14}
 8019ed8:	3301      	adds	r3, #1
 8019eda:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019ede:	e7d6      	b.n	8019e8e <__kernel_rem_pio2f+0x41a>
 8019ee0:	ed72 7a01 	vldmdb	r2!, {s15}
 8019ee4:	edd2 6a01 	vldr	s13, [r2, #4]
 8019ee8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019eec:	3801      	subs	r0, #1
 8019eee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019ef2:	ed82 7a00 	vstr	s14, [r2]
 8019ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019efa:	edc2 7a01 	vstr	s15, [r2, #4]
 8019efe:	e79c      	b.n	8019e3a <__kernel_rem_pio2f+0x3c6>
 8019f00:	ed73 7a01 	vldmdb	r3!, {s15}
 8019f04:	edd3 6a01 	vldr	s13, [r3, #4]
 8019f08:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019f0c:	3a01      	subs	r2, #1
 8019f0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019f12:	ed83 7a00 	vstr	s14, [r3]
 8019f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019f1a:	edc3 7a01 	vstr	s15, [r3, #4]
 8019f1e:	e78f      	b.n	8019e40 <__kernel_rem_pio2f+0x3cc>
 8019f20:	ed33 7a01 	vldmdb	r3!, {s14}
 8019f24:	3c01      	subs	r4, #1
 8019f26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019f2a:	e78f      	b.n	8019e4c <__kernel_rem_pio2f+0x3d8>
 8019f2c:	eef1 6a66 	vneg.f32	s13, s13
 8019f30:	eeb1 7a47 	vneg.f32	s14, s14
 8019f34:	edc7 6a00 	vstr	s13, [r7]
 8019f38:	ed87 7a01 	vstr	s14, [r7, #4]
 8019f3c:	eef1 7a67 	vneg.f32	s15, s15
 8019f40:	e790      	b.n	8019e64 <__kernel_rem_pio2f+0x3f0>
 8019f42:	bf00      	nop

08019f44 <scalbnf>:
 8019f44:	ee10 3a10 	vmov	r3, s0
 8019f48:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8019f4c:	d02b      	beq.n	8019fa6 <scalbnf+0x62>
 8019f4e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8019f52:	d302      	bcc.n	8019f5a <scalbnf+0x16>
 8019f54:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019f58:	4770      	bx	lr
 8019f5a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8019f5e:	d123      	bne.n	8019fa8 <scalbnf+0x64>
 8019f60:	4b24      	ldr	r3, [pc, #144]	@ (8019ff4 <scalbnf+0xb0>)
 8019f62:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8019ff8 <scalbnf+0xb4>
 8019f66:	4298      	cmp	r0, r3
 8019f68:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019f6c:	db17      	blt.n	8019f9e <scalbnf+0x5a>
 8019f6e:	ee10 3a10 	vmov	r3, s0
 8019f72:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019f76:	3a19      	subs	r2, #25
 8019f78:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8019f7c:	4288      	cmp	r0, r1
 8019f7e:	dd15      	ble.n	8019fac <scalbnf+0x68>
 8019f80:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8019ffc <scalbnf+0xb8>
 8019f84:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801a000 <scalbnf+0xbc>
 8019f88:	ee10 3a10 	vmov	r3, s0
 8019f8c:	eeb0 7a67 	vmov.f32	s14, s15
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	bfb8      	it	lt
 8019f94:	eef0 7a66 	vmovlt.f32	s15, s13
 8019f98:	ee27 0a87 	vmul.f32	s0, s15, s14
 8019f9c:	4770      	bx	lr
 8019f9e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801a004 <scalbnf+0xc0>
 8019fa2:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019fa6:	4770      	bx	lr
 8019fa8:	0dd2      	lsrs	r2, r2, #23
 8019faa:	e7e5      	b.n	8019f78 <scalbnf+0x34>
 8019fac:	4410      	add	r0, r2
 8019fae:	28fe      	cmp	r0, #254	@ 0xfe
 8019fb0:	dce6      	bgt.n	8019f80 <scalbnf+0x3c>
 8019fb2:	2800      	cmp	r0, #0
 8019fb4:	dd06      	ble.n	8019fc4 <scalbnf+0x80>
 8019fb6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8019fba:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8019fbe:	ee00 3a10 	vmov	s0, r3
 8019fc2:	4770      	bx	lr
 8019fc4:	f110 0f16 	cmn.w	r0, #22
 8019fc8:	da09      	bge.n	8019fde <scalbnf+0x9a>
 8019fca:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801a004 <scalbnf+0xc0>
 8019fce:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 801a008 <scalbnf+0xc4>
 8019fd2:	ee10 3a10 	vmov	r3, s0
 8019fd6:	eeb0 7a67 	vmov.f32	s14, s15
 8019fda:	2b00      	cmp	r3, #0
 8019fdc:	e7d9      	b.n	8019f92 <scalbnf+0x4e>
 8019fde:	3019      	adds	r0, #25
 8019fe0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8019fe4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8019fe8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801a00c <scalbnf+0xc8>
 8019fec:	ee07 3a90 	vmov	s15, r3
 8019ff0:	e7d7      	b.n	8019fa2 <scalbnf+0x5e>
 8019ff2:	bf00      	nop
 8019ff4:	ffff3cb0 	.word	0xffff3cb0
 8019ff8:	4c000000 	.word	0x4c000000
 8019ffc:	7149f2ca 	.word	0x7149f2ca
 801a000:	f149f2ca 	.word	0xf149f2ca
 801a004:	0da24260 	.word	0x0da24260
 801a008:	8da24260 	.word	0x8da24260
 801a00c:	33000000 	.word	0x33000000

0801a010 <floorf>:
 801a010:	ee10 3a10 	vmov	r3, s0
 801a014:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801a018:	3a7f      	subs	r2, #127	@ 0x7f
 801a01a:	2a16      	cmp	r2, #22
 801a01c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801a020:	dc2b      	bgt.n	801a07a <floorf+0x6a>
 801a022:	2a00      	cmp	r2, #0
 801a024:	da12      	bge.n	801a04c <floorf+0x3c>
 801a026:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801a08c <floorf+0x7c>
 801a02a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a02e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a036:	dd06      	ble.n	801a046 <floorf+0x36>
 801a038:	2b00      	cmp	r3, #0
 801a03a:	da24      	bge.n	801a086 <floorf+0x76>
 801a03c:	2900      	cmp	r1, #0
 801a03e:	4b14      	ldr	r3, [pc, #80]	@ (801a090 <floorf+0x80>)
 801a040:	bf08      	it	eq
 801a042:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801a046:	ee00 3a10 	vmov	s0, r3
 801a04a:	4770      	bx	lr
 801a04c:	4911      	ldr	r1, [pc, #68]	@ (801a094 <floorf+0x84>)
 801a04e:	4111      	asrs	r1, r2
 801a050:	420b      	tst	r3, r1
 801a052:	d0fa      	beq.n	801a04a <floorf+0x3a>
 801a054:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801a08c <floorf+0x7c>
 801a058:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a05c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a064:	ddef      	ble.n	801a046 <floorf+0x36>
 801a066:	2b00      	cmp	r3, #0
 801a068:	bfbe      	ittt	lt
 801a06a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801a06e:	fa40 f202 	asrlt.w	r2, r0, r2
 801a072:	189b      	addlt	r3, r3, r2
 801a074:	ea23 0301 	bic.w	r3, r3, r1
 801a078:	e7e5      	b.n	801a046 <floorf+0x36>
 801a07a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801a07e:	d3e4      	bcc.n	801a04a <floorf+0x3a>
 801a080:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a084:	4770      	bx	lr
 801a086:	2300      	movs	r3, #0
 801a088:	e7dd      	b.n	801a046 <floorf+0x36>
 801a08a:	bf00      	nop
 801a08c:	7149f2ca 	.word	0x7149f2ca
 801a090:	bf800000 	.word	0xbf800000
 801a094:	007fffff 	.word	0x007fffff

0801a098 <abort>:
 801a098:	b508      	push	{r3, lr}
 801a09a:	2006      	movs	r0, #6
 801a09c:	f000 ff42 	bl	801af24 <raise>
 801a0a0:	2001      	movs	r0, #1
 801a0a2:	f7ed f98f 	bl	80073c4 <_exit>
	...

0801a0a8 <malloc>:
 801a0a8:	4b02      	ldr	r3, [pc, #8]	@ (801a0b4 <malloc+0xc>)
 801a0aa:	4601      	mov	r1, r0
 801a0ac:	6818      	ldr	r0, [r3, #0]
 801a0ae:	f000 b82d 	b.w	801a10c <_malloc_r>
 801a0b2:	bf00      	nop
 801a0b4:	20000130 	.word	0x20000130

0801a0b8 <free>:
 801a0b8:	4b02      	ldr	r3, [pc, #8]	@ (801a0c4 <free+0xc>)
 801a0ba:	4601      	mov	r1, r0
 801a0bc:	6818      	ldr	r0, [r3, #0]
 801a0be:	f001 be43 	b.w	801bd48 <_free_r>
 801a0c2:	bf00      	nop
 801a0c4:	20000130 	.word	0x20000130

0801a0c8 <sbrk_aligned>:
 801a0c8:	b570      	push	{r4, r5, r6, lr}
 801a0ca:	4e0f      	ldr	r6, [pc, #60]	@ (801a108 <sbrk_aligned+0x40>)
 801a0cc:	460c      	mov	r4, r1
 801a0ce:	6831      	ldr	r1, [r6, #0]
 801a0d0:	4605      	mov	r5, r0
 801a0d2:	b911      	cbnz	r1, 801a0da <sbrk_aligned+0x12>
 801a0d4:	f000 ff7a 	bl	801afcc <_sbrk_r>
 801a0d8:	6030      	str	r0, [r6, #0]
 801a0da:	4621      	mov	r1, r4
 801a0dc:	4628      	mov	r0, r5
 801a0de:	f000 ff75 	bl	801afcc <_sbrk_r>
 801a0e2:	1c43      	adds	r3, r0, #1
 801a0e4:	d103      	bne.n	801a0ee <sbrk_aligned+0x26>
 801a0e6:	f04f 34ff 	mov.w	r4, #4294967295
 801a0ea:	4620      	mov	r0, r4
 801a0ec:	bd70      	pop	{r4, r5, r6, pc}
 801a0ee:	1cc4      	adds	r4, r0, #3
 801a0f0:	f024 0403 	bic.w	r4, r4, #3
 801a0f4:	42a0      	cmp	r0, r4
 801a0f6:	d0f8      	beq.n	801a0ea <sbrk_aligned+0x22>
 801a0f8:	1a21      	subs	r1, r4, r0
 801a0fa:	4628      	mov	r0, r5
 801a0fc:	f000 ff66 	bl	801afcc <_sbrk_r>
 801a100:	3001      	adds	r0, #1
 801a102:	d1f2      	bne.n	801a0ea <sbrk_aligned+0x22>
 801a104:	e7ef      	b.n	801a0e6 <sbrk_aligned+0x1e>
 801a106:	bf00      	nop
 801a108:	200019e0 	.word	0x200019e0

0801a10c <_malloc_r>:
 801a10c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a110:	1ccd      	adds	r5, r1, #3
 801a112:	f025 0503 	bic.w	r5, r5, #3
 801a116:	3508      	adds	r5, #8
 801a118:	2d0c      	cmp	r5, #12
 801a11a:	bf38      	it	cc
 801a11c:	250c      	movcc	r5, #12
 801a11e:	2d00      	cmp	r5, #0
 801a120:	4606      	mov	r6, r0
 801a122:	db01      	blt.n	801a128 <_malloc_r+0x1c>
 801a124:	42a9      	cmp	r1, r5
 801a126:	d904      	bls.n	801a132 <_malloc_r+0x26>
 801a128:	230c      	movs	r3, #12
 801a12a:	6033      	str	r3, [r6, #0]
 801a12c:	2000      	movs	r0, #0
 801a12e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a132:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801a208 <_malloc_r+0xfc>
 801a136:	f000 f869 	bl	801a20c <__malloc_lock>
 801a13a:	f8d8 3000 	ldr.w	r3, [r8]
 801a13e:	461c      	mov	r4, r3
 801a140:	bb44      	cbnz	r4, 801a194 <_malloc_r+0x88>
 801a142:	4629      	mov	r1, r5
 801a144:	4630      	mov	r0, r6
 801a146:	f7ff ffbf 	bl	801a0c8 <sbrk_aligned>
 801a14a:	1c43      	adds	r3, r0, #1
 801a14c:	4604      	mov	r4, r0
 801a14e:	d158      	bne.n	801a202 <_malloc_r+0xf6>
 801a150:	f8d8 4000 	ldr.w	r4, [r8]
 801a154:	4627      	mov	r7, r4
 801a156:	2f00      	cmp	r7, #0
 801a158:	d143      	bne.n	801a1e2 <_malloc_r+0xd6>
 801a15a:	2c00      	cmp	r4, #0
 801a15c:	d04b      	beq.n	801a1f6 <_malloc_r+0xea>
 801a15e:	6823      	ldr	r3, [r4, #0]
 801a160:	4639      	mov	r1, r7
 801a162:	4630      	mov	r0, r6
 801a164:	eb04 0903 	add.w	r9, r4, r3
 801a168:	f000 ff30 	bl	801afcc <_sbrk_r>
 801a16c:	4581      	cmp	r9, r0
 801a16e:	d142      	bne.n	801a1f6 <_malloc_r+0xea>
 801a170:	6821      	ldr	r1, [r4, #0]
 801a172:	1a6d      	subs	r5, r5, r1
 801a174:	4629      	mov	r1, r5
 801a176:	4630      	mov	r0, r6
 801a178:	f7ff ffa6 	bl	801a0c8 <sbrk_aligned>
 801a17c:	3001      	adds	r0, #1
 801a17e:	d03a      	beq.n	801a1f6 <_malloc_r+0xea>
 801a180:	6823      	ldr	r3, [r4, #0]
 801a182:	442b      	add	r3, r5
 801a184:	6023      	str	r3, [r4, #0]
 801a186:	f8d8 3000 	ldr.w	r3, [r8]
 801a18a:	685a      	ldr	r2, [r3, #4]
 801a18c:	bb62      	cbnz	r2, 801a1e8 <_malloc_r+0xdc>
 801a18e:	f8c8 7000 	str.w	r7, [r8]
 801a192:	e00f      	b.n	801a1b4 <_malloc_r+0xa8>
 801a194:	6822      	ldr	r2, [r4, #0]
 801a196:	1b52      	subs	r2, r2, r5
 801a198:	d420      	bmi.n	801a1dc <_malloc_r+0xd0>
 801a19a:	2a0b      	cmp	r2, #11
 801a19c:	d917      	bls.n	801a1ce <_malloc_r+0xc2>
 801a19e:	1961      	adds	r1, r4, r5
 801a1a0:	42a3      	cmp	r3, r4
 801a1a2:	6025      	str	r5, [r4, #0]
 801a1a4:	bf18      	it	ne
 801a1a6:	6059      	strne	r1, [r3, #4]
 801a1a8:	6863      	ldr	r3, [r4, #4]
 801a1aa:	bf08      	it	eq
 801a1ac:	f8c8 1000 	streq.w	r1, [r8]
 801a1b0:	5162      	str	r2, [r4, r5]
 801a1b2:	604b      	str	r3, [r1, #4]
 801a1b4:	4630      	mov	r0, r6
 801a1b6:	f000 f82f 	bl	801a218 <__malloc_unlock>
 801a1ba:	f104 000b 	add.w	r0, r4, #11
 801a1be:	1d23      	adds	r3, r4, #4
 801a1c0:	f020 0007 	bic.w	r0, r0, #7
 801a1c4:	1ac2      	subs	r2, r0, r3
 801a1c6:	bf1c      	itt	ne
 801a1c8:	1a1b      	subne	r3, r3, r0
 801a1ca:	50a3      	strne	r3, [r4, r2]
 801a1cc:	e7af      	b.n	801a12e <_malloc_r+0x22>
 801a1ce:	6862      	ldr	r2, [r4, #4]
 801a1d0:	42a3      	cmp	r3, r4
 801a1d2:	bf0c      	ite	eq
 801a1d4:	f8c8 2000 	streq.w	r2, [r8]
 801a1d8:	605a      	strne	r2, [r3, #4]
 801a1da:	e7eb      	b.n	801a1b4 <_malloc_r+0xa8>
 801a1dc:	4623      	mov	r3, r4
 801a1de:	6864      	ldr	r4, [r4, #4]
 801a1e0:	e7ae      	b.n	801a140 <_malloc_r+0x34>
 801a1e2:	463c      	mov	r4, r7
 801a1e4:	687f      	ldr	r7, [r7, #4]
 801a1e6:	e7b6      	b.n	801a156 <_malloc_r+0x4a>
 801a1e8:	461a      	mov	r2, r3
 801a1ea:	685b      	ldr	r3, [r3, #4]
 801a1ec:	42a3      	cmp	r3, r4
 801a1ee:	d1fb      	bne.n	801a1e8 <_malloc_r+0xdc>
 801a1f0:	2300      	movs	r3, #0
 801a1f2:	6053      	str	r3, [r2, #4]
 801a1f4:	e7de      	b.n	801a1b4 <_malloc_r+0xa8>
 801a1f6:	230c      	movs	r3, #12
 801a1f8:	6033      	str	r3, [r6, #0]
 801a1fa:	4630      	mov	r0, r6
 801a1fc:	f000 f80c 	bl	801a218 <__malloc_unlock>
 801a200:	e794      	b.n	801a12c <_malloc_r+0x20>
 801a202:	6005      	str	r5, [r0, #0]
 801a204:	e7d6      	b.n	801a1b4 <_malloc_r+0xa8>
 801a206:	bf00      	nop
 801a208:	200019e4 	.word	0x200019e4

0801a20c <__malloc_lock>:
 801a20c:	4801      	ldr	r0, [pc, #4]	@ (801a214 <__malloc_lock+0x8>)
 801a20e:	f000 bf2a 	b.w	801b066 <__retarget_lock_acquire_recursive>
 801a212:	bf00      	nop
 801a214:	20001b28 	.word	0x20001b28

0801a218 <__malloc_unlock>:
 801a218:	4801      	ldr	r0, [pc, #4]	@ (801a220 <__malloc_unlock+0x8>)
 801a21a:	f000 bf25 	b.w	801b068 <__retarget_lock_release_recursive>
 801a21e:	bf00      	nop
 801a220:	20001b28 	.word	0x20001b28

0801a224 <__cvt>:
 801a224:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a228:	ec57 6b10 	vmov	r6, r7, d0
 801a22c:	2f00      	cmp	r7, #0
 801a22e:	460c      	mov	r4, r1
 801a230:	4619      	mov	r1, r3
 801a232:	463b      	mov	r3, r7
 801a234:	bfbb      	ittet	lt
 801a236:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801a23a:	461f      	movlt	r7, r3
 801a23c:	2300      	movge	r3, #0
 801a23e:	232d      	movlt	r3, #45	@ 0x2d
 801a240:	700b      	strb	r3, [r1, #0]
 801a242:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a244:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801a248:	4691      	mov	r9, r2
 801a24a:	f023 0820 	bic.w	r8, r3, #32
 801a24e:	bfbc      	itt	lt
 801a250:	4632      	movlt	r2, r6
 801a252:	4616      	movlt	r6, r2
 801a254:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801a258:	d005      	beq.n	801a266 <__cvt+0x42>
 801a25a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801a25e:	d100      	bne.n	801a262 <__cvt+0x3e>
 801a260:	3401      	adds	r4, #1
 801a262:	2102      	movs	r1, #2
 801a264:	e000      	b.n	801a268 <__cvt+0x44>
 801a266:	2103      	movs	r1, #3
 801a268:	ab03      	add	r3, sp, #12
 801a26a:	9301      	str	r3, [sp, #4]
 801a26c:	ab02      	add	r3, sp, #8
 801a26e:	9300      	str	r3, [sp, #0]
 801a270:	ec47 6b10 	vmov	d0, r6, r7
 801a274:	4653      	mov	r3, sl
 801a276:	4622      	mov	r2, r4
 801a278:	f000 ff96 	bl	801b1a8 <_dtoa_r>
 801a27c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801a280:	4605      	mov	r5, r0
 801a282:	d119      	bne.n	801a2b8 <__cvt+0x94>
 801a284:	f019 0f01 	tst.w	r9, #1
 801a288:	d00e      	beq.n	801a2a8 <__cvt+0x84>
 801a28a:	eb00 0904 	add.w	r9, r0, r4
 801a28e:	2200      	movs	r2, #0
 801a290:	2300      	movs	r3, #0
 801a292:	4630      	mov	r0, r6
 801a294:	4639      	mov	r1, r7
 801a296:	f7e6 fbff 	bl	8000a98 <__aeabi_dcmpeq>
 801a29a:	b108      	cbz	r0, 801a2a0 <__cvt+0x7c>
 801a29c:	f8cd 900c 	str.w	r9, [sp, #12]
 801a2a0:	2230      	movs	r2, #48	@ 0x30
 801a2a2:	9b03      	ldr	r3, [sp, #12]
 801a2a4:	454b      	cmp	r3, r9
 801a2a6:	d31e      	bcc.n	801a2e6 <__cvt+0xc2>
 801a2a8:	9b03      	ldr	r3, [sp, #12]
 801a2aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a2ac:	1b5b      	subs	r3, r3, r5
 801a2ae:	4628      	mov	r0, r5
 801a2b0:	6013      	str	r3, [r2, #0]
 801a2b2:	b004      	add	sp, #16
 801a2b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a2b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801a2bc:	eb00 0904 	add.w	r9, r0, r4
 801a2c0:	d1e5      	bne.n	801a28e <__cvt+0x6a>
 801a2c2:	7803      	ldrb	r3, [r0, #0]
 801a2c4:	2b30      	cmp	r3, #48	@ 0x30
 801a2c6:	d10a      	bne.n	801a2de <__cvt+0xba>
 801a2c8:	2200      	movs	r2, #0
 801a2ca:	2300      	movs	r3, #0
 801a2cc:	4630      	mov	r0, r6
 801a2ce:	4639      	mov	r1, r7
 801a2d0:	f7e6 fbe2 	bl	8000a98 <__aeabi_dcmpeq>
 801a2d4:	b918      	cbnz	r0, 801a2de <__cvt+0xba>
 801a2d6:	f1c4 0401 	rsb	r4, r4, #1
 801a2da:	f8ca 4000 	str.w	r4, [sl]
 801a2de:	f8da 3000 	ldr.w	r3, [sl]
 801a2e2:	4499      	add	r9, r3
 801a2e4:	e7d3      	b.n	801a28e <__cvt+0x6a>
 801a2e6:	1c59      	adds	r1, r3, #1
 801a2e8:	9103      	str	r1, [sp, #12]
 801a2ea:	701a      	strb	r2, [r3, #0]
 801a2ec:	e7d9      	b.n	801a2a2 <__cvt+0x7e>

0801a2ee <__exponent>:
 801a2ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a2f0:	2900      	cmp	r1, #0
 801a2f2:	bfba      	itte	lt
 801a2f4:	4249      	neglt	r1, r1
 801a2f6:	232d      	movlt	r3, #45	@ 0x2d
 801a2f8:	232b      	movge	r3, #43	@ 0x2b
 801a2fa:	2909      	cmp	r1, #9
 801a2fc:	7002      	strb	r2, [r0, #0]
 801a2fe:	7043      	strb	r3, [r0, #1]
 801a300:	dd29      	ble.n	801a356 <__exponent+0x68>
 801a302:	f10d 0307 	add.w	r3, sp, #7
 801a306:	461d      	mov	r5, r3
 801a308:	270a      	movs	r7, #10
 801a30a:	461a      	mov	r2, r3
 801a30c:	fbb1 f6f7 	udiv	r6, r1, r7
 801a310:	fb07 1416 	mls	r4, r7, r6, r1
 801a314:	3430      	adds	r4, #48	@ 0x30
 801a316:	f802 4c01 	strb.w	r4, [r2, #-1]
 801a31a:	460c      	mov	r4, r1
 801a31c:	2c63      	cmp	r4, #99	@ 0x63
 801a31e:	f103 33ff 	add.w	r3, r3, #4294967295
 801a322:	4631      	mov	r1, r6
 801a324:	dcf1      	bgt.n	801a30a <__exponent+0x1c>
 801a326:	3130      	adds	r1, #48	@ 0x30
 801a328:	1e94      	subs	r4, r2, #2
 801a32a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801a32e:	1c41      	adds	r1, r0, #1
 801a330:	4623      	mov	r3, r4
 801a332:	42ab      	cmp	r3, r5
 801a334:	d30a      	bcc.n	801a34c <__exponent+0x5e>
 801a336:	f10d 0309 	add.w	r3, sp, #9
 801a33a:	1a9b      	subs	r3, r3, r2
 801a33c:	42ac      	cmp	r4, r5
 801a33e:	bf88      	it	hi
 801a340:	2300      	movhi	r3, #0
 801a342:	3302      	adds	r3, #2
 801a344:	4403      	add	r3, r0
 801a346:	1a18      	subs	r0, r3, r0
 801a348:	b003      	add	sp, #12
 801a34a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a34c:	f813 6b01 	ldrb.w	r6, [r3], #1
 801a350:	f801 6f01 	strb.w	r6, [r1, #1]!
 801a354:	e7ed      	b.n	801a332 <__exponent+0x44>
 801a356:	2330      	movs	r3, #48	@ 0x30
 801a358:	3130      	adds	r1, #48	@ 0x30
 801a35a:	7083      	strb	r3, [r0, #2]
 801a35c:	70c1      	strb	r1, [r0, #3]
 801a35e:	1d03      	adds	r3, r0, #4
 801a360:	e7f1      	b.n	801a346 <__exponent+0x58>
	...

0801a364 <_printf_float>:
 801a364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a368:	b08d      	sub	sp, #52	@ 0x34
 801a36a:	460c      	mov	r4, r1
 801a36c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801a370:	4616      	mov	r6, r2
 801a372:	461f      	mov	r7, r3
 801a374:	4605      	mov	r5, r0
 801a376:	f000 fddd 	bl	801af34 <_localeconv_r>
 801a37a:	6803      	ldr	r3, [r0, #0]
 801a37c:	9304      	str	r3, [sp, #16]
 801a37e:	4618      	mov	r0, r3
 801a380:	f7e5 ff5e 	bl	8000240 <strlen>
 801a384:	2300      	movs	r3, #0
 801a386:	930a      	str	r3, [sp, #40]	@ 0x28
 801a388:	f8d8 3000 	ldr.w	r3, [r8]
 801a38c:	9005      	str	r0, [sp, #20]
 801a38e:	3307      	adds	r3, #7
 801a390:	f023 0307 	bic.w	r3, r3, #7
 801a394:	f103 0208 	add.w	r2, r3, #8
 801a398:	f894 a018 	ldrb.w	sl, [r4, #24]
 801a39c:	f8d4 b000 	ldr.w	fp, [r4]
 801a3a0:	f8c8 2000 	str.w	r2, [r8]
 801a3a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a3a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801a3ac:	9307      	str	r3, [sp, #28]
 801a3ae:	f8cd 8018 	str.w	r8, [sp, #24]
 801a3b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801a3b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a3ba:	4b9c      	ldr	r3, [pc, #624]	@ (801a62c <_printf_float+0x2c8>)
 801a3bc:	f04f 32ff 	mov.w	r2, #4294967295
 801a3c0:	f7e6 fb9c 	bl	8000afc <__aeabi_dcmpun>
 801a3c4:	bb70      	cbnz	r0, 801a424 <_printf_float+0xc0>
 801a3c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a3ca:	4b98      	ldr	r3, [pc, #608]	@ (801a62c <_printf_float+0x2c8>)
 801a3cc:	f04f 32ff 	mov.w	r2, #4294967295
 801a3d0:	f7e6 fb76 	bl	8000ac0 <__aeabi_dcmple>
 801a3d4:	bb30      	cbnz	r0, 801a424 <_printf_float+0xc0>
 801a3d6:	2200      	movs	r2, #0
 801a3d8:	2300      	movs	r3, #0
 801a3da:	4640      	mov	r0, r8
 801a3dc:	4649      	mov	r1, r9
 801a3de:	f7e6 fb65 	bl	8000aac <__aeabi_dcmplt>
 801a3e2:	b110      	cbz	r0, 801a3ea <_printf_float+0x86>
 801a3e4:	232d      	movs	r3, #45	@ 0x2d
 801a3e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a3ea:	4a91      	ldr	r2, [pc, #580]	@ (801a630 <_printf_float+0x2cc>)
 801a3ec:	4b91      	ldr	r3, [pc, #580]	@ (801a634 <_printf_float+0x2d0>)
 801a3ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801a3f2:	bf8c      	ite	hi
 801a3f4:	4690      	movhi	r8, r2
 801a3f6:	4698      	movls	r8, r3
 801a3f8:	2303      	movs	r3, #3
 801a3fa:	6123      	str	r3, [r4, #16]
 801a3fc:	f02b 0304 	bic.w	r3, fp, #4
 801a400:	6023      	str	r3, [r4, #0]
 801a402:	f04f 0900 	mov.w	r9, #0
 801a406:	9700      	str	r7, [sp, #0]
 801a408:	4633      	mov	r3, r6
 801a40a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801a40c:	4621      	mov	r1, r4
 801a40e:	4628      	mov	r0, r5
 801a410:	f000 f9d2 	bl	801a7b8 <_printf_common>
 801a414:	3001      	adds	r0, #1
 801a416:	f040 808d 	bne.w	801a534 <_printf_float+0x1d0>
 801a41a:	f04f 30ff 	mov.w	r0, #4294967295
 801a41e:	b00d      	add	sp, #52	@ 0x34
 801a420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a424:	4642      	mov	r2, r8
 801a426:	464b      	mov	r3, r9
 801a428:	4640      	mov	r0, r8
 801a42a:	4649      	mov	r1, r9
 801a42c:	f7e6 fb66 	bl	8000afc <__aeabi_dcmpun>
 801a430:	b140      	cbz	r0, 801a444 <_printf_float+0xe0>
 801a432:	464b      	mov	r3, r9
 801a434:	2b00      	cmp	r3, #0
 801a436:	bfbc      	itt	lt
 801a438:	232d      	movlt	r3, #45	@ 0x2d
 801a43a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801a43e:	4a7e      	ldr	r2, [pc, #504]	@ (801a638 <_printf_float+0x2d4>)
 801a440:	4b7e      	ldr	r3, [pc, #504]	@ (801a63c <_printf_float+0x2d8>)
 801a442:	e7d4      	b.n	801a3ee <_printf_float+0x8a>
 801a444:	6863      	ldr	r3, [r4, #4]
 801a446:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801a44a:	9206      	str	r2, [sp, #24]
 801a44c:	1c5a      	adds	r2, r3, #1
 801a44e:	d13b      	bne.n	801a4c8 <_printf_float+0x164>
 801a450:	2306      	movs	r3, #6
 801a452:	6063      	str	r3, [r4, #4]
 801a454:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801a458:	2300      	movs	r3, #0
 801a45a:	6022      	str	r2, [r4, #0]
 801a45c:	9303      	str	r3, [sp, #12]
 801a45e:	ab0a      	add	r3, sp, #40	@ 0x28
 801a460:	e9cd a301 	strd	sl, r3, [sp, #4]
 801a464:	ab09      	add	r3, sp, #36	@ 0x24
 801a466:	9300      	str	r3, [sp, #0]
 801a468:	6861      	ldr	r1, [r4, #4]
 801a46a:	ec49 8b10 	vmov	d0, r8, r9
 801a46e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801a472:	4628      	mov	r0, r5
 801a474:	f7ff fed6 	bl	801a224 <__cvt>
 801a478:	9b06      	ldr	r3, [sp, #24]
 801a47a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a47c:	2b47      	cmp	r3, #71	@ 0x47
 801a47e:	4680      	mov	r8, r0
 801a480:	d129      	bne.n	801a4d6 <_printf_float+0x172>
 801a482:	1cc8      	adds	r0, r1, #3
 801a484:	db02      	blt.n	801a48c <_printf_float+0x128>
 801a486:	6863      	ldr	r3, [r4, #4]
 801a488:	4299      	cmp	r1, r3
 801a48a:	dd41      	ble.n	801a510 <_printf_float+0x1ac>
 801a48c:	f1aa 0a02 	sub.w	sl, sl, #2
 801a490:	fa5f fa8a 	uxtb.w	sl, sl
 801a494:	3901      	subs	r1, #1
 801a496:	4652      	mov	r2, sl
 801a498:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801a49c:	9109      	str	r1, [sp, #36]	@ 0x24
 801a49e:	f7ff ff26 	bl	801a2ee <__exponent>
 801a4a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a4a4:	1813      	adds	r3, r2, r0
 801a4a6:	2a01      	cmp	r2, #1
 801a4a8:	4681      	mov	r9, r0
 801a4aa:	6123      	str	r3, [r4, #16]
 801a4ac:	dc02      	bgt.n	801a4b4 <_printf_float+0x150>
 801a4ae:	6822      	ldr	r2, [r4, #0]
 801a4b0:	07d2      	lsls	r2, r2, #31
 801a4b2:	d501      	bpl.n	801a4b8 <_printf_float+0x154>
 801a4b4:	3301      	adds	r3, #1
 801a4b6:	6123      	str	r3, [r4, #16]
 801a4b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	d0a2      	beq.n	801a406 <_printf_float+0xa2>
 801a4c0:	232d      	movs	r3, #45	@ 0x2d
 801a4c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a4c6:	e79e      	b.n	801a406 <_printf_float+0xa2>
 801a4c8:	9a06      	ldr	r2, [sp, #24]
 801a4ca:	2a47      	cmp	r2, #71	@ 0x47
 801a4cc:	d1c2      	bne.n	801a454 <_printf_float+0xf0>
 801a4ce:	2b00      	cmp	r3, #0
 801a4d0:	d1c0      	bne.n	801a454 <_printf_float+0xf0>
 801a4d2:	2301      	movs	r3, #1
 801a4d4:	e7bd      	b.n	801a452 <_printf_float+0xee>
 801a4d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801a4da:	d9db      	bls.n	801a494 <_printf_float+0x130>
 801a4dc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801a4e0:	d118      	bne.n	801a514 <_printf_float+0x1b0>
 801a4e2:	2900      	cmp	r1, #0
 801a4e4:	6863      	ldr	r3, [r4, #4]
 801a4e6:	dd0b      	ble.n	801a500 <_printf_float+0x19c>
 801a4e8:	6121      	str	r1, [r4, #16]
 801a4ea:	b913      	cbnz	r3, 801a4f2 <_printf_float+0x18e>
 801a4ec:	6822      	ldr	r2, [r4, #0]
 801a4ee:	07d0      	lsls	r0, r2, #31
 801a4f0:	d502      	bpl.n	801a4f8 <_printf_float+0x194>
 801a4f2:	3301      	adds	r3, #1
 801a4f4:	440b      	add	r3, r1
 801a4f6:	6123      	str	r3, [r4, #16]
 801a4f8:	65a1      	str	r1, [r4, #88]	@ 0x58
 801a4fa:	f04f 0900 	mov.w	r9, #0
 801a4fe:	e7db      	b.n	801a4b8 <_printf_float+0x154>
 801a500:	b913      	cbnz	r3, 801a508 <_printf_float+0x1a4>
 801a502:	6822      	ldr	r2, [r4, #0]
 801a504:	07d2      	lsls	r2, r2, #31
 801a506:	d501      	bpl.n	801a50c <_printf_float+0x1a8>
 801a508:	3302      	adds	r3, #2
 801a50a:	e7f4      	b.n	801a4f6 <_printf_float+0x192>
 801a50c:	2301      	movs	r3, #1
 801a50e:	e7f2      	b.n	801a4f6 <_printf_float+0x192>
 801a510:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801a514:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a516:	4299      	cmp	r1, r3
 801a518:	db05      	blt.n	801a526 <_printf_float+0x1c2>
 801a51a:	6823      	ldr	r3, [r4, #0]
 801a51c:	6121      	str	r1, [r4, #16]
 801a51e:	07d8      	lsls	r0, r3, #31
 801a520:	d5ea      	bpl.n	801a4f8 <_printf_float+0x194>
 801a522:	1c4b      	adds	r3, r1, #1
 801a524:	e7e7      	b.n	801a4f6 <_printf_float+0x192>
 801a526:	2900      	cmp	r1, #0
 801a528:	bfd4      	ite	le
 801a52a:	f1c1 0202 	rsble	r2, r1, #2
 801a52e:	2201      	movgt	r2, #1
 801a530:	4413      	add	r3, r2
 801a532:	e7e0      	b.n	801a4f6 <_printf_float+0x192>
 801a534:	6823      	ldr	r3, [r4, #0]
 801a536:	055a      	lsls	r2, r3, #21
 801a538:	d407      	bmi.n	801a54a <_printf_float+0x1e6>
 801a53a:	6923      	ldr	r3, [r4, #16]
 801a53c:	4642      	mov	r2, r8
 801a53e:	4631      	mov	r1, r6
 801a540:	4628      	mov	r0, r5
 801a542:	47b8      	blx	r7
 801a544:	3001      	adds	r0, #1
 801a546:	d12b      	bne.n	801a5a0 <_printf_float+0x23c>
 801a548:	e767      	b.n	801a41a <_printf_float+0xb6>
 801a54a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801a54e:	f240 80dd 	bls.w	801a70c <_printf_float+0x3a8>
 801a552:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801a556:	2200      	movs	r2, #0
 801a558:	2300      	movs	r3, #0
 801a55a:	f7e6 fa9d 	bl	8000a98 <__aeabi_dcmpeq>
 801a55e:	2800      	cmp	r0, #0
 801a560:	d033      	beq.n	801a5ca <_printf_float+0x266>
 801a562:	4a37      	ldr	r2, [pc, #220]	@ (801a640 <_printf_float+0x2dc>)
 801a564:	2301      	movs	r3, #1
 801a566:	4631      	mov	r1, r6
 801a568:	4628      	mov	r0, r5
 801a56a:	47b8      	blx	r7
 801a56c:	3001      	adds	r0, #1
 801a56e:	f43f af54 	beq.w	801a41a <_printf_float+0xb6>
 801a572:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801a576:	4543      	cmp	r3, r8
 801a578:	db02      	blt.n	801a580 <_printf_float+0x21c>
 801a57a:	6823      	ldr	r3, [r4, #0]
 801a57c:	07d8      	lsls	r0, r3, #31
 801a57e:	d50f      	bpl.n	801a5a0 <_printf_float+0x23c>
 801a580:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a584:	4631      	mov	r1, r6
 801a586:	4628      	mov	r0, r5
 801a588:	47b8      	blx	r7
 801a58a:	3001      	adds	r0, #1
 801a58c:	f43f af45 	beq.w	801a41a <_printf_float+0xb6>
 801a590:	f04f 0900 	mov.w	r9, #0
 801a594:	f108 38ff 	add.w	r8, r8, #4294967295
 801a598:	f104 0a1a 	add.w	sl, r4, #26
 801a59c:	45c8      	cmp	r8, r9
 801a59e:	dc09      	bgt.n	801a5b4 <_printf_float+0x250>
 801a5a0:	6823      	ldr	r3, [r4, #0]
 801a5a2:	079b      	lsls	r3, r3, #30
 801a5a4:	f100 8103 	bmi.w	801a7ae <_printf_float+0x44a>
 801a5a8:	68e0      	ldr	r0, [r4, #12]
 801a5aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a5ac:	4298      	cmp	r0, r3
 801a5ae:	bfb8      	it	lt
 801a5b0:	4618      	movlt	r0, r3
 801a5b2:	e734      	b.n	801a41e <_printf_float+0xba>
 801a5b4:	2301      	movs	r3, #1
 801a5b6:	4652      	mov	r2, sl
 801a5b8:	4631      	mov	r1, r6
 801a5ba:	4628      	mov	r0, r5
 801a5bc:	47b8      	blx	r7
 801a5be:	3001      	adds	r0, #1
 801a5c0:	f43f af2b 	beq.w	801a41a <_printf_float+0xb6>
 801a5c4:	f109 0901 	add.w	r9, r9, #1
 801a5c8:	e7e8      	b.n	801a59c <_printf_float+0x238>
 801a5ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a5cc:	2b00      	cmp	r3, #0
 801a5ce:	dc39      	bgt.n	801a644 <_printf_float+0x2e0>
 801a5d0:	4a1b      	ldr	r2, [pc, #108]	@ (801a640 <_printf_float+0x2dc>)
 801a5d2:	2301      	movs	r3, #1
 801a5d4:	4631      	mov	r1, r6
 801a5d6:	4628      	mov	r0, r5
 801a5d8:	47b8      	blx	r7
 801a5da:	3001      	adds	r0, #1
 801a5dc:	f43f af1d 	beq.w	801a41a <_printf_float+0xb6>
 801a5e0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801a5e4:	ea59 0303 	orrs.w	r3, r9, r3
 801a5e8:	d102      	bne.n	801a5f0 <_printf_float+0x28c>
 801a5ea:	6823      	ldr	r3, [r4, #0]
 801a5ec:	07d9      	lsls	r1, r3, #31
 801a5ee:	d5d7      	bpl.n	801a5a0 <_printf_float+0x23c>
 801a5f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a5f4:	4631      	mov	r1, r6
 801a5f6:	4628      	mov	r0, r5
 801a5f8:	47b8      	blx	r7
 801a5fa:	3001      	adds	r0, #1
 801a5fc:	f43f af0d 	beq.w	801a41a <_printf_float+0xb6>
 801a600:	f04f 0a00 	mov.w	sl, #0
 801a604:	f104 0b1a 	add.w	fp, r4, #26
 801a608:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a60a:	425b      	negs	r3, r3
 801a60c:	4553      	cmp	r3, sl
 801a60e:	dc01      	bgt.n	801a614 <_printf_float+0x2b0>
 801a610:	464b      	mov	r3, r9
 801a612:	e793      	b.n	801a53c <_printf_float+0x1d8>
 801a614:	2301      	movs	r3, #1
 801a616:	465a      	mov	r2, fp
 801a618:	4631      	mov	r1, r6
 801a61a:	4628      	mov	r0, r5
 801a61c:	47b8      	blx	r7
 801a61e:	3001      	adds	r0, #1
 801a620:	f43f aefb 	beq.w	801a41a <_printf_float+0xb6>
 801a624:	f10a 0a01 	add.w	sl, sl, #1
 801a628:	e7ee      	b.n	801a608 <_printf_float+0x2a4>
 801a62a:	bf00      	nop
 801a62c:	7fefffff 	.word	0x7fefffff
 801a630:	0801e57d 	.word	0x0801e57d
 801a634:	0801e579 	.word	0x0801e579
 801a638:	0801e585 	.word	0x0801e585
 801a63c:	0801e581 	.word	0x0801e581
 801a640:	0801e589 	.word	0x0801e589
 801a644:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801a646:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801a64a:	4553      	cmp	r3, sl
 801a64c:	bfa8      	it	ge
 801a64e:	4653      	movge	r3, sl
 801a650:	2b00      	cmp	r3, #0
 801a652:	4699      	mov	r9, r3
 801a654:	dc36      	bgt.n	801a6c4 <_printf_float+0x360>
 801a656:	f04f 0b00 	mov.w	fp, #0
 801a65a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a65e:	f104 021a 	add.w	r2, r4, #26
 801a662:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801a664:	9306      	str	r3, [sp, #24]
 801a666:	eba3 0309 	sub.w	r3, r3, r9
 801a66a:	455b      	cmp	r3, fp
 801a66c:	dc31      	bgt.n	801a6d2 <_printf_float+0x36e>
 801a66e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a670:	459a      	cmp	sl, r3
 801a672:	dc3a      	bgt.n	801a6ea <_printf_float+0x386>
 801a674:	6823      	ldr	r3, [r4, #0]
 801a676:	07da      	lsls	r2, r3, #31
 801a678:	d437      	bmi.n	801a6ea <_printf_float+0x386>
 801a67a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a67c:	ebaa 0903 	sub.w	r9, sl, r3
 801a680:	9b06      	ldr	r3, [sp, #24]
 801a682:	ebaa 0303 	sub.w	r3, sl, r3
 801a686:	4599      	cmp	r9, r3
 801a688:	bfa8      	it	ge
 801a68a:	4699      	movge	r9, r3
 801a68c:	f1b9 0f00 	cmp.w	r9, #0
 801a690:	dc33      	bgt.n	801a6fa <_printf_float+0x396>
 801a692:	f04f 0800 	mov.w	r8, #0
 801a696:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a69a:	f104 0b1a 	add.w	fp, r4, #26
 801a69e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a6a0:	ebaa 0303 	sub.w	r3, sl, r3
 801a6a4:	eba3 0309 	sub.w	r3, r3, r9
 801a6a8:	4543      	cmp	r3, r8
 801a6aa:	f77f af79 	ble.w	801a5a0 <_printf_float+0x23c>
 801a6ae:	2301      	movs	r3, #1
 801a6b0:	465a      	mov	r2, fp
 801a6b2:	4631      	mov	r1, r6
 801a6b4:	4628      	mov	r0, r5
 801a6b6:	47b8      	blx	r7
 801a6b8:	3001      	adds	r0, #1
 801a6ba:	f43f aeae 	beq.w	801a41a <_printf_float+0xb6>
 801a6be:	f108 0801 	add.w	r8, r8, #1
 801a6c2:	e7ec      	b.n	801a69e <_printf_float+0x33a>
 801a6c4:	4642      	mov	r2, r8
 801a6c6:	4631      	mov	r1, r6
 801a6c8:	4628      	mov	r0, r5
 801a6ca:	47b8      	blx	r7
 801a6cc:	3001      	adds	r0, #1
 801a6ce:	d1c2      	bne.n	801a656 <_printf_float+0x2f2>
 801a6d0:	e6a3      	b.n	801a41a <_printf_float+0xb6>
 801a6d2:	2301      	movs	r3, #1
 801a6d4:	4631      	mov	r1, r6
 801a6d6:	4628      	mov	r0, r5
 801a6d8:	9206      	str	r2, [sp, #24]
 801a6da:	47b8      	blx	r7
 801a6dc:	3001      	adds	r0, #1
 801a6de:	f43f ae9c 	beq.w	801a41a <_printf_float+0xb6>
 801a6e2:	9a06      	ldr	r2, [sp, #24]
 801a6e4:	f10b 0b01 	add.w	fp, fp, #1
 801a6e8:	e7bb      	b.n	801a662 <_printf_float+0x2fe>
 801a6ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a6ee:	4631      	mov	r1, r6
 801a6f0:	4628      	mov	r0, r5
 801a6f2:	47b8      	blx	r7
 801a6f4:	3001      	adds	r0, #1
 801a6f6:	d1c0      	bne.n	801a67a <_printf_float+0x316>
 801a6f8:	e68f      	b.n	801a41a <_printf_float+0xb6>
 801a6fa:	9a06      	ldr	r2, [sp, #24]
 801a6fc:	464b      	mov	r3, r9
 801a6fe:	4442      	add	r2, r8
 801a700:	4631      	mov	r1, r6
 801a702:	4628      	mov	r0, r5
 801a704:	47b8      	blx	r7
 801a706:	3001      	adds	r0, #1
 801a708:	d1c3      	bne.n	801a692 <_printf_float+0x32e>
 801a70a:	e686      	b.n	801a41a <_printf_float+0xb6>
 801a70c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801a710:	f1ba 0f01 	cmp.w	sl, #1
 801a714:	dc01      	bgt.n	801a71a <_printf_float+0x3b6>
 801a716:	07db      	lsls	r3, r3, #31
 801a718:	d536      	bpl.n	801a788 <_printf_float+0x424>
 801a71a:	2301      	movs	r3, #1
 801a71c:	4642      	mov	r2, r8
 801a71e:	4631      	mov	r1, r6
 801a720:	4628      	mov	r0, r5
 801a722:	47b8      	blx	r7
 801a724:	3001      	adds	r0, #1
 801a726:	f43f ae78 	beq.w	801a41a <_printf_float+0xb6>
 801a72a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a72e:	4631      	mov	r1, r6
 801a730:	4628      	mov	r0, r5
 801a732:	47b8      	blx	r7
 801a734:	3001      	adds	r0, #1
 801a736:	f43f ae70 	beq.w	801a41a <_printf_float+0xb6>
 801a73a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801a73e:	2200      	movs	r2, #0
 801a740:	2300      	movs	r3, #0
 801a742:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a746:	f7e6 f9a7 	bl	8000a98 <__aeabi_dcmpeq>
 801a74a:	b9c0      	cbnz	r0, 801a77e <_printf_float+0x41a>
 801a74c:	4653      	mov	r3, sl
 801a74e:	f108 0201 	add.w	r2, r8, #1
 801a752:	4631      	mov	r1, r6
 801a754:	4628      	mov	r0, r5
 801a756:	47b8      	blx	r7
 801a758:	3001      	adds	r0, #1
 801a75a:	d10c      	bne.n	801a776 <_printf_float+0x412>
 801a75c:	e65d      	b.n	801a41a <_printf_float+0xb6>
 801a75e:	2301      	movs	r3, #1
 801a760:	465a      	mov	r2, fp
 801a762:	4631      	mov	r1, r6
 801a764:	4628      	mov	r0, r5
 801a766:	47b8      	blx	r7
 801a768:	3001      	adds	r0, #1
 801a76a:	f43f ae56 	beq.w	801a41a <_printf_float+0xb6>
 801a76e:	f108 0801 	add.w	r8, r8, #1
 801a772:	45d0      	cmp	r8, sl
 801a774:	dbf3      	blt.n	801a75e <_printf_float+0x3fa>
 801a776:	464b      	mov	r3, r9
 801a778:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801a77c:	e6df      	b.n	801a53e <_printf_float+0x1da>
 801a77e:	f04f 0800 	mov.w	r8, #0
 801a782:	f104 0b1a 	add.w	fp, r4, #26
 801a786:	e7f4      	b.n	801a772 <_printf_float+0x40e>
 801a788:	2301      	movs	r3, #1
 801a78a:	4642      	mov	r2, r8
 801a78c:	e7e1      	b.n	801a752 <_printf_float+0x3ee>
 801a78e:	2301      	movs	r3, #1
 801a790:	464a      	mov	r2, r9
 801a792:	4631      	mov	r1, r6
 801a794:	4628      	mov	r0, r5
 801a796:	47b8      	blx	r7
 801a798:	3001      	adds	r0, #1
 801a79a:	f43f ae3e 	beq.w	801a41a <_printf_float+0xb6>
 801a79e:	f108 0801 	add.w	r8, r8, #1
 801a7a2:	68e3      	ldr	r3, [r4, #12]
 801a7a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801a7a6:	1a5b      	subs	r3, r3, r1
 801a7a8:	4543      	cmp	r3, r8
 801a7aa:	dcf0      	bgt.n	801a78e <_printf_float+0x42a>
 801a7ac:	e6fc      	b.n	801a5a8 <_printf_float+0x244>
 801a7ae:	f04f 0800 	mov.w	r8, #0
 801a7b2:	f104 0919 	add.w	r9, r4, #25
 801a7b6:	e7f4      	b.n	801a7a2 <_printf_float+0x43e>

0801a7b8 <_printf_common>:
 801a7b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a7bc:	4616      	mov	r6, r2
 801a7be:	4698      	mov	r8, r3
 801a7c0:	688a      	ldr	r2, [r1, #8]
 801a7c2:	690b      	ldr	r3, [r1, #16]
 801a7c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a7c8:	4293      	cmp	r3, r2
 801a7ca:	bfb8      	it	lt
 801a7cc:	4613      	movlt	r3, r2
 801a7ce:	6033      	str	r3, [r6, #0]
 801a7d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a7d4:	4607      	mov	r7, r0
 801a7d6:	460c      	mov	r4, r1
 801a7d8:	b10a      	cbz	r2, 801a7de <_printf_common+0x26>
 801a7da:	3301      	adds	r3, #1
 801a7dc:	6033      	str	r3, [r6, #0]
 801a7de:	6823      	ldr	r3, [r4, #0]
 801a7e0:	0699      	lsls	r1, r3, #26
 801a7e2:	bf42      	ittt	mi
 801a7e4:	6833      	ldrmi	r3, [r6, #0]
 801a7e6:	3302      	addmi	r3, #2
 801a7e8:	6033      	strmi	r3, [r6, #0]
 801a7ea:	6825      	ldr	r5, [r4, #0]
 801a7ec:	f015 0506 	ands.w	r5, r5, #6
 801a7f0:	d106      	bne.n	801a800 <_printf_common+0x48>
 801a7f2:	f104 0a19 	add.w	sl, r4, #25
 801a7f6:	68e3      	ldr	r3, [r4, #12]
 801a7f8:	6832      	ldr	r2, [r6, #0]
 801a7fa:	1a9b      	subs	r3, r3, r2
 801a7fc:	42ab      	cmp	r3, r5
 801a7fe:	dc26      	bgt.n	801a84e <_printf_common+0x96>
 801a800:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a804:	6822      	ldr	r2, [r4, #0]
 801a806:	3b00      	subs	r3, #0
 801a808:	bf18      	it	ne
 801a80a:	2301      	movne	r3, #1
 801a80c:	0692      	lsls	r2, r2, #26
 801a80e:	d42b      	bmi.n	801a868 <_printf_common+0xb0>
 801a810:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a814:	4641      	mov	r1, r8
 801a816:	4638      	mov	r0, r7
 801a818:	47c8      	blx	r9
 801a81a:	3001      	adds	r0, #1
 801a81c:	d01e      	beq.n	801a85c <_printf_common+0xa4>
 801a81e:	6823      	ldr	r3, [r4, #0]
 801a820:	6922      	ldr	r2, [r4, #16]
 801a822:	f003 0306 	and.w	r3, r3, #6
 801a826:	2b04      	cmp	r3, #4
 801a828:	bf02      	ittt	eq
 801a82a:	68e5      	ldreq	r5, [r4, #12]
 801a82c:	6833      	ldreq	r3, [r6, #0]
 801a82e:	1aed      	subeq	r5, r5, r3
 801a830:	68a3      	ldr	r3, [r4, #8]
 801a832:	bf0c      	ite	eq
 801a834:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a838:	2500      	movne	r5, #0
 801a83a:	4293      	cmp	r3, r2
 801a83c:	bfc4      	itt	gt
 801a83e:	1a9b      	subgt	r3, r3, r2
 801a840:	18ed      	addgt	r5, r5, r3
 801a842:	2600      	movs	r6, #0
 801a844:	341a      	adds	r4, #26
 801a846:	42b5      	cmp	r5, r6
 801a848:	d11a      	bne.n	801a880 <_printf_common+0xc8>
 801a84a:	2000      	movs	r0, #0
 801a84c:	e008      	b.n	801a860 <_printf_common+0xa8>
 801a84e:	2301      	movs	r3, #1
 801a850:	4652      	mov	r2, sl
 801a852:	4641      	mov	r1, r8
 801a854:	4638      	mov	r0, r7
 801a856:	47c8      	blx	r9
 801a858:	3001      	adds	r0, #1
 801a85a:	d103      	bne.n	801a864 <_printf_common+0xac>
 801a85c:	f04f 30ff 	mov.w	r0, #4294967295
 801a860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a864:	3501      	adds	r5, #1
 801a866:	e7c6      	b.n	801a7f6 <_printf_common+0x3e>
 801a868:	18e1      	adds	r1, r4, r3
 801a86a:	1c5a      	adds	r2, r3, #1
 801a86c:	2030      	movs	r0, #48	@ 0x30
 801a86e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a872:	4422      	add	r2, r4
 801a874:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a878:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801a87c:	3302      	adds	r3, #2
 801a87e:	e7c7      	b.n	801a810 <_printf_common+0x58>
 801a880:	2301      	movs	r3, #1
 801a882:	4622      	mov	r2, r4
 801a884:	4641      	mov	r1, r8
 801a886:	4638      	mov	r0, r7
 801a888:	47c8      	blx	r9
 801a88a:	3001      	adds	r0, #1
 801a88c:	d0e6      	beq.n	801a85c <_printf_common+0xa4>
 801a88e:	3601      	adds	r6, #1
 801a890:	e7d9      	b.n	801a846 <_printf_common+0x8e>
	...

0801a894 <_printf_i>:
 801a894:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a898:	7e0f      	ldrb	r7, [r1, #24]
 801a89a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a89c:	2f78      	cmp	r7, #120	@ 0x78
 801a89e:	4691      	mov	r9, r2
 801a8a0:	4680      	mov	r8, r0
 801a8a2:	460c      	mov	r4, r1
 801a8a4:	469a      	mov	sl, r3
 801a8a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801a8aa:	d807      	bhi.n	801a8bc <_printf_i+0x28>
 801a8ac:	2f62      	cmp	r7, #98	@ 0x62
 801a8ae:	d80a      	bhi.n	801a8c6 <_printf_i+0x32>
 801a8b0:	2f00      	cmp	r7, #0
 801a8b2:	f000 80d1 	beq.w	801aa58 <_printf_i+0x1c4>
 801a8b6:	2f58      	cmp	r7, #88	@ 0x58
 801a8b8:	f000 80b8 	beq.w	801aa2c <_printf_i+0x198>
 801a8bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a8c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801a8c4:	e03a      	b.n	801a93c <_printf_i+0xa8>
 801a8c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801a8ca:	2b15      	cmp	r3, #21
 801a8cc:	d8f6      	bhi.n	801a8bc <_printf_i+0x28>
 801a8ce:	a101      	add	r1, pc, #4	@ (adr r1, 801a8d4 <_printf_i+0x40>)
 801a8d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a8d4:	0801a92d 	.word	0x0801a92d
 801a8d8:	0801a941 	.word	0x0801a941
 801a8dc:	0801a8bd 	.word	0x0801a8bd
 801a8e0:	0801a8bd 	.word	0x0801a8bd
 801a8e4:	0801a8bd 	.word	0x0801a8bd
 801a8e8:	0801a8bd 	.word	0x0801a8bd
 801a8ec:	0801a941 	.word	0x0801a941
 801a8f0:	0801a8bd 	.word	0x0801a8bd
 801a8f4:	0801a8bd 	.word	0x0801a8bd
 801a8f8:	0801a8bd 	.word	0x0801a8bd
 801a8fc:	0801a8bd 	.word	0x0801a8bd
 801a900:	0801aa3f 	.word	0x0801aa3f
 801a904:	0801a96b 	.word	0x0801a96b
 801a908:	0801a9f9 	.word	0x0801a9f9
 801a90c:	0801a8bd 	.word	0x0801a8bd
 801a910:	0801a8bd 	.word	0x0801a8bd
 801a914:	0801aa61 	.word	0x0801aa61
 801a918:	0801a8bd 	.word	0x0801a8bd
 801a91c:	0801a96b 	.word	0x0801a96b
 801a920:	0801a8bd 	.word	0x0801a8bd
 801a924:	0801a8bd 	.word	0x0801a8bd
 801a928:	0801aa01 	.word	0x0801aa01
 801a92c:	6833      	ldr	r3, [r6, #0]
 801a92e:	1d1a      	adds	r2, r3, #4
 801a930:	681b      	ldr	r3, [r3, #0]
 801a932:	6032      	str	r2, [r6, #0]
 801a934:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a938:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a93c:	2301      	movs	r3, #1
 801a93e:	e09c      	b.n	801aa7a <_printf_i+0x1e6>
 801a940:	6833      	ldr	r3, [r6, #0]
 801a942:	6820      	ldr	r0, [r4, #0]
 801a944:	1d19      	adds	r1, r3, #4
 801a946:	6031      	str	r1, [r6, #0]
 801a948:	0606      	lsls	r6, r0, #24
 801a94a:	d501      	bpl.n	801a950 <_printf_i+0xbc>
 801a94c:	681d      	ldr	r5, [r3, #0]
 801a94e:	e003      	b.n	801a958 <_printf_i+0xc4>
 801a950:	0645      	lsls	r5, r0, #25
 801a952:	d5fb      	bpl.n	801a94c <_printf_i+0xb8>
 801a954:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a958:	2d00      	cmp	r5, #0
 801a95a:	da03      	bge.n	801a964 <_printf_i+0xd0>
 801a95c:	232d      	movs	r3, #45	@ 0x2d
 801a95e:	426d      	negs	r5, r5
 801a960:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a964:	4858      	ldr	r0, [pc, #352]	@ (801aac8 <_printf_i+0x234>)
 801a966:	230a      	movs	r3, #10
 801a968:	e011      	b.n	801a98e <_printf_i+0xfa>
 801a96a:	6821      	ldr	r1, [r4, #0]
 801a96c:	6833      	ldr	r3, [r6, #0]
 801a96e:	0608      	lsls	r0, r1, #24
 801a970:	f853 5b04 	ldr.w	r5, [r3], #4
 801a974:	d402      	bmi.n	801a97c <_printf_i+0xe8>
 801a976:	0649      	lsls	r1, r1, #25
 801a978:	bf48      	it	mi
 801a97a:	b2ad      	uxthmi	r5, r5
 801a97c:	2f6f      	cmp	r7, #111	@ 0x6f
 801a97e:	4852      	ldr	r0, [pc, #328]	@ (801aac8 <_printf_i+0x234>)
 801a980:	6033      	str	r3, [r6, #0]
 801a982:	bf14      	ite	ne
 801a984:	230a      	movne	r3, #10
 801a986:	2308      	moveq	r3, #8
 801a988:	2100      	movs	r1, #0
 801a98a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a98e:	6866      	ldr	r6, [r4, #4]
 801a990:	60a6      	str	r6, [r4, #8]
 801a992:	2e00      	cmp	r6, #0
 801a994:	db05      	blt.n	801a9a2 <_printf_i+0x10e>
 801a996:	6821      	ldr	r1, [r4, #0]
 801a998:	432e      	orrs	r6, r5
 801a99a:	f021 0104 	bic.w	r1, r1, #4
 801a99e:	6021      	str	r1, [r4, #0]
 801a9a0:	d04b      	beq.n	801aa3a <_printf_i+0x1a6>
 801a9a2:	4616      	mov	r6, r2
 801a9a4:	fbb5 f1f3 	udiv	r1, r5, r3
 801a9a8:	fb03 5711 	mls	r7, r3, r1, r5
 801a9ac:	5dc7      	ldrb	r7, [r0, r7]
 801a9ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a9b2:	462f      	mov	r7, r5
 801a9b4:	42bb      	cmp	r3, r7
 801a9b6:	460d      	mov	r5, r1
 801a9b8:	d9f4      	bls.n	801a9a4 <_printf_i+0x110>
 801a9ba:	2b08      	cmp	r3, #8
 801a9bc:	d10b      	bne.n	801a9d6 <_printf_i+0x142>
 801a9be:	6823      	ldr	r3, [r4, #0]
 801a9c0:	07df      	lsls	r7, r3, #31
 801a9c2:	d508      	bpl.n	801a9d6 <_printf_i+0x142>
 801a9c4:	6923      	ldr	r3, [r4, #16]
 801a9c6:	6861      	ldr	r1, [r4, #4]
 801a9c8:	4299      	cmp	r1, r3
 801a9ca:	bfde      	ittt	le
 801a9cc:	2330      	movle	r3, #48	@ 0x30
 801a9ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a9d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 801a9d6:	1b92      	subs	r2, r2, r6
 801a9d8:	6122      	str	r2, [r4, #16]
 801a9da:	f8cd a000 	str.w	sl, [sp]
 801a9de:	464b      	mov	r3, r9
 801a9e0:	aa03      	add	r2, sp, #12
 801a9e2:	4621      	mov	r1, r4
 801a9e4:	4640      	mov	r0, r8
 801a9e6:	f7ff fee7 	bl	801a7b8 <_printf_common>
 801a9ea:	3001      	adds	r0, #1
 801a9ec:	d14a      	bne.n	801aa84 <_printf_i+0x1f0>
 801a9ee:	f04f 30ff 	mov.w	r0, #4294967295
 801a9f2:	b004      	add	sp, #16
 801a9f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a9f8:	6823      	ldr	r3, [r4, #0]
 801a9fa:	f043 0320 	orr.w	r3, r3, #32
 801a9fe:	6023      	str	r3, [r4, #0]
 801aa00:	4832      	ldr	r0, [pc, #200]	@ (801aacc <_printf_i+0x238>)
 801aa02:	2778      	movs	r7, #120	@ 0x78
 801aa04:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801aa08:	6823      	ldr	r3, [r4, #0]
 801aa0a:	6831      	ldr	r1, [r6, #0]
 801aa0c:	061f      	lsls	r7, r3, #24
 801aa0e:	f851 5b04 	ldr.w	r5, [r1], #4
 801aa12:	d402      	bmi.n	801aa1a <_printf_i+0x186>
 801aa14:	065f      	lsls	r7, r3, #25
 801aa16:	bf48      	it	mi
 801aa18:	b2ad      	uxthmi	r5, r5
 801aa1a:	6031      	str	r1, [r6, #0]
 801aa1c:	07d9      	lsls	r1, r3, #31
 801aa1e:	bf44      	itt	mi
 801aa20:	f043 0320 	orrmi.w	r3, r3, #32
 801aa24:	6023      	strmi	r3, [r4, #0]
 801aa26:	b11d      	cbz	r5, 801aa30 <_printf_i+0x19c>
 801aa28:	2310      	movs	r3, #16
 801aa2a:	e7ad      	b.n	801a988 <_printf_i+0xf4>
 801aa2c:	4826      	ldr	r0, [pc, #152]	@ (801aac8 <_printf_i+0x234>)
 801aa2e:	e7e9      	b.n	801aa04 <_printf_i+0x170>
 801aa30:	6823      	ldr	r3, [r4, #0]
 801aa32:	f023 0320 	bic.w	r3, r3, #32
 801aa36:	6023      	str	r3, [r4, #0]
 801aa38:	e7f6      	b.n	801aa28 <_printf_i+0x194>
 801aa3a:	4616      	mov	r6, r2
 801aa3c:	e7bd      	b.n	801a9ba <_printf_i+0x126>
 801aa3e:	6833      	ldr	r3, [r6, #0]
 801aa40:	6825      	ldr	r5, [r4, #0]
 801aa42:	6961      	ldr	r1, [r4, #20]
 801aa44:	1d18      	adds	r0, r3, #4
 801aa46:	6030      	str	r0, [r6, #0]
 801aa48:	062e      	lsls	r6, r5, #24
 801aa4a:	681b      	ldr	r3, [r3, #0]
 801aa4c:	d501      	bpl.n	801aa52 <_printf_i+0x1be>
 801aa4e:	6019      	str	r1, [r3, #0]
 801aa50:	e002      	b.n	801aa58 <_printf_i+0x1c4>
 801aa52:	0668      	lsls	r0, r5, #25
 801aa54:	d5fb      	bpl.n	801aa4e <_printf_i+0x1ba>
 801aa56:	8019      	strh	r1, [r3, #0]
 801aa58:	2300      	movs	r3, #0
 801aa5a:	6123      	str	r3, [r4, #16]
 801aa5c:	4616      	mov	r6, r2
 801aa5e:	e7bc      	b.n	801a9da <_printf_i+0x146>
 801aa60:	6833      	ldr	r3, [r6, #0]
 801aa62:	1d1a      	adds	r2, r3, #4
 801aa64:	6032      	str	r2, [r6, #0]
 801aa66:	681e      	ldr	r6, [r3, #0]
 801aa68:	6862      	ldr	r2, [r4, #4]
 801aa6a:	2100      	movs	r1, #0
 801aa6c:	4630      	mov	r0, r6
 801aa6e:	f7e5 fb97 	bl	80001a0 <memchr>
 801aa72:	b108      	cbz	r0, 801aa78 <_printf_i+0x1e4>
 801aa74:	1b80      	subs	r0, r0, r6
 801aa76:	6060      	str	r0, [r4, #4]
 801aa78:	6863      	ldr	r3, [r4, #4]
 801aa7a:	6123      	str	r3, [r4, #16]
 801aa7c:	2300      	movs	r3, #0
 801aa7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801aa82:	e7aa      	b.n	801a9da <_printf_i+0x146>
 801aa84:	6923      	ldr	r3, [r4, #16]
 801aa86:	4632      	mov	r2, r6
 801aa88:	4649      	mov	r1, r9
 801aa8a:	4640      	mov	r0, r8
 801aa8c:	47d0      	blx	sl
 801aa8e:	3001      	adds	r0, #1
 801aa90:	d0ad      	beq.n	801a9ee <_printf_i+0x15a>
 801aa92:	6823      	ldr	r3, [r4, #0]
 801aa94:	079b      	lsls	r3, r3, #30
 801aa96:	d413      	bmi.n	801aac0 <_printf_i+0x22c>
 801aa98:	68e0      	ldr	r0, [r4, #12]
 801aa9a:	9b03      	ldr	r3, [sp, #12]
 801aa9c:	4298      	cmp	r0, r3
 801aa9e:	bfb8      	it	lt
 801aaa0:	4618      	movlt	r0, r3
 801aaa2:	e7a6      	b.n	801a9f2 <_printf_i+0x15e>
 801aaa4:	2301      	movs	r3, #1
 801aaa6:	4632      	mov	r2, r6
 801aaa8:	4649      	mov	r1, r9
 801aaaa:	4640      	mov	r0, r8
 801aaac:	47d0      	blx	sl
 801aaae:	3001      	adds	r0, #1
 801aab0:	d09d      	beq.n	801a9ee <_printf_i+0x15a>
 801aab2:	3501      	adds	r5, #1
 801aab4:	68e3      	ldr	r3, [r4, #12]
 801aab6:	9903      	ldr	r1, [sp, #12]
 801aab8:	1a5b      	subs	r3, r3, r1
 801aaba:	42ab      	cmp	r3, r5
 801aabc:	dcf2      	bgt.n	801aaa4 <_printf_i+0x210>
 801aabe:	e7eb      	b.n	801aa98 <_printf_i+0x204>
 801aac0:	2500      	movs	r5, #0
 801aac2:	f104 0619 	add.w	r6, r4, #25
 801aac6:	e7f5      	b.n	801aab4 <_printf_i+0x220>
 801aac8:	0801e58b 	.word	0x0801e58b
 801aacc:	0801e59c 	.word	0x0801e59c

0801aad0 <std>:
 801aad0:	2300      	movs	r3, #0
 801aad2:	b510      	push	{r4, lr}
 801aad4:	4604      	mov	r4, r0
 801aad6:	e9c0 3300 	strd	r3, r3, [r0]
 801aada:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801aade:	6083      	str	r3, [r0, #8]
 801aae0:	8181      	strh	r1, [r0, #12]
 801aae2:	6643      	str	r3, [r0, #100]	@ 0x64
 801aae4:	81c2      	strh	r2, [r0, #14]
 801aae6:	6183      	str	r3, [r0, #24]
 801aae8:	4619      	mov	r1, r3
 801aaea:	2208      	movs	r2, #8
 801aaec:	305c      	adds	r0, #92	@ 0x5c
 801aaee:	f000 f9d9 	bl	801aea4 <memset>
 801aaf2:	4b0d      	ldr	r3, [pc, #52]	@ (801ab28 <std+0x58>)
 801aaf4:	6263      	str	r3, [r4, #36]	@ 0x24
 801aaf6:	4b0d      	ldr	r3, [pc, #52]	@ (801ab2c <std+0x5c>)
 801aaf8:	62a3      	str	r3, [r4, #40]	@ 0x28
 801aafa:	4b0d      	ldr	r3, [pc, #52]	@ (801ab30 <std+0x60>)
 801aafc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801aafe:	4b0d      	ldr	r3, [pc, #52]	@ (801ab34 <std+0x64>)
 801ab00:	6323      	str	r3, [r4, #48]	@ 0x30
 801ab02:	4b0d      	ldr	r3, [pc, #52]	@ (801ab38 <std+0x68>)
 801ab04:	6224      	str	r4, [r4, #32]
 801ab06:	429c      	cmp	r4, r3
 801ab08:	d006      	beq.n	801ab18 <std+0x48>
 801ab0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801ab0e:	4294      	cmp	r4, r2
 801ab10:	d002      	beq.n	801ab18 <std+0x48>
 801ab12:	33d0      	adds	r3, #208	@ 0xd0
 801ab14:	429c      	cmp	r4, r3
 801ab16:	d105      	bne.n	801ab24 <std+0x54>
 801ab18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801ab1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ab20:	f000 baa0 	b.w	801b064 <__retarget_lock_init_recursive>
 801ab24:	bd10      	pop	{r4, pc}
 801ab26:	bf00      	nop
 801ab28:	0801acc1 	.word	0x0801acc1
 801ab2c:	0801ace3 	.word	0x0801ace3
 801ab30:	0801ad1b 	.word	0x0801ad1b
 801ab34:	0801ad3f 	.word	0x0801ad3f
 801ab38:	200019e8 	.word	0x200019e8

0801ab3c <stdio_exit_handler>:
 801ab3c:	4a02      	ldr	r2, [pc, #8]	@ (801ab48 <stdio_exit_handler+0xc>)
 801ab3e:	4903      	ldr	r1, [pc, #12]	@ (801ab4c <stdio_exit_handler+0x10>)
 801ab40:	4803      	ldr	r0, [pc, #12]	@ (801ab50 <stdio_exit_handler+0x14>)
 801ab42:	f000 b869 	b.w	801ac18 <_fwalk_sglue>
 801ab46:	bf00      	nop
 801ab48:	20000124 	.word	0x20000124
 801ab4c:	0801cb0d 	.word	0x0801cb0d
 801ab50:	20000134 	.word	0x20000134

0801ab54 <cleanup_stdio>:
 801ab54:	6841      	ldr	r1, [r0, #4]
 801ab56:	4b0c      	ldr	r3, [pc, #48]	@ (801ab88 <cleanup_stdio+0x34>)
 801ab58:	4299      	cmp	r1, r3
 801ab5a:	b510      	push	{r4, lr}
 801ab5c:	4604      	mov	r4, r0
 801ab5e:	d001      	beq.n	801ab64 <cleanup_stdio+0x10>
 801ab60:	f001 ffd4 	bl	801cb0c <_fflush_r>
 801ab64:	68a1      	ldr	r1, [r4, #8]
 801ab66:	4b09      	ldr	r3, [pc, #36]	@ (801ab8c <cleanup_stdio+0x38>)
 801ab68:	4299      	cmp	r1, r3
 801ab6a:	d002      	beq.n	801ab72 <cleanup_stdio+0x1e>
 801ab6c:	4620      	mov	r0, r4
 801ab6e:	f001 ffcd 	bl	801cb0c <_fflush_r>
 801ab72:	68e1      	ldr	r1, [r4, #12]
 801ab74:	4b06      	ldr	r3, [pc, #24]	@ (801ab90 <cleanup_stdio+0x3c>)
 801ab76:	4299      	cmp	r1, r3
 801ab78:	d004      	beq.n	801ab84 <cleanup_stdio+0x30>
 801ab7a:	4620      	mov	r0, r4
 801ab7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ab80:	f001 bfc4 	b.w	801cb0c <_fflush_r>
 801ab84:	bd10      	pop	{r4, pc}
 801ab86:	bf00      	nop
 801ab88:	200019e8 	.word	0x200019e8
 801ab8c:	20001a50 	.word	0x20001a50
 801ab90:	20001ab8 	.word	0x20001ab8

0801ab94 <global_stdio_init.part.0>:
 801ab94:	b510      	push	{r4, lr}
 801ab96:	4b0b      	ldr	r3, [pc, #44]	@ (801abc4 <global_stdio_init.part.0+0x30>)
 801ab98:	4c0b      	ldr	r4, [pc, #44]	@ (801abc8 <global_stdio_init.part.0+0x34>)
 801ab9a:	4a0c      	ldr	r2, [pc, #48]	@ (801abcc <global_stdio_init.part.0+0x38>)
 801ab9c:	601a      	str	r2, [r3, #0]
 801ab9e:	4620      	mov	r0, r4
 801aba0:	2200      	movs	r2, #0
 801aba2:	2104      	movs	r1, #4
 801aba4:	f7ff ff94 	bl	801aad0 <std>
 801aba8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801abac:	2201      	movs	r2, #1
 801abae:	2109      	movs	r1, #9
 801abb0:	f7ff ff8e 	bl	801aad0 <std>
 801abb4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801abb8:	2202      	movs	r2, #2
 801abba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801abbe:	2112      	movs	r1, #18
 801abc0:	f7ff bf86 	b.w	801aad0 <std>
 801abc4:	20001b20 	.word	0x20001b20
 801abc8:	200019e8 	.word	0x200019e8
 801abcc:	0801ab3d 	.word	0x0801ab3d

0801abd0 <__sfp_lock_acquire>:
 801abd0:	4801      	ldr	r0, [pc, #4]	@ (801abd8 <__sfp_lock_acquire+0x8>)
 801abd2:	f000 ba48 	b.w	801b066 <__retarget_lock_acquire_recursive>
 801abd6:	bf00      	nop
 801abd8:	20001b29 	.word	0x20001b29

0801abdc <__sfp_lock_release>:
 801abdc:	4801      	ldr	r0, [pc, #4]	@ (801abe4 <__sfp_lock_release+0x8>)
 801abde:	f000 ba43 	b.w	801b068 <__retarget_lock_release_recursive>
 801abe2:	bf00      	nop
 801abe4:	20001b29 	.word	0x20001b29

0801abe8 <__sinit>:
 801abe8:	b510      	push	{r4, lr}
 801abea:	4604      	mov	r4, r0
 801abec:	f7ff fff0 	bl	801abd0 <__sfp_lock_acquire>
 801abf0:	6a23      	ldr	r3, [r4, #32]
 801abf2:	b11b      	cbz	r3, 801abfc <__sinit+0x14>
 801abf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801abf8:	f7ff bff0 	b.w	801abdc <__sfp_lock_release>
 801abfc:	4b04      	ldr	r3, [pc, #16]	@ (801ac10 <__sinit+0x28>)
 801abfe:	6223      	str	r3, [r4, #32]
 801ac00:	4b04      	ldr	r3, [pc, #16]	@ (801ac14 <__sinit+0x2c>)
 801ac02:	681b      	ldr	r3, [r3, #0]
 801ac04:	2b00      	cmp	r3, #0
 801ac06:	d1f5      	bne.n	801abf4 <__sinit+0xc>
 801ac08:	f7ff ffc4 	bl	801ab94 <global_stdio_init.part.0>
 801ac0c:	e7f2      	b.n	801abf4 <__sinit+0xc>
 801ac0e:	bf00      	nop
 801ac10:	0801ab55 	.word	0x0801ab55
 801ac14:	20001b20 	.word	0x20001b20

0801ac18 <_fwalk_sglue>:
 801ac18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ac1c:	4607      	mov	r7, r0
 801ac1e:	4688      	mov	r8, r1
 801ac20:	4614      	mov	r4, r2
 801ac22:	2600      	movs	r6, #0
 801ac24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ac28:	f1b9 0901 	subs.w	r9, r9, #1
 801ac2c:	d505      	bpl.n	801ac3a <_fwalk_sglue+0x22>
 801ac2e:	6824      	ldr	r4, [r4, #0]
 801ac30:	2c00      	cmp	r4, #0
 801ac32:	d1f7      	bne.n	801ac24 <_fwalk_sglue+0xc>
 801ac34:	4630      	mov	r0, r6
 801ac36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ac3a:	89ab      	ldrh	r3, [r5, #12]
 801ac3c:	2b01      	cmp	r3, #1
 801ac3e:	d907      	bls.n	801ac50 <_fwalk_sglue+0x38>
 801ac40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ac44:	3301      	adds	r3, #1
 801ac46:	d003      	beq.n	801ac50 <_fwalk_sglue+0x38>
 801ac48:	4629      	mov	r1, r5
 801ac4a:	4638      	mov	r0, r7
 801ac4c:	47c0      	blx	r8
 801ac4e:	4306      	orrs	r6, r0
 801ac50:	3568      	adds	r5, #104	@ 0x68
 801ac52:	e7e9      	b.n	801ac28 <_fwalk_sglue+0x10>

0801ac54 <sniprintf>:
 801ac54:	b40c      	push	{r2, r3}
 801ac56:	b530      	push	{r4, r5, lr}
 801ac58:	4b18      	ldr	r3, [pc, #96]	@ (801acbc <sniprintf+0x68>)
 801ac5a:	1e0c      	subs	r4, r1, #0
 801ac5c:	681d      	ldr	r5, [r3, #0]
 801ac5e:	b09d      	sub	sp, #116	@ 0x74
 801ac60:	da08      	bge.n	801ac74 <sniprintf+0x20>
 801ac62:	238b      	movs	r3, #139	@ 0x8b
 801ac64:	602b      	str	r3, [r5, #0]
 801ac66:	f04f 30ff 	mov.w	r0, #4294967295
 801ac6a:	b01d      	add	sp, #116	@ 0x74
 801ac6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ac70:	b002      	add	sp, #8
 801ac72:	4770      	bx	lr
 801ac74:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801ac78:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ac7c:	f04f 0300 	mov.w	r3, #0
 801ac80:	931b      	str	r3, [sp, #108]	@ 0x6c
 801ac82:	bf14      	ite	ne
 801ac84:	f104 33ff 	addne.w	r3, r4, #4294967295
 801ac88:	4623      	moveq	r3, r4
 801ac8a:	9304      	str	r3, [sp, #16]
 801ac8c:	9307      	str	r3, [sp, #28]
 801ac8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ac92:	9002      	str	r0, [sp, #8]
 801ac94:	9006      	str	r0, [sp, #24]
 801ac96:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ac9a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801ac9c:	ab21      	add	r3, sp, #132	@ 0x84
 801ac9e:	a902      	add	r1, sp, #8
 801aca0:	4628      	mov	r0, r5
 801aca2:	9301      	str	r3, [sp, #4]
 801aca4:	f001 fc70 	bl	801c588 <_svfiprintf_r>
 801aca8:	1c43      	adds	r3, r0, #1
 801acaa:	bfbc      	itt	lt
 801acac:	238b      	movlt	r3, #139	@ 0x8b
 801acae:	602b      	strlt	r3, [r5, #0]
 801acb0:	2c00      	cmp	r4, #0
 801acb2:	d0da      	beq.n	801ac6a <sniprintf+0x16>
 801acb4:	9b02      	ldr	r3, [sp, #8]
 801acb6:	2200      	movs	r2, #0
 801acb8:	701a      	strb	r2, [r3, #0]
 801acba:	e7d6      	b.n	801ac6a <sniprintf+0x16>
 801acbc:	20000130 	.word	0x20000130

0801acc0 <__sread>:
 801acc0:	b510      	push	{r4, lr}
 801acc2:	460c      	mov	r4, r1
 801acc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801acc8:	f000 f95a 	bl	801af80 <_read_r>
 801accc:	2800      	cmp	r0, #0
 801acce:	bfab      	itete	ge
 801acd0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801acd2:	89a3      	ldrhlt	r3, [r4, #12]
 801acd4:	181b      	addge	r3, r3, r0
 801acd6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801acda:	bfac      	ite	ge
 801acdc:	6563      	strge	r3, [r4, #84]	@ 0x54
 801acde:	81a3      	strhlt	r3, [r4, #12]
 801ace0:	bd10      	pop	{r4, pc}

0801ace2 <__swrite>:
 801ace2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ace6:	461f      	mov	r7, r3
 801ace8:	898b      	ldrh	r3, [r1, #12]
 801acea:	05db      	lsls	r3, r3, #23
 801acec:	4605      	mov	r5, r0
 801acee:	460c      	mov	r4, r1
 801acf0:	4616      	mov	r6, r2
 801acf2:	d505      	bpl.n	801ad00 <__swrite+0x1e>
 801acf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801acf8:	2302      	movs	r3, #2
 801acfa:	2200      	movs	r2, #0
 801acfc:	f000 f92e 	bl	801af5c <_lseek_r>
 801ad00:	89a3      	ldrh	r3, [r4, #12]
 801ad02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ad06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801ad0a:	81a3      	strh	r3, [r4, #12]
 801ad0c:	4632      	mov	r2, r6
 801ad0e:	463b      	mov	r3, r7
 801ad10:	4628      	mov	r0, r5
 801ad12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ad16:	f000 b969 	b.w	801afec <_write_r>

0801ad1a <__sseek>:
 801ad1a:	b510      	push	{r4, lr}
 801ad1c:	460c      	mov	r4, r1
 801ad1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ad22:	f000 f91b 	bl	801af5c <_lseek_r>
 801ad26:	1c43      	adds	r3, r0, #1
 801ad28:	89a3      	ldrh	r3, [r4, #12]
 801ad2a:	bf15      	itete	ne
 801ad2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801ad2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801ad32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801ad36:	81a3      	strheq	r3, [r4, #12]
 801ad38:	bf18      	it	ne
 801ad3a:	81a3      	strhne	r3, [r4, #12]
 801ad3c:	bd10      	pop	{r4, pc}

0801ad3e <__sclose>:
 801ad3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ad42:	f000 b8fb 	b.w	801af3c <_close_r>

0801ad46 <__swbuf_r>:
 801ad46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad48:	460e      	mov	r6, r1
 801ad4a:	4614      	mov	r4, r2
 801ad4c:	4605      	mov	r5, r0
 801ad4e:	b118      	cbz	r0, 801ad58 <__swbuf_r+0x12>
 801ad50:	6a03      	ldr	r3, [r0, #32]
 801ad52:	b90b      	cbnz	r3, 801ad58 <__swbuf_r+0x12>
 801ad54:	f7ff ff48 	bl	801abe8 <__sinit>
 801ad58:	69a3      	ldr	r3, [r4, #24]
 801ad5a:	60a3      	str	r3, [r4, #8]
 801ad5c:	89a3      	ldrh	r3, [r4, #12]
 801ad5e:	071a      	lsls	r2, r3, #28
 801ad60:	d501      	bpl.n	801ad66 <__swbuf_r+0x20>
 801ad62:	6923      	ldr	r3, [r4, #16]
 801ad64:	b943      	cbnz	r3, 801ad78 <__swbuf_r+0x32>
 801ad66:	4621      	mov	r1, r4
 801ad68:	4628      	mov	r0, r5
 801ad6a:	f000 f82b 	bl	801adc4 <__swsetup_r>
 801ad6e:	b118      	cbz	r0, 801ad78 <__swbuf_r+0x32>
 801ad70:	f04f 37ff 	mov.w	r7, #4294967295
 801ad74:	4638      	mov	r0, r7
 801ad76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ad78:	6823      	ldr	r3, [r4, #0]
 801ad7a:	6922      	ldr	r2, [r4, #16]
 801ad7c:	1a98      	subs	r0, r3, r2
 801ad7e:	6963      	ldr	r3, [r4, #20]
 801ad80:	b2f6      	uxtb	r6, r6
 801ad82:	4283      	cmp	r3, r0
 801ad84:	4637      	mov	r7, r6
 801ad86:	dc05      	bgt.n	801ad94 <__swbuf_r+0x4e>
 801ad88:	4621      	mov	r1, r4
 801ad8a:	4628      	mov	r0, r5
 801ad8c:	f001 febe 	bl	801cb0c <_fflush_r>
 801ad90:	2800      	cmp	r0, #0
 801ad92:	d1ed      	bne.n	801ad70 <__swbuf_r+0x2a>
 801ad94:	68a3      	ldr	r3, [r4, #8]
 801ad96:	3b01      	subs	r3, #1
 801ad98:	60a3      	str	r3, [r4, #8]
 801ad9a:	6823      	ldr	r3, [r4, #0]
 801ad9c:	1c5a      	adds	r2, r3, #1
 801ad9e:	6022      	str	r2, [r4, #0]
 801ada0:	701e      	strb	r6, [r3, #0]
 801ada2:	6962      	ldr	r2, [r4, #20]
 801ada4:	1c43      	adds	r3, r0, #1
 801ada6:	429a      	cmp	r2, r3
 801ada8:	d004      	beq.n	801adb4 <__swbuf_r+0x6e>
 801adaa:	89a3      	ldrh	r3, [r4, #12]
 801adac:	07db      	lsls	r3, r3, #31
 801adae:	d5e1      	bpl.n	801ad74 <__swbuf_r+0x2e>
 801adb0:	2e0a      	cmp	r6, #10
 801adb2:	d1df      	bne.n	801ad74 <__swbuf_r+0x2e>
 801adb4:	4621      	mov	r1, r4
 801adb6:	4628      	mov	r0, r5
 801adb8:	f001 fea8 	bl	801cb0c <_fflush_r>
 801adbc:	2800      	cmp	r0, #0
 801adbe:	d0d9      	beq.n	801ad74 <__swbuf_r+0x2e>
 801adc0:	e7d6      	b.n	801ad70 <__swbuf_r+0x2a>
	...

0801adc4 <__swsetup_r>:
 801adc4:	b538      	push	{r3, r4, r5, lr}
 801adc6:	4b29      	ldr	r3, [pc, #164]	@ (801ae6c <__swsetup_r+0xa8>)
 801adc8:	4605      	mov	r5, r0
 801adca:	6818      	ldr	r0, [r3, #0]
 801adcc:	460c      	mov	r4, r1
 801adce:	b118      	cbz	r0, 801add8 <__swsetup_r+0x14>
 801add0:	6a03      	ldr	r3, [r0, #32]
 801add2:	b90b      	cbnz	r3, 801add8 <__swsetup_r+0x14>
 801add4:	f7ff ff08 	bl	801abe8 <__sinit>
 801add8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801addc:	0719      	lsls	r1, r3, #28
 801adde:	d422      	bmi.n	801ae26 <__swsetup_r+0x62>
 801ade0:	06da      	lsls	r2, r3, #27
 801ade2:	d407      	bmi.n	801adf4 <__swsetup_r+0x30>
 801ade4:	2209      	movs	r2, #9
 801ade6:	602a      	str	r2, [r5, #0]
 801ade8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801adec:	81a3      	strh	r3, [r4, #12]
 801adee:	f04f 30ff 	mov.w	r0, #4294967295
 801adf2:	e033      	b.n	801ae5c <__swsetup_r+0x98>
 801adf4:	0758      	lsls	r0, r3, #29
 801adf6:	d512      	bpl.n	801ae1e <__swsetup_r+0x5a>
 801adf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801adfa:	b141      	cbz	r1, 801ae0e <__swsetup_r+0x4a>
 801adfc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ae00:	4299      	cmp	r1, r3
 801ae02:	d002      	beq.n	801ae0a <__swsetup_r+0x46>
 801ae04:	4628      	mov	r0, r5
 801ae06:	f000 ff9f 	bl	801bd48 <_free_r>
 801ae0a:	2300      	movs	r3, #0
 801ae0c:	6363      	str	r3, [r4, #52]	@ 0x34
 801ae0e:	89a3      	ldrh	r3, [r4, #12]
 801ae10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801ae14:	81a3      	strh	r3, [r4, #12]
 801ae16:	2300      	movs	r3, #0
 801ae18:	6063      	str	r3, [r4, #4]
 801ae1a:	6923      	ldr	r3, [r4, #16]
 801ae1c:	6023      	str	r3, [r4, #0]
 801ae1e:	89a3      	ldrh	r3, [r4, #12]
 801ae20:	f043 0308 	orr.w	r3, r3, #8
 801ae24:	81a3      	strh	r3, [r4, #12]
 801ae26:	6923      	ldr	r3, [r4, #16]
 801ae28:	b94b      	cbnz	r3, 801ae3e <__swsetup_r+0x7a>
 801ae2a:	89a3      	ldrh	r3, [r4, #12]
 801ae2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801ae30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ae34:	d003      	beq.n	801ae3e <__swsetup_r+0x7a>
 801ae36:	4621      	mov	r1, r4
 801ae38:	4628      	mov	r0, r5
 801ae3a:	f001 feb5 	bl	801cba8 <__smakebuf_r>
 801ae3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ae42:	f013 0201 	ands.w	r2, r3, #1
 801ae46:	d00a      	beq.n	801ae5e <__swsetup_r+0x9a>
 801ae48:	2200      	movs	r2, #0
 801ae4a:	60a2      	str	r2, [r4, #8]
 801ae4c:	6962      	ldr	r2, [r4, #20]
 801ae4e:	4252      	negs	r2, r2
 801ae50:	61a2      	str	r2, [r4, #24]
 801ae52:	6922      	ldr	r2, [r4, #16]
 801ae54:	b942      	cbnz	r2, 801ae68 <__swsetup_r+0xa4>
 801ae56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801ae5a:	d1c5      	bne.n	801ade8 <__swsetup_r+0x24>
 801ae5c:	bd38      	pop	{r3, r4, r5, pc}
 801ae5e:	0799      	lsls	r1, r3, #30
 801ae60:	bf58      	it	pl
 801ae62:	6962      	ldrpl	r2, [r4, #20]
 801ae64:	60a2      	str	r2, [r4, #8]
 801ae66:	e7f4      	b.n	801ae52 <__swsetup_r+0x8e>
 801ae68:	2000      	movs	r0, #0
 801ae6a:	e7f7      	b.n	801ae5c <__swsetup_r+0x98>
 801ae6c:	20000130 	.word	0x20000130

0801ae70 <memmove>:
 801ae70:	4288      	cmp	r0, r1
 801ae72:	b510      	push	{r4, lr}
 801ae74:	eb01 0402 	add.w	r4, r1, r2
 801ae78:	d902      	bls.n	801ae80 <memmove+0x10>
 801ae7a:	4284      	cmp	r4, r0
 801ae7c:	4623      	mov	r3, r4
 801ae7e:	d807      	bhi.n	801ae90 <memmove+0x20>
 801ae80:	1e43      	subs	r3, r0, #1
 801ae82:	42a1      	cmp	r1, r4
 801ae84:	d008      	beq.n	801ae98 <memmove+0x28>
 801ae86:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ae8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ae8e:	e7f8      	b.n	801ae82 <memmove+0x12>
 801ae90:	4402      	add	r2, r0
 801ae92:	4601      	mov	r1, r0
 801ae94:	428a      	cmp	r2, r1
 801ae96:	d100      	bne.n	801ae9a <memmove+0x2a>
 801ae98:	bd10      	pop	{r4, pc}
 801ae9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ae9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801aea2:	e7f7      	b.n	801ae94 <memmove+0x24>

0801aea4 <memset>:
 801aea4:	4402      	add	r2, r0
 801aea6:	4603      	mov	r3, r0
 801aea8:	4293      	cmp	r3, r2
 801aeaa:	d100      	bne.n	801aeae <memset+0xa>
 801aeac:	4770      	bx	lr
 801aeae:	f803 1b01 	strb.w	r1, [r3], #1
 801aeb2:	e7f9      	b.n	801aea8 <memset+0x4>

0801aeb4 <strcat>:
 801aeb4:	b510      	push	{r4, lr}
 801aeb6:	4602      	mov	r2, r0
 801aeb8:	7814      	ldrb	r4, [r2, #0]
 801aeba:	4613      	mov	r3, r2
 801aebc:	3201      	adds	r2, #1
 801aebe:	2c00      	cmp	r4, #0
 801aec0:	d1fa      	bne.n	801aeb8 <strcat+0x4>
 801aec2:	3b01      	subs	r3, #1
 801aec4:	f811 2b01 	ldrb.w	r2, [r1], #1
 801aec8:	f803 2f01 	strb.w	r2, [r3, #1]!
 801aecc:	2a00      	cmp	r2, #0
 801aece:	d1f9      	bne.n	801aec4 <strcat+0x10>
 801aed0:	bd10      	pop	{r4, pc}

0801aed2 <_raise_r>:
 801aed2:	291f      	cmp	r1, #31
 801aed4:	b538      	push	{r3, r4, r5, lr}
 801aed6:	4605      	mov	r5, r0
 801aed8:	460c      	mov	r4, r1
 801aeda:	d904      	bls.n	801aee6 <_raise_r+0x14>
 801aedc:	2316      	movs	r3, #22
 801aede:	6003      	str	r3, [r0, #0]
 801aee0:	f04f 30ff 	mov.w	r0, #4294967295
 801aee4:	bd38      	pop	{r3, r4, r5, pc}
 801aee6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801aee8:	b112      	cbz	r2, 801aef0 <_raise_r+0x1e>
 801aeea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801aeee:	b94b      	cbnz	r3, 801af04 <_raise_r+0x32>
 801aef0:	4628      	mov	r0, r5
 801aef2:	f000 f869 	bl	801afc8 <_getpid_r>
 801aef6:	4622      	mov	r2, r4
 801aef8:	4601      	mov	r1, r0
 801aefa:	4628      	mov	r0, r5
 801aefc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801af00:	f000 b850 	b.w	801afa4 <_kill_r>
 801af04:	2b01      	cmp	r3, #1
 801af06:	d00a      	beq.n	801af1e <_raise_r+0x4c>
 801af08:	1c59      	adds	r1, r3, #1
 801af0a:	d103      	bne.n	801af14 <_raise_r+0x42>
 801af0c:	2316      	movs	r3, #22
 801af0e:	6003      	str	r3, [r0, #0]
 801af10:	2001      	movs	r0, #1
 801af12:	e7e7      	b.n	801aee4 <_raise_r+0x12>
 801af14:	2100      	movs	r1, #0
 801af16:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801af1a:	4620      	mov	r0, r4
 801af1c:	4798      	blx	r3
 801af1e:	2000      	movs	r0, #0
 801af20:	e7e0      	b.n	801aee4 <_raise_r+0x12>
	...

0801af24 <raise>:
 801af24:	4b02      	ldr	r3, [pc, #8]	@ (801af30 <raise+0xc>)
 801af26:	4601      	mov	r1, r0
 801af28:	6818      	ldr	r0, [r3, #0]
 801af2a:	f7ff bfd2 	b.w	801aed2 <_raise_r>
 801af2e:	bf00      	nop
 801af30:	20000130 	.word	0x20000130

0801af34 <_localeconv_r>:
 801af34:	4800      	ldr	r0, [pc, #0]	@ (801af38 <_localeconv_r+0x4>)
 801af36:	4770      	bx	lr
 801af38:	20000270 	.word	0x20000270

0801af3c <_close_r>:
 801af3c:	b538      	push	{r3, r4, r5, lr}
 801af3e:	4d06      	ldr	r5, [pc, #24]	@ (801af58 <_close_r+0x1c>)
 801af40:	2300      	movs	r3, #0
 801af42:	4604      	mov	r4, r0
 801af44:	4608      	mov	r0, r1
 801af46:	602b      	str	r3, [r5, #0]
 801af48:	f7ec fa80 	bl	800744c <_close>
 801af4c:	1c43      	adds	r3, r0, #1
 801af4e:	d102      	bne.n	801af56 <_close_r+0x1a>
 801af50:	682b      	ldr	r3, [r5, #0]
 801af52:	b103      	cbz	r3, 801af56 <_close_r+0x1a>
 801af54:	6023      	str	r3, [r4, #0]
 801af56:	bd38      	pop	{r3, r4, r5, pc}
 801af58:	20001b24 	.word	0x20001b24

0801af5c <_lseek_r>:
 801af5c:	b538      	push	{r3, r4, r5, lr}
 801af5e:	4d07      	ldr	r5, [pc, #28]	@ (801af7c <_lseek_r+0x20>)
 801af60:	4604      	mov	r4, r0
 801af62:	4608      	mov	r0, r1
 801af64:	4611      	mov	r1, r2
 801af66:	2200      	movs	r2, #0
 801af68:	602a      	str	r2, [r5, #0]
 801af6a:	461a      	mov	r2, r3
 801af6c:	f7ec fa95 	bl	800749a <_lseek>
 801af70:	1c43      	adds	r3, r0, #1
 801af72:	d102      	bne.n	801af7a <_lseek_r+0x1e>
 801af74:	682b      	ldr	r3, [r5, #0]
 801af76:	b103      	cbz	r3, 801af7a <_lseek_r+0x1e>
 801af78:	6023      	str	r3, [r4, #0]
 801af7a:	bd38      	pop	{r3, r4, r5, pc}
 801af7c:	20001b24 	.word	0x20001b24

0801af80 <_read_r>:
 801af80:	b538      	push	{r3, r4, r5, lr}
 801af82:	4d07      	ldr	r5, [pc, #28]	@ (801afa0 <_read_r+0x20>)
 801af84:	4604      	mov	r4, r0
 801af86:	4608      	mov	r0, r1
 801af88:	4611      	mov	r1, r2
 801af8a:	2200      	movs	r2, #0
 801af8c:	602a      	str	r2, [r5, #0]
 801af8e:	461a      	mov	r2, r3
 801af90:	f7ec fa23 	bl	80073da <_read>
 801af94:	1c43      	adds	r3, r0, #1
 801af96:	d102      	bne.n	801af9e <_read_r+0x1e>
 801af98:	682b      	ldr	r3, [r5, #0]
 801af9a:	b103      	cbz	r3, 801af9e <_read_r+0x1e>
 801af9c:	6023      	str	r3, [r4, #0]
 801af9e:	bd38      	pop	{r3, r4, r5, pc}
 801afa0:	20001b24 	.word	0x20001b24

0801afa4 <_kill_r>:
 801afa4:	b538      	push	{r3, r4, r5, lr}
 801afa6:	4d07      	ldr	r5, [pc, #28]	@ (801afc4 <_kill_r+0x20>)
 801afa8:	2300      	movs	r3, #0
 801afaa:	4604      	mov	r4, r0
 801afac:	4608      	mov	r0, r1
 801afae:	4611      	mov	r1, r2
 801afb0:	602b      	str	r3, [r5, #0]
 801afb2:	f7ec f9f7 	bl	80073a4 <_kill>
 801afb6:	1c43      	adds	r3, r0, #1
 801afb8:	d102      	bne.n	801afc0 <_kill_r+0x1c>
 801afba:	682b      	ldr	r3, [r5, #0]
 801afbc:	b103      	cbz	r3, 801afc0 <_kill_r+0x1c>
 801afbe:	6023      	str	r3, [r4, #0]
 801afc0:	bd38      	pop	{r3, r4, r5, pc}
 801afc2:	bf00      	nop
 801afc4:	20001b24 	.word	0x20001b24

0801afc8 <_getpid_r>:
 801afc8:	f7ec b9e4 	b.w	8007394 <_getpid>

0801afcc <_sbrk_r>:
 801afcc:	b538      	push	{r3, r4, r5, lr}
 801afce:	4d06      	ldr	r5, [pc, #24]	@ (801afe8 <_sbrk_r+0x1c>)
 801afd0:	2300      	movs	r3, #0
 801afd2:	4604      	mov	r4, r0
 801afd4:	4608      	mov	r0, r1
 801afd6:	602b      	str	r3, [r5, #0]
 801afd8:	f7ec fa6c 	bl	80074b4 <_sbrk>
 801afdc:	1c43      	adds	r3, r0, #1
 801afde:	d102      	bne.n	801afe6 <_sbrk_r+0x1a>
 801afe0:	682b      	ldr	r3, [r5, #0]
 801afe2:	b103      	cbz	r3, 801afe6 <_sbrk_r+0x1a>
 801afe4:	6023      	str	r3, [r4, #0]
 801afe6:	bd38      	pop	{r3, r4, r5, pc}
 801afe8:	20001b24 	.word	0x20001b24

0801afec <_write_r>:
 801afec:	b538      	push	{r3, r4, r5, lr}
 801afee:	4d07      	ldr	r5, [pc, #28]	@ (801b00c <_write_r+0x20>)
 801aff0:	4604      	mov	r4, r0
 801aff2:	4608      	mov	r0, r1
 801aff4:	4611      	mov	r1, r2
 801aff6:	2200      	movs	r2, #0
 801aff8:	602a      	str	r2, [r5, #0]
 801affa:	461a      	mov	r2, r3
 801affc:	f7ec fa0a 	bl	8007414 <_write>
 801b000:	1c43      	adds	r3, r0, #1
 801b002:	d102      	bne.n	801b00a <_write_r+0x1e>
 801b004:	682b      	ldr	r3, [r5, #0]
 801b006:	b103      	cbz	r3, 801b00a <_write_r+0x1e>
 801b008:	6023      	str	r3, [r4, #0]
 801b00a:	bd38      	pop	{r3, r4, r5, pc}
 801b00c:	20001b24 	.word	0x20001b24

0801b010 <__errno>:
 801b010:	4b01      	ldr	r3, [pc, #4]	@ (801b018 <__errno+0x8>)
 801b012:	6818      	ldr	r0, [r3, #0]
 801b014:	4770      	bx	lr
 801b016:	bf00      	nop
 801b018:	20000130 	.word	0x20000130

0801b01c <__libc_init_array>:
 801b01c:	b570      	push	{r4, r5, r6, lr}
 801b01e:	4d0d      	ldr	r5, [pc, #52]	@ (801b054 <__libc_init_array+0x38>)
 801b020:	4c0d      	ldr	r4, [pc, #52]	@ (801b058 <__libc_init_array+0x3c>)
 801b022:	1b64      	subs	r4, r4, r5
 801b024:	10a4      	asrs	r4, r4, #2
 801b026:	2600      	movs	r6, #0
 801b028:	42a6      	cmp	r6, r4
 801b02a:	d109      	bne.n	801b040 <__libc_init_array+0x24>
 801b02c:	4d0b      	ldr	r5, [pc, #44]	@ (801b05c <__libc_init_array+0x40>)
 801b02e:	4c0c      	ldr	r4, [pc, #48]	@ (801b060 <__libc_init_array+0x44>)
 801b030:	f001 feb2 	bl	801cd98 <_init>
 801b034:	1b64      	subs	r4, r4, r5
 801b036:	10a4      	asrs	r4, r4, #2
 801b038:	2600      	movs	r6, #0
 801b03a:	42a6      	cmp	r6, r4
 801b03c:	d105      	bne.n	801b04a <__libc_init_array+0x2e>
 801b03e:	bd70      	pop	{r4, r5, r6, pc}
 801b040:	f855 3b04 	ldr.w	r3, [r5], #4
 801b044:	4798      	blx	r3
 801b046:	3601      	adds	r6, #1
 801b048:	e7ee      	b.n	801b028 <__libc_init_array+0xc>
 801b04a:	f855 3b04 	ldr.w	r3, [r5], #4
 801b04e:	4798      	blx	r3
 801b050:	3601      	adds	r6, #1
 801b052:	e7f2      	b.n	801b03a <__libc_init_array+0x1e>
 801b054:	0801e7f0 	.word	0x0801e7f0
 801b058:	0801e7f0 	.word	0x0801e7f0
 801b05c:	0801e7f0 	.word	0x0801e7f0
 801b060:	0801e7f8 	.word	0x0801e7f8

0801b064 <__retarget_lock_init_recursive>:
 801b064:	4770      	bx	lr

0801b066 <__retarget_lock_acquire_recursive>:
 801b066:	4770      	bx	lr

0801b068 <__retarget_lock_release_recursive>:
 801b068:	4770      	bx	lr

0801b06a <strcpy>:
 801b06a:	4603      	mov	r3, r0
 801b06c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b070:	f803 2b01 	strb.w	r2, [r3], #1
 801b074:	2a00      	cmp	r2, #0
 801b076:	d1f9      	bne.n	801b06c <strcpy+0x2>
 801b078:	4770      	bx	lr

0801b07a <memcpy>:
 801b07a:	440a      	add	r2, r1
 801b07c:	4291      	cmp	r1, r2
 801b07e:	f100 33ff 	add.w	r3, r0, #4294967295
 801b082:	d100      	bne.n	801b086 <memcpy+0xc>
 801b084:	4770      	bx	lr
 801b086:	b510      	push	{r4, lr}
 801b088:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b08c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b090:	4291      	cmp	r1, r2
 801b092:	d1f9      	bne.n	801b088 <memcpy+0xe>
 801b094:	bd10      	pop	{r4, pc}

0801b096 <quorem>:
 801b096:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b09a:	6903      	ldr	r3, [r0, #16]
 801b09c:	690c      	ldr	r4, [r1, #16]
 801b09e:	42a3      	cmp	r3, r4
 801b0a0:	4607      	mov	r7, r0
 801b0a2:	db7e      	blt.n	801b1a2 <quorem+0x10c>
 801b0a4:	3c01      	subs	r4, #1
 801b0a6:	f101 0814 	add.w	r8, r1, #20
 801b0aa:	00a3      	lsls	r3, r4, #2
 801b0ac:	f100 0514 	add.w	r5, r0, #20
 801b0b0:	9300      	str	r3, [sp, #0]
 801b0b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b0b6:	9301      	str	r3, [sp, #4]
 801b0b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b0bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b0c0:	3301      	adds	r3, #1
 801b0c2:	429a      	cmp	r2, r3
 801b0c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b0c8:	fbb2 f6f3 	udiv	r6, r2, r3
 801b0cc:	d32e      	bcc.n	801b12c <quorem+0x96>
 801b0ce:	f04f 0a00 	mov.w	sl, #0
 801b0d2:	46c4      	mov	ip, r8
 801b0d4:	46ae      	mov	lr, r5
 801b0d6:	46d3      	mov	fp, sl
 801b0d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 801b0dc:	b298      	uxth	r0, r3
 801b0de:	fb06 a000 	mla	r0, r6, r0, sl
 801b0e2:	0c02      	lsrs	r2, r0, #16
 801b0e4:	0c1b      	lsrs	r3, r3, #16
 801b0e6:	fb06 2303 	mla	r3, r6, r3, r2
 801b0ea:	f8de 2000 	ldr.w	r2, [lr]
 801b0ee:	b280      	uxth	r0, r0
 801b0f0:	b292      	uxth	r2, r2
 801b0f2:	1a12      	subs	r2, r2, r0
 801b0f4:	445a      	add	r2, fp
 801b0f6:	f8de 0000 	ldr.w	r0, [lr]
 801b0fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b0fe:	b29b      	uxth	r3, r3
 801b100:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801b104:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801b108:	b292      	uxth	r2, r2
 801b10a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801b10e:	45e1      	cmp	r9, ip
 801b110:	f84e 2b04 	str.w	r2, [lr], #4
 801b114:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801b118:	d2de      	bcs.n	801b0d8 <quorem+0x42>
 801b11a:	9b00      	ldr	r3, [sp, #0]
 801b11c:	58eb      	ldr	r3, [r5, r3]
 801b11e:	b92b      	cbnz	r3, 801b12c <quorem+0x96>
 801b120:	9b01      	ldr	r3, [sp, #4]
 801b122:	3b04      	subs	r3, #4
 801b124:	429d      	cmp	r5, r3
 801b126:	461a      	mov	r2, r3
 801b128:	d32f      	bcc.n	801b18a <quorem+0xf4>
 801b12a:	613c      	str	r4, [r7, #16]
 801b12c:	4638      	mov	r0, r7
 801b12e:	f001 f8c7 	bl	801c2c0 <__mcmp>
 801b132:	2800      	cmp	r0, #0
 801b134:	db25      	blt.n	801b182 <quorem+0xec>
 801b136:	4629      	mov	r1, r5
 801b138:	2000      	movs	r0, #0
 801b13a:	f858 2b04 	ldr.w	r2, [r8], #4
 801b13e:	f8d1 c000 	ldr.w	ip, [r1]
 801b142:	fa1f fe82 	uxth.w	lr, r2
 801b146:	fa1f f38c 	uxth.w	r3, ip
 801b14a:	eba3 030e 	sub.w	r3, r3, lr
 801b14e:	4403      	add	r3, r0
 801b150:	0c12      	lsrs	r2, r2, #16
 801b152:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801b156:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801b15a:	b29b      	uxth	r3, r3
 801b15c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b160:	45c1      	cmp	r9, r8
 801b162:	f841 3b04 	str.w	r3, [r1], #4
 801b166:	ea4f 4022 	mov.w	r0, r2, asr #16
 801b16a:	d2e6      	bcs.n	801b13a <quorem+0xa4>
 801b16c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b170:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b174:	b922      	cbnz	r2, 801b180 <quorem+0xea>
 801b176:	3b04      	subs	r3, #4
 801b178:	429d      	cmp	r5, r3
 801b17a:	461a      	mov	r2, r3
 801b17c:	d30b      	bcc.n	801b196 <quorem+0x100>
 801b17e:	613c      	str	r4, [r7, #16]
 801b180:	3601      	adds	r6, #1
 801b182:	4630      	mov	r0, r6
 801b184:	b003      	add	sp, #12
 801b186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b18a:	6812      	ldr	r2, [r2, #0]
 801b18c:	3b04      	subs	r3, #4
 801b18e:	2a00      	cmp	r2, #0
 801b190:	d1cb      	bne.n	801b12a <quorem+0x94>
 801b192:	3c01      	subs	r4, #1
 801b194:	e7c6      	b.n	801b124 <quorem+0x8e>
 801b196:	6812      	ldr	r2, [r2, #0]
 801b198:	3b04      	subs	r3, #4
 801b19a:	2a00      	cmp	r2, #0
 801b19c:	d1ef      	bne.n	801b17e <quorem+0xe8>
 801b19e:	3c01      	subs	r4, #1
 801b1a0:	e7ea      	b.n	801b178 <quorem+0xe2>
 801b1a2:	2000      	movs	r0, #0
 801b1a4:	e7ee      	b.n	801b184 <quorem+0xee>
	...

0801b1a8 <_dtoa_r>:
 801b1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1ac:	69c7      	ldr	r7, [r0, #28]
 801b1ae:	b097      	sub	sp, #92	@ 0x5c
 801b1b0:	ed8d 0b04 	vstr	d0, [sp, #16]
 801b1b4:	ec55 4b10 	vmov	r4, r5, d0
 801b1b8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801b1ba:	9107      	str	r1, [sp, #28]
 801b1bc:	4681      	mov	r9, r0
 801b1be:	920c      	str	r2, [sp, #48]	@ 0x30
 801b1c0:	9311      	str	r3, [sp, #68]	@ 0x44
 801b1c2:	b97f      	cbnz	r7, 801b1e4 <_dtoa_r+0x3c>
 801b1c4:	2010      	movs	r0, #16
 801b1c6:	f7fe ff6f 	bl	801a0a8 <malloc>
 801b1ca:	4602      	mov	r2, r0
 801b1cc:	f8c9 001c 	str.w	r0, [r9, #28]
 801b1d0:	b920      	cbnz	r0, 801b1dc <_dtoa_r+0x34>
 801b1d2:	4ba9      	ldr	r3, [pc, #676]	@ (801b478 <_dtoa_r+0x2d0>)
 801b1d4:	21ef      	movs	r1, #239	@ 0xef
 801b1d6:	48a9      	ldr	r0, [pc, #676]	@ (801b47c <_dtoa_r+0x2d4>)
 801b1d8:	f001 fd44 	bl	801cc64 <__assert_func>
 801b1dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801b1e0:	6007      	str	r7, [r0, #0]
 801b1e2:	60c7      	str	r7, [r0, #12]
 801b1e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801b1e8:	6819      	ldr	r1, [r3, #0]
 801b1ea:	b159      	cbz	r1, 801b204 <_dtoa_r+0x5c>
 801b1ec:	685a      	ldr	r2, [r3, #4]
 801b1ee:	604a      	str	r2, [r1, #4]
 801b1f0:	2301      	movs	r3, #1
 801b1f2:	4093      	lsls	r3, r2
 801b1f4:	608b      	str	r3, [r1, #8]
 801b1f6:	4648      	mov	r0, r9
 801b1f8:	f000 fe30 	bl	801be5c <_Bfree>
 801b1fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801b200:	2200      	movs	r2, #0
 801b202:	601a      	str	r2, [r3, #0]
 801b204:	1e2b      	subs	r3, r5, #0
 801b206:	bfb9      	ittee	lt
 801b208:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801b20c:	9305      	strlt	r3, [sp, #20]
 801b20e:	2300      	movge	r3, #0
 801b210:	6033      	strge	r3, [r6, #0]
 801b212:	9f05      	ldr	r7, [sp, #20]
 801b214:	4b9a      	ldr	r3, [pc, #616]	@ (801b480 <_dtoa_r+0x2d8>)
 801b216:	bfbc      	itt	lt
 801b218:	2201      	movlt	r2, #1
 801b21a:	6032      	strlt	r2, [r6, #0]
 801b21c:	43bb      	bics	r3, r7
 801b21e:	d112      	bne.n	801b246 <_dtoa_r+0x9e>
 801b220:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b222:	f242 730f 	movw	r3, #9999	@ 0x270f
 801b226:	6013      	str	r3, [r2, #0]
 801b228:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801b22c:	4323      	orrs	r3, r4
 801b22e:	f000 855a 	beq.w	801bce6 <_dtoa_r+0xb3e>
 801b232:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801b234:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801b494 <_dtoa_r+0x2ec>
 801b238:	2b00      	cmp	r3, #0
 801b23a:	f000 855c 	beq.w	801bcf6 <_dtoa_r+0xb4e>
 801b23e:	f10a 0303 	add.w	r3, sl, #3
 801b242:	f000 bd56 	b.w	801bcf2 <_dtoa_r+0xb4a>
 801b246:	ed9d 7b04 	vldr	d7, [sp, #16]
 801b24a:	2200      	movs	r2, #0
 801b24c:	ec51 0b17 	vmov	r0, r1, d7
 801b250:	2300      	movs	r3, #0
 801b252:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801b256:	f7e5 fc1f 	bl	8000a98 <__aeabi_dcmpeq>
 801b25a:	4680      	mov	r8, r0
 801b25c:	b158      	cbz	r0, 801b276 <_dtoa_r+0xce>
 801b25e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b260:	2301      	movs	r3, #1
 801b262:	6013      	str	r3, [r2, #0]
 801b264:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801b266:	b113      	cbz	r3, 801b26e <_dtoa_r+0xc6>
 801b268:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801b26a:	4b86      	ldr	r3, [pc, #536]	@ (801b484 <_dtoa_r+0x2dc>)
 801b26c:	6013      	str	r3, [r2, #0]
 801b26e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 801b498 <_dtoa_r+0x2f0>
 801b272:	f000 bd40 	b.w	801bcf6 <_dtoa_r+0xb4e>
 801b276:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801b27a:	aa14      	add	r2, sp, #80	@ 0x50
 801b27c:	a915      	add	r1, sp, #84	@ 0x54
 801b27e:	4648      	mov	r0, r9
 801b280:	f001 f8ce 	bl	801c420 <__d2b>
 801b284:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801b288:	9002      	str	r0, [sp, #8]
 801b28a:	2e00      	cmp	r6, #0
 801b28c:	d078      	beq.n	801b380 <_dtoa_r+0x1d8>
 801b28e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b290:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801b294:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b298:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801b29c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801b2a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801b2a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801b2a8:	4619      	mov	r1, r3
 801b2aa:	2200      	movs	r2, #0
 801b2ac:	4b76      	ldr	r3, [pc, #472]	@ (801b488 <_dtoa_r+0x2e0>)
 801b2ae:	f7e4 ffd3 	bl	8000258 <__aeabi_dsub>
 801b2b2:	a36b      	add	r3, pc, #428	@ (adr r3, 801b460 <_dtoa_r+0x2b8>)
 801b2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2b8:	f7e5 f986 	bl	80005c8 <__aeabi_dmul>
 801b2bc:	a36a      	add	r3, pc, #424	@ (adr r3, 801b468 <_dtoa_r+0x2c0>)
 801b2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2c2:	f7e4 ffcb 	bl	800025c <__adddf3>
 801b2c6:	4604      	mov	r4, r0
 801b2c8:	4630      	mov	r0, r6
 801b2ca:	460d      	mov	r5, r1
 801b2cc:	f7e5 f912 	bl	80004f4 <__aeabi_i2d>
 801b2d0:	a367      	add	r3, pc, #412	@ (adr r3, 801b470 <_dtoa_r+0x2c8>)
 801b2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2d6:	f7e5 f977 	bl	80005c8 <__aeabi_dmul>
 801b2da:	4602      	mov	r2, r0
 801b2dc:	460b      	mov	r3, r1
 801b2de:	4620      	mov	r0, r4
 801b2e0:	4629      	mov	r1, r5
 801b2e2:	f7e4 ffbb 	bl	800025c <__adddf3>
 801b2e6:	4604      	mov	r4, r0
 801b2e8:	460d      	mov	r5, r1
 801b2ea:	f7e5 fc1d 	bl	8000b28 <__aeabi_d2iz>
 801b2ee:	2200      	movs	r2, #0
 801b2f0:	4607      	mov	r7, r0
 801b2f2:	2300      	movs	r3, #0
 801b2f4:	4620      	mov	r0, r4
 801b2f6:	4629      	mov	r1, r5
 801b2f8:	f7e5 fbd8 	bl	8000aac <__aeabi_dcmplt>
 801b2fc:	b140      	cbz	r0, 801b310 <_dtoa_r+0x168>
 801b2fe:	4638      	mov	r0, r7
 801b300:	f7e5 f8f8 	bl	80004f4 <__aeabi_i2d>
 801b304:	4622      	mov	r2, r4
 801b306:	462b      	mov	r3, r5
 801b308:	f7e5 fbc6 	bl	8000a98 <__aeabi_dcmpeq>
 801b30c:	b900      	cbnz	r0, 801b310 <_dtoa_r+0x168>
 801b30e:	3f01      	subs	r7, #1
 801b310:	2f16      	cmp	r7, #22
 801b312:	d852      	bhi.n	801b3ba <_dtoa_r+0x212>
 801b314:	4b5d      	ldr	r3, [pc, #372]	@ (801b48c <_dtoa_r+0x2e4>)
 801b316:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801b31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b31e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801b322:	f7e5 fbc3 	bl	8000aac <__aeabi_dcmplt>
 801b326:	2800      	cmp	r0, #0
 801b328:	d049      	beq.n	801b3be <_dtoa_r+0x216>
 801b32a:	3f01      	subs	r7, #1
 801b32c:	2300      	movs	r3, #0
 801b32e:	9310      	str	r3, [sp, #64]	@ 0x40
 801b330:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801b332:	1b9b      	subs	r3, r3, r6
 801b334:	1e5a      	subs	r2, r3, #1
 801b336:	bf45      	ittet	mi
 801b338:	f1c3 0301 	rsbmi	r3, r3, #1
 801b33c:	9300      	strmi	r3, [sp, #0]
 801b33e:	2300      	movpl	r3, #0
 801b340:	2300      	movmi	r3, #0
 801b342:	9206      	str	r2, [sp, #24]
 801b344:	bf54      	ite	pl
 801b346:	9300      	strpl	r3, [sp, #0]
 801b348:	9306      	strmi	r3, [sp, #24]
 801b34a:	2f00      	cmp	r7, #0
 801b34c:	db39      	blt.n	801b3c2 <_dtoa_r+0x21a>
 801b34e:	9b06      	ldr	r3, [sp, #24]
 801b350:	970d      	str	r7, [sp, #52]	@ 0x34
 801b352:	443b      	add	r3, r7
 801b354:	9306      	str	r3, [sp, #24]
 801b356:	2300      	movs	r3, #0
 801b358:	9308      	str	r3, [sp, #32]
 801b35a:	9b07      	ldr	r3, [sp, #28]
 801b35c:	2b09      	cmp	r3, #9
 801b35e:	d863      	bhi.n	801b428 <_dtoa_r+0x280>
 801b360:	2b05      	cmp	r3, #5
 801b362:	bfc4      	itt	gt
 801b364:	3b04      	subgt	r3, #4
 801b366:	9307      	strgt	r3, [sp, #28]
 801b368:	9b07      	ldr	r3, [sp, #28]
 801b36a:	f1a3 0302 	sub.w	r3, r3, #2
 801b36e:	bfcc      	ite	gt
 801b370:	2400      	movgt	r4, #0
 801b372:	2401      	movle	r4, #1
 801b374:	2b03      	cmp	r3, #3
 801b376:	d863      	bhi.n	801b440 <_dtoa_r+0x298>
 801b378:	e8df f003 	tbb	[pc, r3]
 801b37c:	2b375452 	.word	0x2b375452
 801b380:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801b384:	441e      	add	r6, r3
 801b386:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801b38a:	2b20      	cmp	r3, #32
 801b38c:	bfc1      	itttt	gt
 801b38e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801b392:	409f      	lslgt	r7, r3
 801b394:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801b398:	fa24 f303 	lsrgt.w	r3, r4, r3
 801b39c:	bfd6      	itet	le
 801b39e:	f1c3 0320 	rsble	r3, r3, #32
 801b3a2:	ea47 0003 	orrgt.w	r0, r7, r3
 801b3a6:	fa04 f003 	lslle.w	r0, r4, r3
 801b3aa:	f7e5 f893 	bl	80004d4 <__aeabi_ui2d>
 801b3ae:	2201      	movs	r2, #1
 801b3b0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801b3b4:	3e01      	subs	r6, #1
 801b3b6:	9212      	str	r2, [sp, #72]	@ 0x48
 801b3b8:	e776      	b.n	801b2a8 <_dtoa_r+0x100>
 801b3ba:	2301      	movs	r3, #1
 801b3bc:	e7b7      	b.n	801b32e <_dtoa_r+0x186>
 801b3be:	9010      	str	r0, [sp, #64]	@ 0x40
 801b3c0:	e7b6      	b.n	801b330 <_dtoa_r+0x188>
 801b3c2:	9b00      	ldr	r3, [sp, #0]
 801b3c4:	1bdb      	subs	r3, r3, r7
 801b3c6:	9300      	str	r3, [sp, #0]
 801b3c8:	427b      	negs	r3, r7
 801b3ca:	9308      	str	r3, [sp, #32]
 801b3cc:	2300      	movs	r3, #0
 801b3ce:	930d      	str	r3, [sp, #52]	@ 0x34
 801b3d0:	e7c3      	b.n	801b35a <_dtoa_r+0x1b2>
 801b3d2:	2301      	movs	r3, #1
 801b3d4:	9309      	str	r3, [sp, #36]	@ 0x24
 801b3d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b3d8:	eb07 0b03 	add.w	fp, r7, r3
 801b3dc:	f10b 0301 	add.w	r3, fp, #1
 801b3e0:	2b01      	cmp	r3, #1
 801b3e2:	9303      	str	r3, [sp, #12]
 801b3e4:	bfb8      	it	lt
 801b3e6:	2301      	movlt	r3, #1
 801b3e8:	e006      	b.n	801b3f8 <_dtoa_r+0x250>
 801b3ea:	2301      	movs	r3, #1
 801b3ec:	9309      	str	r3, [sp, #36]	@ 0x24
 801b3ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b3f0:	2b00      	cmp	r3, #0
 801b3f2:	dd28      	ble.n	801b446 <_dtoa_r+0x29e>
 801b3f4:	469b      	mov	fp, r3
 801b3f6:	9303      	str	r3, [sp, #12]
 801b3f8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801b3fc:	2100      	movs	r1, #0
 801b3fe:	2204      	movs	r2, #4
 801b400:	f102 0514 	add.w	r5, r2, #20
 801b404:	429d      	cmp	r5, r3
 801b406:	d926      	bls.n	801b456 <_dtoa_r+0x2ae>
 801b408:	6041      	str	r1, [r0, #4]
 801b40a:	4648      	mov	r0, r9
 801b40c:	f000 fce6 	bl	801bddc <_Balloc>
 801b410:	4682      	mov	sl, r0
 801b412:	2800      	cmp	r0, #0
 801b414:	d142      	bne.n	801b49c <_dtoa_r+0x2f4>
 801b416:	4b1e      	ldr	r3, [pc, #120]	@ (801b490 <_dtoa_r+0x2e8>)
 801b418:	4602      	mov	r2, r0
 801b41a:	f240 11af 	movw	r1, #431	@ 0x1af
 801b41e:	e6da      	b.n	801b1d6 <_dtoa_r+0x2e>
 801b420:	2300      	movs	r3, #0
 801b422:	e7e3      	b.n	801b3ec <_dtoa_r+0x244>
 801b424:	2300      	movs	r3, #0
 801b426:	e7d5      	b.n	801b3d4 <_dtoa_r+0x22c>
 801b428:	2401      	movs	r4, #1
 801b42a:	2300      	movs	r3, #0
 801b42c:	9307      	str	r3, [sp, #28]
 801b42e:	9409      	str	r4, [sp, #36]	@ 0x24
 801b430:	f04f 3bff 	mov.w	fp, #4294967295
 801b434:	2200      	movs	r2, #0
 801b436:	f8cd b00c 	str.w	fp, [sp, #12]
 801b43a:	2312      	movs	r3, #18
 801b43c:	920c      	str	r2, [sp, #48]	@ 0x30
 801b43e:	e7db      	b.n	801b3f8 <_dtoa_r+0x250>
 801b440:	2301      	movs	r3, #1
 801b442:	9309      	str	r3, [sp, #36]	@ 0x24
 801b444:	e7f4      	b.n	801b430 <_dtoa_r+0x288>
 801b446:	f04f 0b01 	mov.w	fp, #1
 801b44a:	f8cd b00c 	str.w	fp, [sp, #12]
 801b44e:	465b      	mov	r3, fp
 801b450:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801b454:	e7d0      	b.n	801b3f8 <_dtoa_r+0x250>
 801b456:	3101      	adds	r1, #1
 801b458:	0052      	lsls	r2, r2, #1
 801b45a:	e7d1      	b.n	801b400 <_dtoa_r+0x258>
 801b45c:	f3af 8000 	nop.w
 801b460:	636f4361 	.word	0x636f4361
 801b464:	3fd287a7 	.word	0x3fd287a7
 801b468:	8b60c8b3 	.word	0x8b60c8b3
 801b46c:	3fc68a28 	.word	0x3fc68a28
 801b470:	509f79fb 	.word	0x509f79fb
 801b474:	3fd34413 	.word	0x3fd34413
 801b478:	0801e5ba 	.word	0x0801e5ba
 801b47c:	0801e5d1 	.word	0x0801e5d1
 801b480:	7ff00000 	.word	0x7ff00000
 801b484:	0801e58a 	.word	0x0801e58a
 801b488:	3ff80000 	.word	0x3ff80000
 801b48c:	0801e720 	.word	0x0801e720
 801b490:	0801e629 	.word	0x0801e629
 801b494:	0801e5b6 	.word	0x0801e5b6
 801b498:	0801e589 	.word	0x0801e589
 801b49c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801b4a0:	6018      	str	r0, [r3, #0]
 801b4a2:	9b03      	ldr	r3, [sp, #12]
 801b4a4:	2b0e      	cmp	r3, #14
 801b4a6:	f200 80a1 	bhi.w	801b5ec <_dtoa_r+0x444>
 801b4aa:	2c00      	cmp	r4, #0
 801b4ac:	f000 809e 	beq.w	801b5ec <_dtoa_r+0x444>
 801b4b0:	2f00      	cmp	r7, #0
 801b4b2:	dd33      	ble.n	801b51c <_dtoa_r+0x374>
 801b4b4:	4b9c      	ldr	r3, [pc, #624]	@ (801b728 <_dtoa_r+0x580>)
 801b4b6:	f007 020f 	and.w	r2, r7, #15
 801b4ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b4be:	ed93 7b00 	vldr	d7, [r3]
 801b4c2:	05f8      	lsls	r0, r7, #23
 801b4c4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 801b4c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 801b4cc:	d516      	bpl.n	801b4fc <_dtoa_r+0x354>
 801b4ce:	4b97      	ldr	r3, [pc, #604]	@ (801b72c <_dtoa_r+0x584>)
 801b4d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801b4d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b4d8:	f7e5 f9a0 	bl	800081c <__aeabi_ddiv>
 801b4dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b4e0:	f004 040f 	and.w	r4, r4, #15
 801b4e4:	2603      	movs	r6, #3
 801b4e6:	4d91      	ldr	r5, [pc, #580]	@ (801b72c <_dtoa_r+0x584>)
 801b4e8:	b954      	cbnz	r4, 801b500 <_dtoa_r+0x358>
 801b4ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801b4ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b4f2:	f7e5 f993 	bl	800081c <__aeabi_ddiv>
 801b4f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b4fa:	e028      	b.n	801b54e <_dtoa_r+0x3a6>
 801b4fc:	2602      	movs	r6, #2
 801b4fe:	e7f2      	b.n	801b4e6 <_dtoa_r+0x33e>
 801b500:	07e1      	lsls	r1, r4, #31
 801b502:	d508      	bpl.n	801b516 <_dtoa_r+0x36e>
 801b504:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801b508:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b50c:	f7e5 f85c 	bl	80005c8 <__aeabi_dmul>
 801b510:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801b514:	3601      	adds	r6, #1
 801b516:	1064      	asrs	r4, r4, #1
 801b518:	3508      	adds	r5, #8
 801b51a:	e7e5      	b.n	801b4e8 <_dtoa_r+0x340>
 801b51c:	f000 80af 	beq.w	801b67e <_dtoa_r+0x4d6>
 801b520:	427c      	negs	r4, r7
 801b522:	4b81      	ldr	r3, [pc, #516]	@ (801b728 <_dtoa_r+0x580>)
 801b524:	4d81      	ldr	r5, [pc, #516]	@ (801b72c <_dtoa_r+0x584>)
 801b526:	f004 020f 	and.w	r2, r4, #15
 801b52a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b532:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801b536:	f7e5 f847 	bl	80005c8 <__aeabi_dmul>
 801b53a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b53e:	1124      	asrs	r4, r4, #4
 801b540:	2300      	movs	r3, #0
 801b542:	2602      	movs	r6, #2
 801b544:	2c00      	cmp	r4, #0
 801b546:	f040 808f 	bne.w	801b668 <_dtoa_r+0x4c0>
 801b54a:	2b00      	cmp	r3, #0
 801b54c:	d1d3      	bne.n	801b4f6 <_dtoa_r+0x34e>
 801b54e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b550:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801b554:	2b00      	cmp	r3, #0
 801b556:	f000 8094 	beq.w	801b682 <_dtoa_r+0x4da>
 801b55a:	4b75      	ldr	r3, [pc, #468]	@ (801b730 <_dtoa_r+0x588>)
 801b55c:	2200      	movs	r2, #0
 801b55e:	4620      	mov	r0, r4
 801b560:	4629      	mov	r1, r5
 801b562:	f7e5 faa3 	bl	8000aac <__aeabi_dcmplt>
 801b566:	2800      	cmp	r0, #0
 801b568:	f000 808b 	beq.w	801b682 <_dtoa_r+0x4da>
 801b56c:	9b03      	ldr	r3, [sp, #12]
 801b56e:	2b00      	cmp	r3, #0
 801b570:	f000 8087 	beq.w	801b682 <_dtoa_r+0x4da>
 801b574:	f1bb 0f00 	cmp.w	fp, #0
 801b578:	dd34      	ble.n	801b5e4 <_dtoa_r+0x43c>
 801b57a:	4620      	mov	r0, r4
 801b57c:	4b6d      	ldr	r3, [pc, #436]	@ (801b734 <_dtoa_r+0x58c>)
 801b57e:	2200      	movs	r2, #0
 801b580:	4629      	mov	r1, r5
 801b582:	f7e5 f821 	bl	80005c8 <__aeabi_dmul>
 801b586:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b58a:	f107 38ff 	add.w	r8, r7, #4294967295
 801b58e:	3601      	adds	r6, #1
 801b590:	465c      	mov	r4, fp
 801b592:	4630      	mov	r0, r6
 801b594:	f7e4 ffae 	bl	80004f4 <__aeabi_i2d>
 801b598:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b59c:	f7e5 f814 	bl	80005c8 <__aeabi_dmul>
 801b5a0:	4b65      	ldr	r3, [pc, #404]	@ (801b738 <_dtoa_r+0x590>)
 801b5a2:	2200      	movs	r2, #0
 801b5a4:	f7e4 fe5a 	bl	800025c <__adddf3>
 801b5a8:	4605      	mov	r5, r0
 801b5aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801b5ae:	2c00      	cmp	r4, #0
 801b5b0:	d16a      	bne.n	801b688 <_dtoa_r+0x4e0>
 801b5b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b5b6:	4b61      	ldr	r3, [pc, #388]	@ (801b73c <_dtoa_r+0x594>)
 801b5b8:	2200      	movs	r2, #0
 801b5ba:	f7e4 fe4d 	bl	8000258 <__aeabi_dsub>
 801b5be:	4602      	mov	r2, r0
 801b5c0:	460b      	mov	r3, r1
 801b5c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b5c6:	462a      	mov	r2, r5
 801b5c8:	4633      	mov	r3, r6
 801b5ca:	f7e5 fa8d 	bl	8000ae8 <__aeabi_dcmpgt>
 801b5ce:	2800      	cmp	r0, #0
 801b5d0:	f040 8298 	bne.w	801bb04 <_dtoa_r+0x95c>
 801b5d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b5d8:	462a      	mov	r2, r5
 801b5da:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801b5de:	f7e5 fa65 	bl	8000aac <__aeabi_dcmplt>
 801b5e2:	bb38      	cbnz	r0, 801b634 <_dtoa_r+0x48c>
 801b5e4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 801b5e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801b5ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b5ee:	2b00      	cmp	r3, #0
 801b5f0:	f2c0 8157 	blt.w	801b8a2 <_dtoa_r+0x6fa>
 801b5f4:	2f0e      	cmp	r7, #14
 801b5f6:	f300 8154 	bgt.w	801b8a2 <_dtoa_r+0x6fa>
 801b5fa:	4b4b      	ldr	r3, [pc, #300]	@ (801b728 <_dtoa_r+0x580>)
 801b5fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801b600:	ed93 7b00 	vldr	d7, [r3]
 801b604:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b606:	2b00      	cmp	r3, #0
 801b608:	ed8d 7b00 	vstr	d7, [sp]
 801b60c:	f280 80e5 	bge.w	801b7da <_dtoa_r+0x632>
 801b610:	9b03      	ldr	r3, [sp, #12]
 801b612:	2b00      	cmp	r3, #0
 801b614:	f300 80e1 	bgt.w	801b7da <_dtoa_r+0x632>
 801b618:	d10c      	bne.n	801b634 <_dtoa_r+0x48c>
 801b61a:	4b48      	ldr	r3, [pc, #288]	@ (801b73c <_dtoa_r+0x594>)
 801b61c:	2200      	movs	r2, #0
 801b61e:	ec51 0b17 	vmov	r0, r1, d7
 801b622:	f7e4 ffd1 	bl	80005c8 <__aeabi_dmul>
 801b626:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b62a:	f7e5 fa53 	bl	8000ad4 <__aeabi_dcmpge>
 801b62e:	2800      	cmp	r0, #0
 801b630:	f000 8266 	beq.w	801bb00 <_dtoa_r+0x958>
 801b634:	2400      	movs	r4, #0
 801b636:	4625      	mov	r5, r4
 801b638:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b63a:	4656      	mov	r6, sl
 801b63c:	ea6f 0803 	mvn.w	r8, r3
 801b640:	2700      	movs	r7, #0
 801b642:	4621      	mov	r1, r4
 801b644:	4648      	mov	r0, r9
 801b646:	f000 fc09 	bl	801be5c <_Bfree>
 801b64a:	2d00      	cmp	r5, #0
 801b64c:	f000 80bd 	beq.w	801b7ca <_dtoa_r+0x622>
 801b650:	b12f      	cbz	r7, 801b65e <_dtoa_r+0x4b6>
 801b652:	42af      	cmp	r7, r5
 801b654:	d003      	beq.n	801b65e <_dtoa_r+0x4b6>
 801b656:	4639      	mov	r1, r7
 801b658:	4648      	mov	r0, r9
 801b65a:	f000 fbff 	bl	801be5c <_Bfree>
 801b65e:	4629      	mov	r1, r5
 801b660:	4648      	mov	r0, r9
 801b662:	f000 fbfb 	bl	801be5c <_Bfree>
 801b666:	e0b0      	b.n	801b7ca <_dtoa_r+0x622>
 801b668:	07e2      	lsls	r2, r4, #31
 801b66a:	d505      	bpl.n	801b678 <_dtoa_r+0x4d0>
 801b66c:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b670:	f7e4 ffaa 	bl	80005c8 <__aeabi_dmul>
 801b674:	3601      	adds	r6, #1
 801b676:	2301      	movs	r3, #1
 801b678:	1064      	asrs	r4, r4, #1
 801b67a:	3508      	adds	r5, #8
 801b67c:	e762      	b.n	801b544 <_dtoa_r+0x39c>
 801b67e:	2602      	movs	r6, #2
 801b680:	e765      	b.n	801b54e <_dtoa_r+0x3a6>
 801b682:	9c03      	ldr	r4, [sp, #12]
 801b684:	46b8      	mov	r8, r7
 801b686:	e784      	b.n	801b592 <_dtoa_r+0x3ea>
 801b688:	4b27      	ldr	r3, [pc, #156]	@ (801b728 <_dtoa_r+0x580>)
 801b68a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801b68c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b690:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801b694:	4454      	add	r4, sl
 801b696:	2900      	cmp	r1, #0
 801b698:	d054      	beq.n	801b744 <_dtoa_r+0x59c>
 801b69a:	4929      	ldr	r1, [pc, #164]	@ (801b740 <_dtoa_r+0x598>)
 801b69c:	2000      	movs	r0, #0
 801b69e:	f7e5 f8bd 	bl	800081c <__aeabi_ddiv>
 801b6a2:	4633      	mov	r3, r6
 801b6a4:	462a      	mov	r2, r5
 801b6a6:	f7e4 fdd7 	bl	8000258 <__aeabi_dsub>
 801b6aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801b6ae:	4656      	mov	r6, sl
 801b6b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b6b4:	f7e5 fa38 	bl	8000b28 <__aeabi_d2iz>
 801b6b8:	4605      	mov	r5, r0
 801b6ba:	f7e4 ff1b 	bl	80004f4 <__aeabi_i2d>
 801b6be:	4602      	mov	r2, r0
 801b6c0:	460b      	mov	r3, r1
 801b6c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b6c6:	f7e4 fdc7 	bl	8000258 <__aeabi_dsub>
 801b6ca:	3530      	adds	r5, #48	@ 0x30
 801b6cc:	4602      	mov	r2, r0
 801b6ce:	460b      	mov	r3, r1
 801b6d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b6d4:	f806 5b01 	strb.w	r5, [r6], #1
 801b6d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801b6dc:	f7e5 f9e6 	bl	8000aac <__aeabi_dcmplt>
 801b6e0:	2800      	cmp	r0, #0
 801b6e2:	d172      	bne.n	801b7ca <_dtoa_r+0x622>
 801b6e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b6e8:	4911      	ldr	r1, [pc, #68]	@ (801b730 <_dtoa_r+0x588>)
 801b6ea:	2000      	movs	r0, #0
 801b6ec:	f7e4 fdb4 	bl	8000258 <__aeabi_dsub>
 801b6f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801b6f4:	f7e5 f9da 	bl	8000aac <__aeabi_dcmplt>
 801b6f8:	2800      	cmp	r0, #0
 801b6fa:	f040 80b4 	bne.w	801b866 <_dtoa_r+0x6be>
 801b6fe:	42a6      	cmp	r6, r4
 801b700:	f43f af70 	beq.w	801b5e4 <_dtoa_r+0x43c>
 801b704:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801b708:	4b0a      	ldr	r3, [pc, #40]	@ (801b734 <_dtoa_r+0x58c>)
 801b70a:	2200      	movs	r2, #0
 801b70c:	f7e4 ff5c 	bl	80005c8 <__aeabi_dmul>
 801b710:	4b08      	ldr	r3, [pc, #32]	@ (801b734 <_dtoa_r+0x58c>)
 801b712:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801b716:	2200      	movs	r2, #0
 801b718:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b71c:	f7e4 ff54 	bl	80005c8 <__aeabi_dmul>
 801b720:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b724:	e7c4      	b.n	801b6b0 <_dtoa_r+0x508>
 801b726:	bf00      	nop
 801b728:	0801e720 	.word	0x0801e720
 801b72c:	0801e6f8 	.word	0x0801e6f8
 801b730:	3ff00000 	.word	0x3ff00000
 801b734:	40240000 	.word	0x40240000
 801b738:	401c0000 	.word	0x401c0000
 801b73c:	40140000 	.word	0x40140000
 801b740:	3fe00000 	.word	0x3fe00000
 801b744:	4631      	mov	r1, r6
 801b746:	4628      	mov	r0, r5
 801b748:	f7e4 ff3e 	bl	80005c8 <__aeabi_dmul>
 801b74c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801b750:	9413      	str	r4, [sp, #76]	@ 0x4c
 801b752:	4656      	mov	r6, sl
 801b754:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b758:	f7e5 f9e6 	bl	8000b28 <__aeabi_d2iz>
 801b75c:	4605      	mov	r5, r0
 801b75e:	f7e4 fec9 	bl	80004f4 <__aeabi_i2d>
 801b762:	4602      	mov	r2, r0
 801b764:	460b      	mov	r3, r1
 801b766:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b76a:	f7e4 fd75 	bl	8000258 <__aeabi_dsub>
 801b76e:	3530      	adds	r5, #48	@ 0x30
 801b770:	f806 5b01 	strb.w	r5, [r6], #1
 801b774:	4602      	mov	r2, r0
 801b776:	460b      	mov	r3, r1
 801b778:	42a6      	cmp	r6, r4
 801b77a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b77e:	f04f 0200 	mov.w	r2, #0
 801b782:	d124      	bne.n	801b7ce <_dtoa_r+0x626>
 801b784:	4baf      	ldr	r3, [pc, #700]	@ (801ba44 <_dtoa_r+0x89c>)
 801b786:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801b78a:	f7e4 fd67 	bl	800025c <__adddf3>
 801b78e:	4602      	mov	r2, r0
 801b790:	460b      	mov	r3, r1
 801b792:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b796:	f7e5 f9a7 	bl	8000ae8 <__aeabi_dcmpgt>
 801b79a:	2800      	cmp	r0, #0
 801b79c:	d163      	bne.n	801b866 <_dtoa_r+0x6be>
 801b79e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801b7a2:	49a8      	ldr	r1, [pc, #672]	@ (801ba44 <_dtoa_r+0x89c>)
 801b7a4:	2000      	movs	r0, #0
 801b7a6:	f7e4 fd57 	bl	8000258 <__aeabi_dsub>
 801b7aa:	4602      	mov	r2, r0
 801b7ac:	460b      	mov	r3, r1
 801b7ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b7b2:	f7e5 f97b 	bl	8000aac <__aeabi_dcmplt>
 801b7b6:	2800      	cmp	r0, #0
 801b7b8:	f43f af14 	beq.w	801b5e4 <_dtoa_r+0x43c>
 801b7bc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801b7be:	1e73      	subs	r3, r6, #1
 801b7c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b7c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801b7c6:	2b30      	cmp	r3, #48	@ 0x30
 801b7c8:	d0f8      	beq.n	801b7bc <_dtoa_r+0x614>
 801b7ca:	4647      	mov	r7, r8
 801b7cc:	e03b      	b.n	801b846 <_dtoa_r+0x69e>
 801b7ce:	4b9e      	ldr	r3, [pc, #632]	@ (801ba48 <_dtoa_r+0x8a0>)
 801b7d0:	f7e4 fefa 	bl	80005c8 <__aeabi_dmul>
 801b7d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b7d8:	e7bc      	b.n	801b754 <_dtoa_r+0x5ac>
 801b7da:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801b7de:	4656      	mov	r6, sl
 801b7e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b7e4:	4620      	mov	r0, r4
 801b7e6:	4629      	mov	r1, r5
 801b7e8:	f7e5 f818 	bl	800081c <__aeabi_ddiv>
 801b7ec:	f7e5 f99c 	bl	8000b28 <__aeabi_d2iz>
 801b7f0:	4680      	mov	r8, r0
 801b7f2:	f7e4 fe7f 	bl	80004f4 <__aeabi_i2d>
 801b7f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b7fa:	f7e4 fee5 	bl	80005c8 <__aeabi_dmul>
 801b7fe:	4602      	mov	r2, r0
 801b800:	460b      	mov	r3, r1
 801b802:	4620      	mov	r0, r4
 801b804:	4629      	mov	r1, r5
 801b806:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801b80a:	f7e4 fd25 	bl	8000258 <__aeabi_dsub>
 801b80e:	f806 4b01 	strb.w	r4, [r6], #1
 801b812:	9d03      	ldr	r5, [sp, #12]
 801b814:	eba6 040a 	sub.w	r4, r6, sl
 801b818:	42a5      	cmp	r5, r4
 801b81a:	4602      	mov	r2, r0
 801b81c:	460b      	mov	r3, r1
 801b81e:	d133      	bne.n	801b888 <_dtoa_r+0x6e0>
 801b820:	f7e4 fd1c 	bl	800025c <__adddf3>
 801b824:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b828:	4604      	mov	r4, r0
 801b82a:	460d      	mov	r5, r1
 801b82c:	f7e5 f95c 	bl	8000ae8 <__aeabi_dcmpgt>
 801b830:	b9c0      	cbnz	r0, 801b864 <_dtoa_r+0x6bc>
 801b832:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b836:	4620      	mov	r0, r4
 801b838:	4629      	mov	r1, r5
 801b83a:	f7e5 f92d 	bl	8000a98 <__aeabi_dcmpeq>
 801b83e:	b110      	cbz	r0, 801b846 <_dtoa_r+0x69e>
 801b840:	f018 0f01 	tst.w	r8, #1
 801b844:	d10e      	bne.n	801b864 <_dtoa_r+0x6bc>
 801b846:	9902      	ldr	r1, [sp, #8]
 801b848:	4648      	mov	r0, r9
 801b84a:	f000 fb07 	bl	801be5c <_Bfree>
 801b84e:	2300      	movs	r3, #0
 801b850:	7033      	strb	r3, [r6, #0]
 801b852:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b854:	3701      	adds	r7, #1
 801b856:	601f      	str	r7, [r3, #0]
 801b858:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801b85a:	2b00      	cmp	r3, #0
 801b85c:	f000 824b 	beq.w	801bcf6 <_dtoa_r+0xb4e>
 801b860:	601e      	str	r6, [r3, #0]
 801b862:	e248      	b.n	801bcf6 <_dtoa_r+0xb4e>
 801b864:	46b8      	mov	r8, r7
 801b866:	4633      	mov	r3, r6
 801b868:	461e      	mov	r6, r3
 801b86a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b86e:	2a39      	cmp	r2, #57	@ 0x39
 801b870:	d106      	bne.n	801b880 <_dtoa_r+0x6d8>
 801b872:	459a      	cmp	sl, r3
 801b874:	d1f8      	bne.n	801b868 <_dtoa_r+0x6c0>
 801b876:	2230      	movs	r2, #48	@ 0x30
 801b878:	f108 0801 	add.w	r8, r8, #1
 801b87c:	f88a 2000 	strb.w	r2, [sl]
 801b880:	781a      	ldrb	r2, [r3, #0]
 801b882:	3201      	adds	r2, #1
 801b884:	701a      	strb	r2, [r3, #0]
 801b886:	e7a0      	b.n	801b7ca <_dtoa_r+0x622>
 801b888:	4b6f      	ldr	r3, [pc, #444]	@ (801ba48 <_dtoa_r+0x8a0>)
 801b88a:	2200      	movs	r2, #0
 801b88c:	f7e4 fe9c 	bl	80005c8 <__aeabi_dmul>
 801b890:	2200      	movs	r2, #0
 801b892:	2300      	movs	r3, #0
 801b894:	4604      	mov	r4, r0
 801b896:	460d      	mov	r5, r1
 801b898:	f7e5 f8fe 	bl	8000a98 <__aeabi_dcmpeq>
 801b89c:	2800      	cmp	r0, #0
 801b89e:	d09f      	beq.n	801b7e0 <_dtoa_r+0x638>
 801b8a0:	e7d1      	b.n	801b846 <_dtoa_r+0x69e>
 801b8a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b8a4:	2a00      	cmp	r2, #0
 801b8a6:	f000 80ea 	beq.w	801ba7e <_dtoa_r+0x8d6>
 801b8aa:	9a07      	ldr	r2, [sp, #28]
 801b8ac:	2a01      	cmp	r2, #1
 801b8ae:	f300 80cd 	bgt.w	801ba4c <_dtoa_r+0x8a4>
 801b8b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b8b4:	2a00      	cmp	r2, #0
 801b8b6:	f000 80c1 	beq.w	801ba3c <_dtoa_r+0x894>
 801b8ba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801b8be:	9c08      	ldr	r4, [sp, #32]
 801b8c0:	9e00      	ldr	r6, [sp, #0]
 801b8c2:	9a00      	ldr	r2, [sp, #0]
 801b8c4:	441a      	add	r2, r3
 801b8c6:	9200      	str	r2, [sp, #0]
 801b8c8:	9a06      	ldr	r2, [sp, #24]
 801b8ca:	2101      	movs	r1, #1
 801b8cc:	441a      	add	r2, r3
 801b8ce:	4648      	mov	r0, r9
 801b8d0:	9206      	str	r2, [sp, #24]
 801b8d2:	f000 fb77 	bl	801bfc4 <__i2b>
 801b8d6:	4605      	mov	r5, r0
 801b8d8:	b166      	cbz	r6, 801b8f4 <_dtoa_r+0x74c>
 801b8da:	9b06      	ldr	r3, [sp, #24]
 801b8dc:	2b00      	cmp	r3, #0
 801b8de:	dd09      	ble.n	801b8f4 <_dtoa_r+0x74c>
 801b8e0:	42b3      	cmp	r3, r6
 801b8e2:	9a00      	ldr	r2, [sp, #0]
 801b8e4:	bfa8      	it	ge
 801b8e6:	4633      	movge	r3, r6
 801b8e8:	1ad2      	subs	r2, r2, r3
 801b8ea:	9200      	str	r2, [sp, #0]
 801b8ec:	9a06      	ldr	r2, [sp, #24]
 801b8ee:	1af6      	subs	r6, r6, r3
 801b8f0:	1ad3      	subs	r3, r2, r3
 801b8f2:	9306      	str	r3, [sp, #24]
 801b8f4:	9b08      	ldr	r3, [sp, #32]
 801b8f6:	b30b      	cbz	r3, 801b93c <_dtoa_r+0x794>
 801b8f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b8fa:	2b00      	cmp	r3, #0
 801b8fc:	f000 80c6 	beq.w	801ba8c <_dtoa_r+0x8e4>
 801b900:	2c00      	cmp	r4, #0
 801b902:	f000 80c0 	beq.w	801ba86 <_dtoa_r+0x8de>
 801b906:	4629      	mov	r1, r5
 801b908:	4622      	mov	r2, r4
 801b90a:	4648      	mov	r0, r9
 801b90c:	f000 fc12 	bl	801c134 <__pow5mult>
 801b910:	9a02      	ldr	r2, [sp, #8]
 801b912:	4601      	mov	r1, r0
 801b914:	4605      	mov	r5, r0
 801b916:	4648      	mov	r0, r9
 801b918:	f000 fb6a 	bl	801bff0 <__multiply>
 801b91c:	9902      	ldr	r1, [sp, #8]
 801b91e:	4680      	mov	r8, r0
 801b920:	4648      	mov	r0, r9
 801b922:	f000 fa9b 	bl	801be5c <_Bfree>
 801b926:	9b08      	ldr	r3, [sp, #32]
 801b928:	1b1b      	subs	r3, r3, r4
 801b92a:	9308      	str	r3, [sp, #32]
 801b92c:	f000 80b1 	beq.w	801ba92 <_dtoa_r+0x8ea>
 801b930:	9a08      	ldr	r2, [sp, #32]
 801b932:	4641      	mov	r1, r8
 801b934:	4648      	mov	r0, r9
 801b936:	f000 fbfd 	bl	801c134 <__pow5mult>
 801b93a:	9002      	str	r0, [sp, #8]
 801b93c:	2101      	movs	r1, #1
 801b93e:	4648      	mov	r0, r9
 801b940:	f000 fb40 	bl	801bfc4 <__i2b>
 801b944:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b946:	4604      	mov	r4, r0
 801b948:	2b00      	cmp	r3, #0
 801b94a:	f000 81d8 	beq.w	801bcfe <_dtoa_r+0xb56>
 801b94e:	461a      	mov	r2, r3
 801b950:	4601      	mov	r1, r0
 801b952:	4648      	mov	r0, r9
 801b954:	f000 fbee 	bl	801c134 <__pow5mult>
 801b958:	9b07      	ldr	r3, [sp, #28]
 801b95a:	2b01      	cmp	r3, #1
 801b95c:	4604      	mov	r4, r0
 801b95e:	f300 809f 	bgt.w	801baa0 <_dtoa_r+0x8f8>
 801b962:	9b04      	ldr	r3, [sp, #16]
 801b964:	2b00      	cmp	r3, #0
 801b966:	f040 8097 	bne.w	801ba98 <_dtoa_r+0x8f0>
 801b96a:	9b05      	ldr	r3, [sp, #20]
 801b96c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b970:	2b00      	cmp	r3, #0
 801b972:	f040 8093 	bne.w	801ba9c <_dtoa_r+0x8f4>
 801b976:	9b05      	ldr	r3, [sp, #20]
 801b978:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b97c:	0d1b      	lsrs	r3, r3, #20
 801b97e:	051b      	lsls	r3, r3, #20
 801b980:	b133      	cbz	r3, 801b990 <_dtoa_r+0x7e8>
 801b982:	9b00      	ldr	r3, [sp, #0]
 801b984:	3301      	adds	r3, #1
 801b986:	9300      	str	r3, [sp, #0]
 801b988:	9b06      	ldr	r3, [sp, #24]
 801b98a:	3301      	adds	r3, #1
 801b98c:	9306      	str	r3, [sp, #24]
 801b98e:	2301      	movs	r3, #1
 801b990:	9308      	str	r3, [sp, #32]
 801b992:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b994:	2b00      	cmp	r3, #0
 801b996:	f000 81b8 	beq.w	801bd0a <_dtoa_r+0xb62>
 801b99a:	6923      	ldr	r3, [r4, #16]
 801b99c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b9a0:	6918      	ldr	r0, [r3, #16]
 801b9a2:	f000 fac3 	bl	801bf2c <__hi0bits>
 801b9a6:	f1c0 0020 	rsb	r0, r0, #32
 801b9aa:	9b06      	ldr	r3, [sp, #24]
 801b9ac:	4418      	add	r0, r3
 801b9ae:	f010 001f 	ands.w	r0, r0, #31
 801b9b2:	f000 8082 	beq.w	801baba <_dtoa_r+0x912>
 801b9b6:	f1c0 0320 	rsb	r3, r0, #32
 801b9ba:	2b04      	cmp	r3, #4
 801b9bc:	dd73      	ble.n	801baa6 <_dtoa_r+0x8fe>
 801b9be:	9b00      	ldr	r3, [sp, #0]
 801b9c0:	f1c0 001c 	rsb	r0, r0, #28
 801b9c4:	4403      	add	r3, r0
 801b9c6:	9300      	str	r3, [sp, #0]
 801b9c8:	9b06      	ldr	r3, [sp, #24]
 801b9ca:	4403      	add	r3, r0
 801b9cc:	4406      	add	r6, r0
 801b9ce:	9306      	str	r3, [sp, #24]
 801b9d0:	9b00      	ldr	r3, [sp, #0]
 801b9d2:	2b00      	cmp	r3, #0
 801b9d4:	dd05      	ble.n	801b9e2 <_dtoa_r+0x83a>
 801b9d6:	9902      	ldr	r1, [sp, #8]
 801b9d8:	461a      	mov	r2, r3
 801b9da:	4648      	mov	r0, r9
 801b9dc:	f000 fc04 	bl	801c1e8 <__lshift>
 801b9e0:	9002      	str	r0, [sp, #8]
 801b9e2:	9b06      	ldr	r3, [sp, #24]
 801b9e4:	2b00      	cmp	r3, #0
 801b9e6:	dd05      	ble.n	801b9f4 <_dtoa_r+0x84c>
 801b9e8:	4621      	mov	r1, r4
 801b9ea:	461a      	mov	r2, r3
 801b9ec:	4648      	mov	r0, r9
 801b9ee:	f000 fbfb 	bl	801c1e8 <__lshift>
 801b9f2:	4604      	mov	r4, r0
 801b9f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b9f6:	2b00      	cmp	r3, #0
 801b9f8:	d061      	beq.n	801babe <_dtoa_r+0x916>
 801b9fa:	9802      	ldr	r0, [sp, #8]
 801b9fc:	4621      	mov	r1, r4
 801b9fe:	f000 fc5f 	bl	801c2c0 <__mcmp>
 801ba02:	2800      	cmp	r0, #0
 801ba04:	da5b      	bge.n	801babe <_dtoa_r+0x916>
 801ba06:	2300      	movs	r3, #0
 801ba08:	9902      	ldr	r1, [sp, #8]
 801ba0a:	220a      	movs	r2, #10
 801ba0c:	4648      	mov	r0, r9
 801ba0e:	f000 fa47 	bl	801bea0 <__multadd>
 801ba12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ba14:	9002      	str	r0, [sp, #8]
 801ba16:	f107 38ff 	add.w	r8, r7, #4294967295
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	f000 8177 	beq.w	801bd0e <_dtoa_r+0xb66>
 801ba20:	4629      	mov	r1, r5
 801ba22:	2300      	movs	r3, #0
 801ba24:	220a      	movs	r2, #10
 801ba26:	4648      	mov	r0, r9
 801ba28:	f000 fa3a 	bl	801bea0 <__multadd>
 801ba2c:	f1bb 0f00 	cmp.w	fp, #0
 801ba30:	4605      	mov	r5, r0
 801ba32:	dc6f      	bgt.n	801bb14 <_dtoa_r+0x96c>
 801ba34:	9b07      	ldr	r3, [sp, #28]
 801ba36:	2b02      	cmp	r3, #2
 801ba38:	dc49      	bgt.n	801bace <_dtoa_r+0x926>
 801ba3a:	e06b      	b.n	801bb14 <_dtoa_r+0x96c>
 801ba3c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ba3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801ba42:	e73c      	b.n	801b8be <_dtoa_r+0x716>
 801ba44:	3fe00000 	.word	0x3fe00000
 801ba48:	40240000 	.word	0x40240000
 801ba4c:	9b03      	ldr	r3, [sp, #12]
 801ba4e:	1e5c      	subs	r4, r3, #1
 801ba50:	9b08      	ldr	r3, [sp, #32]
 801ba52:	42a3      	cmp	r3, r4
 801ba54:	db09      	blt.n	801ba6a <_dtoa_r+0x8c2>
 801ba56:	1b1c      	subs	r4, r3, r4
 801ba58:	9b03      	ldr	r3, [sp, #12]
 801ba5a:	2b00      	cmp	r3, #0
 801ba5c:	f6bf af30 	bge.w	801b8c0 <_dtoa_r+0x718>
 801ba60:	9b00      	ldr	r3, [sp, #0]
 801ba62:	9a03      	ldr	r2, [sp, #12]
 801ba64:	1a9e      	subs	r6, r3, r2
 801ba66:	2300      	movs	r3, #0
 801ba68:	e72b      	b.n	801b8c2 <_dtoa_r+0x71a>
 801ba6a:	9b08      	ldr	r3, [sp, #32]
 801ba6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ba6e:	9408      	str	r4, [sp, #32]
 801ba70:	1ae3      	subs	r3, r4, r3
 801ba72:	441a      	add	r2, r3
 801ba74:	9e00      	ldr	r6, [sp, #0]
 801ba76:	9b03      	ldr	r3, [sp, #12]
 801ba78:	920d      	str	r2, [sp, #52]	@ 0x34
 801ba7a:	2400      	movs	r4, #0
 801ba7c:	e721      	b.n	801b8c2 <_dtoa_r+0x71a>
 801ba7e:	9c08      	ldr	r4, [sp, #32]
 801ba80:	9e00      	ldr	r6, [sp, #0]
 801ba82:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801ba84:	e728      	b.n	801b8d8 <_dtoa_r+0x730>
 801ba86:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801ba8a:	e751      	b.n	801b930 <_dtoa_r+0x788>
 801ba8c:	9a08      	ldr	r2, [sp, #32]
 801ba8e:	9902      	ldr	r1, [sp, #8]
 801ba90:	e750      	b.n	801b934 <_dtoa_r+0x78c>
 801ba92:	f8cd 8008 	str.w	r8, [sp, #8]
 801ba96:	e751      	b.n	801b93c <_dtoa_r+0x794>
 801ba98:	2300      	movs	r3, #0
 801ba9a:	e779      	b.n	801b990 <_dtoa_r+0x7e8>
 801ba9c:	9b04      	ldr	r3, [sp, #16]
 801ba9e:	e777      	b.n	801b990 <_dtoa_r+0x7e8>
 801baa0:	2300      	movs	r3, #0
 801baa2:	9308      	str	r3, [sp, #32]
 801baa4:	e779      	b.n	801b99a <_dtoa_r+0x7f2>
 801baa6:	d093      	beq.n	801b9d0 <_dtoa_r+0x828>
 801baa8:	9a00      	ldr	r2, [sp, #0]
 801baaa:	331c      	adds	r3, #28
 801baac:	441a      	add	r2, r3
 801baae:	9200      	str	r2, [sp, #0]
 801bab0:	9a06      	ldr	r2, [sp, #24]
 801bab2:	441a      	add	r2, r3
 801bab4:	441e      	add	r6, r3
 801bab6:	9206      	str	r2, [sp, #24]
 801bab8:	e78a      	b.n	801b9d0 <_dtoa_r+0x828>
 801baba:	4603      	mov	r3, r0
 801babc:	e7f4      	b.n	801baa8 <_dtoa_r+0x900>
 801babe:	9b03      	ldr	r3, [sp, #12]
 801bac0:	2b00      	cmp	r3, #0
 801bac2:	46b8      	mov	r8, r7
 801bac4:	dc20      	bgt.n	801bb08 <_dtoa_r+0x960>
 801bac6:	469b      	mov	fp, r3
 801bac8:	9b07      	ldr	r3, [sp, #28]
 801baca:	2b02      	cmp	r3, #2
 801bacc:	dd1e      	ble.n	801bb0c <_dtoa_r+0x964>
 801bace:	f1bb 0f00 	cmp.w	fp, #0
 801bad2:	f47f adb1 	bne.w	801b638 <_dtoa_r+0x490>
 801bad6:	4621      	mov	r1, r4
 801bad8:	465b      	mov	r3, fp
 801bada:	2205      	movs	r2, #5
 801badc:	4648      	mov	r0, r9
 801bade:	f000 f9df 	bl	801bea0 <__multadd>
 801bae2:	4601      	mov	r1, r0
 801bae4:	4604      	mov	r4, r0
 801bae6:	9802      	ldr	r0, [sp, #8]
 801bae8:	f000 fbea 	bl	801c2c0 <__mcmp>
 801baec:	2800      	cmp	r0, #0
 801baee:	f77f ada3 	ble.w	801b638 <_dtoa_r+0x490>
 801baf2:	4656      	mov	r6, sl
 801baf4:	2331      	movs	r3, #49	@ 0x31
 801baf6:	f806 3b01 	strb.w	r3, [r6], #1
 801bafa:	f108 0801 	add.w	r8, r8, #1
 801bafe:	e59f      	b.n	801b640 <_dtoa_r+0x498>
 801bb00:	9c03      	ldr	r4, [sp, #12]
 801bb02:	46b8      	mov	r8, r7
 801bb04:	4625      	mov	r5, r4
 801bb06:	e7f4      	b.n	801baf2 <_dtoa_r+0x94a>
 801bb08:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801bb0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bb0e:	2b00      	cmp	r3, #0
 801bb10:	f000 8101 	beq.w	801bd16 <_dtoa_r+0xb6e>
 801bb14:	2e00      	cmp	r6, #0
 801bb16:	dd05      	ble.n	801bb24 <_dtoa_r+0x97c>
 801bb18:	4629      	mov	r1, r5
 801bb1a:	4632      	mov	r2, r6
 801bb1c:	4648      	mov	r0, r9
 801bb1e:	f000 fb63 	bl	801c1e8 <__lshift>
 801bb22:	4605      	mov	r5, r0
 801bb24:	9b08      	ldr	r3, [sp, #32]
 801bb26:	2b00      	cmp	r3, #0
 801bb28:	d05c      	beq.n	801bbe4 <_dtoa_r+0xa3c>
 801bb2a:	6869      	ldr	r1, [r5, #4]
 801bb2c:	4648      	mov	r0, r9
 801bb2e:	f000 f955 	bl	801bddc <_Balloc>
 801bb32:	4606      	mov	r6, r0
 801bb34:	b928      	cbnz	r0, 801bb42 <_dtoa_r+0x99a>
 801bb36:	4b82      	ldr	r3, [pc, #520]	@ (801bd40 <_dtoa_r+0xb98>)
 801bb38:	4602      	mov	r2, r0
 801bb3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801bb3e:	f7ff bb4a 	b.w	801b1d6 <_dtoa_r+0x2e>
 801bb42:	692a      	ldr	r2, [r5, #16]
 801bb44:	3202      	adds	r2, #2
 801bb46:	0092      	lsls	r2, r2, #2
 801bb48:	f105 010c 	add.w	r1, r5, #12
 801bb4c:	300c      	adds	r0, #12
 801bb4e:	f7ff fa94 	bl	801b07a <memcpy>
 801bb52:	2201      	movs	r2, #1
 801bb54:	4631      	mov	r1, r6
 801bb56:	4648      	mov	r0, r9
 801bb58:	f000 fb46 	bl	801c1e8 <__lshift>
 801bb5c:	f10a 0301 	add.w	r3, sl, #1
 801bb60:	9300      	str	r3, [sp, #0]
 801bb62:	eb0a 030b 	add.w	r3, sl, fp
 801bb66:	9308      	str	r3, [sp, #32]
 801bb68:	9b04      	ldr	r3, [sp, #16]
 801bb6a:	f003 0301 	and.w	r3, r3, #1
 801bb6e:	462f      	mov	r7, r5
 801bb70:	9306      	str	r3, [sp, #24]
 801bb72:	4605      	mov	r5, r0
 801bb74:	9b00      	ldr	r3, [sp, #0]
 801bb76:	9802      	ldr	r0, [sp, #8]
 801bb78:	4621      	mov	r1, r4
 801bb7a:	f103 3bff 	add.w	fp, r3, #4294967295
 801bb7e:	f7ff fa8a 	bl	801b096 <quorem>
 801bb82:	4603      	mov	r3, r0
 801bb84:	3330      	adds	r3, #48	@ 0x30
 801bb86:	9003      	str	r0, [sp, #12]
 801bb88:	4639      	mov	r1, r7
 801bb8a:	9802      	ldr	r0, [sp, #8]
 801bb8c:	9309      	str	r3, [sp, #36]	@ 0x24
 801bb8e:	f000 fb97 	bl	801c2c0 <__mcmp>
 801bb92:	462a      	mov	r2, r5
 801bb94:	9004      	str	r0, [sp, #16]
 801bb96:	4621      	mov	r1, r4
 801bb98:	4648      	mov	r0, r9
 801bb9a:	f000 fbad 	bl	801c2f8 <__mdiff>
 801bb9e:	68c2      	ldr	r2, [r0, #12]
 801bba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bba2:	4606      	mov	r6, r0
 801bba4:	bb02      	cbnz	r2, 801bbe8 <_dtoa_r+0xa40>
 801bba6:	4601      	mov	r1, r0
 801bba8:	9802      	ldr	r0, [sp, #8]
 801bbaa:	f000 fb89 	bl	801c2c0 <__mcmp>
 801bbae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bbb0:	4602      	mov	r2, r0
 801bbb2:	4631      	mov	r1, r6
 801bbb4:	4648      	mov	r0, r9
 801bbb6:	920c      	str	r2, [sp, #48]	@ 0x30
 801bbb8:	9309      	str	r3, [sp, #36]	@ 0x24
 801bbba:	f000 f94f 	bl	801be5c <_Bfree>
 801bbbe:	9b07      	ldr	r3, [sp, #28]
 801bbc0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801bbc2:	9e00      	ldr	r6, [sp, #0]
 801bbc4:	ea42 0103 	orr.w	r1, r2, r3
 801bbc8:	9b06      	ldr	r3, [sp, #24]
 801bbca:	4319      	orrs	r1, r3
 801bbcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bbce:	d10d      	bne.n	801bbec <_dtoa_r+0xa44>
 801bbd0:	2b39      	cmp	r3, #57	@ 0x39
 801bbd2:	d027      	beq.n	801bc24 <_dtoa_r+0xa7c>
 801bbd4:	9a04      	ldr	r2, [sp, #16]
 801bbd6:	2a00      	cmp	r2, #0
 801bbd8:	dd01      	ble.n	801bbde <_dtoa_r+0xa36>
 801bbda:	9b03      	ldr	r3, [sp, #12]
 801bbdc:	3331      	adds	r3, #49	@ 0x31
 801bbde:	f88b 3000 	strb.w	r3, [fp]
 801bbe2:	e52e      	b.n	801b642 <_dtoa_r+0x49a>
 801bbe4:	4628      	mov	r0, r5
 801bbe6:	e7b9      	b.n	801bb5c <_dtoa_r+0x9b4>
 801bbe8:	2201      	movs	r2, #1
 801bbea:	e7e2      	b.n	801bbb2 <_dtoa_r+0xa0a>
 801bbec:	9904      	ldr	r1, [sp, #16]
 801bbee:	2900      	cmp	r1, #0
 801bbf0:	db04      	blt.n	801bbfc <_dtoa_r+0xa54>
 801bbf2:	9807      	ldr	r0, [sp, #28]
 801bbf4:	4301      	orrs	r1, r0
 801bbf6:	9806      	ldr	r0, [sp, #24]
 801bbf8:	4301      	orrs	r1, r0
 801bbfa:	d120      	bne.n	801bc3e <_dtoa_r+0xa96>
 801bbfc:	2a00      	cmp	r2, #0
 801bbfe:	ddee      	ble.n	801bbde <_dtoa_r+0xa36>
 801bc00:	9902      	ldr	r1, [sp, #8]
 801bc02:	9300      	str	r3, [sp, #0]
 801bc04:	2201      	movs	r2, #1
 801bc06:	4648      	mov	r0, r9
 801bc08:	f000 faee 	bl	801c1e8 <__lshift>
 801bc0c:	4621      	mov	r1, r4
 801bc0e:	9002      	str	r0, [sp, #8]
 801bc10:	f000 fb56 	bl	801c2c0 <__mcmp>
 801bc14:	2800      	cmp	r0, #0
 801bc16:	9b00      	ldr	r3, [sp, #0]
 801bc18:	dc02      	bgt.n	801bc20 <_dtoa_r+0xa78>
 801bc1a:	d1e0      	bne.n	801bbde <_dtoa_r+0xa36>
 801bc1c:	07da      	lsls	r2, r3, #31
 801bc1e:	d5de      	bpl.n	801bbde <_dtoa_r+0xa36>
 801bc20:	2b39      	cmp	r3, #57	@ 0x39
 801bc22:	d1da      	bne.n	801bbda <_dtoa_r+0xa32>
 801bc24:	2339      	movs	r3, #57	@ 0x39
 801bc26:	f88b 3000 	strb.w	r3, [fp]
 801bc2a:	4633      	mov	r3, r6
 801bc2c:	461e      	mov	r6, r3
 801bc2e:	3b01      	subs	r3, #1
 801bc30:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801bc34:	2a39      	cmp	r2, #57	@ 0x39
 801bc36:	d04e      	beq.n	801bcd6 <_dtoa_r+0xb2e>
 801bc38:	3201      	adds	r2, #1
 801bc3a:	701a      	strb	r2, [r3, #0]
 801bc3c:	e501      	b.n	801b642 <_dtoa_r+0x49a>
 801bc3e:	2a00      	cmp	r2, #0
 801bc40:	dd03      	ble.n	801bc4a <_dtoa_r+0xaa2>
 801bc42:	2b39      	cmp	r3, #57	@ 0x39
 801bc44:	d0ee      	beq.n	801bc24 <_dtoa_r+0xa7c>
 801bc46:	3301      	adds	r3, #1
 801bc48:	e7c9      	b.n	801bbde <_dtoa_r+0xa36>
 801bc4a:	9a00      	ldr	r2, [sp, #0]
 801bc4c:	9908      	ldr	r1, [sp, #32]
 801bc4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 801bc52:	428a      	cmp	r2, r1
 801bc54:	d028      	beq.n	801bca8 <_dtoa_r+0xb00>
 801bc56:	9902      	ldr	r1, [sp, #8]
 801bc58:	2300      	movs	r3, #0
 801bc5a:	220a      	movs	r2, #10
 801bc5c:	4648      	mov	r0, r9
 801bc5e:	f000 f91f 	bl	801bea0 <__multadd>
 801bc62:	42af      	cmp	r7, r5
 801bc64:	9002      	str	r0, [sp, #8]
 801bc66:	f04f 0300 	mov.w	r3, #0
 801bc6a:	f04f 020a 	mov.w	r2, #10
 801bc6e:	4639      	mov	r1, r7
 801bc70:	4648      	mov	r0, r9
 801bc72:	d107      	bne.n	801bc84 <_dtoa_r+0xadc>
 801bc74:	f000 f914 	bl	801bea0 <__multadd>
 801bc78:	4607      	mov	r7, r0
 801bc7a:	4605      	mov	r5, r0
 801bc7c:	9b00      	ldr	r3, [sp, #0]
 801bc7e:	3301      	adds	r3, #1
 801bc80:	9300      	str	r3, [sp, #0]
 801bc82:	e777      	b.n	801bb74 <_dtoa_r+0x9cc>
 801bc84:	f000 f90c 	bl	801bea0 <__multadd>
 801bc88:	4629      	mov	r1, r5
 801bc8a:	4607      	mov	r7, r0
 801bc8c:	2300      	movs	r3, #0
 801bc8e:	220a      	movs	r2, #10
 801bc90:	4648      	mov	r0, r9
 801bc92:	f000 f905 	bl	801bea0 <__multadd>
 801bc96:	4605      	mov	r5, r0
 801bc98:	e7f0      	b.n	801bc7c <_dtoa_r+0xad4>
 801bc9a:	f1bb 0f00 	cmp.w	fp, #0
 801bc9e:	bfcc      	ite	gt
 801bca0:	465e      	movgt	r6, fp
 801bca2:	2601      	movle	r6, #1
 801bca4:	4456      	add	r6, sl
 801bca6:	2700      	movs	r7, #0
 801bca8:	9902      	ldr	r1, [sp, #8]
 801bcaa:	9300      	str	r3, [sp, #0]
 801bcac:	2201      	movs	r2, #1
 801bcae:	4648      	mov	r0, r9
 801bcb0:	f000 fa9a 	bl	801c1e8 <__lshift>
 801bcb4:	4621      	mov	r1, r4
 801bcb6:	9002      	str	r0, [sp, #8]
 801bcb8:	f000 fb02 	bl	801c2c0 <__mcmp>
 801bcbc:	2800      	cmp	r0, #0
 801bcbe:	dcb4      	bgt.n	801bc2a <_dtoa_r+0xa82>
 801bcc0:	d102      	bne.n	801bcc8 <_dtoa_r+0xb20>
 801bcc2:	9b00      	ldr	r3, [sp, #0]
 801bcc4:	07db      	lsls	r3, r3, #31
 801bcc6:	d4b0      	bmi.n	801bc2a <_dtoa_r+0xa82>
 801bcc8:	4633      	mov	r3, r6
 801bcca:	461e      	mov	r6, r3
 801bccc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bcd0:	2a30      	cmp	r2, #48	@ 0x30
 801bcd2:	d0fa      	beq.n	801bcca <_dtoa_r+0xb22>
 801bcd4:	e4b5      	b.n	801b642 <_dtoa_r+0x49a>
 801bcd6:	459a      	cmp	sl, r3
 801bcd8:	d1a8      	bne.n	801bc2c <_dtoa_r+0xa84>
 801bcda:	2331      	movs	r3, #49	@ 0x31
 801bcdc:	f108 0801 	add.w	r8, r8, #1
 801bce0:	f88a 3000 	strb.w	r3, [sl]
 801bce4:	e4ad      	b.n	801b642 <_dtoa_r+0x49a>
 801bce6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801bce8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801bd44 <_dtoa_r+0xb9c>
 801bcec:	b11b      	cbz	r3, 801bcf6 <_dtoa_r+0xb4e>
 801bcee:	f10a 0308 	add.w	r3, sl, #8
 801bcf2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801bcf4:	6013      	str	r3, [r2, #0]
 801bcf6:	4650      	mov	r0, sl
 801bcf8:	b017      	add	sp, #92	@ 0x5c
 801bcfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bcfe:	9b07      	ldr	r3, [sp, #28]
 801bd00:	2b01      	cmp	r3, #1
 801bd02:	f77f ae2e 	ble.w	801b962 <_dtoa_r+0x7ba>
 801bd06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bd08:	9308      	str	r3, [sp, #32]
 801bd0a:	2001      	movs	r0, #1
 801bd0c:	e64d      	b.n	801b9aa <_dtoa_r+0x802>
 801bd0e:	f1bb 0f00 	cmp.w	fp, #0
 801bd12:	f77f aed9 	ble.w	801bac8 <_dtoa_r+0x920>
 801bd16:	4656      	mov	r6, sl
 801bd18:	9802      	ldr	r0, [sp, #8]
 801bd1a:	4621      	mov	r1, r4
 801bd1c:	f7ff f9bb 	bl	801b096 <quorem>
 801bd20:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801bd24:	f806 3b01 	strb.w	r3, [r6], #1
 801bd28:	eba6 020a 	sub.w	r2, r6, sl
 801bd2c:	4593      	cmp	fp, r2
 801bd2e:	ddb4      	ble.n	801bc9a <_dtoa_r+0xaf2>
 801bd30:	9902      	ldr	r1, [sp, #8]
 801bd32:	2300      	movs	r3, #0
 801bd34:	220a      	movs	r2, #10
 801bd36:	4648      	mov	r0, r9
 801bd38:	f000 f8b2 	bl	801bea0 <__multadd>
 801bd3c:	9002      	str	r0, [sp, #8]
 801bd3e:	e7eb      	b.n	801bd18 <_dtoa_r+0xb70>
 801bd40:	0801e629 	.word	0x0801e629
 801bd44:	0801e5ad 	.word	0x0801e5ad

0801bd48 <_free_r>:
 801bd48:	b538      	push	{r3, r4, r5, lr}
 801bd4a:	4605      	mov	r5, r0
 801bd4c:	2900      	cmp	r1, #0
 801bd4e:	d041      	beq.n	801bdd4 <_free_r+0x8c>
 801bd50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bd54:	1f0c      	subs	r4, r1, #4
 801bd56:	2b00      	cmp	r3, #0
 801bd58:	bfb8      	it	lt
 801bd5a:	18e4      	addlt	r4, r4, r3
 801bd5c:	f7fe fa56 	bl	801a20c <__malloc_lock>
 801bd60:	4a1d      	ldr	r2, [pc, #116]	@ (801bdd8 <_free_r+0x90>)
 801bd62:	6813      	ldr	r3, [r2, #0]
 801bd64:	b933      	cbnz	r3, 801bd74 <_free_r+0x2c>
 801bd66:	6063      	str	r3, [r4, #4]
 801bd68:	6014      	str	r4, [r2, #0]
 801bd6a:	4628      	mov	r0, r5
 801bd6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bd70:	f7fe ba52 	b.w	801a218 <__malloc_unlock>
 801bd74:	42a3      	cmp	r3, r4
 801bd76:	d908      	bls.n	801bd8a <_free_r+0x42>
 801bd78:	6820      	ldr	r0, [r4, #0]
 801bd7a:	1821      	adds	r1, r4, r0
 801bd7c:	428b      	cmp	r3, r1
 801bd7e:	bf01      	itttt	eq
 801bd80:	6819      	ldreq	r1, [r3, #0]
 801bd82:	685b      	ldreq	r3, [r3, #4]
 801bd84:	1809      	addeq	r1, r1, r0
 801bd86:	6021      	streq	r1, [r4, #0]
 801bd88:	e7ed      	b.n	801bd66 <_free_r+0x1e>
 801bd8a:	461a      	mov	r2, r3
 801bd8c:	685b      	ldr	r3, [r3, #4]
 801bd8e:	b10b      	cbz	r3, 801bd94 <_free_r+0x4c>
 801bd90:	42a3      	cmp	r3, r4
 801bd92:	d9fa      	bls.n	801bd8a <_free_r+0x42>
 801bd94:	6811      	ldr	r1, [r2, #0]
 801bd96:	1850      	adds	r0, r2, r1
 801bd98:	42a0      	cmp	r0, r4
 801bd9a:	d10b      	bne.n	801bdb4 <_free_r+0x6c>
 801bd9c:	6820      	ldr	r0, [r4, #0]
 801bd9e:	4401      	add	r1, r0
 801bda0:	1850      	adds	r0, r2, r1
 801bda2:	4283      	cmp	r3, r0
 801bda4:	6011      	str	r1, [r2, #0]
 801bda6:	d1e0      	bne.n	801bd6a <_free_r+0x22>
 801bda8:	6818      	ldr	r0, [r3, #0]
 801bdaa:	685b      	ldr	r3, [r3, #4]
 801bdac:	6053      	str	r3, [r2, #4]
 801bdae:	4408      	add	r0, r1
 801bdb0:	6010      	str	r0, [r2, #0]
 801bdb2:	e7da      	b.n	801bd6a <_free_r+0x22>
 801bdb4:	d902      	bls.n	801bdbc <_free_r+0x74>
 801bdb6:	230c      	movs	r3, #12
 801bdb8:	602b      	str	r3, [r5, #0]
 801bdba:	e7d6      	b.n	801bd6a <_free_r+0x22>
 801bdbc:	6820      	ldr	r0, [r4, #0]
 801bdbe:	1821      	adds	r1, r4, r0
 801bdc0:	428b      	cmp	r3, r1
 801bdc2:	bf04      	itt	eq
 801bdc4:	6819      	ldreq	r1, [r3, #0]
 801bdc6:	685b      	ldreq	r3, [r3, #4]
 801bdc8:	6063      	str	r3, [r4, #4]
 801bdca:	bf04      	itt	eq
 801bdcc:	1809      	addeq	r1, r1, r0
 801bdce:	6021      	streq	r1, [r4, #0]
 801bdd0:	6054      	str	r4, [r2, #4]
 801bdd2:	e7ca      	b.n	801bd6a <_free_r+0x22>
 801bdd4:	bd38      	pop	{r3, r4, r5, pc}
 801bdd6:	bf00      	nop
 801bdd8:	200019e4 	.word	0x200019e4

0801bddc <_Balloc>:
 801bddc:	b570      	push	{r4, r5, r6, lr}
 801bdde:	69c6      	ldr	r6, [r0, #28]
 801bde0:	4604      	mov	r4, r0
 801bde2:	460d      	mov	r5, r1
 801bde4:	b976      	cbnz	r6, 801be04 <_Balloc+0x28>
 801bde6:	2010      	movs	r0, #16
 801bde8:	f7fe f95e 	bl	801a0a8 <malloc>
 801bdec:	4602      	mov	r2, r0
 801bdee:	61e0      	str	r0, [r4, #28]
 801bdf0:	b920      	cbnz	r0, 801bdfc <_Balloc+0x20>
 801bdf2:	4b18      	ldr	r3, [pc, #96]	@ (801be54 <_Balloc+0x78>)
 801bdf4:	4818      	ldr	r0, [pc, #96]	@ (801be58 <_Balloc+0x7c>)
 801bdf6:	216b      	movs	r1, #107	@ 0x6b
 801bdf8:	f000 ff34 	bl	801cc64 <__assert_func>
 801bdfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801be00:	6006      	str	r6, [r0, #0]
 801be02:	60c6      	str	r6, [r0, #12]
 801be04:	69e6      	ldr	r6, [r4, #28]
 801be06:	68f3      	ldr	r3, [r6, #12]
 801be08:	b183      	cbz	r3, 801be2c <_Balloc+0x50>
 801be0a:	69e3      	ldr	r3, [r4, #28]
 801be0c:	68db      	ldr	r3, [r3, #12]
 801be0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801be12:	b9b8      	cbnz	r0, 801be44 <_Balloc+0x68>
 801be14:	2101      	movs	r1, #1
 801be16:	fa01 f605 	lsl.w	r6, r1, r5
 801be1a:	1d72      	adds	r2, r6, #5
 801be1c:	0092      	lsls	r2, r2, #2
 801be1e:	4620      	mov	r0, r4
 801be20:	f000 ff3e 	bl	801cca0 <_calloc_r>
 801be24:	b160      	cbz	r0, 801be40 <_Balloc+0x64>
 801be26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801be2a:	e00e      	b.n	801be4a <_Balloc+0x6e>
 801be2c:	2221      	movs	r2, #33	@ 0x21
 801be2e:	2104      	movs	r1, #4
 801be30:	4620      	mov	r0, r4
 801be32:	f000 ff35 	bl	801cca0 <_calloc_r>
 801be36:	69e3      	ldr	r3, [r4, #28]
 801be38:	60f0      	str	r0, [r6, #12]
 801be3a:	68db      	ldr	r3, [r3, #12]
 801be3c:	2b00      	cmp	r3, #0
 801be3e:	d1e4      	bne.n	801be0a <_Balloc+0x2e>
 801be40:	2000      	movs	r0, #0
 801be42:	bd70      	pop	{r4, r5, r6, pc}
 801be44:	6802      	ldr	r2, [r0, #0]
 801be46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801be4a:	2300      	movs	r3, #0
 801be4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801be50:	e7f7      	b.n	801be42 <_Balloc+0x66>
 801be52:	bf00      	nop
 801be54:	0801e5ba 	.word	0x0801e5ba
 801be58:	0801e63a 	.word	0x0801e63a

0801be5c <_Bfree>:
 801be5c:	b570      	push	{r4, r5, r6, lr}
 801be5e:	69c6      	ldr	r6, [r0, #28]
 801be60:	4605      	mov	r5, r0
 801be62:	460c      	mov	r4, r1
 801be64:	b976      	cbnz	r6, 801be84 <_Bfree+0x28>
 801be66:	2010      	movs	r0, #16
 801be68:	f7fe f91e 	bl	801a0a8 <malloc>
 801be6c:	4602      	mov	r2, r0
 801be6e:	61e8      	str	r0, [r5, #28]
 801be70:	b920      	cbnz	r0, 801be7c <_Bfree+0x20>
 801be72:	4b09      	ldr	r3, [pc, #36]	@ (801be98 <_Bfree+0x3c>)
 801be74:	4809      	ldr	r0, [pc, #36]	@ (801be9c <_Bfree+0x40>)
 801be76:	218f      	movs	r1, #143	@ 0x8f
 801be78:	f000 fef4 	bl	801cc64 <__assert_func>
 801be7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801be80:	6006      	str	r6, [r0, #0]
 801be82:	60c6      	str	r6, [r0, #12]
 801be84:	b13c      	cbz	r4, 801be96 <_Bfree+0x3a>
 801be86:	69eb      	ldr	r3, [r5, #28]
 801be88:	6862      	ldr	r2, [r4, #4]
 801be8a:	68db      	ldr	r3, [r3, #12]
 801be8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801be90:	6021      	str	r1, [r4, #0]
 801be92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801be96:	bd70      	pop	{r4, r5, r6, pc}
 801be98:	0801e5ba 	.word	0x0801e5ba
 801be9c:	0801e63a 	.word	0x0801e63a

0801bea0 <__multadd>:
 801bea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bea4:	690d      	ldr	r5, [r1, #16]
 801bea6:	4607      	mov	r7, r0
 801bea8:	460c      	mov	r4, r1
 801beaa:	461e      	mov	r6, r3
 801beac:	f101 0c14 	add.w	ip, r1, #20
 801beb0:	2000      	movs	r0, #0
 801beb2:	f8dc 3000 	ldr.w	r3, [ip]
 801beb6:	b299      	uxth	r1, r3
 801beb8:	fb02 6101 	mla	r1, r2, r1, r6
 801bebc:	0c1e      	lsrs	r6, r3, #16
 801bebe:	0c0b      	lsrs	r3, r1, #16
 801bec0:	fb02 3306 	mla	r3, r2, r6, r3
 801bec4:	b289      	uxth	r1, r1
 801bec6:	3001      	adds	r0, #1
 801bec8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801becc:	4285      	cmp	r5, r0
 801bece:	f84c 1b04 	str.w	r1, [ip], #4
 801bed2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801bed6:	dcec      	bgt.n	801beb2 <__multadd+0x12>
 801bed8:	b30e      	cbz	r6, 801bf1e <__multadd+0x7e>
 801beda:	68a3      	ldr	r3, [r4, #8]
 801bedc:	42ab      	cmp	r3, r5
 801bede:	dc19      	bgt.n	801bf14 <__multadd+0x74>
 801bee0:	6861      	ldr	r1, [r4, #4]
 801bee2:	4638      	mov	r0, r7
 801bee4:	3101      	adds	r1, #1
 801bee6:	f7ff ff79 	bl	801bddc <_Balloc>
 801beea:	4680      	mov	r8, r0
 801beec:	b928      	cbnz	r0, 801befa <__multadd+0x5a>
 801beee:	4602      	mov	r2, r0
 801bef0:	4b0c      	ldr	r3, [pc, #48]	@ (801bf24 <__multadd+0x84>)
 801bef2:	480d      	ldr	r0, [pc, #52]	@ (801bf28 <__multadd+0x88>)
 801bef4:	21ba      	movs	r1, #186	@ 0xba
 801bef6:	f000 feb5 	bl	801cc64 <__assert_func>
 801befa:	6922      	ldr	r2, [r4, #16]
 801befc:	3202      	adds	r2, #2
 801befe:	f104 010c 	add.w	r1, r4, #12
 801bf02:	0092      	lsls	r2, r2, #2
 801bf04:	300c      	adds	r0, #12
 801bf06:	f7ff f8b8 	bl	801b07a <memcpy>
 801bf0a:	4621      	mov	r1, r4
 801bf0c:	4638      	mov	r0, r7
 801bf0e:	f7ff ffa5 	bl	801be5c <_Bfree>
 801bf12:	4644      	mov	r4, r8
 801bf14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801bf18:	3501      	adds	r5, #1
 801bf1a:	615e      	str	r6, [r3, #20]
 801bf1c:	6125      	str	r5, [r4, #16]
 801bf1e:	4620      	mov	r0, r4
 801bf20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf24:	0801e629 	.word	0x0801e629
 801bf28:	0801e63a 	.word	0x0801e63a

0801bf2c <__hi0bits>:
 801bf2c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801bf30:	4603      	mov	r3, r0
 801bf32:	bf36      	itet	cc
 801bf34:	0403      	lslcc	r3, r0, #16
 801bf36:	2000      	movcs	r0, #0
 801bf38:	2010      	movcc	r0, #16
 801bf3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801bf3e:	bf3c      	itt	cc
 801bf40:	021b      	lslcc	r3, r3, #8
 801bf42:	3008      	addcc	r0, #8
 801bf44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801bf48:	bf3c      	itt	cc
 801bf4a:	011b      	lslcc	r3, r3, #4
 801bf4c:	3004      	addcc	r0, #4
 801bf4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801bf52:	bf3c      	itt	cc
 801bf54:	009b      	lslcc	r3, r3, #2
 801bf56:	3002      	addcc	r0, #2
 801bf58:	2b00      	cmp	r3, #0
 801bf5a:	db05      	blt.n	801bf68 <__hi0bits+0x3c>
 801bf5c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801bf60:	f100 0001 	add.w	r0, r0, #1
 801bf64:	bf08      	it	eq
 801bf66:	2020      	moveq	r0, #32
 801bf68:	4770      	bx	lr

0801bf6a <__lo0bits>:
 801bf6a:	6803      	ldr	r3, [r0, #0]
 801bf6c:	4602      	mov	r2, r0
 801bf6e:	f013 0007 	ands.w	r0, r3, #7
 801bf72:	d00b      	beq.n	801bf8c <__lo0bits+0x22>
 801bf74:	07d9      	lsls	r1, r3, #31
 801bf76:	d421      	bmi.n	801bfbc <__lo0bits+0x52>
 801bf78:	0798      	lsls	r0, r3, #30
 801bf7a:	bf49      	itett	mi
 801bf7c:	085b      	lsrmi	r3, r3, #1
 801bf7e:	089b      	lsrpl	r3, r3, #2
 801bf80:	2001      	movmi	r0, #1
 801bf82:	6013      	strmi	r3, [r2, #0]
 801bf84:	bf5c      	itt	pl
 801bf86:	6013      	strpl	r3, [r2, #0]
 801bf88:	2002      	movpl	r0, #2
 801bf8a:	4770      	bx	lr
 801bf8c:	b299      	uxth	r1, r3
 801bf8e:	b909      	cbnz	r1, 801bf94 <__lo0bits+0x2a>
 801bf90:	0c1b      	lsrs	r3, r3, #16
 801bf92:	2010      	movs	r0, #16
 801bf94:	b2d9      	uxtb	r1, r3
 801bf96:	b909      	cbnz	r1, 801bf9c <__lo0bits+0x32>
 801bf98:	3008      	adds	r0, #8
 801bf9a:	0a1b      	lsrs	r3, r3, #8
 801bf9c:	0719      	lsls	r1, r3, #28
 801bf9e:	bf04      	itt	eq
 801bfa0:	091b      	lsreq	r3, r3, #4
 801bfa2:	3004      	addeq	r0, #4
 801bfa4:	0799      	lsls	r1, r3, #30
 801bfa6:	bf04      	itt	eq
 801bfa8:	089b      	lsreq	r3, r3, #2
 801bfaa:	3002      	addeq	r0, #2
 801bfac:	07d9      	lsls	r1, r3, #31
 801bfae:	d403      	bmi.n	801bfb8 <__lo0bits+0x4e>
 801bfb0:	085b      	lsrs	r3, r3, #1
 801bfb2:	f100 0001 	add.w	r0, r0, #1
 801bfb6:	d003      	beq.n	801bfc0 <__lo0bits+0x56>
 801bfb8:	6013      	str	r3, [r2, #0]
 801bfba:	4770      	bx	lr
 801bfbc:	2000      	movs	r0, #0
 801bfbe:	4770      	bx	lr
 801bfc0:	2020      	movs	r0, #32
 801bfc2:	4770      	bx	lr

0801bfc4 <__i2b>:
 801bfc4:	b510      	push	{r4, lr}
 801bfc6:	460c      	mov	r4, r1
 801bfc8:	2101      	movs	r1, #1
 801bfca:	f7ff ff07 	bl	801bddc <_Balloc>
 801bfce:	4602      	mov	r2, r0
 801bfd0:	b928      	cbnz	r0, 801bfde <__i2b+0x1a>
 801bfd2:	4b05      	ldr	r3, [pc, #20]	@ (801bfe8 <__i2b+0x24>)
 801bfd4:	4805      	ldr	r0, [pc, #20]	@ (801bfec <__i2b+0x28>)
 801bfd6:	f240 1145 	movw	r1, #325	@ 0x145
 801bfda:	f000 fe43 	bl	801cc64 <__assert_func>
 801bfde:	2301      	movs	r3, #1
 801bfe0:	6144      	str	r4, [r0, #20]
 801bfe2:	6103      	str	r3, [r0, #16]
 801bfe4:	bd10      	pop	{r4, pc}
 801bfe6:	bf00      	nop
 801bfe8:	0801e629 	.word	0x0801e629
 801bfec:	0801e63a 	.word	0x0801e63a

0801bff0 <__multiply>:
 801bff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bff4:	4617      	mov	r7, r2
 801bff6:	690a      	ldr	r2, [r1, #16]
 801bff8:	693b      	ldr	r3, [r7, #16]
 801bffa:	429a      	cmp	r2, r3
 801bffc:	bfa8      	it	ge
 801bffe:	463b      	movge	r3, r7
 801c000:	4689      	mov	r9, r1
 801c002:	bfa4      	itt	ge
 801c004:	460f      	movge	r7, r1
 801c006:	4699      	movge	r9, r3
 801c008:	693d      	ldr	r5, [r7, #16]
 801c00a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801c00e:	68bb      	ldr	r3, [r7, #8]
 801c010:	6879      	ldr	r1, [r7, #4]
 801c012:	eb05 060a 	add.w	r6, r5, sl
 801c016:	42b3      	cmp	r3, r6
 801c018:	b085      	sub	sp, #20
 801c01a:	bfb8      	it	lt
 801c01c:	3101      	addlt	r1, #1
 801c01e:	f7ff fedd 	bl	801bddc <_Balloc>
 801c022:	b930      	cbnz	r0, 801c032 <__multiply+0x42>
 801c024:	4602      	mov	r2, r0
 801c026:	4b41      	ldr	r3, [pc, #260]	@ (801c12c <__multiply+0x13c>)
 801c028:	4841      	ldr	r0, [pc, #260]	@ (801c130 <__multiply+0x140>)
 801c02a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801c02e:	f000 fe19 	bl	801cc64 <__assert_func>
 801c032:	f100 0414 	add.w	r4, r0, #20
 801c036:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801c03a:	4623      	mov	r3, r4
 801c03c:	2200      	movs	r2, #0
 801c03e:	4573      	cmp	r3, lr
 801c040:	d320      	bcc.n	801c084 <__multiply+0x94>
 801c042:	f107 0814 	add.w	r8, r7, #20
 801c046:	f109 0114 	add.w	r1, r9, #20
 801c04a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801c04e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801c052:	9302      	str	r3, [sp, #8]
 801c054:	1beb      	subs	r3, r5, r7
 801c056:	3b15      	subs	r3, #21
 801c058:	f023 0303 	bic.w	r3, r3, #3
 801c05c:	3304      	adds	r3, #4
 801c05e:	3715      	adds	r7, #21
 801c060:	42bd      	cmp	r5, r7
 801c062:	bf38      	it	cc
 801c064:	2304      	movcc	r3, #4
 801c066:	9301      	str	r3, [sp, #4]
 801c068:	9b02      	ldr	r3, [sp, #8]
 801c06a:	9103      	str	r1, [sp, #12]
 801c06c:	428b      	cmp	r3, r1
 801c06e:	d80c      	bhi.n	801c08a <__multiply+0x9a>
 801c070:	2e00      	cmp	r6, #0
 801c072:	dd03      	ble.n	801c07c <__multiply+0x8c>
 801c074:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801c078:	2b00      	cmp	r3, #0
 801c07a:	d055      	beq.n	801c128 <__multiply+0x138>
 801c07c:	6106      	str	r6, [r0, #16]
 801c07e:	b005      	add	sp, #20
 801c080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c084:	f843 2b04 	str.w	r2, [r3], #4
 801c088:	e7d9      	b.n	801c03e <__multiply+0x4e>
 801c08a:	f8b1 a000 	ldrh.w	sl, [r1]
 801c08e:	f1ba 0f00 	cmp.w	sl, #0
 801c092:	d01f      	beq.n	801c0d4 <__multiply+0xe4>
 801c094:	46c4      	mov	ip, r8
 801c096:	46a1      	mov	r9, r4
 801c098:	2700      	movs	r7, #0
 801c09a:	f85c 2b04 	ldr.w	r2, [ip], #4
 801c09e:	f8d9 3000 	ldr.w	r3, [r9]
 801c0a2:	fa1f fb82 	uxth.w	fp, r2
 801c0a6:	b29b      	uxth	r3, r3
 801c0a8:	fb0a 330b 	mla	r3, sl, fp, r3
 801c0ac:	443b      	add	r3, r7
 801c0ae:	f8d9 7000 	ldr.w	r7, [r9]
 801c0b2:	0c12      	lsrs	r2, r2, #16
 801c0b4:	0c3f      	lsrs	r7, r7, #16
 801c0b6:	fb0a 7202 	mla	r2, sl, r2, r7
 801c0ba:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801c0be:	b29b      	uxth	r3, r3
 801c0c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c0c4:	4565      	cmp	r5, ip
 801c0c6:	f849 3b04 	str.w	r3, [r9], #4
 801c0ca:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801c0ce:	d8e4      	bhi.n	801c09a <__multiply+0xaa>
 801c0d0:	9b01      	ldr	r3, [sp, #4]
 801c0d2:	50e7      	str	r7, [r4, r3]
 801c0d4:	9b03      	ldr	r3, [sp, #12]
 801c0d6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801c0da:	3104      	adds	r1, #4
 801c0dc:	f1b9 0f00 	cmp.w	r9, #0
 801c0e0:	d020      	beq.n	801c124 <__multiply+0x134>
 801c0e2:	6823      	ldr	r3, [r4, #0]
 801c0e4:	4647      	mov	r7, r8
 801c0e6:	46a4      	mov	ip, r4
 801c0e8:	f04f 0a00 	mov.w	sl, #0
 801c0ec:	f8b7 b000 	ldrh.w	fp, [r7]
 801c0f0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801c0f4:	fb09 220b 	mla	r2, r9, fp, r2
 801c0f8:	4452      	add	r2, sl
 801c0fa:	b29b      	uxth	r3, r3
 801c0fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c100:	f84c 3b04 	str.w	r3, [ip], #4
 801c104:	f857 3b04 	ldr.w	r3, [r7], #4
 801c108:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c10c:	f8bc 3000 	ldrh.w	r3, [ip]
 801c110:	fb09 330a 	mla	r3, r9, sl, r3
 801c114:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801c118:	42bd      	cmp	r5, r7
 801c11a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c11e:	d8e5      	bhi.n	801c0ec <__multiply+0xfc>
 801c120:	9a01      	ldr	r2, [sp, #4]
 801c122:	50a3      	str	r3, [r4, r2]
 801c124:	3404      	adds	r4, #4
 801c126:	e79f      	b.n	801c068 <__multiply+0x78>
 801c128:	3e01      	subs	r6, #1
 801c12a:	e7a1      	b.n	801c070 <__multiply+0x80>
 801c12c:	0801e629 	.word	0x0801e629
 801c130:	0801e63a 	.word	0x0801e63a

0801c134 <__pow5mult>:
 801c134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c138:	4615      	mov	r5, r2
 801c13a:	f012 0203 	ands.w	r2, r2, #3
 801c13e:	4607      	mov	r7, r0
 801c140:	460e      	mov	r6, r1
 801c142:	d007      	beq.n	801c154 <__pow5mult+0x20>
 801c144:	4c25      	ldr	r4, [pc, #148]	@ (801c1dc <__pow5mult+0xa8>)
 801c146:	3a01      	subs	r2, #1
 801c148:	2300      	movs	r3, #0
 801c14a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c14e:	f7ff fea7 	bl	801bea0 <__multadd>
 801c152:	4606      	mov	r6, r0
 801c154:	10ad      	asrs	r5, r5, #2
 801c156:	d03d      	beq.n	801c1d4 <__pow5mult+0xa0>
 801c158:	69fc      	ldr	r4, [r7, #28]
 801c15a:	b97c      	cbnz	r4, 801c17c <__pow5mult+0x48>
 801c15c:	2010      	movs	r0, #16
 801c15e:	f7fd ffa3 	bl	801a0a8 <malloc>
 801c162:	4602      	mov	r2, r0
 801c164:	61f8      	str	r0, [r7, #28]
 801c166:	b928      	cbnz	r0, 801c174 <__pow5mult+0x40>
 801c168:	4b1d      	ldr	r3, [pc, #116]	@ (801c1e0 <__pow5mult+0xac>)
 801c16a:	481e      	ldr	r0, [pc, #120]	@ (801c1e4 <__pow5mult+0xb0>)
 801c16c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801c170:	f000 fd78 	bl	801cc64 <__assert_func>
 801c174:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c178:	6004      	str	r4, [r0, #0]
 801c17a:	60c4      	str	r4, [r0, #12]
 801c17c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801c180:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c184:	b94c      	cbnz	r4, 801c19a <__pow5mult+0x66>
 801c186:	f240 2171 	movw	r1, #625	@ 0x271
 801c18a:	4638      	mov	r0, r7
 801c18c:	f7ff ff1a 	bl	801bfc4 <__i2b>
 801c190:	2300      	movs	r3, #0
 801c192:	f8c8 0008 	str.w	r0, [r8, #8]
 801c196:	4604      	mov	r4, r0
 801c198:	6003      	str	r3, [r0, #0]
 801c19a:	f04f 0900 	mov.w	r9, #0
 801c19e:	07eb      	lsls	r3, r5, #31
 801c1a0:	d50a      	bpl.n	801c1b8 <__pow5mult+0x84>
 801c1a2:	4631      	mov	r1, r6
 801c1a4:	4622      	mov	r2, r4
 801c1a6:	4638      	mov	r0, r7
 801c1a8:	f7ff ff22 	bl	801bff0 <__multiply>
 801c1ac:	4631      	mov	r1, r6
 801c1ae:	4680      	mov	r8, r0
 801c1b0:	4638      	mov	r0, r7
 801c1b2:	f7ff fe53 	bl	801be5c <_Bfree>
 801c1b6:	4646      	mov	r6, r8
 801c1b8:	106d      	asrs	r5, r5, #1
 801c1ba:	d00b      	beq.n	801c1d4 <__pow5mult+0xa0>
 801c1bc:	6820      	ldr	r0, [r4, #0]
 801c1be:	b938      	cbnz	r0, 801c1d0 <__pow5mult+0x9c>
 801c1c0:	4622      	mov	r2, r4
 801c1c2:	4621      	mov	r1, r4
 801c1c4:	4638      	mov	r0, r7
 801c1c6:	f7ff ff13 	bl	801bff0 <__multiply>
 801c1ca:	6020      	str	r0, [r4, #0]
 801c1cc:	f8c0 9000 	str.w	r9, [r0]
 801c1d0:	4604      	mov	r4, r0
 801c1d2:	e7e4      	b.n	801c19e <__pow5mult+0x6a>
 801c1d4:	4630      	mov	r0, r6
 801c1d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c1da:	bf00      	nop
 801c1dc:	0801e6ec 	.word	0x0801e6ec
 801c1e0:	0801e5ba 	.word	0x0801e5ba
 801c1e4:	0801e63a 	.word	0x0801e63a

0801c1e8 <__lshift>:
 801c1e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c1ec:	460c      	mov	r4, r1
 801c1ee:	6849      	ldr	r1, [r1, #4]
 801c1f0:	6923      	ldr	r3, [r4, #16]
 801c1f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801c1f6:	68a3      	ldr	r3, [r4, #8]
 801c1f8:	4607      	mov	r7, r0
 801c1fa:	4691      	mov	r9, r2
 801c1fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801c200:	f108 0601 	add.w	r6, r8, #1
 801c204:	42b3      	cmp	r3, r6
 801c206:	db0b      	blt.n	801c220 <__lshift+0x38>
 801c208:	4638      	mov	r0, r7
 801c20a:	f7ff fde7 	bl	801bddc <_Balloc>
 801c20e:	4605      	mov	r5, r0
 801c210:	b948      	cbnz	r0, 801c226 <__lshift+0x3e>
 801c212:	4602      	mov	r2, r0
 801c214:	4b28      	ldr	r3, [pc, #160]	@ (801c2b8 <__lshift+0xd0>)
 801c216:	4829      	ldr	r0, [pc, #164]	@ (801c2bc <__lshift+0xd4>)
 801c218:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801c21c:	f000 fd22 	bl	801cc64 <__assert_func>
 801c220:	3101      	adds	r1, #1
 801c222:	005b      	lsls	r3, r3, #1
 801c224:	e7ee      	b.n	801c204 <__lshift+0x1c>
 801c226:	2300      	movs	r3, #0
 801c228:	f100 0114 	add.w	r1, r0, #20
 801c22c:	f100 0210 	add.w	r2, r0, #16
 801c230:	4618      	mov	r0, r3
 801c232:	4553      	cmp	r3, sl
 801c234:	db33      	blt.n	801c29e <__lshift+0xb6>
 801c236:	6920      	ldr	r0, [r4, #16]
 801c238:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c23c:	f104 0314 	add.w	r3, r4, #20
 801c240:	f019 091f 	ands.w	r9, r9, #31
 801c244:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c248:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801c24c:	d02b      	beq.n	801c2a6 <__lshift+0xbe>
 801c24e:	f1c9 0e20 	rsb	lr, r9, #32
 801c252:	468a      	mov	sl, r1
 801c254:	2200      	movs	r2, #0
 801c256:	6818      	ldr	r0, [r3, #0]
 801c258:	fa00 f009 	lsl.w	r0, r0, r9
 801c25c:	4310      	orrs	r0, r2
 801c25e:	f84a 0b04 	str.w	r0, [sl], #4
 801c262:	f853 2b04 	ldr.w	r2, [r3], #4
 801c266:	459c      	cmp	ip, r3
 801c268:	fa22 f20e 	lsr.w	r2, r2, lr
 801c26c:	d8f3      	bhi.n	801c256 <__lshift+0x6e>
 801c26e:	ebac 0304 	sub.w	r3, ip, r4
 801c272:	3b15      	subs	r3, #21
 801c274:	f023 0303 	bic.w	r3, r3, #3
 801c278:	3304      	adds	r3, #4
 801c27a:	f104 0015 	add.w	r0, r4, #21
 801c27e:	4560      	cmp	r0, ip
 801c280:	bf88      	it	hi
 801c282:	2304      	movhi	r3, #4
 801c284:	50ca      	str	r2, [r1, r3]
 801c286:	b10a      	cbz	r2, 801c28c <__lshift+0xa4>
 801c288:	f108 0602 	add.w	r6, r8, #2
 801c28c:	3e01      	subs	r6, #1
 801c28e:	4638      	mov	r0, r7
 801c290:	612e      	str	r6, [r5, #16]
 801c292:	4621      	mov	r1, r4
 801c294:	f7ff fde2 	bl	801be5c <_Bfree>
 801c298:	4628      	mov	r0, r5
 801c29a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c29e:	f842 0f04 	str.w	r0, [r2, #4]!
 801c2a2:	3301      	adds	r3, #1
 801c2a4:	e7c5      	b.n	801c232 <__lshift+0x4a>
 801c2a6:	3904      	subs	r1, #4
 801c2a8:	f853 2b04 	ldr.w	r2, [r3], #4
 801c2ac:	f841 2f04 	str.w	r2, [r1, #4]!
 801c2b0:	459c      	cmp	ip, r3
 801c2b2:	d8f9      	bhi.n	801c2a8 <__lshift+0xc0>
 801c2b4:	e7ea      	b.n	801c28c <__lshift+0xa4>
 801c2b6:	bf00      	nop
 801c2b8:	0801e629 	.word	0x0801e629
 801c2bc:	0801e63a 	.word	0x0801e63a

0801c2c0 <__mcmp>:
 801c2c0:	690a      	ldr	r2, [r1, #16]
 801c2c2:	4603      	mov	r3, r0
 801c2c4:	6900      	ldr	r0, [r0, #16]
 801c2c6:	1a80      	subs	r0, r0, r2
 801c2c8:	b530      	push	{r4, r5, lr}
 801c2ca:	d10e      	bne.n	801c2ea <__mcmp+0x2a>
 801c2cc:	3314      	adds	r3, #20
 801c2ce:	3114      	adds	r1, #20
 801c2d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801c2d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801c2d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801c2dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801c2e0:	4295      	cmp	r5, r2
 801c2e2:	d003      	beq.n	801c2ec <__mcmp+0x2c>
 801c2e4:	d205      	bcs.n	801c2f2 <__mcmp+0x32>
 801c2e6:	f04f 30ff 	mov.w	r0, #4294967295
 801c2ea:	bd30      	pop	{r4, r5, pc}
 801c2ec:	42a3      	cmp	r3, r4
 801c2ee:	d3f3      	bcc.n	801c2d8 <__mcmp+0x18>
 801c2f0:	e7fb      	b.n	801c2ea <__mcmp+0x2a>
 801c2f2:	2001      	movs	r0, #1
 801c2f4:	e7f9      	b.n	801c2ea <__mcmp+0x2a>
	...

0801c2f8 <__mdiff>:
 801c2f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2fc:	4689      	mov	r9, r1
 801c2fe:	4606      	mov	r6, r0
 801c300:	4611      	mov	r1, r2
 801c302:	4648      	mov	r0, r9
 801c304:	4614      	mov	r4, r2
 801c306:	f7ff ffdb 	bl	801c2c0 <__mcmp>
 801c30a:	1e05      	subs	r5, r0, #0
 801c30c:	d112      	bne.n	801c334 <__mdiff+0x3c>
 801c30e:	4629      	mov	r1, r5
 801c310:	4630      	mov	r0, r6
 801c312:	f7ff fd63 	bl	801bddc <_Balloc>
 801c316:	4602      	mov	r2, r0
 801c318:	b928      	cbnz	r0, 801c326 <__mdiff+0x2e>
 801c31a:	4b3f      	ldr	r3, [pc, #252]	@ (801c418 <__mdiff+0x120>)
 801c31c:	f240 2137 	movw	r1, #567	@ 0x237
 801c320:	483e      	ldr	r0, [pc, #248]	@ (801c41c <__mdiff+0x124>)
 801c322:	f000 fc9f 	bl	801cc64 <__assert_func>
 801c326:	2301      	movs	r3, #1
 801c328:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801c32c:	4610      	mov	r0, r2
 801c32e:	b003      	add	sp, #12
 801c330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c334:	bfbc      	itt	lt
 801c336:	464b      	movlt	r3, r9
 801c338:	46a1      	movlt	r9, r4
 801c33a:	4630      	mov	r0, r6
 801c33c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801c340:	bfba      	itte	lt
 801c342:	461c      	movlt	r4, r3
 801c344:	2501      	movlt	r5, #1
 801c346:	2500      	movge	r5, #0
 801c348:	f7ff fd48 	bl	801bddc <_Balloc>
 801c34c:	4602      	mov	r2, r0
 801c34e:	b918      	cbnz	r0, 801c358 <__mdiff+0x60>
 801c350:	4b31      	ldr	r3, [pc, #196]	@ (801c418 <__mdiff+0x120>)
 801c352:	f240 2145 	movw	r1, #581	@ 0x245
 801c356:	e7e3      	b.n	801c320 <__mdiff+0x28>
 801c358:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801c35c:	6926      	ldr	r6, [r4, #16]
 801c35e:	60c5      	str	r5, [r0, #12]
 801c360:	f109 0310 	add.w	r3, r9, #16
 801c364:	f109 0514 	add.w	r5, r9, #20
 801c368:	f104 0e14 	add.w	lr, r4, #20
 801c36c:	f100 0b14 	add.w	fp, r0, #20
 801c370:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801c374:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801c378:	9301      	str	r3, [sp, #4]
 801c37a:	46d9      	mov	r9, fp
 801c37c:	f04f 0c00 	mov.w	ip, #0
 801c380:	9b01      	ldr	r3, [sp, #4]
 801c382:	f85e 0b04 	ldr.w	r0, [lr], #4
 801c386:	f853 af04 	ldr.w	sl, [r3, #4]!
 801c38a:	9301      	str	r3, [sp, #4]
 801c38c:	fa1f f38a 	uxth.w	r3, sl
 801c390:	4619      	mov	r1, r3
 801c392:	b283      	uxth	r3, r0
 801c394:	1acb      	subs	r3, r1, r3
 801c396:	0c00      	lsrs	r0, r0, #16
 801c398:	4463      	add	r3, ip
 801c39a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801c39e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801c3a2:	b29b      	uxth	r3, r3
 801c3a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801c3a8:	4576      	cmp	r6, lr
 801c3aa:	f849 3b04 	str.w	r3, [r9], #4
 801c3ae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801c3b2:	d8e5      	bhi.n	801c380 <__mdiff+0x88>
 801c3b4:	1b33      	subs	r3, r6, r4
 801c3b6:	3b15      	subs	r3, #21
 801c3b8:	f023 0303 	bic.w	r3, r3, #3
 801c3bc:	3415      	adds	r4, #21
 801c3be:	3304      	adds	r3, #4
 801c3c0:	42a6      	cmp	r6, r4
 801c3c2:	bf38      	it	cc
 801c3c4:	2304      	movcc	r3, #4
 801c3c6:	441d      	add	r5, r3
 801c3c8:	445b      	add	r3, fp
 801c3ca:	461e      	mov	r6, r3
 801c3cc:	462c      	mov	r4, r5
 801c3ce:	4544      	cmp	r4, r8
 801c3d0:	d30e      	bcc.n	801c3f0 <__mdiff+0xf8>
 801c3d2:	f108 0103 	add.w	r1, r8, #3
 801c3d6:	1b49      	subs	r1, r1, r5
 801c3d8:	f021 0103 	bic.w	r1, r1, #3
 801c3dc:	3d03      	subs	r5, #3
 801c3de:	45a8      	cmp	r8, r5
 801c3e0:	bf38      	it	cc
 801c3e2:	2100      	movcc	r1, #0
 801c3e4:	440b      	add	r3, r1
 801c3e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c3ea:	b191      	cbz	r1, 801c412 <__mdiff+0x11a>
 801c3ec:	6117      	str	r7, [r2, #16]
 801c3ee:	e79d      	b.n	801c32c <__mdiff+0x34>
 801c3f0:	f854 1b04 	ldr.w	r1, [r4], #4
 801c3f4:	46e6      	mov	lr, ip
 801c3f6:	0c08      	lsrs	r0, r1, #16
 801c3f8:	fa1c fc81 	uxtah	ip, ip, r1
 801c3fc:	4471      	add	r1, lr
 801c3fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801c402:	b289      	uxth	r1, r1
 801c404:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801c408:	f846 1b04 	str.w	r1, [r6], #4
 801c40c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801c410:	e7dd      	b.n	801c3ce <__mdiff+0xd6>
 801c412:	3f01      	subs	r7, #1
 801c414:	e7e7      	b.n	801c3e6 <__mdiff+0xee>
 801c416:	bf00      	nop
 801c418:	0801e629 	.word	0x0801e629
 801c41c:	0801e63a 	.word	0x0801e63a

0801c420 <__d2b>:
 801c420:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c424:	460f      	mov	r7, r1
 801c426:	2101      	movs	r1, #1
 801c428:	ec59 8b10 	vmov	r8, r9, d0
 801c42c:	4616      	mov	r6, r2
 801c42e:	f7ff fcd5 	bl	801bddc <_Balloc>
 801c432:	4604      	mov	r4, r0
 801c434:	b930      	cbnz	r0, 801c444 <__d2b+0x24>
 801c436:	4602      	mov	r2, r0
 801c438:	4b23      	ldr	r3, [pc, #140]	@ (801c4c8 <__d2b+0xa8>)
 801c43a:	4824      	ldr	r0, [pc, #144]	@ (801c4cc <__d2b+0xac>)
 801c43c:	f240 310f 	movw	r1, #783	@ 0x30f
 801c440:	f000 fc10 	bl	801cc64 <__assert_func>
 801c444:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801c448:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c44c:	b10d      	cbz	r5, 801c452 <__d2b+0x32>
 801c44e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801c452:	9301      	str	r3, [sp, #4]
 801c454:	f1b8 0300 	subs.w	r3, r8, #0
 801c458:	d023      	beq.n	801c4a2 <__d2b+0x82>
 801c45a:	4668      	mov	r0, sp
 801c45c:	9300      	str	r3, [sp, #0]
 801c45e:	f7ff fd84 	bl	801bf6a <__lo0bits>
 801c462:	e9dd 1200 	ldrd	r1, r2, [sp]
 801c466:	b1d0      	cbz	r0, 801c49e <__d2b+0x7e>
 801c468:	f1c0 0320 	rsb	r3, r0, #32
 801c46c:	fa02 f303 	lsl.w	r3, r2, r3
 801c470:	430b      	orrs	r3, r1
 801c472:	40c2      	lsrs	r2, r0
 801c474:	6163      	str	r3, [r4, #20]
 801c476:	9201      	str	r2, [sp, #4]
 801c478:	9b01      	ldr	r3, [sp, #4]
 801c47a:	61a3      	str	r3, [r4, #24]
 801c47c:	2b00      	cmp	r3, #0
 801c47e:	bf0c      	ite	eq
 801c480:	2201      	moveq	r2, #1
 801c482:	2202      	movne	r2, #2
 801c484:	6122      	str	r2, [r4, #16]
 801c486:	b1a5      	cbz	r5, 801c4b2 <__d2b+0x92>
 801c488:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801c48c:	4405      	add	r5, r0
 801c48e:	603d      	str	r5, [r7, #0]
 801c490:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801c494:	6030      	str	r0, [r6, #0]
 801c496:	4620      	mov	r0, r4
 801c498:	b003      	add	sp, #12
 801c49a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c49e:	6161      	str	r1, [r4, #20]
 801c4a0:	e7ea      	b.n	801c478 <__d2b+0x58>
 801c4a2:	a801      	add	r0, sp, #4
 801c4a4:	f7ff fd61 	bl	801bf6a <__lo0bits>
 801c4a8:	9b01      	ldr	r3, [sp, #4]
 801c4aa:	6163      	str	r3, [r4, #20]
 801c4ac:	3020      	adds	r0, #32
 801c4ae:	2201      	movs	r2, #1
 801c4b0:	e7e8      	b.n	801c484 <__d2b+0x64>
 801c4b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801c4b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801c4ba:	6038      	str	r0, [r7, #0]
 801c4bc:	6918      	ldr	r0, [r3, #16]
 801c4be:	f7ff fd35 	bl	801bf2c <__hi0bits>
 801c4c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801c4c6:	e7e5      	b.n	801c494 <__d2b+0x74>
 801c4c8:	0801e629 	.word	0x0801e629
 801c4cc:	0801e63a 	.word	0x0801e63a

0801c4d0 <__ssputs_r>:
 801c4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c4d4:	688e      	ldr	r6, [r1, #8]
 801c4d6:	461f      	mov	r7, r3
 801c4d8:	42be      	cmp	r6, r7
 801c4da:	680b      	ldr	r3, [r1, #0]
 801c4dc:	4682      	mov	sl, r0
 801c4de:	460c      	mov	r4, r1
 801c4e0:	4690      	mov	r8, r2
 801c4e2:	d82d      	bhi.n	801c540 <__ssputs_r+0x70>
 801c4e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c4e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801c4ec:	d026      	beq.n	801c53c <__ssputs_r+0x6c>
 801c4ee:	6965      	ldr	r5, [r4, #20]
 801c4f0:	6909      	ldr	r1, [r1, #16]
 801c4f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c4f6:	eba3 0901 	sub.w	r9, r3, r1
 801c4fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c4fe:	1c7b      	adds	r3, r7, #1
 801c500:	444b      	add	r3, r9
 801c502:	106d      	asrs	r5, r5, #1
 801c504:	429d      	cmp	r5, r3
 801c506:	bf38      	it	cc
 801c508:	461d      	movcc	r5, r3
 801c50a:	0553      	lsls	r3, r2, #21
 801c50c:	d527      	bpl.n	801c55e <__ssputs_r+0x8e>
 801c50e:	4629      	mov	r1, r5
 801c510:	f7fd fdfc 	bl	801a10c <_malloc_r>
 801c514:	4606      	mov	r6, r0
 801c516:	b360      	cbz	r0, 801c572 <__ssputs_r+0xa2>
 801c518:	6921      	ldr	r1, [r4, #16]
 801c51a:	464a      	mov	r2, r9
 801c51c:	f7fe fdad 	bl	801b07a <memcpy>
 801c520:	89a3      	ldrh	r3, [r4, #12]
 801c522:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801c526:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c52a:	81a3      	strh	r3, [r4, #12]
 801c52c:	6126      	str	r6, [r4, #16]
 801c52e:	6165      	str	r5, [r4, #20]
 801c530:	444e      	add	r6, r9
 801c532:	eba5 0509 	sub.w	r5, r5, r9
 801c536:	6026      	str	r6, [r4, #0]
 801c538:	60a5      	str	r5, [r4, #8]
 801c53a:	463e      	mov	r6, r7
 801c53c:	42be      	cmp	r6, r7
 801c53e:	d900      	bls.n	801c542 <__ssputs_r+0x72>
 801c540:	463e      	mov	r6, r7
 801c542:	6820      	ldr	r0, [r4, #0]
 801c544:	4632      	mov	r2, r6
 801c546:	4641      	mov	r1, r8
 801c548:	f7fe fc92 	bl	801ae70 <memmove>
 801c54c:	68a3      	ldr	r3, [r4, #8]
 801c54e:	1b9b      	subs	r3, r3, r6
 801c550:	60a3      	str	r3, [r4, #8]
 801c552:	6823      	ldr	r3, [r4, #0]
 801c554:	4433      	add	r3, r6
 801c556:	6023      	str	r3, [r4, #0]
 801c558:	2000      	movs	r0, #0
 801c55a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c55e:	462a      	mov	r2, r5
 801c560:	f000 fbc4 	bl	801ccec <_realloc_r>
 801c564:	4606      	mov	r6, r0
 801c566:	2800      	cmp	r0, #0
 801c568:	d1e0      	bne.n	801c52c <__ssputs_r+0x5c>
 801c56a:	6921      	ldr	r1, [r4, #16]
 801c56c:	4650      	mov	r0, sl
 801c56e:	f7ff fbeb 	bl	801bd48 <_free_r>
 801c572:	230c      	movs	r3, #12
 801c574:	f8ca 3000 	str.w	r3, [sl]
 801c578:	89a3      	ldrh	r3, [r4, #12]
 801c57a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c57e:	81a3      	strh	r3, [r4, #12]
 801c580:	f04f 30ff 	mov.w	r0, #4294967295
 801c584:	e7e9      	b.n	801c55a <__ssputs_r+0x8a>
	...

0801c588 <_svfiprintf_r>:
 801c588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c58c:	4698      	mov	r8, r3
 801c58e:	898b      	ldrh	r3, [r1, #12]
 801c590:	061b      	lsls	r3, r3, #24
 801c592:	b09d      	sub	sp, #116	@ 0x74
 801c594:	4607      	mov	r7, r0
 801c596:	460d      	mov	r5, r1
 801c598:	4614      	mov	r4, r2
 801c59a:	d510      	bpl.n	801c5be <_svfiprintf_r+0x36>
 801c59c:	690b      	ldr	r3, [r1, #16]
 801c59e:	b973      	cbnz	r3, 801c5be <_svfiprintf_r+0x36>
 801c5a0:	2140      	movs	r1, #64	@ 0x40
 801c5a2:	f7fd fdb3 	bl	801a10c <_malloc_r>
 801c5a6:	6028      	str	r0, [r5, #0]
 801c5a8:	6128      	str	r0, [r5, #16]
 801c5aa:	b930      	cbnz	r0, 801c5ba <_svfiprintf_r+0x32>
 801c5ac:	230c      	movs	r3, #12
 801c5ae:	603b      	str	r3, [r7, #0]
 801c5b0:	f04f 30ff 	mov.w	r0, #4294967295
 801c5b4:	b01d      	add	sp, #116	@ 0x74
 801c5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5ba:	2340      	movs	r3, #64	@ 0x40
 801c5bc:	616b      	str	r3, [r5, #20]
 801c5be:	2300      	movs	r3, #0
 801c5c0:	9309      	str	r3, [sp, #36]	@ 0x24
 801c5c2:	2320      	movs	r3, #32
 801c5c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c5c8:	f8cd 800c 	str.w	r8, [sp, #12]
 801c5cc:	2330      	movs	r3, #48	@ 0x30
 801c5ce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801c76c <_svfiprintf_r+0x1e4>
 801c5d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c5d6:	f04f 0901 	mov.w	r9, #1
 801c5da:	4623      	mov	r3, r4
 801c5dc:	469a      	mov	sl, r3
 801c5de:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c5e2:	b10a      	cbz	r2, 801c5e8 <_svfiprintf_r+0x60>
 801c5e4:	2a25      	cmp	r2, #37	@ 0x25
 801c5e6:	d1f9      	bne.n	801c5dc <_svfiprintf_r+0x54>
 801c5e8:	ebba 0b04 	subs.w	fp, sl, r4
 801c5ec:	d00b      	beq.n	801c606 <_svfiprintf_r+0x7e>
 801c5ee:	465b      	mov	r3, fp
 801c5f0:	4622      	mov	r2, r4
 801c5f2:	4629      	mov	r1, r5
 801c5f4:	4638      	mov	r0, r7
 801c5f6:	f7ff ff6b 	bl	801c4d0 <__ssputs_r>
 801c5fa:	3001      	adds	r0, #1
 801c5fc:	f000 80a7 	beq.w	801c74e <_svfiprintf_r+0x1c6>
 801c600:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c602:	445a      	add	r2, fp
 801c604:	9209      	str	r2, [sp, #36]	@ 0x24
 801c606:	f89a 3000 	ldrb.w	r3, [sl]
 801c60a:	2b00      	cmp	r3, #0
 801c60c:	f000 809f 	beq.w	801c74e <_svfiprintf_r+0x1c6>
 801c610:	2300      	movs	r3, #0
 801c612:	f04f 32ff 	mov.w	r2, #4294967295
 801c616:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c61a:	f10a 0a01 	add.w	sl, sl, #1
 801c61e:	9304      	str	r3, [sp, #16]
 801c620:	9307      	str	r3, [sp, #28]
 801c622:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c626:	931a      	str	r3, [sp, #104]	@ 0x68
 801c628:	4654      	mov	r4, sl
 801c62a:	2205      	movs	r2, #5
 801c62c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c630:	484e      	ldr	r0, [pc, #312]	@ (801c76c <_svfiprintf_r+0x1e4>)
 801c632:	f7e3 fdb5 	bl	80001a0 <memchr>
 801c636:	9a04      	ldr	r2, [sp, #16]
 801c638:	b9d8      	cbnz	r0, 801c672 <_svfiprintf_r+0xea>
 801c63a:	06d0      	lsls	r0, r2, #27
 801c63c:	bf44      	itt	mi
 801c63e:	2320      	movmi	r3, #32
 801c640:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c644:	0711      	lsls	r1, r2, #28
 801c646:	bf44      	itt	mi
 801c648:	232b      	movmi	r3, #43	@ 0x2b
 801c64a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c64e:	f89a 3000 	ldrb.w	r3, [sl]
 801c652:	2b2a      	cmp	r3, #42	@ 0x2a
 801c654:	d015      	beq.n	801c682 <_svfiprintf_r+0xfa>
 801c656:	9a07      	ldr	r2, [sp, #28]
 801c658:	4654      	mov	r4, sl
 801c65a:	2000      	movs	r0, #0
 801c65c:	f04f 0c0a 	mov.w	ip, #10
 801c660:	4621      	mov	r1, r4
 801c662:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c666:	3b30      	subs	r3, #48	@ 0x30
 801c668:	2b09      	cmp	r3, #9
 801c66a:	d94b      	bls.n	801c704 <_svfiprintf_r+0x17c>
 801c66c:	b1b0      	cbz	r0, 801c69c <_svfiprintf_r+0x114>
 801c66e:	9207      	str	r2, [sp, #28]
 801c670:	e014      	b.n	801c69c <_svfiprintf_r+0x114>
 801c672:	eba0 0308 	sub.w	r3, r0, r8
 801c676:	fa09 f303 	lsl.w	r3, r9, r3
 801c67a:	4313      	orrs	r3, r2
 801c67c:	9304      	str	r3, [sp, #16]
 801c67e:	46a2      	mov	sl, r4
 801c680:	e7d2      	b.n	801c628 <_svfiprintf_r+0xa0>
 801c682:	9b03      	ldr	r3, [sp, #12]
 801c684:	1d19      	adds	r1, r3, #4
 801c686:	681b      	ldr	r3, [r3, #0]
 801c688:	9103      	str	r1, [sp, #12]
 801c68a:	2b00      	cmp	r3, #0
 801c68c:	bfbb      	ittet	lt
 801c68e:	425b      	neglt	r3, r3
 801c690:	f042 0202 	orrlt.w	r2, r2, #2
 801c694:	9307      	strge	r3, [sp, #28]
 801c696:	9307      	strlt	r3, [sp, #28]
 801c698:	bfb8      	it	lt
 801c69a:	9204      	strlt	r2, [sp, #16]
 801c69c:	7823      	ldrb	r3, [r4, #0]
 801c69e:	2b2e      	cmp	r3, #46	@ 0x2e
 801c6a0:	d10a      	bne.n	801c6b8 <_svfiprintf_r+0x130>
 801c6a2:	7863      	ldrb	r3, [r4, #1]
 801c6a4:	2b2a      	cmp	r3, #42	@ 0x2a
 801c6a6:	d132      	bne.n	801c70e <_svfiprintf_r+0x186>
 801c6a8:	9b03      	ldr	r3, [sp, #12]
 801c6aa:	1d1a      	adds	r2, r3, #4
 801c6ac:	681b      	ldr	r3, [r3, #0]
 801c6ae:	9203      	str	r2, [sp, #12]
 801c6b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c6b4:	3402      	adds	r4, #2
 801c6b6:	9305      	str	r3, [sp, #20]
 801c6b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801c77c <_svfiprintf_r+0x1f4>
 801c6bc:	7821      	ldrb	r1, [r4, #0]
 801c6be:	2203      	movs	r2, #3
 801c6c0:	4650      	mov	r0, sl
 801c6c2:	f7e3 fd6d 	bl	80001a0 <memchr>
 801c6c6:	b138      	cbz	r0, 801c6d8 <_svfiprintf_r+0x150>
 801c6c8:	9b04      	ldr	r3, [sp, #16]
 801c6ca:	eba0 000a 	sub.w	r0, r0, sl
 801c6ce:	2240      	movs	r2, #64	@ 0x40
 801c6d0:	4082      	lsls	r2, r0
 801c6d2:	4313      	orrs	r3, r2
 801c6d4:	3401      	adds	r4, #1
 801c6d6:	9304      	str	r3, [sp, #16]
 801c6d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c6dc:	4824      	ldr	r0, [pc, #144]	@ (801c770 <_svfiprintf_r+0x1e8>)
 801c6de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c6e2:	2206      	movs	r2, #6
 801c6e4:	f7e3 fd5c 	bl	80001a0 <memchr>
 801c6e8:	2800      	cmp	r0, #0
 801c6ea:	d036      	beq.n	801c75a <_svfiprintf_r+0x1d2>
 801c6ec:	4b21      	ldr	r3, [pc, #132]	@ (801c774 <_svfiprintf_r+0x1ec>)
 801c6ee:	bb1b      	cbnz	r3, 801c738 <_svfiprintf_r+0x1b0>
 801c6f0:	9b03      	ldr	r3, [sp, #12]
 801c6f2:	3307      	adds	r3, #7
 801c6f4:	f023 0307 	bic.w	r3, r3, #7
 801c6f8:	3308      	adds	r3, #8
 801c6fa:	9303      	str	r3, [sp, #12]
 801c6fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c6fe:	4433      	add	r3, r6
 801c700:	9309      	str	r3, [sp, #36]	@ 0x24
 801c702:	e76a      	b.n	801c5da <_svfiprintf_r+0x52>
 801c704:	fb0c 3202 	mla	r2, ip, r2, r3
 801c708:	460c      	mov	r4, r1
 801c70a:	2001      	movs	r0, #1
 801c70c:	e7a8      	b.n	801c660 <_svfiprintf_r+0xd8>
 801c70e:	2300      	movs	r3, #0
 801c710:	3401      	adds	r4, #1
 801c712:	9305      	str	r3, [sp, #20]
 801c714:	4619      	mov	r1, r3
 801c716:	f04f 0c0a 	mov.w	ip, #10
 801c71a:	4620      	mov	r0, r4
 801c71c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c720:	3a30      	subs	r2, #48	@ 0x30
 801c722:	2a09      	cmp	r2, #9
 801c724:	d903      	bls.n	801c72e <_svfiprintf_r+0x1a6>
 801c726:	2b00      	cmp	r3, #0
 801c728:	d0c6      	beq.n	801c6b8 <_svfiprintf_r+0x130>
 801c72a:	9105      	str	r1, [sp, #20]
 801c72c:	e7c4      	b.n	801c6b8 <_svfiprintf_r+0x130>
 801c72e:	fb0c 2101 	mla	r1, ip, r1, r2
 801c732:	4604      	mov	r4, r0
 801c734:	2301      	movs	r3, #1
 801c736:	e7f0      	b.n	801c71a <_svfiprintf_r+0x192>
 801c738:	ab03      	add	r3, sp, #12
 801c73a:	9300      	str	r3, [sp, #0]
 801c73c:	462a      	mov	r2, r5
 801c73e:	4b0e      	ldr	r3, [pc, #56]	@ (801c778 <_svfiprintf_r+0x1f0>)
 801c740:	a904      	add	r1, sp, #16
 801c742:	4638      	mov	r0, r7
 801c744:	f7fd fe0e 	bl	801a364 <_printf_float>
 801c748:	1c42      	adds	r2, r0, #1
 801c74a:	4606      	mov	r6, r0
 801c74c:	d1d6      	bne.n	801c6fc <_svfiprintf_r+0x174>
 801c74e:	89ab      	ldrh	r3, [r5, #12]
 801c750:	065b      	lsls	r3, r3, #25
 801c752:	f53f af2d 	bmi.w	801c5b0 <_svfiprintf_r+0x28>
 801c756:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c758:	e72c      	b.n	801c5b4 <_svfiprintf_r+0x2c>
 801c75a:	ab03      	add	r3, sp, #12
 801c75c:	9300      	str	r3, [sp, #0]
 801c75e:	462a      	mov	r2, r5
 801c760:	4b05      	ldr	r3, [pc, #20]	@ (801c778 <_svfiprintf_r+0x1f0>)
 801c762:	a904      	add	r1, sp, #16
 801c764:	4638      	mov	r0, r7
 801c766:	f7fe f895 	bl	801a894 <_printf_i>
 801c76a:	e7ed      	b.n	801c748 <_svfiprintf_r+0x1c0>
 801c76c:	0801e693 	.word	0x0801e693
 801c770:	0801e69d 	.word	0x0801e69d
 801c774:	0801a365 	.word	0x0801a365
 801c778:	0801c4d1 	.word	0x0801c4d1
 801c77c:	0801e699 	.word	0x0801e699

0801c780 <__sfputc_r>:
 801c780:	6893      	ldr	r3, [r2, #8]
 801c782:	3b01      	subs	r3, #1
 801c784:	2b00      	cmp	r3, #0
 801c786:	b410      	push	{r4}
 801c788:	6093      	str	r3, [r2, #8]
 801c78a:	da08      	bge.n	801c79e <__sfputc_r+0x1e>
 801c78c:	6994      	ldr	r4, [r2, #24]
 801c78e:	42a3      	cmp	r3, r4
 801c790:	db01      	blt.n	801c796 <__sfputc_r+0x16>
 801c792:	290a      	cmp	r1, #10
 801c794:	d103      	bne.n	801c79e <__sfputc_r+0x1e>
 801c796:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c79a:	f7fe bad4 	b.w	801ad46 <__swbuf_r>
 801c79e:	6813      	ldr	r3, [r2, #0]
 801c7a0:	1c58      	adds	r0, r3, #1
 801c7a2:	6010      	str	r0, [r2, #0]
 801c7a4:	7019      	strb	r1, [r3, #0]
 801c7a6:	4608      	mov	r0, r1
 801c7a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c7ac:	4770      	bx	lr

0801c7ae <__sfputs_r>:
 801c7ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c7b0:	4606      	mov	r6, r0
 801c7b2:	460f      	mov	r7, r1
 801c7b4:	4614      	mov	r4, r2
 801c7b6:	18d5      	adds	r5, r2, r3
 801c7b8:	42ac      	cmp	r4, r5
 801c7ba:	d101      	bne.n	801c7c0 <__sfputs_r+0x12>
 801c7bc:	2000      	movs	r0, #0
 801c7be:	e007      	b.n	801c7d0 <__sfputs_r+0x22>
 801c7c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c7c4:	463a      	mov	r2, r7
 801c7c6:	4630      	mov	r0, r6
 801c7c8:	f7ff ffda 	bl	801c780 <__sfputc_r>
 801c7cc:	1c43      	adds	r3, r0, #1
 801c7ce:	d1f3      	bne.n	801c7b8 <__sfputs_r+0xa>
 801c7d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c7d4 <_vfiprintf_r>:
 801c7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7d8:	460d      	mov	r5, r1
 801c7da:	b09d      	sub	sp, #116	@ 0x74
 801c7dc:	4614      	mov	r4, r2
 801c7de:	4698      	mov	r8, r3
 801c7e0:	4606      	mov	r6, r0
 801c7e2:	b118      	cbz	r0, 801c7ec <_vfiprintf_r+0x18>
 801c7e4:	6a03      	ldr	r3, [r0, #32]
 801c7e6:	b90b      	cbnz	r3, 801c7ec <_vfiprintf_r+0x18>
 801c7e8:	f7fe f9fe 	bl	801abe8 <__sinit>
 801c7ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c7ee:	07d9      	lsls	r1, r3, #31
 801c7f0:	d405      	bmi.n	801c7fe <_vfiprintf_r+0x2a>
 801c7f2:	89ab      	ldrh	r3, [r5, #12]
 801c7f4:	059a      	lsls	r2, r3, #22
 801c7f6:	d402      	bmi.n	801c7fe <_vfiprintf_r+0x2a>
 801c7f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c7fa:	f7fe fc34 	bl	801b066 <__retarget_lock_acquire_recursive>
 801c7fe:	89ab      	ldrh	r3, [r5, #12]
 801c800:	071b      	lsls	r3, r3, #28
 801c802:	d501      	bpl.n	801c808 <_vfiprintf_r+0x34>
 801c804:	692b      	ldr	r3, [r5, #16]
 801c806:	b99b      	cbnz	r3, 801c830 <_vfiprintf_r+0x5c>
 801c808:	4629      	mov	r1, r5
 801c80a:	4630      	mov	r0, r6
 801c80c:	f7fe fada 	bl	801adc4 <__swsetup_r>
 801c810:	b170      	cbz	r0, 801c830 <_vfiprintf_r+0x5c>
 801c812:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c814:	07dc      	lsls	r4, r3, #31
 801c816:	d504      	bpl.n	801c822 <_vfiprintf_r+0x4e>
 801c818:	f04f 30ff 	mov.w	r0, #4294967295
 801c81c:	b01d      	add	sp, #116	@ 0x74
 801c81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c822:	89ab      	ldrh	r3, [r5, #12]
 801c824:	0598      	lsls	r0, r3, #22
 801c826:	d4f7      	bmi.n	801c818 <_vfiprintf_r+0x44>
 801c828:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c82a:	f7fe fc1d 	bl	801b068 <__retarget_lock_release_recursive>
 801c82e:	e7f3      	b.n	801c818 <_vfiprintf_r+0x44>
 801c830:	2300      	movs	r3, #0
 801c832:	9309      	str	r3, [sp, #36]	@ 0x24
 801c834:	2320      	movs	r3, #32
 801c836:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c83a:	f8cd 800c 	str.w	r8, [sp, #12]
 801c83e:	2330      	movs	r3, #48	@ 0x30
 801c840:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801c9f0 <_vfiprintf_r+0x21c>
 801c844:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c848:	f04f 0901 	mov.w	r9, #1
 801c84c:	4623      	mov	r3, r4
 801c84e:	469a      	mov	sl, r3
 801c850:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c854:	b10a      	cbz	r2, 801c85a <_vfiprintf_r+0x86>
 801c856:	2a25      	cmp	r2, #37	@ 0x25
 801c858:	d1f9      	bne.n	801c84e <_vfiprintf_r+0x7a>
 801c85a:	ebba 0b04 	subs.w	fp, sl, r4
 801c85e:	d00b      	beq.n	801c878 <_vfiprintf_r+0xa4>
 801c860:	465b      	mov	r3, fp
 801c862:	4622      	mov	r2, r4
 801c864:	4629      	mov	r1, r5
 801c866:	4630      	mov	r0, r6
 801c868:	f7ff ffa1 	bl	801c7ae <__sfputs_r>
 801c86c:	3001      	adds	r0, #1
 801c86e:	f000 80a7 	beq.w	801c9c0 <_vfiprintf_r+0x1ec>
 801c872:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c874:	445a      	add	r2, fp
 801c876:	9209      	str	r2, [sp, #36]	@ 0x24
 801c878:	f89a 3000 	ldrb.w	r3, [sl]
 801c87c:	2b00      	cmp	r3, #0
 801c87e:	f000 809f 	beq.w	801c9c0 <_vfiprintf_r+0x1ec>
 801c882:	2300      	movs	r3, #0
 801c884:	f04f 32ff 	mov.w	r2, #4294967295
 801c888:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c88c:	f10a 0a01 	add.w	sl, sl, #1
 801c890:	9304      	str	r3, [sp, #16]
 801c892:	9307      	str	r3, [sp, #28]
 801c894:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c898:	931a      	str	r3, [sp, #104]	@ 0x68
 801c89a:	4654      	mov	r4, sl
 801c89c:	2205      	movs	r2, #5
 801c89e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c8a2:	4853      	ldr	r0, [pc, #332]	@ (801c9f0 <_vfiprintf_r+0x21c>)
 801c8a4:	f7e3 fc7c 	bl	80001a0 <memchr>
 801c8a8:	9a04      	ldr	r2, [sp, #16]
 801c8aa:	b9d8      	cbnz	r0, 801c8e4 <_vfiprintf_r+0x110>
 801c8ac:	06d1      	lsls	r1, r2, #27
 801c8ae:	bf44      	itt	mi
 801c8b0:	2320      	movmi	r3, #32
 801c8b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c8b6:	0713      	lsls	r3, r2, #28
 801c8b8:	bf44      	itt	mi
 801c8ba:	232b      	movmi	r3, #43	@ 0x2b
 801c8bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c8c0:	f89a 3000 	ldrb.w	r3, [sl]
 801c8c4:	2b2a      	cmp	r3, #42	@ 0x2a
 801c8c6:	d015      	beq.n	801c8f4 <_vfiprintf_r+0x120>
 801c8c8:	9a07      	ldr	r2, [sp, #28]
 801c8ca:	4654      	mov	r4, sl
 801c8cc:	2000      	movs	r0, #0
 801c8ce:	f04f 0c0a 	mov.w	ip, #10
 801c8d2:	4621      	mov	r1, r4
 801c8d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c8d8:	3b30      	subs	r3, #48	@ 0x30
 801c8da:	2b09      	cmp	r3, #9
 801c8dc:	d94b      	bls.n	801c976 <_vfiprintf_r+0x1a2>
 801c8de:	b1b0      	cbz	r0, 801c90e <_vfiprintf_r+0x13a>
 801c8e0:	9207      	str	r2, [sp, #28]
 801c8e2:	e014      	b.n	801c90e <_vfiprintf_r+0x13a>
 801c8e4:	eba0 0308 	sub.w	r3, r0, r8
 801c8e8:	fa09 f303 	lsl.w	r3, r9, r3
 801c8ec:	4313      	orrs	r3, r2
 801c8ee:	9304      	str	r3, [sp, #16]
 801c8f0:	46a2      	mov	sl, r4
 801c8f2:	e7d2      	b.n	801c89a <_vfiprintf_r+0xc6>
 801c8f4:	9b03      	ldr	r3, [sp, #12]
 801c8f6:	1d19      	adds	r1, r3, #4
 801c8f8:	681b      	ldr	r3, [r3, #0]
 801c8fa:	9103      	str	r1, [sp, #12]
 801c8fc:	2b00      	cmp	r3, #0
 801c8fe:	bfbb      	ittet	lt
 801c900:	425b      	neglt	r3, r3
 801c902:	f042 0202 	orrlt.w	r2, r2, #2
 801c906:	9307      	strge	r3, [sp, #28]
 801c908:	9307      	strlt	r3, [sp, #28]
 801c90a:	bfb8      	it	lt
 801c90c:	9204      	strlt	r2, [sp, #16]
 801c90e:	7823      	ldrb	r3, [r4, #0]
 801c910:	2b2e      	cmp	r3, #46	@ 0x2e
 801c912:	d10a      	bne.n	801c92a <_vfiprintf_r+0x156>
 801c914:	7863      	ldrb	r3, [r4, #1]
 801c916:	2b2a      	cmp	r3, #42	@ 0x2a
 801c918:	d132      	bne.n	801c980 <_vfiprintf_r+0x1ac>
 801c91a:	9b03      	ldr	r3, [sp, #12]
 801c91c:	1d1a      	adds	r2, r3, #4
 801c91e:	681b      	ldr	r3, [r3, #0]
 801c920:	9203      	str	r2, [sp, #12]
 801c922:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c926:	3402      	adds	r4, #2
 801c928:	9305      	str	r3, [sp, #20]
 801c92a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801ca00 <_vfiprintf_r+0x22c>
 801c92e:	7821      	ldrb	r1, [r4, #0]
 801c930:	2203      	movs	r2, #3
 801c932:	4650      	mov	r0, sl
 801c934:	f7e3 fc34 	bl	80001a0 <memchr>
 801c938:	b138      	cbz	r0, 801c94a <_vfiprintf_r+0x176>
 801c93a:	9b04      	ldr	r3, [sp, #16]
 801c93c:	eba0 000a 	sub.w	r0, r0, sl
 801c940:	2240      	movs	r2, #64	@ 0x40
 801c942:	4082      	lsls	r2, r0
 801c944:	4313      	orrs	r3, r2
 801c946:	3401      	adds	r4, #1
 801c948:	9304      	str	r3, [sp, #16]
 801c94a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c94e:	4829      	ldr	r0, [pc, #164]	@ (801c9f4 <_vfiprintf_r+0x220>)
 801c950:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c954:	2206      	movs	r2, #6
 801c956:	f7e3 fc23 	bl	80001a0 <memchr>
 801c95a:	2800      	cmp	r0, #0
 801c95c:	d03f      	beq.n	801c9de <_vfiprintf_r+0x20a>
 801c95e:	4b26      	ldr	r3, [pc, #152]	@ (801c9f8 <_vfiprintf_r+0x224>)
 801c960:	bb1b      	cbnz	r3, 801c9aa <_vfiprintf_r+0x1d6>
 801c962:	9b03      	ldr	r3, [sp, #12]
 801c964:	3307      	adds	r3, #7
 801c966:	f023 0307 	bic.w	r3, r3, #7
 801c96a:	3308      	adds	r3, #8
 801c96c:	9303      	str	r3, [sp, #12]
 801c96e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c970:	443b      	add	r3, r7
 801c972:	9309      	str	r3, [sp, #36]	@ 0x24
 801c974:	e76a      	b.n	801c84c <_vfiprintf_r+0x78>
 801c976:	fb0c 3202 	mla	r2, ip, r2, r3
 801c97a:	460c      	mov	r4, r1
 801c97c:	2001      	movs	r0, #1
 801c97e:	e7a8      	b.n	801c8d2 <_vfiprintf_r+0xfe>
 801c980:	2300      	movs	r3, #0
 801c982:	3401      	adds	r4, #1
 801c984:	9305      	str	r3, [sp, #20]
 801c986:	4619      	mov	r1, r3
 801c988:	f04f 0c0a 	mov.w	ip, #10
 801c98c:	4620      	mov	r0, r4
 801c98e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c992:	3a30      	subs	r2, #48	@ 0x30
 801c994:	2a09      	cmp	r2, #9
 801c996:	d903      	bls.n	801c9a0 <_vfiprintf_r+0x1cc>
 801c998:	2b00      	cmp	r3, #0
 801c99a:	d0c6      	beq.n	801c92a <_vfiprintf_r+0x156>
 801c99c:	9105      	str	r1, [sp, #20]
 801c99e:	e7c4      	b.n	801c92a <_vfiprintf_r+0x156>
 801c9a0:	fb0c 2101 	mla	r1, ip, r1, r2
 801c9a4:	4604      	mov	r4, r0
 801c9a6:	2301      	movs	r3, #1
 801c9a8:	e7f0      	b.n	801c98c <_vfiprintf_r+0x1b8>
 801c9aa:	ab03      	add	r3, sp, #12
 801c9ac:	9300      	str	r3, [sp, #0]
 801c9ae:	462a      	mov	r2, r5
 801c9b0:	4b12      	ldr	r3, [pc, #72]	@ (801c9fc <_vfiprintf_r+0x228>)
 801c9b2:	a904      	add	r1, sp, #16
 801c9b4:	4630      	mov	r0, r6
 801c9b6:	f7fd fcd5 	bl	801a364 <_printf_float>
 801c9ba:	4607      	mov	r7, r0
 801c9bc:	1c78      	adds	r0, r7, #1
 801c9be:	d1d6      	bne.n	801c96e <_vfiprintf_r+0x19a>
 801c9c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c9c2:	07d9      	lsls	r1, r3, #31
 801c9c4:	d405      	bmi.n	801c9d2 <_vfiprintf_r+0x1fe>
 801c9c6:	89ab      	ldrh	r3, [r5, #12]
 801c9c8:	059a      	lsls	r2, r3, #22
 801c9ca:	d402      	bmi.n	801c9d2 <_vfiprintf_r+0x1fe>
 801c9cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c9ce:	f7fe fb4b 	bl	801b068 <__retarget_lock_release_recursive>
 801c9d2:	89ab      	ldrh	r3, [r5, #12]
 801c9d4:	065b      	lsls	r3, r3, #25
 801c9d6:	f53f af1f 	bmi.w	801c818 <_vfiprintf_r+0x44>
 801c9da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c9dc:	e71e      	b.n	801c81c <_vfiprintf_r+0x48>
 801c9de:	ab03      	add	r3, sp, #12
 801c9e0:	9300      	str	r3, [sp, #0]
 801c9e2:	462a      	mov	r2, r5
 801c9e4:	4b05      	ldr	r3, [pc, #20]	@ (801c9fc <_vfiprintf_r+0x228>)
 801c9e6:	a904      	add	r1, sp, #16
 801c9e8:	4630      	mov	r0, r6
 801c9ea:	f7fd ff53 	bl	801a894 <_printf_i>
 801c9ee:	e7e4      	b.n	801c9ba <_vfiprintf_r+0x1e6>
 801c9f0:	0801e693 	.word	0x0801e693
 801c9f4:	0801e69d 	.word	0x0801e69d
 801c9f8:	0801a365 	.word	0x0801a365
 801c9fc:	0801c7af 	.word	0x0801c7af
 801ca00:	0801e699 	.word	0x0801e699

0801ca04 <__sflush_r>:
 801ca04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ca08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca0c:	0716      	lsls	r6, r2, #28
 801ca0e:	4605      	mov	r5, r0
 801ca10:	460c      	mov	r4, r1
 801ca12:	d454      	bmi.n	801cabe <__sflush_r+0xba>
 801ca14:	684b      	ldr	r3, [r1, #4]
 801ca16:	2b00      	cmp	r3, #0
 801ca18:	dc02      	bgt.n	801ca20 <__sflush_r+0x1c>
 801ca1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801ca1c:	2b00      	cmp	r3, #0
 801ca1e:	dd48      	ble.n	801cab2 <__sflush_r+0xae>
 801ca20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ca22:	2e00      	cmp	r6, #0
 801ca24:	d045      	beq.n	801cab2 <__sflush_r+0xae>
 801ca26:	2300      	movs	r3, #0
 801ca28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801ca2c:	682f      	ldr	r7, [r5, #0]
 801ca2e:	6a21      	ldr	r1, [r4, #32]
 801ca30:	602b      	str	r3, [r5, #0]
 801ca32:	d030      	beq.n	801ca96 <__sflush_r+0x92>
 801ca34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801ca36:	89a3      	ldrh	r3, [r4, #12]
 801ca38:	0759      	lsls	r1, r3, #29
 801ca3a:	d505      	bpl.n	801ca48 <__sflush_r+0x44>
 801ca3c:	6863      	ldr	r3, [r4, #4]
 801ca3e:	1ad2      	subs	r2, r2, r3
 801ca40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ca42:	b10b      	cbz	r3, 801ca48 <__sflush_r+0x44>
 801ca44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801ca46:	1ad2      	subs	r2, r2, r3
 801ca48:	2300      	movs	r3, #0
 801ca4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ca4c:	6a21      	ldr	r1, [r4, #32]
 801ca4e:	4628      	mov	r0, r5
 801ca50:	47b0      	blx	r6
 801ca52:	1c43      	adds	r3, r0, #1
 801ca54:	89a3      	ldrh	r3, [r4, #12]
 801ca56:	d106      	bne.n	801ca66 <__sflush_r+0x62>
 801ca58:	6829      	ldr	r1, [r5, #0]
 801ca5a:	291d      	cmp	r1, #29
 801ca5c:	d82b      	bhi.n	801cab6 <__sflush_r+0xb2>
 801ca5e:	4a2a      	ldr	r2, [pc, #168]	@ (801cb08 <__sflush_r+0x104>)
 801ca60:	40ca      	lsrs	r2, r1
 801ca62:	07d6      	lsls	r6, r2, #31
 801ca64:	d527      	bpl.n	801cab6 <__sflush_r+0xb2>
 801ca66:	2200      	movs	r2, #0
 801ca68:	6062      	str	r2, [r4, #4]
 801ca6a:	04d9      	lsls	r1, r3, #19
 801ca6c:	6922      	ldr	r2, [r4, #16]
 801ca6e:	6022      	str	r2, [r4, #0]
 801ca70:	d504      	bpl.n	801ca7c <__sflush_r+0x78>
 801ca72:	1c42      	adds	r2, r0, #1
 801ca74:	d101      	bne.n	801ca7a <__sflush_r+0x76>
 801ca76:	682b      	ldr	r3, [r5, #0]
 801ca78:	b903      	cbnz	r3, 801ca7c <__sflush_r+0x78>
 801ca7a:	6560      	str	r0, [r4, #84]	@ 0x54
 801ca7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ca7e:	602f      	str	r7, [r5, #0]
 801ca80:	b1b9      	cbz	r1, 801cab2 <__sflush_r+0xae>
 801ca82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ca86:	4299      	cmp	r1, r3
 801ca88:	d002      	beq.n	801ca90 <__sflush_r+0x8c>
 801ca8a:	4628      	mov	r0, r5
 801ca8c:	f7ff f95c 	bl	801bd48 <_free_r>
 801ca90:	2300      	movs	r3, #0
 801ca92:	6363      	str	r3, [r4, #52]	@ 0x34
 801ca94:	e00d      	b.n	801cab2 <__sflush_r+0xae>
 801ca96:	2301      	movs	r3, #1
 801ca98:	4628      	mov	r0, r5
 801ca9a:	47b0      	blx	r6
 801ca9c:	4602      	mov	r2, r0
 801ca9e:	1c50      	adds	r0, r2, #1
 801caa0:	d1c9      	bne.n	801ca36 <__sflush_r+0x32>
 801caa2:	682b      	ldr	r3, [r5, #0]
 801caa4:	2b00      	cmp	r3, #0
 801caa6:	d0c6      	beq.n	801ca36 <__sflush_r+0x32>
 801caa8:	2b1d      	cmp	r3, #29
 801caaa:	d001      	beq.n	801cab0 <__sflush_r+0xac>
 801caac:	2b16      	cmp	r3, #22
 801caae:	d11e      	bne.n	801caee <__sflush_r+0xea>
 801cab0:	602f      	str	r7, [r5, #0]
 801cab2:	2000      	movs	r0, #0
 801cab4:	e022      	b.n	801cafc <__sflush_r+0xf8>
 801cab6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801caba:	b21b      	sxth	r3, r3
 801cabc:	e01b      	b.n	801caf6 <__sflush_r+0xf2>
 801cabe:	690f      	ldr	r7, [r1, #16]
 801cac0:	2f00      	cmp	r7, #0
 801cac2:	d0f6      	beq.n	801cab2 <__sflush_r+0xae>
 801cac4:	0793      	lsls	r3, r2, #30
 801cac6:	680e      	ldr	r6, [r1, #0]
 801cac8:	bf08      	it	eq
 801caca:	694b      	ldreq	r3, [r1, #20]
 801cacc:	600f      	str	r7, [r1, #0]
 801cace:	bf18      	it	ne
 801cad0:	2300      	movne	r3, #0
 801cad2:	eba6 0807 	sub.w	r8, r6, r7
 801cad6:	608b      	str	r3, [r1, #8]
 801cad8:	f1b8 0f00 	cmp.w	r8, #0
 801cadc:	dde9      	ble.n	801cab2 <__sflush_r+0xae>
 801cade:	6a21      	ldr	r1, [r4, #32]
 801cae0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801cae2:	4643      	mov	r3, r8
 801cae4:	463a      	mov	r2, r7
 801cae6:	4628      	mov	r0, r5
 801cae8:	47b0      	blx	r6
 801caea:	2800      	cmp	r0, #0
 801caec:	dc08      	bgt.n	801cb00 <__sflush_r+0xfc>
 801caee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801caf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801caf6:	81a3      	strh	r3, [r4, #12]
 801caf8:	f04f 30ff 	mov.w	r0, #4294967295
 801cafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cb00:	4407      	add	r7, r0
 801cb02:	eba8 0800 	sub.w	r8, r8, r0
 801cb06:	e7e7      	b.n	801cad8 <__sflush_r+0xd4>
 801cb08:	20400001 	.word	0x20400001

0801cb0c <_fflush_r>:
 801cb0c:	b538      	push	{r3, r4, r5, lr}
 801cb0e:	690b      	ldr	r3, [r1, #16]
 801cb10:	4605      	mov	r5, r0
 801cb12:	460c      	mov	r4, r1
 801cb14:	b913      	cbnz	r3, 801cb1c <_fflush_r+0x10>
 801cb16:	2500      	movs	r5, #0
 801cb18:	4628      	mov	r0, r5
 801cb1a:	bd38      	pop	{r3, r4, r5, pc}
 801cb1c:	b118      	cbz	r0, 801cb26 <_fflush_r+0x1a>
 801cb1e:	6a03      	ldr	r3, [r0, #32]
 801cb20:	b90b      	cbnz	r3, 801cb26 <_fflush_r+0x1a>
 801cb22:	f7fe f861 	bl	801abe8 <__sinit>
 801cb26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cb2a:	2b00      	cmp	r3, #0
 801cb2c:	d0f3      	beq.n	801cb16 <_fflush_r+0xa>
 801cb2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801cb30:	07d0      	lsls	r0, r2, #31
 801cb32:	d404      	bmi.n	801cb3e <_fflush_r+0x32>
 801cb34:	0599      	lsls	r1, r3, #22
 801cb36:	d402      	bmi.n	801cb3e <_fflush_r+0x32>
 801cb38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cb3a:	f7fe fa94 	bl	801b066 <__retarget_lock_acquire_recursive>
 801cb3e:	4628      	mov	r0, r5
 801cb40:	4621      	mov	r1, r4
 801cb42:	f7ff ff5f 	bl	801ca04 <__sflush_r>
 801cb46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801cb48:	07da      	lsls	r2, r3, #31
 801cb4a:	4605      	mov	r5, r0
 801cb4c:	d4e4      	bmi.n	801cb18 <_fflush_r+0xc>
 801cb4e:	89a3      	ldrh	r3, [r4, #12]
 801cb50:	059b      	lsls	r3, r3, #22
 801cb52:	d4e1      	bmi.n	801cb18 <_fflush_r+0xc>
 801cb54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cb56:	f7fe fa87 	bl	801b068 <__retarget_lock_release_recursive>
 801cb5a:	e7dd      	b.n	801cb18 <_fflush_r+0xc>

0801cb5c <__swhatbuf_r>:
 801cb5c:	b570      	push	{r4, r5, r6, lr}
 801cb5e:	460c      	mov	r4, r1
 801cb60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cb64:	2900      	cmp	r1, #0
 801cb66:	b096      	sub	sp, #88	@ 0x58
 801cb68:	4615      	mov	r5, r2
 801cb6a:	461e      	mov	r6, r3
 801cb6c:	da0d      	bge.n	801cb8a <__swhatbuf_r+0x2e>
 801cb6e:	89a3      	ldrh	r3, [r4, #12]
 801cb70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801cb74:	f04f 0100 	mov.w	r1, #0
 801cb78:	bf14      	ite	ne
 801cb7a:	2340      	movne	r3, #64	@ 0x40
 801cb7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801cb80:	2000      	movs	r0, #0
 801cb82:	6031      	str	r1, [r6, #0]
 801cb84:	602b      	str	r3, [r5, #0]
 801cb86:	b016      	add	sp, #88	@ 0x58
 801cb88:	bd70      	pop	{r4, r5, r6, pc}
 801cb8a:	466a      	mov	r2, sp
 801cb8c:	f000 f848 	bl	801cc20 <_fstat_r>
 801cb90:	2800      	cmp	r0, #0
 801cb92:	dbec      	blt.n	801cb6e <__swhatbuf_r+0x12>
 801cb94:	9901      	ldr	r1, [sp, #4]
 801cb96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801cb9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801cb9e:	4259      	negs	r1, r3
 801cba0:	4159      	adcs	r1, r3
 801cba2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801cba6:	e7eb      	b.n	801cb80 <__swhatbuf_r+0x24>

0801cba8 <__smakebuf_r>:
 801cba8:	898b      	ldrh	r3, [r1, #12]
 801cbaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801cbac:	079d      	lsls	r5, r3, #30
 801cbae:	4606      	mov	r6, r0
 801cbb0:	460c      	mov	r4, r1
 801cbb2:	d507      	bpl.n	801cbc4 <__smakebuf_r+0x1c>
 801cbb4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801cbb8:	6023      	str	r3, [r4, #0]
 801cbba:	6123      	str	r3, [r4, #16]
 801cbbc:	2301      	movs	r3, #1
 801cbbe:	6163      	str	r3, [r4, #20]
 801cbc0:	b003      	add	sp, #12
 801cbc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cbc4:	ab01      	add	r3, sp, #4
 801cbc6:	466a      	mov	r2, sp
 801cbc8:	f7ff ffc8 	bl	801cb5c <__swhatbuf_r>
 801cbcc:	9f00      	ldr	r7, [sp, #0]
 801cbce:	4605      	mov	r5, r0
 801cbd0:	4639      	mov	r1, r7
 801cbd2:	4630      	mov	r0, r6
 801cbd4:	f7fd fa9a 	bl	801a10c <_malloc_r>
 801cbd8:	b948      	cbnz	r0, 801cbee <__smakebuf_r+0x46>
 801cbda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cbde:	059a      	lsls	r2, r3, #22
 801cbe0:	d4ee      	bmi.n	801cbc0 <__smakebuf_r+0x18>
 801cbe2:	f023 0303 	bic.w	r3, r3, #3
 801cbe6:	f043 0302 	orr.w	r3, r3, #2
 801cbea:	81a3      	strh	r3, [r4, #12]
 801cbec:	e7e2      	b.n	801cbb4 <__smakebuf_r+0xc>
 801cbee:	89a3      	ldrh	r3, [r4, #12]
 801cbf0:	6020      	str	r0, [r4, #0]
 801cbf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801cbf6:	81a3      	strh	r3, [r4, #12]
 801cbf8:	9b01      	ldr	r3, [sp, #4]
 801cbfa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801cbfe:	b15b      	cbz	r3, 801cc18 <__smakebuf_r+0x70>
 801cc00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cc04:	4630      	mov	r0, r6
 801cc06:	f000 f81d 	bl	801cc44 <_isatty_r>
 801cc0a:	b128      	cbz	r0, 801cc18 <__smakebuf_r+0x70>
 801cc0c:	89a3      	ldrh	r3, [r4, #12]
 801cc0e:	f023 0303 	bic.w	r3, r3, #3
 801cc12:	f043 0301 	orr.w	r3, r3, #1
 801cc16:	81a3      	strh	r3, [r4, #12]
 801cc18:	89a3      	ldrh	r3, [r4, #12]
 801cc1a:	431d      	orrs	r5, r3
 801cc1c:	81a5      	strh	r5, [r4, #12]
 801cc1e:	e7cf      	b.n	801cbc0 <__smakebuf_r+0x18>

0801cc20 <_fstat_r>:
 801cc20:	b538      	push	{r3, r4, r5, lr}
 801cc22:	4d07      	ldr	r5, [pc, #28]	@ (801cc40 <_fstat_r+0x20>)
 801cc24:	2300      	movs	r3, #0
 801cc26:	4604      	mov	r4, r0
 801cc28:	4608      	mov	r0, r1
 801cc2a:	4611      	mov	r1, r2
 801cc2c:	602b      	str	r3, [r5, #0]
 801cc2e:	f7ea fc19 	bl	8007464 <_fstat>
 801cc32:	1c43      	adds	r3, r0, #1
 801cc34:	d102      	bne.n	801cc3c <_fstat_r+0x1c>
 801cc36:	682b      	ldr	r3, [r5, #0]
 801cc38:	b103      	cbz	r3, 801cc3c <_fstat_r+0x1c>
 801cc3a:	6023      	str	r3, [r4, #0]
 801cc3c:	bd38      	pop	{r3, r4, r5, pc}
 801cc3e:	bf00      	nop
 801cc40:	20001b24 	.word	0x20001b24

0801cc44 <_isatty_r>:
 801cc44:	b538      	push	{r3, r4, r5, lr}
 801cc46:	4d06      	ldr	r5, [pc, #24]	@ (801cc60 <_isatty_r+0x1c>)
 801cc48:	2300      	movs	r3, #0
 801cc4a:	4604      	mov	r4, r0
 801cc4c:	4608      	mov	r0, r1
 801cc4e:	602b      	str	r3, [r5, #0]
 801cc50:	f7ea fc18 	bl	8007484 <_isatty>
 801cc54:	1c43      	adds	r3, r0, #1
 801cc56:	d102      	bne.n	801cc5e <_isatty_r+0x1a>
 801cc58:	682b      	ldr	r3, [r5, #0]
 801cc5a:	b103      	cbz	r3, 801cc5e <_isatty_r+0x1a>
 801cc5c:	6023      	str	r3, [r4, #0]
 801cc5e:	bd38      	pop	{r3, r4, r5, pc}
 801cc60:	20001b24 	.word	0x20001b24

0801cc64 <__assert_func>:
 801cc64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801cc66:	4614      	mov	r4, r2
 801cc68:	461a      	mov	r2, r3
 801cc6a:	4b09      	ldr	r3, [pc, #36]	@ (801cc90 <__assert_func+0x2c>)
 801cc6c:	681b      	ldr	r3, [r3, #0]
 801cc6e:	4605      	mov	r5, r0
 801cc70:	68d8      	ldr	r0, [r3, #12]
 801cc72:	b14c      	cbz	r4, 801cc88 <__assert_func+0x24>
 801cc74:	4b07      	ldr	r3, [pc, #28]	@ (801cc94 <__assert_func+0x30>)
 801cc76:	9100      	str	r1, [sp, #0]
 801cc78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801cc7c:	4906      	ldr	r1, [pc, #24]	@ (801cc98 <__assert_func+0x34>)
 801cc7e:	462b      	mov	r3, r5
 801cc80:	f000 f870 	bl	801cd64 <fiprintf>
 801cc84:	f7fd fa08 	bl	801a098 <abort>
 801cc88:	4b04      	ldr	r3, [pc, #16]	@ (801cc9c <__assert_func+0x38>)
 801cc8a:	461c      	mov	r4, r3
 801cc8c:	e7f3      	b.n	801cc76 <__assert_func+0x12>
 801cc8e:	bf00      	nop
 801cc90:	20000130 	.word	0x20000130
 801cc94:	0801e6ae 	.word	0x0801e6ae
 801cc98:	0801e6bb 	.word	0x0801e6bb
 801cc9c:	0801e6e9 	.word	0x0801e6e9

0801cca0 <_calloc_r>:
 801cca0:	b570      	push	{r4, r5, r6, lr}
 801cca2:	fba1 5402 	umull	r5, r4, r1, r2
 801cca6:	b934      	cbnz	r4, 801ccb6 <_calloc_r+0x16>
 801cca8:	4629      	mov	r1, r5
 801ccaa:	f7fd fa2f 	bl	801a10c <_malloc_r>
 801ccae:	4606      	mov	r6, r0
 801ccb0:	b928      	cbnz	r0, 801ccbe <_calloc_r+0x1e>
 801ccb2:	4630      	mov	r0, r6
 801ccb4:	bd70      	pop	{r4, r5, r6, pc}
 801ccb6:	220c      	movs	r2, #12
 801ccb8:	6002      	str	r2, [r0, #0]
 801ccba:	2600      	movs	r6, #0
 801ccbc:	e7f9      	b.n	801ccb2 <_calloc_r+0x12>
 801ccbe:	462a      	mov	r2, r5
 801ccc0:	4621      	mov	r1, r4
 801ccc2:	f7fe f8ef 	bl	801aea4 <memset>
 801ccc6:	e7f4      	b.n	801ccb2 <_calloc_r+0x12>

0801ccc8 <__ascii_mbtowc>:
 801ccc8:	b082      	sub	sp, #8
 801ccca:	b901      	cbnz	r1, 801ccce <__ascii_mbtowc+0x6>
 801cccc:	a901      	add	r1, sp, #4
 801ccce:	b142      	cbz	r2, 801cce2 <__ascii_mbtowc+0x1a>
 801ccd0:	b14b      	cbz	r3, 801cce6 <__ascii_mbtowc+0x1e>
 801ccd2:	7813      	ldrb	r3, [r2, #0]
 801ccd4:	600b      	str	r3, [r1, #0]
 801ccd6:	7812      	ldrb	r2, [r2, #0]
 801ccd8:	1e10      	subs	r0, r2, #0
 801ccda:	bf18      	it	ne
 801ccdc:	2001      	movne	r0, #1
 801ccde:	b002      	add	sp, #8
 801cce0:	4770      	bx	lr
 801cce2:	4610      	mov	r0, r2
 801cce4:	e7fb      	b.n	801ccde <__ascii_mbtowc+0x16>
 801cce6:	f06f 0001 	mvn.w	r0, #1
 801ccea:	e7f8      	b.n	801ccde <__ascii_mbtowc+0x16>

0801ccec <_realloc_r>:
 801ccec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ccf0:	4607      	mov	r7, r0
 801ccf2:	4614      	mov	r4, r2
 801ccf4:	460d      	mov	r5, r1
 801ccf6:	b921      	cbnz	r1, 801cd02 <_realloc_r+0x16>
 801ccf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ccfc:	4611      	mov	r1, r2
 801ccfe:	f7fd ba05 	b.w	801a10c <_malloc_r>
 801cd02:	b92a      	cbnz	r2, 801cd10 <_realloc_r+0x24>
 801cd04:	f7ff f820 	bl	801bd48 <_free_r>
 801cd08:	4625      	mov	r5, r4
 801cd0a:	4628      	mov	r0, r5
 801cd0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cd10:	f000 f83a 	bl	801cd88 <_malloc_usable_size_r>
 801cd14:	4284      	cmp	r4, r0
 801cd16:	4606      	mov	r6, r0
 801cd18:	d802      	bhi.n	801cd20 <_realloc_r+0x34>
 801cd1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801cd1e:	d8f4      	bhi.n	801cd0a <_realloc_r+0x1e>
 801cd20:	4621      	mov	r1, r4
 801cd22:	4638      	mov	r0, r7
 801cd24:	f7fd f9f2 	bl	801a10c <_malloc_r>
 801cd28:	4680      	mov	r8, r0
 801cd2a:	b908      	cbnz	r0, 801cd30 <_realloc_r+0x44>
 801cd2c:	4645      	mov	r5, r8
 801cd2e:	e7ec      	b.n	801cd0a <_realloc_r+0x1e>
 801cd30:	42b4      	cmp	r4, r6
 801cd32:	4622      	mov	r2, r4
 801cd34:	4629      	mov	r1, r5
 801cd36:	bf28      	it	cs
 801cd38:	4632      	movcs	r2, r6
 801cd3a:	f7fe f99e 	bl	801b07a <memcpy>
 801cd3e:	4629      	mov	r1, r5
 801cd40:	4638      	mov	r0, r7
 801cd42:	f7ff f801 	bl	801bd48 <_free_r>
 801cd46:	e7f1      	b.n	801cd2c <_realloc_r+0x40>

0801cd48 <__ascii_wctomb>:
 801cd48:	4603      	mov	r3, r0
 801cd4a:	4608      	mov	r0, r1
 801cd4c:	b141      	cbz	r1, 801cd60 <__ascii_wctomb+0x18>
 801cd4e:	2aff      	cmp	r2, #255	@ 0xff
 801cd50:	d904      	bls.n	801cd5c <__ascii_wctomb+0x14>
 801cd52:	228a      	movs	r2, #138	@ 0x8a
 801cd54:	601a      	str	r2, [r3, #0]
 801cd56:	f04f 30ff 	mov.w	r0, #4294967295
 801cd5a:	4770      	bx	lr
 801cd5c:	700a      	strb	r2, [r1, #0]
 801cd5e:	2001      	movs	r0, #1
 801cd60:	4770      	bx	lr
	...

0801cd64 <fiprintf>:
 801cd64:	b40e      	push	{r1, r2, r3}
 801cd66:	b503      	push	{r0, r1, lr}
 801cd68:	4601      	mov	r1, r0
 801cd6a:	ab03      	add	r3, sp, #12
 801cd6c:	4805      	ldr	r0, [pc, #20]	@ (801cd84 <fiprintf+0x20>)
 801cd6e:	f853 2b04 	ldr.w	r2, [r3], #4
 801cd72:	6800      	ldr	r0, [r0, #0]
 801cd74:	9301      	str	r3, [sp, #4]
 801cd76:	f7ff fd2d 	bl	801c7d4 <_vfiprintf_r>
 801cd7a:	b002      	add	sp, #8
 801cd7c:	f85d eb04 	ldr.w	lr, [sp], #4
 801cd80:	b003      	add	sp, #12
 801cd82:	4770      	bx	lr
 801cd84:	20000130 	.word	0x20000130

0801cd88 <_malloc_usable_size_r>:
 801cd88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cd8c:	1f18      	subs	r0, r3, #4
 801cd8e:	2b00      	cmp	r3, #0
 801cd90:	bfbc      	itt	lt
 801cd92:	580b      	ldrlt	r3, [r1, r0]
 801cd94:	18c0      	addlt	r0, r0, r3
 801cd96:	4770      	bx	lr

0801cd98 <_init>:
 801cd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cd9a:	bf00      	nop
 801cd9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cd9e:	bc08      	pop	{r3}
 801cda0:	469e      	mov	lr, r3
 801cda2:	4770      	bx	lr

0801cda4 <_fini>:
 801cda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cda6:	bf00      	nop
 801cda8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cdaa:	bc08      	pop	{r3}
 801cdac:	469e      	mov	lr, r3
 801cdae:	4770      	bx	lr
