
DeltaTPlus_STM32WB55RG_090525.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c170  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018dc  0801c2b0  0801c2b0  0001d2b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801db8c  0801db8c  0001eb8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0801db94  0801db94  0001eb94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000008  0801db9c  0801db9c  0001eb9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000304  20000008  0801dba4  0001f008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  2000030c  0801dea8  0001f30c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000344  0801dedd  0001f344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002458  20000358  0801deee  0001f358  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  200027b0  0801deee  0001f7b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00021000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00021000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0801deee  000201e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0007c5e9  00000000  00000000  00020a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000db8f  00000000  00000000  0009d080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00004350  00000000  00000000  000aac10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000033c9  00000000  00000000  000aef60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003bf88  00000000  00000000  000b2329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0005ed8a  00000000  00000000  000ee2b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00121e65  00000000  00000000  0014d03b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0026eea0  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00012da0  00000000  00000000  0026eee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000008f  00000000  00000000  00281c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000358 	.word	0x20000358
 800015c:	00000000 	.word	0x00000000
 8000160:	0801c298 	.word	0x0801c298

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000035c 	.word	0x2000035c
 800017c:	0801c298 	.word	0x0801c298

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <_ZN23Adafruit_MAX17048_STM32C1Ev>:

#include "Adafruit_MAX1704X.h"

#include <math.h>

Adafruit_MAX17048_STM32::Adafruit_MAX17048_STM32()
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
{
  _hi2c = nullptr;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
  _i2c_addr = MAX17048_I2CADDR_DEFAULT << 1; // STM32 HAL uses 8-bit address
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	226c      	movs	r2, #108	@ 0x6c
 8000f36:	809a      	strh	r2, [r3, #4]
  _timeout = 1000;                           // 1 second timeout
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f3e:	609a      	str	r2, [r3, #8]
}
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4618      	mov	r0, r3
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <_ZN23Adafruit_MAX17048_STM325beginEP19__I2C_HandleTypeDeft>:

bool Adafruit_MAX17048_STM32::begin(I2C_HandleTypeDef *hi2c, uint16_t i2c_addr)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b084      	sub	sp, #16
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	60f8      	str	r0, [r7, #12]
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	80fb      	strh	r3, [r7, #6]
  _hi2c = hi2c;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	601a      	str	r2, [r3, #0]
  _i2c_addr = i2c_addr << 1; // Convert to 8-bit address for HAL
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	809a      	strh	r2, [r3, #4]

  if (!isDeviceReady())
 8000f6c:	68f8      	ldr	r0, [r7, #12]
 8000f6e:	f000 f92d 	bl	80011cc <_ZN23Adafruit_MAX17048_STM3213isDeviceReadyEv>
 8000f72:	4603      	mov	r3, r0
 8000f74:	f083 0301 	eor.w	r3, r3, #1
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <_ZN23Adafruit_MAX17048_STM325beginEP19__I2C_HandleTypeDeft+0x34>
  {
    return false;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e013      	b.n	8000faa <_ZN23Adafruit_MAX17048_STM325beginEP19__I2C_HandleTypeDeft+0x5c>
  }

  if (!reset())
 8000f82:	68f8      	ldr	r0, [r7, #12]
 8000f84:	f000 f937 	bl	80011f6 <_ZN23Adafruit_MAX17048_STM325resetEv>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	f083 0301 	eor.w	r3, r3, #1
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <_ZN23Adafruit_MAX17048_STM325beginEP19__I2C_HandleTypeDeft+0x4a>
  {
    return false;
 8000f94:	2300      	movs	r3, #0
 8000f96:	e008      	b.n	8000faa <_ZN23Adafruit_MAX17048_STM325beginEP19__I2C_HandleTypeDeft+0x5c>
  }

  enableSleep(false);
 8000f98:	2100      	movs	r1, #0
 8000f9a:	68f8      	ldr	r0, [r7, #12]
 8000f9c:	f000 f9f1 	bl	8001382 <_ZN23Adafruit_MAX17048_STM3211enableSleepEb>
  sleep(false);
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	68f8      	ldr	r0, [r7, #12]
 8000fa4:	f000 f9d6 	bl	8001354 <_ZN23Adafruit_MAX17048_STM325sleepEb>

  return true;
 8000fa8:	2301      	movs	r3, #1
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <_ZN23Adafruit_MAX17048_STM3214writeRegister8Ehh>:

bool Adafruit_MAX17048_STM32::writeRegister8(uint8_t reg, uint8_t value)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b086      	sub	sp, #24
 8000fb6:	af02      	add	r7, sp, #8
 8000fb8:	6078      	str	r0, [r7, #4]
 8000fba:	460b      	mov	r3, r1
 8000fbc:	70fb      	strb	r3, [r7, #3]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	70bb      	strb	r3, [r7, #2]
  uint8_t data[2] = {reg, value};
 8000fc2:	78fb      	ldrb	r3, [r7, #3]
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	78bb      	ldrb	r3, [r7, #2]
 8000fc8:	737b      	strb	r3, [r7, #13]
  HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(_hi2c, _i2c_addr, data, 2, _timeout);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6818      	ldr	r0, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	8899      	ldrh	r1, [r3, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	f107 020c 	add.w	r2, r7, #12
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2302      	movs	r3, #2
 8000fde:	f007 f98b 	bl	80082f8 <HAL_I2C_Master_Transmit>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	73fb      	strb	r3, [r7, #15]
  return (status == HAL_OK);
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	bf0c      	ite	eq
 8000fec:	2301      	moveq	r3, #1
 8000fee:	2300      	movne	r3, #0
 8000ff0:	b2db      	uxtb	r3, r3
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <_ZN23Adafruit_MAX17048_STM3215writeRegister16Eht>:

bool Adafruit_MAX17048_STM32::writeRegister16(uint8_t reg, uint16_t value)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b086      	sub	sp, #24
 8000ffe:	af02      	add	r7, sp, #8
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	460b      	mov	r3, r1
 8001004:	70fb      	strb	r3, [r7, #3]
 8001006:	4613      	mov	r3, r2
 8001008:	803b      	strh	r3, [r7, #0]
  uint8_t data[3] = {reg, (uint8_t)(value >> 8), (uint8_t)(value & 0xFF)};
 800100a:	78fb      	ldrb	r3, [r7, #3]
 800100c:	733b      	strb	r3, [r7, #12]
 800100e:	883b      	ldrh	r3, [r7, #0]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	b29b      	uxth	r3, r3
 8001014:	b2db      	uxtb	r3, r3
 8001016:	737b      	strb	r3, [r7, #13]
 8001018:	883b      	ldrh	r3, [r7, #0]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	73bb      	strb	r3, [r7, #14]
  HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(_hi2c, _i2c_addr, data, 3, _timeout);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6818      	ldr	r0, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	8899      	ldrh	r1, [r3, #4]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f107 020c 	add.w	r2, r7, #12
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2303      	movs	r3, #3
 8001032:	f007 f961 	bl	80082f8 <HAL_I2C_Master_Transmit>
 8001036:	4603      	mov	r3, r0
 8001038:	73fb      	strb	r3, [r7, #15]
  return (status == HAL_OK);
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	2b00      	cmp	r3, #0
 800103e:	bf0c      	ite	eq
 8001040:	2301      	moveq	r3, #1
 8001042:	2300      	movne	r3, #0
 8001044:	b2db      	uxtb	r3, r3
}
 8001046:	4618      	mov	r0, r3
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <_ZN23Adafruit_MAX17048_STM3213readRegister8Eh>:

uint8_t Adafruit_MAX17048_STM32::readRegister8(uint8_t reg)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b086      	sub	sp, #24
 8001052:	af02      	add	r7, sp, #8
 8001054:	6078      	str	r0, [r7, #4]
 8001056:	460b      	mov	r3, r1
 8001058:	70fb      	strb	r3, [r7, #3]
  uint8_t data = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	73fb      	strb	r3, [r7, #15]

  // Write register address
  if (HAL_I2C_Master_Transmit(_hi2c, _i2c_addr, &reg, 1, _timeout) != HAL_OK)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6818      	ldr	r0, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	8899      	ldrh	r1, [r3, #4]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	1cfa      	adds	r2, r7, #3
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2301      	movs	r3, #1
 8001070:	f007 f942 	bl	80082f8 <HAL_I2C_Master_Transmit>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	bf14      	ite	ne
 800107a:	2301      	movne	r3, #1
 800107c:	2300      	moveq	r3, #0
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <_ZN23Adafruit_MAX17048_STM3213readRegister8Eh+0x3a>
  {
    return 0;
 8001084:	2300      	movs	r3, #0
 8001086:	e00c      	b.n	80010a2 <_ZN23Adafruit_MAX17048_STM3213readRegister8Eh+0x54>
  }

  // Read data
  HAL_I2C_Master_Receive(_hi2c, _i2c_addr, &data, 1, _timeout);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6818      	ldr	r0, [r3, #0]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	8899      	ldrh	r1, [r3, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	f107 020f 	add.w	r2, r7, #15
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2301      	movs	r3, #1
 800109c:	f007 fa44 	bl	8008528 <HAL_I2C_Master_Receive>

  return data;
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <_ZN23Adafruit_MAX17048_STM3214readRegister16Eh>:

uint16_t Adafruit_MAX17048_STM32::readRegister16(uint8_t reg)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b086      	sub	sp, #24
 80010ae:	af02      	add	r7, sp, #8
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	460b      	mov	r3, r1
 80010b4:	70fb      	strb	r3, [r7, #3]
  uint8_t data[2] = {0, 0};
 80010b6:	2300      	movs	r3, #0
 80010b8:	81bb      	strh	r3, [r7, #12]

  // Write register address
  if (HAL_I2C_Master_Transmit(_hi2c, _i2c_addr, &reg, 1, _timeout) != HAL_OK)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6818      	ldr	r0, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	8899      	ldrh	r1, [r3, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	1cfa      	adds	r2, r7, #3
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2301      	movs	r3, #1
 80010cc:	f007 f914 	bl	80082f8 <HAL_I2C_Master_Transmit>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	bf14      	ite	ne
 80010d6:	2301      	movne	r3, #1
 80010d8:	2300      	moveq	r3, #0
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <_ZN23Adafruit_MAX17048_STM3214readRegister16Eh+0x3a>
  {
    return 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	e01e      	b.n	8001122 <_ZN23Adafruit_MAX17048_STM3214readRegister16Eh+0x78>
  }

  // Read data
  if (HAL_I2C_Master_Receive(_hi2c, _i2c_addr, data, 2, _timeout) != HAL_OK)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6818      	ldr	r0, [r3, #0]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	8899      	ldrh	r1, [r3, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f107 020c 	add.w	r2, r7, #12
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2302      	movs	r3, #2
 80010f8:	f007 fa16 	bl	8008528 <HAL_I2C_Master_Receive>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	bf14      	ite	ne
 8001102:	2301      	movne	r3, #1
 8001104:	2300      	moveq	r3, #0
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <_ZN23Adafruit_MAX17048_STM3214readRegister16Eh+0x66>
  {
    return 0;
 800110c:	2300      	movs	r3, #0
 800110e:	e008      	b.n	8001122 <_ZN23Adafruit_MAX17048_STM3214readRegister16Eh+0x78>
  }

  return (data[0] << 8) | data[1]; // MSB first
 8001110:	7b3b      	ldrb	r3, [r7, #12]
 8001112:	b21b      	sxth	r3, r3
 8001114:	021b      	lsls	r3, r3, #8
 8001116:	b21a      	sxth	r2, r3
 8001118:	7b7b      	ldrb	r3, [r7, #13]
 800111a:	b21b      	sxth	r3, r3
 800111c:	4313      	orrs	r3, r2
 800111e:	b21b      	sxth	r3, r3
 8001120:	b29b      	uxth	r3, r3
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <_ZN23Adafruit_MAX17048_STM329writeBitsEhhhh>:

bool Adafruit_MAX17048_STM32::writeBits(uint8_t reg, uint8_t bitStart, uint8_t length, uint8_t data)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b084      	sub	sp, #16
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	4608      	mov	r0, r1
 8001134:	4611      	mov	r1, r2
 8001136:	461a      	mov	r2, r3
 8001138:	4603      	mov	r3, r0
 800113a:	70fb      	strb	r3, [r7, #3]
 800113c:	460b      	mov	r3, r1
 800113e:	70bb      	strb	r3, [r7, #2]
 8001140:	4613      	mov	r3, r2
 8001142:	707b      	strb	r3, [r7, #1]
  uint8_t regValue = readRegister8(reg);
 8001144:	78fb      	ldrb	r3, [r7, #3]
 8001146:	4619      	mov	r1, r3
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff80 	bl	800104e <_ZN23Adafruit_MAX17048_STM3213readRegister8Eh>
 800114e:	4603      	mov	r3, r0
 8001150:	73fb      	strb	r3, [r7, #15]
  uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 8001152:	787b      	ldrb	r3, [r7, #1]
 8001154:	2201      	movs	r2, #1
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	1e5a      	subs	r2, r3, #1
 800115c:	78b9      	ldrb	r1, [r7, #2]
 800115e:	787b      	ldrb	r3, [r7, #1]
 8001160:	1acb      	subs	r3, r1, r3
 8001162:	3301      	adds	r3, #1
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	73bb      	strb	r3, [r7, #14]
  data <<= (bitStart - length + 1);
 800116a:	7e3a      	ldrb	r2, [r7, #24]
 800116c:	78b9      	ldrb	r1, [r7, #2]
 800116e:	787b      	ldrb	r3, [r7, #1]
 8001170:	1acb      	subs	r3, r1, r3
 8001172:	3301      	adds	r3, #1
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	763b      	strb	r3, [r7, #24]
  data &= mask;
 800117a:	7e3a      	ldrb	r2, [r7, #24]
 800117c:	7bbb      	ldrb	r3, [r7, #14]
 800117e:	4013      	ands	r3, r2
 8001180:	763b      	strb	r3, [r7, #24]
  regValue &= ~mask;
 8001182:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001186:	43db      	mvns	r3, r3
 8001188:	b25a      	sxtb	r2, r3
 800118a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118e:	4013      	ands	r3, r2
 8001190:	b25b      	sxtb	r3, r3
 8001192:	73fb      	strb	r3, [r7, #15]
  regValue |= data;
 8001194:	7bfa      	ldrb	r2, [r7, #15]
 8001196:	7e3b      	ldrb	r3, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	73fb      	strb	r3, [r7, #15]
  return writeRegister8(reg, regValue);
 800119c:	7bfa      	ldrb	r2, [r7, #15]
 800119e:	78fb      	ldrb	r3, [r7, #3]
 80011a0:	4619      	mov	r1, r3
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ff05 	bl	8000fb2 <_ZN23Adafruit_MAX17048_STM3214writeRegister8Ehh>
 80011a8:	4603      	mov	r3, r0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <_ZN23Adafruit_MAX17048_STM3212getICversionEv>:
  regValue >>= (bitStart - length + 1);
  return regValue;
}

uint16_t Adafruit_MAX17048_STM32::getICversion(void)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
  return readRegister16(MAX1704X_VERSION_REG);
 80011ba:	2108      	movs	r1, #8
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff ff74 	bl	80010aa <_ZN23Adafruit_MAX17048_STM3214readRegister16Eh>
 80011c2:	4603      	mov	r3, r0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <_ZN23Adafruit_MAX17048_STM3213isDeviceReadyEv>:
{
  return readRegister8(MAX1704X_CHIPID_REG);
}

bool Adafruit_MAX17048_STM32::isDeviceReady(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  return (getICversion() & 0xFFF0) == 0x0010;
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ffec 	bl	80011b2 <_ZN23Adafruit_MAX17048_STM3212getICversionEv>
 80011da:	4603      	mov	r3, r0
 80011dc:	461a      	mov	r2, r3
 80011de:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80011e2:	4013      	ands	r3, r2
 80011e4:	2b10      	cmp	r3, #16
 80011e6:	bf0c      	ite	eq
 80011e8:	2301      	moveq	r3, #1
 80011ea:	2300      	movne	r3, #0
 80011ec:	b2db      	uxtb	r3, r3
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <_ZN23Adafruit_MAX17048_STM325resetEv>:

bool Adafruit_MAX17048_STM32::reset(void)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b084      	sub	sp, #16
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
  // Send reset command - expect this to fail with NACK as chip resets
  writeRegister16(MAX1704X_CMD_REG, 0x5400);
 80011fe:	f44f 42a8 	mov.w	r2, #21504	@ 0x5400
 8001202:	21fe      	movs	r1, #254	@ 0xfe
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff fef8 	bl	8000ffa <_ZN23Adafruit_MAX17048_STM3215writeRegister16Eht>

  // Wait for reset to complete
  HAL_Delay(100);
 800120a:	2064      	movs	r0, #100	@ 0x64
 800120c:	f003 fef7 	bl	8004ffe <HAL_Delay>

  // Try to clear reset flag
  for (uint8_t retries = 0; retries < 3; retries++)
 8001210:	2300      	movs	r3, #0
 8001212:	73fb      	strb	r3, [r7, #15]
 8001214:	e00e      	b.n	8001234 <_ZN23Adafruit_MAX17048_STM325resetEv+0x3e>
  {
    if (clearAlertFlag(MAX1704X_ALERTFLAG_RESET_INDICATOR))
 8001216:	2101      	movs	r1, #1
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f000 f813 	bl	8001244 <_ZN23Adafruit_MAX17048_STM3214clearAlertFlagEh>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <_ZN23Adafruit_MAX17048_STM325resetEv+0x32>
    {
      return true;
 8001224:	2301      	movs	r3, #1
 8001226:	e009      	b.n	800123c <_ZN23Adafruit_MAX17048_STM325resetEv+0x46>
    }
    HAL_Delay(50);
 8001228:	2032      	movs	r0, #50	@ 0x32
 800122a:	f003 fee8 	bl	8004ffe <HAL_Delay>
  for (uint8_t retries = 0; retries < 3; retries++)
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	3301      	adds	r3, #1
 8001232:	73fb      	strb	r3, [r7, #15]
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	2b02      	cmp	r3, #2
 8001238:	d9ed      	bls.n	8001216 <_ZN23Adafruit_MAX17048_STM325resetEv+0x20>
  }

  return false;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <_ZN23Adafruit_MAX17048_STM3214clearAlertFlagEh>:

bool Adafruit_MAX17048_STM32::clearAlertFlag(uint8_t flags)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	70fb      	strb	r3, [r7, #3]
  uint8_t status = readRegister8(MAX1704X_STATUS_REG);
 8001250:	211a      	movs	r1, #26
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff fefb 	bl	800104e <_ZN23Adafruit_MAX17048_STM3213readRegister8Eh>
 8001258:	4603      	mov	r3, r0
 800125a:	73fb      	strb	r3, [r7, #15]
  status &= ~flags;
 800125c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001260:	43db      	mvns	r3, r3
 8001262:	b25a      	sxtb	r2, r3
 8001264:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001268:	4013      	ands	r3, r2
 800126a:	b25b      	sxtb	r3, r3
 800126c:	73fb      	strb	r3, [r7, #15]
  return writeRegister8(MAX1704X_STATUS_REG, status);
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	461a      	mov	r2, r3
 8001272:	211a      	movs	r1, #26
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff fe9c 	bl	8000fb2 <_ZN23Adafruit_MAX17048_STM3214writeRegister8Ehh>
 800127a:	4603      	mov	r3, r0
}
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <_ZN23Adafruit_MAX17048_STM3211cellPercentEv>:
  uint16_t voltage = readRegister16(MAX1704X_VCELL_REG);
  return voltage * 78.125 / 1000000.0; // Convert to volts
}

float Adafruit_MAX17048_STM32::cellPercent(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  if (!isDeviceReady())
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff ff9d 	bl	80011cc <_ZN23Adafruit_MAX17048_STM3213isDeviceReadyEv>
 8001292:	4603      	mov	r3, r0
 8001294:	f083 0301 	eor.w	r3, r3, #1
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <_ZN23Adafruit_MAX17048_STM3211cellPercentEv+0x1e>
  {
    return NAN;
 800129e:	4b0f      	ldr	r3, [pc, #60]	@ (80012dc <_ZN23Adafruit_MAX17048_STM3211cellPercentEv+0x58>)
 80012a0:	e015      	b.n	80012ce <_ZN23Adafruit_MAX17048_STM3211cellPercentEv+0x4a>
  }

  uint16_t percent = readRegister16(MAX1704X_SOC_REG);
 80012a2:	2104      	movs	r1, #4
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f7ff ff00 	bl	80010aa <_ZN23Adafruit_MAX17048_STM3214readRegister16Eh>
 80012aa:	4603      	mov	r3, r0
 80012ac:	81fb      	strh	r3, [r7, #14]
  return percent / 256.0; // Convert to percentage
 80012ae:	89fb      	ldrh	r3, [r7, #14]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff f90f 	bl	80004d4 <__aeabi_i2d>
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <_ZN23Adafruit_MAX17048_STM3211cellPercentEv+0x5c>)
 80012bc:	f7ff fa9e 	bl	80007fc <__aeabi_ddiv>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f7ff fc46 	bl	8000b58 <__aeabi_d2f>
 80012cc:	4603      	mov	r3, r0
}
 80012ce:	ee07 3a90 	vmov	s15, r3
 80012d2:	eeb0 0a67 	vmov.f32	s0, s15
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	7fc00000 	.word	0x7fc00000
 80012e0:	40700000 	.word	0x40700000
 80012e4:	00000000 	.word	0x00000000

080012e8 <_ZN23Adafruit_MAX17048_STM3210chargeRateEv>:

float Adafruit_MAX17048_STM32::chargeRate(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  if (!isDeviceReady())
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ff6b 	bl	80011cc <_ZN23Adafruit_MAX17048_STM3213isDeviceReadyEv>
 80012f6:	4603      	mov	r3, r0
 80012f8:	f083 0301 	eor.w	r3, r3, #1
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <_ZN23Adafruit_MAX17048_STM3210chargeRateEv+0x1e>
  {
    return NAN;
 8001302:	4b13      	ldr	r3, [pc, #76]	@ (8001350 <_ZN23Adafruit_MAX17048_STM3210chargeRateEv+0x68>)
 8001304:	e016      	b.n	8001334 <_ZN23Adafruit_MAX17048_STM3210chargeRateEv+0x4c>
  }

  int16_t rate = (int16_t)readRegister16(MAX1704X_CRATE_REG);
 8001306:	2116      	movs	r1, #22
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff fece 	bl	80010aa <_ZN23Adafruit_MAX17048_STM3214readRegister16Eh>
 800130e:	4603      	mov	r3, r0
 8001310:	81fb      	strh	r3, [r7, #14]
  return rate * 0.208; // Convert to %/hour
 8001312:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff f8dc 	bl	80004d4 <__aeabi_i2d>
 800131c:	a30a      	add	r3, pc, #40	@ (adr r3, 8001348 <_ZN23Adafruit_MAX17048_STM3210chargeRateEv+0x60>)
 800131e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001322:	f7ff f941 	bl	80005a8 <__aeabi_dmul>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4610      	mov	r0, r2
 800132c:	4619      	mov	r1, r3
 800132e:	f7ff fc13 	bl	8000b58 <__aeabi_d2f>
 8001332:	4603      	mov	r3, r0
}
 8001334:	ee07 3a90 	vmov	s15, r3
 8001338:	eeb0 0a67 	vmov.f32	s0, s15
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	f3af 8000 	nop.w
 8001348:	76c8b439 	.word	0x76c8b439
 800134c:	3fca9fbe 	.word	0x3fca9fbe
 8001350:	7fc00000 	.word	0x7fc00000

08001354 <_ZN23Adafruit_MAX17048_STM325sleepEb>:
  writeRegister8(MAX1704X_HIBRT_REG, 0x00);
  writeRegister8(MAX1704X_HIBRT_REG + 1, 0x00);
}

void Adafruit_MAX17048_STM32::sleep(bool s)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af02      	add	r7, sp, #8
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	70fb      	strb	r3, [r7, #3]
  writeBits(MAX1704X_CONFIG_REG, 7, 1, s ? 1 : 0);
 8001360:	78fb      	ldrb	r3, [r7, #3]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <_ZN23Adafruit_MAX17048_STM325sleepEb+0x16>
 8001366:	2301      	movs	r3, #1
 8001368:	e000      	b.n	800136c <_ZN23Adafruit_MAX17048_STM325sleepEb+0x18>
 800136a:	2300      	movs	r3, #0
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	2301      	movs	r3, #1
 8001370:	2207      	movs	r2, #7
 8001372:	210c      	movs	r1, #12
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff fed8 	bl	800112a <_ZN23Adafruit_MAX17048_STM329writeBitsEhhhh>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <_ZN23Adafruit_MAX17048_STM3211enableSleepEb>:

void Adafruit_MAX17048_STM32::enableSleep(bool en)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b084      	sub	sp, #16
 8001386:	af02      	add	r7, sp, #8
 8001388:	6078      	str	r0, [r7, #4]
 800138a:	460b      	mov	r3, r1
 800138c:	70fb      	strb	r3, [r7, #3]
  writeBits(MAX1704X_MODE_REG, 5, 1, en ? 1 : 0);
 800138e:	78fb      	ldrb	r3, [r7, #3]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <_ZN23Adafruit_MAX17048_STM3211enableSleepEb+0x16>
 8001394:	2301      	movs	r3, #1
 8001396:	e000      	b.n	800139a <_ZN23Adafruit_MAX17048_STM3211enableSleepEb+0x18>
 8001398:	2300      	movs	r3, #0
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2301      	movs	r3, #1
 800139e:	2205      	movs	r2, #5
 80013a0:	2106      	movs	r1, #6
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff fec1 	bl	800112a <_ZN23Adafruit_MAX17048_STM329writeBitsEhhhh>
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <_ZN23Adafruit_MAX17048_STM3210quickStartEv>:

void Adafruit_MAX17048_STM32::quickStart(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af02      	add	r7, sp, #8
 80013b6:	6078      	str	r0, [r7, #4]
  writeBits(MAX1704X_MODE_REG, 6, 1, 1);
 80013b8:	2301      	movs	r3, #1
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	2301      	movs	r3, #1
 80013be:	2206      	movs	r2, #6
 80013c0:	2106      	movs	r1, #6
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff feb1 	bl	800112a <_ZN23Adafruit_MAX17048_STM329writeBitsEhhhh>
  // Bit is automatically cleared by the chip
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	4a06      	ldr	r2, [pc, #24]	@ (80013f4 <_ZN5PrintC1Ev+0x24>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	0801ca34 	.word	0x0801ca34

080013f8 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overridden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	2300      	movs	r3, #0
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <_ZN12Adafruit_GFX9setCursorEss>:
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	460b      	mov	r3, r1
 800142c:	807b      	strh	r3, [r7, #2]
 800142e:	4613      	mov	r3, r2
 8001430:	803b      	strh	r3, [r7, #0]
    cursor_x = x;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	887a      	ldrh	r2, [r7, #2]
 8001436:	821a      	strh	r2, [r3, #16]
    cursor_y = y;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	883a      	ldrh	r2, [r7, #0]
 800143c:	825a      	strh	r2, [r3, #18]
  }
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <_ZN12Adafruit_GFX12setTextColorEt>:
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
 8001452:	460b      	mov	r3, r1
 8001454:	807b      	strh	r3, [r7, #2]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	887a      	ldrh	r2, [r7, #2]
 800145a:	82da      	strh	r2, [r3, #22]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	8ada      	ldrh	r2, [r3, #22]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	829a      	strh	r2, [r3, #20]
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <_ZNK12Adafruit_GFX5widthEv>:
  /*!
    @brief      Get width of the display, accounting for current rotation
    @returns    Width in pixels
  */
  /************************************************************************/
  int16_t width(void) const { return _width; };
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <_ZNK12Adafruit_GFX6heightEv>:
  /*!
    @brief      Get height of the display, accounting for current rotation
    @returns    Height in pixels
  */
  /************************************************************************/
  int16_t height(void) const { return _height; }
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <_ZNK12Adafruit_GFX11getRotationEv>:
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	7e9b      	ldrb	r3, [r3, #26]
 80014b0:	4618      	mov	r0, r3
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <_Z18pgm_read_glyph_ptrPK7GFXfonth>:
#define pgm_read_pointer(addr) ((void *)pgm_read_dword(addr))
#else
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	70fb      	strb	r3, [r7, #3]
#else
  // expression in __AVR__ section may generate "dereferencing type-punned
  // pointer will break strict-aliasing rules" warning In fact, on other
  // platforms (such as STM32) there is no need to do this pointer magic as
  // program memory may be read in a usual way So expression may be simplified
  return gfxFont->glyph + c;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	78fb      	ldrb	r3, [r7, #3]
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	4413      	add	r3, r2
#endif //__AVR__
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <_Z19pgm_read_bitmap_ptrPK7GFXfont>:

inline uint8_t *pgm_read_bitmap_ptr(const GFXfont *gfxFont) {
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
#else
  // expression in __AVR__ section generates "dereferencing type-punned pointer
  // will break strict-aliasing rules" warning In fact, on other platforms (such
  // as STM32) there is no need to do this pointer magic as program memory may
  // be read in a usual way So expression may be simplified
  return gfxFont->bitmap;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
#endif //__AVR__
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <_ZN12Adafruit_GFXC1Ess>:
   superclass
   @param    w   Display width, in pixels
   @param    h   Display height, in pixels
*/
/**************************************************************************/
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	807b      	strh	r3, [r7, #2]
 8001504:	4613      	mov	r3, r2
 8001506:	803b      	strh	r3, [r7, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff ff60 	bl	80013d0 <_ZN5PrintC1Ev>
 8001510:	4a1d      	ldr	r2, [pc, #116]	@ (8001588 <_ZN12Adafruit_GFXC1Ess+0x90>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	887a      	ldrh	r2, [r7, #2]
 800151a:	811a      	strh	r2, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	883a      	ldrh	r2, [r7, #0]
 8001520:	815a      	strh	r2, [r3, #10]
  _width = WIDTH;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	819a      	strh	r2, [r3, #12]
  _height = HEIGHT;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	81da      	strh	r2, [r3, #14]
  rotation = 0;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	769a      	strb	r2, [r3, #26]
  cursor_y = cursor_x = 0;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	821a      	strh	r2, [r3, #16]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	825a      	strh	r2, [r3, #18]
  textsize_x = textsize_y = 1;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	765a      	strb	r2, [r3, #25]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	7e5a      	ldrb	r2, [r3, #25]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	761a      	strb	r2, [r3, #24]
  textcolor = textbgcolor = 0xFFFF;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001560:	82da      	strh	r2, [r3, #22]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	8ada      	ldrh	r2, [r3, #22]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	829a      	strh	r2, [r3, #20]
  wrap = true;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2201      	movs	r2, #1
 800156e:	76da      	strb	r2, [r3, #27]
  _cp437 = false;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	771a      	strb	r2, [r3, #28]
  gfxFont = NULL;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	621a      	str	r2, [r3, #32]
}
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	0801c9dc 	.word	0x0801c9dc

0800158c <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                             uint16_t color) {
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b08b      	sub	sp, #44	@ 0x2c
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	4608      	mov	r0, r1
 8001596:	4611      	mov	r1, r2
 8001598:	461a      	mov	r2, r3
 800159a:	4603      	mov	r3, r0
 800159c:	817b      	strh	r3, [r7, #10]
 800159e:	460b      	mov	r3, r1
 80015a0:	813b      	strh	r3, [r7, #8]
 80015a2:	4613      	mov	r3, r2
 80015a4:	80fb      	strh	r3, [r7, #6]
#if defined(ESP8266)
  yield();
#endif
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80015a6:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	@ 0x38
 80015aa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80015b4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80015b8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80015bc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80015c0:	1acb      	subs	r3, r1, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	bfb8      	it	lt
 80015c6:	425b      	neglt	r3, r3
 80015c8:	429a      	cmp	r2, r3
 80015ca:	bfcc      	ite	gt
 80015cc:	2301      	movgt	r3, #1
 80015ce:	2300      	movle	r3, #0
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (steep) {
 80015d4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00b      	beq.n	80015f4 <_ZN12Adafruit_GFX9writeLineEsssst+0x68>
    _swap_int16_t(x0, y0);
 80015dc:	897b      	ldrh	r3, [r7, #10]
 80015de:	843b      	strh	r3, [r7, #32]
 80015e0:	893b      	ldrh	r3, [r7, #8]
 80015e2:	817b      	strh	r3, [r7, #10]
 80015e4:	8c3b      	ldrh	r3, [r7, #32]
 80015e6:	813b      	strh	r3, [r7, #8]
    _swap_int16_t(x1, y1);
 80015e8:	88fb      	ldrh	r3, [r7, #6]
 80015ea:	83fb      	strh	r3, [r7, #30]
 80015ec:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80015ee:	80fb      	strh	r3, [r7, #6]
 80015f0:	8bfb      	ldrh	r3, [r7, #30]
 80015f2:	873b      	strh	r3, [r7, #56]	@ 0x38
  }

  if (x0 > x1) {
 80015f4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80015f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	dd0b      	ble.n	8001618 <_ZN12Adafruit_GFX9writeLineEsssst+0x8c>
    _swap_int16_t(x0, x1);
 8001600:	897b      	ldrh	r3, [r7, #10]
 8001602:	83bb      	strh	r3, [r7, #28]
 8001604:	88fb      	ldrh	r3, [r7, #6]
 8001606:	817b      	strh	r3, [r7, #10]
 8001608:	8bbb      	ldrh	r3, [r7, #28]
 800160a:	80fb      	strh	r3, [r7, #6]
    _swap_int16_t(y0, y1);
 800160c:	893b      	ldrh	r3, [r7, #8]
 800160e:	837b      	strh	r3, [r7, #26]
 8001610:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001612:	813b      	strh	r3, [r7, #8]
 8001614:	8b7b      	ldrh	r3, [r7, #26]
 8001616:	873b      	strh	r3, [r7, #56]	@ 0x38
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8001618:	88fa      	ldrh	r2, [r7, #6]
 800161a:	897b      	ldrh	r3, [r7, #10]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	b29b      	uxth	r3, r3
 8001620:	833b      	strh	r3, [r7, #24]
  dy = abs(y1 - y0);
 8001622:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	@ 0x38
 8001626:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	bfb8      	it	lt
 8001630:	425b      	neglt	r3, r3
 8001632:	82fb      	strh	r3, [r7, #22]

  int16_t err = dx / 2;
 8001634:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001638:	0fda      	lsrs	r2, r3, #31
 800163a:	4413      	add	r3, r2
 800163c:	105b      	asrs	r3, r3, #1
 800163e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  int16_t ystep;

  if (y0 < y1) {
 8001640:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001644:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001648:	429a      	cmp	r2, r3
 800164a:	da02      	bge.n	8001652 <_ZN12Adafruit_GFX9writeLineEsssst+0xc6>
    ystep = 1;
 800164c:	2301      	movs	r3, #1
 800164e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001650:	e037      	b.n	80016c2 <_ZN12Adafruit_GFX9writeLineEsssst+0x136>
  } else {
    ystep = -1;
 8001652:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001656:	84bb      	strh	r3, [r7, #36]	@ 0x24
  }

  for (; x0 <= x1; x0++) {
 8001658:	e033      	b.n	80016c2 <_ZN12Adafruit_GFX9writeLineEsssst+0x136>
    if (steep) {
 800165a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00b      	beq.n	800167a <_ZN12Adafruit_GFX9writeLineEsssst+0xee>
      writePixel(y0, x0, color);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	3318      	adds	r3, #24
 8001668:	681c      	ldr	r4, [r3, #0]
 800166a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800166c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001670:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	47a0      	blx	r4
 8001678:	e00a      	b.n	8001690 <_ZN12Adafruit_GFX9writeLineEsssst+0x104>
    } else {
      writePixel(x0, y0, color);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	3318      	adds	r3, #24
 8001680:	681c      	ldr	r4, [r3, #0]
 8001682:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001684:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001688:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	47a0      	blx	r4
    }
    err -= dy;
 8001690:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001692:	8afb      	ldrh	r3, [r7, #22]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	b29b      	uxth	r3, r3
 8001698:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (err < 0) {
 800169a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800169e:	2b00      	cmp	r3, #0
 80016a0:	da09      	bge.n	80016b6 <_ZN12Adafruit_GFX9writeLineEsssst+0x12a>
      y0 += ystep;
 80016a2:	893a      	ldrh	r2, [r7, #8]
 80016a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80016a6:	4413      	add	r3, r2
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	813b      	strh	r3, [r7, #8]
      err += dx;
 80016ac:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80016ae:	8b3b      	ldrh	r3, [r7, #24]
 80016b0:	4413      	add	r3, r2
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  for (; x0 <= x1; x0++) {
 80016b6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	3301      	adds	r3, #1
 80016be:	b29b      	uxth	r3, r3
 80016c0:	817b      	strh	r3, [r7, #10]
 80016c2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80016c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	ddc5      	ble.n	800165a <_ZN12Adafruit_GFX9writeLineEsssst+0xce>
    }
  }
}
 80016ce:	bf00      	nop
 80016d0:	bf00      	nop
 80016d2:	372c      	adds	r7, #44	@ 0x2c
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd90      	pop	{r4, r7, pc}

080016d8 <_ZN12Adafruit_GFX10startWriteEv>:
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite() {}
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
 80016ec:	b590      	push	{r4, r7, lr}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	4608      	mov	r0, r1
 80016f6:	4611      	mov	r1, r2
 80016f8:	461a      	mov	r2, r3
 80016fa:	4603      	mov	r3, r0
 80016fc:	817b      	strh	r3, [r7, #10]
 80016fe:	460b      	mov	r3, r1
 8001700:	813b      	strh	r3, [r7, #8]
 8001702:	4613      	mov	r3, r2
 8001704:	80fb      	strh	r3, [r7, #6]
  drawPixel(x, y, color);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	3310      	adds	r3, #16
 800170c:	681c      	ldr	r4, [r3, #0]
 800170e:	88fb      	ldrh	r3, [r7, #6]
 8001710:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001714:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	47a0      	blx	r4
}
 800171c:	bf00      	nop
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	bd90      	pop	{r4, r7, pc}

08001724 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                  uint16_t color) {
 8001724:	b590      	push	{r4, r7, lr}
 8001726:	b087      	sub	sp, #28
 8001728:	af02      	add	r7, sp, #8
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	4608      	mov	r0, r1
 800172e:	4611      	mov	r1, r2
 8001730:	461a      	mov	r2, r3
 8001732:	4603      	mov	r3, r0
 8001734:	817b      	strh	r3, [r7, #10]
 8001736:	460b      	mov	r3, r1
 8001738:	813b      	strh	r3, [r7, #8]
 800173a:	4613      	mov	r3, r2
 800173c:	80fb      	strh	r3, [r7, #6]
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
  drawFastVLine(x, y, h, color);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	3338      	adds	r3, #56	@ 0x38
 8001744:	681c      	ldr	r4, [r3, #0]
 8001746:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800174a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800174e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001752:	8c3b      	ldrh	r3, [r7, #32]
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	4603      	mov	r3, r0
 8001758:	68f8      	ldr	r0, [r7, #12]
 800175a:	47a0      	blx	r4
}
 800175c:	bf00      	nop
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	bd90      	pop	{r4, r7, pc}

08001764 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                  uint16_t color) {
 8001764:	b590      	push	{r4, r7, lr}
 8001766:	b087      	sub	sp, #28
 8001768:	af02      	add	r7, sp, #8
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	4608      	mov	r0, r1
 800176e:	4611      	mov	r1, r2
 8001770:	461a      	mov	r2, r3
 8001772:	4603      	mov	r3, r0
 8001774:	817b      	strh	r3, [r7, #10]
 8001776:	460b      	mov	r3, r1
 8001778:	813b      	strh	r3, [r7, #8]
 800177a:	4613      	mov	r3, r2
 800177c:	80fb      	strh	r3, [r7, #6]
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
  drawFastHLine(x, y, w, color);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	333c      	adds	r3, #60	@ 0x3c
 8001784:	681c      	ldr	r4, [r3, #0]
 8001786:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800178a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800178e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001792:	8c3b      	ldrh	r3, [r7, #32]
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	4603      	mov	r3, r0
 8001798:	68f8      	ldr	r0, [r7, #12]
 800179a:	47a0      	blx	r4
}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd90      	pop	{r4, r7, pc}

080017a4 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 uint16_t color) {
 80017a4:	b590      	push	{r4, r7, lr}
 80017a6:	b087      	sub	sp, #28
 80017a8:	af02      	add	r7, sp, #8
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	4608      	mov	r0, r1
 80017ae:	4611      	mov	r1, r2
 80017b0:	461a      	mov	r2, r3
 80017b2:	4603      	mov	r3, r0
 80017b4:	817b      	strh	r3, [r7, #10]
 80017b6:	460b      	mov	r3, r1
 80017b8:	813b      	strh	r3, [r7, #8]
 80017ba:	4613      	mov	r3, r2
 80017bc:	80fb      	strh	r3, [r7, #6]
  // Overwrite in subclasses if desired!
  fillRect(x, y, w, h, color);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	3340      	adds	r3, #64	@ 0x40
 80017c4:	681c      	ldr	r4, [r3, #0]
 80017c6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80017ca:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80017ce:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80017d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80017d4:	9301      	str	r3, [sp, #4]
 80017d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	4603      	mov	r3, r0
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	47a0      	blx	r4
}
 80017e2:	bf00      	nop
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd90      	pop	{r4, r7, pc}

080017ea <_ZN12Adafruit_GFX8endWriteEv>:
/*!
   @brief    End a display-writing routine, overwrite in subclasses if
   startWrite is defined!
*/
/**************************************************************************/
void Adafruit_GFX::endWrite() {}
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                 uint16_t color) {
 80017fe:	b5b0      	push	{r4, r5, r7, lr}
 8001800:	b086      	sub	sp, #24
 8001802:	af02      	add	r7, sp, #8
 8001804:	60f8      	str	r0, [r7, #12]
 8001806:	4608      	mov	r0, r1
 8001808:	4611      	mov	r1, r2
 800180a:	461a      	mov	r2, r3
 800180c:	4603      	mov	r3, r0
 800180e:	817b      	strh	r3, [r7, #10]
 8001810:	460b      	mov	r3, r1
 8001812:	813b      	strh	r3, [r7, #8]
 8001814:	4613      	mov	r3, r2
 8001816:	80fb      	strh	r3, [r7, #6]
  startWrite();
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	3314      	adds	r3, #20
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68f8      	ldr	r0, [r7, #12]
 8001822:	4798      	blx	r3
  writeLine(x, y, x, y + h - 1, color);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	3328      	adds	r3, #40	@ 0x28
 800182a:	681c      	ldr	r4, [r3, #0]
 800182c:	893a      	ldrh	r2, [r7, #8]
 800182e:	88fb      	ldrh	r3, [r7, #6]
 8001830:	4413      	add	r3, r2
 8001832:	b29b      	uxth	r3, r3
 8001834:	3b01      	subs	r3, #1
 8001836:	b29b      	uxth	r3, r3
 8001838:	b21b      	sxth	r3, r3
 800183a:	f9b7 500a 	ldrsh.w	r5, [r7, #10]
 800183e:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8001842:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001846:	8c3a      	ldrh	r2, [r7, #32]
 8001848:	9201      	str	r2, [sp, #4]
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	462b      	mov	r3, r5
 800184e:	4602      	mov	r2, r0
 8001850:	68f8      	ldr	r0, [r7, #12]
 8001852:	47a0      	blx	r4
  endWrite();
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	332c      	adds	r3, #44	@ 0x2c
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	4798      	blx	r3
}
 8001860:	bf00      	nop
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bdb0      	pop	{r4, r5, r7, pc}

08001868 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                 uint16_t color) {
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b087      	sub	sp, #28
 800186c:	af02      	add	r7, sp, #8
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	4608      	mov	r0, r1
 8001872:	4611      	mov	r1, r2
 8001874:	461a      	mov	r2, r3
 8001876:	4603      	mov	r3, r0
 8001878:	817b      	strh	r3, [r7, #10]
 800187a:	460b      	mov	r3, r1
 800187c:	813b      	strh	r3, [r7, #8]
 800187e:	4613      	mov	r3, r2
 8001880:	80fb      	strh	r3, [r7, #6]
  startWrite();
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	3314      	adds	r3, #20
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	4798      	blx	r3
  writeLine(x, y, x + w - 1, y, color);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	3328      	adds	r3, #40	@ 0x28
 8001894:	681c      	ldr	r4, [r3, #0]
 8001896:	897a      	ldrh	r2, [r7, #10]
 8001898:	88fb      	ldrh	r3, [r7, #6]
 800189a:	4413      	add	r3, r2
 800189c:	b29b      	uxth	r3, r3
 800189e:	3b01      	subs	r3, #1
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	b218      	sxth	r0, r3
 80018a4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80018a8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80018ac:	8c3b      	ldrh	r3, [r7, #32]
 80018ae:	9301      	str	r3, [sp, #4]
 80018b0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	4603      	mov	r3, r0
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	47a0      	blx	r4
  endWrite();
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	332c      	adds	r3, #44	@ 0x2c
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	4798      	blx	r3
}
 80018c8:	bf00      	nop
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd90      	pop	{r4, r7, pc}

080018d0 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
 80018d0:	b590      	push	{r4, r7, lr}
 80018d2:	b089      	sub	sp, #36	@ 0x24
 80018d4:	af02      	add	r7, sp, #8
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	4608      	mov	r0, r1
 80018da:	4611      	mov	r1, r2
 80018dc:	461a      	mov	r2, r3
 80018de:	4603      	mov	r3, r0
 80018e0:	817b      	strh	r3, [r7, #10]
 80018e2:	460b      	mov	r3, r1
 80018e4:	813b      	strh	r3, [r7, #8]
 80018e6:	4613      	mov	r3, r2
 80018e8:	80fb      	strh	r3, [r7, #6]
  startWrite();
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	3314      	adds	r3, #20
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	4798      	blx	r3
  for (int16_t i = x; i < x + w; i++) {
 80018f6:	897b      	ldrh	r3, [r7, #10]
 80018f8:	82fb      	strh	r3, [r7, #22]
 80018fa:	e014      	b.n	8001926 <_ZN12Adafruit_GFX8fillRectEsssst+0x56>
    writeFastVLine(i, y, h, color);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	3320      	adds	r3, #32
 8001902:	681c      	ldr	r4, [r3, #0]
 8001904:	f9b7 0028 	ldrsh.w	r0, [r7, #40]	@ 0x28
 8001908:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800190c:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8001910:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	4603      	mov	r3, r0
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	47a0      	blx	r4
  for (int16_t i = x; i < x + w; i++) {
 800191a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800191e:	b29b      	uxth	r3, r3
 8001920:	3301      	adds	r3, #1
 8001922:	b29b      	uxth	r3, r3
 8001924:	82fb      	strh	r3, [r7, #22]
 8001926:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800192a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800192e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001932:	440b      	add	r3, r1
 8001934:	429a      	cmp	r2, r3
 8001936:	dbe1      	blt.n	80018fc <_ZN12Adafruit_GFX8fillRectEsssst+0x2c>
  }
  endWrite();
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	332c      	adds	r3, #44	@ 0x2c
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	4798      	blx	r3
}
 8001944:	bf00      	nop
 8001946:	371c      	adds	r7, #28
 8001948:	46bd      	mov	sp, r7
 800194a:	bd90      	pop	{r4, r7, pc}

0800194c <_ZN12Adafruit_GFX10fillScreenEt>:
   @brief    Fill the screen completely with one color. Update in subclasses if
   desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
 800194c:	b590      	push	{r4, r7, lr}
 800194e:	b085      	sub	sp, #20
 8001950:	af02      	add	r7, sp, #8
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	460b      	mov	r3, r1
 8001956:	807b      	strh	r3, [r7, #2]
  fillRect(0, 0, _width, _height, color);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	3340      	adds	r3, #64	@ 0x40
 800195e:	681c      	ldr	r4, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800196c:	887a      	ldrh	r2, [r7, #2]
 800196e:	9201      	str	r2, [sp, #4]
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	460b      	mov	r3, r1
 8001974:	2200      	movs	r2, #0
 8001976:	2100      	movs	r1, #0
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	47a0      	blx	r4
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	bd90      	pop	{r4, r7, pc}

08001984 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                            uint16_t color) {
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b089      	sub	sp, #36	@ 0x24
 8001988:	af02      	add	r7, sp, #8
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	4608      	mov	r0, r1
 800198e:	4611      	mov	r1, r2
 8001990:	461a      	mov	r2, r3
 8001992:	4603      	mov	r3, r0
 8001994:	817b      	strh	r3, [r7, #10]
 8001996:	460b      	mov	r3, r1
 8001998:	813b      	strh	r3, [r7, #8]
 800199a:	4613      	mov	r3, r2
 800199c:	80fb      	strh	r3, [r7, #6]
  // Update in subclasses if desired!
  if (x0 == x1) {
 800199e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80019a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d120      	bne.n	80019ec <_ZN12Adafruit_GFX8drawLineEsssst+0x68>
    if (y0 > y1)
 80019aa:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80019ae:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80019b2:	429a      	cmp	r2, r3
 80019b4:	dd05      	ble.n	80019c2 <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
      _swap_int16_t(y0, y1);
 80019b6:	893b      	ldrh	r3, [r7, #8]
 80019b8:	82bb      	strh	r3, [r7, #20]
 80019ba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80019bc:	813b      	strh	r3, [r7, #8]
 80019be:	8abb      	ldrh	r3, [r7, #20]
 80019c0:	853b      	strh	r3, [r7, #40]	@ 0x28
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	3338      	adds	r3, #56	@ 0x38
 80019c8:	681c      	ldr	r4, [r3, #0]
 80019ca:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80019cc:	893b      	ldrh	r3, [r7, #8]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	3301      	adds	r3, #1
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	b218      	sxth	r0, r3
 80019d8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80019dc:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80019e0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	4603      	mov	r3, r0
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	47a0      	blx	r4
  } else {
    startWrite();
    writeLine(x0, y0, x1, y1, color);
    endWrite();
  }
}
 80019ea:	e044      	b.n	8001a76 <_ZN12Adafruit_GFX8drawLineEsssst+0xf2>
  } else if (y0 == y1) {
 80019ec:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80019f0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d120      	bne.n	8001a3a <_ZN12Adafruit_GFX8drawLineEsssst+0xb6>
    if (x0 > x1)
 80019f8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80019fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	dd05      	ble.n	8001a10 <_ZN12Adafruit_GFX8drawLineEsssst+0x8c>
      _swap_int16_t(x0, x1);
 8001a04:	897b      	ldrh	r3, [r7, #10]
 8001a06:	82fb      	strh	r3, [r7, #22]
 8001a08:	88fb      	ldrh	r3, [r7, #6]
 8001a0a:	817b      	strh	r3, [r7, #10]
 8001a0c:	8afb      	ldrh	r3, [r7, #22]
 8001a0e:	80fb      	strh	r3, [r7, #6]
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	333c      	adds	r3, #60	@ 0x3c
 8001a16:	681c      	ldr	r4, [r3, #0]
 8001a18:	88fa      	ldrh	r2, [r7, #6]
 8001a1a:	897b      	ldrh	r3, [r7, #10]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	3301      	adds	r3, #1
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	b218      	sxth	r0, r3
 8001a26:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001a2a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001a2e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	4603      	mov	r3, r0
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	47a0      	blx	r4
}
 8001a38:	e01d      	b.n	8001a76 <_ZN12Adafruit_GFX8drawLineEsssst+0xf2>
    startWrite();
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	3314      	adds	r3, #20
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	4798      	blx	r3
    writeLine(x0, y0, x1, y1, color);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	3328      	adds	r3, #40	@ 0x28
 8001a4c:	681c      	ldr	r4, [r3, #0]
 8001a4e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001a52:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001a56:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001a5a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001a5c:	9301      	str	r3, [sp, #4]
 8001a5e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	4603      	mov	r3, r0
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	47a0      	blx	r4
    endWrite();
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	332c      	adds	r3, #44	@ 0x2c
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	4798      	blx	r3
}
 8001a76:	bf00      	nop
 8001a78:	371c      	adds	r7, #28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd90      	pop	{r4, r7, pc}

08001a7e <_ZN12Adafruit_GFX10fillCircleEssst>:
    @param    r   Radius of circle
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillCircle(int16_t x0, int16_t y0, int16_t r,
                              uint16_t color) {
 8001a7e:	b590      	push	{r4, r7, lr}
 8001a80:	b089      	sub	sp, #36	@ 0x24
 8001a82:	af04      	add	r7, sp, #16
 8001a84:	60f8      	str	r0, [r7, #12]
 8001a86:	4608      	mov	r0, r1
 8001a88:	4611      	mov	r1, r2
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	817b      	strh	r3, [r7, #10]
 8001a90:	460b      	mov	r3, r1
 8001a92:	813b      	strh	r3, [r7, #8]
 8001a94:	4613      	mov	r3, r2
 8001a96:	80fb      	strh	r3, [r7, #6]
  startWrite();
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	3314      	adds	r3, #20
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	4798      	blx	r3
  writeFastVLine(x0, y0 - r, 2 * r + 1, color);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	3320      	adds	r3, #32
 8001aaa:	681c      	ldr	r4, [r3, #0]
 8001aac:	893a      	ldrh	r2, [r7, #8]
 8001aae:	88fb      	ldrh	r3, [r7, #6]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	b21a      	sxth	r2, r3
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	3301      	adds	r3, #1
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	b218      	sxth	r0, r3
 8001ac2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001ac6:	8c3b      	ldrh	r3, [r7, #32]
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	4603      	mov	r3, r0
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	47a0      	blx	r4
  fillCircleHelper(x0, y0, r, 3, 0, color);
 8001ad0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001ad4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001ad8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001adc:	8c3b      	ldrh	r3, [r7, #32]
 8001ade:	9302      	str	r3, [sp, #8]
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	9301      	str	r3, [sp, #4]
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	4603      	mov	r3, r0
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f000 f80a 	bl	8001b04 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
  endWrite();
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	332c      	adds	r3, #44	@ 0x2c
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	4798      	blx	r3
}
 8001afc:	bf00      	nop
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd90      	pop	{r4, r7, pc}

08001b04 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>:
    @param  color    16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillCircleHelper(int16_t x0, int16_t y0, int16_t r,
                                    uint8_t corners, int16_t delta,
                                    uint16_t color) {
 8001b04:	b590      	push	{r4, r7, lr}
 8001b06:	b08b      	sub	sp, #44	@ 0x2c
 8001b08:	af02      	add	r7, sp, #8
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	4608      	mov	r0, r1
 8001b0e:	4611      	mov	r1, r2
 8001b10:	461a      	mov	r2, r3
 8001b12:	4603      	mov	r3, r0
 8001b14:	817b      	strh	r3, [r7, #10]
 8001b16:	460b      	mov	r3, r1
 8001b18:	813b      	strh	r3, [r7, #8]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	80fb      	strh	r3, [r7, #6]

  int16_t f = 1 - r;
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	f1c3 0301 	rsb	r3, r3, #1
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	83fb      	strh	r3, [r7, #30]
  int16_t ddF_x = 1;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	83bb      	strh	r3, [r7, #28]
  int16_t ddF_y = -2 * r;
 8001b2c:	88fb      	ldrh	r3, [r7, #6]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	03d2      	lsls	r2, r2, #15
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	837b      	strh	r3, [r7, #26]
  int16_t x = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	833b      	strh	r3, [r7, #24]
  int16_t y = r;
 8001b3e:	88fb      	ldrh	r3, [r7, #6]
 8001b40:	82fb      	strh	r3, [r7, #22]
  int16_t px = x;
 8001b42:	8b3b      	ldrh	r3, [r7, #24]
 8001b44:	82bb      	strh	r3, [r7, #20]
  int16_t py = y;
 8001b46:	8afb      	ldrh	r3, [r7, #22]
 8001b48:	827b      	strh	r3, [r7, #18]

  delta++; // Avoid some +1's in the loop
 8001b4a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	3301      	adds	r3, #1
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	86bb      	strh	r3, [r7, #52]	@ 0x34

  while (x < y) {
 8001b56:	e0b5      	b.n	8001cc4 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x1c0>
    if (f >= 0) {
 8001b58:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	db0e      	blt.n	8001b7e <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x7a>
      y--;
 8001b60:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	3b01      	subs	r3, #1
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	82fb      	strh	r3, [r7, #22]
      ddF_y += 2;
 8001b6c:	8b7b      	ldrh	r3, [r7, #26]
 8001b6e:	3302      	adds	r3, #2
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	837b      	strh	r3, [r7, #26]
      f += ddF_y;
 8001b74:	8bfa      	ldrh	r2, [r7, #30]
 8001b76:	8b7b      	ldrh	r3, [r7, #26]
 8001b78:	4413      	add	r3, r2
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	83fb      	strh	r3, [r7, #30]
    }
    x++;
 8001b7e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	3301      	adds	r3, #1
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	833b      	strh	r3, [r7, #24]
    ddF_x += 2;
 8001b8a:	8bbb      	ldrh	r3, [r7, #28]
 8001b8c:	3302      	adds	r3, #2
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	83bb      	strh	r3, [r7, #28]
    f += ddF_x;
 8001b92:	8bfa      	ldrh	r2, [r7, #30]
 8001b94:	8bbb      	ldrh	r3, [r7, #28]
 8001b96:	4413      	add	r3, r2
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	83fb      	strh	r3, [r7, #30]
    // These checks avoid double-drawing certain lines, important
    // for the SSD1306 library which has an INVERT drawing mode.
    if (x < (y + 1)) {
 8001b9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001ba0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	db41      	blt.n	8001c2c <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x128>
      if (corners & 1)
 8001ba8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d01a      	beq.n	8001bea <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xe6>
        writeFastVLine(x0 + x, y0 - y, 2 * y + delta, color);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	3320      	adds	r3, #32
 8001bba:	681c      	ldr	r4, [r3, #0]
 8001bbc:	897a      	ldrh	r2, [r7, #10]
 8001bbe:	8b3b      	ldrh	r3, [r7, #24]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	b219      	sxth	r1, r3
 8001bc6:	893a      	ldrh	r2, [r7, #8]
 8001bc8:	8afb      	ldrh	r3, [r7, #22]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	b218      	sxth	r0, r3
 8001bd0:	8afb      	ldrh	r3, [r7, #22]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001bd8:	4413      	add	r3, r2
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	b21a      	sxth	r2, r3
 8001bde:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	4613      	mov	r3, r2
 8001be4:	4602      	mov	r2, r0
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	47a0      	blx	r4
      if (corners & 2)
 8001bea:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d01a      	beq.n	8001c2c <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x128>
        writeFastVLine(x0 - x, y0 - y, 2 * y + delta, color);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	3320      	adds	r3, #32
 8001bfc:	681c      	ldr	r4, [r3, #0]
 8001bfe:	897a      	ldrh	r2, [r7, #10]
 8001c00:	8b3b      	ldrh	r3, [r7, #24]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	b219      	sxth	r1, r3
 8001c08:	893a      	ldrh	r2, [r7, #8]
 8001c0a:	8afb      	ldrh	r3, [r7, #22]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	b218      	sxth	r0, r3
 8001c12:	8afb      	ldrh	r3, [r7, #22]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001c1a:	4413      	add	r3, r2
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	b21a      	sxth	r2, r3
 8001c20:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	4613      	mov	r3, r2
 8001c26:	4602      	mov	r2, r0
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	47a0      	blx	r4
    }
    if (y != py) {
 8001c2c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001c30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d043      	beq.n	8001cc0 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x1bc>
      if (corners & 1)
 8001c38:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d01a      	beq.n	8001c7a <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x176>
        writeFastVLine(x0 + py, y0 - px, 2 * px + delta, color);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	3320      	adds	r3, #32
 8001c4a:	681c      	ldr	r4, [r3, #0]
 8001c4c:	897a      	ldrh	r2, [r7, #10]
 8001c4e:	8a7b      	ldrh	r3, [r7, #18]
 8001c50:	4413      	add	r3, r2
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	b219      	sxth	r1, r3
 8001c56:	893a      	ldrh	r2, [r7, #8]
 8001c58:	8abb      	ldrh	r3, [r7, #20]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	b218      	sxth	r0, r3
 8001c60:	8abb      	ldrh	r3, [r7, #20]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001c68:	4413      	add	r3, r2
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	b21a      	sxth	r2, r3
 8001c6e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	4613      	mov	r3, r2
 8001c74:	4602      	mov	r2, r0
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	47a0      	blx	r4
      if (corners & 2)
 8001c7a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d01a      	beq.n	8001cbc <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x1b8>
        writeFastVLine(x0 - py, y0 - px, 2 * px + delta, color);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	3320      	adds	r3, #32
 8001c8c:	681c      	ldr	r4, [r3, #0]
 8001c8e:	897a      	ldrh	r2, [r7, #10]
 8001c90:	8a7b      	ldrh	r3, [r7, #18]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	b219      	sxth	r1, r3
 8001c98:	893a      	ldrh	r2, [r7, #8]
 8001c9a:	8abb      	ldrh	r3, [r7, #20]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	b218      	sxth	r0, r3
 8001ca2:	8abb      	ldrh	r3, [r7, #20]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001caa:	4413      	add	r3, r2
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	b21a      	sxth	r2, r3
 8001cb0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	47a0      	blx	r4
      py = y;
 8001cbc:	8afb      	ldrh	r3, [r7, #22]
 8001cbe:	827b      	strh	r3, [r7, #18]
    }
    px = x;
 8001cc0:	8b3b      	ldrh	r3, [r7, #24]
 8001cc2:	82bb      	strh	r3, [r7, #20]
  while (x < y) {
 8001cc4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001cc8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	f6ff af43 	blt.w	8001b58 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x54>
  }
}
 8001cd2:	bf00      	nop
 8001cd4:	bf00      	nop
 8001cd6:	3724      	adds	r7, #36	@ 0x24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd90      	pop	{r4, r7, pc}

08001cdc <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
 8001cdc:	b590      	push	{r4, r7, lr}
 8001cde:	b087      	sub	sp, #28
 8001ce0:	af02      	add	r7, sp, #8
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	4608      	mov	r0, r1
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4603      	mov	r3, r0
 8001cec:	817b      	strh	r3, [r7, #10]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	813b      	strh	r3, [r7, #8]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	80fb      	strh	r3, [r7, #6]
  startWrite();
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	3314      	adds	r3, #20
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	4798      	blx	r3
  writeFastHLine(x, y, w, color);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	3324      	adds	r3, #36	@ 0x24
 8001d08:	681c      	ldr	r4, [r3, #0]
 8001d0a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001d0e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001d12:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001d16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	68f8      	ldr	r0, [r7, #12]
 8001d1e:	47a0      	blx	r4
  writeFastHLine(x, y + h - 1, w, color);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	3324      	adds	r3, #36	@ 0x24
 8001d26:	681c      	ldr	r4, [r3, #0]
 8001d28:	893a      	ldrh	r2, [r7, #8]
 8001d2a:	8c3b      	ldrh	r3, [r7, #32]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	3b01      	subs	r3, #1
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	b21a      	sxth	r2, r3
 8001d36:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001d3a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001d3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	4603      	mov	r3, r0
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	47a0      	blx	r4
  writeFastVLine(x, y, h, color);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	3320      	adds	r3, #32
 8001d4e:	681c      	ldr	r4, [r3, #0]
 8001d50:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8001d54:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001d58:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001d5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	4603      	mov	r3, r0
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	47a0      	blx	r4
  writeFastVLine(x + w - 1, y, h, color);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	3320      	adds	r3, #32
 8001d6c:	681c      	ldr	r4, [r3, #0]
 8001d6e:	897a      	ldrh	r2, [r7, #10]
 8001d70:	88fb      	ldrh	r3, [r7, #6]
 8001d72:	4413      	add	r3, r2
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	3b01      	subs	r3, #1
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	b219      	sxth	r1, r3
 8001d7c:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8001d80:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001d84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	4603      	mov	r3, r0
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	47a0      	blx	r4
  endWrite();
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	332c      	adds	r3, #44	@ 0x2c
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	4798      	blx	r3
}
 8001d9a:	bf00      	nop
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd90      	pop	{r4, r7, pc}

08001da2 <_ZN12Adafruit_GFX13fillRoundRectEssssst>:
    @param    r   Radius of corner rounding
    @param    color 16-bit 5-6-5 Color to draw/fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 int16_t r, uint16_t color) {
 8001da2:	b590      	push	{r4, r7, lr}
 8001da4:	b08b      	sub	sp, #44	@ 0x2c
 8001da6:	af04      	add	r7, sp, #16
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	4608      	mov	r0, r1
 8001dac:	4611      	mov	r1, r2
 8001dae:	461a      	mov	r2, r3
 8001db0:	4603      	mov	r3, r0
 8001db2:	817b      	strh	r3, [r7, #10]
 8001db4:	460b      	mov	r3, r1
 8001db6:	813b      	strh	r3, [r7, #8]
 8001db8:	4613      	mov	r3, r2
 8001dba:	80fb      	strh	r3, [r7, #6]
  int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8001dbc:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 8001dc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	bfa8      	it	ge
 8001dc8:	4613      	movge	r3, r2
 8001dca:	b21b      	sxth	r3, r3
 8001dcc:	0fda      	lsrs	r2, r3, #31
 8001dce:	4413      	add	r3, r2
 8001dd0:	105b      	asrs	r3, r3, #1
 8001dd2:	82fb      	strh	r3, [r7, #22]
  if (r > max_radius)
 8001dd4:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 8001dd8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	dd01      	ble.n	8001de4 <_ZN12Adafruit_GFX13fillRoundRectEssssst+0x42>
    r = max_radius;
 8001de0:	8afb      	ldrh	r3, [r7, #22]
 8001de2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  // smarter version
  startWrite();
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	3314      	adds	r3, #20
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	4798      	blx	r3
  writeFillRect(x + r, y, w - 2 * r, h, color);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	331c      	adds	r3, #28
 8001df6:	681c      	ldr	r4, [r3, #0]
 8001df8:	897a      	ldrh	r2, [r7, #10]
 8001dfa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001dfc:	4413      	add	r3, r2
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	b219      	sxth	r1, r3
 8001e02:	88fa      	ldrh	r2, [r7, #6]
 8001e04:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	b218      	sxth	r0, r3
 8001e10:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001e14:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001e16:	9301      	str	r3, [sp, #4]
 8001e18:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	4603      	mov	r3, r0
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	47a0      	blx	r4
  // draw four corners
  fillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
 8001e24:	897a      	ldrh	r2, [r7, #10]
 8001e26:	88fb      	ldrh	r3, [r7, #6]
 8001e28:	4413      	add	r3, r2
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	3b01      	subs	r3, #1
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	b219      	sxth	r1, r3
 8001e38:	893a      	ldrh	r2, [r7, #8]
 8001e3a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001e3c:	4413      	add	r3, r2
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	b218      	sxth	r0, r3
 8001e42:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001e44:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	b21b      	sxth	r3, r3
 8001e54:	f9b7 402c 	ldrsh.w	r4, [r7, #44]	@ 0x2c
 8001e58:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001e5a:	9202      	str	r2, [sp, #8]
 8001e5c:	9301      	str	r3, [sp, #4]
 8001e5e:	2301      	movs	r3, #1
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	4623      	mov	r3, r4
 8001e64:	4602      	mov	r2, r0
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f7ff fe4c 	bl	8001b04 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
  fillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
 8001e6c:	897a      	ldrh	r2, [r7, #10]
 8001e6e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001e70:	4413      	add	r3, r2
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	b219      	sxth	r1, r3
 8001e76:	893a      	ldrh	r2, [r7, #8]
 8001e78:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001e7a:	4413      	add	r3, r2
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	b218      	sxth	r0, r3
 8001e80:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001e82:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	b21b      	sxth	r3, r3
 8001e92:	f9b7 402c 	ldrsh.w	r4, [r7, #44]	@ 0x2c
 8001e96:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001e98:	9202      	str	r2, [sp, #8]
 8001e9a:	9301      	str	r3, [sp, #4]
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	4623      	mov	r3, r4
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f7ff fe2d 	bl	8001b04 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
  endWrite();
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	332c      	adds	r3, #44	@ 0x2c
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	4798      	blx	r3
}
 8001eb6:	bf00      	nop
 8001eb8:	371c      	adds	r7, #28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd90      	pop	{r4, r7, pc}
	...

08001ec0 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
                            uint16_t color, uint16_t bg, uint8_t size_x,
                            uint8_t size_y) {
 8001ec0:	b5b0      	push	{r4, r5, r7, lr}
 8001ec2:	b08e      	sub	sp, #56	@ 0x38
 8001ec4:	af02      	add	r7, sp, #8
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	4608      	mov	r0, r1
 8001eca:	4611      	mov	r1, r2
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4603      	mov	r3, r0
 8001ed0:	817b      	strh	r3, [r7, #10]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	813b      	strh	r3, [r7, #8]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	71fb      	strb	r3, [r7, #7]

  if (!gfxFont) { // 'Classic' built-in font
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f040 8153 	bne.w	800218a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ca>

    if ((x >= _width) ||              // Clip right
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001eea:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	f280 8234 	bge.w	800235c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x49c>
        (y >= _height) ||             // Clip bottom
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
    if ((x >= _width) ||              // Clip right
 8001efa:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	f280 822c 	bge.w	800235c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x49c>
        ((x + 6 * size_x - 1) < 0) || // Clip left
 8001f04:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001f08:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	4413      	add	r3, r2
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	440b      	add	r3, r1
        (y >= _height) ||             // Clip bottom
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f340 8220 	ble.w	800235c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x49c>
        ((y + 8 * size_y - 1) < 0))   // Clip top
 8001f1c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001f20:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	4413      	add	r3, r2
        ((x + 6 * size_x - 1) < 0) || // Clip left
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f340 8217 	ble.w	800235c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x49c>
      return;

    if (!_cp437 && (c >= 176))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	7f1b      	ldrb	r3, [r3, #28]
 8001f32:	f083 0301 	eor.w	r3, r3, #1
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x88>
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	2baf      	cmp	r3, #175	@ 0xaf
 8001f40:	d902      	bls.n	8001f48 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x88>
      c++; // Handle 'classic' charset behavior
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	3301      	adds	r3, #1
 8001f46:	71fb      	strb	r3, [r7, #7]

    startWrite();
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	3314      	adds	r3, #20
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	4798      	blx	r3
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 8001f54:	2300      	movs	r3, #0
 8001f56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001f5a:	e0c9      	b.n	80020f0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x230>
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 8001f5c:	79fa      	ldrb	r2, [r7, #7]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	441a      	add	r2, r3
 8001f64:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001f68:	4413      	add	r3, r2
 8001f6a:	4aad      	ldr	r2, [pc, #692]	@ (8002220 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x360>)
 8001f6c:	5cd3      	ldrb	r3, [r2, r3]
 8001f6e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8001f72:	2300      	movs	r3, #0
 8001f74:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8001f78:	e0ae      	b.n	80020d8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x218>
        if (line & 1) {
 8001f7a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d04b      	beq.n	800201e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x15e>
          if (size_x == 1 && size_y == 1)
 8001f86:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d11a      	bne.n	8001fc4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x104>
 8001f8e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d116      	bne.n	8001fc4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x104>
            writePixel(x + i, y + j, color);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	3318      	adds	r3, #24
 8001f9c:	681c      	ldr	r4, [r3, #0]
 8001f9e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	897b      	ldrh	r3, [r7, #10]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	b219      	sxth	r1, r3
 8001fac:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	893b      	ldrh	r3, [r7, #8]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	b21a      	sxth	r2, r3
 8001fba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	47a0      	blx	r4
 8001fc2:	e07d      	b.n	80020c0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x200>
          else
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	331c      	adds	r3, #28
 8001fca:	681c      	ldr	r4, [r3, #0]
 8001fcc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	fb12 f303 	smulbb	r3, r2, r3
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	897b      	ldrh	r3, [r7, #10]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	b219      	sxth	r1, r3
 8001fe6:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	fb12 f303 	smulbb	r3, r2, r3
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	893b      	ldrh	r3, [r7, #8]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	b218      	sxth	r0, r3
 8002000:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002004:	b21d      	sxth	r5, r3
 8002006:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800200a:	b21b      	sxth	r3, r3
 800200c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8002010:	9201      	str	r2, [sp, #4]
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	462b      	mov	r3, r5
 8002016:	4602      	mov	r2, r0
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	47a0      	blx	r4
 800201c:	e050      	b.n	80020c0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x200>
                          color);
        } else if (bg != color) {
 800201e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8002022:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002026:	429a      	cmp	r2, r3
 8002028:	d04a      	beq.n	80020c0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x200>
          if (size_x == 1 && size_y == 1)
 800202a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800202e:	2b01      	cmp	r3, #1
 8002030:	d11a      	bne.n	8002068 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1a8>
 8002032:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002036:	2b01      	cmp	r3, #1
 8002038:	d116      	bne.n	8002068 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1a8>
            writePixel(x + i, y + j, bg);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	3318      	adds	r3, #24
 8002040:	681c      	ldr	r4, [r3, #0]
 8002042:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8002046:	b29a      	uxth	r2, r3
 8002048:	897b      	ldrh	r3, [r7, #10]
 800204a:	4413      	add	r3, r2
 800204c:	b29b      	uxth	r3, r3
 800204e:	b219      	sxth	r1, r3
 8002050:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8002054:	b29a      	uxth	r2, r3
 8002056:	893b      	ldrh	r3, [r7, #8]
 8002058:	4413      	add	r3, r2
 800205a:	b29b      	uxth	r3, r3
 800205c:	b21a      	sxth	r2, r3
 800205e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	47a0      	blx	r4
 8002066:	e02b      	b.n	80020c0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x200>
          else
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	331c      	adds	r3, #28
 800206e:	681c      	ldr	r4, [r3, #0]
 8002070:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8002074:	b29a      	uxth	r2, r3
 8002076:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800207a:	b29b      	uxth	r3, r3
 800207c:	fb12 f303 	smulbb	r3, r2, r3
 8002080:	b29a      	uxth	r2, r3
 8002082:	897b      	ldrh	r3, [r7, #10]
 8002084:	4413      	add	r3, r2
 8002086:	b29b      	uxth	r3, r3
 8002088:	b219      	sxth	r1, r3
 800208a:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 800208e:	b29a      	uxth	r2, r3
 8002090:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002094:	b29b      	uxth	r3, r3
 8002096:	fb12 f303 	smulbb	r3, r2, r3
 800209a:	b29a      	uxth	r2, r3
 800209c:	893b      	ldrh	r3, [r7, #8]
 800209e:	4413      	add	r3, r2
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	b218      	sxth	r0, r3
 80020a4:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80020a8:	b21d      	sxth	r5, r3
 80020aa:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80020ae:	b21b      	sxth	r3, r3
 80020b0:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80020b4:	9201      	str	r2, [sp, #4]
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	462b      	mov	r3, r5
 80020ba:	4602      	mov	r2, r0
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	47a0      	blx	r4
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 80020c0:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	3301      	adds	r3, #1
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80020ce:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80020d2:	085b      	lsrs	r3, r3, #1
 80020d4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80020d8:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 80020dc:	2b07      	cmp	r3, #7
 80020de:	f77f af4c 	ble.w	8001f7a <_ZN12Adafruit_GFX8drawCharEsshtthh+0xba>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 80020e2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	3301      	adds	r3, #1
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80020f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80020f4:	2b04      	cmp	r3, #4
 80020f6:	f77f af31 	ble.w	8001f5c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x9c>
        }
      }
    }
    if (bg != color) { // If opaque, draw vertical line for last column
 80020fa:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80020fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002102:	429a      	cmp	r2, r3
 8002104:	d03a      	beq.n	800217c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2bc>
      if (size_x == 1 && size_y == 1)
 8002106:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800210a:	2b01      	cmp	r3, #1
 800210c:	d114      	bne.n	8002138 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x278>
 800210e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002112:	2b01      	cmp	r3, #1
 8002114:	d110      	bne.n	8002138 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x278>
        writeFastVLine(x + 5, y, 8, bg);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	3320      	adds	r3, #32
 800211c:	681c      	ldr	r4, [r3, #0]
 800211e:	897b      	ldrh	r3, [r7, #10]
 8002120:	3305      	adds	r3, #5
 8002122:	b29b      	uxth	r3, r3
 8002124:	b219      	sxth	r1, r3
 8002126:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800212a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	2308      	movs	r3, #8
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	47a0      	blx	r4
 8002136:	e021      	b.n	800217c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2bc>
      else
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	331c      	adds	r3, #28
 800213e:	681c      	ldr	r4, [r3, #0]
 8002140:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002144:	b29b      	uxth	r3, r3
 8002146:	461a      	mov	r2, r3
 8002148:	0092      	lsls	r2, r2, #2
 800214a:	4413      	add	r3, r2
 800214c:	b29a      	uxth	r2, r3
 800214e:	897b      	ldrh	r3, [r7, #10]
 8002150:	4413      	add	r3, r2
 8002152:	b29b      	uxth	r3, r3
 8002154:	b219      	sxth	r1, r3
 8002156:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800215a:	b21d      	sxth	r5, r3
 800215c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002160:	b29b      	uxth	r3, r3
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	b29b      	uxth	r3, r3
 8002166:	b21b      	sxth	r3, r3
 8002168:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 800216c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8002170:	9201      	str	r2, [sp, #4]
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	462b      	mov	r3, r5
 8002176:	4602      	mov	r2, r0
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	47a0      	blx	r4
    }
    endWrite();
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	332c      	adds	r3, #44	@ 0x2c
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	4798      	blx	r3
 8002188:	e0e9      	b.n	800235e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x49e>

    // Character is assumed previously filtered by write() to eliminate
    // newlines, returns, non-printable characters, etc.  Calling
    // drawChar() directly with 'bad' characters of font may cause mayhem!

    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	3308      	adds	r3, #8
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	79fa      	ldrb	r2, [r7, #7]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	71fb      	strb	r3, [r7, #7]
    GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	79fa      	ldrb	r2, [r7, #7]
 800219e:	4611      	mov	r1, r2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff f98b 	bl	80014bc <_Z18pgm_read_glyph_ptrPK7GFXfonth>
 80021a6:	61f8      	str	r0, [r7, #28]
    uint8_t *bitmap = pgm_read_bitmap_ptr(gfxFont);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff f996 	bl	80014de <_Z19pgm_read_bitmap_ptrPK7GFXfont>
 80021b2:	61b8      	str	r0, [r7, #24]

    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3302      	adds	r3, #2
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	75fb      	strb	r3, [r7, #23]
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3303      	adds	r3, #3
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	75bb      	strb	r3, [r7, #22]
    int8_t xo = pgm_read_byte(&glyph->xOffset),
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	3305      	adds	r3, #5
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	757b      	strb	r3, [r7, #21]
           yo = pgm_read_byte(&glyph->yOffset);
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3306      	adds	r3, #6
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	753b      	strb	r3, [r7, #20]
    uint8_t xx, yy, bits = 0, bit = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80021e0:	2300      	movs	r3, #0
 80021e2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int16_t xo16 = 0, yo16 = 0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80021ea:	2300      	movs	r3, #0
 80021ec:	847b      	strh	r3, [r7, #34]	@ 0x22

    if (size_x > 1 || size_y > 1) {
 80021ee:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d803      	bhi.n	80021fe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x33e>
 80021f6:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d905      	bls.n	800220a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x34a>
      xo16 = xo;
 80021fe:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002202:	84bb      	strh	r3, [r7, #36]	@ 0x24
      yo16 = yo;
 8002204:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002208:	847b      	strh	r3, [r7, #34]	@ 0x22
    // only creates a new set of problems.  Have an idea to work around
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    startWrite();
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	3314      	adds	r3, #20
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	4798      	blx	r3
    for (yy = 0; yy < h; yy++) {
 8002216:	2300      	movs	r3, #0
 8002218:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 800221c:	e091      	b.n	8002342 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x482>
 800221e:	bf00      	nop
 8002220:	0801c47c 	.word	0x0801c47c
      for (xx = 0; xx < w; xx++) {
 8002224:	2300      	movs	r3, #0
 8002226:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800222a:	e07f      	b.n	800232c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x46c>
        if (!(bit++ & 7)) {
 800222c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002230:	1c5a      	adds	r2, r3, #1
 8002232:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	2b00      	cmp	r3, #0
 800223c:	bf0c      	ite	eq
 800223e:	2301      	moveq	r3, #1
 8002240:	2300      	movne	r3, #0
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d008      	beq.n	800225a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x39a>
          bits = pgm_read_byte(&bitmap[bo++]);
 8002248:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	857a      	strh	r2, [r7, #42]	@ 0x2a
 800224e:	461a      	mov	r2, r3
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	4413      	add	r3, r2
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
        if (bits & 0x80) {
 800225a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800225e:	2b00      	cmp	r3, #0
 8002260:	da5a      	bge.n	8002318 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x458>
          if (size_x == 1 && size_y == 1) {
 8002262:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002266:	2b01      	cmp	r3, #1
 8002268:	d124      	bne.n	80022b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x3f4>
 800226a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800226e:	2b01      	cmp	r3, #1
 8002270:	d120      	bne.n	80022b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x3f4>
            writePixel(x + xo + xx, y + yo + yy, color);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	3318      	adds	r3, #24
 8002278:	681c      	ldr	r4, [r3, #0]
 800227a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800227e:	b29a      	uxth	r2, r3
 8002280:	897b      	ldrh	r3, [r7, #10]
 8002282:	4413      	add	r3, r2
 8002284:	b29a      	uxth	r2, r3
 8002286:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800228a:	b29b      	uxth	r3, r3
 800228c:	4413      	add	r3, r2
 800228e:	b29b      	uxth	r3, r3
 8002290:	b219      	sxth	r1, r3
 8002292:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002296:	b29a      	uxth	r2, r3
 8002298:	893b      	ldrh	r3, [r7, #8]
 800229a:	4413      	add	r3, r2
 800229c:	b29a      	uxth	r2, r3
 800229e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	4413      	add	r3, r2
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	b21a      	sxth	r2, r3
 80022aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	47a0      	blx	r4
 80022b2:	e031      	b.n	8002318 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x458>
          } else {
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	331c      	adds	r3, #28
 80022ba:	681c      	ldr	r4, [r3, #0]
 80022bc:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80022c0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80022c4:	4413      	add	r3, r2
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	fb12 f303 	smulbb	r3, r2, r3
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	897b      	ldrh	r3, [r7, #10]
 80022d6:	4413      	add	r3, r2
 80022d8:	b29b      	uxth	r3, r3
 80022da:	b219      	sxth	r1, r3
 80022dc:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 80022e0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80022e4:	4413      	add	r3, r2
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	fb12 f303 	smulbb	r3, r2, r3
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	893b      	ldrh	r3, [r7, #8]
 80022f6:	4413      	add	r3, r2
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	b218      	sxth	r0, r3
 80022fc:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002300:	b21d      	sxth	r5, r3
 8002302:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002306:	b21b      	sxth	r3, r3
 8002308:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800230c:	9201      	str	r2, [sp, #4]
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	462b      	mov	r3, r5
 8002312:	4602      	mov	r2, r0
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	47a0      	blx	r4
                          size_x, size_y, color);
          }
        }
        bits <<= 1;
 8002318:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      for (xx = 0; xx < w; xx++) {
 8002322:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002326:	3301      	adds	r3, #1
 8002328:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800232c:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8002330:	7dfb      	ldrb	r3, [r7, #23]
 8002332:	429a      	cmp	r2, r3
 8002334:	f4ff af7a 	bcc.w	800222c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x36c>
    for (yy = 0; yy < h; yy++) {
 8002338:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800233c:	3301      	adds	r3, #1
 800233e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8002342:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002346:	7dbb      	ldrb	r3, [r7, #22]
 8002348:	429a      	cmp	r2, r3
 800234a:	f4ff af6b 	bcc.w	8002224 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x364>
      }
    }
    endWrite();
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	332c      	adds	r3, #44	@ 0x2c
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	4798      	blx	r3
 800235a:	e000      	b.n	800235e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x49e>
      return;
 800235c:	bf00      	nop

  } // End classic vs custom font
}
 800235e:	3730      	adds	r7, #48	@ 0x30
 8002360:	46bd      	mov	sp, r7
 8002362:	bdb0      	pop	{r4, r5, r7, pc}

08002364 <_ZN12Adafruit_GFX5writeEh>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
 8002364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002366:	b08b      	sub	sp, #44	@ 0x2c
 8002368:	af04      	add	r7, sp, #16
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	70fb      	strb	r3, [r7, #3]
  if (!gfxFont) { // 'Classic' built-in font
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d166      	bne.n	8002446 <_ZN12Adafruit_GFX5writeEh+0xe2>

    if (c == '\n') {              // Newline?
 8002378:	78fb      	ldrb	r3, [r7, #3]
 800237a:	2b0a      	cmp	r3, #10
 800237c:	d110      	bne.n	80023a0 <_ZN12Adafruit_GFX5writeEh+0x3c>
      cursor_x = 0;               // Reset x to zero,
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	821a      	strh	r2, [r3, #16]
      cursor_y += textsize_y * 8; // advance y one line
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800238a:	b29a      	uxth	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	7e5b      	ldrb	r3, [r3, #25]
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	b29b      	uxth	r3, r3
 8002394:	4413      	add	r3, r2
 8002396:	b29b      	uxth	r3, r3
 8002398:	b21a      	sxth	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	825a      	strh	r2, [r3, #18]
 800239e:	e0f5      	b.n	800258c <_ZN12Adafruit_GFX5writeEh+0x228>
    } else if (c != '\r') {       // Ignore carriage returns
 80023a0:	78fb      	ldrb	r3, [r7, #3]
 80023a2:	2b0d      	cmp	r3, #13
 80023a4:	f000 80f2 	beq.w	800258c <_ZN12Adafruit_GFX5writeEh+0x228>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	7edb      	ldrb	r3, [r3, #27]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d020      	beq.n	80023f2 <_ZN12Adafruit_GFX5writeEh+0x8e>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80023b6:	4619      	mov	r1, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	7e1b      	ldrb	r3, [r3, #24]
 80023bc:	461a      	mov	r2, r3
 80023be:	4613      	mov	r3, r2
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	4413      	add	r3, r2
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	440b      	add	r3, r1
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80023ce:	4293      	cmp	r3, r2
 80023d0:	dd0f      	ble.n	80023f2 <_ZN12Adafruit_GFX5writeEh+0x8e>
        cursor_x = 0;                                       // Reset x to zero,
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	821a      	strh	r2, [r3, #16]
        cursor_y += textsize_y * 8; // advance y one line
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80023de:	b29a      	uxth	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	7e5b      	ldrb	r3, [r3, #25]
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	4413      	add	r3, r2
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	b21a      	sxth	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	825a      	strh	r2, [r3, #18]
      }
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f9b3 4010 	ldrsh.w	r4, [r3, #16]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f9b3 5012 	ldrsh.w	r5, [r3, #18]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	8a9b      	ldrh	r3, [r3, #20]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	8ad2      	ldrh	r2, [r2, #22]
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	7e09      	ldrb	r1, [r1, #24]
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	7e40      	ldrb	r0, [r0, #25]
 800240e:	78fe      	ldrb	r6, [r7, #3]
 8002410:	9003      	str	r0, [sp, #12]
 8002412:	9102      	str	r1, [sp, #8]
 8002414:	9201      	str	r2, [sp, #4]
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	4633      	mov	r3, r6
 800241a:	462a      	mov	r2, r5
 800241c:	4621      	mov	r1, r4
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7ff fd4e 	bl	8001ec0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
               textsize_y);
      cursor_x += textsize_x * 6; // Advance x one char
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800242a:	b29a      	uxth	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	7e1b      	ldrb	r3, [r3, #24]
 8002430:	4619      	mov	r1, r3
 8002432:	0049      	lsls	r1, r1, #1
 8002434:	440b      	add	r3, r1
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	b29b      	uxth	r3, r3
 800243a:	4413      	add	r3, r2
 800243c:	b29b      	uxth	r3, r3
 800243e:	b21a      	sxth	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	821a      	strh	r2, [r3, #16]
 8002444:	e0a2      	b.n	800258c <_ZN12Adafruit_GFX5writeEh+0x228>
    }

  } else { // Custom font

    if (c == '\n') {
 8002446:	78fb      	ldrb	r3, [r7, #3]
 8002448:	2b0a      	cmp	r3, #10
 800244a:	d116      	bne.n	800247a <_ZN12Adafruit_GFX5writeEh+0x116>
      cursor_x = 0;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	821a      	strh	r2, [r3, #16]
      cursor_y +=
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002458:	b29a      	uxth	r2, r3
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	7e5b      	ldrb	r3, [r3, #25]
 800245e:	4619      	mov	r1, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	330c      	adds	r3, #12
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	fb11 f303 	smulbb	r3, r1, r3
 800246c:	b29b      	uxth	r3, r3
      cursor_y +=
 800246e:	4413      	add	r3, r2
 8002470:	b29b      	uxth	r3, r3
 8002472:	b21a      	sxth	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	825a      	strh	r2, [r3, #18]
 8002478:	e088      	b.n	800258c <_ZN12Adafruit_GFX5writeEh+0x228>
    } else if (c != '\r') {
 800247a:	78fb      	ldrb	r3, [r7, #3]
 800247c:	2b0d      	cmp	r3, #13
 800247e:	f000 8085 	beq.w	800258c <_ZN12Adafruit_GFX5writeEh+0x228>
      uint8_t first = pgm_read_byte(&gfxFont->first);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	3308      	adds	r3, #8
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	75fb      	strb	r3, [r7, #23]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 800248c:	78fa      	ldrb	r2, [r7, #3]
 800248e:	7dfb      	ldrb	r3, [r7, #23]
 8002490:	429a      	cmp	r2, r3
 8002492:	d37b      	bcc.n	800258c <_ZN12Adafruit_GFX5writeEh+0x228>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	330a      	adds	r3, #10
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	78fa      	ldrb	r2, [r7, #3]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d874      	bhi.n	800258c <_ZN12Adafruit_GFX5writeEh+0x228>
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a18      	ldr	r0, [r3, #32]
 80024a6:	78fa      	ldrb	r2, [r7, #3]
 80024a8:	7dfb      	ldrb	r3, [r7, #23]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	4619      	mov	r1, r3
 80024b0:	f7ff f804 	bl	80014bc <_Z18pgm_read_glyph_ptrPK7GFXfonth>
 80024b4:	6138      	str	r0, [r7, #16]
        uint8_t w = pgm_read_byte(&glyph->width),
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	3302      	adds	r3, #2
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	73fb      	strb	r3, [r7, #15]
                h = pgm_read_byte(&glyph->height);
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	3303      	adds	r3, #3
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	73bb      	strb	r3, [r7, #14]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d04d      	beq.n	8002568 <_ZN12Adafruit_GFX5writeEh+0x204>
 80024cc:	7bbb      	ldrb	r3, [r7, #14]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d04a      	beq.n	8002568 <_ZN12Adafruit_GFX5writeEh+0x204>
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	3305      	adds	r3, #5
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	b25b      	sxtb	r3, r3
 80024da:	81bb      	strh	r3, [r7, #12]
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	7edb      	ldrb	r3, [r3, #27]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d028      	beq.n	8002536 <_ZN12Adafruit_GFX5writeEh+0x1d2>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80024ea:	4619      	mov	r1, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	7e1b      	ldrb	r3, [r3, #24]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
 80024f8:	4413      	add	r3, r2
 80024fa:	fb00 f303 	mul.w	r3, r0, r3
 80024fe:	440b      	add	r3, r1
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8002506:	4293      	cmp	r3, r2
 8002508:	dd15      	ble.n	8002536 <_ZN12Adafruit_GFX5writeEh+0x1d2>
            cursor_x = 0;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	821a      	strh	r2, [r3, #16]
            cursor_y += (int16_t)textsize_y *
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002516:	b29a      	uxth	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	7e5b      	ldrb	r3, [r3, #25]
 800251c:	4619      	mov	r1, r3
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	330c      	adds	r3, #12
 8002524:	781b      	ldrb	r3, [r3, #0]
            cursor_y += (int16_t)textsize_y *
 8002526:	fb11 f303 	smulbb	r3, r1, r3
 800252a:	b29b      	uxth	r3, r3
 800252c:	4413      	add	r3, r2
 800252e:	b29b      	uxth	r3, r3
 8002530:	b21a      	sxth	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	825a      	strh	r2, [r3, #18]
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f9b3 4010 	ldrsh.w	r4, [r3, #16]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f9b3 5012 	ldrsh.w	r5, [r3, #18]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	8a9b      	ldrh	r3, [r3, #20]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	8ad2      	ldrh	r2, [r2, #22]
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	7e09      	ldrb	r1, [r1, #24]
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	7e40      	ldrb	r0, [r0, #25]
 8002552:	78fe      	ldrb	r6, [r7, #3]
 8002554:	9003      	str	r0, [sp, #12]
 8002556:	9102      	str	r1, [sp, #8]
 8002558:	9201      	str	r2, [sp, #4]
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	4633      	mov	r3, r6
 800255e:	462a      	mov	r2, r5
 8002560:	4621      	mov	r1, r4
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff fcac 	bl	8001ec0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                   textsize_y);
        }
        cursor_x +=
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800256e:	b29a      	uxth	r2, r3
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	3304      	adds	r3, #4
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	4619      	mov	r1, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	7e1b      	ldrb	r3, [r3, #24]
 800257c:	fb11 f303 	smulbb	r3, r1, r3
 8002580:	b29b      	uxth	r3, r3
        cursor_x +=
 8002582:	4413      	add	r3, r2
 8002584:	b29b      	uxth	r3, r3
 8002586:	b21a      	sxth	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	821a      	strh	r2, [r3, #16]
      }
    }
  }
  return 1;
 800258c:	2301      	movs	r3, #1
}
 800258e:	4618      	mov	r0, r3
 8002590:	371c      	adds	r7, #28
 8002592:	46bd      	mov	sp, r7
 8002594:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002596 <_ZN12Adafruit_GFX11setTextSizeEh>:
    @brief   Set text 'magnification' size. Each increase in s makes 1 pixel
   that much bigger.
    @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
 8002596:	b580      	push	{r7, lr}
 8002598:	b082      	sub	sp, #8
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
 800259e:	460b      	mov	r3, r1
 80025a0:	70fb      	strb	r3, [r7, #3]
 80025a2:	78fa      	ldrb	r2, [r7, #3]
 80025a4:	78fb      	ldrb	r3, [r7, #3]
 80025a6:	4619      	mov	r1, r3
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f804 	bl	80025b6 <_ZN12Adafruit_GFX11setTextSizeEhh>
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <_ZN12Adafruit_GFX11setTextSizeEhh>:
   that much bigger.
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	460b      	mov	r3, r1
 80025c0:	70fb      	strb	r3, [r7, #3]
 80025c2:	4613      	mov	r3, r2
 80025c4:	70bb      	strb	r3, [r7, #2]
  textsize_x = (s_x > 0) ? s_x : 1;
 80025c6:	78fb      	ldrb	r3, [r7, #3]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <_ZN12Adafruit_GFX11setTextSizeEhh+0x1a>
 80025cc:	78fa      	ldrb	r2, [r7, #3]
 80025ce:	e000      	b.n	80025d2 <_ZN12Adafruit_GFX11setTextSizeEhh+0x1c>
 80025d0:	2201      	movs	r2, #1
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	761a      	strb	r2, [r3, #24]
  textsize_y = (s_y > 0) ? s_y : 1;
 80025d6:	78bb      	ldrb	r3, [r7, #2]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <_ZN12Adafruit_GFX11setTextSizeEhh+0x2a>
 80025dc:	78ba      	ldrb	r2, [r7, #2]
 80025de:	e000      	b.n	80025e2 <_ZN12Adafruit_GFX11setTextSizeEhh+0x2c>
 80025e0:	2201      	movs	r2, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	765a      	strb	r2, [r3, #25]
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
	...

080025f4 <_ZN12Adafruit_GFX11setRotationEh>:
/*!
    @brief      Set rotation setting for display
    @param  x   0 thru 3 corresponding to 4 cardinal rotations
*/
/**************************************************************************/
void Adafruit_GFX::setRotation(uint8_t x) {
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	70fb      	strb	r3, [r7, #3]
  rotation = (x & 3);
 8002600:	78fb      	ldrb	r3, [r7, #3]
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	b2da      	uxtb	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	769a      	strb	r2, [r3, #26]
  switch (rotation) {
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	7e9b      	ldrb	r3, [r3, #26]
 8002610:	2b03      	cmp	r3, #3
 8002612:	d821      	bhi.n	8002658 <_ZN12Adafruit_GFX11setRotationEh+0x64>
 8002614:	a201      	add	r2, pc, #4	@ (adr r2, 800261c <_ZN12Adafruit_GFX11setRotationEh+0x28>)
 8002616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261a:	bf00      	nop
 800261c:	0800262d 	.word	0x0800262d
 8002620:	08002643 	.word	0x08002643
 8002624:	0800262d 	.word	0x0800262d
 8002628:	08002643 	.word	0x08002643
  case 0:
  case 2:
    _width = WIDTH;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	819a      	strh	r2, [r3, #12]
    _height = HEIGHT;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	81da      	strh	r2, [r3, #14]
    break;
 8002640:	e00a      	b.n	8002658 <_ZN12Adafruit_GFX11setRotationEh+0x64>
  case 1:
  case 3:
    _width = HEIGHT;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	819a      	strh	r2, [r3, #12]
    _height = WIDTH;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	81da      	strh	r2, [r3, #14]
    break;
 8002656:	bf00      	nop
  }
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <_ZN12Adafruit_GFX7setFontEPK7GFXfont>:
/*!
    @brief Set the font to display when print()ing, either custom or default
    @param  f  The GFXfont object, if NULL use built in 6x8 font
*/
/**************************************************************************/
void Adafruit_GFX::setFont(const GFXfont *f) {
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  if (f) {          // Font struct pointer passed in?
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00d      	beq.n	8002690 <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0x2c>
    if (!gfxFont) { // And no current font struct?
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d116      	bne.n	80026aa <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0x46>
      // Switching from classic to new font behavior.
      // Move cursor pos down 6 pixels so it's on baseline.
      cursor_y += 6;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002682:	b29b      	uxth	r3, r3
 8002684:	3306      	adds	r3, #6
 8002686:	b29b      	uxth	r3, r3
 8002688:	b21a      	sxth	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	825a      	strh	r2, [r3, #18]
 800268e:	e00c      	b.n	80026aa <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0x46>
    }
  } else if (gfxFont) { // NULL passed.  Current font struct defined?
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d008      	beq.n	80026aa <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0x46>
    // Switching from new to classic font behavior.
    // Move cursor pos up 6 pixels so it's at top-left of char.
    cursor_y -= 6;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	3b06      	subs	r3, #6
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	b21a      	sxth	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	825a      	strh	r2, [r3, #18]
  }
  gfxFont = (GFXfont *)f;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	621a      	str	r2, [r3, #32]
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_>:
    @param  maxy  Pointer to maximum Y coord, passed in AND returned.
*/
/**************************************************************************/
void Adafruit_GFX::charBounds(unsigned char c, int16_t *x, int16_t *y,
                              int16_t *minx, int16_t *miny, int16_t *maxx,
                              int16_t *maxy) {
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08e      	sub	sp, #56	@ 0x38
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	607a      	str	r2, [r7, #4]
 80026c6:	603b      	str	r3, [r7, #0]
 80026c8:	460b      	mov	r3, r1
 80026ca:	72fb      	strb	r3, [r7, #11]

  if (gfxFont) {
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 80fc 	beq.w	80028ce <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x212>

    if (c == '\n') { // Newline?
 80026d6:	7afb      	ldrb	r3, [r7, #11]
 80026d8:	2b0a      	cmp	r3, #10
 80026da:	d116      	bne.n	800270a <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x4e>
      *x = 0;        // Reset x to zero, advance y by one line
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	801a      	strh	r2, [r3, #0]
      *y += textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	7e5b      	ldrb	r3, [r3, #25]
 80026ee:	4619      	mov	r1, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	330c      	adds	r3, #12
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	fb11 f303 	smulbb	r3, r1, r3
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	4413      	add	r3, r2
 8002700:	b29b      	uxth	r3, r3
 8002702:	b21a      	sxth	r2, r3
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	801a      	strh	r2, [r3, #0]
      if (*y < *miny)
        *miny = *y;
      *x += textsize_x * 6; // Advance x one char
    }
  }
}
 8002708:	e175      	b.n	80029f6 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x33a>
    } else if (c != '\r') { // Not a carriage return; is normal char
 800270a:	7afb      	ldrb	r3, [r7, #11]
 800270c:	2b0d      	cmp	r3, #13
 800270e:	f000 8172 	beq.w	80029f6 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x33a>
      uint8_t first = pgm_read_byte(&gfxFont->first),
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	3308      	adds	r3, #8
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
              last = pgm_read_byte(&gfxFont->last);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	330a      	adds	r3, #10
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
      if ((c >= first) && (c <= last)) { // Char present in this font?
 800272a:	7afa      	ldrb	r2, [r7, #11]
 800272c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002730:	429a      	cmp	r2, r3
 8002732:	f0c0 8160 	bcc.w	80029f6 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x33a>
 8002736:	7afa      	ldrb	r2, [r7, #11]
 8002738:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800273c:	429a      	cmp	r2, r3
 800273e:	f200 815a 	bhi.w	80029f6 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x33a>
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a18      	ldr	r0, [r3, #32]
 8002746:	7afa      	ldrb	r2, [r7, #11]
 8002748:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	b2db      	uxtb	r3, r3
 8002750:	4619      	mov	r1, r3
 8002752:	f7fe feb3 	bl	80014bc <_Z18pgm_read_glyph_ptrPK7GFXfonth>
 8002756:	62b8      	str	r0, [r7, #40]	@ 0x28
        uint8_t gw = pgm_read_byte(&glyph->width),
 8002758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800275a:	3302      	adds	r3, #2
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                gh = pgm_read_byte(&glyph->height),
 8002762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002764:	3303      	adds	r3, #3
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                xa = pgm_read_byte(&glyph->xAdvance);
 800276c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800276e:	3304      	adds	r3, #4
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        int8_t xo = pgm_read_byte(&glyph->xOffset),
 8002776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002778:	3305      	adds	r3, #5
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
               yo = pgm_read_byte(&glyph->yOffset);
 8002780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002782:	3306      	adds	r3, #6
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        if (wrap && ((*x + (((int16_t)xo + gw) * textsize_x)) > _width)) {
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	7edb      	ldrb	r3, [r3, #27]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d028      	beq.n	80027e4 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x128>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002798:	4619      	mov	r1, r3
 800279a:	f997 2024 	ldrsb.w	r2, [r7, #36]	@ 0x24
 800279e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80027a2:	4413      	add	r3, r2
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	7e12      	ldrb	r2, [r2, #24]
 80027a8:	fb02 f303 	mul.w	r3, r2, r3
 80027ac:	440b      	add	r3, r1
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80027b4:	4293      	cmp	r3, r2
 80027b6:	dd15      	ble.n	80027e4 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x128>
          *x = 0; // Reset x to zero, advance y by one line
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	801a      	strh	r2, [r3, #0]
          *y += textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	7e5b      	ldrb	r3, [r3, #25]
 80027ca:	4619      	mov	r1, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	330c      	adds	r3, #12
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	fb11 f303 	smulbb	r3, r1, r3
 80027d8:	b29b      	uxth	r3, r3
 80027da:	4413      	add	r3, r2
 80027dc:	b29b      	uxth	r3, r3
 80027de:	b21a      	sxth	r2, r3
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	801a      	strh	r2, [r3, #0]
        int16_t tsx = (int16_t)textsize_x, tsy = (int16_t)textsize_y,
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	7e1b      	ldrb	r3, [r3, #24]
 80027e8:	843b      	strh	r3, [r7, #32]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	7e5b      	ldrb	r3, [r3, #25]
 80027ee:	83fb      	strh	r3, [r7, #30]
                x1 = *x + xo * tsx, y1 = *y + yo * tsy, x2 = x1 + gw * tsx - 1,
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 80027fc:	b299      	uxth	r1, r3
 80027fe:	8c3b      	ldrh	r3, [r7, #32]
 8002800:	fb11 f303 	smulbb	r3, r1, r3
 8002804:	b29b      	uxth	r3, r3
 8002806:	4413      	add	r3, r2
 8002808:	b29b      	uxth	r3, r3
 800280a:	83bb      	strh	r3, [r7, #28]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002812:	b29a      	uxth	r2, r3
 8002814:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002818:	b299      	uxth	r1, r3
 800281a:	8bfb      	ldrh	r3, [r7, #30]
 800281c:	fb11 f303 	smulbb	r3, r1, r3
 8002820:	b29b      	uxth	r3, r3
 8002822:	4413      	add	r3, r2
 8002824:	b29b      	uxth	r3, r3
 8002826:	837b      	strh	r3, [r7, #26]
 8002828:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800282c:	b29a      	uxth	r2, r3
 800282e:	8c3b      	ldrh	r3, [r7, #32]
 8002830:	fb12 f303 	smulbb	r3, r2, r3
 8002834:	b29a      	uxth	r2, r3
 8002836:	8bbb      	ldrh	r3, [r7, #28]
 8002838:	4413      	add	r3, r2
 800283a:	b29b      	uxth	r3, r3
 800283c:	3b01      	subs	r3, #1
 800283e:	b29b      	uxth	r3, r3
 8002840:	833b      	strh	r3, [r7, #24]
                y2 = y1 + gh * tsy - 1;
 8002842:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002846:	b29a      	uxth	r2, r3
 8002848:	8bfb      	ldrh	r3, [r7, #30]
 800284a:	fb12 f303 	smulbb	r3, r2, r3
 800284e:	b29a      	uxth	r2, r3
 8002850:	8b7b      	ldrh	r3, [r7, #26]
 8002852:	4413      	add	r3, r2
 8002854:	b29b      	uxth	r3, r3
 8002856:	3b01      	subs	r3, #1
 8002858:	b29b      	uxth	r3, r3
 800285a:	82fb      	strh	r3, [r7, #22]
        if (x1 < *minx)
 800285c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800285e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002862:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002866:	429a      	cmp	r2, r3
 8002868:	da02      	bge.n	8002870 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x1b4>
          *minx = x1;
 800286a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800286c:	8bba      	ldrh	r2, [r7, #28]
 800286e:	801a      	strh	r2, [r3, #0]
        if (y1 < *miny)
 8002870:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002872:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002876:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800287a:	429a      	cmp	r2, r3
 800287c:	da02      	bge.n	8002884 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x1c8>
          *miny = y1;
 800287e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002880:	8b7a      	ldrh	r2, [r7, #26]
 8002882:	801a      	strh	r2, [r3, #0]
        if (x2 > *maxx)
 8002884:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002886:	f9b3 3000 	ldrsh.w	r3, [r3]
 800288a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800288e:	429a      	cmp	r2, r3
 8002890:	dd02      	ble.n	8002898 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x1dc>
          *maxx = x2;
 8002892:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002894:	8b3a      	ldrh	r2, [r7, #24]
 8002896:	801a      	strh	r2, [r3, #0]
        if (y2 > *maxy)
 8002898:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800289a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800289e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	dd02      	ble.n	80028ac <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x1f0>
          *maxy = y2;
 80028a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028a8:	8afa      	ldrh	r2, [r7, #22]
 80028aa:	801a      	strh	r2, [r3, #0]
        *x += xa * tsx;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80028b8:	b299      	uxth	r1, r3
 80028ba:	8c3b      	ldrh	r3, [r7, #32]
 80028bc:	fb11 f303 	smulbb	r3, r1, r3
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	4413      	add	r3, r2
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	b21a      	sxth	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	801a      	strh	r2, [r3, #0]
}
 80028cc:	e093      	b.n	80029f6 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x33a>
    if (c == '\n') {        // Newline?
 80028ce:	7afb      	ldrb	r3, [r7, #11]
 80028d0:	2b0a      	cmp	r3, #10
 80028d2:	d110      	bne.n	80028f6 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x23a>
      *x = 0;               // Reset x to zero,
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	801a      	strh	r2, [r3, #0]
      *y += textsize_y * 8; // advance y one line
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	7e5b      	ldrb	r3, [r3, #25]
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	4413      	add	r3, r2
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	b21a      	sxth	r2, r3
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	801a      	strh	r2, [r3, #0]
}
 80028f4:	e07f      	b.n	80029f6 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x33a>
    } else if (c != '\r') { // Normal char; ignore carriage returns
 80028f6:	7afb      	ldrb	r3, [r7, #11]
 80028f8:	2b0d      	cmp	r3, #13
 80028fa:	d07c      	beq.n	80029f6 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x33a>
      if (wrap && ((*x + textsize_x * 6) > _width)) { // Off right?
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	7edb      	ldrb	r3, [r3, #27]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d020      	beq.n	8002946 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x28a>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f9b3 3000 	ldrsh.w	r3, [r3]
 800290a:	4619      	mov	r1, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	7e1b      	ldrb	r3, [r3, #24]
 8002910:	461a      	mov	r2, r3
 8002912:	4613      	mov	r3, r2
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	4413      	add	r3, r2
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	440b      	add	r3, r1
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8002922:	4293      	cmp	r3, r2
 8002924:	dd0f      	ble.n	8002946 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x28a>
        *x = 0;                                       // Reset x to zero,
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	801a      	strh	r2, [r3, #0]
        *y += textsize_y * 8;                         // advance y one line
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002932:	b29a      	uxth	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	7e5b      	ldrb	r3, [r3, #25]
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	b29b      	uxth	r3, r3
 800293c:	4413      	add	r3, r2
 800293e:	b29b      	uxth	r3, r3
 8002940:	b21a      	sxth	r2, r3
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	801a      	strh	r2, [r3, #0]
      int x2 = *x + textsize_x * 6 - 1, // Lower-right pixel of char
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f9b3 3000 	ldrsh.w	r3, [r3]
 800294c:	4619      	mov	r1, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	7e1b      	ldrb	r3, [r3, #24]
 8002952:	461a      	mov	r2, r3
 8002954:	4613      	mov	r3, r2
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	4413      	add	r3, r2
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	440b      	add	r3, r1
 800295e:	3b01      	subs	r3, #1
 8002960:	637b      	str	r3, [r7, #52]	@ 0x34
          y2 = *y + textsize_y * 8 - 1;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002968:	461a      	mov	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	7e5b      	ldrb	r3, [r3, #25]
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4413      	add	r3, r2
 8002972:	3b01      	subs	r3, #1
 8002974:	633b      	str	r3, [r7, #48]	@ 0x30
      if (x2 > *maxx)
 8002976:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002978:	f9b3 3000 	ldrsh.w	r3, [r3]
 800297c:	461a      	mov	r2, r3
 800297e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002980:	4293      	cmp	r3, r2
 8002982:	dd03      	ble.n	800298c <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x2d0>
        *maxx = x2; // Track max x, y
 8002984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002986:	b21a      	sxth	r2, r3
 8002988:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800298a:	801a      	strh	r2, [r3, #0]
      if (y2 > *maxy)
 800298c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800298e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002992:	461a      	mov	r2, r3
 8002994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002996:	4293      	cmp	r3, r2
 8002998:	dd03      	ble.n	80029a2 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x2e6>
        *maxy = y2;
 800299a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800299c:	b21a      	sxth	r2, r3
 800299e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029a0:	801a      	strh	r2, [r3, #0]
      if (*x < *minx)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80029a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	da04      	bge.n	80029bc <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x300>
        *minx = *x; // Track min x, y
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80029b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029ba:	801a      	strh	r2, [r3, #0]
      if (*y < *miny)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	f9b3 2000 	ldrsh.w	r2, [r3]
 80029c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	da04      	bge.n	80029d6 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x31a>
        *miny = *y;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80029d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029d4:	801a      	strh	r2, [r3, #0]
      *x += textsize_x * 6; // Advance x one char
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029dc:	b29a      	uxth	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	7e1b      	ldrb	r3, [r3, #24]
 80029e2:	4619      	mov	r1, r3
 80029e4:	0049      	lsls	r1, r1, #1
 80029e6:	440b      	add	r3, r1
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	4413      	add	r3, r2
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	b21a      	sxth	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	801a      	strh	r2, [r3, #0]
}
 80029f6:	bf00      	nop
 80029f8:	3738      	adds	r7, #56	@ 0x38
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>:
    @param  h    The boundary height, returned by function
*/
/**************************************************************************/
void Adafruit_GFX::getTextBounds(const char *str, int16_t x, int16_t y,
                                 int16_t *x1, int16_t *y1, uint16_t *w,
                                 uint16_t *h) {
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b08c      	sub	sp, #48	@ 0x30
 8002a02:	af04      	add	r7, sp, #16
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	4611      	mov	r1, r2
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	80fb      	strh	r3, [r7, #6]
 8002a10:	4613      	mov	r3, r2
 8002a12:	80bb      	strh	r3, [r7, #4]

  uint8_t c; // Current character
  int16_t minx = 0x7FFF, miny = 0x7FFF, maxx = -1, maxy = -1; // Bound rect
 8002a14:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002a18:	83bb      	strh	r3, [r7, #28]
 8002a1a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002a1e:	837b      	strh	r3, [r7, #26]
 8002a20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a24:	833b      	strh	r3, [r7, #24]
 8002a26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a2a:	82fb      	strh	r3, [r7, #22]
  // Bound rect is intentionally initialized inverted, so 1st char sets it

  *x1 = x; // Initial position is value passed in
 8002a2c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a32:	801a      	strh	r2, [r3, #0]
  *y1 = y;
 8002a34:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a3a:	801a      	strh	r2, [r3, #0]
  *w = *h = 0; // Initial size is zero
 8002a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a3e:	2200      	movs	r2, #0
 8002a40:	801a      	strh	r2, [r3, #0]
 8002a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a44:	881a      	ldrh	r2, [r3, #0]
 8002a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a48:	801a      	strh	r2, [r3, #0]

  while ((c = *str++)) {
 8002a4a:	e012      	b.n	8002a72 <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_+0x74>
    // charBounds() modifies x/y to advance for each character,
    // and min/max x/y are updated to incrementally build bounding rect.
    charBounds(c, &x, &y, &minx, &miny, &maxx, &maxy);
 8002a4c:	1d38      	adds	r0, r7, #4
 8002a4e:	1dba      	adds	r2, r7, #6
 8002a50:	7ff9      	ldrb	r1, [r7, #31]
 8002a52:	f107 0316 	add.w	r3, r7, #22
 8002a56:	9303      	str	r3, [sp, #12]
 8002a58:	f107 0318 	add.w	r3, r7, #24
 8002a5c:	9302      	str	r3, [sp, #8]
 8002a5e:	f107 031a 	add.w	r3, r7, #26
 8002a62:	9301      	str	r3, [sp, #4]
 8002a64:	f107 031c 	add.w	r3, r7, #28
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f7ff fe25 	bl	80026bc <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_>
  while ((c = *str++)) {
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	60ba      	str	r2, [r7, #8]
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	77fb      	strb	r3, [r7, #31]
 8002a7c:	7ffb      	ldrb	r3, [r7, #31]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	bf14      	ite	ne
 8002a82:	2301      	movne	r3, #1
 8002a84:	2300      	moveq	r3, #0
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1df      	bne.n	8002a4c <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_+0x4e>
  }

  if (maxx >= minx) {     // If legit string bounds were found...
 8002a8c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002a90:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	db0f      	blt.n	8002ab8 <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_+0xba>
    *x1 = minx;           // Update x1 to least X coord,
 8002a98:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a9e:	801a      	strh	r2, [r3, #0]
    *w = maxx - minx + 1; // And w to bound rect width
 8002aa0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab6:	801a      	strh	r2, [r3, #0]
  }
  if (maxy >= miny) { // Same for height
 8002ab8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002abc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	db0f      	blt.n	8002ae4 <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_+0xe6>
    *y1 = miny;
 8002ac4:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8002ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aca:	801a      	strh	r2, [r3, #0]
    *h = maxy - miny + 1;
 8002acc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	3301      	adds	r3, #1
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ae2:	801a      	strh	r2, [r3, #0]
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	3720      	adds	r7, #32
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <_ZN12Adafruit_GFX13invertDisplayEb>:
/*!
    @brief      Invert the display (ideally using built-in hardware command)
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	70fb      	strb	r3, [r7, #3]
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <_ZN11GFXcanvas16C1Ettb>:
   false, the subclass must initialize the buffer before any drawing operation,
   and free it in the destructor. If false (the default), the buffer is
   allocated and freed by the library.
*/
/**************************************************************************/
GFXcanvas16::GFXcanvas16(uint16_t w, uint16_t h, bool allocate_buffer)
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	4608      	mov	r0, r1
 8002b0e:	4611      	mov	r1, r2
 8002b10:	461a      	mov	r2, r3
 8002b12:	4603      	mov	r3, r0
 8002b14:	817b      	strh	r3, [r7, #10]
 8002b16:	460b      	mov	r3, r1
 8002b18:	813b      	strh	r3, [r7, #8]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	71fb      	strb	r3, [r7, #7]
    : Adafruit_GFX(w, h), buffer_owned(allocate_buffer) {
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002b24:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7fe fce5 	bl	80014f8 <_ZN12Adafruit_GFXC1Ess>
 8002b2e:	4a18      	ldr	r2, [pc, #96]	@ (8002b90 <_ZN11GFXcanvas16C1Ettb+0x8c>)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	79fa      	ldrb	r2, [r7, #7]
 8002b38:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  if (allocate_buffer) {
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d01d      	beq.n	8002b7e <_ZN11GFXcanvas16C1Ettb+0x7a>
    uint32_t bytes = w * h * 2;
 8002b42:	897b      	ldrh	r3, [r7, #10]
 8002b44:	893a      	ldrh	r2, [r7, #8]
 8002b46:	fb02 f303 	mul.w	r3, r2, r3
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	617b      	str	r3, [r7, #20]
    if ((buffer = (uint16_t *)malloc(bytes))) {
 8002b4e:	6978      	ldr	r0, [r7, #20]
 8002b50:	f016 fd42 	bl	80195d8 <malloc>
 8002b54:	4603      	mov	r3, r0
 8002b56:	461a      	mov	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	625a      	str	r2, [r3, #36]	@ 0x24
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	bf14      	ite	ne
 8002b64:	2301      	movne	r3, #1
 8002b66:	2300      	moveq	r3, #0
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00a      	beq.n	8002b84 <_ZN11GFXcanvas16C1Ettb+0x80>
      memset(buffer, 0, bytes);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	2100      	movs	r1, #0
 8002b76:	4618      	mov	r0, r3
 8002b78:	f017 fb97 	bl	801a2aa <memset>
 8002b7c:	e002      	b.n	8002b84 <_ZN11GFXcanvas16C1Ettb+0x80>
    }
  } else {
    buffer = nullptr;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	4618      	mov	r0, r3
 8002b88:	3718      	adds	r7, #24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	0801c984 	.word	0x0801c984

08002b94 <_ZN11GFXcanvas16D1Ev>:
/**************************************************************************/
/*!
   @brief    Delete the canvas, free memory
*/
/**************************************************************************/
GFXcanvas16::~GFXcanvas16(void) {
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc8 <_ZN11GFXcanvas16D1Ev+0x34>)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	601a      	str	r2, [r3, #0]
  if (buffer && buffer_owned)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d009      	beq.n	8002bbe <_ZN11GFXcanvas16D1Ev+0x2a>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d004      	beq.n	8002bbe <_ZN11GFXcanvas16D1Ev+0x2a>
    free(buffer);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f016 fd15 	bl	80195e8 <free>
}
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	0801c984 	.word	0x0801c984

08002bcc <_ZN11GFXcanvas169drawPixelEsst>:
    @param  x   x coordinate
    @param  y   y coordinate
    @param  color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void GFXcanvas16::drawPixel(int16_t x, int16_t y, uint16_t color) {
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	4608      	mov	r0, r1
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4603      	mov	r3, r0
 8002bdc:	817b      	strh	r3, [r7, #10]
 8002bde:	460b      	mov	r3, r1
 8002be0:	813b      	strh	r3, [r7, #8]
 8002be2:	4613      	mov	r3, r2
 8002be4:	80fb      	strh	r3, [r7, #6]
  if (buffer) {
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d065      	beq.n	8002cba <_ZN11GFXcanvas169drawPixelEsst+0xee>
    if ((x < 0) || (y < 0) || (x >= _width) || (y >= _height))
 8002bee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	db60      	blt.n	8002cb8 <_ZN11GFXcanvas169drawPixelEsst+0xec>
 8002bf6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	db5c      	blt.n	8002cb8 <_ZN11GFXcanvas169drawPixelEsst+0xec>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002c04:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	da55      	bge.n	8002cb8 <_ZN11GFXcanvas169drawPixelEsst+0xec>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002c12:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	da4e      	bge.n	8002cb8 <_ZN11GFXcanvas169drawPixelEsst+0xec>
      return;

    int16_t t;
    switch (rotation) {
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	7e9b      	ldrb	r3, [r3, #26]
 8002c1e:	2b03      	cmp	r3, #3
 8002c20:	d02a      	beq.n	8002c78 <_ZN11GFXcanvas169drawPixelEsst+0xac>
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	dc37      	bgt.n	8002c96 <_ZN11GFXcanvas169drawPixelEsst+0xca>
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d002      	beq.n	8002c30 <_ZN11GFXcanvas169drawPixelEsst+0x64>
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d00f      	beq.n	8002c4e <_ZN11GFXcanvas169drawPixelEsst+0x82>
 8002c2e:	e032      	b.n	8002c96 <_ZN11GFXcanvas169drawPixelEsst+0xca>
    case 1:
      t = x;
 8002c30:	897b      	ldrh	r3, [r7, #10]
 8002c32:	82fb      	strh	r3, [r7, #22]
      x = WIDTH - 1 - y;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	893b      	ldrh	r3, [r7, #8]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	817b      	strh	r3, [r7, #10]
      y = t;
 8002c48:	8afb      	ldrh	r3, [r7, #22]
 8002c4a:	813b      	strh	r3, [r7, #8]
      break;
 8002c4c:	e023      	b.n	8002c96 <_ZN11GFXcanvas169drawPixelEsst+0xca>
    case 2:
      x = WIDTH - 1 - x;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	897b      	ldrh	r3, [r7, #10]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	817b      	strh	r3, [r7, #10]
      y = HEIGHT - 1 - y;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	893b      	ldrh	r3, [r7, #8]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	813b      	strh	r3, [r7, #8]
      break;
 8002c76:	e00e      	b.n	8002c96 <_ZN11GFXcanvas169drawPixelEsst+0xca>
    case 3:
      t = x;
 8002c78:	897b      	ldrh	r3, [r7, #10]
 8002c7a:	82fb      	strh	r3, [r7, #22]
      x = y;
 8002c7c:	893b      	ldrh	r3, [r7, #8]
 8002c7e:	817b      	strh	r3, [r7, #10]
      y = HEIGHT - 1 - t;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	8afb      	ldrh	r3, [r7, #22]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	813b      	strh	r3, [r7, #8]
      break;
 8002c94:	bf00      	nop
    }

    buffer[x + y * WIDTH] = color;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c9a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002c9e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8002ca8:	fb00 f303 	mul.w	r3, r0, r3
 8002cac:	440b      	add	r3, r1
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	4413      	add	r3, r2
 8002cb2:	88fa      	ldrh	r2, [r7, #6]
 8002cb4:	801a      	strh	r2, [r3, #0]
 8002cb6:	e000      	b.n	8002cba <_ZN11GFXcanvas169drawPixelEsst+0xee>
      return;
 8002cb8:	bf00      	nop
  }
}
 8002cba:	371c      	adds	r7, #28
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <_ZN11GFXcanvas1610fillScreenEt>:
/*!
    @brief  Fill the framebuffer completely with one color
    @param  color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void GFXcanvas16::fillScreen(uint16_t color) {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	460b      	mov	r3, r1
 8002cce:	807b      	strh	r3, [r7, #2]
  if (buffer) {
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d035      	beq.n	8002d44 <_ZN11GFXcanvas1610fillScreenEt+0x80>
    uint8_t hi = color >> 8, lo = color & 0xFF;
 8002cd8:	887b      	ldrh	r3, [r7, #2]
 8002cda:	0a1b      	lsrs	r3, r3, #8
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	74fb      	strb	r3, [r7, #19]
 8002ce0:	887b      	ldrh	r3, [r7, #2]
 8002ce2:	74bb      	strb	r3, [r7, #18]
    if (hi == lo) {
 8002ce4:	7cfa      	ldrb	r2, [r7, #19]
 8002ce6:	7cbb      	ldrb	r3, [r7, #18]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d110      	bne.n	8002d0e <_ZN11GFXcanvas1610fillScreenEt+0x4a>
      memset(buffer, lo, WIDTH * HEIGHT * 2);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002cf0:	7cb9      	ldrb	r1, [r7, #18]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002d00:	fb02 f303 	mul.w	r3, r2, r3
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	461a      	mov	r2, r3
 8002d08:	f017 facf 	bl	801a2aa <memset>
      uint32_t i, pixels = WIDTH * HEIGHT;
      for (i = 0; i < pixels; i++)
        buffer[i] = color;
    }
  }
}
 8002d0c:	e01a      	b.n	8002d44 <_ZN11GFXcanvas1610fillScreenEt+0x80>
      uint32_t i, pixels = WIDTH * HEIGHT;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d14:	461a      	mov	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002d1c:	fb02 f303 	mul.w	r3, r2, r3
 8002d20:	60fb      	str	r3, [r7, #12]
      for (i = 0; i < pixels; i++)
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	e009      	b.n	8002d3c <_ZN11GFXcanvas1610fillScreenEt+0x78>
        buffer[i] = color;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	4413      	add	r3, r2
 8002d32:	887a      	ldrh	r2, [r7, #2]
 8002d34:	801a      	strh	r2, [r3, #0]
      for (i = 0; i < pixels; i++)
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d3f1      	bcc.n	8002d28 <_ZN11GFXcanvas1610fillScreenEt+0x64>
}
 8002d44:	bf00      	nop
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <_ZN11GFXcanvas1613drawFastVLineEssst>:
   @param    h   length of vertical line to be drawn, including first point
   @param    color   color 16-bit 5-6-5 Color to draw line with
*/
/**************************************************************************/
void GFXcanvas16::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                uint16_t color) {
 8002d4c:	b590      	push	{r4, r7, lr}
 8002d4e:	b089      	sub	sp, #36	@ 0x24
 8002d50:	af02      	add	r7, sp, #8
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	4608      	mov	r0, r1
 8002d56:	4611      	mov	r1, r2
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	817b      	strh	r3, [r7, #10]
 8002d5e:	460b      	mov	r3, r1
 8002d60:	813b      	strh	r3, [r7, #8]
 8002d62:	4613      	mov	r3, r2
 8002d64:	80fb      	strh	r3, [r7, #6]
  if (h < 0) { // Convert negative heights to positive equivalent
 8002d66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	da15      	bge.n	8002d9a <_ZN11GFXcanvas1613drawFastVLineEssst+0x4e>
    h *= -1;
 8002d6e:	88fb      	ldrh	r3, [r7, #6]
 8002d70:	425b      	negs	r3, r3
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	80fb      	strh	r3, [r7, #6]
    y -= h - 1;
 8002d76:	893a      	ldrh	r2, [r7, #8]
 8002d78:	88fb      	ldrh	r3, [r7, #6]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	3301      	adds	r3, #1
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	813b      	strh	r3, [r7, #8]
    if (y < 0) {
 8002d84:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	da06      	bge.n	8002d9a <_ZN11GFXcanvas1613drawFastVLineEssst+0x4e>
      h += y;
 8002d8c:	88fa      	ldrh	r2, [r7, #6]
 8002d8e:	893b      	ldrh	r3, [r7, #8]
 8002d90:	4413      	add	r3, r2
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	80fb      	strh	r3, [r7, #6]
      y = 0;
 8002d96:	2300      	movs	r3, #0
 8002d98:	813b      	strh	r3, [r7, #8]
    }
  }

  // Edge rejection (no-draw if totally off canvas)
  if ((x < 0) || (x >= width()) || (y >= height()) || ((y + h - 1) < 0)) {
 8002d9a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	db1a      	blt.n	8002dd8 <_ZN11GFXcanvas1613drawFastVLineEssst+0x8c>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7fe fb63 	bl	8001470 <_ZNK12Adafruit_GFX5widthEv>
 8002daa:	4603      	mov	r3, r0
 8002dac:	461a      	mov	r2, r3
 8002dae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002db2:	4293      	cmp	r3, r2
 8002db4:	da10      	bge.n	8002dd8 <_ZN11GFXcanvas1613drawFastVLineEssst+0x8c>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7fe fb66 	bl	800148a <_ZNK12Adafruit_GFX6heightEv>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	da06      	bge.n	8002dd8 <_ZN11GFXcanvas1613drawFastVLineEssst+0x8c>
 8002dca:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002dce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	dc01      	bgt.n	8002ddc <_ZN11GFXcanvas1613drawFastVLineEssst+0x90>
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e000      	b.n	8002dde <_ZN11GFXcanvas1613drawFastVLineEssst+0x92>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f040 80c8 	bne.w	8002f74 <_ZN11GFXcanvas1613drawFastVLineEssst+0x228>
    return;
  }

  if (y < 0) { // Clip top
 8002de4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	da06      	bge.n	8002dfa <_ZN11GFXcanvas1613drawFastVLineEssst+0xae>
    h += y;
 8002dec:	88fa      	ldrh	r2, [r7, #6]
 8002dee:	893b      	ldrh	r3, [r7, #8]
 8002df0:	4413      	add	r3, r2
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	80fb      	strh	r3, [r7, #6]
    y = 0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	813b      	strh	r3, [r7, #8]
  }
  if (y + h > height()) { // Clip bottom
 8002dfa:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002dfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e02:	18d4      	adds	r4, r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fe fb3f 	bl	800148a <_ZNK12Adafruit_GFX6heightEv>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	429c      	cmp	r4, r3
 8002e10:	bfcc      	ite	gt
 8002e12:	2301      	movgt	r3, #1
 8002e14:	2300      	movle	r3, #0
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d009      	beq.n	8002e30 <_ZN11GFXcanvas1613drawFastVLineEssst+0xe4>
    h = height() - y;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fe fb33 	bl	800148a <_ZNK12Adafruit_GFX6heightEv>
 8002e24:	4603      	mov	r3, r0
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	893b      	ldrh	r3, [r7, #8]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	80fb      	strh	r3, [r7, #6]
  }

  if (getRotation() == 0) {
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fe fb36 	bl	80014a4 <_ZNK12Adafruit_GFX11getRotationEv>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	bf0c      	ite	eq
 8002e3e:	2301      	moveq	r3, #1
 8002e40:	2300      	movne	r3, #0
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00c      	beq.n	8002e62 <_ZN11GFXcanvas1613drawFastVLineEssst+0x116>
    drawFastRawVLine(x, y, h, color);
 8002e48:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002e4c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002e50:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002e54:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	4603      	mov	r3, r0
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 f9a6 	bl	80031ac <_ZN11GFXcanvas1616drawFastRawVLineEssst>
 8002e60:	e089      	b.n	8002f76 <_ZN11GFXcanvas1613drawFastVLineEssst+0x22a>
  } else if (getRotation() == 1) {
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fe fb1d 	bl	80014a4 <_ZNK12Adafruit_GFX11getRotationEv>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	bf0c      	ite	eq
 8002e70:	2301      	moveq	r3, #1
 8002e72:	2300      	movne	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d021      	beq.n	8002ebe <_ZN11GFXcanvas1613drawFastVLineEssst+0x172>
    int16_t t = x;
 8002e7a:	897b      	ldrh	r3, [r7, #10]
 8002e7c:	82bb      	strh	r3, [r7, #20]
    x = WIDTH - 1 - y;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	893b      	ldrh	r3, [r7, #8]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	817b      	strh	r3, [r7, #10]
    y = t;
 8002e92:	8abb      	ldrh	r3, [r7, #20]
 8002e94:	813b      	strh	r3, [r7, #8]
    x -= h - 1;
 8002e96:	897a      	ldrh	r2, [r7, #10]
 8002e98:	88fb      	ldrh	r3, [r7, #6]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	817b      	strh	r3, [r7, #10]
    drawFastRawHLine(x, y, h, color);
 8002ea4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002ea8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002eac:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002eb0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f9b5 	bl	8003226 <_ZN11GFXcanvas1616drawFastRawHLineEssst>
 8002ebc:	e05b      	b.n	8002f76 <_ZN11GFXcanvas1613drawFastVLineEssst+0x22a>
  } else if (getRotation() == 2) {
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fe faef 	bl	80014a4 <_ZNK12Adafruit_GFX11getRotationEv>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	bf0c      	ite	eq
 8002ecc:	2301      	moveq	r3, #1
 8002ece:	2300      	movne	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d027      	beq.n	8002f26 <_ZN11GFXcanvas1613drawFastVLineEssst+0x1da>
    x = WIDTH - 1 - x;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	897b      	ldrh	r3, [r7, #10]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	817b      	strh	r3, [r7, #10]
    y = HEIGHT - 1 - y;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	893b      	ldrh	r3, [r7, #8]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	813b      	strh	r3, [r7, #8]

    y -= h - 1;
 8002efe:	893a      	ldrh	r2, [r7, #8]
 8002f00:	88fb      	ldrh	r3, [r7, #6]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	3301      	adds	r3, #1
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	813b      	strh	r3, [r7, #8]
    drawFastRawVLine(x, y, h, color);
 8002f0c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002f10:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002f14:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002f18:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 f944 	bl	80031ac <_ZN11GFXcanvas1616drawFastRawVLineEssst>
 8002f24:	e027      	b.n	8002f76 <_ZN11GFXcanvas1613drawFastVLineEssst+0x22a>
  } else if (getRotation() == 3) {
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fe fabb 	bl	80014a4 <_ZNK12Adafruit_GFX11getRotationEv>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	bf0c      	ite	eq
 8002f34:	2301      	moveq	r3, #1
 8002f36:	2300      	movne	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d01b      	beq.n	8002f76 <_ZN11GFXcanvas1613drawFastVLineEssst+0x22a>
    int16_t t = x;
 8002f3e:	897b      	ldrh	r3, [r7, #10]
 8002f40:	82fb      	strh	r3, [r7, #22]
    x = y;
 8002f42:	893b      	ldrh	r3, [r7, #8]
 8002f44:	817b      	strh	r3, [r7, #10]
    y = HEIGHT - 1 - t;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	8afb      	ldrh	r3, [r7, #22]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	3b01      	subs	r3, #1
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	813b      	strh	r3, [r7, #8]
    drawFastRawHLine(x, y, h, color);
 8002f5a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002f5e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002f62:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002f66:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 f95a 	bl	8003226 <_ZN11GFXcanvas1616drawFastRawHLineEssst>
 8002f72:	e000      	b.n	8002f76 <_ZN11GFXcanvas1613drawFastVLineEssst+0x22a>
    return;
 8002f74:	bf00      	nop
  }
}
 8002f76:	371c      	adds	r7, #28
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd90      	pop	{r4, r7, pc}

08002f7c <_ZN11GFXcanvas1613drawFastHLineEssst>:
   @param  w      Length of horizontal line to be drawn, including 1st point
   @param  color  Color 16-bit 5-6-5 Color to draw line with
*/
/**************************************************************************/
void GFXcanvas16::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                uint16_t color) {
 8002f7c:	b590      	push	{r4, r7, lr}
 8002f7e:	b089      	sub	sp, #36	@ 0x24
 8002f80:	af02      	add	r7, sp, #8
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	4608      	mov	r0, r1
 8002f86:	4611      	mov	r1, r2
 8002f88:	461a      	mov	r2, r3
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	817b      	strh	r3, [r7, #10]
 8002f8e:	460b      	mov	r3, r1
 8002f90:	813b      	strh	r3, [r7, #8]
 8002f92:	4613      	mov	r3, r2
 8002f94:	80fb      	strh	r3, [r7, #6]
  if (w < 0) { // Convert negative widths to positive equivalent
 8002f96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	da15      	bge.n	8002fca <_ZN11GFXcanvas1613drawFastHLineEssst+0x4e>
    w *= -1;
 8002f9e:	88fb      	ldrh	r3, [r7, #6]
 8002fa0:	425b      	negs	r3, r3
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	80fb      	strh	r3, [r7, #6]
    x -= w - 1;
 8002fa6:	897a      	ldrh	r2, [r7, #10]
 8002fa8:	88fb      	ldrh	r3, [r7, #6]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	3301      	adds	r3, #1
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	817b      	strh	r3, [r7, #10]
    if (x < 0) {
 8002fb4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	da06      	bge.n	8002fca <_ZN11GFXcanvas1613drawFastHLineEssst+0x4e>
      w += x;
 8002fbc:	88fa      	ldrh	r2, [r7, #6]
 8002fbe:	897b      	ldrh	r3, [r7, #10]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	80fb      	strh	r3, [r7, #6]
      x = 0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	817b      	strh	r3, [r7, #10]
    }
  }

  // Edge rejection (no-draw if totally off canvas)
  if ((y < 0) || (y >= height()) || (x >= width()) || ((x + w - 1) < 0)) {
 8002fca:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	db1a      	blt.n	8003008 <_ZN11GFXcanvas1613drawFastHLineEssst+0x8c>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7fe fa58 	bl	800148a <_ZNK12Adafruit_GFX6heightEv>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	461a      	mov	r2, r3
 8002fde:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	da10      	bge.n	8003008 <_ZN11GFXcanvas1613drawFastHLineEssst+0x8c>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fe fa41 	bl	8001470 <_ZNK12Adafruit_GFX5widthEv>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	da06      	bge.n	8003008 <_ZN11GFXcanvas1613drawFastHLineEssst+0x8c>
 8002ffa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002ffe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003002:	4413      	add	r3, r2
 8003004:	2b00      	cmp	r3, #0
 8003006:	dc01      	bgt.n	800300c <_ZN11GFXcanvas1613drawFastHLineEssst+0x90>
 8003008:	2301      	movs	r3, #1
 800300a:	e000      	b.n	800300e <_ZN11GFXcanvas1613drawFastHLineEssst+0x92>
 800300c:	2300      	movs	r3, #0
 800300e:	2b00      	cmp	r3, #0
 8003010:	f040 80c8 	bne.w	80031a4 <_ZN11GFXcanvas1613drawFastHLineEssst+0x228>
    return;
  }

  if (x < 0) { // Clip left
 8003014:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003018:	2b00      	cmp	r3, #0
 800301a:	da06      	bge.n	800302a <_ZN11GFXcanvas1613drawFastHLineEssst+0xae>
    w += x;
 800301c:	88fa      	ldrh	r2, [r7, #6]
 800301e:	897b      	ldrh	r3, [r7, #10]
 8003020:	4413      	add	r3, r2
 8003022:	b29b      	uxth	r3, r3
 8003024:	80fb      	strh	r3, [r7, #6]
    x = 0;
 8003026:	2300      	movs	r3, #0
 8003028:	817b      	strh	r3, [r7, #10]
  }
  if (x + w >= width()) { // Clip right
 800302a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800302e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003032:	18d4      	adds	r4, r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4618      	mov	r0, r3
 8003038:	f7fe fa1a 	bl	8001470 <_ZNK12Adafruit_GFX5widthEv>
 800303c:	4603      	mov	r3, r0
 800303e:	429c      	cmp	r4, r3
 8003040:	bfac      	ite	ge
 8003042:	2301      	movge	r3, #1
 8003044:	2300      	movlt	r3, #0
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	d009      	beq.n	8003060 <_ZN11GFXcanvas1613drawFastHLineEssst+0xe4>
    w = width() - x;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4618      	mov	r0, r3
 8003050:	f7fe fa0e 	bl	8001470 <_ZNK12Adafruit_GFX5widthEv>
 8003054:	4603      	mov	r3, r0
 8003056:	b29a      	uxth	r2, r3
 8003058:	897b      	ldrh	r3, [r7, #10]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	b29b      	uxth	r3, r3
 800305e:	80fb      	strh	r3, [r7, #6]
  }

  if (getRotation() == 0) {
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4618      	mov	r0, r3
 8003064:	f7fe fa1e 	bl	80014a4 <_ZNK12Adafruit_GFX11getRotationEv>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	bf0c      	ite	eq
 800306e:	2301      	moveq	r3, #1
 8003070:	2300      	movne	r3, #0
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00c      	beq.n	8003092 <_ZN11GFXcanvas1613drawFastHLineEssst+0x116>
    drawFastRawHLine(x, y, w, color);
 8003078:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800307c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003080:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003084:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	4603      	mov	r3, r0
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 f8cb 	bl	8003226 <_ZN11GFXcanvas1616drawFastRawHLineEssst>
 8003090:	e089      	b.n	80031a6 <_ZN11GFXcanvas1613drawFastHLineEssst+0x22a>
  } else if (getRotation() == 1) {
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	4618      	mov	r0, r3
 8003096:	f7fe fa05 	bl	80014a4 <_ZNK12Adafruit_GFX11getRotationEv>
 800309a:	4603      	mov	r3, r0
 800309c:	2b01      	cmp	r3, #1
 800309e:	bf0c      	ite	eq
 80030a0:	2301      	moveq	r3, #1
 80030a2:	2300      	movne	r3, #0
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d01a      	beq.n	80030e0 <_ZN11GFXcanvas1613drawFastHLineEssst+0x164>
    int16_t t = x;
 80030aa:	897b      	ldrh	r3, [r7, #10]
 80030ac:	82bb      	strh	r3, [r7, #20]
    x = WIDTH - 1 - y;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	893b      	ldrh	r3, [r7, #8]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	3b01      	subs	r3, #1
 80030be:	b29b      	uxth	r3, r3
 80030c0:	817b      	strh	r3, [r7, #10]
    y = t;
 80030c2:	8abb      	ldrh	r3, [r7, #20]
 80030c4:	813b      	strh	r3, [r7, #8]
    drawFastRawVLine(x, y, w, color);
 80030c6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80030ca:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80030ce:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80030d2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	4603      	mov	r3, r0
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 f867 	bl	80031ac <_ZN11GFXcanvas1616drawFastRawVLineEssst>
 80030de:	e062      	b.n	80031a6 <_ZN11GFXcanvas1613drawFastHLineEssst+0x22a>
  } else if (getRotation() == 2) {
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fe f9de 	bl	80014a4 <_ZNK12Adafruit_GFX11getRotationEv>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	bf0c      	ite	eq
 80030ee:	2301      	moveq	r3, #1
 80030f0:	2300      	movne	r3, #0
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d027      	beq.n	8003148 <_ZN11GFXcanvas1613drawFastHLineEssst+0x1cc>
    x = WIDTH - 1 - x;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80030fe:	b29a      	uxth	r2, r3
 8003100:	897b      	ldrh	r3, [r7, #10]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	b29b      	uxth	r3, r3
 8003106:	3b01      	subs	r3, #1
 8003108:	b29b      	uxth	r3, r3
 800310a:	817b      	strh	r3, [r7, #10]
    y = HEIGHT - 1 - y;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003112:	b29a      	uxth	r2, r3
 8003114:	893b      	ldrh	r3, [r7, #8]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	b29b      	uxth	r3, r3
 800311a:	3b01      	subs	r3, #1
 800311c:	b29b      	uxth	r3, r3
 800311e:	813b      	strh	r3, [r7, #8]

    x -= w - 1;
 8003120:	897a      	ldrh	r2, [r7, #10]
 8003122:	88fb      	ldrh	r3, [r7, #6]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	b29b      	uxth	r3, r3
 8003128:	3301      	adds	r3, #1
 800312a:	b29b      	uxth	r3, r3
 800312c:	817b      	strh	r3, [r7, #10]
    drawFastRawHLine(x, y, w, color);
 800312e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003132:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003136:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800313a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	4603      	mov	r3, r0
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 f870 	bl	8003226 <_ZN11GFXcanvas1616drawFastRawHLineEssst>
 8003146:	e02e      	b.n	80031a6 <_ZN11GFXcanvas1613drawFastHLineEssst+0x22a>
  } else if (getRotation() == 3) {
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4618      	mov	r0, r3
 800314c:	f7fe f9aa 	bl	80014a4 <_ZNK12Adafruit_GFX11getRotationEv>
 8003150:	4603      	mov	r3, r0
 8003152:	2b03      	cmp	r3, #3
 8003154:	bf0c      	ite	eq
 8003156:	2301      	moveq	r3, #1
 8003158:	2300      	movne	r3, #0
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d022      	beq.n	80031a6 <_ZN11GFXcanvas1613drawFastHLineEssst+0x22a>
    int16_t t = x;
 8003160:	897b      	ldrh	r3, [r7, #10]
 8003162:	82fb      	strh	r3, [r7, #22]
    x = y;
 8003164:	893b      	ldrh	r3, [r7, #8]
 8003166:	817b      	strh	r3, [r7, #10]
    y = HEIGHT - 1 - t;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800316e:	b29a      	uxth	r2, r3
 8003170:	8afb      	ldrh	r3, [r7, #22]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	b29b      	uxth	r3, r3
 8003176:	3b01      	subs	r3, #1
 8003178:	b29b      	uxth	r3, r3
 800317a:	813b      	strh	r3, [r7, #8]
    y -= w - 1;
 800317c:	893a      	ldrh	r2, [r7, #8]
 800317e:	88fb      	ldrh	r3, [r7, #6]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	b29b      	uxth	r3, r3
 8003184:	3301      	adds	r3, #1
 8003186:	b29b      	uxth	r3, r3
 8003188:	813b      	strh	r3, [r7, #8]
    drawFastRawVLine(x, y, w, color);
 800318a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800318e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003192:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003196:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	4603      	mov	r3, r0
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 f805 	bl	80031ac <_ZN11GFXcanvas1616drawFastRawVLineEssst>
 80031a2:	e000      	b.n	80031a6 <_ZN11GFXcanvas1613drawFastHLineEssst+0x22a>
    return;
 80031a4:	bf00      	nop
  }
}
 80031a6:	371c      	adds	r7, #28
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd90      	pop	{r4, r7, pc}

080031ac <_ZN11GFXcanvas1616drawFastRawVLineEssst>:
   @param    h   length of vertical line to be drawn, including first point
   @param    color   color 16-bit 5-6-5 Color to draw line with
*/
/**************************************************************************/
void GFXcanvas16::drawFastRawVLine(int16_t x, int16_t y, int16_t h,
                                   uint16_t color) {
 80031ac:	b480      	push	{r7}
 80031ae:	b087      	sub	sp, #28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	4608      	mov	r0, r1
 80031b6:	4611      	mov	r1, r2
 80031b8:	461a      	mov	r2, r3
 80031ba:	4603      	mov	r3, r0
 80031bc:	817b      	strh	r3, [r7, #10]
 80031be:	460b      	mov	r3, r1
 80031c0:	813b      	strh	r3, [r7, #8]
 80031c2:	4613      	mov	r3, r2
 80031c4:	80fb      	strh	r3, [r7, #6]
  // x & y already in raw (rotation 0) coordinates, no need to transform.
  uint16_t *buffer_ptr = buffer + y * WIDTH + x;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031ca:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80031ce:	68f9      	ldr	r1, [r7, #12]
 80031d0:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80031d4:	fb01 f303 	mul.w	r3, r1, r3
 80031d8:	4619      	mov	r1, r3
 80031da:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80031de:	440b      	add	r3, r1
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	4413      	add	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]
  for (int16_t i = 0; i < h; i++) {
 80031e6:	2300      	movs	r3, #0
 80031e8:	827b      	strh	r3, [r7, #18]
 80031ea:	e00f      	b.n	800320c <_ZN11GFXcanvas1616drawFastRawVLineEssst+0x60>
    (*buffer_ptr) = color;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	8c3a      	ldrh	r2, [r7, #32]
 80031f0:	801a      	strh	r2, [r3, #0]
    buffer_ptr += WIDTH;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	4413      	add	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]
  for (int16_t i = 0; i < h; i++) {
 8003200:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003204:	b29b      	uxth	r3, r3
 8003206:	3301      	adds	r3, #1
 8003208:	b29b      	uxth	r3, r3
 800320a:	827b      	strh	r3, [r7, #18]
 800320c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003210:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003214:	429a      	cmp	r2, r3
 8003216:	dbe9      	blt.n	80031ec <_ZN11GFXcanvas1616drawFastRawVLineEssst+0x40>
  }
}
 8003218:	bf00      	nop
 800321a:	bf00      	nop
 800321c:	371c      	adds	r7, #28
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <_ZN11GFXcanvas1616drawFastRawHLineEssst>:
   @param    w   length of horizontal line to be drawn, including first point
   @param    color   color 16-bit 5-6-5 Color to draw line with
*/
/**************************************************************************/
void GFXcanvas16::drawFastRawHLine(int16_t x, int16_t y, int16_t w,
                                   uint16_t color) {
 8003226:	b480      	push	{r7}
 8003228:	b087      	sub	sp, #28
 800322a:	af00      	add	r7, sp, #0
 800322c:	60f8      	str	r0, [r7, #12]
 800322e:	4608      	mov	r0, r1
 8003230:	4611      	mov	r1, r2
 8003232:	461a      	mov	r2, r3
 8003234:	4603      	mov	r3, r0
 8003236:	817b      	strh	r3, [r7, #10]
 8003238:	460b      	mov	r3, r1
 800323a:	813b      	strh	r3, [r7, #8]
 800323c:	4613      	mov	r3, r2
 800323e:	80fb      	strh	r3, [r7, #6]
  // x & y already in raw (rotation 0) coordinates, no need to transform.
  uint32_t buffer_index = y * WIDTH + x;
 8003240:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800324a:	fb03 f202 	mul.w	r2, r3, r2
 800324e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003252:	4413      	add	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
  for (uint32_t i = buffer_index; i < buffer_index + w; i++) {
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	617b      	str	r3, [r7, #20]
 800325a:	e009      	b.n	8003270 <_ZN11GFXcanvas1616drawFastRawHLineEssst+0x4a>
    buffer[i] = color;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	4413      	add	r3, r2
 8003266:	8c3a      	ldrh	r2, [r7, #32]
 8003268:	801a      	strh	r2, [r3, #0]
  for (uint32_t i = buffer_index; i < buffer_index + w; i++) {
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	3301      	adds	r3, #1
 800326e:	617b      	str	r3, [r7, #20]
 8003270:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	4413      	add	r3, r2
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	429a      	cmp	r2, r3
 800327c:	d3ee      	bcc.n	800325c <_ZN11GFXcanvas1616drawFastRawHLineEssst+0x36>
  }
}
 800327e:	bf00      	nop
 8003280:	bf00      	nop
 8003282:	371c      	adds	r7, #28
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 800328c:	b590      	push	{r4, r7, lr}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <_ZN5Print5writeEPKc+0x14>
 800329c:	2300      	movs	r3, #0
 800329e:	e00d      	b.n	80032bc <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	3304      	adds	r3, #4
 80032a6:	681c      	ldr	r4, [r3, #0]
 80032a8:	6838      	ldr	r0, [r7, #0]
 80032aa:	f7fc ffb9 	bl	8000220 <strlen>
 80032ae:	4603      	mov	r3, r0
 80032b0:	461a      	mov	r2, r3
 80032b2:	6839      	ldr	r1, [r7, #0]
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	47a0      	blx	r4
 80032b8:	4603      	mov	r3, r0
 80032ba:	bf00      	nop
    }
 80032bc:	4618      	mov	r0, r3
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd90      	pop	{r4, r7, pc}

080032c4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]
  while (size--) {
 80032d4:	e014      	b.n	8003300 <_ZN5Print5writeEPKhj+0x3c>
    if (write(*buffer++)) n++;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	1c59      	adds	r1, r3, #1
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	4619      	mov	r1, r3
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	4790      	blx	r2
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	bf14      	ite	ne
 80032f0:	2301      	movne	r3, #1
 80032f2:	2300      	moveq	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00d      	beq.n	8003316 <_ZN5Print5writeEPKhj+0x52>
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	3301      	adds	r3, #1
 80032fe:	617b      	str	r3, [r7, #20]
  while (size--) {
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	1e5a      	subs	r2, r3, #1
 8003304:	607a      	str	r2, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	bf14      	ite	ne
 800330a:	2301      	movne	r3, #1
 800330c:	2300      	moveq	r3, #0
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1e0      	bne.n	80032d6 <_ZN5Print5writeEPKhj+0x12>
 8003314:	e000      	b.n	8003318 <_ZN5Print5writeEPKhj+0x54>
    else break;
 8003316:	bf00      	nop
  }
  return n;
 8003318:	697b      	ldr	r3, [r7, #20]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b082      	sub	sp, #8
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
 800332a:	6039      	str	r1, [r7, #0]
  return write(str);
 800332c:	6839      	ldr	r1, [r7, #0]
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7ff ffac 	bl	800328c <_ZN5Print5writeEPKc>
 8003334:	4603      	mov	r3, r0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
	...

08003340 <_ZN13ST7789V_STM32C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_t>:
#include "ST7789V_STM32.h"
#include "spi.h"


ST7789V_STM32::ST7789V_STM32(SPI_HandleTypeDef *hspi, GPIO_TypeDef *cs_port, uint16_t cs_pin,
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
 800334c:	807b      	strh	r3, [r7, #2]
                             GPIO_TypeDef *dc_port, uint16_t dc_pin, GPIO_TypeDef *rst_port, uint16_t rst_pin)
    : Adafruit_GFX(ST7789V_TFTWIDTH, ST7789V_TFTHEIGHT),
      _hspi(hspi), _cs_port(cs_port), _cs_pin(cs_pin),
      _dc_port(dc_port), _dc_pin(dc_pin), _rst_port(rst_port), _rst_pin(rst_pin),
      _inTransaction(false)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003354:	21f0      	movs	r1, #240	@ 0xf0
 8003356:	4618      	mov	r0, r3
 8003358:	f7fe f8ce 	bl	80014f8 <_ZN12Adafruit_GFXC1Ess>
 800335c:	4a17      	ldr	r2, [pc, #92]	@ (80033bc <_ZN13ST7789V_STM32C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_t+0x7c>)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	625a      	str	r2, [r3, #36]	@ 0x24
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	629a      	str	r2, [r3, #40]	@ 0x28
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	631a      	str	r2, [r3, #48]	@ 0x30
      _hspi(hspi), _cs_port(cs_port), _cs_pin(cs_pin),
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	639a      	str	r2, [r3, #56]	@ 0x38
      _dc_port(dc_port), _dc_pin(dc_pin), _rst_port(rst_port), _rst_pin(rst_pin),
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a3a      	ldr	r2, [r7, #32]
 8003390:	641a      	str	r2, [r3, #64]	@ 0x40
      _hspi(hspi), _cs_port(cs_port), _cs_pin(cs_pin),
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	887a      	ldrh	r2, [r7, #2]
 8003396:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      _dc_port(dc_port), _dc_pin(dc_pin), _rst_port(rst_port), _rst_pin(rst_pin),
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8bba      	ldrh	r2, [r7, #28]
 800339e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80033a6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      _inTransaction(false)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
{
}
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	0801ca4c 	.word	0x0801ca4c

080033c0 <_ZN13ST7789V_STM325beginEv>:

void ST7789V_STM32::begin(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  // dmaState = INIT;



  // Hardware reset sequence
  rstHigh();
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 fd0f 	bl	8003dec <_ZN13ST7789V_STM327rstHighEv>
  HAL_Delay(1);
 80033ce:	2001      	movs	r0, #1
 80033d0:	f001 fe15 	bl	8004ffe <HAL_Delay>
  rstLow();
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 fcf8 	bl	8003dca <_ZN13ST7789V_STM326rstLowEv>
  HAL_Delay(10);
 80033da:	200a      	movs	r0, #10
 80033dc:	f001 fe0f 	bl	8004ffe <HAL_Delay>
  rstHigh();
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 fd03 	bl	8003dec <_ZN13ST7789V_STM327rstHighEv>
  HAL_Delay(120);
 80033e6:	2078      	movs	r0, #120	@ 0x78
 80033e8:	f001 fe09 	bl	8004ffe <HAL_Delay>

  csHigh();
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 fcb9 	bl	8003d64 <_ZN13ST7789V_STM326csHighEv>

  // ST7789V initialization sequence (based on your vendor code)
  writeCommand(ST7789V_COLMOD); // 0x3A - Pixel format
 80033f2:	213a      	movs	r1, #58	@ 0x3a
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 fba7 	bl	8003b48 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x05);              // 16-bit color
 80033fa:	2105      	movs	r1, #5
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 fbce 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(ST7789V_MADCTL); // 0x36 - Memory access control
 8003402:	2136      	movs	r1, #54	@ 0x36
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 fb9f 	bl	8003b48 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x00);              // Default orientation
 800340a:	2100      	movs	r1, #0
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 fbc6 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>

  // Frame rate control
  writeCommand(0xB2);
 8003412:	21b2      	movs	r1, #178	@ 0xb2
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 fb97 	bl	8003b48 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x05);
 800341a:	2105      	movs	r1, #5
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 fbbe 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x05);
 8003422:	2105      	movs	r1, #5
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 fbba 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x00);
 800342a:	2100      	movs	r1, #0
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 fbb6 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x33);
 8003432:	2133      	movs	r1, #51	@ 0x33
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 fbb2 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x33);
 800343a:	2133      	movs	r1, #51	@ 0x33
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 fbae 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xB7);
 8003442:	21b7      	movs	r1, #183	@ 0xb7
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 fb7f 	bl	8003b48 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x35);
 800344a:	2135      	movs	r1, #53	@ 0x35
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fba6 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>

  // Power settings
  writeCommand(0xBB); // VCOM
 8003452:	21bb      	movs	r1, #187	@ 0xbb
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 fb77 	bl	8003b48 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x3F);
 800345a:	213f      	movs	r1, #63	@ 0x3f
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 fb9e 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xC0);
 8003462:	21c0      	movs	r1, #192	@ 0xc0
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 fb6f 	bl	8003b48 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x2C);
 800346a:	212c      	movs	r1, #44	@ 0x2c
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 fb96 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xC2);
 8003472:	21c2      	movs	r1, #194	@ 0xc2
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 fb67 	bl	8003b48 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x01);
 800347a:	2101      	movs	r1, #1
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 fb8e 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xC3);
 8003482:	21c3      	movs	r1, #195	@ 0xc3
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 fb5f 	bl	8003b48 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x0F);
 800348a:	210f      	movs	r1, #15
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 fb86 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xC4);
 8003492:	21c4      	movs	r1, #196	@ 0xc4
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 fb57 	bl	8003b48 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x20);
 800349a:	2120      	movs	r1, #32
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 fb7e 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xC6);
 80034a2:	21c6      	movs	r1, #198	@ 0xc6
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 fb4f 	bl	8003b48 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x11);
 80034aa:	2111      	movs	r1, #17
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fb76 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xD0);
 80034b2:	21d0      	movs	r1, #208	@ 0xd0
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 fb47 	bl	8003b48 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0xA4);
 80034ba:	21a4      	movs	r1, #164	@ 0xa4
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 fb6e 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0xA1);
 80034c2:	21a1      	movs	r1, #161	@ 0xa1
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 fb6a 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xE8);
 80034ca:	21e8      	movs	r1, #232	@ 0xe8
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 fb3b 	bl	8003b48 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x03);
 80034d2:	2103      	movs	r1, #3
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 fb62 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xE9);
 80034da:	21e9      	movs	r1, #233	@ 0xe9
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 fb33 	bl	8003b48 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x09);
 80034e2:	2109      	movs	r1, #9
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 fb5a 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x09);
 80034ea:	2109      	movs	r1, #9
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 fb56 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x08);
 80034f2:	2108      	movs	r1, #8
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 fb52 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>

  // Gamma settings
  writeCommand(0xE0);
 80034fa:	21e0      	movs	r1, #224	@ 0xe0
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 fb23 	bl	8003b48 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0xD0);
 8003502:	21d0      	movs	r1, #208	@ 0xd0
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 fb4a 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x05);
 800350a:	2105      	movs	r1, #5
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 fb46 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x09);
 8003512:	2109      	movs	r1, #9
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 fb42 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x09);
 800351a:	2109      	movs	r1, #9
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 fb3e 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x08);
 8003522:	2108      	movs	r1, #8
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 fb3a 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x14);
 800352a:	2114      	movs	r1, #20
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 fb36 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x28);
 8003532:	2128      	movs	r1, #40	@ 0x28
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 fb32 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x33);
 800353a:	2133      	movs	r1, #51	@ 0x33
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fb2e 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x3F);
 8003542:	213f      	movs	r1, #63	@ 0x3f
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 fb2a 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x07);
 800354a:	2107      	movs	r1, #7
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 fb26 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x13);
 8003552:	2113      	movs	r1, #19
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 fb22 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x14);
 800355a:	2114      	movs	r1, #20
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 fb1e 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x28);
 8003562:	2128      	movs	r1, #40	@ 0x28
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 fb1a 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x30);
 800356a:	2130      	movs	r1, #48	@ 0x30
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 fb16 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xE1);
 8003572:	21e1      	movs	r1, #225	@ 0xe1
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 fae7 	bl	8003b48 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0xD0);
 800357a:	21d0      	movs	r1, #208	@ 0xd0
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 fb0e 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x05);
 8003582:	2105      	movs	r1, #5
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 fb0a 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x09);
 800358a:	2109      	movs	r1, #9
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 fb06 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x09);
 8003592:	2109      	movs	r1, #9
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 fb02 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x08);
 800359a:	2108      	movs	r1, #8
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 fafe 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x03);
 80035a2:	2103      	movs	r1, #3
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 fafa 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x24);
 80035aa:	2124      	movs	r1, #36	@ 0x24
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 faf6 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x32);
 80035b2:	2132      	movs	r1, #50	@ 0x32
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 faf2 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x32);
 80035ba:	2132      	movs	r1, #50	@ 0x32
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 faee 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x3B);
 80035c2:	213b      	movs	r1, #59	@ 0x3b
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 faea 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x38);
 80035ca:	2138      	movs	r1, #56	@ 0x38
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 fae6 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x14);
 80035d2:	2114      	movs	r1, #20
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 fae2 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x13);
 80035da:	2113      	movs	r1, #19
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 fade 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x28);
 80035e2:	2128      	movs	r1, #40	@ 0x28
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 fada 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x2F);
 80035ea:	212f      	movs	r1, #47	@ 0x2f
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 fad6 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(ST7789V_INVON); // 0x21 - Inversion on
 80035f2:	2121      	movs	r1, #33	@ 0x21
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 faa7 	bl	8003b48 <_ZN13ST7789V_STM3212writeCommandEh>

  // Set display window
  writeCommand(ST7789V_CASET); // 0x2A - Column address set
 80035fa:	212a      	movs	r1, #42	@ 0x2a
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 faa3 	bl	8003b48 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x00);
 8003602:	2100      	movs	r1, #0
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 faca 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x00);
 800360a:	2100      	movs	r1, #0
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 fac6 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x00);
 8003612:	2100      	movs	r1, #0
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 fac2 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0xEF); // 239 (240-1)
 800361a:	21ef      	movs	r1, #239	@ 0xef
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 fabe 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(ST7789V_RASET); // 0x2B - Row address set
 8003622:	212b      	movs	r1, #43	@ 0x2b
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 fa8f 	bl	8003b48 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x00);
 800362a:	2100      	movs	r1, #0
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 fab6 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x00);
 8003632:	2100      	movs	r1, #0
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 fab2 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x01);
 800363a:	2101      	movs	r1, #1
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 faae 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x3F); // 319 (320-1)
 8003642:	213f      	movs	r1, #63	@ 0x3f
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 faaa 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(ST7789V_SLPOUT); // 0x11 - Exit sleep mode
 800364a:	2111      	movs	r1, #17
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 fa7b 	bl	8003b48 <_ZN13ST7789V_STM3212writeCommandEh>
  HAL_Delay(120);
 8003652:	2078      	movs	r0, #120	@ 0x78
 8003654:	f001 fcd3 	bl	8004ffe <HAL_Delay>

  writeCommand(ST7789V_DISPON); // 0x29 - Display on
 8003658:	2129      	movs	r1, #41	@ 0x29
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 fa74 	bl	8003b48 <_ZN13ST7789V_STM3212writeCommandEh>
  writeCommand(ST7789V_RAMWR);  // 0x2C - Memory write
 8003660:	212c      	movs	r1, #44	@ 0x2c
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fa70 	bl	8003b48 <_ZN13ST7789V_STM3212writeCommandEh>
}
 8003668:	bf00      	nop
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <_ZN13ST7789V_STM329drawPixelEsst>:

void ST7789V_STM32::drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af02      	add	r7, sp, #8
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	4608      	mov	r0, r1
 800367a:	4611      	mov	r1, r2
 800367c:	461a      	mov	r2, r3
 800367e:	4603      	mov	r3, r0
 8003680:	817b      	strh	r3, [r7, #10]
 8003682:	460b      	mov	r3, r1
 8003684:	813b      	strh	r3, [r7, #8]
 8003686:	4613      	mov	r3, r2
 8003688:	80fb      	strh	r3, [r7, #6]
  if ((x < 0) || (x >= _width) || (y < 0) || (y >= _height))
 800368a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800368e:	2b00      	cmp	r3, #0
 8003690:	db20      	blt.n	80036d4 <_ZN13ST7789V_STM329drawPixelEsst+0x64>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003698:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800369c:	429a      	cmp	r2, r3
 800369e:	da19      	bge.n	80036d4 <_ZN13ST7789V_STM329drawPixelEsst+0x64>
 80036a0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	db15      	blt.n	80036d4 <_ZN13ST7789V_STM329drawPixelEsst+0x64>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80036ae:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	da0e      	bge.n	80036d4 <_ZN13ST7789V_STM329drawPixelEsst+0x64>
    return;

  setWindow(x, y, x, y);
 80036b6:	8979      	ldrh	r1, [r7, #10]
 80036b8:	893a      	ldrh	r2, [r7, #8]
 80036ba:	8978      	ldrh	r0, [r7, #10]
 80036bc:	893b      	ldrh	r3, [r7, #8]
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	4603      	mov	r3, r0
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 fabb 	bl	8003c3e <_ZN13ST7789V_STM329setWindowEtttt>
  writeData16(color);
 80036c8:	88fb      	ldrh	r3, [r7, #6]
 80036ca:	4619      	mov	r1, r3
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 fa8e 	bl	8003bee <_ZN13ST7789V_STM3211writeData16Et>
 80036d2:	e000      	b.n	80036d6 <_ZN13ST7789V_STM329drawPixelEsst+0x66>
    return;
 80036d4:	bf00      	nop
}
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <_ZN13ST7789V_STM3210startWriteEv>:

void ST7789V_STM32::startWrite(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  if (!_inTransaction)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80036ea:	f083 0301 	eor.w	r3, r3, #1
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d006      	beq.n	8003702 <_ZN13ST7789V_STM3210startWriteEv+0x26>
  {
    csLow();
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 fb24 	bl	8003d42 <_ZN13ST7789V_STM325csLowEv>
    _inTransaction = true;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
  }
}
 8003702:	bf00      	nop
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <_ZN13ST7789V_STM328endWriteEv>:

void ST7789V_STM32::endWrite(void)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b082      	sub	sp, #8
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  if (_inTransaction)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8003718:	2b00      	cmp	r3, #0
 800371a:	d006      	beq.n	800372a <_ZN13ST7789V_STM328endWriteEv+0x20>
  {
    csHigh();
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 fb21 	bl	8003d64 <_ZN13ST7789V_STM326csHighEv>
    _inTransaction = false;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
  }
}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <_ZN13ST7789V_STM3210writePixelEsst>:

void ST7789V_STM32::writePixel(int16_t x, int16_t y, uint16_t color)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b086      	sub	sp, #24
 8003736:	af02      	add	r7, sp, #8
 8003738:	60f8      	str	r0, [r7, #12]
 800373a:	4608      	mov	r0, r1
 800373c:	4611      	mov	r1, r2
 800373e:	461a      	mov	r2, r3
 8003740:	4603      	mov	r3, r0
 8003742:	817b      	strh	r3, [r7, #10]
 8003744:	460b      	mov	r3, r1
 8003746:	813b      	strh	r3, [r7, #8]
 8003748:	4613      	mov	r3, r2
 800374a:	80fb      	strh	r3, [r7, #6]
  if ((x < 0) || (x >= _width) || (y < 0) || (y >= _height))
 800374c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003750:	2b00      	cmp	r3, #0
 8003752:	db20      	blt.n	8003796 <_ZN13ST7789V_STM3210writePixelEsst+0x64>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800375a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800375e:	429a      	cmp	r2, r3
 8003760:	da19      	bge.n	8003796 <_ZN13ST7789V_STM3210writePixelEsst+0x64>
 8003762:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003766:	2b00      	cmp	r3, #0
 8003768:	db15      	blt.n	8003796 <_ZN13ST7789V_STM3210writePixelEsst+0x64>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003770:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003774:	429a      	cmp	r2, r3
 8003776:	da0e      	bge.n	8003796 <_ZN13ST7789V_STM3210writePixelEsst+0x64>
    return;

  setWindow(x, y, x, y);
 8003778:	8979      	ldrh	r1, [r7, #10]
 800377a:	893a      	ldrh	r2, [r7, #8]
 800377c:	8978      	ldrh	r0, [r7, #10]
 800377e:	893b      	ldrh	r3, [r7, #8]
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	4603      	mov	r3, r0
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 fa5a 	bl	8003c3e <_ZN13ST7789V_STM329setWindowEtttt>
  writeData16(color);
 800378a:	88fb      	ldrh	r3, [r7, #6]
 800378c:	4619      	mov	r1, r3
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 fa2d 	bl	8003bee <_ZN13ST7789V_STM3211writeData16Et>
 8003794:	e000      	b.n	8003798 <_ZN13ST7789V_STM3210writePixelEsst+0x66>
    return;
 8003796:	bf00      	nop
}
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <_ZN13ST7789V_STM3213writeFillRectEsssst>:

void ST7789V_STM32::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b08a      	sub	sp, #40	@ 0x28
 80037a2:	af02      	add	r7, sp, #8
 80037a4:	60f8      	str	r0, [r7, #12]
 80037a6:	4608      	mov	r0, r1
 80037a8:	4611      	mov	r1, r2
 80037aa:	461a      	mov	r2, r3
 80037ac:	4603      	mov	r3, r0
 80037ae:	817b      	strh	r3, [r7, #10]
 80037b0:	460b      	mov	r3, r1
 80037b2:	813b      	strh	r3, [r7, #8]
 80037b4:	4613      	mov	r3, r2
 80037b6:	80fb      	strh	r3, [r7, #6]
  if ((x >= _width) || (y >= _height))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80037be:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	da6c      	bge.n	80038a0 <_ZN13ST7789V_STM3213writeFillRectEsssst+0x102>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80037cc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	da65      	bge.n	80038a0 <_ZN13ST7789V_STM3213writeFillRectEsssst+0x102>
    return;
  int16_t x2 = x + w - 1, y2 = y + h - 1;
 80037d4:	897a      	ldrh	r2, [r7, #10]
 80037d6:	88fb      	ldrh	r3, [r7, #6]
 80037d8:	4413      	add	r3, r2
 80037da:	b29b      	uxth	r3, r3
 80037dc:	3b01      	subs	r3, #1
 80037de:	b29b      	uxth	r3, r3
 80037e0:	83fb      	strh	r3, [r7, #30]
 80037e2:	893a      	ldrh	r2, [r7, #8]
 80037e4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80037e6:	4413      	add	r3, r2
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	3b01      	subs	r3, #1
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	83bb      	strh	r3, [r7, #28]
  if ((x2 < 0) || (y2 < 0))
 80037f0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	db55      	blt.n	80038a4 <_ZN13ST7789V_STM3213writeFillRectEsssst+0x106>
 80037f8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	db51      	blt.n	80038a4 <_ZN13ST7789V_STM3213writeFillRectEsssst+0x106>
    return;

  // Clip to screen bounds
  if (x < 0)
 8003800:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003804:	2b00      	cmp	r3, #0
 8003806:	da01      	bge.n	800380c <_ZN13ST7789V_STM3213writeFillRectEsssst+0x6e>
  {
    x = 0;
 8003808:	2300      	movs	r3, #0
 800380a:	817b      	strh	r3, [r7, #10]
  }
  if (y < 0)
 800380c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003810:	2b00      	cmp	r3, #0
 8003812:	da01      	bge.n	8003818 <_ZN13ST7789V_STM3213writeFillRectEsssst+0x7a>
  {
    y = 0;
 8003814:	2300      	movs	r3, #0
 8003816:	813b      	strh	r3, [r7, #8]
  }
  if (x2 >= _width)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800381e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8003822:	429a      	cmp	r2, r3
 8003824:	db06      	blt.n	8003834 <_ZN13ST7789V_STM3213writeFillRectEsssst+0x96>
  {
    x2 = _width - 1;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800382c:	b29b      	uxth	r3, r3
 800382e:	3b01      	subs	r3, #1
 8003830:	b29b      	uxth	r3, r3
 8003832:	83fb      	strh	r3, [r7, #30]
  }
  if (y2 >= _height)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800383a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800383e:	429a      	cmp	r2, r3
 8003840:	db06      	blt.n	8003850 <_ZN13ST7789V_STM3213writeFillRectEsssst+0xb2>
  {
    y2 = _height - 1;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003848:	b29b      	uxth	r3, r3
 800384a:	3b01      	subs	r3, #1
 800384c:	b29b      	uxth	r3, r3
 800384e:	83bb      	strh	r3, [r7, #28]
  }

  setWindow(x, y, x2, y2);
 8003850:	8979      	ldrh	r1, [r7, #10]
 8003852:	893a      	ldrh	r2, [r7, #8]
 8003854:	8bf8      	ldrh	r0, [r7, #30]
 8003856:	8bbb      	ldrh	r3, [r7, #28]
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	4603      	mov	r3, r0
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 f9ee 	bl	8003c3e <_ZN13ST7789V_STM329setWindowEtttt>
  uint32_t pixels = (x2 - x + 1) * (y2 - y + 1);
 8003862:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8003866:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	3301      	adds	r3, #1
 800386e:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8003872:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003876:	1a8a      	subs	r2, r1, r2
 8003878:	3201      	adds	r2, #1
 800387a:	fb02 f303 	mul.w	r3, r2, r3
 800387e:	617b      	str	r3, [r7, #20]

  for (uint32_t i = 0; i < pixels; i++)
 8003880:	2300      	movs	r3, #0
 8003882:	61bb      	str	r3, [r7, #24]
 8003884:	e007      	b.n	8003896 <_ZN13ST7789V_STM3213writeFillRectEsssst+0xf8>
  {
    writeData16(color);
 8003886:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003888:	4619      	mov	r1, r3
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 f9af 	bl	8003bee <_ZN13ST7789V_STM3211writeData16Et>
  for (uint32_t i = 0; i < pixels; i++)
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	3301      	adds	r3, #1
 8003894:	61bb      	str	r3, [r7, #24]
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	429a      	cmp	r2, r3
 800389c:	d3f3      	bcc.n	8003886 <_ZN13ST7789V_STM3213writeFillRectEsssst+0xe8>
 800389e:	e002      	b.n	80038a6 <_ZN13ST7789V_STM3213writeFillRectEsssst+0x108>
    return;
 80038a0:	bf00      	nop
 80038a2:	e000      	b.n	80038a6 <_ZN13ST7789V_STM3213writeFillRectEsssst+0x108>
    return;
 80038a4:	bf00      	nop
  }
}
 80038a6:	3720      	adds	r7, #32
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <_ZN13ST7789V_STM3210fillScreenEt>:

void ST7789V_STM32::fillScreen(uint16_t color)
{
 80038ac:	b590      	push	{r4, r7, lr}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af02      	add	r7, sp, #8
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	807b      	strh	r3, [r7, #2]
  writeFillRect(0, 0, _width, _height, color);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	331c      	adds	r3, #28
 80038be:	681c      	ldr	r4, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80038cc:	887a      	ldrh	r2, [r7, #2]
 80038ce:	9201      	str	r2, [sp, #4]
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	460b      	mov	r3, r1
 80038d4:	2200      	movs	r2, #0
 80038d6:	2100      	movs	r1, #0
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	47a0      	blx	r4
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd90      	pop	{r4, r7, pc}

080038e4 <_ZN13ST7789V_STM328fillRectEsssst>:

void ST7789V_STM32::fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80038e4:	b590      	push	{r4, r7, lr}
 80038e6:	b087      	sub	sp, #28
 80038e8:	af02      	add	r7, sp, #8
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	4608      	mov	r0, r1
 80038ee:	4611      	mov	r1, r2
 80038f0:	461a      	mov	r2, r3
 80038f2:	4603      	mov	r3, r0
 80038f4:	817b      	strh	r3, [r7, #10]
 80038f6:	460b      	mov	r3, r1
 80038f8:	813b      	strh	r3, [r7, #8]
 80038fa:	4613      	mov	r3, r2
 80038fc:	80fb      	strh	r3, [r7, #6]
  startWrite();
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	3314      	adds	r3, #20
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	4798      	blx	r3
  writeFillRect(x, y, w, h, color);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	331c      	adds	r3, #28
 8003910:	681c      	ldr	r4, [r3, #0]
 8003912:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003916:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800391a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800391e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003920:	9301      	str	r3, [sp, #4]
 8003922:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	4603      	mov	r3, r0
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	47a0      	blx	r4
  endWrite();
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	332c      	adds	r3, #44	@ 0x2c
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	4798      	blx	r3
}
 800393a:	bf00      	nop
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	bd90      	pop	{r4, r7, pc}

08003942 <_ZN13ST7789V_STM3213drawFastVLineEssst>:

void ST7789V_STM32::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8003942:	b590      	push	{r4, r7, lr}
 8003944:	b087      	sub	sp, #28
 8003946:	af02      	add	r7, sp, #8
 8003948:	60f8      	str	r0, [r7, #12]
 800394a:	4608      	mov	r0, r1
 800394c:	4611      	mov	r1, r2
 800394e:	461a      	mov	r2, r3
 8003950:	4603      	mov	r3, r0
 8003952:	817b      	strh	r3, [r7, #10]
 8003954:	460b      	mov	r3, r1
 8003956:	813b      	strh	r3, [r7, #8]
 8003958:	4613      	mov	r3, r2
 800395a:	80fb      	strh	r3, [r7, #6]
  startWrite();
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	3314      	adds	r3, #20
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	4798      	blx	r3
  writeFillRect(x, y, 1, h, color);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	331c      	adds	r3, #28
 800396e:	681c      	ldr	r4, [r3, #0]
 8003970:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003974:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003978:	8c3b      	ldrh	r3, [r7, #32]
 800397a:	9301      	str	r3, [sp, #4]
 800397c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	2301      	movs	r3, #1
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	47a0      	blx	r4
  endWrite();
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	332c      	adds	r3, #44	@ 0x2c
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	4798      	blx	r3
}
 8003994:	bf00      	nop
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	bd90      	pop	{r4, r7, pc}

0800399c <_ZN13ST7789V_STM3214writeFastVLineEssst>:

void ST7789V_STM32::writeFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 800399c:	b590      	push	{r4, r7, lr}
 800399e:	b087      	sub	sp, #28
 80039a0:	af02      	add	r7, sp, #8
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	4608      	mov	r0, r1
 80039a6:	4611      	mov	r1, r2
 80039a8:	461a      	mov	r2, r3
 80039aa:	4603      	mov	r3, r0
 80039ac:	817b      	strh	r3, [r7, #10]
 80039ae:	460b      	mov	r3, r1
 80039b0:	813b      	strh	r3, [r7, #8]
 80039b2:	4613      	mov	r3, r2
 80039b4:	80fb      	strh	r3, [r7, #6]
  writeFillRect(x, y, 1, h, color);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	331c      	adds	r3, #28
 80039bc:	681c      	ldr	r4, [r3, #0]
 80039be:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80039c2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80039c6:	8c3b      	ldrh	r3, [r7, #32]
 80039c8:	9301      	str	r3, [sp, #4]
 80039ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	2301      	movs	r3, #1
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	47a0      	blx	r4
}
 80039d6:	bf00      	nop
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd90      	pop	{r4, r7, pc}

080039de <_ZN13ST7789V_STM3213drawFastHLineEssst>:

void ST7789V_STM32::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 80039de:	b590      	push	{r4, r7, lr}
 80039e0:	b087      	sub	sp, #28
 80039e2:	af02      	add	r7, sp, #8
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	4608      	mov	r0, r1
 80039e8:	4611      	mov	r1, r2
 80039ea:	461a      	mov	r2, r3
 80039ec:	4603      	mov	r3, r0
 80039ee:	817b      	strh	r3, [r7, #10]
 80039f0:	460b      	mov	r3, r1
 80039f2:	813b      	strh	r3, [r7, #8]
 80039f4:	4613      	mov	r3, r2
 80039f6:	80fb      	strh	r3, [r7, #6]
  startWrite();
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3314      	adds	r3, #20
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	4798      	blx	r3
  writeFillRect(x, y, w, 1, color);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	331c      	adds	r3, #28
 8003a0a:	681c      	ldr	r4, [r3, #0]
 8003a0c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003a10:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003a14:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003a18:	8c3b      	ldrh	r3, [r7, #32]
 8003a1a:	9301      	str	r3, [sp, #4]
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	9300      	str	r3, [sp, #0]
 8003a20:	4603      	mov	r3, r0
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	47a0      	blx	r4
  endWrite();
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	332c      	adds	r3, #44	@ 0x2c
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	4798      	blx	r3
}
 8003a32:	bf00      	nop
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd90      	pop	{r4, r7, pc}

08003a3a <_ZN13ST7789V_STM3214writeFastHLineEssst>:

void ST7789V_STM32::writeFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8003a3a:	b590      	push	{r4, r7, lr}
 8003a3c:	b087      	sub	sp, #28
 8003a3e:	af02      	add	r7, sp, #8
 8003a40:	60f8      	str	r0, [r7, #12]
 8003a42:	4608      	mov	r0, r1
 8003a44:	4611      	mov	r1, r2
 8003a46:	461a      	mov	r2, r3
 8003a48:	4603      	mov	r3, r0
 8003a4a:	817b      	strh	r3, [r7, #10]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	813b      	strh	r3, [r7, #8]
 8003a50:	4613      	mov	r3, r2
 8003a52:	80fb      	strh	r3, [r7, #6]
  writeFillRect(x, y, w, 1, color);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	331c      	adds	r3, #28
 8003a5a:	681c      	ldr	r4, [r3, #0]
 8003a5c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003a60:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003a64:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003a68:	8c3b      	ldrh	r3, [r7, #32]
 8003a6a:	9301      	str	r3, [sp, #4]
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	4603      	mov	r3, r0
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	47a0      	blx	r4
}
 8003a76:	bf00      	nop
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd90      	pop	{r4, r7, pc}
	...

08003a80 <_ZN13ST7789V_STM3211setRotationEh>:

void ST7789V_STM32::setRotation(uint8_t rotation)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	70fb      	strb	r3, [r7, #3]
  writeCommand(ST7789V_MADCTL);
 8003a8c:	2136      	movs	r1, #54	@ 0x36
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f85a 	bl	8003b48 <_ZN13ST7789V_STM3212writeCommandEh>
  rotation = rotation % 4;
 8003a94:	78fb      	ldrb	r3, [r7, #3]
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	70fb      	strb	r3, [r7, #3]

  switch (rotation)
 8003a9c:	78fb      	ldrb	r3, [r7, #3]
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d83a      	bhi.n	8003b18 <_ZN13ST7789V_STM3211setRotationEh+0x98>
 8003aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8003aa8 <_ZN13ST7789V_STM3211setRotationEh+0x28>)
 8003aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa8:	08003ab9 	.word	0x08003ab9
 8003aac:	08003ad1 	.word	0x08003ad1
 8003ab0:	08003ae9 	.word	0x08003ae9
 8003ab4:	08003b01 	.word	0x08003b01
  {
  case 0:
    writeData(0x00);
 8003ab8:	2100      	movs	r1, #0
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f86f 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
    _width = ST7789V_TFTWIDTH;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	22f0      	movs	r2, #240	@ 0xf0
 8003ac4:	819a      	strh	r2, [r3, #12]
    _height = ST7789V_TFTHEIGHT;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003acc:	81da      	strh	r2, [r3, #14]
    break;
 8003ace:	e023      	b.n	8003b18 <_ZN13ST7789V_STM3211setRotationEh+0x98>
  case 1:
    writeData(0x60);
 8003ad0:	2160      	movs	r1, #96	@ 0x60
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f863 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
    _width = ST7789V_TFTHEIGHT;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003ade:	819a      	strh	r2, [r3, #12]
    _height = ST7789V_TFTWIDTH;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	22f0      	movs	r2, #240	@ 0xf0
 8003ae4:	81da      	strh	r2, [r3, #14]
    break;
 8003ae6:	e017      	b.n	8003b18 <_ZN13ST7789V_STM3211setRotationEh+0x98>
  case 2:
    writeData(0xC0);
 8003ae8:	21c0      	movs	r1, #192	@ 0xc0
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f857 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
    _width = ST7789V_TFTWIDTH;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	22f0      	movs	r2, #240	@ 0xf0
 8003af4:	819a      	strh	r2, [r3, #12]
    _height = ST7789V_TFTHEIGHT;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003afc:	81da      	strh	r2, [r3, #14]
    break;
 8003afe:	e00b      	b.n	8003b18 <_ZN13ST7789V_STM3211setRotationEh+0x98>
  case 3:
    writeData(0xA0);
 8003b00:	21a0      	movs	r1, #160	@ 0xa0
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f84b 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
    _width = ST7789V_TFTHEIGHT;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003b0e:	819a      	strh	r2, [r3, #12]
    _height = ST7789V_TFTWIDTH;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	22f0      	movs	r2, #240	@ 0xf0
 8003b14:	81da      	strh	r2, [r3, #14]
    break;
 8003b16:	bf00      	nop
  }
}
 8003b18:	bf00      	nop
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <_ZN13ST7789V_STM3213invertDisplayEb>:

void ST7789V_STM32::invertDisplay(bool invert)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	70fb      	strb	r3, [r7, #3]
  writeCommand(invert ? ST7789V_INVON : ST7789V_INVOFF);
 8003b2c:	78fb      	ldrb	r3, [r7, #3]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <_ZN13ST7789V_STM3213invertDisplayEb+0x16>
 8003b32:	2321      	movs	r3, #33	@ 0x21
 8003b34:	e000      	b.n	8003b38 <_ZN13ST7789V_STM3213invertDisplayEb+0x18>
 8003b36:	2320      	movs	r3, #32
 8003b38:	4619      	mov	r1, r3
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f804 	bl	8003b48 <_ZN13ST7789V_STM3212writeCommandEh>
}
 8003b40:	bf00      	nop
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <_ZN13ST7789V_STM3212writeCommandEh>:
  writeCommand(ST7789V_DISPON);
}

// Private methods
void ST7789V_STM32::writeCommand(uint8_t cmd)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	460b      	mov	r3, r1
 8003b52:	70fb      	strb	r3, [r7, #3]
  if (!_inTransaction)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8003b5a:	f083 0301 	eor.w	r3, r3, #1
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d002      	beq.n	8003b6a <_ZN13ST7789V_STM3212writeCommandEh+0x22>
    csLow();
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 f8ec 	bl	8003d42 <_ZN13ST7789V_STM325csLowEv>
  dcLow();
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f90b 	bl	8003d86 <_ZN13ST7789V_STM325dcLowEv>
  spiWrite(cmd);
 8003b70:	78fb      	ldrb	r3, [r7, #3]
 8003b72:	4619      	mov	r1, r3
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f8b7 	bl	8003ce8 <_ZN13ST7789V_STM328spiWriteEh>
  dcHigh();
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f914 	bl	8003da8 <_ZN13ST7789V_STM326dcHighEv>
  if (!_inTransaction)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8003b86:	f083 0301 	eor.w	r3, r3, #1
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d002      	beq.n	8003b96 <_ZN13ST7789V_STM3212writeCommandEh+0x4e>
    csHigh();
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f8e7 	bl	8003d64 <_ZN13ST7789V_STM326csHighEv>
}
 8003b96:	bf00      	nop
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <_ZN13ST7789V_STM329writeDataEh>:

void ST7789V_STM32::writeData(uint8_t data)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b082      	sub	sp, #8
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	70fb      	strb	r3, [r7, #3]
  if (!_inTransaction)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8003bb0:	f083 0301 	eor.w	r3, r3, #1
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d002      	beq.n	8003bc0 <_ZN13ST7789V_STM329writeDataEh+0x22>
    csLow();
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f8c1 	bl	8003d42 <_ZN13ST7789V_STM325csLowEv>
  dcHigh();
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f8f1 	bl	8003da8 <_ZN13ST7789V_STM326dcHighEv>
  spiWrite(data);
 8003bc6:	78fb      	ldrb	r3, [r7, #3]
 8003bc8:	4619      	mov	r1, r3
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f88c 	bl	8003ce8 <_ZN13ST7789V_STM328spiWriteEh>
  if (!_inTransaction)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8003bd6:	f083 0301 	eor.w	r3, r3, #1
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <_ZN13ST7789V_STM329writeDataEh+0x48>
    csHigh();
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f8bf 	bl	8003d64 <_ZN13ST7789V_STM326csHighEv>
}
 8003be6:	bf00      	nop
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <_ZN13ST7789V_STM3211writeData16Et>:

void ST7789V_STM32::writeData16(uint16_t data)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b082      	sub	sp, #8
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	807b      	strh	r3, [r7, #2]
  if (!_inTransaction)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8003c00:	f083 0301 	eor.w	r3, r3, #1
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <_ZN13ST7789V_STM3211writeData16Et+0x22>
    csLow();
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f899 	bl	8003d42 <_ZN13ST7789V_STM325csLowEv>
  dcHigh();
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f8c9 	bl	8003da8 <_ZN13ST7789V_STM326dcHighEv>
  spiWrite16(data);
 8003c16:	887b      	ldrh	r3, [r7, #2]
 8003c18:	4619      	mov	r1, r3
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f876 	bl	8003d0c <_ZN13ST7789V_STM3210spiWrite16Et>
  if (!_inTransaction)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8003c26:	f083 0301 	eor.w	r3, r3, #1
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <_ZN13ST7789V_STM3211writeData16Et+0x48>
    csHigh();
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f897 	bl	8003d64 <_ZN13ST7789V_STM326csHighEv>
}
 8003c36:	bf00      	nop
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <_ZN13ST7789V_STM329setWindowEtttt>:

void ST7789V_STM32::setWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b084      	sub	sp, #16
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	60f8      	str	r0, [r7, #12]
 8003c46:	4608      	mov	r0, r1
 8003c48:	4611      	mov	r1, r2
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	817b      	strh	r3, [r7, #10]
 8003c50:	460b      	mov	r3, r1
 8003c52:	813b      	strh	r3, [r7, #8]
 8003c54:	4613      	mov	r3, r2
 8003c56:	80fb      	strh	r3, [r7, #6]
  writeCommand(ST7789V_CASET);
 8003c58:	212a      	movs	r1, #42	@ 0x2a
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f7ff ff74 	bl	8003b48 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(x0 >> 8);
 8003c60:	897b      	ldrh	r3, [r7, #10]
 8003c62:	0a1b      	lsrs	r3, r3, #8
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	4619      	mov	r1, r3
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f7ff ff97 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(x0 & 0xFF);
 8003c70:	897b      	ldrh	r3, [r7, #10]
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	4619      	mov	r1, r3
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f7ff ff91 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(x1 >> 8);
 8003c7c:	88fb      	ldrh	r3, [r7, #6]
 8003c7e:	0a1b      	lsrs	r3, r3, #8
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	4619      	mov	r1, r3
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f7ff ff89 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(x1 & 0xFF);
 8003c8c:	88fb      	ldrh	r3, [r7, #6]
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	4619      	mov	r1, r3
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f7ff ff83 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeCommand(ST7789V_RASET);
 8003c98:	212b      	movs	r1, #43	@ 0x2b
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f7ff ff54 	bl	8003b48 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(y0 >> 8);
 8003ca0:	893b      	ldrh	r3, [r7, #8]
 8003ca2:	0a1b      	lsrs	r3, r3, #8
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	4619      	mov	r1, r3
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f7ff ff77 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(y0 & 0xFF);
 8003cb0:	893b      	ldrh	r3, [r7, #8]
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f7ff ff71 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(y1 >> 8);
 8003cbc:	8b3b      	ldrh	r3, [r7, #24]
 8003cbe:	0a1b      	lsrs	r3, r3, #8
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f7ff ff69 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeData(y1 & 0xFF);
 8003ccc:	8b3b      	ldrh	r3, [r7, #24]
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f7ff ff63 	bl	8003b9e <_ZN13ST7789V_STM329writeDataEh>
  writeCommand(ST7789V_RAMWR);
 8003cd8:	212c      	movs	r1, #44	@ 0x2c
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f7ff ff34 	bl	8003b48 <_ZN13ST7789V_STM3212writeCommandEh>
}
 8003ce0:	bf00      	nop
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <_ZN13ST7789V_STM328spiWriteEh>:

void ST7789V_STM32::spiWrite(uint8_t data)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(_hspi, &data, 1, HAL_MAX_DELAY);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003cf8:	1cf9      	adds	r1, r7, #3
 8003cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f009 f913 	bl	800cf2a <HAL_SPI_Transmit>
}
 8003d04:	bf00      	nop
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <_ZN13ST7789V_STM3210spiWrite16Et>:

void ST7789V_STM32::spiWrite16(uint16_t data)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	807b      	strh	r3, [r7, #2]
  uint8_t buffer[2];
  buffer[0] = data >> 8;   // MSB first
 8003d18:	887b      	ldrh	r3, [r7, #2]
 8003d1a:	0a1b      	lsrs	r3, r3, #8
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	733b      	strb	r3, [r7, #12]
  buffer[1] = data & 0xFF; // LSB second
 8003d22:	887b      	ldrh	r3, [r7, #2]
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	737b      	strb	r3, [r7, #13]
  HAL_SPI_Transmit(_hspi, buffer, 2, HAL_MAX_DELAY);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003d2c:	f107 010c 	add.w	r1, r7, #12
 8003d30:	f04f 33ff 	mov.w	r3, #4294967295
 8003d34:	2202      	movs	r2, #2
 8003d36:	f009 f8f8 	bl	800cf2a <HAL_SPI_Transmit>
}
 8003d3a:	bf00      	nop
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <_ZN13ST7789V_STM325csLowEv>:

// GPIO control functions
void ST7789V_STM32::csLow(void)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b082      	sub	sp, #8
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(_cs_port, _cs_pin, GPIO_PIN_RESET);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d54:	2200      	movs	r2, #0
 8003d56:	4619      	mov	r1, r3
 8003d58:	f004 f9f6 	bl	8008148 <HAL_GPIO_WritePin>
}
 8003d5c:	bf00      	nop
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <_ZN13ST7789V_STM326csHighEv>:

void ST7789V_STM32::csHigh(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(_cs_port, _cs_pin, GPIO_PIN_SET);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d76:	2201      	movs	r2, #1
 8003d78:	4619      	mov	r1, r3
 8003d7a:	f004 f9e5 	bl	8008148 <HAL_GPIO_WritePin>
}
 8003d7e:	bf00      	nop
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <_ZN13ST7789V_STM325dcLowEv>:

void ST7789V_STM32::dcLow(void)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b082      	sub	sp, #8
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(_dc_port, _dc_pin, GPIO_PIN_RESET);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d98:	2200      	movs	r2, #0
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	f004 f9d4 	bl	8008148 <HAL_GPIO_WritePin>
}
 8003da0:	bf00      	nop
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <_ZN13ST7789V_STM326dcHighEv>:

void ST7789V_STM32::dcHigh(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(_dc_port, _dc_pin, GPIO_PIN_SET);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003dba:	2201      	movs	r2, #1
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	f004 f9c3 	bl	8008148 <HAL_GPIO_WritePin>
}
 8003dc2:	bf00      	nop
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <_ZN13ST7789V_STM326rstLowEv>:

void ST7789V_STM32::rstLow(void)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b082      	sub	sp, #8
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(_rst_port, _rst_pin, GPIO_PIN_RESET);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8003ddc:	2200      	movs	r2, #0
 8003dde:	4619      	mov	r1, r3
 8003de0:	f004 f9b2 	bl	8008148 <HAL_GPIO_WritePin>
}
 8003de4:	bf00      	nop
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <_ZN13ST7789V_STM327rstHighEv>:

void ST7789V_STM32::rstHigh(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(_rst_port, _rst_pin, GPIO_PIN_SET);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8003dfe:	2201      	movs	r2, #1
 8003e00:	4619      	mov	r1, r3
 8003e02:	f004 f9a1 	bl	8008148 <HAL_GPIO_WritePin>
}
 8003e06:	bf00      	nop
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <_ZN13ST7789V_STM3214writeBufferDMAEPtm>:
  if (!_inTransaction)
    csHigh();
}

void ST7789V_STM32::writeBufferDMA(uint16_t *buffer, uint32_t len)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b086      	sub	sp, #24
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	60f8      	str	r0, [r7, #12]
 8003e16:	60b9      	str	r1, [r7, #8]
 8003e18:	607a      	str	r2, [r7, #4]
    // Don't start new transfer if one is already in progress
    if (_dmaState.isActive) {
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d14c      	bne.n	8003ebe <_ZN13ST7789V_STM3214writeBufferDMAEPtm+0xb0>
        return; // Or handle this error condition as needed
    }

    if (!_inTransaction)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8003e2a:	f083 0301 	eor.w	r3, r3, #1
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <_ZN13ST7789V_STM3214writeBufferDMAEPtm+0x2c>
        csLow();
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f7ff ff84 	bl	8003d42 <_ZN13ST7789V_STM325csLowEv>
    dcHigh();
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f7ff ffb4 	bl	8003da8 <_ZN13ST7789V_STM326dcHighEv>

    // Initialize DMA transfer state
    _dmaState.buffer = (uint8_t *)buffer;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	64da      	str	r2, [r3, #76]	@ 0x4c
    _dmaState.totalBytes = len * 2; // Convert 16-bit length to bytes
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	005a      	lsls	r2, r3, #1
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	651a      	str	r2, [r3, #80]	@ 0x50
    _dmaState.bytesTransferred = 0;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	655a      	str	r2, [r3, #84]	@ 0x54
    _dmaState.isActive = true;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    _dmaTransferComplete = false;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

    // Start first chunk
    uint32_t firstChunk = (_dmaState.totalBytes > MAX_DMA_CHUNK) ?
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e6c:	d203      	bcs.n	8003e76 <_ZN13ST7789V_STM3214writeBufferDMAEPtm+0x68>
                         MAX_DMA_CHUNK : _dmaState.totalBytes;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	3350      	adds	r3, #80	@ 0x50
    uint32_t firstChunk = (_dmaState.totalBytes > MAX_DMA_CHUNK) ?
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	e001      	b.n	8003e7a <_ZN13ST7789V_STM3214writeBufferDMAEPtm+0x6c>
 8003e76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e7a:	617b      	str	r3, [r7, #20]

    _dmaState.currentChunkSize = firstChunk;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	659a      	str	r2, [r3, #88]	@ 0x58

    // Start DMA transfer
    HAL_StatusTypeDef status = HAL_SPI_Transmit_DMA(_hspi, _dmaState.buffer, firstChunk);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	b292      	uxth	r2, r2
 8003e8e:	4619      	mov	r1, r3
 8003e90:	f009 fbe0 	bl	800d654 <HAL_SPI_Transmit_DMA>
 8003e94:	4603      	mov	r3, r0
 8003e96:	74fb      	strb	r3, [r7, #19]

    if (status != HAL_OK) {
 8003e98:	7cfb      	ldrb	r3, [r7, #19]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d010      	beq.n	8003ec0 <_ZN13ST7789V_STM3214writeBufferDMAEPtm+0xb2>
        // Handle error - fall back to blocking mode or return error
        _dmaState.isActive = false;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        if (!_inTransaction)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8003eac:	f083 0301 	eor.w	r3, r3, #1
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d004      	beq.n	8003ec0 <_ZN13ST7789V_STM3214writeBufferDMAEPtm+0xb2>
            csHigh();
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f7ff ff54 	bl	8003d64 <_ZN13ST7789V_STM326csHighEv>
 8003ebc:	e000      	b.n	8003ec0 <_ZN13ST7789V_STM3214writeBufferDMAEPtm+0xb2>
        return; // Or handle this error condition as needed
 8003ebe:	bf00      	nop
    }
}
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <_ZN13ST7789V_STM3227dmaTransferCompleteCallbackEv>:

void ST7789V_STM32::dmaTransferCompleteCallback()
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b086      	sub	sp, #24
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
    _dmaState.bytesTransferred += _dmaState.currentChunkSize;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed6:	441a      	add	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	655a      	str	r2, [r3, #84]	@ 0x54

    // Check if there are more chunks to send
    if (_dmaState.bytesTransferred < _dmaState.totalBytes) {
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d238      	bcs.n	8003f5a <_ZN13ST7789V_STM3227dmaTransferCompleteCallbackEv+0x94>
        // Calculate next chunk size
        uint32_t remaining = _dmaState.totalBytes - _dmaState.bytesTransferred;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	60fb      	str	r3, [r7, #12]
        uint32_t nextChunk = (remaining > MAX_DMA_CHUNK) ? MAX_DMA_CHUNK : remaining;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003efa:	d203      	bcs.n	8003f04 <_ZN13ST7789V_STM3227dmaTransferCompleteCallbackEv+0x3e>
 8003efc:	f107 030c 	add.w	r3, r7, #12
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	e001      	b.n	8003f08 <_ZN13ST7789V_STM3227dmaTransferCompleteCallbackEv+0x42>
 8003f04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f08:	617b      	str	r3, [r7, #20]

        _dmaState.currentChunkSize = nextChunk;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	659a      	str	r2, [r3, #88]	@ 0x58

        // Start next chunk
        HAL_StatusTypeDef status = HAL_SPI_Transmit_DMA(_hspi,
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b58      	ldr	r0, [r3, #52]	@ 0x34
                                                       _dmaState.buffer + _dmaState.bytesTransferred,
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f1c:	4413      	add	r3, r2
        HAL_StatusTypeDef status = HAL_SPI_Transmit_DMA(_hspi,
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	b292      	uxth	r2, r2
 8003f22:	4619      	mov	r1, r3
 8003f24:	f009 fb96 	bl	800d654 <HAL_SPI_Transmit_DMA>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	74fb      	strb	r3, [r7, #19]
                                                       nextChunk);

        if (status != HAL_OK) {
 8003f2c:	7cfb      	ldrb	r3, [r7, #19]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d026      	beq.n	8003f80 <_ZN13ST7789V_STM3227dmaTransferCompleteCallbackEv+0xba>
            // Handle error
            _dmaState.isActive = false;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
            _dmaTransferComplete = true;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
            if (!_inTransaction)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8003f48:	f083 0301 	eor.w	r3, r3, #1
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d016      	beq.n	8003f80 <_ZN13ST7789V_STM3227dmaTransferCompleteCallbackEv+0xba>
                csHigh();
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7ff ff06 	bl	8003d64 <_ZN13ST7789V_STM326csHighEv>
        _dmaTransferComplete = true;

        if (!_inTransaction)
            csHigh();
    }
}
 8003f58:	e012      	b.n	8003f80 <_ZN13ST7789V_STM3227dmaTransferCompleteCallbackEv+0xba>
        _dmaState.isActive = false;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        _dmaTransferComplete = true;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
        if (!_inTransaction)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8003f70:	f083 0301 	eor.w	r3, r3, #1
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d002      	beq.n	8003f80 <_ZN13ST7789V_STM3227dmaTransferCompleteCallbackEv+0xba>
            csHigh();
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7ff fef2 	bl	8003d64 <_ZN13ST7789V_STM326csHighEv>
}
 8003f80:	bf00      	nop
 8003f82:	3718      	adds	r7, #24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <_ZN17Adafruit_MAX31856C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:
    @param  hspi Pointer to SPI handle
    @param  cs_port GPIO port for chip select
    @param  cs_pin GPIO pin for chip select
*/
/**************************************************************************/
Adafruit_MAX31856::Adafruit_MAX31856(SPI_HandleTypeDef *hspi, GPIO_TypeDef *cs_port, uint16_t cs_pin)
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	807b      	strh	r3, [r7, #2]
{
  _hspi = hspi;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	601a      	str	r2, [r3, #0]
  _cs_port = cs_port;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	605a      	str	r2, [r3, #4]
  _cs_pin = cs_pin;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	887a      	ldrh	r2, [r7, #2]
 8003fa6:	811a      	strh	r2, [r3, #8]
}
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4618      	mov	r0, r3
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <_ZN17Adafruit_MAX31856C1Ev>:

Adafruit_MAX31856::Adafruit_MAX31856()
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
{
  _hspi = nullptr;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	601a      	str	r2, [r3, #0]
  _cs_port = nullptr;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	605a      	str	r2, [r3, #4]
  _cs_pin = 0;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	811a      	strh	r2, [r3, #8]
}
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <_ZN17Adafruit_MAX318565beginEv>:
    @brief  Initialize MAX31856 with STM32 HAL
    @returns Always returns true at this time
*/
/**************************************************************************/
bool Adafruit_MAX31856::begin(void)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b082      	sub	sp, #8
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  // Set CS pin high initially
  csHigh();
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f8f9 	bl	80041de <_ZN17Adafruit_MAX318566csHighEv>

  // Small delay for chip to stabilize
  HAL_Delay(100);
 8003fec:	2064      	movs	r0, #100	@ 0x64
 8003fee:	f001 f806 	bl	8004ffe <HAL_Delay>

  // assert on any fault
  writeRegister8(MAX31856_MASK_REG, 0x0);
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	2102      	movs	r1, #2
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f9d5 	bl	80043a6 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>

  // enable open circuit fault detection
  writeRegister8(MAX31856_CR0_REG, MAX31856_CR0_OCFAULT0);
 8003ffc:	2210      	movs	r2, #16
 8003ffe:	2100      	movs	r1, #0
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f9d0 	bl	80043a6 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>

  // set cold junction temperature offset to zero
  writeRegister8(MAX31856_CJTO_REG, 0x0);
 8004006:	2200      	movs	r2, #0
 8004008:	2109      	movs	r1, #9
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f9cb 	bl	80043a6 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>

  // set Type K by default
  setThermocoupleType(MAX31856_TCTYPE_K);
 8004010:	2103      	movs	r1, #3
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f837 	bl	8004086 <_ZN17Adafruit_MAX3185619setThermocoupleTypeE27max31856_thermocoupletype_t>

  // set One-Shot conversion mode
  setConversionMode(MAX31856_CONTINUOUS);
 8004018:	2101      	movs	r1, #1
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f805 	bl	800402a <_ZN17Adafruit_MAX3185617setConversionModeE26max31856_conversion_mode_t>

  return true;
 8004020:	2301      	movs	r3, #1
}
 8004022:	4618      	mov	r0, r3
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <_ZN17Adafruit_MAX3185617setConversionModeE26max31856_conversion_mode_t>:
    @brief  Set temperature conversion mode
    @param mode The conversion mode
*/
/**************************************************************************/
void Adafruit_MAX31856::setConversionMode(max31856_conversion_mode_t mode)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b084      	sub	sp, #16
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
 8004032:	460b      	mov	r3, r1
 8004034:	70fb      	strb	r3, [r7, #3]
  conversionMode = mode;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	78fa      	ldrb	r2, [r7, #3]
 800403a:	729a      	strb	r2, [r3, #10]
  uint8_t t = readRegister8(MAX31856_CR0_REG); // get current register value
 800403c:	2100      	movs	r1, #0
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f8dd 	bl	80041fe <_ZN17Adafruit_MAX3185613readRegister8Eh>
 8004044:	4603      	mov	r3, r0
 8004046:	73fb      	strb	r3, [r7, #15]
  if (conversionMode == MAX31856_CONTINUOUS)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	7a9b      	ldrb	r3, [r3, #10]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d108      	bne.n	8004062 <_ZN17Adafruit_MAX3185617setConversionModeE26max31856_conversion_mode_t+0x38>
  {
    t |= MAX31856_CR0_AUTOCONVERT; // turn on automatic
 8004050:	7bfb      	ldrb	r3, [r7, #15]
 8004052:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004056:	73fb      	strb	r3, [r7, #15]
    t &= ~MAX31856_CR0_1SHOT;      // turn off one-shot
 8004058:	7bfb      	ldrb	r3, [r7, #15]
 800405a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800405e:	73fb      	strb	r3, [r7, #15]
 8004060:	e007      	b.n	8004072 <_ZN17Adafruit_MAX3185617setConversionModeE26max31856_conversion_mode_t+0x48>
  }
  else
  {
    t &= ~MAX31856_CR0_AUTOCONVERT; // turn off automatic
 8004062:	7bfb      	ldrb	r3, [r7, #15]
 8004064:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004068:	73fb      	strb	r3, [r7, #15]
    t |= MAX31856_CR0_1SHOT;        // turn on one-shot
 800406a:	7bfb      	ldrb	r3, [r7, #15]
 800406c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004070:	73fb      	strb	r3, [r7, #15]
  }
  writeRegister8(MAX31856_CR0_REG, t); // write value back to register
 8004072:	7bfb      	ldrb	r3, [r7, #15]
 8004074:	461a      	mov	r2, r3
 8004076:	2100      	movs	r1, #0
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f994 	bl	80043a6 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>
}
 800407e:	bf00      	nop
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <_ZN17Adafruit_MAX3185619setThermocoupleTypeE27max31856_thermocoupletype_t>:
    @brief  Set which kind of Thermocouple (K, J, T, etc) to detect & decode
    @param type The enumeration type of the thermocouple
*/
/**************************************************************************/
void Adafruit_MAX31856::setThermocoupleType(max31856_thermocoupletype_t type)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b084      	sub	sp, #16
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
 800408e:	460b      	mov	r3, r1
 8004090:	70fb      	strb	r3, [r7, #3]
  uint8_t t = readRegister8(MAX31856_CR1_REG);
 8004092:	2101      	movs	r1, #1
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f8b2 	bl	80041fe <_ZN17Adafruit_MAX3185613readRegister8Eh>
 800409a:	4603      	mov	r3, r0
 800409c:	73fb      	strb	r3, [r7, #15]
  t &= 0xF0; // mask off bottom 4 bits
 800409e:	7bfb      	ldrb	r3, [r7, #15]
 80040a0:	f023 030f 	bic.w	r3, r3, #15
 80040a4:	73fb      	strb	r3, [r7, #15]
  t |= (uint8_t)type & 0x0F;
 80040a6:	78fb      	ldrb	r3, [r7, #3]
 80040a8:	f003 030f 	and.w	r3, r3, #15
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	7bfb      	ldrb	r3, [r7, #15]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	73fb      	strb	r3, [r7, #15]
  writeRegister8(MAX31856_CR1_REG, t);
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
 80040b6:	461a      	mov	r2, r3
 80040b8:	2101      	movs	r1, #1
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f973 	bl	80043a6 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>
}
 80040c0:	bf00      	nop
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <_ZN17Adafruit_MAX3185614triggerOneShotEv>:
    @brief  Begin a one-shot (read temperature only upon request) measurement.
    Value must be read later, not returned here!
*/
/**************************************************************************/
void Adafruit_MAX31856::triggerOneShot(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  if (conversionMode == MAX31856_CONTINUOUS)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	7a9b      	ldrb	r3, [r3, #10]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d014      	beq.n	8004102 <_ZN17Adafruit_MAX3185614triggerOneShotEv+0x3a>
    return;

  uint8_t t = readRegister8(MAX31856_CR0_REG); // get current register value
 80040d8:	2100      	movs	r1, #0
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f88f 	bl	80041fe <_ZN17Adafruit_MAX3185613readRegister8Eh>
 80040e0:	4603      	mov	r3, r0
 80040e2:	73fb      	strb	r3, [r7, #15]
  t &= ~MAX31856_CR0_AUTOCONVERT;              // turn off autoconvert
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
 80040e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040ea:	73fb      	strb	r3, [r7, #15]
  t |= MAX31856_CR0_1SHOT;                     // turn on one-shot
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
 80040ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040f2:	73fb      	strb	r3, [r7, #15]
  writeRegister8(MAX31856_CR0_REG, t);         // write value back to register
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
 80040f6:	461a      	mov	r2, r3
 80040f8:	2100      	movs	r1, #0
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f953 	bl	80043a6 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>
 8004100:	e000      	b.n	8004104 <_ZN17Adafruit_MAX3185614triggerOneShotEv+0x3c>
    return;
 8004102:	bf00      	nop
                                               // conversion starts when CS goes high
}
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <_ZN17Adafruit_MAX3185618conversionCompleteEv>:
    @brief  Return status of temperature conversion.
    @returns true if conversion complete, otherwise false
*/
/**************************************************************************/
bool Adafruit_MAX31856::conversionComplete(void)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b082      	sub	sp, #8
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  if (conversionMode == MAX31856_CONTINUOUS)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	7a9b      	ldrb	r3, [r3, #10]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d101      	bne.n	800411e <_ZN17Adafruit_MAX3185618conversionCompleteEv+0x14>
    return true;
 800411a:	2301      	movs	r3, #1
 800411c:	e00b      	b.n	8004136 <_ZN17Adafruit_MAX3185618conversionCompleteEv+0x2c>
  return !(readRegister8(MAX31856_CR0_REG) & MAX31856_CR0_1SHOT);
 800411e:	2100      	movs	r1, #0
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f86c 	bl	80041fe <_ZN17Adafruit_MAX3185613readRegister8Eh>
 8004126:	4603      	mov	r3, r0
 8004128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800412c:	2b00      	cmp	r3, #0
 800412e:	bf0c      	ite	eq
 8004130:	2301      	moveq	r3, #1
 8004132:	2300      	movne	r3, #0
 8004134:	b2db      	uxtb	r3, r3
}
 8004136:	4618      	mov	r0, r3
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv>:
    @brief  Return hot-junction (thermocouple) temperature
    @returns Floating point temperature in Celsius
*/
/**************************************************************************/
uint32_t Adafruit_MAX31856::readThermocoupleTemperature(void)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b084      	sub	sp, #16
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  // for one-shot, make it happen
  if (conversionMode == MAX31856_ONESHOT)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	7a9b      	ldrb	r3, [r3, #10]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d120      	bne.n	8004190 <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv+0x52>
  {
    triggerOneShot();
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7ff ffba 	bl	80040c8 <_ZN17Adafruit_MAX3185614triggerOneShotEv>
    uint32_t start = HAL_GetTick();
 8004154:	f003 f9f6 	bl	8007544 <HAL_GetTick>
 8004158:	60b8      	str	r0, [r7, #8]
    while (!conversionComplete())
 800415a:	e010      	b.n	800417e <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv+0x40>
    {
      if (HAL_GetTick() - start > 250)
 800415c:	f003 f9f2 	bl	8007544 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2bfa      	cmp	r3, #250	@ 0xfa
 8004168:	bf8c      	ite	hi
 800416a:	2301      	movhi	r3, #1
 800416c:	2300      	movls	r3, #0
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv+0x3a>
        return 0;
 8004174:	2300      	movs	r3, #0
 8004176:	e01e      	b.n	80041b6 <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv+0x78>
      HAL_Delay(10);
 8004178:	200a      	movs	r0, #10
 800417a:	f000 ff40 	bl	8004ffe <HAL_Delay>
    while (!conversionComplete())
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7ff ffc3 	bl	800410a <_ZN17Adafruit_MAX3185618conversionCompleteEv>
 8004184:	4603      	mov	r3, r0
 8004186:	f083 0301 	eor.w	r3, r3, #1
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1e5      	bne.n	800415c <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv+0x1e>
    }
  }

  // read the thermocouple temperature registers (3 bytes)
  int32_t temp24 = readRegister24(MAX31856_LTCBH_REG);
 8004190:	210c      	movs	r1, #12
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f847 	bl	8004226 <_ZN17Adafruit_MAX3185614readRegister24Eh>
 8004198:	4603      	mov	r3, r0
 800419a:	60fb      	str	r3, [r7, #12]
  // and compute temperature
  if (temp24 & 0x800000)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv+0x70>
  {
    temp24 |= 0xFF000000; // fix sign
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041ac:	60fb      	str	r3, [r7, #12]
  }

  temp24 >>= 5; // bottom 5 bits are unused
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	115b      	asrs	r3, r3, #5
 80041b2:	60fb      	str	r3, [r7, #12]

  return temp24;
 80041b4:	68fb      	ldr	r3, [r7, #12]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <_ZN17Adafruit_MAX318565csLowEv>:
/*!
    @brief  Set chip select low
*/
/**************************************************************************/
void Adafruit_MAX31856::csLow(void)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b082      	sub	sp, #8
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(_cs_port, _cs_pin, GPIO_PIN_RESET);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6858      	ldr	r0, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	891b      	ldrh	r3, [r3, #8]
 80041ce:	2200      	movs	r2, #0
 80041d0:	4619      	mov	r1, r3
 80041d2:	f003 ffb9 	bl	8008148 <HAL_GPIO_WritePin>
}
 80041d6:	bf00      	nop
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <_ZN17Adafruit_MAX318566csHighEv>:
/*!
    @brief  Set chip select high
*/
/**************************************************************************/
void Adafruit_MAX31856::csHigh(void)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b082      	sub	sp, #8
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(_cs_port, _cs_pin, GPIO_PIN_SET);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6858      	ldr	r0, [r3, #4]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	891b      	ldrh	r3, [r3, #8]
 80041ee:	2201      	movs	r2, #1
 80041f0:	4619      	mov	r1, r3
 80041f2:	f003 ffa9 	bl	8008148 <HAL_GPIO_WritePin>
}
 80041f6:	bf00      	nop
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <_ZN17Adafruit_MAX3185613readRegister8Eh>:
    @param  addr Register address
    @returns Register value
*/
/**************************************************************************/
uint8_t Adafruit_MAX31856::readRegister8(uint8_t addr)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b084      	sub	sp, #16
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	460b      	mov	r3, r1
 8004208:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 800420a:	2300      	movs	r3, #0
 800420c:	73fb      	strb	r3, [r7, #15]
  readRegisterN(addr, &ret, 1);
 800420e:	f107 020f 	add.w	r2, r7, #15
 8004212:	78f9      	ldrb	r1, [r7, #3]
 8004214:	2301      	movs	r3, #1
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f81d 	bl	8004256 <_ZN17Adafruit_MAX3185613readRegisterNEhPhh>
  return ret;
 800421c:	7bfb      	ldrb	r3, [r7, #15]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <_ZN17Adafruit_MAX3185614readRegister24Eh>:
    @param  addr Register address
    @returns Register value
*/
/**************************************************************************/
uint32_t Adafruit_MAX31856::readRegister24(uint8_t addr)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b084      	sub	sp, #16
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	460b      	mov	r3, r1
 8004230:	70fb      	strb	r3, [r7, #3]
  uint8_t buffer[3];
  readRegisterN(addr, buffer, 3);
 8004232:	f107 020c 	add.w	r2, r7, #12
 8004236:	78f9      	ldrb	r1, [r7, #3]
 8004238:	2303      	movs	r3, #3
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f80b 	bl	8004256 <_ZN17Adafruit_MAX3185613readRegisterNEhPhh>
  return ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | buffer[2];
 8004240:	7b3b      	ldrb	r3, [r7, #12]
 8004242:	041a      	lsls	r2, r3, #16
 8004244:	7b7b      	ldrb	r3, [r7, #13]
 8004246:	021b      	lsls	r3, r3, #8
 8004248:	4313      	orrs	r3, r2
 800424a:	7bba      	ldrb	r2, [r7, #14]
 800424c:	4313      	orrs	r3, r2
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <_ZN17Adafruit_MAX3185613readRegisterNEhPhh>:
    @param  buffer Buffer to store data
    @param  n Number of bytes to read
*/
/**************************************************************************/
void Adafruit_MAX31856::readRegisterN(uint8_t addr, uint8_t buffer[], uint8_t n)
{
 8004256:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800425a:	b08f      	sub	sp, #60	@ 0x3c
 800425c:	af02      	add	r7, sp, #8
 800425e:	6178      	str	r0, [r7, #20]
 8004260:	60fa      	str	r2, [r7, #12]
 8004262:	461a      	mov	r2, r3
 8004264:	460b      	mov	r3, r1
 8004266:	74fb      	strb	r3, [r7, #19]
 8004268:	4613      	mov	r3, r2
 800426a:	74bb      	strb	r3, [r7, #18]
  HAL_SPI_TransmitReceive(_hspi, tx, rx, 1 + n, 100);
  csHigh();

  for (uint8_t i = 0; i < n; i++)
    buffer[i] = rx[i + 1];
}
 800426c:	466b      	mov	r3, sp
 800426e:	461e      	mov	r6, r3
  addr &= 0x7F; // Read operation
 8004270:	7cfb      	ldrb	r3, [r7, #19]
 8004272:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004276:	74fb      	strb	r3, [r7, #19]
  uint8_t tx[1 + n];
 8004278:	7cbb      	ldrb	r3, [r7, #18]
 800427a:	1c59      	adds	r1, r3, #1
 800427c:	1e4b      	subs	r3, r1, #1
 800427e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004280:	460a      	mov	r2, r1
 8004282:	2300      	movs	r3, #0
 8004284:	603a      	str	r2, [r7, #0]
 8004286:	607b      	str	r3, [r7, #4]
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	00c3      	lsls	r3, r0, #3
 8004294:	6838      	ldr	r0, [r7, #0]
 8004296:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800429a:	6838      	ldr	r0, [r7, #0]
 800429c:	00c2      	lsls	r2, r0, #3
 800429e:	460a      	mov	r2, r1
 80042a0:	2300      	movs	r3, #0
 80042a2:	4692      	mov	sl, r2
 80042a4:	469b      	mov	fp, r3
 80042a6:	f04f 0200 	mov.w	r2, #0
 80042aa:	f04f 0300 	mov.w	r3, #0
 80042ae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042b2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042ba:	460b      	mov	r3, r1
 80042bc:	3307      	adds	r3, #7
 80042be:	08db      	lsrs	r3, r3, #3
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	ebad 0d03 	sub.w	sp, sp, r3
 80042c6:	ab02      	add	r3, sp, #8
 80042c8:	3300      	adds	r3, #0
 80042ca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t rx[1 + n];
 80042cc:	7cbb      	ldrb	r3, [r7, #18]
 80042ce:	1c59      	adds	r1, r3, #1
 80042d0:	1e4b      	subs	r3, r1, #1
 80042d2:	623b      	str	r3, [r7, #32]
 80042d4:	460a      	mov	r2, r1
 80042d6:	2300      	movs	r3, #0
 80042d8:	4690      	mov	r8, r2
 80042da:	4699      	mov	r9, r3
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	f04f 0300 	mov.w	r3, #0
 80042e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042f0:	460a      	mov	r2, r1
 80042f2:	2300      	movs	r3, #0
 80042f4:	4614      	mov	r4, r2
 80042f6:	461d      	mov	r5, r3
 80042f8:	f04f 0200 	mov.w	r2, #0
 80042fc:	f04f 0300 	mov.w	r3, #0
 8004300:	00eb      	lsls	r3, r5, #3
 8004302:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004306:	00e2      	lsls	r2, r4, #3
 8004308:	460b      	mov	r3, r1
 800430a:	3307      	adds	r3, #7
 800430c:	08db      	lsrs	r3, r3, #3
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	ebad 0d03 	sub.w	sp, sp, r3
 8004314:	ab02      	add	r3, sp, #8
 8004316:	3300      	adds	r3, #0
 8004318:	61fb      	str	r3, [r7, #28]
  tx[0] = addr;
 800431a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431c:	7cfa      	ldrb	r2, [r7, #19]
 800431e:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 1; i < 1 + n; i++)
 8004320:	2301      	movs	r3, #1
 8004322:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004326:	e009      	b.n	800433c <_ZN17Adafruit_MAX3185613readRegisterNEhPhh+0xe6>
    tx[i] = 0x00;
 8004328:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800432c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800432e:	2100      	movs	r1, #0
 8004330:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 1; i < 1 + n; i++)
 8004332:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004336:	3301      	adds	r3, #1
 8004338:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800433c:	7cba      	ldrb	r2, [r7, #18]
 800433e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004342:	429a      	cmp	r2, r3
 8004344:	d2f0      	bcs.n	8004328 <_ZN17Adafruit_MAX3185613readRegisterNEhPhh+0xd2>
  csLow();
 8004346:	6978      	ldr	r0, [r7, #20]
 8004348:	f7ff ff39 	bl	80041be <_ZN17Adafruit_MAX318565csLowEv>
  HAL_SPI_TransmitReceive(_hspi, tx, rx, 1 + n, 100);
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	6818      	ldr	r0, [r3, #0]
 8004350:	7cbb      	ldrb	r3, [r7, #18]
 8004352:	b29b      	uxth	r3, r3
 8004354:	3301      	adds	r3, #1
 8004356:	b29b      	uxth	r3, r3
 8004358:	2264      	movs	r2, #100	@ 0x64
 800435a:	9200      	str	r2, [sp, #0]
 800435c:	69fa      	ldr	r2, [r7, #28]
 800435e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004360:	f008 ff59 	bl	800d216 <HAL_SPI_TransmitReceive>
  csHigh();
 8004364:	6978      	ldr	r0, [r7, #20]
 8004366:	f7ff ff3a 	bl	80041de <_ZN17Adafruit_MAX318566csHighEv>
  for (uint8_t i = 0; i < n; i++)
 800436a:	2300      	movs	r3, #0
 800436c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8004370:	e00e      	b.n	8004390 <_ZN17Adafruit_MAX3185613readRegisterNEhPhh+0x13a>
    buffer[i] = rx[i + 1];
 8004372:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004376:	1c5a      	adds	r2, r3, #1
 8004378:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800437c:	68f9      	ldr	r1, [r7, #12]
 800437e:	440b      	add	r3, r1
 8004380:	69f9      	ldr	r1, [r7, #28]
 8004382:	5c8a      	ldrb	r2, [r1, r2]
 8004384:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < n; i++)
 8004386:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800438a:	3301      	adds	r3, #1
 800438c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8004390:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8004394:	7cbb      	ldrb	r3, [r7, #18]
 8004396:	429a      	cmp	r2, r3
 8004398:	d3eb      	bcc.n	8004372 <_ZN17Adafruit_MAX3185613readRegisterNEhPhh+0x11c>
 800439a:	46b5      	mov	sp, r6
}
 800439c:	bf00      	nop
 800439e:	3734      	adds	r7, #52	@ 0x34
 80043a0:	46bd      	mov	sp, r7
 80043a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080043a6 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>:
    @param  addr Register address
    @param  data Data to write
*/
/**************************************************************************/
void Adafruit_MAX31856::writeRegister8(uint8_t addr, uint8_t data)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b084      	sub	sp, #16
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
 80043ae:	460b      	mov	r3, r1
 80043b0:	70fb      	strb	r3, [r7, #3]
 80043b2:	4613      	mov	r3, r2
 80043b4:	70bb      	strb	r3, [r7, #2]
  addr |= 0x80; // MSB=1 for write, make sure top bit is set
 80043b6:	78fb      	ldrb	r3, [r7, #3]
 80043b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80043bc:	70fb      	strb	r3, [r7, #3]

  uint8_t buffer[2] = {addr, data};
 80043be:	78fb      	ldrb	r3, [r7, #3]
 80043c0:	733b      	strb	r3, [r7, #12]
 80043c2:	78bb      	ldrb	r3, [r7, #2]
 80043c4:	737b      	strb	r3, [r7, #13]

  csLow();
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7ff fef9 	bl	80041be <_ZN17Adafruit_MAX318565csLowEv>
  HAL_SPI_Transmit(_hspi, buffer, 2, HAL_MAX_DELAY);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6818      	ldr	r0, [r3, #0]
 80043d0:	f107 010c 	add.w	r1, r7, #12
 80043d4:	f04f 33ff 	mov.w	r3, #4294967295
 80043d8:	2202      	movs	r2, #2
 80043da:	f008 fda6 	bl	800cf2a <HAL_SPI_Transmit>
  csHigh();
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7ff fefd 	bl	80041de <_ZN17Adafruit_MAX318566csHighEv>
}
 80043e4:	bf00      	nop
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <_ZN13Accelerometer5setupEv>:
#include "main.h"

Accelerometer::States Accelerometer::state;

void Accelerometer::setup(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
    // pinMode(0, OUTPUT);
    state = AWAKE;
 80043f4:	4b06      	ldr	r3, [pc, #24]	@ (8004410 <_ZN13Accelerometer5setupEv+0x24>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	701a      	strb	r2, [r3, #0]
    delay = 1;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	601a      	str	r2, [r3, #0]
    readAccelerometer();
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f895 	bl	8004530 <_ZN13Accelerometer17readAccelerometerEv>
}
 8004406:	bf00      	nop
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	20000374 	.word	0x20000374

08004414 <_ZN13Accelerometer12stateMachineEv>:

void Accelerometer::stateMachine(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
    if (!readDelay)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	bf0c      	ite	eq
 8004424:	2301      	moveq	r3, #1
 8004426:	2300      	movne	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d005      	beq.n	800443a <_ZN13Accelerometer12stateMachineEv+0x26>
    {
        readAccelerometer();
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f87e 	bl	8004530 <_ZN13Accelerometer17readAccelerometerEv>

        //        snprintf(usbBuffer, sizeof(usbBuffer), "Acceleration: %ld, %d\r\n", acceleration, delay);
        //        CDC_Transmit_FS((uint8_t *)usbBuffer, strlen(usbBuffer));
        //        snprintf(usbBuffer, sizeof(usbBuffer), "State: %d \r\n", state);
        //        CDC_Transmit_FS((uint8_t *)usbBuffer, strlen(usbBuffer));
        readDelay = 2;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	605a      	str	r2, [r3, #4]
    }

    switch (state)
 800443a:	4b3b      	ldr	r3, [pc, #236]	@ (8004528 <_ZN13Accelerometer12stateMachineEv+0x114>)
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	2b02      	cmp	r3, #2
 8004440:	d050      	beq.n	80044e4 <_ZN13Accelerometer12stateMachineEv+0xd0>
 8004442:	2b02      	cmp	r3, #2
 8004444:	dc64      	bgt.n	8004510 <_ZN13Accelerometer12stateMachineEv+0xfc>
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <_ZN13Accelerometer12stateMachineEv+0x3c>
 800444a:	2b01      	cmp	r3, #1
 800444c:	d019      	beq.n	8004482 <_ZN13Accelerometer12stateMachineEv+0x6e>
            // CDC_Transmit_FS((uint8_t *)usbBuffer, strlen(usbBuffer));
        }

        break;
    default:
        break;
 800444e:	e05f      	b.n	8004510 <_ZN13Accelerometer12stateMachineEv+0xfc>
        if (acceleration < activityThreshold && !delay)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	691a      	ldr	r2, [r3, #16]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	429a      	cmp	r2, r3
 800445a:	d205      	bcs.n	8004468 <_ZN13Accelerometer12stateMachineEv+0x54>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <_ZN13Accelerometer12stateMachineEv+0x54>
 8004464:	2301      	movs	r3, #1
 8004466:	e000      	b.n	800446a <_ZN13Accelerometer12stateMachineEv+0x56>
 8004468:	2300      	movs	r3, #0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d052      	beq.n	8004514 <_ZN13Accelerometer12stateMachineEv+0x100>
            delay = 1; // seconds
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	601a      	str	r2, [r3, #0]
            state = IDLE;
 8004474:	4b2c      	ldr	r3, [pc, #176]	@ (8004528 <_ZN13Accelerometer12stateMachineEv+0x114>)
 8004476:	2201      	movs	r2, #1
 8004478:	701a      	strb	r2, [r3, #0]
            Backlight::state = Backlight::States::LOW;
 800447a:	4b2c      	ldr	r3, [pc, #176]	@ (800452c <_ZN13Accelerometer12stateMachineEv+0x118>)
 800447c:	2200      	movs	r2, #0
 800447e:	701a      	strb	r2, [r3, #0]
        break;
 8004480:	e048      	b.n	8004514 <_ZN13Accelerometer12stateMachineEv+0x100>
        if (acceleration > activityThreshold && !delay)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691a      	ldr	r2, [r3, #16]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	429a      	cmp	r2, r3
 800448c:	d905      	bls.n	800449a <_ZN13Accelerometer12stateMachineEv+0x86>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <_ZN13Accelerometer12stateMachineEv+0x86>
 8004496:	2301      	movs	r3, #1
 8004498:	e000      	b.n	800449c <_ZN13Accelerometer12stateMachineEv+0x88>
 800449a:	2300      	movs	r3, #0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d008      	beq.n	80044b2 <_ZN13Accelerometer12stateMachineEv+0x9e>
            delay = 1; // seconds
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	601a      	str	r2, [r3, #0]
            state = AWAKE;
 80044a6:	4b20      	ldr	r3, [pc, #128]	@ (8004528 <_ZN13Accelerometer12stateMachineEv+0x114>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	701a      	strb	r2, [r3, #0]
            Backlight::state = Backlight::States::HIGH;
 80044ac:	4b1f      	ldr	r3, [pc, #124]	@ (800452c <_ZN13Accelerometer12stateMachineEv+0x118>)
 80044ae:	2202      	movs	r2, #2
 80044b0:	701a      	strb	r2, [r3, #0]
        if (acceleration < activityThreshold && !delay)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691a      	ldr	r2, [r3, #16]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d205      	bcs.n	80044ca <_ZN13Accelerometer12stateMachineEv+0xb6>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <_ZN13Accelerometer12stateMachineEv+0xb6>
 80044c6:	2301      	movs	r3, #1
 80044c8:	e000      	b.n	80044cc <_ZN13Accelerometer12stateMachineEv+0xb8>
 80044ca:	2300      	movs	r3, #0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d023      	beq.n	8004518 <_ZN13Accelerometer12stateMachineEv+0x104>
            delay = 1; // seconds
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	601a      	str	r2, [r3, #0]
            state = SLEEP;
 80044d6:	4b14      	ldr	r3, [pc, #80]	@ (8004528 <_ZN13Accelerometer12stateMachineEv+0x114>)
 80044d8:	2202      	movs	r2, #2
 80044da:	701a      	strb	r2, [r3, #0]
            Backlight::state = Backlight::States::OFF;
 80044dc:	4b13      	ldr	r3, [pc, #76]	@ (800452c <_ZN13Accelerometer12stateMachineEv+0x118>)
 80044de:	2203      	movs	r2, #3
 80044e0:	701a      	strb	r2, [r3, #0]
        break;
 80044e2:	e019      	b.n	8004518 <_ZN13Accelerometer12stateMachineEv+0x104>
        if (acceleration > activityThreshold && !delay)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	691a      	ldr	r2, [r3, #16]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d905      	bls.n	80044fc <_ZN13Accelerometer12stateMachineEv+0xe8>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <_ZN13Accelerometer12stateMachineEv+0xe8>
 80044f8:	2301      	movs	r3, #1
 80044fa:	e000      	b.n	80044fe <_ZN13Accelerometer12stateMachineEv+0xea>
 80044fc:	2300      	movs	r3, #0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00c      	beq.n	800451c <_ZN13Accelerometer12stateMachineEv+0x108>
            delay = 1; // seconds
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	601a      	str	r2, [r3, #0]
            state = AWAKE;
 8004508:	4b07      	ldr	r3, [pc, #28]	@ (8004528 <_ZN13Accelerometer12stateMachineEv+0x114>)
 800450a:	2200      	movs	r2, #0
 800450c:	701a      	strb	r2, [r3, #0]
        break;
 800450e:	e005      	b.n	800451c <_ZN13Accelerometer12stateMachineEv+0x108>
        break;
 8004510:	bf00      	nop
 8004512:	e004      	b.n	800451e <_ZN13Accelerometer12stateMachineEv+0x10a>
        break;
 8004514:	bf00      	nop
 8004516:	e002      	b.n	800451e <_ZN13Accelerometer12stateMachineEv+0x10a>
        break;
 8004518:	bf00      	nop
 800451a:	e000      	b.n	800451e <_ZN13Accelerometer12stateMachineEv+0x10a>
        break;
 800451c:	bf00      	nop
    }
}
 800451e:	bf00      	nop
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	20000374 	.word	0x20000374
 800452c:	20000375 	.word	0x20000375

08004530 <_ZN13Accelerometer17readAccelerometerEv>:

void Accelerometer::readAccelerometer(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af04      	add	r7, sp, #16
 8004536:	6078      	str	r0, [r7, #4]
    // Set MEASURE bit (Bit 3) to enable measurement mode
    HAL_I2C_Mem_Write(&hi2c1, ADXL343_ADDR, 0x2D, I2C_MEMADD_SIZE_8BIT, &powerCtl, 1, 1000);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	3314      	adds	r3, #20
 800453c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004540:	9202      	str	r2, [sp, #8]
 8004542:	2201      	movs	r2, #1
 8004544:	9201      	str	r2, [sp, #4]
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	2301      	movs	r3, #1
 800454a:	222d      	movs	r2, #45	@ 0x2d
 800454c:	21a6      	movs	r1, #166	@ 0xa6
 800454e:	4829      	ldr	r0, [pc, #164]	@ (80045f4 <_ZN13Accelerometer17readAccelerometerEv+0xc4>)
 8004550:	f004 f8e0 	bl	8008714 <HAL_I2C_Mem_Write>

    // Read with error handling
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, ADXL343_ADDR, accreg, I2C_MEMADD_SIZE_8BIT, accdata, 6, 1000);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	7d5b      	ldrb	r3, [r3, #21]
 8004558:	4619      	mov	r1, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	3316      	adds	r3, #22
 800455e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004562:	9202      	str	r2, [sp, #8]
 8004564:	2206      	movs	r2, #6
 8004566:	9201      	str	r2, [sp, #4]
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	2301      	movs	r3, #1
 800456c:	460a      	mov	r2, r1
 800456e:	21a6      	movs	r1, #166	@ 0xa6
 8004570:	4820      	ldr	r0, [pc, #128]	@ (80045f4 <_ZN13Accelerometer17readAccelerometerEv+0xc4>)
 8004572:	f004 f9e3 	bl	800893c <HAL_I2C_Mem_Read>
 8004576:	4603      	mov	r3, r0
 8004578:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800457a:	7bfb      	ldrb	r3, [r7, #15]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d134      	bne.n	80045ea <_ZN13Accelerometer17readAccelerometerEv+0xba>
    {
        // Convert raw data to signed values
        int16_t x = (int16_t)((accdata[1] << 8) | accdata[0]);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	7ddb      	ldrb	r3, [r3, #23]
 8004584:	b21b      	sxth	r3, r3
 8004586:	021b      	lsls	r3, r3, #8
 8004588:	b21a      	sxth	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	7d9b      	ldrb	r3, [r3, #22]
 800458e:	b21b      	sxth	r3, r3
 8004590:	4313      	orrs	r3, r2
 8004592:	81bb      	strh	r3, [r7, #12]
        int16_t y = (int16_t)((accdata[3] << 8) | accdata[2]);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	7e5b      	ldrb	r3, [r3, #25]
 8004598:	b21b      	sxth	r3, r3
 800459a:	021b      	lsls	r3, r3, #8
 800459c:	b21a      	sxth	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	7e1b      	ldrb	r3, [r3, #24]
 80045a2:	b21b      	sxth	r3, r3
 80045a4:	4313      	orrs	r3, r2
 80045a6:	817b      	strh	r3, [r7, #10]
        // int8_t z = ((accdata[5] << 8) | accdata[4]);

        // use mean of x and y
        acceleration = (x + y) / 2;
 80045a8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80045ac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80045b0:	4413      	add	r3, r2
 80045b2:	0fda      	lsrs	r2, r3, #31
 80045b4:	4413      	add	r3, r2
 80045b6:	105b      	asrs	r3, r3, #1
 80045b8:	461a      	mov	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	611a      	str	r2, [r3, #16]
        // Convert to g-force (assuming ±2g range, 10-bit resolution)
        // float x_g = x * 0.0039f; // 4mg/LSB
        // float y_g = y * 0.0039f;
        // float z_g = z * 0.0039f;

        snprintf((char*)UART_BUFFER, sizeof(UART_BUFFER), "X: %.2fg, Y: %.2fg\r\n", x, y);
 80045be:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80045c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	4613      	mov	r3, r2
 80045ca:	4a0b      	ldr	r2, [pc, #44]	@ (80045f8 <_ZN13Accelerometer17readAccelerometerEv+0xc8>)
 80045cc:	2140      	movs	r1, #64	@ 0x40
 80045ce:	480b      	ldr	r0, [pc, #44]	@ (80045fc <_ZN13Accelerometer17readAccelerometerEv+0xcc>)
 80045d0:	f015 fdd8 	bl	801a184 <sniprintf>

        HAL_UART_Transmit(&huart1, UART_BUFFER, strlen((char*)UART_BUFFER), 300);
 80045d4:	4809      	ldr	r0, [pc, #36]	@ (80045fc <_ZN13Accelerometer17readAccelerometerEv+0xcc>)
 80045d6:	f7fb fe23 	bl	8000220 <strlen>
 80045da:	4603      	mov	r3, r0
 80045dc:	b29a      	uxth	r2, r3
 80045de:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80045e2:	4906      	ldr	r1, [pc, #24]	@ (80045fc <_ZN13Accelerometer17readAccelerometerEv+0xcc>)
 80045e4:	4806      	ldr	r0, [pc, #24]	@ (8004600 <_ZN13Accelerometer17readAccelerometerEv+0xd0>)
 80045e6:	f00a fc59 	bl	800ee9c <HAL_UART_Transmit>
    }
}
 80045ea:	bf00      	nop
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	20000454 	.word	0x20000454
 80045f8:	0801c2b0 	.word	0x0801c2b0
 80045fc:	200004e4 	.word	0x200004e4
 8004600:	20000a04 	.word	0x20000a04

08004604 <_ZN9Backlight5setupEv>:

Backlight::States Backlight::state;

void Backlight::setup(void)

{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800460c:	2100      	movs	r1, #0
 800460e:	4808      	ldr	r0, [pc, #32]	@ (8004630 <_ZN9Backlight5setupEv+0x2c>)
 8004610:	f009 fd1a 	bl	800e048 <HAL_TIM_PWM_Start>

    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0); // turn off screen to start
 8004614:	4b06      	ldr	r3, [pc, #24]	@ (8004630 <_ZN9Backlight5setupEv+0x2c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2200      	movs	r2, #0
 800461a:	635a      	str	r2, [r3, #52]	@ 0x34

    state = HIGH;
 800461c:	4b05      	ldr	r3, [pc, #20]	@ (8004634 <_ZN9Backlight5setupEv+0x30>)
 800461e:	2202      	movs	r2, #2
 8004620:	701a      	strb	r2, [r3, #0]
    // pinMode(0, OUTPUT);
    // state = AWAKE;
    delay = 0;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]
    // readAccelerometer();
}
 8004628:	bf00      	nop
 800462a:	3708      	adds	r7, #8
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	2000096c 	.word	0x2000096c
 8004634:	20000375 	.word	0x20000375

08004638 <_ZN9Backlight12stateMachineEv>:

void Backlight::stateMachine(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]

    switch (state)
 8004640:	4b2d      	ldr	r3, [pc, #180]	@ (80046f8 <_ZN9Backlight12stateMachineEv+0xc0>)
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	2b03      	cmp	r3, #3
 8004646:	d843      	bhi.n	80046d0 <_ZN9Backlight12stateMachineEv+0x98>
 8004648:	a201      	add	r2, pc, #4	@ (adr r2, 8004650 <_ZN9Backlight12stateMachineEv+0x18>)
 800464a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464e:	bf00      	nop
 8004650:	08004661 	.word	0x08004661
 8004654:	0800467d 	.word	0x0800467d
 8004658:	08004699 	.word	0x08004699
 800465c:	080046b5 	.word	0x080046b5
    {

    case LOW:
        if (!delay)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	bf0c      	ite	eq
 8004668:	2301      	moveq	r3, #1
 800466a:	2300      	movne	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d030      	beq.n	80046d4 <_ZN9Backlight12stateMachineEv+0x9c>
        {
            desired_brightness = low_brightness;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	609a      	str	r2, [r3, #8]
        }
        break;
 800467a:	e02b      	b.n	80046d4 <_ZN9Backlight12stateMachineEv+0x9c>
    case MID:
        if (!delay)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	bf0c      	ite	eq
 8004684:	2301      	moveq	r3, #1
 8004686:	2300      	movne	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d024      	beq.n	80046d8 <_ZN9Backlight12stateMachineEv+0xa0>
        {
            desired_brightness = mid_brightness;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691a      	ldr	r2, [r3, #16]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	609a      	str	r2, [r3, #8]
        }
        break;
 8004696:	e01f      	b.n	80046d8 <_ZN9Backlight12stateMachineEv+0xa0>
    case HIGH:
        if (!delay)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	bf0c      	ite	eq
 80046a0:	2301      	moveq	r3, #1
 80046a2:	2300      	movne	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d018      	beq.n	80046dc <_ZN9Backlight12stateMachineEv+0xa4>
        {
            desired_brightness = hi_brightness;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	695a      	ldr	r2, [r3, #20]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	609a      	str	r2, [r3, #8]
        }
        break;
 80046b2:	e013      	b.n	80046dc <_ZN9Backlight12stateMachineEv+0xa4>
    case OFF:
        if (!delay)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	bf0c      	ite	eq
 80046bc:	2301      	moveq	r3, #1
 80046be:	2300      	movne	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00c      	beq.n	80046e0 <_ZN9Backlight12stateMachineEv+0xa8>
        {
            desired_brightness = off;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	699a      	ldr	r2, [r3, #24]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	609a      	str	r2, [r3, #8]
        }
        break;
 80046ce:	e007      	b.n	80046e0 <_ZN9Backlight12stateMachineEv+0xa8>
    default:
        break;
 80046d0:	bf00      	nop
 80046d2:	e006      	b.n	80046e2 <_ZN9Backlight12stateMachineEv+0xaa>
        break;
 80046d4:	bf00      	nop
 80046d6:	e004      	b.n	80046e2 <_ZN9Backlight12stateMachineEv+0xaa>
        break;
 80046d8:	bf00      	nop
 80046da:	e002      	b.n	80046e2 <_ZN9Backlight12stateMachineEv+0xaa>
        break;
 80046dc:	bf00      	nop
 80046de:	e000      	b.n	80046e2 <_ZN9Backlight12stateMachineEv+0xaa>
        break;
 80046e0:	bf00      	nop
    }

    fadeScreen(desired_brightness);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	4619      	mov	r1, r3
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f807 	bl	80046fc <_ZN9Backlight10fadeScreenEi>
}
 80046ee:	bf00      	nop
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	20000375 	.word	0x20000375

080046fc <_ZN9Backlight10fadeScreenEi>:

void Backlight::fadeScreen(int target_brightness)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]

    if (current_brightness < target_brightness)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	429a      	cmp	r2, r3
 800470e:	dd0d      	ble.n	800472c <_ZN9Backlight10fadeScreenEi+0x30>
    {
        current_brightness += 1; // Adjust step size for fade speed
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	605a      	str	r2, [r3, #4]
        if (current_brightness > target_brightness)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	da15      	bge.n	8004750 <_ZN9Backlight10fadeScreenEi+0x54>
            current_brightness = target_brightness;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	605a      	str	r2, [r3, #4]
 800472a:	e011      	b.n	8004750 <_ZN9Backlight10fadeScreenEi+0x54>
    }
    else if (current_brightness > target_brightness)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	429a      	cmp	r2, r3
 8004734:	da0c      	bge.n	8004750 <_ZN9Backlight10fadeScreenEi+0x54>
    {
        current_brightness -= 1;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	1e5a      	subs	r2, r3, #1
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	605a      	str	r2, [r3, #4]
        if (current_brightness < target_brightness)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	429a      	cmp	r2, r3
 8004748:	dd02      	ble.n	8004750 <_ZN9Backlight10fadeScreenEi+0x54>
            current_brightness = target_brightness;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	605a      	str	r2, [r3, #4]
    }

    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, current_brightness);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	4b04      	ldr	r3, [pc, #16]	@ (8004768 <_ZN9Backlight10fadeScreenEi+0x6c>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800475a:	bf00      	nop
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	2000096c 	.word	0x2000096c

0800476c <_ZN14BatteryMonitor5setupEv>:
// char *BatteryMonitor::percent = "000.00%";
// char *BatteryMonitor::lastPercent = "000.00%";
// bool BatteryMonitor::newData = false;
bool BatteryMonitor::charging = false;
void BatteryMonitor::setup()
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
    // Wire1.setPins(PERIPHERAL_SDA, PERIPHERAL_SCL);

    while (!max17048.begin(&hi2c1, MAX17048_I2CADDR_DEFAULT))
 8004774:	e002      	b.n	800477c <_ZN14BatteryMonitor5setupEv+0x10>
    {
        // Serial.println(F("Couldnt find Adafruit MAX17048?\nMake sure a battery is plugged in!"));
        HAL_Delay(200);
 8004776:	20c8      	movs	r0, #200	@ 0xc8
 8004778:	f000 fc41 	bl	8004ffe <HAL_Delay>
    while (!max17048.begin(&hi2c1, MAX17048_I2CADDR_DEFAULT))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2236      	movs	r2, #54	@ 0x36
 8004780:	4908      	ldr	r1, [pc, #32]	@ (80047a4 <_ZN14BatteryMonitor5setupEv+0x38>)
 8004782:	4618      	mov	r0, r3
 8004784:	f7fc fbe3 	bl	8000f4e <_ZN23Adafruit_MAX17048_STM325beginEP19__I2C_HandleTypeDeft>
 8004788:	4603      	mov	r3, r0
 800478a:	f083 0301 	eor.w	r3, r3, #1
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1f0      	bne.n	8004776 <_ZN14BatteryMonitor5setupEv+0xa>
    }
    // Serial.print(F("Found MAX17048"));
    // Serial.print(F(" with Chip ID: 0x"));
    // Serial.println(max17048.getChipID(), HEX);
    max17048.quickStart();
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4618      	mov	r0, r3
 8004798:	f7fc fe0a 	bl	80013b0 <_ZN23Adafruit_MAX17048_STM3210quickStartEv>
    // percent = String(int()) + '%';

    // sprintf(percent, "%f", max17048.cellPercent());

    // newData = true;
}
 800479c:	bf00      	nop
 800479e:	3708      	adds	r7, #8
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	20000454 	.word	0x20000454

080047a8 <_ZN14BatteryMonitor12stateMachineEv>:

void BatteryMonitor::stateMachine(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af02      	add	r7, sp, #8
 80047ae:	6078      	str	r0, [r7, #4]

    if (!delay)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	bf0c      	ite	eq
 80047b8:	2301      	moveq	r3, #1
 80047ba:	2300      	movne	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d02f      	beq.n	8004822 <_ZN14BatteryMonitor12stateMachineEv+0x7a>
    {
        delay = 3; // seconds // ms
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2203      	movs	r2, #3
 80047c6:	60da      	str	r2, [r3, #12]
        // lastPercent = percent;
        // snprintf(percent, sizeof(usbBuffer), "%f", max17048.cellPercent());
        // newData = (percent != lastPercent);
        charging = (max17048.chargeRate() > 0.0);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fc fd8c 	bl	80012e8 <_ZN23Adafruit_MAX17048_STM3210chargeRateEv>
 80047d0:	eef0 7a40 	vmov.f32	s15, s0
 80047d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047dc:	bfcc      	ite	gt
 80047de:	2301      	movgt	r3, #1
 80047e0:	2300      	movle	r3, #0
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	4b11      	ldr	r3, [pc, #68]	@ (800482c <_ZN14BatteryMonitor12stateMachineEv+0x84>)
 80047e6:	701a      	strb	r2, [r3, #0]
        // Serial.println(max17048.chargeRate());

        // snprintf(usbBuffer, sizeof(usbBuffer), );
        // CDC_Transmit_FS((uint8_t *)usbBuffer, strlen(usbBuffer));

        snprintf((char*)UART_BUFFER, sizeof(UART_BUFFER), "Battery: %f\r\n", max17048.cellPercent());
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fc fd4a 	bl	8001284 <_ZN23Adafruit_MAX17048_STM3211cellPercentEv>
 80047f0:	ee10 3a10 	vmov	r3, s0
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7fb fe7f 	bl	80004f8 <__aeabi_f2d>
 80047fa:	4602      	mov	r2, r0
 80047fc:	460b      	mov	r3, r1
 80047fe:	e9cd 2300 	strd	r2, r3, [sp]
 8004802:	4a0b      	ldr	r2, [pc, #44]	@ (8004830 <_ZN14BatteryMonitor12stateMachineEv+0x88>)
 8004804:	2140      	movs	r1, #64	@ 0x40
 8004806:	480b      	ldr	r0, [pc, #44]	@ (8004834 <_ZN14BatteryMonitor12stateMachineEv+0x8c>)
 8004808:	f015 fcbc 	bl	801a184 <sniprintf>

        HAL_UART_Transmit(&huart1, UART_BUFFER, strlen((char*)UART_BUFFER), 300);
 800480c:	4809      	ldr	r0, [pc, #36]	@ (8004834 <_ZN14BatteryMonitor12stateMachineEv+0x8c>)
 800480e:	f7fb fd07 	bl	8000220 <strlen>
 8004812:	4603      	mov	r3, r0
 8004814:	b29a      	uxth	r2, r3
 8004816:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800481a:	4906      	ldr	r1, [pc, #24]	@ (8004834 <_ZN14BatteryMonitor12stateMachineEv+0x8c>)
 800481c:	4806      	ldr	r0, [pc, #24]	@ (8004838 <_ZN14BatteryMonitor12stateMachineEv+0x90>)
 800481e:	f00a fb3d 	bl	800ee9c <HAL_UART_Transmit>
    }
}
 8004822:	bf00      	nop
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	20000376 	.word	0x20000376
 8004830:	0801c2c8 	.word	0x0801c2c8
 8004834:	200004e4 	.word	0x200004e4
 8004838:	20000a04 	.word	0x20000a04

0800483c <_ZN13Thermocouples5setupEv>:
KALMAN_T rf;
KALMAN_T lf;
// Static member definitions for MAX31856 objects

void Thermocouples::setup()
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b088      	sub	sp, #32
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
    // SPI_Set_Mode(1);

    // Re-initialize the SPI handle pointers
    left = Adafruit_MAX31856(&hspi1, GPIOA, GPIO_PIN_9);
 8004844:	f107 0008 	add.w	r0, r7, #8
 8004848:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800484c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8004850:	4932      	ldr	r1, [pc, #200]	@ (800491c <_ZN13Thermocouples5setupEv+0xe0>)
 8004852:	f7ff fb99 	bl	8003f88 <_ZN17Adafruit_MAX31856C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	461a      	mov	r2, r3
 800485a:	f107 0308 	add.w	r3, r7, #8
 800485e:	cb03      	ldmia	r3!, {r0, r1}
 8004860:	6010      	str	r0, [r2, #0]
 8004862:	6051      	str	r1, [r2, #4]
 8004864:	8819      	ldrh	r1, [r3, #0]
 8004866:	789b      	ldrb	r3, [r3, #2]
 8004868:	8111      	strh	r1, [r2, #8]
 800486a:	7293      	strb	r3, [r2, #10]
    right = Adafruit_MAX31856(&hspi1, GPIOA, GPIO_PIN_8);
 800486c:	f107 0014 	add.w	r0, r7, #20
 8004870:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004874:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8004878:	4928      	ldr	r1, [pc, #160]	@ (800491c <_ZN13Thermocouples5setupEv+0xe0>)
 800487a:	f7ff fb85 	bl	8003f88 <_ZN17Adafruit_MAX31856C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f103 020c 	add.w	r2, r3, #12
 8004884:	f107 0314 	add.w	r3, r7, #20
 8004888:	cb03      	ldmia	r3!, {r0, r1}
 800488a:	6010      	str	r0, [r2, #0]
 800488c:	6051      	str	r1, [r2, #4]
 800488e:	8819      	ldrh	r1, [r3, #0]
 8004890:	789b      	ldrb	r3, [r3, #2]
 8004892:	8111      	strh	r1, [r2, #8]
 8004894:	7293      	strb	r3, [r2, #10]

    rf.error = 0.0f;
 8004896:	4b22      	ldr	r3, [pc, #136]	@ (8004920 <_ZN13Thermocouples5setupEv+0xe4>)
 8004898:	f04f 0200 	mov.w	r2, #0
 800489c:	609a      	str	r2, [r3, #8]
    rf.estimate = 0.0f;
 800489e:	4b20      	ldr	r3, [pc, #128]	@ (8004920 <_ZN13Thermocouples5setupEv+0xe4>)
 80048a0:	f04f 0200 	mov.w	r2, #0
 80048a4:	611a      	str	r2, [r3, #16]
    rf.process_variance = 0.1f;
 80048a6:	4b1e      	ldr	r3, [pc, #120]	@ (8004920 <_ZN13Thermocouples5setupEv+0xe4>)
 80048a8:	4a1e      	ldr	r2, [pc, #120]	@ (8004924 <_ZN13Thermocouples5setupEv+0xe8>)
 80048aa:	615a      	str	r2, [r3, #20]
    rf.measurement_variance = 50.0f;
 80048ac:	4b1c      	ldr	r3, [pc, #112]	@ (8004920 <_ZN13Thermocouples5setupEv+0xe4>)
 80048ae:	4a1e      	ldr	r2, [pc, #120]	@ (8004928 <_ZN13Thermocouples5setupEv+0xec>)
 80048b0:	619a      	str	r2, [r3, #24]

    lf.error = 0.0f;
 80048b2:	4b1e      	ldr	r3, [pc, #120]	@ (800492c <_ZN13Thermocouples5setupEv+0xf0>)
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	609a      	str	r2, [r3, #8]
    lf.estimate = 0.0f;
 80048ba:	4b1c      	ldr	r3, [pc, #112]	@ (800492c <_ZN13Thermocouples5setupEv+0xf0>)
 80048bc:	f04f 0200 	mov.w	r2, #0
 80048c0:	611a      	str	r2, [r3, #16]
    lf.process_variance = 0.1f;
 80048c2:	4b1a      	ldr	r3, [pc, #104]	@ (800492c <_ZN13Thermocouples5setupEv+0xf0>)
 80048c4:	4a17      	ldr	r2, [pc, #92]	@ (8004924 <_ZN13Thermocouples5setupEv+0xe8>)
 80048c6:	615a      	str	r2, [r3, #20]
    lf.measurement_variance = 50.0f;
 80048c8:	4b18      	ldr	r3, [pc, #96]	@ (800492c <_ZN13Thermocouples5setupEv+0xf0>)
 80048ca:	4a17      	ldr	r2, [pc, #92]	@ (8004928 <_ZN13Thermocouples5setupEv+0xec>)
 80048cc:	619a      	str	r2, [r3, #24]
    // area = 3.14159f * diameter * length; // surface area in m^2
    // ambientTemp = 20.0f;
    // h = 500;      // W/m^2 * K
    // C = 0.000053; // J /K
    // lastTime = HAL_GetTick();
    left.begin();
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7ff fb84 	bl	8003fde <_ZN17Adafruit_MAX318565beginEv>
    left.setThermocoupleType(MAX31856_TCTYPE_K);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2103      	movs	r1, #3
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff fbd3 	bl	8004086 <_ZN17Adafruit_MAX3185619setThermocoupleTypeE27max31856_thermocoupletype_t>
    left.setConversionMode(MAX31856_CONTINUOUS);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2101      	movs	r1, #1
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff fba0 	bl	800402a <_ZN17Adafruit_MAX3185617setConversionModeE26max31856_conversion_mode_t>

    right.begin();
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	330c      	adds	r3, #12
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7ff fb75 	bl	8003fde <_ZN17Adafruit_MAX318565beginEv>
    right.setThermocoupleType(MAX31856_TCTYPE_K);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	330c      	adds	r3, #12
 80048f8:	2103      	movs	r1, #3
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7ff fbc3 	bl	8004086 <_ZN17Adafruit_MAX3185619setThermocoupleTypeE27max31856_thermocoupletype_t>
    right.setConversionMode(MAX31856_CONTINUOUS);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	330c      	adds	r3, #12
 8004904:	2101      	movs	r1, #1
 8004906:	4618      	mov	r0, r3
 8004908:	f7ff fb8f 	bl	800402a <_ZN17Adafruit_MAX3185617setConversionModeE26max31856_conversion_mode_t>
    // SPI_Set_Mode(0);
    HAL_Delay(250);
 800490c:	20fa      	movs	r0, #250	@ 0xfa
 800490e:	f000 fb76 	bl	8004ffe <HAL_Delay>
    // setNoiseFilter(&tempSensor, MAX31856_NOISE_FILTER_50HZ);
    // HAL_Delay(200);
    // Set fault thresholds (optional)
    // setTempFaultThresholds(&tempSensor, -200.0f, 1000.0f); // -200°C to 1000°C
    // setColdJunctionFaultThresholds(&tempSensor, -40, 85);   // -40°C to 85°C
}
 8004912:	bf00      	nop
 8004914:	3720      	adds	r7, #32
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	20000840 	.word	0x20000840
 8004920:	2000037c 	.word	0x2000037c
 8004924:	3dcccccd 	.word	0x3dcccccd
 8004928:	42480000 	.word	0x42480000
 800492c:	20000398 	.word	0x20000398

08004930 <_ZN13Thermocouples12stateMachineEv>:

void Thermocouples::stateMachine(void)
{
 8004930:	b5b0      	push	{r4, r5, r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af04      	add	r7, sp, #16
 8004936:	6078      	str	r0, [r7, #4]
    if (!delay)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	2b00      	cmp	r3, #0
 800493e:	bf0c      	ite	eq
 8004940:	2301      	moveq	r3, #1
 8004942:	2300      	movne	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 8131 	beq.w	8004bae <_ZN13Thermocouples12stateMachineEv+0x27e>
    {
        // SPI_Set_Mode(1);
        rightRawTemp = (int32_t)right.readThermocoupleTemperature();
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	330c      	adds	r3, #12
 8004950:	4618      	mov	r0, r3
 8004952:	f7ff fbf4 	bl	800413e <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv>
 8004956:	4603      	mov	r3, r0
 8004958:	461a      	mov	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	641a      	str	r2, [r3, #64]	@ 0x40
        leftRawTemp = (int32_t)left.readThermocoupleTemperature();
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff fbec 	bl	800413e <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv>
 8004966:	4603      	mov	r3, r0
 8004968:	461a      	mov	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	63da      	str	r2, [r3, #60]	@ 0x3c
        // SPI_Set_Mode(0);
        //  deltaTemp = deltaTemp + ((rightTemp - leftTemp) - deltaTemp) * 0.9; // leaky integrator with a gain of 0.9
        //  Average two sensors, or use one

        currentTime = HAL_GetTick();
 800496e:	f002 fde9 	bl	8007544 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	635a      	str	r2, [r3, #52]	@ 0x34

        rightTemp = rightRawTemp;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497c:	ee07 3a90 	vmov	s15, r3
 8004980:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
        leftTemp = leftRawTemp;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800498e:	ee07 3a90 	vmov	s15, r3
 8004992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

        rf.measurement = 0.0078125f * (rightTemp); // deg c
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80049a2:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8004bb8 <_ZN13Thermocouples12stateMachineEv+0x288>
 80049a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049aa:	4b84      	ldr	r3, [pc, #528]	@ (8004bbc <_ZN13Thermocouples12stateMachineEv+0x28c>)
 80049ac:	edc3 7a00 	vstr	s15, [r3]
        lf.measurement = 0.0078125f * (leftTemp);  // deg c
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80049b6:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8004bb8 <_ZN13Thermocouples12stateMachineEv+0x288>
 80049ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049be:	4b80      	ldr	r3, [pc, #512]	@ (8004bc0 <_ZN13Thermocouples12stateMachineEv+0x290>)
 80049c0:	edc3 7a00 	vstr	s15, [r3]
                                                   //
        rf.error = rf.error + rf.process_variance;
 80049c4:	4b7d      	ldr	r3, [pc, #500]	@ (8004bbc <_ZN13Thermocouples12stateMachineEv+0x28c>)
 80049c6:	ed93 7a02 	vldr	s14, [r3, #8]
 80049ca:	4b7c      	ldr	r3, [pc, #496]	@ (8004bbc <_ZN13Thermocouples12stateMachineEv+0x28c>)
 80049cc:	edd3 7a05 	vldr	s15, [r3, #20]
 80049d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049d4:	4b79      	ldr	r3, [pc, #484]	@ (8004bbc <_ZN13Thermocouples12stateMachineEv+0x28c>)
 80049d6:	edc3 7a02 	vstr	s15, [r3, #8]
        rf.gain = rf.error / (rf.error + rf.measurement_variance);
 80049da:	4b78      	ldr	r3, [pc, #480]	@ (8004bbc <_ZN13Thermocouples12stateMachineEv+0x28c>)
 80049dc:	edd3 6a02 	vldr	s13, [r3, #8]
 80049e0:	4b76      	ldr	r3, [pc, #472]	@ (8004bbc <_ZN13Thermocouples12stateMachineEv+0x28c>)
 80049e2:	ed93 7a02 	vldr	s14, [r3, #8]
 80049e6:	4b75      	ldr	r3, [pc, #468]	@ (8004bbc <_ZN13Thermocouples12stateMachineEv+0x28c>)
 80049e8:	edd3 7a06 	vldr	s15, [r3, #24]
 80049ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80049f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049f4:	4b71      	ldr	r3, [pc, #452]	@ (8004bbc <_ZN13Thermocouples12stateMachineEv+0x28c>)
 80049f6:	edc3 7a03 	vstr	s15, [r3, #12]
        rf.estimate = rf.estimate + rf.gain * (rf.measurement - rf.estimate);
 80049fa:	4b70      	ldr	r3, [pc, #448]	@ (8004bbc <_ZN13Thermocouples12stateMachineEv+0x28c>)
 80049fc:	ed93 7a04 	vldr	s14, [r3, #16]
 8004a00:	4b6e      	ldr	r3, [pc, #440]	@ (8004bbc <_ZN13Thermocouples12stateMachineEv+0x28c>)
 8004a02:	edd3 6a03 	vldr	s13, [r3, #12]
 8004a06:	4b6d      	ldr	r3, [pc, #436]	@ (8004bbc <_ZN13Thermocouples12stateMachineEv+0x28c>)
 8004a08:	ed93 6a00 	vldr	s12, [r3]
 8004a0c:	4b6b      	ldr	r3, [pc, #428]	@ (8004bbc <_ZN13Thermocouples12stateMachineEv+0x28c>)
 8004a0e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004a12:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004a16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a1e:	4b67      	ldr	r3, [pc, #412]	@ (8004bbc <_ZN13Thermocouples12stateMachineEv+0x28c>)
 8004a20:	edc3 7a04 	vstr	s15, [r3, #16]
        rf.error = (1.0 - rf.gain) * rf.error;
 8004a24:	4b65      	ldr	r3, [pc, #404]	@ (8004bbc <_ZN13Thermocouples12stateMachineEv+0x28c>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7fb fd65 	bl	80004f8 <__aeabi_f2d>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	460b      	mov	r3, r1
 8004a32:	f04f 0000 	mov.w	r0, #0
 8004a36:	4963      	ldr	r1, [pc, #396]	@ (8004bc4 <_ZN13Thermocouples12stateMachineEv+0x294>)
 8004a38:	f7fb fbfe 	bl	8000238 <__aeabi_dsub>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	4614      	mov	r4, r2
 8004a42:	461d      	mov	r5, r3
 8004a44:	4b5d      	ldr	r3, [pc, #372]	@ (8004bbc <_ZN13Thermocouples12stateMachineEv+0x28c>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7fb fd55 	bl	80004f8 <__aeabi_f2d>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	460b      	mov	r3, r1
 8004a52:	4620      	mov	r0, r4
 8004a54:	4629      	mov	r1, r5
 8004a56:	f7fb fda7 	bl	80005a8 <__aeabi_dmul>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4610      	mov	r0, r2
 8004a60:	4619      	mov	r1, r3
 8004a62:	f7fc f879 	bl	8000b58 <__aeabi_d2f>
 8004a66:	4603      	mov	r3, r0
 8004a68:	4a54      	ldr	r2, [pc, #336]	@ (8004bbc <_ZN13Thermocouples12stateMachineEv+0x28c>)
 8004a6a:	6093      	str	r3, [r2, #8]
        //
        lf.error = lf.error + lf.process_variance;
 8004a6c:	4b54      	ldr	r3, [pc, #336]	@ (8004bc0 <_ZN13Thermocouples12stateMachineEv+0x290>)
 8004a6e:	ed93 7a02 	vldr	s14, [r3, #8]
 8004a72:	4b53      	ldr	r3, [pc, #332]	@ (8004bc0 <_ZN13Thermocouples12stateMachineEv+0x290>)
 8004a74:	edd3 7a05 	vldr	s15, [r3, #20]
 8004a78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a7c:	4b50      	ldr	r3, [pc, #320]	@ (8004bc0 <_ZN13Thermocouples12stateMachineEv+0x290>)
 8004a7e:	edc3 7a02 	vstr	s15, [r3, #8]
        lf.gain = lf.error / (lf.error + lf.measurement_variance);
 8004a82:	4b4f      	ldr	r3, [pc, #316]	@ (8004bc0 <_ZN13Thermocouples12stateMachineEv+0x290>)
 8004a84:	edd3 6a02 	vldr	s13, [r3, #8]
 8004a88:	4b4d      	ldr	r3, [pc, #308]	@ (8004bc0 <_ZN13Thermocouples12stateMachineEv+0x290>)
 8004a8a:	ed93 7a02 	vldr	s14, [r3, #8]
 8004a8e:	4b4c      	ldr	r3, [pc, #304]	@ (8004bc0 <_ZN13Thermocouples12stateMachineEv+0x290>)
 8004a90:	edd3 7a06 	vldr	s15, [r3, #24]
 8004a94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a9c:	4b48      	ldr	r3, [pc, #288]	@ (8004bc0 <_ZN13Thermocouples12stateMachineEv+0x290>)
 8004a9e:	edc3 7a03 	vstr	s15, [r3, #12]
        lf.estimate = lf.estimate + lf.gain * (lf.measurement - lf.estimate);
 8004aa2:	4b47      	ldr	r3, [pc, #284]	@ (8004bc0 <_ZN13Thermocouples12stateMachineEv+0x290>)
 8004aa4:	ed93 7a04 	vldr	s14, [r3, #16]
 8004aa8:	4b45      	ldr	r3, [pc, #276]	@ (8004bc0 <_ZN13Thermocouples12stateMachineEv+0x290>)
 8004aaa:	edd3 6a03 	vldr	s13, [r3, #12]
 8004aae:	4b44      	ldr	r3, [pc, #272]	@ (8004bc0 <_ZN13Thermocouples12stateMachineEv+0x290>)
 8004ab0:	ed93 6a00 	vldr	s12, [r3]
 8004ab4:	4b42      	ldr	r3, [pc, #264]	@ (8004bc0 <_ZN13Thermocouples12stateMachineEv+0x290>)
 8004ab6:	edd3 7a04 	vldr	s15, [r3, #16]
 8004aba:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004abe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ac6:	4b3e      	ldr	r3, [pc, #248]	@ (8004bc0 <_ZN13Thermocouples12stateMachineEv+0x290>)
 8004ac8:	edc3 7a04 	vstr	s15, [r3, #16]
        lf.error = (1.0 - lf.gain) * lf.error;
 8004acc:	4b3c      	ldr	r3, [pc, #240]	@ (8004bc0 <_ZN13Thermocouples12stateMachineEv+0x290>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7fb fd11 	bl	80004f8 <__aeabi_f2d>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	460b      	mov	r3, r1
 8004ada:	f04f 0000 	mov.w	r0, #0
 8004ade:	4939      	ldr	r1, [pc, #228]	@ (8004bc4 <_ZN13Thermocouples12stateMachineEv+0x294>)
 8004ae0:	f7fb fbaa 	bl	8000238 <__aeabi_dsub>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	4614      	mov	r4, r2
 8004aea:	461d      	mov	r5, r3
 8004aec:	4b34      	ldr	r3, [pc, #208]	@ (8004bc0 <_ZN13Thermocouples12stateMachineEv+0x290>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7fb fd01 	bl	80004f8 <__aeabi_f2d>
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	4620      	mov	r0, r4
 8004afc:	4629      	mov	r1, r5
 8004afe:	f7fb fd53 	bl	80005a8 <__aeabi_dmul>
 8004b02:	4602      	mov	r2, r0
 8004b04:	460b      	mov	r3, r1
 8004b06:	4610      	mov	r0, r2
 8004b08:	4619      	mov	r1, r3
 8004b0a:	f7fc f825 	bl	8000b58 <__aeabi_d2f>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	4a2b      	ldr	r2, [pc, #172]	@ (8004bc0 <_ZN13Thermocouples12stateMachineEv+0x290>)
 8004b12:	6093      	str	r3, [r2, #8]

        deltaTemp = (rf.estimate - lf.estimate) * 35.0;
 8004b14:	4b29      	ldr	r3, [pc, #164]	@ (8004bbc <_ZN13Thermocouples12stateMachineEv+0x28c>)
 8004b16:	ed93 7a04 	vldr	s14, [r3, #16]
 8004b1a:	4b29      	ldr	r3, [pc, #164]	@ (8004bc0 <_ZN13Thermocouples12stateMachineEv+0x290>)
 8004b1c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004b20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b24:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8004bc8 <_ZN13Thermocouples12stateMachineEv+0x298>
 8004b28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b2c:	4b27      	ldr	r3, [pc, #156]	@ (8004bcc <_ZN13Thermocouples12stateMachineEv+0x29c>)
 8004b2e:	edc3 7a00 	vstr	s15, [r3]
        // CDC_Transmit_FS((uint8_t *)usbBuffer, strlen(usbBuffer));
        //
        // snprintf(usbBuffer, sizeof(usbBuffer), "Delta T: %f.2 Deg C\r\n", convertToTemperature(deltaTemp));
        // CDC_Transmit_FS((uint8_t *)usbBuffer, strlen(usbBuffer));

        snprintf((char *)UART_BUFFER, sizeof(UART_BUFFER), "Left: %f  Right: %f\r\n", lf.measurement, rf.measurement);
 8004b32:	4b23      	ldr	r3, [pc, #140]	@ (8004bc0 <_ZN13Thermocouples12stateMachineEv+0x290>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fb fcde 	bl	80004f8 <__aeabi_f2d>
 8004b3c:	4604      	mov	r4, r0
 8004b3e:	460d      	mov	r5, r1
 8004b40:	4b1e      	ldr	r3, [pc, #120]	@ (8004bbc <_ZN13Thermocouples12stateMachineEv+0x28c>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7fb fcd7 	bl	80004f8 <__aeabi_f2d>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004b52:	e9cd 4500 	strd	r4, r5, [sp]
 8004b56:	4a1e      	ldr	r2, [pc, #120]	@ (8004bd0 <_ZN13Thermocouples12stateMachineEv+0x2a0>)
 8004b58:	2140      	movs	r1, #64	@ 0x40
 8004b5a:	481e      	ldr	r0, [pc, #120]	@ (8004bd4 <_ZN13Thermocouples12stateMachineEv+0x2a4>)
 8004b5c:	f015 fb12 	bl	801a184 <sniprintf>
        HAL_UART_Transmit(&huart1, UART_BUFFER, strlen((char *)UART_BUFFER), 300);
 8004b60:	481c      	ldr	r0, [pc, #112]	@ (8004bd4 <_ZN13Thermocouples12stateMachineEv+0x2a4>)
 8004b62:	f7fb fb5d 	bl	8000220 <strlen>
 8004b66:	4603      	mov	r3, r0
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004b6e:	4919      	ldr	r1, [pc, #100]	@ (8004bd4 <_ZN13Thermocouples12stateMachineEv+0x2a4>)
 8004b70:	4819      	ldr	r0, [pc, #100]	@ (8004bd8 <_ZN13Thermocouples12stateMachineEv+0x2a8>)
 8004b72:	f00a f993 	bl	800ee9c <HAL_UART_Transmit>

        snprintf((char *)UART_BUFFER, sizeof(UART_BUFFER), "Delta Temp: %f\r\n", deltaTemp);
 8004b76:	4b15      	ldr	r3, [pc, #84]	@ (8004bcc <_ZN13Thermocouples12stateMachineEv+0x29c>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7fb fcbc 	bl	80004f8 <__aeabi_f2d>
 8004b80:	4602      	mov	r2, r0
 8004b82:	460b      	mov	r3, r1
 8004b84:	e9cd 2300 	strd	r2, r3, [sp]
 8004b88:	4a14      	ldr	r2, [pc, #80]	@ (8004bdc <_ZN13Thermocouples12stateMachineEv+0x2ac>)
 8004b8a:	2140      	movs	r1, #64	@ 0x40
 8004b8c:	4811      	ldr	r0, [pc, #68]	@ (8004bd4 <_ZN13Thermocouples12stateMachineEv+0x2a4>)
 8004b8e:	f015 faf9 	bl	801a184 <sniprintf>
        HAL_UART_Transmit(&huart1, UART_BUFFER, strlen((char *)UART_BUFFER), 300);
 8004b92:	4810      	ldr	r0, [pc, #64]	@ (8004bd4 <_ZN13Thermocouples12stateMachineEv+0x2a4>)
 8004b94:	f7fb fb44 	bl	8000220 <strlen>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004ba0:	490c      	ldr	r1, [pc, #48]	@ (8004bd4 <_ZN13Thermocouples12stateMachineEv+0x2a4>)
 8004ba2:	480d      	ldr	r0, [pc, #52]	@ (8004bd8 <_ZN13Thermocouples12stateMachineEv+0x2a8>)
 8004ba4:	f00a f97a 	bl	800ee9c <HAL_UART_Transmit>

        delay = 1; // 50 ms
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	619a      	str	r2, [r3, #24]
    }
}
 8004bae:	bf00      	nop
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bdb0      	pop	{r4, r5, r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	3c000000 	.word	0x3c000000
 8004bbc:	2000037c 	.word	0x2000037c
 8004bc0:	20000398 	.word	0x20000398
 8004bc4:	3ff00000 	.word	0x3ff00000
 8004bc8:	420c0000 	.word	0x420c0000
 8004bcc:	20000378 	.word	0x20000378
 8004bd0:	0801c2d8 	.word	0x0801c2d8
 8004bd4:	200004e4 	.word	0x200004e4
 8004bd8:	20000a04 	.word	0x20000a04
 8004bdc:	0801c2f0 	.word	0x0801c2f0

08004be0 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8004be0:	b5b0      	push	{r4, r5, r7, lr}
 8004be2:	b088      	sub	sp, #32
 8004be4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8004be6:	4b0b      	ldr	r3, [pc, #44]	@ (8004c14 <APPD_EnableCPU2+0x34>)
 8004be8:	1d3c      	adds	r4, r7, #4
 8004bea:	461d      	mov	r5, r3
 8004bec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bf0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004bf4:	c403      	stmia	r4!, {r0, r1}
 8004bf6:	8022      	strh	r2, [r4, #0]
 8004bf8:	3402      	adds	r4, #2
 8004bfa:	0c13      	lsrs	r3, r2, #16
 8004bfc:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8004bfe:	f010 fd9b 	bl	8015738 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8004c02:	1d3b      	adds	r3, r7, #4
 8004c04:	4618      	mov	r0, r3
 8004c06:	f010 f82c 	bl	8014c62 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8004c0a:	bf00      	nop
}
 8004c0c:	3720      	adds	r7, #32
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bdb0      	pop	{r4, r5, r7, pc}
 8004c12:	bf00      	nop
 8004c14:	0801c304 	.word	0x0801c304

08004c18 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8004c20:	4b07      	ldr	r3, [pc, #28]	@ (8004c40 <LL_C2_PWR_SetPowerMode+0x28>)
 8004c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c26:	f023 0207 	bic.w	r2, r3, #7
 8004c2a:	4905      	ldr	r1, [pc, #20]	@ (8004c40 <LL_C2_PWR_SetPowerMode+0x28>)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	58000400 	.word	0x58000400

08004c44 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004c4c:	4b06      	ldr	r3, [pc, #24]	@ (8004c68 <LL_EXTI_EnableIT_32_63+0x24>)
 8004c4e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004c52:	4905      	ldr	r1, [pc, #20]	@ (8004c68 <LL_EXTI_EnableIT_32_63+0x24>)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	58000800 	.word	0x58000800

08004c6c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8004c74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c78:	4a0a      	ldr	r2, [pc, #40]	@ (8004ca4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8004c7a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8004c7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c86:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	021b      	lsls	r3, r3, #8
 8004c8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c92:	4313      	orrs	r3, r2
 8004c94:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	cafecafe 	.word	0xcafecafe

08004ca8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8004cb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004cba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	608b      	str	r3, [r1, #8]
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8004cd4:	4b04      	ldr	r3, [pc, #16]	@ (8004ce8 <LL_DBGMCU_GetDeviceID+0x18>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	e0042000 	.word	0xe0042000

08004cec <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8004cf0:	4b04      	ldr	r3, [pc, #16]	@ (8004d04 <LL_DBGMCU_GetRevisionID+0x18>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	0c1b      	lsrs	r3, r3, #16
 8004cf6:	b29b      	uxth	r3, r3
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	e0042000 	.word	0xe0042000

08004d08 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004d0c:	4b05      	ldr	r3, [pc, #20]	@ (8004d24 <LL_LPM_EnableSleep+0x1c>)
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	4a04      	ldr	r2, [pc, #16]	@ (8004d24 <LL_LPM_EnableSleep+0x1c>)
 8004d12:	f023 0304 	bic.w	r3, r3, #4
 8004d16:	6113      	str	r3, [r2, #16]
}
 8004d18:	bf00      	nop
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	e000ed00 	.word	0xe000ed00

08004d28 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	22ff      	movs	r2, #255	@ 0xff
 8004d34:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004d36:	bf00      	nop
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b083      	sub	sp, #12
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	22ca      	movs	r2, #202	@ 0xca
 8004d4e:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2253      	movs	r2, #83	@ 0x53
 8004d54:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004d56:	bf00      	nop
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b083      	sub	sp, #12
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
 8004d6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f023 0207 	bic.w	r2, r3, #7
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	431a      	orrs	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	609a      	str	r2, [r3, #8]
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8004d8c:	4b04      	ldr	r3, [pc, #16]	@ (8004da0 <MX_APPE_Config+0x18>)
 8004d8e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004d92:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8004d94:	f000 f824 	bl	8004de0 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8004d98:	f000 f829 	bl	8004dee <Config_HSE>

  return;
 8004d9c:	bf00      	nop
}
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	58004000 	.word	0x58004000

08004da4 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8004da8:	f000 f835 	bl	8004e16 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8004dac:	f000 f84e 	bl	8004e4c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8004db0:	4903      	ldr	r1, [pc, #12]	@ (8004dc0 <MX_APPE_Init+0x1c>)
 8004db2:	2000      	movs	r0, #0
 8004db4:	f000 fe20 	bl	80059f8 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8004db8:	f000 f856 	bl	8004e68 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8004dbc:	bf00      	nop
}
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	2000081c 	.word	0x2000081c

08004dc4 <Init_Smps>:

void Init_Smps(void)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8004dc8:	bf00      	nop
}
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <Init_Exti>:

void Init_Exti(void)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8004dd6:	2050      	movs	r0, #80	@ 0x50
 8004dd8:	f7ff ff34 	bl	8004c44 <LL_EXTI_EnableIT_32_63>

  return;
 8004ddc:	bf00      	nop
}
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8004de4:	bf00      	nop
}
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b082      	sub	sp, #8
 8004df2:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8004df4:	2000      	movs	r0, #0
 8004df6:	f010 fd2b 	bl	8015850 <OTP_Read>
 8004dfa:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d005      	beq.n	8004e0e <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	799b      	ldrb	r3, [r3, #6]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff ff30 	bl	8004c6c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8004e0c:	bf00      	nop
 8004e0e:	bf00      	nop
}
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <System_Init>:

static void System_Init(void)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	af00      	add	r7, sp, #0
  Init_Smps();
 8004e1a:	f7ff ffd3 	bl	8004dc4 <Init_Smps>

  Init_Exti();
 8004e1e:	f7ff ffd8 	bl	8004dd2 <Init_Exti>

  Init_Rtc();
 8004e22:	f000 f803 	bl	8004e2c <Init_Rtc>

  return;
 8004e26:	bf00      	nop
}
 8004e28:	bd80      	pop	{r7, pc}
	...

08004e2c <Init_Rtc>:

static void Init_Rtc(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8004e30:	4805      	ldr	r0, [pc, #20]	@ (8004e48 <Init_Rtc+0x1c>)
 8004e32:	f7ff ff86 	bl	8004d42 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8004e36:	2100      	movs	r1, #0
 8004e38:	4803      	ldr	r0, [pc, #12]	@ (8004e48 <Init_Rtc+0x1c>)
 8004e3a:	f7ff ff92 	bl	8004d62 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8004e3e:	4802      	ldr	r0, [pc, #8]	@ (8004e48 <Init_Rtc+0x1c>)
 8004e40:	f7ff ff72 	bl	8004d28 <LL_RTC_EnableWriteProtection>

  return;
 8004e44:	bf00      	nop
}
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	40002800 	.word	0x40002800

08004e4c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8004e50:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004e54:	f7ff ff28 	bl	8004ca8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8004e58:	f013 fbd8 	bl	801860c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8004e5c:	2004      	movs	r0, #4
 8004e5e:	f7ff fedb 	bl	8004c18 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8004e62:	bf00      	nop
}
 8004e64:	bd80      	pop	{r7, pc}
	...

08004e68 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b088      	sub	sp, #32
 8004e6c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8004e6e:	f010 faad 	bl	80153cc <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8004e72:	4a11      	ldr	r2, [pc, #68]	@ (8004eb8 <appe_Tl_Init+0x50>)
 8004e74:	2100      	movs	r1, #0
 8004e76:	2008      	movs	r0, #8
 8004e78:	f013 fd06 	bl	8018888 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8004e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8004ebc <appe_Tl_Init+0x54>)
 8004e7e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8004e80:	4b0f      	ldr	r3, [pc, #60]	@ (8004ec0 <appe_Tl_Init+0x58>)
 8004e82:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8004e84:	463b      	mov	r3, r7
 8004e86:	4619      	mov	r1, r3
 8004e88:	480e      	ldr	r0, [pc, #56]	@ (8004ec4 <appe_Tl_Init+0x5c>)
 8004e8a:	f010 f961 	bl	8015150 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8004e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8004ec8 <appe_Tl_Init+0x60>)
 8004e90:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8004e92:	4b0e      	ldr	r3, [pc, #56]	@ (8004ecc <appe_Tl_Init+0x64>)
 8004e94:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8004e96:	4b0e      	ldr	r3, [pc, #56]	@ (8004ed0 <appe_Tl_Init+0x68>)
 8004e98:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8004e9a:	f240 533c 	movw	r3, #1340	@ 0x53c
 8004e9e:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8004ea0:	f107 0308 	add.w	r3, r7, #8
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f010 fbd3 	bl	8015650 <TL_MM_Init>

  TL_Enable();
 8004eaa:	f010 fa89 	bl	80153c0 <TL_Enable>

  return;
 8004eae:	bf00      	nop
}
 8004eb0:	3720      	adds	r7, #32
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	08015189 	.word	0x08015189
 8004ebc:	20030734 	.word	0x20030734
 8004ec0:	08004ed5 	.word	0x08004ed5
 8004ec4:	08004eed 	.word	0x08004eed
 8004ec8:	2003094c 	.word	0x2003094c
 8004ecc:	20030840 	.word	0x20030840
 8004ed0:	200301f8 	.word	0x200301f8

08004ed4 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	4603      	mov	r3, r0
 8004edc:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8004ede:	bf00      	nop
}
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
	...

08004eec <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b088      	sub	sp, #32
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	330b      	adds	r3, #11
 8004efa:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	881b      	ldrh	r3, [r3, #0]
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8004f06:	2b07      	cmp	r3, #7
 8004f08:	d81f      	bhi.n	8004f4a <APPE_SysUserEvtRx+0x5e>
 8004f0a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f10 <APPE_SysUserEvtRx+0x24>)
 8004f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f10:	08004f31 	.word	0x08004f31
 8004f14:	08004f43 	.word	0x08004f43
 8004f18:	08004f4b 	.word	0x08004f4b
 8004f1c:	08004f4b 	.word	0x08004f4b
 8004f20:	08004f4b 	.word	0x08004f4b
 8004f24:	08004f4b 	.word	0x08004f4b
 8004f28:	08004f4b 	.word	0x08004f4b
 8004f2c:	08004f4b 	.word	0x08004f4b
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8004f30:	f107 030c 	add.w	r3, r7, #12
 8004f34:	4618      	mov	r0, r3
 8004f36:	f00f fec1 	bl	8014cbc <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f81b 	bl	8004f76 <APPE_SysEvtReadyProcessing>
    break;
 8004f40:	e004      	b.n	8004f4c <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f806 	bl	8004f54 <APPE_SysEvtError>
    break;
 8004f48:	e000      	b.n	8004f4c <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8004f4a:	bf00      	nop
  }

  return;
 8004f4c:	bf00      	nop
}
 8004f4e:	3720      	adds	r7, #32
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	330b      	adds	r3, #11
 8004f62:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	3302      	adds	r3, #2
 8004f68:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8004f6a:	bf00      	nop
}
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b08a      	sub	sp, #40	@ 0x28
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8004f7e:	f107 0308 	add.w	r3, r7, #8
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	605a      	str	r2, [r3, #4]
 8004f88:	609a      	str	r2, [r3, #8]
 8004f8a:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8004f90:	2300      	movs	r3, #0
 8004f92:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	330b      	adds	r3, #11
 8004f9a:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	3302      	adds	r3, #2
 8004fa0:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d11d      	bne.n	8004fe6 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8004faa:	f7ff fe19 	bl	8004be0 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8004fae:	230f      	movs	r3, #15
 8004fb0:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8004fb2:	237f      	movs	r3, #127	@ 0x7f
 8004fb4:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8004fb6:	f7ff fe99 	bl	8004cec <LL_DBGMCU_GetRevisionID>
 8004fba:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8004fc2:	f7ff fe85 	bl	8004cd0 <LL_DBGMCU_GetDeviceID>
 8004fc6:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8004fce:	f107 0308 	add.w	r3, r7, #8
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f00f fe5c 	bl	8014c90 <SHCI_C2_Config>

    APP_BLE_Init();
 8004fd8:	f010 fd44 	bl	8015a64 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8004fdc:	2100      	movs	r1, #0
 8004fde:	2001      	movs	r0, #1
 8004fe0:	f013 fb26 	bl	8018630 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8004fe4:	e007      	b.n	8004ff6 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d103      	bne.n	8004ff6 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	701a      	strb	r2, [r3, #0]
  return;
 8004ff4:	bf00      	nop
 8004ff6:	bf00      	nop
}
 8004ff8:	3728      	adds	r7, #40	@ 0x28
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b084      	sub	sp, #16
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005006:	f002 fa9d 	bl	8007544 <HAL_GetTick>
 800500a:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005016:	d00a      	beq.n	800502e <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8005018:	f002 faac 	bl	8007574 <HAL_GetTickFreq>
 800501c:	4603      	mov	r3, r0
 800501e:	461a      	mov	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4413      	add	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005026:	e002      	b.n	800502e <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8005028:	f7ff fe6e 	bl	8004d08 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 800502c:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 800502e:	f002 fa89 	bl	8007544 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	429a      	cmp	r2, r3
 800503c:	d8f4      	bhi.n	8005028 <HAL_Delay+0x2a>
  }
}
 800503e:	bf00      	nop
 8005040:	bf00      	nop
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800504c:	f04f 30ff 	mov.w	r0, #4294967295
 8005050:	f013 fb1e 	bl	8018690 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8005054:	bf00      	nop
 8005056:	bd80      	pop	{r7, pc}

08005058 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8005058:	b480      	push	{r7}
 800505a:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800505c:	bf00      	nop
}
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b082      	sub	sp, #8
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800506e:	2100      	movs	r1, #0
 8005070:	2008      	movs	r0, #8
 8005072:	f013 fc2b 	bl	80188cc <UTIL_SEQ_SetTask>
  return;
 8005076:	bf00      	nop
}
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b082      	sub	sp, #8
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8005086:	2002      	movs	r0, #2
 8005088:	f013 fc8c 	bl	80189a4 <UTIL_SEQ_SetEvt>
  return;
 800508c:	bf00      	nop
}
 800508e:	3708      	adds	r7, #8
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800509c:	2002      	movs	r0, #2
 800509e:	f013 fca1 	bl	80189e4 <UTIL_SEQ_WaitEvt>
  return;
 80050a2:	bf00      	nop
}
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b085      	sub	sp, #20
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80050b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80050b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4313      	orrs	r3, r2
 80050c0:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80050c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050c6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4013      	ands	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80050ce:	68fb      	ldr	r3, [r7, #12]
}
 80050d0:	bf00      	nop
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80050e0:	2004      	movs	r0, #4
 80050e2:	f7ff ffe2 	bl	80050aa <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80050e6:	2001      	movs	r0, #1
 80050e8:	f7ff ffdf 	bl	80050aa <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80050ec:	2200      	movs	r2, #0
 80050ee:	2100      	movs	r1, #0
 80050f0:	200b      	movs	r0, #11
 80050f2:	f002 fb86 	bl	8007802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80050f6:	200b      	movs	r0, #11
 80050f8:	f002 fb9d 	bl	8007836 <HAL_NVIC_EnableIRQ>

}
 80050fc:	bf00      	nop
 80050fe:	bd80      	pop	{r7, pc}

08005100 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005108:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800510c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800510e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4313      	orrs	r3, r2
 8005116:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005118:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800511c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4013      	ands	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005124:	68fb      	ldr	r3, [r7, #12]
}
 8005126:	bf00      	nop
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
	...

08005134 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800513a:	1d3b      	adds	r3, r7, #4
 800513c:	2200      	movs	r2, #0
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	605a      	str	r2, [r3, #4]
 8005142:	609a      	str	r2, [r3, #8]
 8005144:	60da      	str	r2, [r3, #12]
 8005146:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005148:	2004      	movs	r0, #4
 800514a:	f7ff ffd9 	bl	8005100 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800514e:	2002      	movs	r0, #2
 8005150:	f7ff ffd6 	bl	8005100 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005154:	2001      	movs	r0, #1
 8005156:	f7ff ffd3 	bl	8005100 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TFT_RESET_Pin|TFT_RS_DC_Pin|TFT_CS_Pin|TEMP1_CS_Pin
 800515a:	2200      	movs	r2, #0
 800515c:	f240 310e 	movw	r1, #782	@ 0x30e
 8005160:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005164:	f002 fff0 	bl	8008148 <HAL_GPIO_WritePin>
                          |TEMP2_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_RESET);
 8005168:	2200      	movs	r2, #0
 800516a:	2120      	movs	r1, #32
 800516c:	4817      	ldr	r0, [pc, #92]	@ (80051cc <MX_GPIO_Init+0x98>)
 800516e:	f002 ffeb 	bl	8008148 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TFT_RESET_Pin TFT_RS_DC_Pin TFT_CS_Pin TEMP1_CS_Pin
                           TEMP2_CS_Pin */
  GPIO_InitStruct.Pin = TFT_RESET_Pin|TFT_RS_DC_Pin|TFT_CS_Pin|TEMP1_CS_Pin
 8005172:	f240 330e 	movw	r3, #782	@ 0x30e
 8005176:	607b      	str	r3, [r7, #4]
                          |TEMP2_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005178:	2301      	movs	r3, #1
 800517a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800517c:	2300      	movs	r3, #0
 800517e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005180:	2300      	movs	r3, #0
 8005182:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005184:	1d3b      	adds	r3, r7, #4
 8005186:	4619      	mov	r1, r3
 8005188:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800518c:	f002 fe6c 	bl	8007e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEMP1_DRDY_Pin TEMP2_DRDY_Pin */
  GPIO_InitStruct.Pin = TEMP1_DRDY_Pin|TEMP2_DRDY_Pin;
 8005190:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8005194:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005196:	2300      	movs	r3, #0
 8005198:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800519a:	2300      	movs	r3, #0
 800519c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800519e:	1d3b      	adds	r3, r7, #4
 80051a0:	4619      	mov	r1, r3
 80051a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80051a6:	f002 fe5f 	bl	8007e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CS_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin;
 80051aa:	2320      	movs	r3, #32
 80051ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051ae:	2301      	movs	r3, #1
 80051b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b2:	2300      	movs	r3, #0
 80051b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051b6:	2300      	movs	r3, #0
 80051b8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ADC_CS_GPIO_Port, &GPIO_InitStruct);
 80051ba:	1d3b      	adds	r3, r7, #4
 80051bc:	4619      	mov	r1, r3
 80051be:	4803      	ldr	r0, [pc, #12]	@ (80051cc <MX_GPIO_Init+0x98>)
 80051c0:	f002 fe52 	bl	8007e68 <HAL_GPIO_Init>

}
 80051c4:	bf00      	nop
 80051c6:	3718      	adds	r7, #24
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	48000400 	.word	0x48000400

080051d0 <LL_EXTI_EnableIT_0_31>:
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80051d8:	4b06      	ldr	r3, [pc, #24]	@ (80051f4 <LL_EXTI_EnableIT_0_31+0x24>)
 80051da:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80051de:	4905      	ldr	r1, [pc, #20]	@ (80051f4 <LL_EXTI_EnableIT_0_31+0x24>)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr
 80051f4:	58000800 	.word	0x58000800

080051f8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005200:	4b05      	ldr	r3, [pc, #20]	@ (8005218 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	4904      	ldr	r1, [pc, #16]	@ (8005218 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4313      	orrs	r3, r2
 800520a:	600b      	str	r3, [r1, #0]

}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	58000800 	.word	0x58000800

0800521c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8005222:	4b0d      	ldr	r3, [pc, #52]	@ (8005258 <ReadRtcSsrValue+0x3c>)
 8005224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005226:	b29b      	uxth	r3, r3
 8005228:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800522a:	4b0b      	ldr	r3, [pc, #44]	@ (8005258 <ReadRtcSsrValue+0x3c>)
 800522c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800522e:	b29b      	uxth	r3, r3
 8005230:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8005232:	e005      	b.n	8005240 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8005238:	4b07      	ldr	r3, [pc, #28]	@ (8005258 <ReadRtcSsrValue+0x3c>)
 800523a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800523c:	b29b      	uxth	r3, r3
 800523e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	429a      	cmp	r2, r3
 8005246:	d1f5      	bne.n	8005234 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8005248:	683b      	ldr	r3, [r7, #0]
}
 800524a:	4618      	mov	r0, r3
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	40002800 	.word	0x40002800

0800525c <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	4603      	mov	r3, r0
 8005264:	460a      	mov	r2, r1
 8005266:	71fb      	strb	r3, [r7, #7]
 8005268:	4613      	mov	r3, r2
 800526a:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 800526c:	79ba      	ldrb	r2, [r7, #6]
 800526e:	491d      	ldr	r1, [pc, #116]	@ (80052e4 <LinkTimerAfter+0x88>)
 8005270:	4613      	mov	r3, r2
 8005272:	005b      	lsls	r3, r3, #1
 8005274:	4413      	add	r3, r2
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	440b      	add	r3, r1
 800527a:	3315      	adds	r3, #21
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8005280:	7bfb      	ldrb	r3, [r7, #15]
 8005282:	2b06      	cmp	r3, #6
 8005284:	d009      	beq.n	800529a <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8005286:	7bfa      	ldrb	r2, [r7, #15]
 8005288:	4916      	ldr	r1, [pc, #88]	@ (80052e4 <LinkTimerAfter+0x88>)
 800528a:	4613      	mov	r3, r2
 800528c:	005b      	lsls	r3, r3, #1
 800528e:	4413      	add	r3, r2
 8005290:	00db      	lsls	r3, r3, #3
 8005292:	440b      	add	r3, r1
 8005294:	3314      	adds	r3, #20
 8005296:	79fa      	ldrb	r2, [r7, #7]
 8005298:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800529a:	79fa      	ldrb	r2, [r7, #7]
 800529c:	4911      	ldr	r1, [pc, #68]	@ (80052e4 <LinkTimerAfter+0x88>)
 800529e:	4613      	mov	r3, r2
 80052a0:	005b      	lsls	r3, r3, #1
 80052a2:	4413      	add	r3, r2
 80052a4:	00db      	lsls	r3, r3, #3
 80052a6:	440b      	add	r3, r1
 80052a8:	3315      	adds	r3, #21
 80052aa:	7bfa      	ldrb	r2, [r7, #15]
 80052ac:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80052ae:	79fa      	ldrb	r2, [r7, #7]
 80052b0:	490c      	ldr	r1, [pc, #48]	@ (80052e4 <LinkTimerAfter+0x88>)
 80052b2:	4613      	mov	r3, r2
 80052b4:	005b      	lsls	r3, r3, #1
 80052b6:	4413      	add	r3, r2
 80052b8:	00db      	lsls	r3, r3, #3
 80052ba:	440b      	add	r3, r1
 80052bc:	3314      	adds	r3, #20
 80052be:	79ba      	ldrb	r2, [r7, #6]
 80052c0:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80052c2:	79ba      	ldrb	r2, [r7, #6]
 80052c4:	4907      	ldr	r1, [pc, #28]	@ (80052e4 <LinkTimerAfter+0x88>)
 80052c6:	4613      	mov	r3, r2
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	4413      	add	r3, r2
 80052cc:	00db      	lsls	r3, r3, #3
 80052ce:	440b      	add	r3, r1
 80052d0:	3315      	adds	r3, #21
 80052d2:	79fa      	ldrb	r2, [r7, #7]
 80052d4:	701a      	strb	r2, [r3, #0]

  return;
 80052d6:	bf00      	nop
}
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	200003b4 	.word	0x200003b4

080052e8 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	4603      	mov	r3, r0
 80052f0:	460a      	mov	r2, r1
 80052f2:	71fb      	strb	r3, [r7, #7]
 80052f4:	4613      	mov	r3, r2
 80052f6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80052f8:	4b29      	ldr	r3, [pc, #164]	@ (80053a0 <LinkTimerBefore+0xb8>)
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	79ba      	ldrb	r2, [r7, #6]
 8005300:	429a      	cmp	r2, r3
 8005302:	d032      	beq.n	800536a <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8005304:	79ba      	ldrb	r2, [r7, #6]
 8005306:	4927      	ldr	r1, [pc, #156]	@ (80053a4 <LinkTimerBefore+0xbc>)
 8005308:	4613      	mov	r3, r2
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	4413      	add	r3, r2
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	440b      	add	r3, r1
 8005312:	3314      	adds	r3, #20
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8005318:	7bfa      	ldrb	r2, [r7, #15]
 800531a:	4922      	ldr	r1, [pc, #136]	@ (80053a4 <LinkTimerBefore+0xbc>)
 800531c:	4613      	mov	r3, r2
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	4413      	add	r3, r2
 8005322:	00db      	lsls	r3, r3, #3
 8005324:	440b      	add	r3, r1
 8005326:	3315      	adds	r3, #21
 8005328:	79fa      	ldrb	r2, [r7, #7]
 800532a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 800532c:	79fa      	ldrb	r2, [r7, #7]
 800532e:	491d      	ldr	r1, [pc, #116]	@ (80053a4 <LinkTimerBefore+0xbc>)
 8005330:	4613      	mov	r3, r2
 8005332:	005b      	lsls	r3, r3, #1
 8005334:	4413      	add	r3, r2
 8005336:	00db      	lsls	r3, r3, #3
 8005338:	440b      	add	r3, r1
 800533a:	3315      	adds	r3, #21
 800533c:	79ba      	ldrb	r2, [r7, #6]
 800533e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8005340:	79fa      	ldrb	r2, [r7, #7]
 8005342:	4918      	ldr	r1, [pc, #96]	@ (80053a4 <LinkTimerBefore+0xbc>)
 8005344:	4613      	mov	r3, r2
 8005346:	005b      	lsls	r3, r3, #1
 8005348:	4413      	add	r3, r2
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	440b      	add	r3, r1
 800534e:	3314      	adds	r3, #20
 8005350:	7bfa      	ldrb	r2, [r7, #15]
 8005352:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8005354:	79ba      	ldrb	r2, [r7, #6]
 8005356:	4913      	ldr	r1, [pc, #76]	@ (80053a4 <LinkTimerBefore+0xbc>)
 8005358:	4613      	mov	r3, r2
 800535a:	005b      	lsls	r3, r3, #1
 800535c:	4413      	add	r3, r2
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	440b      	add	r3, r1
 8005362:	3314      	adds	r3, #20
 8005364:	79fa      	ldrb	r2, [r7, #7]
 8005366:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8005368:	e014      	b.n	8005394 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800536a:	79fa      	ldrb	r2, [r7, #7]
 800536c:	490d      	ldr	r1, [pc, #52]	@ (80053a4 <LinkTimerBefore+0xbc>)
 800536e:	4613      	mov	r3, r2
 8005370:	005b      	lsls	r3, r3, #1
 8005372:	4413      	add	r3, r2
 8005374:	00db      	lsls	r3, r3, #3
 8005376:	440b      	add	r3, r1
 8005378:	3315      	adds	r3, #21
 800537a:	79ba      	ldrb	r2, [r7, #6]
 800537c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800537e:	79ba      	ldrb	r2, [r7, #6]
 8005380:	4908      	ldr	r1, [pc, #32]	@ (80053a4 <LinkTimerBefore+0xbc>)
 8005382:	4613      	mov	r3, r2
 8005384:	005b      	lsls	r3, r3, #1
 8005386:	4413      	add	r3, r2
 8005388:	00db      	lsls	r3, r3, #3
 800538a:	440b      	add	r3, r1
 800538c:	3314      	adds	r3, #20
 800538e:	79fa      	ldrb	r2, [r7, #7]
 8005390:	701a      	strb	r2, [r3, #0]
  return;
 8005392:	bf00      	nop
}
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	20000444 	.word	0x20000444
 80053a4:	200003b4 	.word	0x200003b4

080053a8 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	4603      	mov	r3, r0
 80053b0:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80053b2:	4b4e      	ldr	r3, [pc, #312]	@ (80054ec <linkTimer+0x144>)
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b06      	cmp	r3, #6
 80053ba:	d118      	bne.n	80053ee <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80053bc:	4b4b      	ldr	r3, [pc, #300]	@ (80054ec <linkTimer+0x144>)
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	b2da      	uxtb	r2, r3
 80053c2:	4b4b      	ldr	r3, [pc, #300]	@ (80054f0 <linkTimer+0x148>)
 80053c4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80053c6:	4a49      	ldr	r2, [pc, #292]	@ (80054ec <linkTimer+0x144>)
 80053c8:	79fb      	ldrb	r3, [r7, #7]
 80053ca:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80053cc:	79fa      	ldrb	r2, [r7, #7]
 80053ce:	4949      	ldr	r1, [pc, #292]	@ (80054f4 <linkTimer+0x14c>)
 80053d0:	4613      	mov	r3, r2
 80053d2:	005b      	lsls	r3, r3, #1
 80053d4:	4413      	add	r3, r2
 80053d6:	00db      	lsls	r3, r3, #3
 80053d8:	440b      	add	r3, r1
 80053da:	3315      	adds	r3, #21
 80053dc:	2206      	movs	r2, #6
 80053de:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80053e0:	4b45      	ldr	r3, [pc, #276]	@ (80054f8 <linkTimer+0x150>)
 80053e2:	f04f 32ff 	mov.w	r2, #4294967295
 80053e6:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80053e8:	2300      	movs	r3, #0
 80053ea:	81fb      	strh	r3, [r7, #14]
 80053ec:	e078      	b.n	80054e0 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80053ee:	f000 f909 	bl	8005604 <ReturnTimeElapsed>
 80053f2:	4603      	mov	r3, r0
 80053f4:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80053f6:	79fa      	ldrb	r2, [r7, #7]
 80053f8:	493e      	ldr	r1, [pc, #248]	@ (80054f4 <linkTimer+0x14c>)
 80053fa:	4613      	mov	r3, r2
 80053fc:	005b      	lsls	r3, r3, #1
 80053fe:	4413      	add	r3, r2
 8005400:	00db      	lsls	r3, r3, #3
 8005402:	440b      	add	r3, r1
 8005404:	3308      	adds	r3, #8
 8005406:	6819      	ldr	r1, [r3, #0]
 8005408:	89fb      	ldrh	r3, [r7, #14]
 800540a:	79fa      	ldrb	r2, [r7, #7]
 800540c:	4419      	add	r1, r3
 800540e:	4839      	ldr	r0, [pc, #228]	@ (80054f4 <linkTimer+0x14c>)
 8005410:	4613      	mov	r3, r2
 8005412:	005b      	lsls	r3, r3, #1
 8005414:	4413      	add	r3, r2
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	4403      	add	r3, r0
 800541a:	3308      	adds	r3, #8
 800541c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800541e:	79fa      	ldrb	r2, [r7, #7]
 8005420:	4934      	ldr	r1, [pc, #208]	@ (80054f4 <linkTimer+0x14c>)
 8005422:	4613      	mov	r3, r2
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	4413      	add	r3, r2
 8005428:	00db      	lsls	r3, r3, #3
 800542a:	440b      	add	r3, r1
 800542c:	3308      	adds	r3, #8
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8005432:	4b2e      	ldr	r3, [pc, #184]	@ (80054ec <linkTimer+0x144>)
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	b2db      	uxtb	r3, r3
 8005438:	4619      	mov	r1, r3
 800543a:	4a2e      	ldr	r2, [pc, #184]	@ (80054f4 <linkTimer+0x14c>)
 800543c:	460b      	mov	r3, r1
 800543e:	005b      	lsls	r3, r3, #1
 8005440:	440b      	add	r3, r1
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	4413      	add	r3, r2
 8005446:	3308      	adds	r3, #8
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	429a      	cmp	r2, r3
 800544e:	d337      	bcc.n	80054c0 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8005450:	4b26      	ldr	r3, [pc, #152]	@ (80054ec <linkTimer+0x144>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8005456:	7b7a      	ldrb	r2, [r7, #13]
 8005458:	4926      	ldr	r1, [pc, #152]	@ (80054f4 <linkTimer+0x14c>)
 800545a:	4613      	mov	r3, r2
 800545c:	005b      	lsls	r3, r3, #1
 800545e:	4413      	add	r3, r2
 8005460:	00db      	lsls	r3, r3, #3
 8005462:	440b      	add	r3, r1
 8005464:	3315      	adds	r3, #21
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800546a:	e013      	b.n	8005494 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 800546c:	7b7a      	ldrb	r2, [r7, #13]
 800546e:	4921      	ldr	r1, [pc, #132]	@ (80054f4 <linkTimer+0x14c>)
 8005470:	4613      	mov	r3, r2
 8005472:	005b      	lsls	r3, r3, #1
 8005474:	4413      	add	r3, r2
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	440b      	add	r3, r1
 800547a:	3315      	adds	r3, #21
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8005480:	7b7a      	ldrb	r2, [r7, #13]
 8005482:	491c      	ldr	r1, [pc, #112]	@ (80054f4 <linkTimer+0x14c>)
 8005484:	4613      	mov	r3, r2
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	4413      	add	r3, r2
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	440b      	add	r3, r1
 800548e:	3315      	adds	r3, #21
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8005494:	7b3b      	ldrb	r3, [r7, #12]
 8005496:	2b06      	cmp	r3, #6
 8005498:	d00b      	beq.n	80054b2 <linkTimer+0x10a>
 800549a:	7b3a      	ldrb	r2, [r7, #12]
 800549c:	4915      	ldr	r1, [pc, #84]	@ (80054f4 <linkTimer+0x14c>)
 800549e:	4613      	mov	r3, r2
 80054a0:	005b      	lsls	r3, r3, #1
 80054a2:	4413      	add	r3, r2
 80054a4:	00db      	lsls	r3, r3, #3
 80054a6:	440b      	add	r3, r1
 80054a8:	3308      	adds	r3, #8
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d2dc      	bcs.n	800546c <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80054b2:	7b7a      	ldrb	r2, [r7, #13]
 80054b4:	79fb      	ldrb	r3, [r7, #7]
 80054b6:	4611      	mov	r1, r2
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff fecf 	bl	800525c <LinkTimerAfter>
 80054be:	e00f      	b.n	80054e0 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80054c0:	4b0a      	ldr	r3, [pc, #40]	@ (80054ec <linkTimer+0x144>)
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	b2da      	uxtb	r2, r3
 80054c6:	79fb      	ldrb	r3, [r7, #7]
 80054c8:	4611      	mov	r1, r2
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7ff ff0c 	bl	80052e8 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80054d0:	4b06      	ldr	r3, [pc, #24]	@ (80054ec <linkTimer+0x144>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	b2da      	uxtb	r2, r3
 80054d6:	4b06      	ldr	r3, [pc, #24]	@ (80054f0 <linkTimer+0x148>)
 80054d8:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80054da:	4a04      	ldr	r2, [pc, #16]	@ (80054ec <linkTimer+0x144>)
 80054dc:	79fb      	ldrb	r3, [r7, #7]
 80054de:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80054e0:	89fb      	ldrh	r3, [r7, #14]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	20000444 	.word	0x20000444
 80054f0:	20000445 	.word	0x20000445
 80054f4:	200003b4 	.word	0x200003b4
 80054f8:	20000448 	.word	0x20000448

080054fc <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	4603      	mov	r3, r0
 8005504:	460a      	mov	r2, r1
 8005506:	71fb      	strb	r3, [r7, #7]
 8005508:	4613      	mov	r3, r2
 800550a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 800550c:	4b39      	ldr	r3, [pc, #228]	@ (80055f4 <UnlinkTimer+0xf8>)
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	b2db      	uxtb	r3, r3
 8005512:	79fa      	ldrb	r2, [r7, #7]
 8005514:	429a      	cmp	r2, r3
 8005516:	d111      	bne.n	800553c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8005518:	4b36      	ldr	r3, [pc, #216]	@ (80055f4 <UnlinkTimer+0xf8>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	b2da      	uxtb	r2, r3
 800551e:	4b36      	ldr	r3, [pc, #216]	@ (80055f8 <UnlinkTimer+0xfc>)
 8005520:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8005522:	79fa      	ldrb	r2, [r7, #7]
 8005524:	4935      	ldr	r1, [pc, #212]	@ (80055fc <UnlinkTimer+0x100>)
 8005526:	4613      	mov	r3, r2
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	4413      	add	r3, r2
 800552c:	00db      	lsls	r3, r3, #3
 800552e:	440b      	add	r3, r1
 8005530:	3315      	adds	r3, #21
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	b2da      	uxtb	r2, r3
 8005536:	4b2f      	ldr	r3, [pc, #188]	@ (80055f4 <UnlinkTimer+0xf8>)
 8005538:	701a      	strb	r2, [r3, #0]
 800553a:	e03e      	b.n	80055ba <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 800553c:	79fa      	ldrb	r2, [r7, #7]
 800553e:	492f      	ldr	r1, [pc, #188]	@ (80055fc <UnlinkTimer+0x100>)
 8005540:	4613      	mov	r3, r2
 8005542:	005b      	lsls	r3, r3, #1
 8005544:	4413      	add	r3, r2
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	440b      	add	r3, r1
 800554a:	3314      	adds	r3, #20
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8005550:	79fa      	ldrb	r2, [r7, #7]
 8005552:	492a      	ldr	r1, [pc, #168]	@ (80055fc <UnlinkTimer+0x100>)
 8005554:	4613      	mov	r3, r2
 8005556:	005b      	lsls	r3, r3, #1
 8005558:	4413      	add	r3, r2
 800555a:	00db      	lsls	r3, r3, #3
 800555c:	440b      	add	r3, r1
 800555e:	3315      	adds	r3, #21
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8005564:	79f9      	ldrb	r1, [r7, #7]
 8005566:	7bfa      	ldrb	r2, [r7, #15]
 8005568:	4824      	ldr	r0, [pc, #144]	@ (80055fc <UnlinkTimer+0x100>)
 800556a:	460b      	mov	r3, r1
 800556c:	005b      	lsls	r3, r3, #1
 800556e:	440b      	add	r3, r1
 8005570:	00db      	lsls	r3, r3, #3
 8005572:	4403      	add	r3, r0
 8005574:	3315      	adds	r3, #21
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	b2d8      	uxtb	r0, r3
 800557a:	4920      	ldr	r1, [pc, #128]	@ (80055fc <UnlinkTimer+0x100>)
 800557c:	4613      	mov	r3, r2
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	4413      	add	r3, r2
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	440b      	add	r3, r1
 8005586:	3315      	adds	r3, #21
 8005588:	4602      	mov	r2, r0
 800558a:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800558c:	7bbb      	ldrb	r3, [r7, #14]
 800558e:	2b06      	cmp	r3, #6
 8005590:	d013      	beq.n	80055ba <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8005592:	79f9      	ldrb	r1, [r7, #7]
 8005594:	7bba      	ldrb	r2, [r7, #14]
 8005596:	4819      	ldr	r0, [pc, #100]	@ (80055fc <UnlinkTimer+0x100>)
 8005598:	460b      	mov	r3, r1
 800559a:	005b      	lsls	r3, r3, #1
 800559c:	440b      	add	r3, r1
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	4403      	add	r3, r0
 80055a2:	3314      	adds	r3, #20
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	b2d8      	uxtb	r0, r3
 80055a8:	4914      	ldr	r1, [pc, #80]	@ (80055fc <UnlinkTimer+0x100>)
 80055aa:	4613      	mov	r3, r2
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	4413      	add	r3, r2
 80055b0:	00db      	lsls	r3, r3, #3
 80055b2:	440b      	add	r3, r1
 80055b4:	3314      	adds	r3, #20
 80055b6:	4602      	mov	r2, r0
 80055b8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80055ba:	79fa      	ldrb	r2, [r7, #7]
 80055bc:	490f      	ldr	r1, [pc, #60]	@ (80055fc <UnlinkTimer+0x100>)
 80055be:	4613      	mov	r3, r2
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	4413      	add	r3, r2
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	440b      	add	r3, r1
 80055c8:	330c      	adds	r3, #12
 80055ca:	2201      	movs	r2, #1
 80055cc:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80055ce:	4b09      	ldr	r3, [pc, #36]	@ (80055f4 <UnlinkTimer+0xf8>)
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b06      	cmp	r3, #6
 80055d6:	d107      	bne.n	80055e8 <UnlinkTimer+0xec>
 80055d8:	79bb      	ldrb	r3, [r7, #6]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d104      	bne.n	80055e8 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80055de:	4b08      	ldr	r3, [pc, #32]	@ (8005600 <UnlinkTimer+0x104>)
 80055e0:	f04f 32ff 	mov.w	r2, #4294967295
 80055e4:	601a      	str	r2, [r3, #0]
  }

  return;
 80055e6:	bf00      	nop
 80055e8:	bf00      	nop
}
 80055ea:	3714      	adds	r7, #20
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	20000444 	.word	0x20000444
 80055f8:	20000445 	.word	0x20000445
 80055fc:	200003b4 	.word	0x200003b4
 8005600:	20000448 	.word	0x20000448

08005604 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800560a:	4b1a      	ldr	r3, [pc, #104]	@ (8005674 <ReturnTimeElapsed+0x70>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005612:	d026      	beq.n	8005662 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8005614:	f7ff fe02 	bl	800521c <ReadRtcSsrValue>
 8005618:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800561a:	4b16      	ldr	r3, [pc, #88]	@ (8005674 <ReturnTimeElapsed+0x70>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	429a      	cmp	r2, r3
 8005622:	d805      	bhi.n	8005630 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8005624:	4b13      	ldr	r3, [pc, #76]	@ (8005674 <ReturnTimeElapsed+0x70>)
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	607b      	str	r3, [r7, #4]
 800562e:	e00a      	b.n	8005646 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8005630:	4b11      	ldr	r3, [pc, #68]	@ (8005678 <ReturnTimeElapsed+0x74>)
 8005632:	881b      	ldrh	r3, [r3, #0]
 8005634:	461a      	mov	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 800563c:	4b0d      	ldr	r3, [pc, #52]	@ (8005674 <ReturnTimeElapsed+0x70>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	683a      	ldr	r2, [r7, #0]
 8005642:	4413      	add	r3, r2
 8005644:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8005646:	4b0d      	ldr	r3, [pc, #52]	@ (800567c <ReturnTimeElapsed+0x78>)
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	461a      	mov	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	fb02 f303 	mul.w	r3, r2, r3
 8005652:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8005654:	4b0a      	ldr	r3, [pc, #40]	@ (8005680 <ReturnTimeElapsed+0x7c>)
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	461a      	mov	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	40d3      	lsrs	r3, r2
 800565e:	607b      	str	r3, [r7, #4]
 8005660:	e001      	b.n	8005666 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8005662:	2300      	movs	r3, #0
 8005664:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	b29b      	uxth	r3, r3
}
 800566a:	4618      	mov	r0, r3
 800566c:	3708      	adds	r7, #8
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	20000448 	.word	0x20000448
 8005678:	20000450 	.word	0x20000450
 800567c:	2000044e 	.word	0x2000044e
 8005680:	2000044d 	.word	0x2000044d

08005684 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	4603      	mov	r3, r0
 800568c:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 800568e:	88fb      	ldrh	r3, [r7, #6]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d108      	bne.n	80056a6 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8005694:	f7ff fdc2 	bl	800521c <ReadRtcSsrValue>
 8005698:	4603      	mov	r3, r0
 800569a:	4a21      	ldr	r2, [pc, #132]	@ (8005720 <RestartWakeupCounter+0x9c>)
 800569c:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800569e:	2003      	movs	r0, #3
 80056a0:	f002 f8f1 	bl	8007886 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80056a4:	e039      	b.n	800571a <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80056a6:	88fb      	ldrh	r3, [r7, #6]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d803      	bhi.n	80056b4 <RestartWakeupCounter+0x30>
 80056ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005724 <RestartWakeupCounter+0xa0>)
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d002      	beq.n	80056ba <RestartWakeupCounter+0x36>
      Value -= 1;
 80056b4:	88fb      	ldrh	r3, [r7, #6]
 80056b6:	3b01      	subs	r3, #1
 80056b8:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80056ba:	bf00      	nop
 80056bc:	4b1a      	ldr	r3, [pc, #104]	@ (8005728 <RestartWakeupCounter+0xa4>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	f003 0304 	and.w	r3, r3, #4
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d0f8      	beq.n	80056bc <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80056ca:	4b17      	ldr	r3, [pc, #92]	@ (8005728 <RestartWakeupCounter+0xa4>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	4b15      	ldr	r3, [pc, #84]	@ (8005728 <RestartWakeupCounter+0xa4>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80056da:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80056dc:	4b13      	ldr	r3, [pc, #76]	@ (800572c <RestartWakeupCounter+0xa8>)
 80056de:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80056e2:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80056e4:	2003      	movs	r0, #3
 80056e6:	f002 f8dc 	bl	80078a2 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80056ea:	4b11      	ldr	r3, [pc, #68]	@ (8005730 <RestartWakeupCounter+0xac>)
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	0c1b      	lsrs	r3, r3, #16
 80056f0:	041b      	lsls	r3, r3, #16
 80056f2:	88fa      	ldrh	r2, [r7, #6]
 80056f4:	490e      	ldr	r1, [pc, #56]	@ (8005730 <RestartWakeupCounter+0xac>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80056fa:	f7ff fd8f 	bl	800521c <ReadRtcSsrValue>
 80056fe:	4603      	mov	r3, r0
 8005700:	4a07      	ldr	r2, [pc, #28]	@ (8005720 <RestartWakeupCounter+0x9c>)
 8005702:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8005704:	4b08      	ldr	r3, [pc, #32]	@ (8005728 <RestartWakeupCounter+0xa4>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689a      	ldr	r2, [r3, #8]
 800570a:	4b07      	ldr	r3, [pc, #28]	@ (8005728 <RestartWakeupCounter+0xa4>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005712:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8005714:	f3af 8000 	nop.w
  return ;
 8005718:	bf00      	nop
}
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	20000448 	.word	0x20000448
 8005724:	2000044d 	.word	0x2000044d
 8005728:	2000081c 	.word	0x2000081c
 800572c:	58000800 	.word	0x58000800
 8005730:	40002800 	.word	0x40002800

08005734 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800573a:	4b45      	ldr	r3, [pc, #276]	@ (8005850 <RescheduleTimerList+0x11c>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005742:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005746:	d107      	bne.n	8005758 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8005748:	bf00      	nop
 800574a:	4b42      	ldr	r3, [pc, #264]	@ (8005854 <RescheduleTimerList+0x120>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	f003 0304 	and.w	r3, r3, #4
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1f8      	bne.n	800574a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8005758:	4b3e      	ldr	r3, [pc, #248]	@ (8005854 <RescheduleTimerList+0x120>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689a      	ldr	r2, [r3, #8]
 800575e:	4b3d      	ldr	r3, [pc, #244]	@ (8005854 <RescheduleTimerList+0x120>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005766:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8005768:	4b3b      	ldr	r3, [pc, #236]	@ (8005858 <RescheduleTimerList+0x124>)
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800576e:	7bfa      	ldrb	r2, [r7, #15]
 8005770:	493a      	ldr	r1, [pc, #232]	@ (800585c <RescheduleTimerList+0x128>)
 8005772:	4613      	mov	r3, r2
 8005774:	005b      	lsls	r3, r3, #1
 8005776:	4413      	add	r3, r2
 8005778:	00db      	lsls	r3, r3, #3
 800577a:	440b      	add	r3, r1
 800577c:	3308      	adds	r3, #8
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8005782:	f7ff ff3f 	bl	8005604 <ReturnTimeElapsed>
 8005786:	4603      	mov	r3, r0
 8005788:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800578a:	88fb      	ldrh	r3, [r7, #6]
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	429a      	cmp	r2, r3
 8005790:	d205      	bcs.n	800579e <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8005792:	2300      	movs	r3, #0
 8005794:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8005796:	4b32      	ldr	r3, [pc, #200]	@ (8005860 <RescheduleTimerList+0x12c>)
 8005798:	2201      	movs	r2, #1
 800579a:	701a      	strb	r2, [r3, #0]
 800579c:	e04d      	b.n	800583a <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800579e:	88fb      	ldrh	r3, [r7, #6]
 80057a0:	4a30      	ldr	r2, [pc, #192]	@ (8005864 <RescheduleTimerList+0x130>)
 80057a2:	8812      	ldrh	r2, [r2, #0]
 80057a4:	b292      	uxth	r2, r2
 80057a6:	4413      	add	r3, r2
 80057a8:	461a      	mov	r2, r3
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d906      	bls.n	80057be <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80057b0:	4b2c      	ldr	r3, [pc, #176]	@ (8005864 <RescheduleTimerList+0x130>)
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80057b6:	4b2a      	ldr	r3, [pc, #168]	@ (8005860 <RescheduleTimerList+0x12c>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	701a      	strb	r2, [r3, #0]
 80057bc:	e03d      	b.n	800583a <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	88fb      	ldrh	r3, [r7, #6]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80057c8:	4b25      	ldr	r3, [pc, #148]	@ (8005860 <RescheduleTimerList+0x12c>)
 80057ca:	2201      	movs	r2, #1
 80057cc:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80057ce:	e034      	b.n	800583a <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80057d0:	7bfa      	ldrb	r2, [r7, #15]
 80057d2:	4922      	ldr	r1, [pc, #136]	@ (800585c <RescheduleTimerList+0x128>)
 80057d4:	4613      	mov	r3, r2
 80057d6:	005b      	lsls	r3, r3, #1
 80057d8:	4413      	add	r3, r2
 80057da:	00db      	lsls	r3, r3, #3
 80057dc:	440b      	add	r3, r1
 80057de:	3308      	adds	r3, #8
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	88fb      	ldrh	r3, [r7, #6]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d20a      	bcs.n	80057fe <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80057e8:	7bfa      	ldrb	r2, [r7, #15]
 80057ea:	491c      	ldr	r1, [pc, #112]	@ (800585c <RescheduleTimerList+0x128>)
 80057ec:	4613      	mov	r3, r2
 80057ee:	005b      	lsls	r3, r3, #1
 80057f0:	4413      	add	r3, r2
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	440b      	add	r3, r1
 80057f6:	3308      	adds	r3, #8
 80057f8:	2200      	movs	r2, #0
 80057fa:	601a      	str	r2, [r3, #0]
 80057fc:	e013      	b.n	8005826 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80057fe:	7bfa      	ldrb	r2, [r7, #15]
 8005800:	4916      	ldr	r1, [pc, #88]	@ (800585c <RescheduleTimerList+0x128>)
 8005802:	4613      	mov	r3, r2
 8005804:	005b      	lsls	r3, r3, #1
 8005806:	4413      	add	r3, r2
 8005808:	00db      	lsls	r3, r3, #3
 800580a:	440b      	add	r3, r1
 800580c:	3308      	adds	r3, #8
 800580e:	6819      	ldr	r1, [r3, #0]
 8005810:	88fb      	ldrh	r3, [r7, #6]
 8005812:	7bfa      	ldrb	r2, [r7, #15]
 8005814:	1ac9      	subs	r1, r1, r3
 8005816:	4811      	ldr	r0, [pc, #68]	@ (800585c <RescheduleTimerList+0x128>)
 8005818:	4613      	mov	r3, r2
 800581a:	005b      	lsls	r3, r3, #1
 800581c:	4413      	add	r3, r2
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	4403      	add	r3, r0
 8005822:	3308      	adds	r3, #8
 8005824:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8005826:	7bfa      	ldrb	r2, [r7, #15]
 8005828:	490c      	ldr	r1, [pc, #48]	@ (800585c <RescheduleTimerList+0x128>)
 800582a:	4613      	mov	r3, r2
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	4413      	add	r3, r2
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	440b      	add	r3, r1
 8005834:	3315      	adds	r3, #21
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800583a:	7bfb      	ldrb	r3, [r7, #15]
 800583c:	2b06      	cmp	r3, #6
 800583e:	d1c7      	bne.n	80057d0 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8005840:	89bb      	ldrh	r3, [r7, #12]
 8005842:	4618      	mov	r0, r3
 8005844:	f7ff ff1e 	bl	8005684 <RestartWakeupCounter>

  return ;
 8005848:	bf00      	nop
}
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	40002800 	.word	0x40002800
 8005854:	2000081c 	.word	0x2000081c
 8005858:	20000444 	.word	0x20000444
 800585c:	200003b4 	.word	0x200003b4
 8005860:	2000044c 	.word	0x2000044c
 8005864:	20000452 	.word	0x20000452

08005868 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b08a      	sub	sp, #40	@ 0x28
 800586c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800586e:	f3ef 8310 	mrs	r3, PRIMASK
 8005872:	617b      	str	r3, [r7, #20]
  return(result);
 8005874:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005876:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8005878:	b672      	cpsid	i
}
 800587a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800587c:	4b59      	ldr	r3, [pc, #356]	@ (80059e4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	22ca      	movs	r2, #202	@ 0xca
 8005882:	625a      	str	r2, [r3, #36]	@ 0x24
 8005884:	4b57      	ldr	r3, [pc, #348]	@ (80059e4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2253      	movs	r2, #83	@ 0x53
 800588a:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 800588c:	4b55      	ldr	r3, [pc, #340]	@ (80059e4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	689a      	ldr	r2, [r3, #8]
 8005892:	4b54      	ldr	r3, [pc, #336]	@ (80059e4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800589a:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 800589c:	4b52      	ldr	r3, [pc, #328]	@ (80059e8 <HW_TS_RTC_Wakeup_Handler+0x180>)
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80058a4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80058a8:	4950      	ldr	r1, [pc, #320]	@ (80059ec <HW_TS_RTC_Wakeup_Handler+0x184>)
 80058aa:	4613      	mov	r3, r2
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	4413      	add	r3, r2
 80058b0:	00db      	lsls	r3, r3, #3
 80058b2:	440b      	add	r3, r1
 80058b4:	330c      	adds	r3, #12
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d16e      	bne.n	800599c <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80058be:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80058c2:	494a      	ldr	r1, [pc, #296]	@ (80059ec <HW_TS_RTC_Wakeup_Handler+0x184>)
 80058c4:	4613      	mov	r3, r2
 80058c6:	005b      	lsls	r3, r3, #1
 80058c8:	4413      	add	r3, r2
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	440b      	add	r3, r1
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80058d2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80058d6:	4945      	ldr	r1, [pc, #276]	@ (80059ec <HW_TS_RTC_Wakeup_Handler+0x184>)
 80058d8:	4613      	mov	r3, r2
 80058da:	005b      	lsls	r3, r3, #1
 80058dc:	4413      	add	r3, r2
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	440b      	add	r3, r1
 80058e2:	3310      	adds	r3, #16
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80058e8:	4b41      	ldr	r3, [pc, #260]	@ (80059f0 <HW_TS_RTC_Wakeup_Handler+0x188>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d04c      	beq.n	800598c <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80058f2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80058f6:	493d      	ldr	r1, [pc, #244]	@ (80059ec <HW_TS_RTC_Wakeup_Handler+0x184>)
 80058f8:	4613      	mov	r3, r2
 80058fa:	005b      	lsls	r3, r3, #1
 80058fc:	4413      	add	r3, r2
 80058fe:	00db      	lsls	r3, r3, #3
 8005900:	440b      	add	r3, r1
 8005902:	330d      	adds	r3, #13
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b01      	cmp	r3, #1
 800590a:	d124      	bne.n	8005956 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 800590c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005910:	2101      	movs	r1, #1
 8005912:	4618      	mov	r0, r3
 8005914:	f7ff fdf2 	bl	80054fc <UnlinkTimer>
 8005918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f383 8810 	msr	PRIMASK, r3
}
 8005922:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8005924:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8005928:	4930      	ldr	r1, [pc, #192]	@ (80059ec <HW_TS_RTC_Wakeup_Handler+0x184>)
 800592a:	4613      	mov	r3, r2
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	4413      	add	r3, r2
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	440b      	add	r3, r1
 8005934:	3304      	adds	r3, #4
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800593c:	4611      	mov	r1, r2
 800593e:	4618      	mov	r0, r3
 8005940:	f000 f9b8 	bl	8005cb4 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8005944:	4b27      	ldr	r3, [pc, #156]	@ (80059e4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	22ca      	movs	r2, #202	@ 0xca
 800594a:	625a      	str	r2, [r3, #36]	@ 0x24
 800594c:	4b25      	ldr	r3, [pc, #148]	@ (80059e4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2253      	movs	r2, #83	@ 0x53
 8005952:	625a      	str	r2, [r3, #36]	@ 0x24
 8005954:	e012      	b.n	800597c <HW_TS_RTC_Wakeup_Handler+0x114>
 8005956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005958:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f383 8810 	msr	PRIMASK, r3
}
 8005960:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8005962:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005966:	4618      	mov	r0, r3
 8005968:	f000 f920 	bl	8005bac <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800596c:	4b1d      	ldr	r3, [pc, #116]	@ (80059e4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	22ca      	movs	r2, #202	@ 0xca
 8005972:	625a      	str	r2, [r3, #36]	@ 0x24
 8005974:	4b1b      	ldr	r3, [pc, #108]	@ (80059e4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2253      	movs	r2, #83	@ 0x53
 800597a:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 800597c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005980:	69fa      	ldr	r2, [r7, #28]
 8005982:	4619      	mov	r1, r3
 8005984:	69b8      	ldr	r0, [r7, #24]
 8005986:	f000 fa1b 	bl	8005dc0 <HW_TS_RTC_Int_AppNot>
 800598a:	e022      	b.n	80059d2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 800598c:	f7ff fed2 	bl	8005734 <RescheduleTimerList>
 8005990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005992:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	f383 8810 	msr	PRIMASK, r3
}
 800599a:	e01a      	b.n	80059d2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800599c:	bf00      	nop
 800599e:	4b11      	ldr	r3, [pc, #68]	@ (80059e4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f003 0304 	and.w	r3, r3, #4
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d0f8      	beq.n	800599e <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80059ac:	4b0d      	ldr	r3, [pc, #52]	@ (80059e4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	b2da      	uxtb	r2, r3
 80059b4:	4b0b      	ldr	r3, [pc, #44]	@ (80059e4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80059bc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80059be:	4b0d      	ldr	r3, [pc, #52]	@ (80059f4 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80059c0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80059c4:	60da      	str	r2, [r3, #12]
 80059c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f383 8810 	msr	PRIMASK, r3
}
 80059d0:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80059d2:	4b04      	ldr	r3, [pc, #16]	@ (80059e4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	22ff      	movs	r2, #255	@ 0xff
 80059d8:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 80059da:	bf00      	nop
}
 80059dc:	3728      	adds	r7, #40	@ 0x28
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	2000081c 	.word	0x2000081c
 80059e8:	20000444 	.word	0x20000444
 80059ec:	200003b4 	.word	0x200003b4
 80059f0:	2000044c 	.word	0x2000044c
 80059f4:	58000800 	.word	0x58000800

080059f8 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b088      	sub	sp, #32
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	4603      	mov	r3, r0
 8005a00:	6039      	str	r1, [r7, #0]
 8005a02:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8005a04:	4b5e      	ldr	r3, [pc, #376]	@ (8005b80 <HW_TS_Init+0x188>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	22ca      	movs	r2, #202	@ 0xca
 8005a0a:	625a      	str	r2, [r3, #36]	@ 0x24
 8005a0c:	4b5c      	ldr	r3, [pc, #368]	@ (8005b80 <HW_TS_Init+0x188>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2253      	movs	r2, #83	@ 0x53
 8005a12:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005a14:	4b5b      	ldr	r3, [pc, #364]	@ (8005b84 <HW_TS_Init+0x18c>)
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	4a5a      	ldr	r2, [pc, #360]	@ (8005b84 <HW_TS_Init+0x18c>)
 8005a1a:	f043 0320 	orr.w	r3, r3, #32
 8005a1e:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8005a20:	4b58      	ldr	r3, [pc, #352]	@ (8005b84 <HW_TS_Init+0x18c>)
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	f003 0307 	and.w	r3, r3, #7
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	f1c3 0304 	rsb	r3, r3, #4
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	4b55      	ldr	r3, [pc, #340]	@ (8005b88 <HW_TS_Init+0x190>)
 8005a34:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8005a36:	4b53      	ldr	r3, [pc, #332]	@ (8005b84 <HW_TS_Init+0x18c>)
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005a3e:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8005a42:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	fa92 f2a2 	rbit	r2, r2
 8005a4a:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	2a00      	cmp	r2, #0
 8005a54:	d101      	bne.n	8005a5a <HW_TS_Init+0x62>
  {
    return 32U;
 8005a56:	2220      	movs	r2, #32
 8005a58:	e003      	b.n	8005a62 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	fab2 f282 	clz	r2, r2
 8005a60:	b2d2      	uxtb	r2, r2
 8005a62:	40d3      	lsrs	r3, r2
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	3301      	adds	r3, #1
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	4b48      	ldr	r3, [pc, #288]	@ (8005b8c <HW_TS_Init+0x194>)
 8005a6c:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8005a6e:	4b45      	ldr	r3, [pc, #276]	@ (8005b84 <HW_TS_Init+0x18c>)
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	4b44      	ldr	r3, [pc, #272]	@ (8005b90 <HW_TS_Init+0x198>)
 8005a80:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8005a82:	4b43      	ldr	r3, [pc, #268]	@ (8005b90 <HW_TS_Init+0x198>)
 8005a84:	881b      	ldrh	r3, [r3, #0]
 8005a86:	3b01      	subs	r3, #1
 8005a88:	4a40      	ldr	r2, [pc, #256]	@ (8005b8c <HW_TS_Init+0x194>)
 8005a8a:	7812      	ldrb	r2, [r2, #0]
 8005a8c:	fb02 f303 	mul.w	r3, r2, r3
 8005a90:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005a94:	4a3c      	ldr	r2, [pc, #240]	@ (8005b88 <HW_TS_Init+0x190>)
 8005a96:	7812      	ldrb	r2, [r2, #0]
 8005a98:	40d3      	lsrs	r3, r2
 8005a9a:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d904      	bls.n	8005ab0 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8005aa6:	4b3b      	ldr	r3, [pc, #236]	@ (8005b94 <HW_TS_Init+0x19c>)
 8005aa8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005aac:	801a      	strh	r2, [r3, #0]
 8005aae:	e003      	b.n	8005ab8 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	4b37      	ldr	r3, [pc, #220]	@ (8005b94 <HW_TS_Init+0x19c>)
 8005ab6:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8005ab8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005abc:	f7ff fb9c 	bl	80051f8 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8005ac0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005ac4:	f7ff fb84 	bl	80051d0 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8005ac8:	79fb      	ldrb	r3, [r7, #7]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d13d      	bne.n	8005b4a <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8005ace:	4b32      	ldr	r3, [pc, #200]	@ (8005b98 <HW_TS_Init+0x1a0>)
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8005ad4:	4b31      	ldr	r3, [pc, #196]	@ (8005b9c <HW_TS_Init+0x1a4>)
 8005ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8005ada:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8005adc:	2300      	movs	r3, #0
 8005ade:	77fb      	strb	r3, [r7, #31]
 8005ae0:	e00c      	b.n	8005afc <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8005ae2:	7ffa      	ldrb	r2, [r7, #31]
 8005ae4:	492e      	ldr	r1, [pc, #184]	@ (8005ba0 <HW_TS_Init+0x1a8>)
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	005b      	lsls	r3, r3, #1
 8005aea:	4413      	add	r3, r2
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	440b      	add	r3, r1
 8005af0:	330c      	adds	r3, #12
 8005af2:	2200      	movs	r2, #0
 8005af4:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8005af6:	7ffb      	ldrb	r3, [r7, #31]
 8005af8:	3301      	adds	r3, #1
 8005afa:	77fb      	strb	r3, [r7, #31]
 8005afc:	7ffb      	ldrb	r3, [r7, #31]
 8005afe:	2b05      	cmp	r3, #5
 8005b00:	d9ef      	bls.n	8005ae2 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8005b02:	4b28      	ldr	r3, [pc, #160]	@ (8005ba4 <HW_TS_Init+0x1ac>)
 8005b04:	2206      	movs	r2, #6
 8005b06:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8005b08:	4b1d      	ldr	r3, [pc, #116]	@ (8005b80 <HW_TS_Init+0x188>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689a      	ldr	r2, [r3, #8]
 8005b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8005b80 <HW_TS_Init+0x188>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b16:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8005b18:	4b19      	ldr	r3, [pc, #100]	@ (8005b80 <HW_TS_Init+0x188>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	4b17      	ldr	r3, [pc, #92]	@ (8005b80 <HW_TS_Init+0x188>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8005b28:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8005b2a:	4b1f      	ldr	r3, [pc, #124]	@ (8005ba8 <HW_TS_Init+0x1b0>)
 8005b2c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005b30:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8005b32:	2003      	movs	r0, #3
 8005b34:	f001 feb5 	bl	80078a2 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8005b38:	4b11      	ldr	r3, [pc, #68]	@ (8005b80 <HW_TS_Init+0x188>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689a      	ldr	r2, [r3, #8]
 8005b3e:	4b10      	ldr	r3, [pc, #64]	@ (8005b80 <HW_TS_Init+0x188>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b46:	609a      	str	r2, [r3, #8]
 8005b48:	e009      	b.n	8005b5e <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8005b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b80 <HW_TS_Init+0x188>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d002      	beq.n	8005b5e <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8005b58:	2003      	movs	r0, #3
 8005b5a:	f001 fe94 	bl	8007886 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8005b5e:	4b08      	ldr	r3, [pc, #32]	@ (8005b80 <HW_TS_Init+0x188>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	22ff      	movs	r2, #255	@ 0xff
 8005b64:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8005b66:	2200      	movs	r2, #0
 8005b68:	2103      	movs	r1, #3
 8005b6a:	2003      	movs	r0, #3
 8005b6c:	f001 fe49 	bl	8007802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8005b70:	2003      	movs	r0, #3
 8005b72:	f001 fe60 	bl	8007836 <HAL_NVIC_EnableIRQ>

  return;
 8005b76:	bf00      	nop
}
 8005b78:	3720      	adds	r7, #32
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	2000081c 	.word	0x2000081c
 8005b84:	40002800 	.word	0x40002800
 8005b88:	2000044d 	.word	0x2000044d
 8005b8c:	2000044e 	.word	0x2000044e
 8005b90:	20000450 	.word	0x20000450
 8005b94:	20000452 	.word	0x20000452
 8005b98:	2000044c 	.word	0x2000044c
 8005b9c:	20000448 	.word	0x20000448
 8005ba0:	200003b4 	.word	0x200003b4
 8005ba4:	20000444 	.word	0x20000444
 8005ba8:	58000800 	.word	0x58000800

08005bac <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bb6:	f3ef 8310 	mrs	r3, PRIMASK
 8005bba:	60fb      	str	r3, [r7, #12]
  return(result);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005bbe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005bc0:	b672      	cpsid	i
}
 8005bc2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8005bc4:	2003      	movs	r0, #3
 8005bc6:	f001 fe44 	bl	8007852 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8005bca:	4b34      	ldr	r3, [pc, #208]	@ (8005c9c <HW_TS_Stop+0xf0>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	22ca      	movs	r2, #202	@ 0xca
 8005bd0:	625a      	str	r2, [r3, #36]	@ 0x24
 8005bd2:	4b32      	ldr	r3, [pc, #200]	@ (8005c9c <HW_TS_Stop+0xf0>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2253      	movs	r2, #83	@ 0x53
 8005bd8:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8005bda:	79fa      	ldrb	r2, [r7, #7]
 8005bdc:	4930      	ldr	r1, [pc, #192]	@ (8005ca0 <HW_TS_Stop+0xf4>)
 8005bde:	4613      	mov	r3, r2
 8005be0:	005b      	lsls	r3, r3, #1
 8005be2:	4413      	add	r3, r2
 8005be4:	00db      	lsls	r3, r3, #3
 8005be6:	440b      	add	r3, r1
 8005be8:	330c      	adds	r3, #12
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d142      	bne.n	8005c78 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8005bf2:	79fb      	ldrb	r3, [r7, #7]
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7ff fc80 	bl	80054fc <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8005bfc:	4b29      	ldr	r3, [pc, #164]	@ (8005ca4 <HW_TS_Stop+0xf8>)
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8005c02:	7cfb      	ldrb	r3, [r7, #19]
 8005c04:	2b06      	cmp	r3, #6
 8005c06:	d12f      	bne.n	8005c68 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8005c08:	4b27      	ldr	r3, [pc, #156]	@ (8005ca8 <HW_TS_Stop+0xfc>)
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c14:	d107      	bne.n	8005c26 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8005c16:	bf00      	nop
 8005c18:	4b20      	ldr	r3, [pc, #128]	@ (8005c9c <HW_TS_Stop+0xf0>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	f003 0304 	and.w	r3, r3, #4
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1f8      	bne.n	8005c18 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8005c26:	4b1d      	ldr	r3, [pc, #116]	@ (8005c9c <HW_TS_Stop+0xf0>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8005c9c <HW_TS_Stop+0xf0>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c34:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8005c36:	bf00      	nop
 8005c38:	4b18      	ldr	r3, [pc, #96]	@ (8005c9c <HW_TS_Stop+0xf0>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	f003 0304 	and.w	r3, r3, #4
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d0f8      	beq.n	8005c38 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8005c46:	4b15      	ldr	r3, [pc, #84]	@ (8005c9c <HW_TS_Stop+0xf0>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	4b13      	ldr	r3, [pc, #76]	@ (8005c9c <HW_TS_Stop+0xf0>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8005c56:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8005c58:	4b14      	ldr	r3, [pc, #80]	@ (8005cac <HW_TS_Stop+0x100>)
 8005c5a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005c5e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8005c60:	2003      	movs	r0, #3
 8005c62:	f001 fe1e 	bl	80078a2 <HAL_NVIC_ClearPendingIRQ>
 8005c66:	e007      	b.n	8005c78 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8005c68:	4b11      	ldr	r3, [pc, #68]	@ (8005cb0 <HW_TS_Stop+0x104>)
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	7cfa      	ldrb	r2, [r7, #19]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d001      	beq.n	8005c78 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8005c74:	f7ff fd5e 	bl	8005734 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8005c78:	4b08      	ldr	r3, [pc, #32]	@ (8005c9c <HW_TS_Stop+0xf0>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	22ff      	movs	r2, #255	@ 0xff
 8005c7e:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8005c80:	2003      	movs	r0, #3
 8005c82:	f001 fdd8 	bl	8007836 <HAL_NVIC_EnableIRQ>
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	f383 8810 	msr	PRIMASK, r3
}
 8005c90:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8005c92:	bf00      	nop
}
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	2000081c 	.word	0x2000081c
 8005ca0:	200003b4 	.word	0x200003b4
 8005ca4:	20000444 	.word	0x20000444
 8005ca8:	40002800 	.word	0x40002800
 8005cac:	58000800 	.word	0x58000800
 8005cb0:	20000445 	.word	0x20000445

08005cb4 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	4603      	mov	r3, r0
 8005cbc:	6039      	str	r1, [r7, #0]
 8005cbe:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8005cc0:	79fa      	ldrb	r2, [r7, #7]
 8005cc2:	493b      	ldr	r1, [pc, #236]	@ (8005db0 <HW_TS_Start+0xfc>)
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	4413      	add	r3, r2
 8005cca:	00db      	lsls	r3, r3, #3
 8005ccc:	440b      	add	r3, r1
 8005cce:	330c      	adds	r3, #12
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d103      	bne.n	8005ce0 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8005cd8:	79fb      	ldrb	r3, [r7, #7]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7ff ff66 	bl	8005bac <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ce0:	f3ef 8310 	mrs	r3, PRIMASK
 8005ce4:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005ce8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005cea:	b672      	cpsid	i
}
 8005cec:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8005cee:	2003      	movs	r0, #3
 8005cf0:	f001 fdaf 	bl	8007852 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8005cf4:	4b2f      	ldr	r3, [pc, #188]	@ (8005db4 <HW_TS_Start+0x100>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	22ca      	movs	r2, #202	@ 0xca
 8005cfa:	625a      	str	r2, [r3, #36]	@ 0x24
 8005cfc:	4b2d      	ldr	r3, [pc, #180]	@ (8005db4 <HW_TS_Start+0x100>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2253      	movs	r2, #83	@ 0x53
 8005d02:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8005d04:	79fa      	ldrb	r2, [r7, #7]
 8005d06:	492a      	ldr	r1, [pc, #168]	@ (8005db0 <HW_TS_Start+0xfc>)
 8005d08:	4613      	mov	r3, r2
 8005d0a:	005b      	lsls	r3, r3, #1
 8005d0c:	4413      	add	r3, r2
 8005d0e:	00db      	lsls	r3, r3, #3
 8005d10:	440b      	add	r3, r1
 8005d12:	330c      	adds	r3, #12
 8005d14:	2202      	movs	r2, #2
 8005d16:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8005d18:	79fa      	ldrb	r2, [r7, #7]
 8005d1a:	4925      	ldr	r1, [pc, #148]	@ (8005db0 <HW_TS_Start+0xfc>)
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	4413      	add	r3, r2
 8005d22:	00db      	lsls	r3, r3, #3
 8005d24:	440b      	add	r3, r1
 8005d26:	3308      	adds	r3, #8
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8005d2c:	79fa      	ldrb	r2, [r7, #7]
 8005d2e:	4920      	ldr	r1, [pc, #128]	@ (8005db0 <HW_TS_Start+0xfc>)
 8005d30:	4613      	mov	r3, r2
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	4413      	add	r3, r2
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	440b      	add	r3, r1
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8005d40:	79fb      	ldrb	r3, [r7, #7]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7ff fb30 	bl	80053a8 <linkTimer>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8005d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8005db8 <HW_TS_Start+0x104>)
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8005d52:	4b1a      	ldr	r3, [pc, #104]	@ (8005dbc <HW_TS_Start+0x108>)
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	7c7a      	ldrb	r2, [r7, #17]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d002      	beq.n	8005d64 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8005d5e:	f7ff fce9 	bl	8005734 <RescheduleTimerList>
 8005d62:	e013      	b.n	8005d8c <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8005d64:	79fa      	ldrb	r2, [r7, #7]
 8005d66:	4912      	ldr	r1, [pc, #72]	@ (8005db0 <HW_TS_Start+0xfc>)
 8005d68:	4613      	mov	r3, r2
 8005d6a:	005b      	lsls	r3, r3, #1
 8005d6c:	4413      	add	r3, r2
 8005d6e:	00db      	lsls	r3, r3, #3
 8005d70:	440b      	add	r3, r1
 8005d72:	3308      	adds	r3, #8
 8005d74:	6819      	ldr	r1, [r3, #0]
 8005d76:	8a7b      	ldrh	r3, [r7, #18]
 8005d78:	79fa      	ldrb	r2, [r7, #7]
 8005d7a:	1ac9      	subs	r1, r1, r3
 8005d7c:	480c      	ldr	r0, [pc, #48]	@ (8005db0 <HW_TS_Start+0xfc>)
 8005d7e:	4613      	mov	r3, r2
 8005d80:	005b      	lsls	r3, r3, #1
 8005d82:	4413      	add	r3, r2
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	4403      	add	r3, r0
 8005d88:	3308      	adds	r3, #8
 8005d8a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8005d8c:	4b09      	ldr	r3, [pc, #36]	@ (8005db4 <HW_TS_Start+0x100>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	22ff      	movs	r2, #255	@ 0xff
 8005d92:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8005d94:	2003      	movs	r0, #3
 8005d96:	f001 fd4e 	bl	8007836 <HAL_NVIC_EnableIRQ>
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	f383 8810 	msr	PRIMASK, r3
}
 8005da4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8005da6:	bf00      	nop
}
 8005da8:	3718      	adds	r7, #24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	200003b4 	.word	0x200003b4
 8005db4:	2000081c 	.word	0x2000081c
 8005db8:	20000444 	.word	0x20000444
 8005dbc:	20000445 	.word	0x20000445

08005dc0 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	460b      	mov	r3, r1
 8005dca:	607a      	str	r2, [r7, #4]
 8005dcc:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4798      	blx	r3

  return;
 8005dd2:	bf00      	nop
}
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <LL_AHB2_GRP1_EnableClock>:
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b085      	sub	sp, #20
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005de2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005de6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005de8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005df2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005df6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
}
 8005e00:	bf00      	nop
 8005e02:	3714      	adds	r7, #20
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8005e14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e18:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005e1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8005e24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e28:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005e30:	68fb      	ldr	r3, [r7, #12]
}
 8005e32:	bf00      	nop
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
	...

08005e40 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005e44:	4b1b      	ldr	r3, [pc, #108]	@ (8005eb4 <MX_I2C1_Init+0x74>)
 8005e46:	4a1c      	ldr	r2, [pc, #112]	@ (8005eb8 <MX_I2C1_Init+0x78>)
 8005e48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8005e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8005eb4 <MX_I2C1_Init+0x74>)
 8005e4c:	4a1b      	ldr	r2, [pc, #108]	@ (8005ebc <MX_I2C1_Init+0x7c>)
 8005e4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005e50:	4b18      	ldr	r3, [pc, #96]	@ (8005eb4 <MX_I2C1_Init+0x74>)
 8005e52:	2200      	movs	r2, #0
 8005e54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005e56:	4b17      	ldr	r3, [pc, #92]	@ (8005eb4 <MX_I2C1_Init+0x74>)
 8005e58:	2201      	movs	r2, #1
 8005e5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005e5c:	4b15      	ldr	r3, [pc, #84]	@ (8005eb4 <MX_I2C1_Init+0x74>)
 8005e5e:	2200      	movs	r2, #0
 8005e60:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005e62:	4b14      	ldr	r3, [pc, #80]	@ (8005eb4 <MX_I2C1_Init+0x74>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005e68:	4b12      	ldr	r3, [pc, #72]	@ (8005eb4 <MX_I2C1_Init+0x74>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005e6e:	4b11      	ldr	r3, [pc, #68]	@ (8005eb4 <MX_I2C1_Init+0x74>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005e74:	4b0f      	ldr	r3, [pc, #60]	@ (8005eb4 <MX_I2C1_Init+0x74>)
 8005e76:	2200      	movs	r2, #0
 8005e78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005e7a:	480e      	ldr	r0, [pc, #56]	@ (8005eb4 <MX_I2C1_Init+0x74>)
 8005e7c:	f002 f9a0 	bl	80081c0 <HAL_I2C_Init>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005e86:	f000 fce3 	bl	8006850 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	4809      	ldr	r0, [pc, #36]	@ (8005eb4 <MX_I2C1_Init+0x74>)
 8005e8e:	f003 f9bd 	bl	800920c <HAL_I2CEx_ConfigAnalogFilter>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d001      	beq.n	8005e9c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005e98:	f000 fcda 	bl	8006850 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	4805      	ldr	r0, [pc, #20]	@ (8005eb4 <MX_I2C1_Init+0x74>)
 8005ea0:	f003 f9ff 	bl	80092a2 <HAL_I2CEx_ConfigDigitalFilter>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d001      	beq.n	8005eae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005eaa:	f000 fcd1 	bl	8006850 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005eae:	bf00      	nop
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	20000454 	.word	0x20000454
 8005eb8:	40005400 	.word	0x40005400
 8005ebc:	00b07cb4 	.word	0x00b07cb4

08005ec0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b09c      	sub	sp, #112	@ 0x70
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ec8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8005ecc:	2200      	movs	r2, #0
 8005ece:	601a      	str	r2, [r3, #0]
 8005ed0:	605a      	str	r2, [r3, #4]
 8005ed2:	609a      	str	r2, [r3, #8]
 8005ed4:	60da      	str	r2, [r3, #12]
 8005ed6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005ed8:	f107 030c 	add.w	r3, r7, #12
 8005edc:	2250      	movs	r2, #80	@ 0x50
 8005ede:	2100      	movs	r1, #0
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f014 f9e2 	bl	801a2aa <memset>
  if(i2cHandle->Instance==I2C1)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a17      	ldr	r2, [pc, #92]	@ (8005f48 <HAL_I2C_MspInit+0x88>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d126      	bne.n	8005f3e <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005ef0:	2304      	movs	r3, #4
 8005ef2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005ef4:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8005ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005efa:	f107 030c 	add.w	r3, r7, #12
 8005efe:	4618      	mov	r0, r3
 8005f00:	f006 fb08 	bl	800c514 <HAL_RCCEx_PeriphCLKConfig>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8005f0a:	f000 fca1 	bl	8006850 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f0e:	2002      	movs	r0, #2
 8005f10:	f7ff ff63 	bl	8005dda <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005f14:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005f18:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f1a:	2312      	movs	r3, #18
 8005f1c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f22:	2300      	movs	r3, #0
 8005f24:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005f26:	2304      	movs	r3, #4
 8005f28:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f2a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8005f2e:	4619      	mov	r1, r3
 8005f30:	4806      	ldr	r0, [pc, #24]	@ (8005f4c <HAL_I2C_MspInit+0x8c>)
 8005f32:	f001 ff99 	bl	8007e68 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005f36:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8005f3a:	f7ff ff67 	bl	8005e0c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8005f3e:	bf00      	nop
 8005f40:	3770      	adds	r7, #112	@ 0x70
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	40005400 	.word	0x40005400
 8005f4c:	48000400 	.word	0x48000400

08005f50 <LL_AHB3_GRP1_EnableClock>:
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8005f58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8005f68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4013      	ands	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005f74:	68fb      	ldr	r3, [r7, #12]
}
 8005f76:	bf00      	nop
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
	...

08005f84 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8005f88:	4b06      	ldr	r3, [pc, #24]	@ (8005fa4 <MX_IPCC_Init+0x20>)
 8005f8a:	4a07      	ldr	r2, [pc, #28]	@ (8005fa8 <MX_IPCC_Init+0x24>)
 8005f8c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8005f8e:	4805      	ldr	r0, [pc, #20]	@ (8005fa4 <MX_IPCC_Init+0x20>)
 8005f90:	f003 f9d4 	bl	800933c <HAL_IPCC_Init>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8005f9a:	f000 fc59 	bl	8006850 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8005f9e:	bf00      	nop
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	200004a8 	.word	0x200004a8
 8005fa8:	58000c00 	.word	0x58000c00

08005fac <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8005ff0 <HAL_IPCC_MspInit+0x44>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d113      	bne.n	8005fe6 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8005fbe:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8005fc2:	f7ff ffc5 	bl	8005f50 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	2100      	movs	r1, #0
 8005fca:	202c      	movs	r0, #44	@ 0x2c
 8005fcc:	f001 fc19 	bl	8007802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8005fd0:	202c      	movs	r0, #44	@ 0x2c
 8005fd2:	f001 fc30 	bl	8007836 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	2100      	movs	r1, #0
 8005fda:	202d      	movs	r0, #45	@ 0x2d
 8005fdc:	f001 fc11 	bl	8007802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8005fe0:	202d      	movs	r0, #45	@ 0x2d
 8005fe2:	f001 fc28 	bl	8007836 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8005fe6:	bf00      	nop
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	58000c00 	.word	0x58000c00

08005ff4 <LL_RCC_LSE_SetDriveCapability>:
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8005ffc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006004:	f023 0218 	bic.w	r2, r3, #24
 8006008:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4313      	orrs	r3, r2
 8006010:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(const HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_RLR_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	683a      	ldr	r2, [r7, #0]
 800602e:	3220      	adds	r2, #32
 8006030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006034:	4a05      	ldr	r2, [pc, #20]	@ (800604c <LL_HSEM_1StepLock+0x2c>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d001      	beq.n	800603e <LL_HSEM_1StepLock+0x1e>
 800603a:	2301      	movs	r3, #1
 800603c:	e000      	b.n	8006040 <LL_HSEM_1StepLock+0x20>
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr
 800604c:	80000400 	.word	0x80000400

08006050 <_ZN13AccelerometerC1Ev>:


// #define STATUS_LED 0
#define ADXL343_ADDR (0x53 << 1) // Correct 8-bit address for grounded ALT_ADDRESS

class Accelerometer
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	601a      	str	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	605a      	str	r2, [r3, #4]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2232      	movs	r2, #50	@ 0x32
 8006068:	609a      	str	r2, [r3, #8]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	220f      	movs	r2, #15
 800606e:	60da      	str	r2, [r3, #12]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	611a      	str	r2, [r3, #16]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2208      	movs	r2, #8
 800607a:	751a      	strb	r2, [r3, #20]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2232      	movs	r2, #50	@ 0x32
 8006080:	755a      	strb	r2, [r3, #21]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4618      	mov	r0, r3
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <_ZN13ThermocouplesC1Ev>:
#include "gpio.h"
#include "usart.h"
#include <stdio.h>
#include <string.h>

class Thermocouples
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4618      	mov	r0, r3
 800609c:	f7fd ff8b 	bl	8003fb6 <_ZN17Adafruit_MAX31856C1Ev>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	330c      	adds	r3, #12
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7fd ff86 	bl	8003fb6 <_ZN17Adafruit_MAX31856C1Ev>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	619a      	str	r2, [r3, #24]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4618      	mov	r0, r3
 80060b4:	3708      	adds	r7, #8
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
	...

080060bc <_ZN6ScreenC1Ev>:

#define BACKGROUND_COLOR 0xDCFF
#define TEXT_COLOR 0xA329
#define ACCENT_COLOR 0x6763

class Screen
 80060bc:	b580      	push	{r7, lr}
 80060be:	b086      	sub	sp, #24
 80060c0:	af04      	add	r7, sp, #16
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	2302      	movs	r3, #2
 80060c8:	9303      	str	r3, [sp, #12]
 80060ca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80060ce:	9302      	str	r3, [sp, #8]
 80060d0:	2304      	movs	r3, #4
 80060d2:	9301      	str	r3, [sp, #4]
 80060d4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	2308      	movs	r3, #8
 80060dc:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80060e0:	49c4      	ldr	r1, [pc, #784]	@ (80063f4 <_ZN6ScreenC1Ev+0x338>)
 80060e2:	f7fd f92d 	bl	8003340 <_ZN13ST7789V_STM32C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_t>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	661a      	str	r2, [r3, #96]	@ 0x60
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	665a      	str	r2, [r3, #100]	@ 0x64
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 80060f8:	2301      	movs	r3, #1
 80060fa:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80060fe:	21f0      	movs	r1, #240	@ 0xf0
 8006100:	f7fc fd00 	bl	8002b04 <_ZN11GFXcanvas16C1Ettb>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	22f0      	movs	r2, #240	@ 0xf0
 8006108:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8006112:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2202      	movs	r2, #2
 800611a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800612a:	005b      	lsls	r3, r3, #1
 800612c:	1ad2      	subs	r2, r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006140:	005b      	lsls	r3, r3, #1
 8006142:	1ad2      	subs	r2, r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2218      	movs	r2, #24
 8006172:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2204      	movs	r2, #4
 8006192:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	22b0      	movs	r2, #176	@ 0xb0
 80061a6:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80061c2:	441a      	add	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80061d6:	0fd9      	lsrs	r1, r3, #31
 80061d8:	440b      	add	r3, r1
 80061da:	105b      	asrs	r3, r3, #1
 80061dc:	441a      	add	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2204      	movs	r2, #4
 80061e8:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80061f8:	1ad2      	subs	r2, r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8006200:	441a      	add	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a7b      	ldr	r2, [pc, #492]	@ (80063f8 <_ZN6ScreenC1Ev+0x33c>)
 800620c:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a79      	ldr	r2, [pc, #484]	@ (80063f8 <_ZN6ScreenC1Ev+0x33c>)
 8006214:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a78      	ldr	r2, [pc, #480]	@ (80063fc <_ZN6ScreenC1Ev+0x340>)
 800621c:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2240      	movs	r2, #64	@ 0x40
 8006230:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800624c:	441a      	add	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800626c:	1ad2      	subs	r2, r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8006274:	1ad2      	subs	r2, r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800627c:	1ad2      	subs	r2, r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800629c:	441a      	add	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2204      	movs	r2, #4
 80062a8:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 80062b8:	4619      	mov	r1, r3
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	1acb      	subs	r3, r1, r3
 80062be:	4413      	add	r3, r2
 80062c0:	0fda      	lsrs	r2, r3, #31
 80062c2:	4413      	add	r3, r2
 80062c4:	105b      	asrs	r3, r3, #1
 80062c6:	461a      	mov	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 80062da:	005b      	lsls	r3, r3, #1
 80062dc:	1ad2      	subs	r2, r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 80062f0:	441a      	add	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8006304:	441a      	add	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8006318:	005b      	lsls	r3, r3, #1
 800631a:	441a      	add	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8006322:	441a      	add	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8006336:	441a      	add	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 2180 	ldr.w	r2, [r3, #384]	@ 0x180
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8006356:	441a      	add	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 2184 	ldr.w	r2, [r3, #388]	@ 0x184
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 2198 	ldr.w	r2, [r3, #408]	@ 0x198
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8006376:	441a      	add	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 21a0 	ldr.w	r2, [r3, #416]	@ 0x1a0
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8006396:	441a      	add	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 218c 	ldr.w	r2, [r3, #396]	@ 0x18c
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8d3 21a8 	ldr.w	r2, [r3, #424]	@ 0x1a8
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 80063b6:	441a      	add	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	220a      	movs	r2, #10
 80063c2:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2206      	movs	r2, #6
 80063ca:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2205      	movs	r2, #5
 80063d2:	f8c3 21b8 	str.w	r2, [r3, #440]	@ 0x1b8
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a09      	ldr	r2, [pc, #36]	@ (8006400 <_ZN6ScreenC1Ev+0x344>)
 80063da:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063ec:	f8c3 21c4 	str.w	r2, [r3, #452]	@ 0x1c4
 80063f0:	e008      	b.n	8006404 <_ZN6ScreenC1Ev+0x348>
 80063f2:	bf00      	nop
 80063f4:	200008a4 	.word	0x200008a4
 80063f8:	43870000 	.word	0x43870000
 80063fc:	3a83126f 	.word	0x3a83126f
 8006400:	40490fdb 	.word	0x40490fdb
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2208      	movs	r2, #8
 8006408:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 21b8 	ldr.w	r2, [r3, #440]	@ 0x1b8
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006418:	0fd9      	lsrs	r1, r3, #31
 800641a:	440b      	add	r3, r1
 800641c:	105b      	asrs	r3, r3, #1
 800641e:	441a      	add	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8006432:	441a      	add	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2264      	movs	r2, #100	@ 0x64
 800643e:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 21f8 	strb.w	r2, [r3, #504]	@ 0x1f8
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4618      	mov	r0, r3
 800644e:	3708      	adds	r7, #8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <_ZN14BatteryMonitorC1Ev>:

#include "Adafruit_MAX1704X.h"
#include "i2c.h"
#include "usart.h"

class BatteryMonitor
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4618      	mov	r0, r3
 8006460:	f7fa fd60 	bl	8000f24 <_ZN23Adafruit_MAX17048_STM32C1Ev>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	220a      	movs	r2, #10
 8006468:	60da      	str	r2, [r3, #12]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4618      	mov	r0, r3
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <HAL_TIM_PeriodElapsedCallback>:
Screen myScreen;
BatteryMonitor myBatteryMonitor;

// main timer implementation
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]

  if (htim == &htim16)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a4d      	ldr	r2, [pc, #308]	@ (80065b4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8006480:	4293      	cmp	r3, r2
 8006482:	f040 8091 	bne.w	80065a8 <HAL_TIM_PeriodElapsedCallback+0x134>
  {
    // if(init_finished) {
    //  increment / decrement 0.1ms timers here.

    timerCounter++;
 8006486:	4b4c      	ldr	r3, [pc, #304]	@ (80065b8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	3301      	adds	r3, #1
 800648c:	4a4a      	ldr	r2, [pc, #296]	@ (80065b8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800648e:	6013      	str	r3, [r2, #0]

    if ((timerCounter % 10) == 0)
 8006490:	4b49      	ldr	r3, [pc, #292]	@ (80065b8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8006492:	6819      	ldr	r1, [r3, #0]
 8006494:	4b49      	ldr	r3, [pc, #292]	@ (80065bc <HAL_TIM_PeriodElapsedCallback+0x148>)
 8006496:	fb83 2301 	smull	r2, r3, r3, r1
 800649a:	109a      	asrs	r2, r3, #2
 800649c:	17cb      	asrs	r3, r1, #31
 800649e:	1ad2      	subs	r2, r2, r3
 80064a0:	4613      	mov	r3, r2
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	4413      	add	r3, r2
 80064a6:	005b      	lsls	r3, r3, #1
 80064a8:	1aca      	subs	r2, r1, r3
 80064aa:	2a00      	cmp	r2, #0
 80064ac:	bf0c      	ite	eq
 80064ae:	2301      	moveq	r3, #1
 80064b0:	2300      	movne	r3, #0
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d01b      	beq.n	80064f0 <HAL_TIM_PeriodElapsedCallback+0x7c>
    {

      if (myScreen.renderDelay)
 80064b8:	4b41      	ldr	r3, [pc, #260]	@ (80065c0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80064ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064bc:	2b00      	cmp	r3, #0
 80064be:	bf14      	ite	ne
 80064c0:	2301      	movne	r3, #1
 80064c2:	2300      	moveq	r3, #0
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d004      	beq.n	80064d4 <HAL_TIM_PeriodElapsedCallback+0x60>
      {
        myScreen.renderDelay--;
 80064ca:	4b3d      	ldr	r3, [pc, #244]	@ (80065c0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80064cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064ce:	3b01      	subs	r3, #1
 80064d0:	4a3b      	ldr	r2, [pc, #236]	@ (80065c0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80064d2:	6653      	str	r3, [r2, #100]	@ 0x64
      }

      if (myThermocouples.delay)
 80064d4:	4b3b      	ldr	r3, [pc, #236]	@ (80065c4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	bf14      	ite	ne
 80064dc:	2301      	movne	r3, #1
 80064de:	2300      	moveq	r3, #0
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d004      	beq.n	80064f0 <HAL_TIM_PeriodElapsedCallback+0x7c>
      {
        myThermocouples.delay--;
 80064e6:	4b37      	ldr	r3, [pc, #220]	@ (80065c4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	3b01      	subs	r3, #1
 80064ec:	4a35      	ldr	r2, [pc, #212]	@ (80065c4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80064ee:	6193      	str	r3, [r2, #24]
      }
      // increment / decrement 1 ms timers here.
    }

    if ((timerCounter % 100) == 0)
 80064f0:	4b31      	ldr	r3, [pc, #196]	@ (80065b8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	4b34      	ldr	r3, [pc, #208]	@ (80065c8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80064f6:	fb83 1302 	smull	r1, r3, r3, r2
 80064fa:	1159      	asrs	r1, r3, #5
 80064fc:	17d3      	asrs	r3, r2, #31
 80064fe:	1acb      	subs	r3, r1, r3
 8006500:	2164      	movs	r1, #100	@ 0x64
 8006502:	fb01 f303 	mul.w	r3, r1, r3
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	2b00      	cmp	r3, #0
      //{
      //  thermocoupleDelay--;
      //}
    }

    if ((timerCounter % 1000) == 0)
 800650a:	4b2b      	ldr	r3, [pc, #172]	@ (80065b8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	4b2f      	ldr	r3, [pc, #188]	@ (80065cc <HAL_TIM_PeriodElapsedCallback+0x158>)
 8006510:	fb83 1302 	smull	r1, r3, r3, r2
 8006514:	1199      	asrs	r1, r3, #6
 8006516:	17d3      	asrs	r3, r2, #31
 8006518:	1acb      	subs	r3, r1, r3
 800651a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800651e:	fb01 f303 	mul.w	r3, r1, r3
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	2b00      	cmp	r3, #0
      //{
      //  helloWorldDelay--;
      //}
    }

    if ((timerCounter % 10000) == 0)
 8006526:	4b24      	ldr	r3, [pc, #144]	@ (80065b8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	4b29      	ldr	r3, [pc, #164]	@ (80065d0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800652c:	fb83 1302 	smull	r1, r3, r3, r2
 8006530:	1319      	asrs	r1, r3, #12
 8006532:	17d3      	asrs	r3, r2, #31
 8006534:	1acb      	subs	r3, r1, r3
 8006536:	f242 7110 	movw	r1, #10000	@ 0x2710
 800653a:	fb01 f303 	mul.w	r3, r1, r3
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	bf0c      	ite	eq
 8006544:	2301      	moveq	r3, #1
 8006546:	2300      	movne	r3, #0
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d02c      	beq.n	80065a8 <HAL_TIM_PeriodElapsedCallback+0x134>
    {
      // increment / decrement 1000 ms timers here.  Note this resets the timer variable.
      timerCounter = 0;
 800654e:	4b1a      	ldr	r3, [pc, #104]	@ (80065b8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8006550:	2200      	movs	r2, #0
 8006552:	601a      	str	r2, [r3, #0]
      if (myAccelerometer.delay)
 8006554:	4b1f      	ldr	r3, [pc, #124]	@ (80065d4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	bf14      	ite	ne
 800655c:	2301      	movne	r3, #1
 800655e:	2300      	moveq	r3, #0
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d004      	beq.n	8006570 <HAL_TIM_PeriodElapsedCallback+0xfc>
      {
        myAccelerometer.delay--;
 8006566:	4b1b      	ldr	r3, [pc, #108]	@ (80065d4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	3b01      	subs	r3, #1
 800656c:	4a19      	ldr	r2, [pc, #100]	@ (80065d4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800656e:	6013      	str	r3, [r2, #0]
      }
      if (myAccelerometer.readDelay)
 8006570:	4b18      	ldr	r3, [pc, #96]	@ (80065d4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	2b00      	cmp	r3, #0
 8006576:	bf14      	ite	ne
 8006578:	2301      	movne	r3, #1
 800657a:	2300      	moveq	r3, #0
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d004      	beq.n	800658c <HAL_TIM_PeriodElapsedCallback+0x118>
      {
        myAccelerometer.readDelay--;
 8006582:	4b14      	ldr	r3, [pc, #80]	@ (80065d4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	3b01      	subs	r3, #1
 8006588:	4a12      	ldr	r2, [pc, #72]	@ (80065d4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800658a:	6053      	str	r3, [r2, #4]
      }

      if (myBatteryMonitor.delay)
 800658c:	4b12      	ldr	r3, [pc, #72]	@ (80065d8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	2b00      	cmp	r3, #0
 8006592:	bf14      	ite	ne
 8006594:	2301      	movne	r3, #1
 8006596:	2300      	moveq	r3, #0
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d004      	beq.n	80065a8 <HAL_TIM_PeriodElapsedCallback+0x134>
      {
        myBatteryMonitor.delay--;
 800659e:	4b0e      	ldr	r3, [pc, #56]	@ (80065d8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	3b01      	subs	r3, #1
 80065a4:	4a0c      	ldr	r2, [pc, #48]	@ (80065d8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80065a6:	60d3      	str	r3, [r2, #12]
      }
    }
    //}
  }
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr
 80065b4:	200009b8 	.word	0x200009b8
 80065b8:	20000524 	.word	0x20000524
 80065bc:	66666667 	.word	0x66666667
 80065c0:	200005d0 	.word	0x200005d0
 80065c4:	20000584 	.word	0x20000584
 80065c8:	51eb851f 	.word	0x51eb851f
 80065cc:	10624dd3 	.word	0x10624dd3
 80065d0:	68db8bad 	.word	0x68db8bad
 80065d4:	20000528 	.word	0x20000528
 80065d8:	2000080c 	.word	0x2000080c

080065dc <HAL_SPI_TxCpltCallback>:



void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
    if (hspi == myScreen.tft._hspi) { // Make sure it's the right SPI instance
 80065e4:	4b05      	ldr	r3, [pc, #20]	@ (80065fc <HAL_SPI_TxCpltCallback+0x20>)
 80065e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d102      	bne.n	80065f4 <HAL_SPI_TxCpltCallback+0x18>
    	myScreen.tft.dmaTransferCompleteCallback();
 80065ee:	4803      	ldr	r0, [pc, #12]	@ (80065fc <HAL_SPI_TxCpltCallback+0x20>)
 80065f0:	f7fd fc69 	bl	8003ec6 <_ZN13ST7789V_STM3227dmaTransferCompleteCallbackEv>
    }
}
 80065f4:	bf00      	nop
 80065f6:	3708      	adds	r7, #8
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	200005d0 	.word	0x200005d0

08006600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006604:	f000 ff30 	bl	8007468 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8006608:	f7fe fbbe 	bl	8004d88 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800660c:	f000 f874 	bl	80066f8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8006610:	f000 f8f2 	bl	80067f8 <_Z24PeriphCommonClock_Configv>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8006614:	f7ff fcb6 	bl	8005f84 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006618:	f7fe fd8c 	bl	8005134 <MX_GPIO_Init>
  MX_DMA_Init();
 800661c:	f7fe fd5e 	bl	80050dc <MX_DMA_Init>
  MX_RTC_Init();
 8006620:	f000 f988 	bl	8006934 <MX_RTC_Init>
  MX_I2C1_Init();
 8006624:	f7ff fc0c 	bl	8005e40 <MX_I2C1_Init>
  MX_SPI1_Init();
 8006628:	f000 fa38 	bl	8006a9c <MX_SPI1_Init>
  MX_SPI2_Init();
 800662c:	f000 fa74 	bl	8006b18 <MX_SPI2_Init>
  MX_TIM2_Init();
 8006630:	f000 fd46 	bl	80070c0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8006634:	f000 fe4c 	bl	80072d0 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 8006638:	f000 fd9c 	bl	8007174 <MX_TIM16_Init>
  MX_RF_Init();
 800663c:	f000 f948 	bl	80068d0 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  //MX_APPE_Init();

  HAL_Delay(1000);
 8006640:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006644:	f7fe fcdb 	bl	8004ffe <HAL_Delay>
  MX_USB_Device_Init();
 8006648:	f011 faa6 	bl	8017b98 <MX_USB_Device_Init>
  HAL_Delay(1000);
 800664c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006650:	f7fe fcd5 	bl	8004ffe <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim16);
 8006654:	481f      	ldr	r0, [pc, #124]	@ (80066d4 <main+0xd4>)
 8006656:	f007 fc51 	bl	800defc <HAL_TIM_Base_Start_IT>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800665a:	2200      	movs	r2, #0
 800665c:	2100      	movs	r1, #0
 800665e:	2019      	movs	r0, #25
 8006660:	f001 f8cf 	bl	8007802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006664:	2019      	movs	r0, #25
 8006666:	f001 f8e6 	bl	8007836 <HAL_NVIC_EnableIRQ>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 800666a:	f7fe fb9b 	bl	8004da4 <MX_APPE_Init>

  myAccelerometer.setup();
 800666e:	481a      	ldr	r0, [pc, #104]	@ (80066d8 <main+0xd8>)
 8006670:	f7fd febc 	bl	80043ec <_ZN13Accelerometer5setupEv>
  myBacklight.setup();
 8006674:	4819      	ldr	r0, [pc, #100]	@ (80066dc <main+0xdc>)
 8006676:	f7fd ffc5 	bl	8004604 <_ZN9Backlight5setupEv>
  myThermocouples.setup();
 800667a:	4819      	ldr	r0, [pc, #100]	@ (80066e0 <main+0xe0>)
 800667c:	f7fe f8de 	bl	800483c <_ZN13Thermocouples5setupEv>
  myBatteryMonitor.setup();
 8006680:	4818      	ldr	r0, [pc, #96]	@ (80066e4 <main+0xe4>)
 8006682:	f7fe f873 	bl	800476c <_ZN14BatteryMonitor5setupEv>
  myScreen.setup();
 8006686:	4818      	ldr	r0, [pc, #96]	@ (80066e8 <main+0xe8>)
 8006688:	f011 f870 	bl	801776c <_ZN6Screen5setupEv>


  snprintf((char*)UART_BUFFER, 64, "Setup finished\r\n");
 800668c:	4a17      	ldr	r2, [pc, #92]	@ (80066ec <main+0xec>)
 800668e:	2140      	movs	r1, #64	@ 0x40
 8006690:	4817      	ldr	r0, [pc, #92]	@ (80066f0 <main+0xf0>)
 8006692:	f013 fd77 	bl	801a184 <sniprintf>
  HAL_UART_Transmit(&huart1, UART_BUFFER, strlen((char*)UART_BUFFER), 300);
 8006696:	4816      	ldr	r0, [pc, #88]	@ (80066f0 <main+0xf0>)
 8006698:	f7f9 fdc2 	bl	8000220 <strlen>
 800669c:	4603      	mov	r3, r0
 800669e:	b29a      	uxth	r2, r3
 80066a0:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80066a4:	4912      	ldr	r1, [pc, #72]	@ (80066f0 <main+0xf0>)
 80066a6:	4813      	ldr	r0, [pc, #76]	@ (80066f4 <main+0xf4>)
 80066a8:	f008 fbf8 	bl	800ee9c <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80066ac:	f7fe fccc 	bl	8005048 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */

    myAccelerometer.stateMachine();
 80066b0:	4809      	ldr	r0, [pc, #36]	@ (80066d8 <main+0xd8>)
 80066b2:	f7fd feaf 	bl	8004414 <_ZN13Accelerometer12stateMachineEv>
    myBacklight.stateMachine();
 80066b6:	4809      	ldr	r0, [pc, #36]	@ (80066dc <main+0xdc>)
 80066b8:	f7fd ffbe 	bl	8004638 <_ZN9Backlight12stateMachineEv>
    myThermocouples.stateMachine();
 80066bc:	4808      	ldr	r0, [pc, #32]	@ (80066e0 <main+0xe0>)
 80066be:	f7fe f937 	bl	8004930 <_ZN13Thermocouples12stateMachineEv>
    myBatteryMonitor.stateMachine();
 80066c2:	4808      	ldr	r0, [pc, #32]	@ (80066e4 <main+0xe4>)
 80066c4:	f7fe f870 	bl	80047a8 <_ZN14BatteryMonitor12stateMachineEv>
    myScreen.stateMachine();
 80066c8:	4807      	ldr	r0, [pc, #28]	@ (80066e8 <main+0xe8>)
 80066ca:	f011 f8ab 	bl	8017824 <_ZN6Screen12stateMachineEv>
    MX_APPE_Process();
 80066ce:	bf00      	nop
 80066d0:	e7ec      	b.n	80066ac <main+0xac>
 80066d2:	bf00      	nop
 80066d4:	200009b8 	.word	0x200009b8
 80066d8:	20000528 	.word	0x20000528
 80066dc:	20000008 	.word	0x20000008
 80066e0:	20000584 	.word	0x20000584
 80066e4:	2000080c 	.word	0x2000080c
 80066e8:	200005d0 	.word	0x200005d0
 80066ec:	0801c320 	.word	0x0801c320
 80066f0:	200004e4 	.word	0x200004e4
 80066f4:	20000a04 	.word	0x20000a04

080066f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b09a      	sub	sp, #104	@ 0x68
 80066fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80066fe:	f107 0320 	add.w	r3, r7, #32
 8006702:	2248      	movs	r2, #72	@ 0x48
 8006704:	2100      	movs	r1, #0
 8006706:	4618      	mov	r0, r3
 8006708:	f013 fdcf 	bl	801a2aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800670c:	1d3b      	adds	r3, r7, #4
 800670e:	2200      	movs	r2, #0
 8006710:	601a      	str	r2, [r3, #0]
 8006712:	605a      	str	r2, [r3, #4]
 8006714:	609a      	str	r2, [r3, #8]
 8006716:	60da      	str	r2, [r3, #12]
 8006718:	611a      	str	r2, [r3, #16]
 800671a:	615a      	str	r2, [r3, #20]
 800671c:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800671e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006728:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800672c:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800672e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	f023 0303 	bic.w	r3, r3, #3
 8006738:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800673c:	f043 0301 	orr.w	r3, r3, #1
 8006740:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8006742:	f004 fb83 	bl	800ae4c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8006746:	2010      	movs	r0, #16
 8006748:	f7ff fc54 	bl	8005ff4 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800674c:	4b29      	ldr	r3, [pc, #164]	@ (80067f4 <SystemClock_Config+0xfc>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006754:	4a27      	ldr	r2, [pc, #156]	@ (80067f4 <SystemClock_Config+0xfc>)
 8006756:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800675a:	6013      	str	r3, [r2, #0]
 800675c:	4b25      	ldr	r3, [pc, #148]	@ (80067f4 <SystemClock_Config+0xfc>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006764:	603b      	str	r3, [r7, #0]
 8006766:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8006768:	2327      	movs	r3, #39	@ 0x27
 800676a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800676c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006770:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8006772:	2301      	movs	r3, #1
 8006774:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006776:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800677a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800677c:	2301      	movs	r3, #1
 800677e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006780:	2340      	movs	r3, #64	@ 0x40
 8006782:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8006784:	2300      	movs	r3, #0
 8006786:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8006788:	2360      	movs	r3, #96	@ 0x60
 800678a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800678c:	2300      	movs	r3, #0
 800678e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006790:	f107 0320 	add.w	r3, r7, #32
 8006794:	4618      	mov	r0, r3
 8006796:	f004 fefd 	bl	800b594 <HAL_RCC_OscConfig>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	bf14      	ite	ne
 80067a0:	2301      	movne	r3, #1
 80067a2:	2300      	moveq	r3, #0
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80067aa:	f000 f851 	bl	8006850 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80067ae:	236f      	movs	r3, #111	@ 0x6f
 80067b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80067b2:	2302      	movs	r3, #2
 80067b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80067b6:	2300      	movs	r3, #0
 80067b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80067ba:	2300      	movs	r3, #0
 80067bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80067be:	2300      	movs	r3, #0
 80067c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80067c2:	2300      	movs	r3, #0
 80067c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80067c6:	2300      	movs	r3, #0
 80067c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80067ca:	1d3b      	adds	r3, r7, #4
 80067cc:	2101      	movs	r1, #1
 80067ce:	4618      	mov	r0, r3
 80067d0:	f005 fa54 	bl	800bc7c <HAL_RCC_ClockConfig>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	bf14      	ite	ne
 80067da:	2301      	movne	r3, #1
 80067dc:	2300      	moveq	r3, #0
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d001      	beq.n	80067e8 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80067e4:	f000 f834 	bl	8006850 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80067e8:	f006 f80a 	bl	800c800 <HAL_RCCEx_EnableMSIPLLMode>
}
 80067ec:	bf00      	nop
 80067ee:	3768      	adds	r7, #104	@ 0x68
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	58000400 	.word	0x58000400

080067f8 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b094      	sub	sp, #80	@ 0x50
 80067fc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80067fe:	463b      	mov	r3, r7
 8006800:	2250      	movs	r2, #80	@ 0x50
 8006802:	2100      	movs	r1, #0
 8006804:	4618      	mov	r0, r3
 8006806:	f013 fd50 	bl	801a2aa <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800680a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800680e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8006810:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006814:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8006816:	2302      	movs	r3, #2
 8006818:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800681a:	2310      	movs	r3, #16
 800681c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800681e:	463b      	mov	r3, r7
 8006820:	4618      	mov	r0, r3
 8006822:	f005 fe77 	bl	800c514 <HAL_RCCEx_PeriphCLKConfig>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	bf14      	ite	ne
 800682c:	2301      	movne	r3, #1
 800682e:	2300      	moveq	r3, #0
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d001      	beq.n	800683a <_Z24PeriphCommonClock_Configv+0x42>
  {
    Error_Handler();
 8006836:	f000 f80b 	bl	8006850 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */
  LL_HSEM_1StepLock(HSEM, 5);
 800683a:	2105      	movs	r1, #5
 800683c:	4803      	ldr	r0, [pc, #12]	@ (800684c <_Z24PeriphCommonClock_Configv+0x54>)
 800683e:	f7ff fbef 	bl	8006020 <LL_HSEM_1StepLock>

  /* USER CODE END Smps */
}
 8006842:	bf00      	nop
 8006844:	3750      	adds	r7, #80	@ 0x50
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	58001400 	.word	0x58001400

08006850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006850:	b480      	push	{r7}
 8006852:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006854:	b672      	cpsid	i
}
 8006856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006858:	bf00      	nop
 800685a:	e7fd      	b.n	8006858 <Error_Handler+0x8>

0800685c <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800685c:	b580      	push	{r7, lr}
 800685e:	af00      	add	r7, sp, #0
Accelerometer myAccelerometer;
 8006860:	4806      	ldr	r0, [pc, #24]	@ (800687c <_Z41__static_initialization_and_destruction_0v+0x20>)
 8006862:	f7ff fbf5 	bl	8006050 <_ZN13AccelerometerC1Ev>
Thermocouples myThermocouples;
 8006866:	4806      	ldr	r0, [pc, #24]	@ (8006880 <_Z41__static_initialization_and_destruction_0v+0x24>)
 8006868:	f7ff fc12 	bl	8006090 <_ZN13ThermocouplesC1Ev>
Screen myScreen;
 800686c:	4805      	ldr	r0, [pc, #20]	@ (8006884 <_Z41__static_initialization_and_destruction_0v+0x28>)
 800686e:	f7ff fc25 	bl	80060bc <_ZN6ScreenC1Ev>
BatteryMonitor myBatteryMonitor;
 8006872:	4805      	ldr	r0, [pc, #20]	@ (8006888 <_Z41__static_initialization_and_destruction_0v+0x2c>)
 8006874:	f7ff fdee 	bl	8006454 <_ZN14BatteryMonitorC1Ev>
}
 8006878:	bf00      	nop
 800687a:	bd80      	pop	{r7, pc}
 800687c:	20000528 	.word	0x20000528
 8006880:	20000584 	.word	0x20000584
 8006884:	200005d0 	.word	0x200005d0
 8006888:	2000080c 	.word	0x2000080c

0800688c <_ZN6ScreenD1Ev>:
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	336c      	adds	r3, #108	@ 0x6c
 8006898:	4618      	mov	r0, r3
 800689a:	f7fc f97b 	bl	8002b94 <_ZN11GFXcanvas16D1Ev>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4618      	mov	r0, r3
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <_Z41__static_initialization_and_destruction_1v>:
 80068a8:	b580      	push	{r7, lr}
 80068aa:	af00      	add	r7, sp, #0
Screen myScreen;
 80068ac:	4802      	ldr	r0, [pc, #8]	@ (80068b8 <_Z41__static_initialization_and_destruction_1v+0x10>)
 80068ae:	f7ff ffed 	bl	800688c <_ZN6ScreenD1Ev>
}
 80068b2:	bf00      	nop
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	200005d0 	.word	0x200005d0

080068bc <_GLOBAL__sub_I_UART_BUFFER>:
 80068bc:	b580      	push	{r7, lr}
 80068be:	af00      	add	r7, sp, #0
 80068c0:	f7ff ffcc 	bl	800685c <_Z41__static_initialization_and_destruction_0v>
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <_GLOBAL__sub_D_UART_BUFFER>:
 80068c6:	b580      	push	{r7, lr}
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	f7ff ffed 	bl	80068a8 <_Z41__static_initialization_and_destruction_1v>
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 80068d0:	b480      	push	{r7}
 80068d2:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80068d4:	bf00      	nop
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr

080068de <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80068de:	b480      	push	{r7}
 80068e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80068e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80068ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80068f6:	bf00      	nop
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <LL_APB1_GRP1_EnableClock>:
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006908:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800690c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800690e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4313      	orrs	r3, r2
 8006916:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006918:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800691c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4013      	ands	r3, r2
 8006922:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006924:	68fb      	ldr	r3, [r7, #12]
}
 8006926:	bf00      	nop
 8006928:	3714      	adds	r7, #20
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
	...

08006934 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8006938:	4b16      	ldr	r3, [pc, #88]	@ (8006994 <MX_RTC_Init+0x60>)
 800693a:	4a17      	ldr	r2, [pc, #92]	@ (8006998 <MX_RTC_Init+0x64>)
 800693c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800693e:	4b15      	ldr	r3, [pc, #84]	@ (8006994 <MX_RTC_Init+0x60>)
 8006940:	2200      	movs	r2, #0
 8006942:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8006944:	4b13      	ldr	r3, [pc, #76]	@ (8006994 <MX_RTC_Init+0x60>)
 8006946:	220f      	movs	r2, #15
 8006948:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800694a:	4b12      	ldr	r3, [pc, #72]	@ (8006994 <MX_RTC_Init+0x60>)
 800694c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8006950:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006952:	4b10      	ldr	r3, [pc, #64]	@ (8006994 <MX_RTC_Init+0x60>)
 8006954:	2200      	movs	r2, #0
 8006956:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006958:	4b0e      	ldr	r3, [pc, #56]	@ (8006994 <MX_RTC_Init+0x60>)
 800695a:	2200      	movs	r2, #0
 800695c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800695e:	4b0d      	ldr	r3, [pc, #52]	@ (8006994 <MX_RTC_Init+0x60>)
 8006960:	2200      	movs	r2, #0
 8006962:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8006964:	4b0b      	ldr	r3, [pc, #44]	@ (8006994 <MX_RTC_Init+0x60>)
 8006966:	2200      	movs	r2, #0
 8006968:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800696a:	480a      	ldr	r0, [pc, #40]	@ (8006994 <MX_RTC_Init+0x60>)
 800696c:	f006 f85f 	bl	800ca2e <HAL_RTC_Init>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8006976:	f7ff ff6b 	bl	8006850 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800697a:	2200      	movs	r2, #0
 800697c:	2100      	movs	r1, #0
 800697e:	4805      	ldr	r0, [pc, #20]	@ (8006994 <MX_RTC_Init+0x60>)
 8006980:	f006 f964 	bl	800cc4c <HAL_RTCEx_SetWakeUpTimer_IT>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d001      	beq.n	800698e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800698a:	f7ff ff61 	bl	8006850 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800698e:	bf00      	nop
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	2000081c 	.word	0x2000081c
 8006998:	40002800 	.word	0x40002800

0800699c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b096      	sub	sp, #88	@ 0x58
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80069a4:	f107 0308 	add.w	r3, r7, #8
 80069a8:	2250      	movs	r2, #80	@ 0x50
 80069aa:	2100      	movs	r1, #0
 80069ac:	4618      	mov	r0, r3
 80069ae:	f013 fc7c 	bl	801a2aa <memset>
  if(rtcHandle->Instance==RTC)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a12      	ldr	r2, [pc, #72]	@ (8006a00 <HAL_RTC_MspInit+0x64>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d11d      	bne.n	80069f8 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80069bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80069c0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80069c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80069c6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80069c8:	f107 0308 	add.w	r3, r7, #8
 80069cc:	4618      	mov	r0, r3
 80069ce:	f005 fda1 	bl	800c514 <HAL_RCCEx_PeriphCLKConfig>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d001      	beq.n	80069dc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80069d8:	f7ff ff3a 	bl	8006850 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80069dc:	f7ff ff7f 	bl	80068de <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80069e0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80069e4:	f7ff ff8c 	bl	8006900 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80069e8:	2200      	movs	r2, #0
 80069ea:	2100      	movs	r1, #0
 80069ec:	2003      	movs	r0, #3
 80069ee:	f000 ff08 	bl	8007802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80069f2:	2003      	movs	r0, #3
 80069f4:	f000 ff1f 	bl	8007836 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80069f8:	bf00      	nop
 80069fa:	3758      	adds	r7, #88	@ 0x58
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	40002800 	.word	0x40002800

08006a04 <LL_AHB2_GRP1_EnableClock>:
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006a0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a10:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006a12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006a1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a20:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4013      	ands	r3, r2
 8006a26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006a28:	68fb      	ldr	r3, [r7, #12]
}
 8006a2a:	bf00      	nop
 8006a2c:	3714      	adds	r7, #20
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <LL_APB1_GRP1_EnableClock>:
{
 8006a36:	b480      	push	{r7}
 8006a38:	b085      	sub	sp, #20
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006a3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a42:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006a44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006a4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a52:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4013      	ands	r3, r2
 8006a58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
}
 8006a5c:	bf00      	nop
 8006a5e:	3714      	adds	r7, #20
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8006a70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a74:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006a76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006a80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a84:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4013      	ands	r3, r2
 8006a8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
}
 8006a8e:	bf00      	nop
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
	...

08006a9c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8006aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8006b10 <MX_SPI1_Init+0x74>)
 8006aa2:	4a1c      	ldr	r2, [pc, #112]	@ (8006b14 <MX_SPI1_Init+0x78>)
 8006aa4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8006b10 <MX_SPI1_Init+0x74>)
 8006aa8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006aac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006aae:	4b18      	ldr	r3, [pc, #96]	@ (8006b10 <MX_SPI1_Init+0x74>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006ab4:	4b16      	ldr	r3, [pc, #88]	@ (8006b10 <MX_SPI1_Init+0x74>)
 8006ab6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8006aba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8006abc:	4b14      	ldr	r3, [pc, #80]	@ (8006b10 <MX_SPI1_Init+0x74>)
 8006abe:	2202      	movs	r2, #2
 8006ac0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006ac2:	4b13      	ldr	r3, [pc, #76]	@ (8006b10 <MX_SPI1_Init+0x74>)
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006ac8:	4b11      	ldr	r3, [pc, #68]	@ (8006b10 <MX_SPI1_Init+0x74>)
 8006aca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ace:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8006b10 <MX_SPI1_Init+0x74>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8006b10 <MX_SPI1_Init+0x74>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006adc:	4b0c      	ldr	r3, [pc, #48]	@ (8006b10 <MX_SPI1_Init+0x74>)
 8006ade:	2200      	movs	r2, #0
 8006ae0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8006b10 <MX_SPI1_Init+0x74>)
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8006ae8:	4b09      	ldr	r3, [pc, #36]	@ (8006b10 <MX_SPI1_Init+0x74>)
 8006aea:	2207      	movs	r2, #7
 8006aec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006aee:	4b08      	ldr	r3, [pc, #32]	@ (8006b10 <MX_SPI1_Init+0x74>)
 8006af0:	2200      	movs	r2, #0
 8006af2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8006af4:	4b06      	ldr	r3, [pc, #24]	@ (8006b10 <MX_SPI1_Init+0x74>)
 8006af6:	2200      	movs	r2, #0
 8006af8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006afa:	4805      	ldr	r0, [pc, #20]	@ (8006b10 <MX_SPI1_Init+0x74>)
 8006afc:	f006 f972 	bl	800cde4 <HAL_SPI_Init>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8006b06:	f7ff fea3 	bl	8006850 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006b0a:	bf00      	nop
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	20000840 	.word	0x20000840
 8006b14:	40013000 	.word	0x40013000

08006b18 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8006b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8006b8c <MX_SPI2_Init+0x74>)
 8006b1e:	4a1c      	ldr	r2, [pc, #112]	@ (8006b90 <MX_SPI2_Init+0x78>)
 8006b20:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006b22:	4b1a      	ldr	r3, [pc, #104]	@ (8006b8c <MX_SPI2_Init+0x74>)
 8006b24:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006b28:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006b2a:	4b18      	ldr	r3, [pc, #96]	@ (8006b8c <MX_SPI2_Init+0x74>)
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006b30:	4b16      	ldr	r3, [pc, #88]	@ (8006b8c <MX_SPI2_Init+0x74>)
 8006b32:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8006b36:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b38:	4b14      	ldr	r3, [pc, #80]	@ (8006b8c <MX_SPI2_Init+0x74>)
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006b3e:	4b13      	ldr	r3, [pc, #76]	@ (8006b8c <MX_SPI2_Init+0x74>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006b44:	4b11      	ldr	r3, [pc, #68]	@ (8006b8c <MX_SPI2_Init+0x74>)
 8006b46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b4a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8006b8c <MX_SPI2_Init+0x74>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006b52:	4b0e      	ldr	r3, [pc, #56]	@ (8006b8c <MX_SPI2_Init+0x74>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006b58:	4b0c      	ldr	r3, [pc, #48]	@ (8006b8c <MX_SPI2_Init+0x74>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8006b8c <MX_SPI2_Init+0x74>)
 8006b60:	2200      	movs	r2, #0
 8006b62:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8006b64:	4b09      	ldr	r3, [pc, #36]	@ (8006b8c <MX_SPI2_Init+0x74>)
 8006b66:	2207      	movs	r2, #7
 8006b68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006b6a:	4b08      	ldr	r3, [pc, #32]	@ (8006b8c <MX_SPI2_Init+0x74>)
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006b70:	4b06      	ldr	r3, [pc, #24]	@ (8006b8c <MX_SPI2_Init+0x74>)
 8006b72:	2208      	movs	r2, #8
 8006b74:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006b76:	4805      	ldr	r0, [pc, #20]	@ (8006b8c <MX_SPI2_Init+0x74>)
 8006b78:	f006 f934 	bl	800cde4 <HAL_SPI_Init>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d001      	beq.n	8006b86 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8006b82:	f7ff fe65 	bl	8006850 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006b86:	bf00      	nop
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	200008a4 	.word	0x200008a4
 8006b90:	40003800 	.word	0x40003800

08006b94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b088      	sub	sp, #32
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b9c:	f107 030c 	add.w	r3, r7, #12
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	601a      	str	r2, [r3, #0]
 8006ba4:	605a      	str	r2, [r3, #4]
 8006ba6:	609a      	str	r2, [r3, #8]
 8006ba8:	60da      	str	r2, [r3, #12]
 8006baa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a3b      	ldr	r2, [pc, #236]	@ (8006ca0 <HAL_SPI_MspInit+0x10c>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d120      	bne.n	8006bf8 <HAL_SPI_MspInit+0x64>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006bb6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8006bba:	f7ff ff55 	bl	8006a68 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bbe:	2001      	movs	r0, #1
 8006bc0:	f7ff ff20 	bl	8006a04 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006bc4:	23e0      	movs	r3, #224	@ 0xe0
 8006bc6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bc8:	2302      	movs	r3, #2
 8006bca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006bd4:	2305      	movs	r3, #5
 8006bd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bd8:	f107 030c 	add.w	r3, r7, #12
 8006bdc:	4619      	mov	r1, r3
 8006bde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006be2:	f001 f941 	bl	8007e68 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8006be6:	2200      	movs	r2, #0
 8006be8:	2100      	movs	r1, #0
 8006bea:	2022      	movs	r0, #34	@ 0x22
 8006bec:	f000 fe09 	bl	8007802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8006bf0:	2022      	movs	r0, #34	@ 0x22
 8006bf2:	f000 fe20 	bl	8007836 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8006bf6:	e04e      	b.n	8006c96 <HAL_SPI_MspInit+0x102>
  else if(spiHandle->Instance==SPI2)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a29      	ldr	r2, [pc, #164]	@ (8006ca4 <HAL_SPI_MspInit+0x110>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d149      	bne.n	8006c96 <HAL_SPI_MspInit+0x102>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006c02:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8006c06:	f7ff ff16 	bl	8006a36 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c0a:	2002      	movs	r0, #2
 8006c0c:	f7ff fefa 	bl	8006a04 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006c10:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8006c14:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c16:	2302      	movs	r3, #2
 8006c18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006c22:	2305      	movs	r3, #5
 8006c24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c26:	f107 030c 	add.w	r3, r7, #12
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	481e      	ldr	r0, [pc, #120]	@ (8006ca8 <HAL_SPI_MspInit+0x114>)
 8006c2e:	f001 f91b 	bl	8007e68 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8006c32:	4b1e      	ldr	r3, [pc, #120]	@ (8006cac <HAL_SPI_MspInit+0x118>)
 8006c34:	4a1e      	ldr	r2, [pc, #120]	@ (8006cb0 <HAL_SPI_MspInit+0x11c>)
 8006c36:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8006c38:	4b1c      	ldr	r3, [pc, #112]	@ (8006cac <HAL_SPI_MspInit+0x118>)
 8006c3a:	2209      	movs	r2, #9
 8006c3c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8006cac <HAL_SPI_MspInit+0x118>)
 8006c40:	2210      	movs	r2, #16
 8006c42:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c44:	4b19      	ldr	r3, [pc, #100]	@ (8006cac <HAL_SPI_MspInit+0x118>)
 8006c46:	2200      	movs	r2, #0
 8006c48:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006c4a:	4b18      	ldr	r3, [pc, #96]	@ (8006cac <HAL_SPI_MspInit+0x118>)
 8006c4c:	2280      	movs	r2, #128	@ 0x80
 8006c4e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006c50:	4b16      	ldr	r3, [pc, #88]	@ (8006cac <HAL_SPI_MspInit+0x118>)
 8006c52:	2200      	movs	r2, #0
 8006c54:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006c56:	4b15      	ldr	r3, [pc, #84]	@ (8006cac <HAL_SPI_MspInit+0x118>)
 8006c58:	2200      	movs	r2, #0
 8006c5a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8006c5c:	4b13      	ldr	r3, [pc, #76]	@ (8006cac <HAL_SPI_MspInit+0x118>)
 8006c5e:	2200      	movs	r2, #0
 8006c60:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8006c62:	4b12      	ldr	r3, [pc, #72]	@ (8006cac <HAL_SPI_MspInit+0x118>)
 8006c64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006c68:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8006c6a:	4810      	ldr	r0, [pc, #64]	@ (8006cac <HAL_SPI_MspInit+0x118>)
 8006c6c:	f000 fe28 	bl	80078c0 <HAL_DMA_Init>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d001      	beq.n	8006c7a <HAL_SPI_MspInit+0xe6>
      Error_Handler();
 8006c76:	f7ff fdeb 	bl	8006850 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a0b      	ldr	r2, [pc, #44]	@ (8006cac <HAL_SPI_MspInit+0x118>)
 8006c7e:	655a      	str	r2, [r3, #84]	@ 0x54
 8006c80:	4a0a      	ldr	r2, [pc, #40]	@ (8006cac <HAL_SPI_MspInit+0x118>)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8006c86:	2200      	movs	r2, #0
 8006c88:	2100      	movs	r1, #0
 8006c8a:	2023      	movs	r0, #35	@ 0x23
 8006c8c:	f000 fdb9 	bl	8007802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8006c90:	2023      	movs	r0, #35	@ 0x23
 8006c92:	f000 fdd0 	bl	8007836 <HAL_NVIC_EnableIRQ>
}
 8006c96:	bf00      	nop
 8006c98:	3720      	adds	r7, #32
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	40013000 	.word	0x40013000
 8006ca4:	40003800 	.word	0x40003800
 8006ca8:	48000400 	.word	0x48000400
 8006cac:	20000908 	.word	0x20000908
 8006cb0:	40020008 	.word	0x40020008

08006cb4 <LL_AHB3_GRP1_EnableClock>:
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006cbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cc0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006cc2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006ccc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cd0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
}
 8006cda:	bf00      	nop
 8006cdc:	3714      	adds	r7, #20
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8006cea:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006cee:	f7ff ffe1 	bl	8006cb4 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	202e      	movs	r0, #46	@ 0x2e
 8006cf8:	f000 fd83 	bl	8007802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8006cfc:	202e      	movs	r0, #46	@ 0x2e
 8006cfe:	f000 fd9a 	bl	8007836 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006d02:	bf00      	nop
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006d06:	b480      	push	{r7}
 8006d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006d0a:	bf00      	nop
 8006d0c:	e7fd      	b.n	8006d0a <NMI_Handler+0x4>

08006d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006d0e:	b480      	push	{r7}
 8006d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006d12:	bf00      	nop
 8006d14:	e7fd      	b.n	8006d12 <HardFault_Handler+0x4>

08006d16 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006d16:	b480      	push	{r7}
 8006d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006d1a:	bf00      	nop
 8006d1c:	e7fd      	b.n	8006d1a <MemManage_Handler+0x4>

08006d1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006d22:	bf00      	nop
 8006d24:	e7fd      	b.n	8006d22 <BusFault_Handler+0x4>

08006d26 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006d26:	b480      	push	{r7}
 8006d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006d2a:	bf00      	nop
 8006d2c:	e7fd      	b.n	8006d2a <UsageFault_Handler+0x4>

08006d2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006d2e:	b480      	push	{r7}
 8006d30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006d32:	bf00      	nop
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006d40:	bf00      	nop
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006d4e:	bf00      	nop
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006d5c:	f000 fbde 	bl	800751c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006d60:	bf00      	nop
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8006d68:	f7fe fd7e 	bl	8005868 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8006d6c:	bf00      	nop
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8006d74:	4802      	ldr	r0, [pc, #8]	@ (8006d80 <DMA1_Channel1_IRQHandler+0x10>)
 8006d76:	f000 ff25 	bl	8007bc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006d7a:	bf00      	nop
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	20000908 	.word	0x20000908

08006d84 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8006d88:	4802      	ldr	r0, [pc, #8]	@ (8006d94 <USB_LP_IRQHandler+0x10>)
 8006d8a:	f002 fc4d 	bl	8009628 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8006d8e:	bf00      	nop
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	200020c8 	.word	0x200020c8

08006d98 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8006d9c:	4802      	ldr	r0, [pc, #8]	@ (8006da8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8006d9e:	f007 fa2d 	bl	800e1fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8006da2:	bf00      	nop
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	200009b8 	.word	0x200009b8

08006dac <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8006db0:	4802      	ldr	r0, [pc, #8]	@ (8006dbc <SPI1_IRQHandler+0x10>)
 8006db2:	f006 fd3d 	bl	800d830 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8006db6:	bf00      	nop
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	20000840 	.word	0x20000840

08006dc0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8006dc4:	4802      	ldr	r0, [pc, #8]	@ (8006dd0 <SPI2_IRQHandler+0x10>)
 8006dc6:	f006 fd33 	bl	800d830 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8006dca:	bf00      	nop
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	200008a4 	.word	0x200008a4

08006dd4 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8006dd8:	f00f fc6e 	bl	80166b8 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8006ddc:	bf00      	nop
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8006de4:	f00f fc9e 	bl	8016724 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8006de8:	bf00      	nop
 8006dea:	bd80      	pop	{r7, pc}

08006dec <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8006df0:	f001 f9c2 	bl	8008178 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8006df4:	bf00      	nop
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	af00      	add	r7, sp, #0
  return 1;
 8006dfc:	2301      	movs	r3, #1
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <_kill>:

int _kill(int pid, int sig)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006e12:	f013 faf1 	bl	801a3f8 <__errno>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2216      	movs	r2, #22
 8006e1a:	601a      	str	r2, [r3, #0]
  return -1;
 8006e1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <_exit>:

void _exit (int status)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006e30:	f04f 31ff 	mov.w	r1, #4294967295
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f7ff ffe7 	bl	8006e08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006e3a:	bf00      	nop
 8006e3c:	e7fd      	b.n	8006e3a <_exit+0x12>

08006e3e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b086      	sub	sp, #24
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	60f8      	str	r0, [r7, #12]
 8006e46:	60b9      	str	r1, [r7, #8]
 8006e48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	617b      	str	r3, [r7, #20]
 8006e4e:	e00a      	b.n	8006e66 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006e50:	f3af 8000 	nop.w
 8006e54:	4601      	mov	r1, r0
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	1c5a      	adds	r2, r3, #1
 8006e5a:	60ba      	str	r2, [r7, #8]
 8006e5c:	b2ca      	uxtb	r2, r1
 8006e5e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	3301      	adds	r3, #1
 8006e64:	617b      	str	r3, [r7, #20]
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	dbf0      	blt.n	8006e50 <_read+0x12>
  }

  return len;
 8006e6e:	687b      	ldr	r3, [r7, #4]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3718      	adds	r7, #24
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b086      	sub	sp, #24
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e84:	2300      	movs	r3, #0
 8006e86:	617b      	str	r3, [r7, #20]
 8006e88:	e009      	b.n	8006e9e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	1c5a      	adds	r2, r3, #1
 8006e8e:	60ba      	str	r2, [r7, #8]
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	4618      	mov	r0, r3
 8006e94:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	617b      	str	r3, [r7, #20]
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	dbf1      	blt.n	8006e8a <_write+0x12>
  }
  return len;
 8006ea6:	687b      	ldr	r3, [r7, #4]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3718      	adds	r7, #24
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <_close>:

int _close(int file)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006eb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006ed8:	605a      	str	r2, [r3, #4]
  return 0;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <_isatty>:

int _isatty(int file)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006ef0:	2301      	movs	r3, #1
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	370c      	adds	r7, #12
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr

08006efe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006efe:	b480      	push	{r7}
 8006f00:	b085      	sub	sp, #20
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	60f8      	str	r0, [r7, #12]
 8006f06:	60b9      	str	r1, [r7, #8]
 8006f08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3714      	adds	r7, #20
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b086      	sub	sp, #24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006f20:	4a14      	ldr	r2, [pc, #80]	@ (8006f74 <_sbrk+0x5c>)
 8006f22:	4b15      	ldr	r3, [pc, #84]	@ (8006f78 <_sbrk+0x60>)
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006f2c:	4b13      	ldr	r3, [pc, #76]	@ (8006f7c <_sbrk+0x64>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d102      	bne.n	8006f3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006f34:	4b11      	ldr	r3, [pc, #68]	@ (8006f7c <_sbrk+0x64>)
 8006f36:	4a12      	ldr	r2, [pc, #72]	@ (8006f80 <_sbrk+0x68>)
 8006f38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006f3a:	4b10      	ldr	r3, [pc, #64]	@ (8006f7c <_sbrk+0x64>)
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4413      	add	r3, r2
 8006f42:	693a      	ldr	r2, [r7, #16]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d207      	bcs.n	8006f58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006f48:	f013 fa56 	bl	801a3f8 <__errno>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	220c      	movs	r2, #12
 8006f50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006f52:	f04f 33ff 	mov.w	r3, #4294967295
 8006f56:	e009      	b.n	8006f6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006f58:	4b08      	ldr	r3, [pc, #32]	@ (8006f7c <_sbrk+0x64>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006f5e:	4b07      	ldr	r3, [pc, #28]	@ (8006f7c <_sbrk+0x64>)
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4413      	add	r3, r2
 8006f66:	4a05      	ldr	r2, [pc, #20]	@ (8006f7c <_sbrk+0x64>)
 8006f68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3718      	adds	r7, #24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	20030000 	.word	0x20030000
 8006f78:	00001000 	.word	0x00001000
 8006f7c:	20000968 	.word	0x20000968
 8006f80:	200027b0 	.word	0x200027b0

08006f84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006f84:	b480      	push	{r7}
 8006f86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8006f88:	4b24      	ldr	r3, [pc, #144]	@ (800701c <SystemInit+0x98>)
 8006f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f8e:	4a23      	ldr	r2, [pc, #140]	@ (800701c <SystemInit+0x98>)
 8006f90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006f94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006f98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006fa2:	f043 0301 	orr.w	r3, r3, #1
 8006fa6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8006fa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fac:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8006fb0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8006fb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006fbc:	4b18      	ldr	r3, [pc, #96]	@ (8007020 <SystemInit+0x9c>)
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8006fc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006fce:	f023 0305 	bic.w	r3, r3, #5
 8006fd2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8006fd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006fde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006fe2:	f023 0301 	bic.w	r3, r3, #1
 8006fe6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8006fea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fee:	4a0d      	ldr	r2, [pc, #52]	@ (8007024 <SystemInit+0xa0>)
 8006ff0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8006ff2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ff6:	4a0b      	ldr	r2, [pc, #44]	@ (8007024 <SystemInit+0xa0>)
 8006ff8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006ffa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007004:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007008:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800700a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800700e:	2200      	movs	r2, #0
 8007010:	619a      	str	r2, [r3, #24]
}
 8007012:	bf00      	nop
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr
 800701c:	e000ed00 	.word	0xe000ed00
 8007020:	faf6fefb 	.word	0xfaf6fefb
 8007024:	22041000 	.word	0x22041000

08007028 <LL_AHB2_GRP1_EnableClock>:
{
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007030:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007034:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007036:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4313      	orrs	r3, r2
 800703e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007040:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007044:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4013      	ands	r3, r2
 800704a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800704c:	68fb      	ldr	r3, [r7, #12]
}
 800704e:	bf00      	nop
 8007050:	3714      	adds	r7, #20
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr

0800705a <LL_APB1_GRP1_EnableClock>:
{
 800705a:	b480      	push	{r7}
 800705c:	b085      	sub	sp, #20
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8007062:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007066:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007068:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4313      	orrs	r3, r2
 8007070:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8007072:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007076:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4013      	ands	r3, r2
 800707c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800707e:	68fb      	ldr	r3, [r7, #12]
}
 8007080:	bf00      	nop
 8007082:	3714      	adds	r7, #20
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <LL_APB2_GRP1_EnableClock>:
{
 800708c:	b480      	push	{r7}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8007094:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007098:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800709a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80070a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070a8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4013      	ands	r3, r2
 80070ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80070b0:	68fb      	ldr	r3, [r7, #12]
}
 80070b2:	bf00      	nop
 80070b4:	3714      	adds	r7, #20
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
	...

080070c0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b08a      	sub	sp, #40	@ 0x28
 80070c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80070c6:	f107 031c 	add.w	r3, r7, #28
 80070ca:	2200      	movs	r2, #0
 80070cc:	601a      	str	r2, [r3, #0]
 80070ce:	605a      	str	r2, [r3, #4]
 80070d0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80070d2:	463b      	mov	r3, r7
 80070d4:	2200      	movs	r2, #0
 80070d6:	601a      	str	r2, [r3, #0]
 80070d8:	605a      	str	r2, [r3, #4]
 80070da:	609a      	str	r2, [r3, #8]
 80070dc:	60da      	str	r2, [r3, #12]
 80070de:	611a      	str	r2, [r3, #16]
 80070e0:	615a      	str	r2, [r3, #20]
 80070e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80070e4:	4b22      	ldr	r3, [pc, #136]	@ (8007170 <MX_TIM2_Init+0xb0>)
 80070e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80070ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 80070ec:	4b20      	ldr	r3, [pc, #128]	@ (8007170 <MX_TIM2_Init+0xb0>)
 80070ee:	221f      	movs	r2, #31
 80070f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80070f2:	4b1f      	ldr	r3, [pc, #124]	@ (8007170 <MX_TIM2_Init+0xb0>)
 80070f4:	2200      	movs	r2, #0
 80070f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80070f8:	4b1d      	ldr	r3, [pc, #116]	@ (8007170 <MX_TIM2_Init+0xb0>)
 80070fa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80070fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007100:	4b1b      	ldr	r3, [pc, #108]	@ (8007170 <MX_TIM2_Init+0xb0>)
 8007102:	2200      	movs	r2, #0
 8007104:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007106:	4b1a      	ldr	r3, [pc, #104]	@ (8007170 <MX_TIM2_Init+0xb0>)
 8007108:	2200      	movs	r2, #0
 800710a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800710c:	4818      	ldr	r0, [pc, #96]	@ (8007170 <MX_TIM2_Init+0xb0>)
 800710e:	f006 ff43 	bl	800df98 <HAL_TIM_PWM_Init>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d001      	beq.n	800711c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8007118:	f7ff fb9a 	bl	8006850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800711c:	2300      	movs	r3, #0
 800711e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007120:	2300      	movs	r3, #0
 8007122:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007124:	f107 031c 	add.w	r3, r7, #28
 8007128:	4619      	mov	r1, r3
 800712a:	4811      	ldr	r0, [pc, #68]	@ (8007170 <MX_TIM2_Init+0xb0>)
 800712c:	f007 fdb8 	bl	800eca0 <HAL_TIMEx_MasterConfigSynchronization>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d001      	beq.n	800713a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8007136:	f7ff fb8b 	bl	8006850 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800713a:	2360      	movs	r3, #96	@ 0x60
 800713c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800713e:	2300      	movs	r3, #0
 8007140:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007142:	2300      	movs	r3, #0
 8007144:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007146:	2300      	movs	r3, #0
 8007148:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800714a:	463b      	mov	r3, r7
 800714c:	2200      	movs	r2, #0
 800714e:	4619      	mov	r1, r3
 8007150:	4807      	ldr	r0, [pc, #28]	@ (8007170 <MX_TIM2_Init+0xb0>)
 8007152:	f007 f95b 	bl	800e40c <HAL_TIM_PWM_ConfigChannel>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d001      	beq.n	8007160 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800715c:	f7ff fb78 	bl	8006850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8007160:	4803      	ldr	r0, [pc, #12]	@ (8007170 <MX_TIM2_Init+0xb0>)
 8007162:	f000 f859 	bl	8007218 <HAL_TIM_MspPostInit>

}
 8007166:	bf00      	nop
 8007168:	3728      	adds	r7, #40	@ 0x28
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	2000096c 	.word	0x2000096c

08007174 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8007178:	4b0f      	ldr	r3, [pc, #60]	@ (80071b8 <MX_TIM16_Init+0x44>)
 800717a:	4a10      	ldr	r2, [pc, #64]	@ (80071bc <MX_TIM16_Init+0x48>)
 800717c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 800717e:	4b0e      	ldr	r3, [pc, #56]	@ (80071b8 <MX_TIM16_Init+0x44>)
 8007180:	221f      	movs	r2, #31
 8007182:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007184:	4b0c      	ldr	r3, [pc, #48]	@ (80071b8 <MX_TIM16_Init+0x44>)
 8007186:	2200      	movs	r2, #0
 8007188:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 99;
 800718a:	4b0b      	ldr	r3, [pc, #44]	@ (80071b8 <MX_TIM16_Init+0x44>)
 800718c:	2263      	movs	r2, #99	@ 0x63
 800718e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007190:	4b09      	ldr	r3, [pc, #36]	@ (80071b8 <MX_TIM16_Init+0x44>)
 8007192:	2200      	movs	r2, #0
 8007194:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8007196:	4b08      	ldr	r3, [pc, #32]	@ (80071b8 <MX_TIM16_Init+0x44>)
 8007198:	2200      	movs	r2, #0
 800719a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800719c:	4b06      	ldr	r3, [pc, #24]	@ (80071b8 <MX_TIM16_Init+0x44>)
 800719e:	2280      	movs	r2, #128	@ 0x80
 80071a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80071a2:	4805      	ldr	r0, [pc, #20]	@ (80071b8 <MX_TIM16_Init+0x44>)
 80071a4:	f006 fe52 	bl	800de4c <HAL_TIM_Base_Init>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d001      	beq.n	80071b2 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80071ae:	f7ff fb4f 	bl	8006850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80071b2:	bf00      	nop
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	200009b8 	.word	0x200009b8
 80071bc:	40014400 	.word	0x40014400

080071c0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071d0:	d102      	bne.n	80071d8 <HAL_TIM_PWM_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80071d2:	2001      	movs	r0, #1
 80071d4:	f7ff ff41 	bl	800705a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80071d8:	bf00      	nop
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a09      	ldr	r2, [pc, #36]	@ (8007214 <HAL_TIM_Base_MspInit+0x34>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d10b      	bne.n	800720a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80071f2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80071f6:	f7ff ff49 	bl	800708c <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80071fa:	2200      	movs	r2, #0
 80071fc:	2100      	movs	r1, #0
 80071fe:	2019      	movs	r0, #25
 8007200:	f000 faff 	bl	8007802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8007204:	2019      	movs	r0, #25
 8007206:	f000 fb16 	bl	8007836 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800720a:	bf00      	nop
 800720c:	3708      	adds	r7, #8
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	40014400 	.word	0x40014400

08007218 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b088      	sub	sp, #32
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007220:	f107 030c 	add.w	r3, r7, #12
 8007224:	2200      	movs	r2, #0
 8007226:	601a      	str	r2, [r3, #0]
 8007228:	605a      	str	r2, [r3, #4]
 800722a:	609a      	str	r2, [r3, #8]
 800722c:	60da      	str	r2, [r3, #12]
 800722e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007238:	d113      	bne.n	8007262 <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800723a:	2001      	movs	r0, #1
 800723c:	f7ff fef4 	bl	8007028 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TFT_BACKLIGHT_Pin;
 8007240:	2301      	movs	r3, #1
 8007242:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007244:	2302      	movs	r3, #2
 8007246:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007248:	2300      	movs	r3, #0
 800724a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800724c:	2300      	movs	r3, #0
 800724e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007250:	2301      	movs	r3, #1
 8007252:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TFT_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 8007254:	f107 030c 	add.w	r3, r7, #12
 8007258:	4619      	mov	r1, r3
 800725a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800725e:	f000 fe03 	bl	8007e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8007262:	bf00      	nop
 8007264:	3720      	adds	r7, #32
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <LL_AHB2_GRP1_EnableClock>:
{
 800726a:	b480      	push	{r7}
 800726c:	b085      	sub	sp, #20
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007272:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007276:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007278:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4313      	orrs	r3, r2
 8007280:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007282:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007286:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4013      	ands	r3, r2
 800728c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800728e:	68fb      	ldr	r3, [r7, #12]
}
 8007290:	bf00      	nop
 8007292:	3714      	adds	r7, #20
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <LL_APB2_GRP1_EnableClock>:
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80072a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072a8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80072aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80072b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072b8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4013      	ands	r3, r2
 80072be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80072c0:	68fb      	ldr	r3, [r7, #12]
}
 80072c2:	bf00      	nop
 80072c4:	3714      	adds	r7, #20
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
	...

080072d0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80072d4:	4b22      	ldr	r3, [pc, #136]	@ (8007360 <MX_USART1_UART_Init+0x90>)
 80072d6:	4a23      	ldr	r2, [pc, #140]	@ (8007364 <MX_USART1_UART_Init+0x94>)
 80072d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80072da:	4b21      	ldr	r3, [pc, #132]	@ (8007360 <MX_USART1_UART_Init+0x90>)
 80072dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80072e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80072e2:	4b1f      	ldr	r3, [pc, #124]	@ (8007360 <MX_USART1_UART_Init+0x90>)
 80072e4:	2200      	movs	r2, #0
 80072e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80072e8:	4b1d      	ldr	r3, [pc, #116]	@ (8007360 <MX_USART1_UART_Init+0x90>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80072ee:	4b1c      	ldr	r3, [pc, #112]	@ (8007360 <MX_USART1_UART_Init+0x90>)
 80072f0:	2200      	movs	r2, #0
 80072f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80072f4:	4b1a      	ldr	r3, [pc, #104]	@ (8007360 <MX_USART1_UART_Init+0x90>)
 80072f6:	220c      	movs	r2, #12
 80072f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80072fa:	4b19      	ldr	r3, [pc, #100]	@ (8007360 <MX_USART1_UART_Init+0x90>)
 80072fc:	2200      	movs	r2, #0
 80072fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007300:	4b17      	ldr	r3, [pc, #92]	@ (8007360 <MX_USART1_UART_Init+0x90>)
 8007302:	2200      	movs	r2, #0
 8007304:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007306:	4b16      	ldr	r3, [pc, #88]	@ (8007360 <MX_USART1_UART_Init+0x90>)
 8007308:	2200      	movs	r2, #0
 800730a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800730c:	4b14      	ldr	r3, [pc, #80]	@ (8007360 <MX_USART1_UART_Init+0x90>)
 800730e:	2200      	movs	r2, #0
 8007310:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007312:	4b13      	ldr	r3, [pc, #76]	@ (8007360 <MX_USART1_UART_Init+0x90>)
 8007314:	2200      	movs	r2, #0
 8007316:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007318:	4811      	ldr	r0, [pc, #68]	@ (8007360 <MX_USART1_UART_Init+0x90>)
 800731a:	f007 fd5f 	bl	800eddc <HAL_UART_Init>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d001      	beq.n	8007328 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8007324:	f7ff fa94 	bl	8006850 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007328:	2100      	movs	r1, #0
 800732a:	480d      	ldr	r0, [pc, #52]	@ (8007360 <MX_USART1_UART_Init+0x90>)
 800732c:	f008 fb90 	bl	800fa50 <HAL_UARTEx_SetTxFifoThreshold>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d001      	beq.n	800733a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8007336:	f7ff fa8b 	bl	8006850 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800733a:	2100      	movs	r1, #0
 800733c:	4808      	ldr	r0, [pc, #32]	@ (8007360 <MX_USART1_UART_Init+0x90>)
 800733e:	f008 fbc5 	bl	800facc <HAL_UARTEx_SetRxFifoThreshold>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d001      	beq.n	800734c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8007348:	f7ff fa82 	bl	8006850 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800734c:	4804      	ldr	r0, [pc, #16]	@ (8007360 <MX_USART1_UART_Init+0x90>)
 800734e:	f008 fb46 	bl	800f9de <HAL_UARTEx_DisableFifoMode>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8007358:	f7ff fa7a 	bl	8006850 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800735c:	bf00      	nop
 800735e:	bd80      	pop	{r7, pc}
 8007360:	20000a04 	.word	0x20000a04
 8007364:	40013800 	.word	0x40013800

08007368 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b09c      	sub	sp, #112	@ 0x70
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007370:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8007374:	2200      	movs	r2, #0
 8007376:	601a      	str	r2, [r3, #0]
 8007378:	605a      	str	r2, [r3, #4]
 800737a:	609a      	str	r2, [r3, #8]
 800737c:	60da      	str	r2, [r3, #12]
 800737e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007380:	f107 030c 	add.w	r3, r7, #12
 8007384:	2250      	movs	r2, #80	@ 0x50
 8007386:	2100      	movs	r1, #0
 8007388:	4618      	mov	r0, r3
 800738a:	f012 ff8e 	bl	801a2aa <memset>
  if(uartHandle->Instance==USART1)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a16      	ldr	r2, [pc, #88]	@ (80073ec <HAL_UART_MspInit+0x84>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d124      	bne.n	80073e2 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007398:	2301      	movs	r3, #1
 800739a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800739c:	2300      	movs	r3, #0
 800739e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80073a0:	f107 030c 	add.w	r3, r7, #12
 80073a4:	4618      	mov	r0, r3
 80073a6:	f005 f8b5 	bl	800c514 <HAL_RCCEx_PeriphCLKConfig>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d001      	beq.n	80073b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80073b0:	f7ff fa4e 	bl	8006850 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80073b4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80073b8:	f7ff ff70 	bl	800729c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073bc:	2002      	movs	r0, #2
 80073be:	f7ff ff54 	bl	800726a <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80073c2:	23c0      	movs	r3, #192	@ 0xc0
 80073c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073c6:	2302      	movs	r3, #2
 80073c8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073ca:	2300      	movs	r3, #0
 80073cc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073ce:	2300      	movs	r3, #0
 80073d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80073d2:	2307      	movs	r3, #7
 80073d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073d6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80073da:	4619      	mov	r1, r3
 80073dc:	4804      	ldr	r0, [pc, #16]	@ (80073f0 <HAL_UART_MspInit+0x88>)
 80073de:	f000 fd43 	bl	8007e68 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80073e2:	bf00      	nop
 80073e4:	3770      	adds	r7, #112	@ 0x70
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	40013800 	.word	0x40013800
 80073f0:	48000400 	.word	0x48000400

080073f4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80073f4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80073f6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80073f8:	3304      	adds	r3, #4

080073fa <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80073fa:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80073fc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80073fe:	d3f9      	bcc.n	80073f4 <CopyDataInit>
  bx lr
 8007400:	4770      	bx	lr

08007402 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8007402:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8007404:	3004      	adds	r0, #4

08007406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8007406:	4288      	cmp	r0, r1
  bcc FillZerobss
 8007408:	d3fb      	bcc.n	8007402 <FillZerobss>
  bx lr
 800740a:	4770      	bx	lr

0800740c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800740c:	480c      	ldr	r0, [pc, #48]	@ (8007440 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800740e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8007410:	f7ff fdb8 	bl	8006f84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8007414:	480b      	ldr	r0, [pc, #44]	@ (8007444 <LoopForever+0x6>)
 8007416:	490c      	ldr	r1, [pc, #48]	@ (8007448 <LoopForever+0xa>)
 8007418:	4a0c      	ldr	r2, [pc, #48]	@ (800744c <LoopForever+0xe>)
 800741a:	2300      	movs	r3, #0
 800741c:	f7ff ffed 	bl	80073fa <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8007420:	480b      	ldr	r0, [pc, #44]	@ (8007450 <LoopForever+0x12>)
 8007422:	490c      	ldr	r1, [pc, #48]	@ (8007454 <LoopForever+0x16>)
 8007424:	4a0c      	ldr	r2, [pc, #48]	@ (8007458 <LoopForever+0x1a>)
 8007426:	2300      	movs	r3, #0
 8007428:	f7ff ffe7 	bl	80073fa <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800742c:	480b      	ldr	r0, [pc, #44]	@ (800745c <LoopForever+0x1e>)
 800742e:	490c      	ldr	r1, [pc, #48]	@ (8007460 <LoopForever+0x22>)
 8007430:	2300      	movs	r3, #0
 8007432:	f7ff ffe8 	bl	8007406 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8007436:	f012 ffe5 	bl	801a404 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800743a:	f7ff f8e1 	bl	8006600 <main>

0800743e <LoopForever>:

LoopForever:
  b LoopForever
 800743e:	e7fe      	b.n	800743e <LoopForever>
  ldr   r0, =_estack
 8007440:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8007444:	20000008 	.word	0x20000008
 8007448:	2000030c 	.word	0x2000030c
 800744c:	0801dba4 	.word	0x0801dba4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8007450:	200301e4 	.word	0x200301e4
 8007454:	20030a67 	.word	0x20030a67
 8007458:	0801deee 	.word	0x0801deee
  INIT_BSS _sbss, _ebss
 800745c:	20000358 	.word	0x20000358
 8007460:	200027b0 	.word	0x200027b0

08007464 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007464:	e7fe      	b.n	8007464 <ADC1_IRQHandler>
	...

08007468 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800746e:	2300      	movs	r3, #0
 8007470:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007472:	4b0c      	ldr	r3, [pc, #48]	@ (80074a4 <HAL_Init+0x3c>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a0b      	ldr	r2, [pc, #44]	@ (80074a4 <HAL_Init+0x3c>)
 8007478:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800747c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800747e:	2003      	movs	r0, #3
 8007480:	f000 f9b4 	bl	80077ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007484:	200f      	movs	r0, #15
 8007486:	f000 f80f 	bl	80074a8 <HAL_InitTick>
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d002      	beq.n	8007496 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	71fb      	strb	r3, [r7, #7]
 8007494:	e001      	b.n	800749a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007496:	f7ff fc26 	bl	8006ce6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800749a:	79fb      	ldrb	r3, [r7, #7]
}
 800749c:	4618      	mov	r0, r3
 800749e:	3708      	adds	r7, #8
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	58004000 	.word	0x58004000

080074a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80074b0:	2300      	movs	r3, #0
 80074b2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80074b4:	4b17      	ldr	r3, [pc, #92]	@ (8007514 <HAL_InitTick+0x6c>)
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d024      	beq.n	8007506 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80074bc:	f004 fd8a 	bl	800bfd4 <HAL_RCC_GetHCLKFreq>
 80074c0:	4602      	mov	r2, r0
 80074c2:	4b14      	ldr	r3, [pc, #80]	@ (8007514 <HAL_InitTick+0x6c>)
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	4619      	mov	r1, r3
 80074c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80074cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80074d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d4:	4618      	mov	r0, r3
 80074d6:	f000 f9ca 	bl	800786e <HAL_SYSTICK_Config>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10f      	bne.n	8007500 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b0f      	cmp	r3, #15
 80074e4:	d809      	bhi.n	80074fa <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80074e6:	2200      	movs	r2, #0
 80074e8:	6879      	ldr	r1, [r7, #4]
 80074ea:	f04f 30ff 	mov.w	r0, #4294967295
 80074ee:	f000 f988 	bl	8007802 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80074f2:	4a09      	ldr	r2, [pc, #36]	@ (8007518 <HAL_InitTick+0x70>)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6013      	str	r3, [r2, #0]
 80074f8:	e007      	b.n	800750a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	73fb      	strb	r3, [r7, #15]
 80074fe:	e004      	b.n	800750a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	73fb      	strb	r3, [r7, #15]
 8007504:	e001      	b.n	800750a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800750a:	7bfb      	ldrb	r3, [r7, #15]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	2000002c 	.word	0x2000002c
 8007518:	20000028 	.word	0x20000028

0800751c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800751c:	b480      	push	{r7}
 800751e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007520:	4b06      	ldr	r3, [pc, #24]	@ (800753c <HAL_IncTick+0x20>)
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	461a      	mov	r2, r3
 8007526:	4b06      	ldr	r3, [pc, #24]	@ (8007540 <HAL_IncTick+0x24>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4413      	add	r3, r2
 800752c:	4a04      	ldr	r2, [pc, #16]	@ (8007540 <HAL_IncTick+0x24>)
 800752e:	6013      	str	r3, [r2, #0]
}
 8007530:	bf00      	nop
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	2000002c 	.word	0x2000002c
 8007540:	20000ad0 	.word	0x20000ad0

08007544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007544:	b480      	push	{r7}
 8007546:	af00      	add	r7, sp, #0
  return uwTick;
 8007548:	4b03      	ldr	r3, [pc, #12]	@ (8007558 <HAL_GetTick+0x14>)
 800754a:	681b      	ldr	r3, [r3, #0]
}
 800754c:	4618      	mov	r0, r3
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	20000ad0 	.word	0x20000ad0

0800755c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800755c:	b480      	push	{r7}
 800755e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8007560:	4b03      	ldr	r3, [pc, #12]	@ (8007570 <HAL_GetTickPrio+0x14>)
 8007562:	681b      	ldr	r3, [r3, #0]
}
 8007564:	4618      	mov	r0, r3
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop
 8007570:	20000028 	.word	0x20000028

08007574 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8007574:	b480      	push	{r7}
 8007576:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8007578:	4b03      	ldr	r3, [pc, #12]	@ (8007588 <HAL_GetTickFreq+0x14>)
 800757a:	781b      	ldrb	r3, [r3, #0]
}
 800757c:	4618      	mov	r0, r3
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	2000002c 	.word	0x2000002c

0800758c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800758c:	b480      	push	{r7}
 800758e:	b085      	sub	sp, #20
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f003 0307 	and.w	r3, r3, #7
 800759a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800759c:	4b0c      	ldr	r3, [pc, #48]	@ (80075d0 <__NVIC_SetPriorityGrouping+0x44>)
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80075a2:	68ba      	ldr	r2, [r7, #8]
 80075a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80075a8:	4013      	ands	r3, r2
 80075aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80075b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80075b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80075be:	4a04      	ldr	r2, [pc, #16]	@ (80075d0 <__NVIC_SetPriorityGrouping+0x44>)
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	60d3      	str	r3, [r2, #12]
}
 80075c4:	bf00      	nop
 80075c6:	3714      	adds	r7, #20
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr
 80075d0:	e000ed00 	.word	0xe000ed00

080075d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80075d4:	b480      	push	{r7}
 80075d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80075d8:	4b04      	ldr	r3, [pc, #16]	@ (80075ec <__NVIC_GetPriorityGrouping+0x18>)
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	0a1b      	lsrs	r3, r3, #8
 80075de:	f003 0307 	and.w	r3, r3, #7
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr
 80075ec:	e000ed00 	.word	0xe000ed00

080075f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	4603      	mov	r3, r0
 80075f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	db0b      	blt.n	800761a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007602:	79fb      	ldrb	r3, [r7, #7]
 8007604:	f003 021f 	and.w	r2, r3, #31
 8007608:	4907      	ldr	r1, [pc, #28]	@ (8007628 <__NVIC_EnableIRQ+0x38>)
 800760a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800760e:	095b      	lsrs	r3, r3, #5
 8007610:	2001      	movs	r0, #1
 8007612:	fa00 f202 	lsl.w	r2, r0, r2
 8007616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800761a:	bf00      	nop
 800761c:	370c      	adds	r7, #12
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	e000e100 	.word	0xe000e100

0800762c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	4603      	mov	r3, r0
 8007634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800763a:	2b00      	cmp	r3, #0
 800763c:	db12      	blt.n	8007664 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800763e:	79fb      	ldrb	r3, [r7, #7]
 8007640:	f003 021f 	and.w	r2, r3, #31
 8007644:	490a      	ldr	r1, [pc, #40]	@ (8007670 <__NVIC_DisableIRQ+0x44>)
 8007646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800764a:	095b      	lsrs	r3, r3, #5
 800764c:	2001      	movs	r0, #1
 800764e:	fa00 f202 	lsl.w	r2, r0, r2
 8007652:	3320      	adds	r3, #32
 8007654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007658:	f3bf 8f4f 	dsb	sy
}
 800765c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800765e:	f3bf 8f6f 	isb	sy
}
 8007662:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr
 8007670:	e000e100 	.word	0xe000e100

08007674 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	4603      	mov	r3, r0
 800767c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800767e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007682:	2b00      	cmp	r3, #0
 8007684:	db0c      	blt.n	80076a0 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007686:	79fb      	ldrb	r3, [r7, #7]
 8007688:	f003 021f 	and.w	r2, r3, #31
 800768c:	4907      	ldr	r1, [pc, #28]	@ (80076ac <__NVIC_SetPendingIRQ+0x38>)
 800768e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007692:	095b      	lsrs	r3, r3, #5
 8007694:	2001      	movs	r0, #1
 8007696:	fa00 f202 	lsl.w	r2, r0, r2
 800769a:	3340      	adds	r3, #64	@ 0x40
 800769c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	e000e100 	.word	0xe000e100

080076b0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	4603      	mov	r3, r0
 80076b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80076ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	db0c      	blt.n	80076dc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80076c2:	79fb      	ldrb	r3, [r7, #7]
 80076c4:	f003 021f 	and.w	r2, r3, #31
 80076c8:	4907      	ldr	r1, [pc, #28]	@ (80076e8 <__NVIC_ClearPendingIRQ+0x38>)
 80076ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076ce:	095b      	lsrs	r3, r3, #5
 80076d0:	2001      	movs	r0, #1
 80076d2:	fa00 f202 	lsl.w	r2, r0, r2
 80076d6:	3360      	adds	r3, #96	@ 0x60
 80076d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr
 80076e8:	e000e100 	.word	0xe000e100

080076ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	4603      	mov	r3, r0
 80076f4:	6039      	str	r1, [r7, #0]
 80076f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80076f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	db0a      	blt.n	8007716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	b2da      	uxtb	r2, r3
 8007704:	490c      	ldr	r1, [pc, #48]	@ (8007738 <__NVIC_SetPriority+0x4c>)
 8007706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800770a:	0112      	lsls	r2, r2, #4
 800770c:	b2d2      	uxtb	r2, r2
 800770e:	440b      	add	r3, r1
 8007710:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007714:	e00a      	b.n	800772c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	b2da      	uxtb	r2, r3
 800771a:	4908      	ldr	r1, [pc, #32]	@ (800773c <__NVIC_SetPriority+0x50>)
 800771c:	79fb      	ldrb	r3, [r7, #7]
 800771e:	f003 030f 	and.w	r3, r3, #15
 8007722:	3b04      	subs	r3, #4
 8007724:	0112      	lsls	r2, r2, #4
 8007726:	b2d2      	uxtb	r2, r2
 8007728:	440b      	add	r3, r1
 800772a:	761a      	strb	r2, [r3, #24]
}
 800772c:	bf00      	nop
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr
 8007738:	e000e100 	.word	0xe000e100
 800773c:	e000ed00 	.word	0xe000ed00

08007740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007740:	b480      	push	{r7}
 8007742:	b089      	sub	sp, #36	@ 0x24
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f003 0307 	and.w	r3, r3, #7
 8007752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	f1c3 0307 	rsb	r3, r3, #7
 800775a:	2b04      	cmp	r3, #4
 800775c:	bf28      	it	cs
 800775e:	2304      	movcs	r3, #4
 8007760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	3304      	adds	r3, #4
 8007766:	2b06      	cmp	r3, #6
 8007768:	d902      	bls.n	8007770 <NVIC_EncodePriority+0x30>
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	3b03      	subs	r3, #3
 800776e:	e000      	b.n	8007772 <NVIC_EncodePriority+0x32>
 8007770:	2300      	movs	r3, #0
 8007772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007774:	f04f 32ff 	mov.w	r2, #4294967295
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	fa02 f303 	lsl.w	r3, r2, r3
 800777e:	43da      	mvns	r2, r3
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	401a      	ands	r2, r3
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007788:	f04f 31ff 	mov.w	r1, #4294967295
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	fa01 f303 	lsl.w	r3, r1, r3
 8007792:	43d9      	mvns	r1, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007798:	4313      	orrs	r3, r2
         );
}
 800779a:	4618      	mov	r0, r3
 800779c:	3724      	adds	r7, #36	@ 0x24
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr
	...

080077a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	3b01      	subs	r3, #1
 80077b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077b8:	d301      	bcc.n	80077be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80077ba:	2301      	movs	r3, #1
 80077bc:	e00f      	b.n	80077de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80077be:	4a0a      	ldr	r2, [pc, #40]	@ (80077e8 <SysTick_Config+0x40>)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	3b01      	subs	r3, #1
 80077c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80077c6:	210f      	movs	r1, #15
 80077c8:	f04f 30ff 	mov.w	r0, #4294967295
 80077cc:	f7ff ff8e 	bl	80076ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80077d0:	4b05      	ldr	r3, [pc, #20]	@ (80077e8 <SysTick_Config+0x40>)
 80077d2:	2200      	movs	r2, #0
 80077d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80077d6:	4b04      	ldr	r3, [pc, #16]	@ (80077e8 <SysTick_Config+0x40>)
 80077d8:	2207      	movs	r2, #7
 80077da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3708      	adds	r7, #8
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	e000e010 	.word	0xe000e010

080077ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f7ff fec9 	bl	800758c <__NVIC_SetPriorityGrouping>
}
 80077fa:	bf00      	nop
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b086      	sub	sp, #24
 8007806:	af00      	add	r7, sp, #0
 8007808:	4603      	mov	r3, r0
 800780a:	60b9      	str	r1, [r7, #8]
 800780c:	607a      	str	r2, [r7, #4]
 800780e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007810:	f7ff fee0 	bl	80075d4 <__NVIC_GetPriorityGrouping>
 8007814:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	68b9      	ldr	r1, [r7, #8]
 800781a:	6978      	ldr	r0, [r7, #20]
 800781c:	f7ff ff90 	bl	8007740 <NVIC_EncodePriority>
 8007820:	4602      	mov	r2, r0
 8007822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007826:	4611      	mov	r1, r2
 8007828:	4618      	mov	r0, r3
 800782a:	f7ff ff5f 	bl	80076ec <__NVIC_SetPriority>
}
 800782e:	bf00      	nop
 8007830:	3718      	adds	r7, #24
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b082      	sub	sp, #8
 800783a:	af00      	add	r7, sp, #0
 800783c:	4603      	mov	r3, r0
 800783e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007844:	4618      	mov	r0, r3
 8007846:	f7ff fed3 	bl	80075f0 <__NVIC_EnableIRQ>
}
 800784a:	bf00      	nop
 800784c:	3708      	adds	r7, #8
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b082      	sub	sp, #8
 8007856:	af00      	add	r7, sp, #0
 8007858:	4603      	mov	r3, r0
 800785a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800785c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007860:	4618      	mov	r0, r3
 8007862:	f7ff fee3 	bl	800762c <__NVIC_DisableIRQ>
}
 8007866:	bf00      	nop
 8007868:	3708      	adds	r7, #8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b082      	sub	sp, #8
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f7ff ff96 	bl	80077a8 <SysTick_Config>
 800787c:	4603      	mov	r3, r0
}
 800787e:	4618      	mov	r0, r3
 8007880:	3708      	adds	r7, #8
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b082      	sub	sp, #8
 800788a:	af00      	add	r7, sp, #0
 800788c:	4603      	mov	r3, r0
 800788e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8007890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007894:	4618      	mov	r0, r3
 8007896:	f7ff feed 	bl	8007674 <__NVIC_SetPendingIRQ>
}
 800789a:	bf00      	nop
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b082      	sub	sp, #8
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	4603      	mov	r3, r0
 80078aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80078ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7ff fefd 	bl	80076b0 <__NVIC_ClearPendingIRQ>
}
 80078b6:	bf00      	nop
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
	...

080078c0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d101      	bne.n	80078d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	e08e      	b.n	80079f0 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	461a      	mov	r2, r3
 80078d8:	4b47      	ldr	r3, [pc, #284]	@ (80079f8 <HAL_DMA_Init+0x138>)
 80078da:	429a      	cmp	r2, r3
 80078dc:	d80f      	bhi.n	80078fe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	461a      	mov	r2, r3
 80078e4:	4b45      	ldr	r3, [pc, #276]	@ (80079fc <HAL_DMA_Init+0x13c>)
 80078e6:	4413      	add	r3, r2
 80078e8:	4a45      	ldr	r2, [pc, #276]	@ (8007a00 <HAL_DMA_Init+0x140>)
 80078ea:	fba2 2303 	umull	r2, r3, r2, r3
 80078ee:	091b      	lsrs	r3, r3, #4
 80078f0:	009a      	lsls	r2, r3, #2
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a42      	ldr	r2, [pc, #264]	@ (8007a04 <HAL_DMA_Init+0x144>)
 80078fa:	641a      	str	r2, [r3, #64]	@ 0x40
 80078fc:	e00e      	b.n	800791c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	461a      	mov	r2, r3
 8007904:	4b40      	ldr	r3, [pc, #256]	@ (8007a08 <HAL_DMA_Init+0x148>)
 8007906:	4413      	add	r3, r2
 8007908:	4a3d      	ldr	r2, [pc, #244]	@ (8007a00 <HAL_DMA_Init+0x140>)
 800790a:	fba2 2303 	umull	r2, r3, r2, r3
 800790e:	091b      	lsrs	r3, r3, #4
 8007910:	009a      	lsls	r2, r3, #2
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4a3c      	ldr	r2, [pc, #240]	@ (8007a0c <HAL_DMA_Init+0x14c>)
 800791a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2202      	movs	r2, #2
 8007920:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007936:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007940:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800794c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	699b      	ldr	r3, [r3, #24]
 8007952:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007958:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a1b      	ldr	r3, [r3, #32]
 800795e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	4313      	orrs	r3, r2
 8007964:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 fa16 	bl	8007da0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800797c:	d102      	bne.n	8007984 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	685a      	ldr	r2, [r3, #4]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800798c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007990:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800799a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d010      	beq.n	80079c6 <HAL_DMA_Init+0x106>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	2b04      	cmp	r3, #4
 80079aa:	d80c      	bhi.n	80079c6 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 fa35 	bl	8007e1c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079b6:	2200      	movs	r2, #0
 80079b8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80079c2:	605a      	str	r2, [r3, #4]
 80079c4:	e008      	b.n	80079d8 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2201      	movs	r2, #1
 80079e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3710      	adds	r7, #16
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	40020407 	.word	0x40020407
 80079fc:	bffdfff8 	.word	0xbffdfff8
 8007a00:	cccccccd 	.word	0xcccccccd
 8007a04:	40020000 	.word	0x40020000
 8007a08:	bffdfbf8 	.word	0xbffdfbf8
 8007a0c:	40020400 	.word	0x40020400

08007a10 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
 8007a1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d101      	bne.n	8007a30 <HAL_DMA_Start_IT+0x20>
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	e066      	b.n	8007afe <HAL_DMA_Start_IT+0xee>
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d155      	bne.n	8007af0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2202      	movs	r2, #2
 8007a48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f022 0201 	bic.w	r2, r2, #1
 8007a60:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	68b9      	ldr	r1, [r7, #8]
 8007a68:	68f8      	ldr	r0, [r7, #12]
 8007a6a:	f000 f95a 	bl	8007d22 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d008      	beq.n	8007a88 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f042 020e 	orr.w	r2, r2, #14
 8007a84:	601a      	str	r2, [r3, #0]
 8007a86:	e00f      	b.n	8007aa8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f022 0204 	bic.w	r2, r2, #4
 8007a96:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f042 020a 	orr.w	r2, r2, #10
 8007aa6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d007      	beq.n	8007ac6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ac0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007ac4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d007      	beq.n	8007ade <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ad8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007adc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f042 0201 	orr.w	r2, r2, #1
 8007aec:	601a      	str	r2, [r3, #0]
 8007aee:	e005      	b.n	8007afc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007af8:	2302      	movs	r3, #2
 8007afa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3718      	adds	r7, #24
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b084      	sub	sp, #16
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	d005      	beq.n	8007b2a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2204      	movs	r2, #4
 8007b22:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	73fb      	strb	r3, [r7, #15]
 8007b28:	e047      	b.n	8007bba <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f022 020e 	bic.w	r2, r2, #14
 8007b38:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f022 0201 	bic.w	r2, r2, #1
 8007b48:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007b58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b5e:	f003 021c 	and.w	r2, r3, #28
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b66:	2101      	movs	r1, #1
 8007b68:	fa01 f202 	lsl.w	r2, r1, r2
 8007b6c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007b76:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00c      	beq.n	8007b9a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b8a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007b8e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007b98:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d003      	beq.n	8007bba <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	4798      	blx	r3
    }
  }
  return status;
 8007bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007be0:	f003 031c 	and.w	r3, r3, #28
 8007be4:	2204      	movs	r2, #4
 8007be6:	409a      	lsls	r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	4013      	ands	r3, r2
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d026      	beq.n	8007c3e <HAL_DMA_IRQHandler+0x7a>
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	f003 0304 	and.w	r3, r3, #4
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d021      	beq.n	8007c3e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 0320 	and.w	r3, r3, #32
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d107      	bne.n	8007c18 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f022 0204 	bic.w	r2, r2, #4
 8007c16:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c1c:	f003 021c 	and.w	r2, r3, #28
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c24:	2104      	movs	r1, #4
 8007c26:	fa01 f202 	lsl.w	r2, r1, r2
 8007c2a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d071      	beq.n	8007d18 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007c3c:	e06c      	b.n	8007d18 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c42:	f003 031c 	and.w	r3, r3, #28
 8007c46:	2202      	movs	r2, #2
 8007c48:	409a      	lsls	r2, r3
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	4013      	ands	r3, r2
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d02e      	beq.n	8007cb0 <HAL_DMA_IRQHandler+0xec>
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	f003 0302 	and.w	r3, r3, #2
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d029      	beq.n	8007cb0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 0320 	and.w	r3, r3, #32
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d10b      	bne.n	8007c82 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f022 020a 	bic.w	r2, r2, #10
 8007c78:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c86:	f003 021c 	and.w	r2, r3, #28
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c8e:	2102      	movs	r1, #2
 8007c90:	fa01 f202 	lsl.w	r2, r1, r2
 8007c94:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d038      	beq.n	8007d18 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007cae:	e033      	b.n	8007d18 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cb4:	f003 031c 	and.w	r3, r3, #28
 8007cb8:	2208      	movs	r2, #8
 8007cba:	409a      	lsls	r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d02a      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x156>
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	f003 0308 	and.w	r3, r3, #8
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d025      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f022 020e 	bic.w	r2, r2, #14
 8007cdc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ce2:	f003 021c 	and.w	r2, r3, #28
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cea:	2101      	movs	r1, #1
 8007cec:	fa01 f202 	lsl.w	r2, r1, r2
 8007cf0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d004      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007d18:	bf00      	nop
 8007d1a:	bf00      	nop
}
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b085      	sub	sp, #20
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	60f8      	str	r0, [r7, #12]
 8007d2a:	60b9      	str	r1, [r7, #8]
 8007d2c:	607a      	str	r2, [r7, #4]
 8007d2e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007d38:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d004      	beq.n	8007d4c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007d4a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d50:	f003 021c 	and.w	r2, r3, #28
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d58:	2101      	movs	r1, #1
 8007d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8007d5e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	683a      	ldr	r2, [r7, #0]
 8007d66:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	2b10      	cmp	r3, #16
 8007d6e:	d108      	bne.n	8007d82 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007d80:	e007      	b.n	8007d92 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	68ba      	ldr	r2, [r7, #8]
 8007d88:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	60da      	str	r2, [r3, #12]
}
 8007d92:	bf00      	nop
 8007d94:	3714      	adds	r7, #20
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
	...

08007da0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	461a      	mov	r2, r3
 8007dae:	4b17      	ldr	r3, [pc, #92]	@ (8007e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d80a      	bhi.n	8007dca <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007db8:	089b      	lsrs	r3, r3, #2
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007dc0:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	6493      	str	r3, [r2, #72]	@ 0x48
 8007dc8:	e007      	b.n	8007dda <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dce:	089b      	lsrs	r3, r3, #2
 8007dd0:	009a      	lsls	r2, r3, #2
 8007dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8007e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007dd4:	4413      	add	r3, r2
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	3b08      	subs	r3, #8
 8007de2:	4a0c      	ldr	r2, [pc, #48]	@ (8007e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007de4:	fba2 2303 	umull	r2, r3, r2, r3
 8007de8:	091b      	lsrs	r3, r3, #4
 8007dea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4a0a      	ldr	r2, [pc, #40]	@ (8007e18 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007df0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f003 031f 	and.w	r3, r3, #31
 8007df8:	2201      	movs	r2, #1
 8007dfa:	409a      	lsls	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007e00:	bf00      	nop
 8007e02:	3714      	adds	r7, #20
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr
 8007e0c:	40020407 	.word	0x40020407
 8007e10:	4002081c 	.word	0x4002081c
 8007e14:	cccccccd 	.word	0xcccccccd
 8007e18:	40020880 	.word	0x40020880

08007e1c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e2c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	4b0b      	ldr	r3, [pc, #44]	@ (8007e60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007e32:	4413      	add	r3, r2
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	461a      	mov	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a09      	ldr	r2, [pc, #36]	@ (8007e64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8007e40:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	3b01      	subs	r3, #1
 8007e46:	f003 0303 	and.w	r3, r3, #3
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	409a      	lsls	r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007e52:	bf00      	nop
 8007e54:	3714      	adds	r7, #20
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr
 8007e5e:	bf00      	nop
 8007e60:	1000823f 	.word	0x1000823f
 8007e64:	40020940 	.word	0x40020940

08007e68 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b087      	sub	sp, #28
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007e72:	2300      	movs	r3, #0
 8007e74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007e76:	e14c      	b.n	8008112 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	2101      	movs	r1, #1
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	fa01 f303 	lsl.w	r3, r1, r3
 8007e84:	4013      	ands	r3, r2
 8007e86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f000 813e 	beq.w	800810c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	f003 0303 	and.w	r3, r3, #3
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d005      	beq.n	8007ea8 <HAL_GPIO_Init+0x40>
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	f003 0303 	and.w	r3, r3, #3
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d130      	bne.n	8007f0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	005b      	lsls	r3, r3, #1
 8007eb2:	2203      	movs	r2, #3
 8007eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb8:	43db      	mvns	r3, r3
 8007eba:	693a      	ldr	r2, [r7, #16]
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	68da      	ldr	r2, [r3, #12]
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	005b      	lsls	r3, r3, #1
 8007ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ecc:	693a      	ldr	r2, [r7, #16]
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	693a      	ldr	r2, [r7, #16]
 8007ed6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007ede:	2201      	movs	r2, #1
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee6:	43db      	mvns	r3, r3
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	4013      	ands	r3, r2
 8007eec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	091b      	lsrs	r3, r3, #4
 8007ef4:	f003 0201 	and.w	r2, r3, #1
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	fa02 f303 	lsl.w	r3, r2, r3
 8007efe:	693a      	ldr	r2, [r7, #16]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	f003 0303 	and.w	r3, r3, #3
 8007f12:	2b03      	cmp	r3, #3
 8007f14:	d017      	beq.n	8007f46 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	005b      	lsls	r3, r3, #1
 8007f20:	2203      	movs	r2, #3
 8007f22:	fa02 f303 	lsl.w	r3, r2, r3
 8007f26:	43db      	mvns	r3, r3
 8007f28:	693a      	ldr	r2, [r7, #16]
 8007f2a:	4013      	ands	r3, r2
 8007f2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	689a      	ldr	r2, [r3, #8]
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	005b      	lsls	r3, r3, #1
 8007f36:	fa02 f303 	lsl.w	r3, r2, r3
 8007f3a:	693a      	ldr	r2, [r7, #16]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	693a      	ldr	r2, [r7, #16]
 8007f44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	f003 0303 	and.w	r3, r3, #3
 8007f4e:	2b02      	cmp	r3, #2
 8007f50:	d123      	bne.n	8007f9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	08da      	lsrs	r2, r3, #3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	3208      	adds	r2, #8
 8007f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	f003 0307 	and.w	r3, r3, #7
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	220f      	movs	r2, #15
 8007f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f6e:	43db      	mvns	r3, r3
 8007f70:	693a      	ldr	r2, [r7, #16]
 8007f72:	4013      	ands	r3, r2
 8007f74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	691a      	ldr	r2, [r3, #16]
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	f003 0307 	and.w	r3, r3, #7
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	fa02 f303 	lsl.w	r3, r2, r3
 8007f86:	693a      	ldr	r2, [r7, #16]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	08da      	lsrs	r2, r3, #3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	3208      	adds	r2, #8
 8007f94:	6939      	ldr	r1, [r7, #16]
 8007f96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	005b      	lsls	r3, r3, #1
 8007fa4:	2203      	movs	r2, #3
 8007fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8007faa:	43db      	mvns	r3, r3
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	4013      	ands	r3, r2
 8007fb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	f003 0203 	and.w	r2, r3, #3
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	005b      	lsls	r3, r3, #1
 8007fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc2:	693a      	ldr	r2, [r7, #16]
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	693a      	ldr	r2, [r7, #16]
 8007fcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	f000 8098 	beq.w	800810c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8007fdc:	4a54      	ldr	r2, [pc, #336]	@ (8008130 <HAL_GPIO_Init+0x2c8>)
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	089b      	lsrs	r3, r3, #2
 8007fe2:	3302      	adds	r3, #2
 8007fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f003 0303 	and.w	r3, r3, #3
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	220f      	movs	r2, #15
 8007ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff8:	43db      	mvns	r3, r3
 8007ffa:	693a      	ldr	r2, [r7, #16]
 8007ffc:	4013      	ands	r3, r2
 8007ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008006:	d019      	beq.n	800803c <HAL_GPIO_Init+0x1d4>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a4a      	ldr	r2, [pc, #296]	@ (8008134 <HAL_GPIO_Init+0x2cc>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d013      	beq.n	8008038 <HAL_GPIO_Init+0x1d0>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4a49      	ldr	r2, [pc, #292]	@ (8008138 <HAL_GPIO_Init+0x2d0>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d00d      	beq.n	8008034 <HAL_GPIO_Init+0x1cc>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4a48      	ldr	r2, [pc, #288]	@ (800813c <HAL_GPIO_Init+0x2d4>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d007      	beq.n	8008030 <HAL_GPIO_Init+0x1c8>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	4a47      	ldr	r2, [pc, #284]	@ (8008140 <HAL_GPIO_Init+0x2d8>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d101      	bne.n	800802c <HAL_GPIO_Init+0x1c4>
 8008028:	2304      	movs	r3, #4
 800802a:	e008      	b.n	800803e <HAL_GPIO_Init+0x1d6>
 800802c:	2307      	movs	r3, #7
 800802e:	e006      	b.n	800803e <HAL_GPIO_Init+0x1d6>
 8008030:	2303      	movs	r3, #3
 8008032:	e004      	b.n	800803e <HAL_GPIO_Init+0x1d6>
 8008034:	2302      	movs	r3, #2
 8008036:	e002      	b.n	800803e <HAL_GPIO_Init+0x1d6>
 8008038:	2301      	movs	r3, #1
 800803a:	e000      	b.n	800803e <HAL_GPIO_Init+0x1d6>
 800803c:	2300      	movs	r3, #0
 800803e:	697a      	ldr	r2, [r7, #20]
 8008040:	f002 0203 	and.w	r2, r2, #3
 8008044:	0092      	lsls	r2, r2, #2
 8008046:	4093      	lsls	r3, r2
 8008048:	693a      	ldr	r2, [r7, #16]
 800804a:	4313      	orrs	r3, r2
 800804c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800804e:	4938      	ldr	r1, [pc, #224]	@ (8008130 <HAL_GPIO_Init+0x2c8>)
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	089b      	lsrs	r3, r3, #2
 8008054:	3302      	adds	r3, #2
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800805c:	4b39      	ldr	r3, [pc, #228]	@ (8008144 <HAL_GPIO_Init+0x2dc>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	43db      	mvns	r3, r3
 8008066:	693a      	ldr	r2, [r7, #16]
 8008068:	4013      	ands	r3, r2
 800806a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008074:	2b00      	cmp	r3, #0
 8008076:	d003      	beq.n	8008080 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8008078:	693a      	ldr	r2, [r7, #16]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	4313      	orrs	r3, r2
 800807e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008080:	4a30      	ldr	r2, [pc, #192]	@ (8008144 <HAL_GPIO_Init+0x2dc>)
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008086:	4b2f      	ldr	r3, [pc, #188]	@ (8008144 <HAL_GPIO_Init+0x2dc>)
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	43db      	mvns	r3, r3
 8008090:	693a      	ldr	r2, [r7, #16]
 8008092:	4013      	ands	r3, r2
 8008094:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d003      	beq.n	80080aa <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80080a2:	693a      	ldr	r2, [r7, #16]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80080aa:	4a26      	ldr	r2, [pc, #152]	@ (8008144 <HAL_GPIO_Init+0x2dc>)
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80080b0:	4b24      	ldr	r3, [pc, #144]	@ (8008144 <HAL_GPIO_Init+0x2dc>)
 80080b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	43db      	mvns	r3, r3
 80080bc:	693a      	ldr	r2, [r7, #16]
 80080be:	4013      	ands	r3, r2
 80080c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d003      	beq.n	80080d6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80080ce:	693a      	ldr	r2, [r7, #16]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80080d6:	4a1b      	ldr	r2, [pc, #108]	@ (8008144 <HAL_GPIO_Init+0x2dc>)
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80080de:	4b19      	ldr	r3, [pc, #100]	@ (8008144 <HAL_GPIO_Init+0x2dc>)
 80080e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	43db      	mvns	r3, r3
 80080ea:	693a      	ldr	r2, [r7, #16]
 80080ec:	4013      	ands	r3, r2
 80080ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d003      	beq.n	8008104 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80080fc:	693a      	ldr	r2, [r7, #16]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	4313      	orrs	r3, r2
 8008102:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008104:	4a0f      	ldr	r2, [pc, #60]	@ (8008144 <HAL_GPIO_Init+0x2dc>)
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	3301      	adds	r3, #1
 8008110:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	fa22 f303 	lsr.w	r3, r2, r3
 800811c:	2b00      	cmp	r3, #0
 800811e:	f47f aeab 	bne.w	8007e78 <HAL_GPIO_Init+0x10>
  }
}
 8008122:	bf00      	nop
 8008124:	bf00      	nop
 8008126:	371c      	adds	r7, #28
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr
 8008130:	40010000 	.word	0x40010000
 8008134:	48000400 	.word	0x48000400
 8008138:	48000800 	.word	0x48000800
 800813c:	48000c00 	.word	0x48000c00
 8008140:	48001000 	.word	0x48001000
 8008144:	58000800 	.word	0x58000800

08008148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	460b      	mov	r3, r1
 8008152:	807b      	strh	r3, [r7, #2]
 8008154:	4613      	mov	r3, r2
 8008156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008158:	787b      	ldrb	r3, [r7, #1]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d003      	beq.n	8008166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800815e:	887a      	ldrh	r2, [r7, #2]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008164:	e002      	b.n	800816c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008166:	887a      	ldrh	r2, [r7, #2]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800816c:	bf00      	nop
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800817e:	4b0a      	ldr	r3, [pc, #40]	@ (80081a8 <HAL_HSEM_IRQHandler+0x30>)
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8008184:	4b08      	ldr	r3, [pc, #32]	@ (80081a8 <HAL_HSEM_IRQHandler+0x30>)
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	43db      	mvns	r3, r3
 800818c:	4906      	ldr	r1, [pc, #24]	@ (80081a8 <HAL_HSEM_IRQHandler+0x30>)
 800818e:	4013      	ands	r3, r2
 8008190:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8008192:	4a05      	ldr	r2, [pc, #20]	@ (80081a8 <HAL_HSEM_IRQHandler+0x30>)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 f807 	bl	80081ac <HAL_HSEM_FreeCallback>
}
 800819e:	bf00      	nop
 80081a0:	3708      	adds	r7, #8
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	58001500 	.word	0x58001500

080081ac <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80081b4:	bf00      	nop
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d101      	bne.n	80081d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	e08d      	b.n	80082ee <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d106      	bne.n	80081ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f7fd fe6a 	bl	8005ec0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2224      	movs	r2, #36	@ 0x24
 80081f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f022 0201 	bic.w	r2, r2, #1
 8008202:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	685a      	ldr	r2, [r3, #4]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008210:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	689a      	ldr	r2, [r3, #8]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008220:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	2b01      	cmp	r3, #1
 8008228:	d107      	bne.n	800823a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	689a      	ldr	r2, [r3, #8]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008236:	609a      	str	r2, [r3, #8]
 8008238:	e006      	b.n	8008248 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	689a      	ldr	r2, [r3, #8]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008246:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	2b02      	cmp	r3, #2
 800824e:	d108      	bne.n	8008262 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	685a      	ldr	r2, [r3, #4]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800825e:	605a      	str	r2, [r3, #4]
 8008260:	e007      	b.n	8008272 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	685a      	ldr	r2, [r3, #4]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008270:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	6812      	ldr	r2, [r2, #0]
 800827c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008280:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008284:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68da      	ldr	r2, [r3, #12]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008294:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	691a      	ldr	r2, [r3, #16]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	695b      	ldr	r3, [r3, #20]
 800829e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	699b      	ldr	r3, [r3, #24]
 80082a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	430a      	orrs	r2, r1
 80082ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	69d9      	ldr	r1, [r3, #28]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6a1a      	ldr	r2, [r3, #32]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	430a      	orrs	r2, r1
 80082be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f042 0201 	orr.w	r2, r2, #1
 80082ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2220      	movs	r2, #32
 80082da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3708      	adds	r7, #8
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
	...

080082f8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b088      	sub	sp, #32
 80082fc:	af02      	add	r7, sp, #8
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	607a      	str	r2, [r7, #4]
 8008302:	461a      	mov	r2, r3
 8008304:	460b      	mov	r3, r1
 8008306:	817b      	strh	r3, [r7, #10]
 8008308:	4613      	mov	r3, r2
 800830a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008312:	b2db      	uxtb	r3, r3
 8008314:	2b20      	cmp	r3, #32
 8008316:	f040 80fd 	bne.w	8008514 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008320:	2b01      	cmp	r3, #1
 8008322:	d101      	bne.n	8008328 <HAL_I2C_Master_Transmit+0x30>
 8008324:	2302      	movs	r3, #2
 8008326:	e0f6      	b.n	8008516 <HAL_I2C_Master_Transmit+0x21e>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008330:	f7ff f908 	bl	8007544 <HAL_GetTick>
 8008334:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	9300      	str	r3, [sp, #0]
 800833a:	2319      	movs	r3, #25
 800833c:	2201      	movs	r2, #1
 800833e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008342:	68f8      	ldr	r0, [r7, #12]
 8008344:	f000 fce0 	bl	8008d08 <I2C_WaitOnFlagUntilTimeout>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d001      	beq.n	8008352 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	e0e1      	b.n	8008516 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2221      	movs	r2, #33	@ 0x21
 8008356:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2210      	movs	r2, #16
 800835e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2200      	movs	r2, #0
 8008366:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	893a      	ldrh	r2, [r7, #8]
 8008372:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800837e:	b29b      	uxth	r3, r3
 8008380:	2bff      	cmp	r3, #255	@ 0xff
 8008382:	d906      	bls.n	8008392 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	22ff      	movs	r2, #255	@ 0xff
 8008388:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800838a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800838e:	617b      	str	r3, [r7, #20]
 8008390:	e007      	b.n	80083a2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008396:	b29a      	uxth	r2, r3
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800839c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80083a0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d024      	beq.n	80083f4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ae:	781a      	ldrb	r2, [r3, #0]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ba:	1c5a      	adds	r2, r3, #1
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	3b01      	subs	r3, #1
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083d2:	3b01      	subs	r3, #1
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	3301      	adds	r3, #1
 80083e2:	b2da      	uxtb	r2, r3
 80083e4:	8979      	ldrh	r1, [r7, #10]
 80083e6:	4b4e      	ldr	r3, [pc, #312]	@ (8008520 <HAL_I2C_Master_Transmit+0x228>)
 80083e8:	9300      	str	r3, [sp, #0]
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f000 fedb 	bl	80091a8 <I2C_TransferConfig>
 80083f2:	e066      	b.n	80084c2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083f8:	b2da      	uxtb	r2, r3
 80083fa:	8979      	ldrh	r1, [r7, #10]
 80083fc:	4b48      	ldr	r3, [pc, #288]	@ (8008520 <HAL_I2C_Master_Transmit+0x228>)
 80083fe:	9300      	str	r3, [sp, #0]
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	f000 fed0 	bl	80091a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008408:	e05b      	b.n	80084c2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800840a:	693a      	ldr	r2, [r7, #16]
 800840c:	6a39      	ldr	r1, [r7, #32]
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	f000 fcd3 	bl	8008dba <I2C_WaitOnTXISFlagUntilTimeout>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d001      	beq.n	800841e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e07b      	b.n	8008516 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008422:	781a      	ldrb	r2, [r3, #0]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800842e:	1c5a      	adds	r2, r3, #1
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008438:	b29b      	uxth	r3, r3
 800843a:	3b01      	subs	r3, #1
 800843c:	b29a      	uxth	r2, r3
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008446:	3b01      	subs	r3, #1
 8008448:	b29a      	uxth	r2, r3
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008452:	b29b      	uxth	r3, r3
 8008454:	2b00      	cmp	r3, #0
 8008456:	d034      	beq.n	80084c2 <HAL_I2C_Master_Transmit+0x1ca>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800845c:	2b00      	cmp	r3, #0
 800845e:	d130      	bne.n	80084c2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	9300      	str	r3, [sp, #0]
 8008464:	6a3b      	ldr	r3, [r7, #32]
 8008466:	2200      	movs	r2, #0
 8008468:	2180      	movs	r1, #128	@ 0x80
 800846a:	68f8      	ldr	r0, [r7, #12]
 800846c:	f000 fc4c 	bl	8008d08 <I2C_WaitOnFlagUntilTimeout>
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d001      	beq.n	800847a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	e04d      	b.n	8008516 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800847e:	b29b      	uxth	r3, r3
 8008480:	2bff      	cmp	r3, #255	@ 0xff
 8008482:	d90e      	bls.n	80084a2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	22ff      	movs	r2, #255	@ 0xff
 8008488:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800848e:	b2da      	uxtb	r2, r3
 8008490:	8979      	ldrh	r1, [r7, #10]
 8008492:	2300      	movs	r3, #0
 8008494:	9300      	str	r3, [sp, #0]
 8008496:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f000 fe84 	bl	80091a8 <I2C_TransferConfig>
 80084a0:	e00f      	b.n	80084c2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084a6:	b29a      	uxth	r2, r3
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084b0:	b2da      	uxtb	r2, r3
 80084b2:	8979      	ldrh	r1, [r7, #10]
 80084b4:	2300      	movs	r3, #0
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f000 fe73 	bl	80091a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d19e      	bne.n	800840a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084cc:	693a      	ldr	r2, [r7, #16]
 80084ce:	6a39      	ldr	r1, [r7, #32]
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f000 fcb9 	bl	8008e48 <I2C_WaitOnSTOPFlagUntilTimeout>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d001      	beq.n	80084e0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	e01a      	b.n	8008516 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2220      	movs	r2, #32
 80084e6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	6859      	ldr	r1, [r3, #4]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	4b0c      	ldr	r3, [pc, #48]	@ (8008524 <HAL_I2C_Master_Transmit+0x22c>)
 80084f4:	400b      	ands	r3, r1
 80084f6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2220      	movs	r2, #32
 80084fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2200      	movs	r2, #0
 8008504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2200      	movs	r2, #0
 800850c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008510:	2300      	movs	r3, #0
 8008512:	e000      	b.n	8008516 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8008514:	2302      	movs	r3, #2
  }
}
 8008516:	4618      	mov	r0, r3
 8008518:	3718      	adds	r7, #24
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	80002000 	.word	0x80002000
 8008524:	fe00e800 	.word	0xfe00e800

08008528 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b088      	sub	sp, #32
 800852c:	af02      	add	r7, sp, #8
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	607a      	str	r2, [r7, #4]
 8008532:	461a      	mov	r2, r3
 8008534:	460b      	mov	r3, r1
 8008536:	817b      	strh	r3, [r7, #10]
 8008538:	4613      	mov	r3, r2
 800853a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008542:	b2db      	uxtb	r3, r3
 8008544:	2b20      	cmp	r3, #32
 8008546:	f040 80db 	bne.w	8008700 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008550:	2b01      	cmp	r3, #1
 8008552:	d101      	bne.n	8008558 <HAL_I2C_Master_Receive+0x30>
 8008554:	2302      	movs	r3, #2
 8008556:	e0d4      	b.n	8008702 <HAL_I2C_Master_Receive+0x1da>
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008560:	f7fe fff0 	bl	8007544 <HAL_GetTick>
 8008564:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	9300      	str	r3, [sp, #0]
 800856a:	2319      	movs	r3, #25
 800856c:	2201      	movs	r2, #1
 800856e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f000 fbc8 	bl	8008d08 <I2C_WaitOnFlagUntilTimeout>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d001      	beq.n	8008582 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e0bf      	b.n	8008702 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2222      	movs	r2, #34	@ 0x22
 8008586:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2210      	movs	r2, #16
 800858e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	893a      	ldrh	r2, [r7, #8]
 80085a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2200      	movs	r2, #0
 80085a8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	2bff      	cmp	r3, #255	@ 0xff
 80085b2:	d90e      	bls.n	80085d2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	22ff      	movs	r2, #255	@ 0xff
 80085b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085be:	b2da      	uxtb	r2, r3
 80085c0:	8979      	ldrh	r1, [r7, #10]
 80085c2:	4b52      	ldr	r3, [pc, #328]	@ (800870c <HAL_I2C_Master_Receive+0x1e4>)
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f000 fdec 	bl	80091a8 <I2C_TransferConfig>
 80085d0:	e06d      	b.n	80086ae <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085d6:	b29a      	uxth	r2, r3
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085e0:	b2da      	uxtb	r2, r3
 80085e2:	8979      	ldrh	r1, [r7, #10]
 80085e4:	4b49      	ldr	r3, [pc, #292]	@ (800870c <HAL_I2C_Master_Receive+0x1e4>)
 80085e6:	9300      	str	r3, [sp, #0]
 80085e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	f000 fddb 	bl	80091a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80085f2:	e05c      	b.n	80086ae <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80085f4:	697a      	ldr	r2, [r7, #20]
 80085f6:	6a39      	ldr	r1, [r7, #32]
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f000 fc69 	bl	8008ed0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d001      	beq.n	8008608 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008604:	2301      	movs	r3, #1
 8008606:	e07c      	b.n	8008702 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008612:	b2d2      	uxtb	r2, r2
 8008614:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800861a:	1c5a      	adds	r2, r3, #1
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008624:	3b01      	subs	r3, #1
 8008626:	b29a      	uxth	r2, r3
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008630:	b29b      	uxth	r3, r3
 8008632:	3b01      	subs	r3, #1
 8008634:	b29a      	uxth	r2, r3
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800863e:	b29b      	uxth	r3, r3
 8008640:	2b00      	cmp	r3, #0
 8008642:	d034      	beq.n	80086ae <HAL_I2C_Master_Receive+0x186>
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008648:	2b00      	cmp	r3, #0
 800864a:	d130      	bne.n	80086ae <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	6a3b      	ldr	r3, [r7, #32]
 8008652:	2200      	movs	r2, #0
 8008654:	2180      	movs	r1, #128	@ 0x80
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f000 fb56 	bl	8008d08 <I2C_WaitOnFlagUntilTimeout>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d001      	beq.n	8008666 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	e04d      	b.n	8008702 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800866a:	b29b      	uxth	r3, r3
 800866c:	2bff      	cmp	r3, #255	@ 0xff
 800866e:	d90e      	bls.n	800868e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	22ff      	movs	r2, #255	@ 0xff
 8008674:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800867a:	b2da      	uxtb	r2, r3
 800867c:	8979      	ldrh	r1, [r7, #10]
 800867e:	2300      	movs	r3, #0
 8008680:	9300      	str	r3, [sp, #0]
 8008682:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f000 fd8e 	bl	80091a8 <I2C_TransferConfig>
 800868c:	e00f      	b.n	80086ae <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008692:	b29a      	uxth	r2, r3
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800869c:	b2da      	uxtb	r2, r3
 800869e:	8979      	ldrh	r1, [r7, #10]
 80086a0:	2300      	movs	r3, #0
 80086a2:	9300      	str	r3, [sp, #0]
 80086a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80086a8:	68f8      	ldr	r0, [r7, #12]
 80086aa:	f000 fd7d 	bl	80091a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d19d      	bne.n	80085f4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086b8:	697a      	ldr	r2, [r7, #20]
 80086ba:	6a39      	ldr	r1, [r7, #32]
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f000 fbc3 	bl	8008e48 <I2C_WaitOnSTOPFlagUntilTimeout>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d001      	beq.n	80086cc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	e01a      	b.n	8008702 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2220      	movs	r2, #32
 80086d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	6859      	ldr	r1, [r3, #4]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	4b0c      	ldr	r3, [pc, #48]	@ (8008710 <HAL_I2C_Master_Receive+0x1e8>)
 80086e0:	400b      	ands	r3, r1
 80086e2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2220      	movs	r2, #32
 80086e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80086fc:	2300      	movs	r3, #0
 80086fe:	e000      	b.n	8008702 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008700:	2302      	movs	r3, #2
  }
}
 8008702:	4618      	mov	r0, r3
 8008704:	3718      	adds	r7, #24
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	80002400 	.word	0x80002400
 8008710:	fe00e800 	.word	0xfe00e800

08008714 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b088      	sub	sp, #32
 8008718:	af02      	add	r7, sp, #8
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	4608      	mov	r0, r1
 800871e:	4611      	mov	r1, r2
 8008720:	461a      	mov	r2, r3
 8008722:	4603      	mov	r3, r0
 8008724:	817b      	strh	r3, [r7, #10]
 8008726:	460b      	mov	r3, r1
 8008728:	813b      	strh	r3, [r7, #8]
 800872a:	4613      	mov	r3, r2
 800872c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008734:	b2db      	uxtb	r3, r3
 8008736:	2b20      	cmp	r3, #32
 8008738:	f040 80f9 	bne.w	800892e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800873c:	6a3b      	ldr	r3, [r7, #32]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d002      	beq.n	8008748 <HAL_I2C_Mem_Write+0x34>
 8008742:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008744:	2b00      	cmp	r3, #0
 8008746:	d105      	bne.n	8008754 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800874e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	e0ed      	b.n	8008930 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800875a:	2b01      	cmp	r3, #1
 800875c:	d101      	bne.n	8008762 <HAL_I2C_Mem_Write+0x4e>
 800875e:	2302      	movs	r3, #2
 8008760:	e0e6      	b.n	8008930 <HAL_I2C_Mem_Write+0x21c>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2201      	movs	r2, #1
 8008766:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800876a:	f7fe feeb 	bl	8007544 <HAL_GetTick>
 800876e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	9300      	str	r3, [sp, #0]
 8008774:	2319      	movs	r3, #25
 8008776:	2201      	movs	r2, #1
 8008778:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	f000 fac3 	bl	8008d08 <I2C_WaitOnFlagUntilTimeout>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d001      	beq.n	800878c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	e0d1      	b.n	8008930 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2221      	movs	r2, #33	@ 0x21
 8008790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2240      	movs	r2, #64	@ 0x40
 8008798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2200      	movs	r2, #0
 80087a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	6a3a      	ldr	r2, [r7, #32]
 80087a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80087ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2200      	movs	r2, #0
 80087b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80087b4:	88f8      	ldrh	r0, [r7, #6]
 80087b6:	893a      	ldrh	r2, [r7, #8]
 80087b8:	8979      	ldrh	r1, [r7, #10]
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	9301      	str	r3, [sp, #4]
 80087be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c0:	9300      	str	r3, [sp, #0]
 80087c2:	4603      	mov	r3, r0
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f000 f9d3 	bl	8008b70 <I2C_RequestMemoryWrite>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d005      	beq.n	80087dc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	e0a9      	b.n	8008930 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	2bff      	cmp	r3, #255	@ 0xff
 80087e4:	d90e      	bls.n	8008804 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	22ff      	movs	r2, #255	@ 0xff
 80087ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087f0:	b2da      	uxtb	r2, r3
 80087f2:	8979      	ldrh	r1, [r7, #10]
 80087f4:	2300      	movs	r3, #0
 80087f6:	9300      	str	r3, [sp, #0]
 80087f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f000 fcd3 	bl	80091a8 <I2C_TransferConfig>
 8008802:	e00f      	b.n	8008824 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008808:	b29a      	uxth	r2, r3
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008812:	b2da      	uxtb	r2, r3
 8008814:	8979      	ldrh	r1, [r7, #10]
 8008816:	2300      	movs	r3, #0
 8008818:	9300      	str	r3, [sp, #0]
 800881a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800881e:	68f8      	ldr	r0, [r7, #12]
 8008820:	f000 fcc2 	bl	80091a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008824:	697a      	ldr	r2, [r7, #20]
 8008826:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f000 fac6 	bl	8008dba <I2C_WaitOnTXISFlagUntilTimeout>
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d001      	beq.n	8008838 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	e07b      	b.n	8008930 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800883c:	781a      	ldrb	r2, [r3, #0]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008848:	1c5a      	adds	r2, r3, #1
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008852:	b29b      	uxth	r3, r3
 8008854:	3b01      	subs	r3, #1
 8008856:	b29a      	uxth	r2, r3
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008860:	3b01      	subs	r3, #1
 8008862:	b29a      	uxth	r2, r3
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800886c:	b29b      	uxth	r3, r3
 800886e:	2b00      	cmp	r3, #0
 8008870:	d034      	beq.n	80088dc <HAL_I2C_Mem_Write+0x1c8>
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008876:	2b00      	cmp	r3, #0
 8008878:	d130      	bne.n	80088dc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	9300      	str	r3, [sp, #0]
 800887e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008880:	2200      	movs	r2, #0
 8008882:	2180      	movs	r1, #128	@ 0x80
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f000 fa3f 	bl	8008d08 <I2C_WaitOnFlagUntilTimeout>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d001      	beq.n	8008894 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	e04d      	b.n	8008930 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008898:	b29b      	uxth	r3, r3
 800889a:	2bff      	cmp	r3, #255	@ 0xff
 800889c:	d90e      	bls.n	80088bc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	22ff      	movs	r2, #255	@ 0xff
 80088a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088a8:	b2da      	uxtb	r2, r3
 80088aa:	8979      	ldrh	r1, [r7, #10]
 80088ac:	2300      	movs	r3, #0
 80088ae:	9300      	str	r3, [sp, #0]
 80088b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f000 fc77 	bl	80091a8 <I2C_TransferConfig>
 80088ba:	e00f      	b.n	80088dc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088c0:	b29a      	uxth	r2, r3
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088ca:	b2da      	uxtb	r2, r3
 80088cc:	8979      	ldrh	r1, [r7, #10]
 80088ce:	2300      	movs	r3, #0
 80088d0:	9300      	str	r3, [sp, #0]
 80088d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f000 fc66 	bl	80091a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d19e      	bne.n	8008824 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088e6:	697a      	ldr	r2, [r7, #20]
 80088e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f000 faac 	bl	8008e48 <I2C_WaitOnSTOPFlagUntilTimeout>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d001      	beq.n	80088fa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	e01a      	b.n	8008930 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2220      	movs	r2, #32
 8008900:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	6859      	ldr	r1, [r3, #4]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	4b0a      	ldr	r3, [pc, #40]	@ (8008938 <HAL_I2C_Mem_Write+0x224>)
 800890e:	400b      	ands	r3, r1
 8008910:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2220      	movs	r2, #32
 8008916:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800892a:	2300      	movs	r3, #0
 800892c:	e000      	b.n	8008930 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800892e:	2302      	movs	r3, #2
  }
}
 8008930:	4618      	mov	r0, r3
 8008932:	3718      	adds	r7, #24
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	fe00e800 	.word	0xfe00e800

0800893c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b088      	sub	sp, #32
 8008940:	af02      	add	r7, sp, #8
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	4608      	mov	r0, r1
 8008946:	4611      	mov	r1, r2
 8008948:	461a      	mov	r2, r3
 800894a:	4603      	mov	r3, r0
 800894c:	817b      	strh	r3, [r7, #10]
 800894e:	460b      	mov	r3, r1
 8008950:	813b      	strh	r3, [r7, #8]
 8008952:	4613      	mov	r3, r2
 8008954:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800895c:	b2db      	uxtb	r3, r3
 800895e:	2b20      	cmp	r3, #32
 8008960:	f040 80fd 	bne.w	8008b5e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008964:	6a3b      	ldr	r3, [r7, #32]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d002      	beq.n	8008970 <HAL_I2C_Mem_Read+0x34>
 800896a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800896c:	2b00      	cmp	r3, #0
 800896e:	d105      	bne.n	800897c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008976:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008978:	2301      	movs	r3, #1
 800897a:	e0f1      	b.n	8008b60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008982:	2b01      	cmp	r3, #1
 8008984:	d101      	bne.n	800898a <HAL_I2C_Mem_Read+0x4e>
 8008986:	2302      	movs	r3, #2
 8008988:	e0ea      	b.n	8008b60 <HAL_I2C_Mem_Read+0x224>
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2201      	movs	r2, #1
 800898e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008992:	f7fe fdd7 	bl	8007544 <HAL_GetTick>
 8008996:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	9300      	str	r3, [sp, #0]
 800899c:	2319      	movs	r3, #25
 800899e:	2201      	movs	r2, #1
 80089a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f000 f9af 	bl	8008d08 <I2C_WaitOnFlagUntilTimeout>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d001      	beq.n	80089b4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	e0d5      	b.n	8008b60 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2222      	movs	r2, #34	@ 0x22
 80089b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2240      	movs	r2, #64	@ 0x40
 80089c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2200      	movs	r2, #0
 80089c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	6a3a      	ldr	r2, [r7, #32]
 80089ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80089d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2200      	movs	r2, #0
 80089da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80089dc:	88f8      	ldrh	r0, [r7, #6]
 80089de:	893a      	ldrh	r2, [r7, #8]
 80089e0:	8979      	ldrh	r1, [r7, #10]
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	9301      	str	r3, [sp, #4]
 80089e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089e8:	9300      	str	r3, [sp, #0]
 80089ea:	4603      	mov	r3, r0
 80089ec:	68f8      	ldr	r0, [r7, #12]
 80089ee:	f000 f913 	bl	8008c18 <I2C_RequestMemoryRead>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d005      	beq.n	8008a04 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	e0ad      	b.n	8008b60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	2bff      	cmp	r3, #255	@ 0xff
 8008a0c:	d90e      	bls.n	8008a2c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	22ff      	movs	r2, #255	@ 0xff
 8008a12:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a18:	b2da      	uxtb	r2, r3
 8008a1a:	8979      	ldrh	r1, [r7, #10]
 8008a1c:	4b52      	ldr	r3, [pc, #328]	@ (8008b68 <HAL_I2C_Mem_Read+0x22c>)
 8008a1e:	9300      	str	r3, [sp, #0]
 8008a20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f000 fbbf 	bl	80091a8 <I2C_TransferConfig>
 8008a2a:	e00f      	b.n	8008a4c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a30:	b29a      	uxth	r2, r3
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a3a:	b2da      	uxtb	r2, r3
 8008a3c:	8979      	ldrh	r1, [r7, #10]
 8008a3e:	4b4a      	ldr	r3, [pc, #296]	@ (8008b68 <HAL_I2C_Mem_Read+0x22c>)
 8008a40:	9300      	str	r3, [sp, #0]
 8008a42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f000 fbae 	bl	80091a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	9300      	str	r3, [sp, #0]
 8008a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a52:	2200      	movs	r2, #0
 8008a54:	2104      	movs	r1, #4
 8008a56:	68f8      	ldr	r0, [r7, #12]
 8008a58:	f000 f956 	bl	8008d08 <I2C_WaitOnFlagUntilTimeout>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d001      	beq.n	8008a66 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	e07c      	b.n	8008b60 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a70:	b2d2      	uxtb	r2, r2
 8008a72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a78:	1c5a      	adds	r2, r3, #1
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a82:	3b01      	subs	r3, #1
 8008a84:	b29a      	uxth	r2, r3
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	3b01      	subs	r3, #1
 8008a92:	b29a      	uxth	r2, r3
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d034      	beq.n	8008b0c <HAL_I2C_Mem_Read+0x1d0>
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d130      	bne.n	8008b0c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	9300      	str	r3, [sp, #0]
 8008aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	2180      	movs	r1, #128	@ 0x80
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f000 f927 	bl	8008d08 <I2C_WaitOnFlagUntilTimeout>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d001      	beq.n	8008ac4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e04d      	b.n	8008b60 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	2bff      	cmp	r3, #255	@ 0xff
 8008acc:	d90e      	bls.n	8008aec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	22ff      	movs	r2, #255	@ 0xff
 8008ad2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ad8:	b2da      	uxtb	r2, r3
 8008ada:	8979      	ldrh	r1, [r7, #10]
 8008adc:	2300      	movs	r3, #0
 8008ade:	9300      	str	r3, [sp, #0]
 8008ae0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f000 fb5f 	bl	80091a8 <I2C_TransferConfig>
 8008aea:	e00f      	b.n	8008b0c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008af0:	b29a      	uxth	r2, r3
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008afa:	b2da      	uxtb	r2, r3
 8008afc:	8979      	ldrh	r1, [r7, #10]
 8008afe:	2300      	movs	r3, #0
 8008b00:	9300      	str	r3, [sp, #0]
 8008b02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f000 fb4e 	bl	80091a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d19a      	bne.n	8008a4c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b16:	697a      	ldr	r2, [r7, #20]
 8008b18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	f000 f994 	bl	8008e48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d001      	beq.n	8008b2a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	e01a      	b.n	8008b60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2220      	movs	r2, #32
 8008b30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	6859      	ldr	r1, [r3, #4]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8008b6c <HAL_I2C_Mem_Read+0x230>)
 8008b3e:	400b      	ands	r3, r1
 8008b40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2220      	movs	r2, #32
 8008b46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2200      	movs	r2, #0
 8008b56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	e000      	b.n	8008b60 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008b5e:	2302      	movs	r3, #2
  }
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3718      	adds	r7, #24
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	80002400 	.word	0x80002400
 8008b6c:	fe00e800 	.word	0xfe00e800

08008b70 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b086      	sub	sp, #24
 8008b74:	af02      	add	r7, sp, #8
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	4608      	mov	r0, r1
 8008b7a:	4611      	mov	r1, r2
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	4603      	mov	r3, r0
 8008b80:	817b      	strh	r3, [r7, #10]
 8008b82:	460b      	mov	r3, r1
 8008b84:	813b      	strh	r3, [r7, #8]
 8008b86:	4613      	mov	r3, r2
 8008b88:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008b8a:	88fb      	ldrh	r3, [r7, #6]
 8008b8c:	b2da      	uxtb	r2, r3
 8008b8e:	8979      	ldrh	r1, [r7, #10]
 8008b90:	4b20      	ldr	r3, [pc, #128]	@ (8008c14 <I2C_RequestMemoryWrite+0xa4>)
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f000 fb05 	bl	80091a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b9e:	69fa      	ldr	r2, [r7, #28]
 8008ba0:	69b9      	ldr	r1, [r7, #24]
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	f000 f909 	bl	8008dba <I2C_WaitOnTXISFlagUntilTimeout>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d001      	beq.n	8008bb2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e02c      	b.n	8008c0c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008bb2:	88fb      	ldrh	r3, [r7, #6]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d105      	bne.n	8008bc4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008bb8:	893b      	ldrh	r3, [r7, #8]
 8008bba:	b2da      	uxtb	r2, r3
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	629a      	str	r2, [r3, #40]	@ 0x28
 8008bc2:	e015      	b.n	8008bf0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008bc4:	893b      	ldrh	r3, [r7, #8]
 8008bc6:	0a1b      	lsrs	r3, r3, #8
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	b2da      	uxtb	r2, r3
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bd2:	69fa      	ldr	r2, [r7, #28]
 8008bd4:	69b9      	ldr	r1, [r7, #24]
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	f000 f8ef 	bl	8008dba <I2C_WaitOnTXISFlagUntilTimeout>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d001      	beq.n	8008be6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e012      	b.n	8008c0c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008be6:	893b      	ldrh	r3, [r7, #8]
 8008be8:	b2da      	uxtb	r2, r3
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	9300      	str	r3, [sp, #0]
 8008bf4:	69bb      	ldr	r3, [r7, #24]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	2180      	movs	r1, #128	@ 0x80
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f000 f884 	bl	8008d08 <I2C_WaitOnFlagUntilTimeout>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d001      	beq.n	8008c0a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	e000      	b.n	8008c0c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3710      	adds	r7, #16
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	80002000 	.word	0x80002000

08008c18 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b086      	sub	sp, #24
 8008c1c:	af02      	add	r7, sp, #8
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	4608      	mov	r0, r1
 8008c22:	4611      	mov	r1, r2
 8008c24:	461a      	mov	r2, r3
 8008c26:	4603      	mov	r3, r0
 8008c28:	817b      	strh	r3, [r7, #10]
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	813b      	strh	r3, [r7, #8]
 8008c2e:	4613      	mov	r3, r2
 8008c30:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008c32:	88fb      	ldrh	r3, [r7, #6]
 8008c34:	b2da      	uxtb	r2, r3
 8008c36:	8979      	ldrh	r1, [r7, #10]
 8008c38:	4b20      	ldr	r3, [pc, #128]	@ (8008cbc <I2C_RequestMemoryRead+0xa4>)
 8008c3a:	9300      	str	r3, [sp, #0]
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f000 fab2 	bl	80091a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c44:	69fa      	ldr	r2, [r7, #28]
 8008c46:	69b9      	ldr	r1, [r7, #24]
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f000 f8b6 	bl	8008dba <I2C_WaitOnTXISFlagUntilTimeout>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d001      	beq.n	8008c58 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e02c      	b.n	8008cb2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008c58:	88fb      	ldrh	r3, [r7, #6]
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d105      	bne.n	8008c6a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008c5e:	893b      	ldrh	r3, [r7, #8]
 8008c60:	b2da      	uxtb	r2, r3
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	629a      	str	r2, [r3, #40]	@ 0x28
 8008c68:	e015      	b.n	8008c96 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008c6a:	893b      	ldrh	r3, [r7, #8]
 8008c6c:	0a1b      	lsrs	r3, r3, #8
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	b2da      	uxtb	r2, r3
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c78:	69fa      	ldr	r2, [r7, #28]
 8008c7a:	69b9      	ldr	r1, [r7, #24]
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	f000 f89c 	bl	8008dba <I2C_WaitOnTXISFlagUntilTimeout>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d001      	beq.n	8008c8c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e012      	b.n	8008cb2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008c8c:	893b      	ldrh	r3, [r7, #8]
 8008c8e:	b2da      	uxtb	r2, r3
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	9300      	str	r3, [sp, #0]
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	2140      	movs	r1, #64	@ 0x40
 8008ca0:	68f8      	ldr	r0, [r7, #12]
 8008ca2:	f000 f831 	bl	8008d08 <I2C_WaitOnFlagUntilTimeout>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d001      	beq.n	8008cb0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	e000      	b.n	8008cb2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3710      	adds	r7, #16
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	80002000 	.word	0x80002000

08008cc0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	699b      	ldr	r3, [r3, #24]
 8008cce:	f003 0302 	and.w	r3, r3, #2
 8008cd2:	2b02      	cmp	r3, #2
 8008cd4:	d103      	bne.n	8008cde <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	699b      	ldr	r3, [r3, #24]
 8008ce4:	f003 0301 	and.w	r3, r3, #1
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d007      	beq.n	8008cfc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	699a      	ldr	r2, [r3, #24]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f042 0201 	orr.w	r2, r2, #1
 8008cfa:	619a      	str	r2, [r3, #24]
  }
}
 8008cfc:	bf00      	nop
 8008cfe:	370c      	adds	r7, #12
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	603b      	str	r3, [r7, #0]
 8008d14:	4613      	mov	r3, r2
 8008d16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d18:	e03b      	b.n	8008d92 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d1a:	69ba      	ldr	r2, [r7, #24]
 8008d1c:	6839      	ldr	r1, [r7, #0]
 8008d1e:	68f8      	ldr	r0, [r7, #12]
 8008d20:	f000 f962 	bl	8008fe8 <I2C_IsErrorOccurred>
 8008d24:	4603      	mov	r3, r0
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d001      	beq.n	8008d2e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e041      	b.n	8008db2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d34:	d02d      	beq.n	8008d92 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d36:	f7fe fc05 	bl	8007544 <HAL_GetTick>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	1ad3      	subs	r3, r2, r3
 8008d40:	683a      	ldr	r2, [r7, #0]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d302      	bcc.n	8008d4c <I2C_WaitOnFlagUntilTimeout+0x44>
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d122      	bne.n	8008d92 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	699a      	ldr	r2, [r3, #24]
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	4013      	ands	r3, r2
 8008d56:	68ba      	ldr	r2, [r7, #8]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	bf0c      	ite	eq
 8008d5c:	2301      	moveq	r3, #1
 8008d5e:	2300      	movne	r3, #0
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	461a      	mov	r2, r3
 8008d64:	79fb      	ldrb	r3, [r7, #7]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d113      	bne.n	8008d92 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d6e:	f043 0220 	orr.w	r2, r3, #32
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2220      	movs	r2, #32
 8008d7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e00f      	b.n	8008db2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	699a      	ldr	r2, [r3, #24]
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	4013      	ands	r3, r2
 8008d9c:	68ba      	ldr	r2, [r7, #8]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	bf0c      	ite	eq
 8008da2:	2301      	moveq	r3, #1
 8008da4:	2300      	movne	r3, #0
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	461a      	mov	r2, r3
 8008daa:	79fb      	ldrb	r3, [r7, #7]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d0b4      	beq.n	8008d1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3710      	adds	r7, #16
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b084      	sub	sp, #16
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	60f8      	str	r0, [r7, #12]
 8008dc2:	60b9      	str	r1, [r7, #8]
 8008dc4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008dc6:	e033      	b.n	8008e30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	68b9      	ldr	r1, [r7, #8]
 8008dcc:	68f8      	ldr	r0, [r7, #12]
 8008dce:	f000 f90b 	bl	8008fe8 <I2C_IsErrorOccurred>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d001      	beq.n	8008ddc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e031      	b.n	8008e40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008de2:	d025      	beq.n	8008e30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008de4:	f7fe fbae 	bl	8007544 <HAL_GetTick>
 8008de8:	4602      	mov	r2, r0
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	1ad3      	subs	r3, r2, r3
 8008dee:	68ba      	ldr	r2, [r7, #8]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d302      	bcc.n	8008dfa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d11a      	bne.n	8008e30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	699b      	ldr	r3, [r3, #24]
 8008e00:	f003 0302 	and.w	r3, r3, #2
 8008e04:	2b02      	cmp	r3, #2
 8008e06:	d013      	beq.n	8008e30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e0c:	f043 0220 	orr.w	r2, r3, #32
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2220      	movs	r2, #32
 8008e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2200      	movs	r2, #0
 8008e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e007      	b.n	8008e40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	699b      	ldr	r3, [r3, #24]
 8008e36:	f003 0302 	and.w	r3, r3, #2
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	d1c4      	bne.n	8008dc8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008e3e:	2300      	movs	r3, #0
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3710      	adds	r7, #16
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e54:	e02f      	b.n	8008eb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	68b9      	ldr	r1, [r7, #8]
 8008e5a:	68f8      	ldr	r0, [r7, #12]
 8008e5c:	f000 f8c4 	bl	8008fe8 <I2C_IsErrorOccurred>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d001      	beq.n	8008e6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	e02d      	b.n	8008ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e6a:	f7fe fb6b 	bl	8007544 <HAL_GetTick>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	68ba      	ldr	r2, [r7, #8]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d302      	bcc.n	8008e80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d11a      	bne.n	8008eb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	699b      	ldr	r3, [r3, #24]
 8008e86:	f003 0320 	and.w	r3, r3, #32
 8008e8a:	2b20      	cmp	r3, #32
 8008e8c:	d013      	beq.n	8008eb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e92:	f043 0220 	orr.w	r2, r3, #32
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2220      	movs	r2, #32
 8008e9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e007      	b.n	8008ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	699b      	ldr	r3, [r3, #24]
 8008ebc:	f003 0320 	and.w	r3, r3, #32
 8008ec0:	2b20      	cmp	r3, #32
 8008ec2:	d1c8      	bne.n	8008e56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
	...

08008ed0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b086      	sub	sp, #24
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	60b9      	str	r1, [r7, #8]
 8008eda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008edc:	2300      	movs	r3, #0
 8008ede:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008ee0:	e071      	b.n	8008fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	68b9      	ldr	r1, [r7, #8]
 8008ee6:	68f8      	ldr	r0, [r7, #12]
 8008ee8:	f000 f87e 	bl	8008fe8 <I2C_IsErrorOccurred>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d001      	beq.n	8008ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	699b      	ldr	r3, [r3, #24]
 8008efc:	f003 0320 	and.w	r3, r3, #32
 8008f00:	2b20      	cmp	r3, #32
 8008f02:	d13b      	bne.n	8008f7c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8008f04:	7dfb      	ldrb	r3, [r7, #23]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d138      	bne.n	8008f7c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	699b      	ldr	r3, [r3, #24]
 8008f10:	f003 0304 	and.w	r3, r3, #4
 8008f14:	2b04      	cmp	r3, #4
 8008f16:	d105      	bne.n	8008f24 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d001      	beq.n	8008f24 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8008f20:	2300      	movs	r3, #0
 8008f22:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	699b      	ldr	r3, [r3, #24]
 8008f2a:	f003 0310 	and.w	r3, r3, #16
 8008f2e:	2b10      	cmp	r3, #16
 8008f30:	d121      	bne.n	8008f76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2210      	movs	r2, #16
 8008f38:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2204      	movs	r2, #4
 8008f3e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2220      	movs	r2, #32
 8008f46:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	6859      	ldr	r1, [r3, #4]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	4b24      	ldr	r3, [pc, #144]	@ (8008fe4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8008f54:	400b      	ands	r3, r1
 8008f56:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2220      	movs	r2, #32
 8008f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2200      	movs	r2, #0
 8008f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008f70:	2301      	movs	r3, #1
 8008f72:	75fb      	strb	r3, [r7, #23]
 8008f74:	e002      	b.n	8008f7c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8008f7c:	f7fe fae2 	bl	8007544 <HAL_GetTick>
 8008f80:	4602      	mov	r2, r0
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	1ad3      	subs	r3, r2, r3
 8008f86:	68ba      	ldr	r2, [r7, #8]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d302      	bcc.n	8008f92 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d119      	bne.n	8008fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8008f92:	7dfb      	ldrb	r3, [r7, #23]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d116      	bne.n	8008fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	699b      	ldr	r3, [r3, #24]
 8008f9e:	f003 0304 	and.w	r3, r3, #4
 8008fa2:	2b04      	cmp	r3, #4
 8008fa4:	d00f      	beq.n	8008fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008faa:	f043 0220 	orr.w	r2, r3, #32
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2220      	movs	r2, #32
 8008fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	699b      	ldr	r3, [r3, #24]
 8008fcc:	f003 0304 	and.w	r3, r3, #4
 8008fd0:	2b04      	cmp	r3, #4
 8008fd2:	d002      	beq.n	8008fda <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8008fd4:	7dfb      	ldrb	r3, [r7, #23]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d083      	beq.n	8008ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8008fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3718      	adds	r7, #24
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	fe00e800 	.word	0xfe00e800

08008fe8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b08a      	sub	sp, #40	@ 0x28
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	699b      	ldr	r3, [r3, #24]
 8009000:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009002:	2300      	movs	r3, #0
 8009004:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	f003 0310 	and.w	r3, r3, #16
 8009010:	2b00      	cmp	r3, #0
 8009012:	d068      	beq.n	80090e6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2210      	movs	r2, #16
 800901a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800901c:	e049      	b.n	80090b2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009024:	d045      	beq.n	80090b2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009026:	f7fe fa8d 	bl	8007544 <HAL_GetTick>
 800902a:	4602      	mov	r2, r0
 800902c:	69fb      	ldr	r3, [r7, #28]
 800902e:	1ad3      	subs	r3, r2, r3
 8009030:	68ba      	ldr	r2, [r7, #8]
 8009032:	429a      	cmp	r2, r3
 8009034:	d302      	bcc.n	800903c <I2C_IsErrorOccurred+0x54>
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d13a      	bne.n	80090b2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009046:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800904e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	699b      	ldr	r3, [r3, #24]
 8009056:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800905a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800905e:	d121      	bne.n	80090a4 <I2C_IsErrorOccurred+0xbc>
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009066:	d01d      	beq.n	80090a4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009068:	7cfb      	ldrb	r3, [r7, #19]
 800906a:	2b20      	cmp	r3, #32
 800906c:	d01a      	beq.n	80090a4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	685a      	ldr	r2, [r3, #4]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800907c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800907e:	f7fe fa61 	bl	8007544 <HAL_GetTick>
 8009082:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009084:	e00e      	b.n	80090a4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009086:	f7fe fa5d 	bl	8007544 <HAL_GetTick>
 800908a:	4602      	mov	r2, r0
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	1ad3      	subs	r3, r2, r3
 8009090:	2b19      	cmp	r3, #25
 8009092:	d907      	bls.n	80090a4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009094:	6a3b      	ldr	r3, [r7, #32]
 8009096:	f043 0320 	orr.w	r3, r3, #32
 800909a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80090a2:	e006      	b.n	80090b2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	699b      	ldr	r3, [r3, #24]
 80090aa:	f003 0320 	and.w	r3, r3, #32
 80090ae:	2b20      	cmp	r3, #32
 80090b0:	d1e9      	bne.n	8009086 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	699b      	ldr	r3, [r3, #24]
 80090b8:	f003 0320 	and.w	r3, r3, #32
 80090bc:	2b20      	cmp	r3, #32
 80090be:	d003      	beq.n	80090c8 <I2C_IsErrorOccurred+0xe0>
 80090c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d0aa      	beq.n	800901e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80090c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d103      	bne.n	80090d8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2220      	movs	r2, #32
 80090d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80090d8:	6a3b      	ldr	r3, [r7, #32]
 80090da:	f043 0304 	orr.w	r3, r3, #4
 80090de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80090e0:	2301      	movs	r3, #1
 80090e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	699b      	ldr	r3, [r3, #24]
 80090ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00b      	beq.n	8009110 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80090f8:	6a3b      	ldr	r3, [r7, #32]
 80090fa:	f043 0301 	orr.w	r3, r3, #1
 80090fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009108:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009116:	2b00      	cmp	r3, #0
 8009118:	d00b      	beq.n	8009132 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800911a:	6a3b      	ldr	r3, [r7, #32]
 800911c:	f043 0308 	orr.w	r3, r3, #8
 8009120:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800912a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009132:	69bb      	ldr	r3, [r7, #24]
 8009134:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009138:	2b00      	cmp	r3, #0
 800913a:	d00b      	beq.n	8009154 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800913c:	6a3b      	ldr	r3, [r7, #32]
 800913e:	f043 0302 	orr.w	r3, r3, #2
 8009142:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800914c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009154:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009158:	2b00      	cmp	r3, #0
 800915a:	d01c      	beq.n	8009196 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800915c:	68f8      	ldr	r0, [r7, #12]
 800915e:	f7ff fdaf 	bl	8008cc0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	6859      	ldr	r1, [r3, #4]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	4b0d      	ldr	r3, [pc, #52]	@ (80091a4 <I2C_IsErrorOccurred+0x1bc>)
 800916e:	400b      	ands	r3, r1
 8009170:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009176:	6a3b      	ldr	r3, [r7, #32]
 8009178:	431a      	orrs	r2, r3
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2220      	movs	r2, #32
 8009182:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2200      	movs	r2, #0
 800918a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2200      	movs	r2, #0
 8009192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009196:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800919a:	4618      	mov	r0, r3
 800919c:	3728      	adds	r7, #40	@ 0x28
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	fe00e800 	.word	0xfe00e800

080091a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b087      	sub	sp, #28
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	607b      	str	r3, [r7, #4]
 80091b2:	460b      	mov	r3, r1
 80091b4:	817b      	strh	r3, [r7, #10]
 80091b6:	4613      	mov	r3, r2
 80091b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80091ba:	897b      	ldrh	r3, [r7, #10]
 80091bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80091c0:	7a7b      	ldrb	r3, [r7, #9]
 80091c2:	041b      	lsls	r3, r3, #16
 80091c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80091c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80091ce:	6a3b      	ldr	r3, [r7, #32]
 80091d0:	4313      	orrs	r3, r2
 80091d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80091d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	685a      	ldr	r2, [r3, #4]
 80091de:	6a3b      	ldr	r3, [r7, #32]
 80091e0:	0d5b      	lsrs	r3, r3, #21
 80091e2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80091e6:	4b08      	ldr	r3, [pc, #32]	@ (8009208 <I2C_TransferConfig+0x60>)
 80091e8:	430b      	orrs	r3, r1
 80091ea:	43db      	mvns	r3, r3
 80091ec:	ea02 0103 	and.w	r1, r2, r3
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	697a      	ldr	r2, [r7, #20]
 80091f6:	430a      	orrs	r2, r1
 80091f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80091fa:	bf00      	nop
 80091fc:	371c      	adds	r7, #28
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr
 8009206:	bf00      	nop
 8009208:	03ff63ff 	.word	0x03ff63ff

0800920c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800921c:	b2db      	uxtb	r3, r3
 800921e:	2b20      	cmp	r3, #32
 8009220:	d138      	bne.n	8009294 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009228:	2b01      	cmp	r3, #1
 800922a:	d101      	bne.n	8009230 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800922c:	2302      	movs	r3, #2
 800922e:	e032      	b.n	8009296 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2224      	movs	r2, #36	@ 0x24
 800923c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f022 0201 	bic.w	r2, r2, #1
 800924e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800925e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	6819      	ldr	r1, [r3, #0]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	683a      	ldr	r2, [r7, #0]
 800926c:	430a      	orrs	r2, r1
 800926e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f042 0201 	orr.w	r2, r2, #1
 800927e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2220      	movs	r2, #32
 8009284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009290:	2300      	movs	r3, #0
 8009292:	e000      	b.n	8009296 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009294:	2302      	movs	r3, #2
  }
}
 8009296:	4618      	mov	r0, r3
 8009298:	370c      	adds	r7, #12
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr

080092a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80092a2:	b480      	push	{r7}
 80092a4:	b085      	sub	sp, #20
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
 80092aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	2b20      	cmp	r3, #32
 80092b6:	d139      	bne.n	800932c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d101      	bne.n	80092c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80092c2:	2302      	movs	r3, #2
 80092c4:	e033      	b.n	800932e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2201      	movs	r2, #1
 80092ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2224      	movs	r2, #36	@ 0x24
 80092d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f022 0201 	bic.w	r2, r2, #1
 80092e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80092f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	021b      	lsls	r3, r3, #8
 80092fa:	68fa      	ldr	r2, [r7, #12]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	68fa      	ldr	r2, [r7, #12]
 8009306:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f042 0201 	orr.w	r2, r2, #1
 8009316:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2220      	movs	r2, #32
 800931c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009328:	2300      	movs	r3, #0
 800932a:	e000      	b.n	800932e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800932c:	2302      	movs	r3, #2
  }
}
 800932e:	4618      	mov	r0, r3
 8009330:	3714      	adds	r7, #20
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr
	...

0800933c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8009344:	2300      	movs	r3, #0
 8009346:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d01e      	beq.n	800938c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800934e:	4b13      	ldr	r3, [pc, #76]	@ (800939c <HAL_IPCC_Init+0x60>)
 8009350:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009358:	b2db      	uxtb	r3, r3
 800935a:	2b00      	cmp	r3, #0
 800935c:	d102      	bne.n	8009364 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f7fc fe24 	bl	8005fac <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8009364:	68b8      	ldr	r0, [r7, #8]
 8009366:	f000 f85b 	bl	8009420 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 f82c 	bl	80093d4 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2201      	movs	r2, #1
 8009386:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800938a:	e001      	b.n	8009390 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8009390:	7bfb      	ldrb	r3, [r7, #15]
}
 8009392:	4618      	mov	r0, r3
 8009394:	3710      	adds	r7, #16
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	58000c00 	.word	0x58000c00

080093a0 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b085      	sub	sp, #20
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	60f8      	str	r0, [r7, #12]
 80093a8:	60b9      	str	r1, [r7, #8]
 80093aa:	4613      	mov	r3, r2
 80093ac:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80093ae:	bf00      	nop
 80093b0:	3714      	adds	r7, #20
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr

080093ba <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80093ba:	b480      	push	{r7}
 80093bc:	b085      	sub	sp, #20
 80093be:	af00      	add	r7, sp, #0
 80093c0:	60f8      	str	r0, [r7, #12]
 80093c2:	60b9      	str	r1, [r7, #8]
 80093c4:	4613      	mov	r3, r2
 80093c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80093c8:	bf00      	nop
 80093ca:	3714      	adds	r7, #20
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80093dc:	2300      	movs	r3, #0
 80093de:	60fb      	str	r3, [r7, #12]
 80093e0:	e00f      	b.n	8009402 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	4413      	add	r3, r2
 80093ea:	4a0b      	ldr	r2, [pc, #44]	@ (8009418 <IPCC_SetDefaultCallbacks+0x44>)
 80093ec:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	3306      	adds	r3, #6
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	4413      	add	r3, r2
 80093f8:	4a08      	ldr	r2, [pc, #32]	@ (800941c <IPCC_SetDefaultCallbacks+0x48>)
 80093fa:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	3301      	adds	r3, #1
 8009400:	60fb      	str	r3, [r7, #12]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2b05      	cmp	r3, #5
 8009406:	d9ec      	bls.n	80093e2 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8009408:	bf00      	nop
 800940a:	bf00      	nop
 800940c:	3714      	adds	r7, #20
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr
 8009416:	bf00      	nop
 8009418:	080093a1 	.word	0x080093a1
 800941c:	080093bb 	.word	0x080093bb

08009420 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8009434:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	223f      	movs	r2, #63	@ 0x3f
 800943a:	609a      	str	r2, [r3, #8]
}
 800943c:	bf00      	nop
 800943e:	370c      	adds	r7, #12
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d101      	bne.n	800945a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009456:	2301      	movs	r3, #1
 8009458:	e0c0      	b.n	80095dc <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8009460:	b2db      	uxtb	r3, r3
 8009462:	2b00      	cmp	r3, #0
 8009464:	d106      	bne.n	8009474 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f00e fda4 	bl	8017fbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2203      	movs	r2, #3
 8009478:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4618      	mov	r0, r3
 8009482:	f006 fbc6 	bl	800fc12 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009486:	2300      	movs	r3, #0
 8009488:	73fb      	strb	r3, [r7, #15]
 800948a:	e03e      	b.n	800950a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800948c:	7bfa      	ldrb	r2, [r7, #15]
 800948e:	6879      	ldr	r1, [r7, #4]
 8009490:	4613      	mov	r3, r2
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	4413      	add	r3, r2
 8009496:	00db      	lsls	r3, r3, #3
 8009498:	440b      	add	r3, r1
 800949a:	3311      	adds	r3, #17
 800949c:	2201      	movs	r2, #1
 800949e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80094a0:	7bfa      	ldrb	r2, [r7, #15]
 80094a2:	6879      	ldr	r1, [r7, #4]
 80094a4:	4613      	mov	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	4413      	add	r3, r2
 80094aa:	00db      	lsls	r3, r3, #3
 80094ac:	440b      	add	r3, r1
 80094ae:	3310      	adds	r3, #16
 80094b0:	7bfa      	ldrb	r2, [r7, #15]
 80094b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80094b4:	7bfa      	ldrb	r2, [r7, #15]
 80094b6:	6879      	ldr	r1, [r7, #4]
 80094b8:	4613      	mov	r3, r2
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	4413      	add	r3, r2
 80094be:	00db      	lsls	r3, r3, #3
 80094c0:	440b      	add	r3, r1
 80094c2:	3313      	adds	r3, #19
 80094c4:	2200      	movs	r2, #0
 80094c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80094c8:	7bfa      	ldrb	r2, [r7, #15]
 80094ca:	6879      	ldr	r1, [r7, #4]
 80094cc:	4613      	mov	r3, r2
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	4413      	add	r3, r2
 80094d2:	00db      	lsls	r3, r3, #3
 80094d4:	440b      	add	r3, r1
 80094d6:	3320      	adds	r3, #32
 80094d8:	2200      	movs	r2, #0
 80094da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80094dc:	7bfa      	ldrb	r2, [r7, #15]
 80094de:	6879      	ldr	r1, [r7, #4]
 80094e0:	4613      	mov	r3, r2
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	4413      	add	r3, r2
 80094e6:	00db      	lsls	r3, r3, #3
 80094e8:	440b      	add	r3, r1
 80094ea:	3324      	adds	r3, #36	@ 0x24
 80094ec:	2200      	movs	r2, #0
 80094ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80094f0:	7bfb      	ldrb	r3, [r7, #15]
 80094f2:	6879      	ldr	r1, [r7, #4]
 80094f4:	1c5a      	adds	r2, r3, #1
 80094f6:	4613      	mov	r3, r2
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	4413      	add	r3, r2
 80094fc:	00db      	lsls	r3, r3, #3
 80094fe:	440b      	add	r3, r1
 8009500:	2200      	movs	r2, #0
 8009502:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009504:	7bfb      	ldrb	r3, [r7, #15]
 8009506:	3301      	adds	r3, #1
 8009508:	73fb      	strb	r3, [r7, #15]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	791b      	ldrb	r3, [r3, #4]
 800950e:	7bfa      	ldrb	r2, [r7, #15]
 8009510:	429a      	cmp	r2, r3
 8009512:	d3bb      	bcc.n	800948c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009514:	2300      	movs	r3, #0
 8009516:	73fb      	strb	r3, [r7, #15]
 8009518:	e044      	b.n	80095a4 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800951a:	7bfa      	ldrb	r2, [r7, #15]
 800951c:	6879      	ldr	r1, [r7, #4]
 800951e:	4613      	mov	r3, r2
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	4413      	add	r3, r2
 8009524:	00db      	lsls	r3, r3, #3
 8009526:	440b      	add	r3, r1
 8009528:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800952c:	2200      	movs	r2, #0
 800952e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009530:	7bfa      	ldrb	r2, [r7, #15]
 8009532:	6879      	ldr	r1, [r7, #4]
 8009534:	4613      	mov	r3, r2
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	4413      	add	r3, r2
 800953a:	00db      	lsls	r3, r3, #3
 800953c:	440b      	add	r3, r1
 800953e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009542:	7bfa      	ldrb	r2, [r7, #15]
 8009544:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009546:	7bfa      	ldrb	r2, [r7, #15]
 8009548:	6879      	ldr	r1, [r7, #4]
 800954a:	4613      	mov	r3, r2
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	4413      	add	r3, r2
 8009550:	00db      	lsls	r3, r3, #3
 8009552:	440b      	add	r3, r1
 8009554:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8009558:	2200      	movs	r2, #0
 800955a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800955c:	7bfa      	ldrb	r2, [r7, #15]
 800955e:	6879      	ldr	r1, [r7, #4]
 8009560:	4613      	mov	r3, r2
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	4413      	add	r3, r2
 8009566:	00db      	lsls	r3, r3, #3
 8009568:	440b      	add	r3, r1
 800956a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800956e:	2200      	movs	r2, #0
 8009570:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009572:	7bfa      	ldrb	r2, [r7, #15]
 8009574:	6879      	ldr	r1, [r7, #4]
 8009576:	4613      	mov	r3, r2
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	4413      	add	r3, r2
 800957c:	00db      	lsls	r3, r3, #3
 800957e:	440b      	add	r3, r1
 8009580:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009584:	2200      	movs	r2, #0
 8009586:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009588:	7bfa      	ldrb	r2, [r7, #15]
 800958a:	6879      	ldr	r1, [r7, #4]
 800958c:	4613      	mov	r3, r2
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	4413      	add	r3, r2
 8009592:	00db      	lsls	r3, r3, #3
 8009594:	440b      	add	r3, r1
 8009596:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800959a:	2200      	movs	r2, #0
 800959c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800959e:	7bfb      	ldrb	r3, [r7, #15]
 80095a0:	3301      	adds	r3, #1
 80095a2:	73fb      	strb	r3, [r7, #15]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	791b      	ldrb	r3, [r3, #4]
 80095a8:	7bfa      	ldrb	r2, [r7, #15]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d3b5      	bcc.n	800951a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6818      	ldr	r0, [r3, #0]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	3304      	adds	r3, #4
 80095b6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80095ba:	f006 fb45 	bl	800fc48 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	7a9b      	ldrb	r3, [r3, #10]
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d102      	bne.n	80095da <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f001 fc0e 	bl	800adf6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80095da:	2300      	movs	r3, #0
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3710      	adds	r7, #16
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d101      	bne.n	80095fa <HAL_PCD_Start+0x16>
 80095f6:	2302      	movs	r3, #2
 80095f8:	e012      	b.n	8009620 <HAL_PCD_Start+0x3c>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2201      	movs	r2, #1
 80095fe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4618      	mov	r0, r3
 8009608:	f006 faec 	bl	800fbe4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4618      	mov	r0, r3
 8009612:	f008 f8c9 	bl	80117a8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800961e:	2300      	movs	r3, #0
}
 8009620:	4618      	mov	r0, r3
 8009622:	3708      	adds	r7, #8
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4618      	mov	r0, r3
 8009636:	f008 f8ce 	bl	80117d6 <USB_ReadInterrupts>
 800963a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009642:	2b00      	cmp	r3, #0
 8009644:	d003      	beq.n	800964e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 fb06 	bl	8009c58 <PCD_EP_ISR_Handler>

    return;
 800964c:	e110      	b.n	8009870 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009654:	2b00      	cmp	r3, #0
 8009656:	d013      	beq.n	8009680 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009660:	b29a      	uxth	r2, r3
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800966a:	b292      	uxth	r2, r2
 800966c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f00e fd56 	bl	8018122 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8009676:	2100      	movs	r1, #0
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 f8fc 	bl	8009876 <HAL_PCD_SetAddress>

    return;
 800967e:	e0f7      	b.n	8009870 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009686:	2b00      	cmp	r3, #0
 8009688:	d00c      	beq.n	80096a4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009692:	b29a      	uxth	r2, r3
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800969c:	b292      	uxth	r2, r2
 800969e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80096a2:	e0e5      	b.n	8009870 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00c      	beq.n	80096c8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80096b6:	b29a      	uxth	r2, r3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80096c0:	b292      	uxth	r2, r2
 80096c2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80096c6:	e0d3      	b.n	8009870 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d034      	beq.n	800973c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80096da:	b29a      	uxth	r2, r3
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f022 0204 	bic.w	r2, r2, #4
 80096e4:	b292      	uxth	r2, r2
 80096e6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80096f2:	b29a      	uxth	r2, r3
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f022 0208 	bic.w	r2, r2, #8
 80096fc:	b292      	uxth	r2, r2
 80096fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8009708:	2b01      	cmp	r3, #1
 800970a:	d107      	bne.n	800971c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009714:	2100      	movs	r1, #0
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f00e fef8 	bl	801850c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f00e fd39 	bl	8018194 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800972a:	b29a      	uxth	r2, r3
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009734:	b292      	uxth	r2, r2
 8009736:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800973a:	e099      	b.n	8009870 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009742:	2b00      	cmp	r3, #0
 8009744:	d027      	beq.n	8009796 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800974e:	b29a      	uxth	r2, r3
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f042 0208 	orr.w	r2, r2, #8
 8009758:	b292      	uxth	r2, r2
 800975a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009766:	b29a      	uxth	r2, r3
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009770:	b292      	uxth	r2, r2
 8009772:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800977e:	b29a      	uxth	r2, r3
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f042 0204 	orr.w	r2, r2, #4
 8009788:	b292      	uxth	r2, r2
 800978a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f00e fce6 	bl	8018160 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8009794:	e06c      	b.n	8009870 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800979c:	2b00      	cmp	r3, #0
 800979e:	d040      	beq.n	8009822 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80097a8:	b29a      	uxth	r2, r3
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80097b2:	b292      	uxth	r2, r2
 80097b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d12b      	bne.n	800981a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80097ca:	b29a      	uxth	r2, r3
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f042 0204 	orr.w	r2, r2, #4
 80097d4:	b292      	uxth	r2, r2
 80097d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80097e2:	b29a      	uxth	r2, r3
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f042 0208 	orr.w	r2, r2, #8
 80097ec:	b292      	uxth	r2, r2
 80097ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2201      	movs	r2, #1
 80097f6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8009802:	b29b      	uxth	r3, r3
 8009804:	089b      	lsrs	r3, r3, #2
 8009806:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009810:	2101      	movs	r1, #1
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f00e fe7a 	bl	801850c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8009818:	e02a      	b.n	8009870 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f00e fca0 	bl	8018160 <HAL_PCD_SuspendCallback>
    return;
 8009820:	e026      	b.n	8009870 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009828:	2b00      	cmp	r3, #0
 800982a:	d00f      	beq.n	800984c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009834:	b29a      	uxth	r2, r3
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800983e:	b292      	uxth	r2, r2
 8009840:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f00e fc5e 	bl	8018106 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800984a:	e011      	b.n	8009870 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009852:	2b00      	cmp	r3, #0
 8009854:	d00c      	beq.n	8009870 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800985e:	b29a      	uxth	r2, r3
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009868:	b292      	uxth	r2, r2
 800986a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800986e:	bf00      	nop
  }
}
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b082      	sub	sp, #8
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	460b      	mov	r3, r1
 8009880:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009888:	2b01      	cmp	r3, #1
 800988a:	d101      	bne.n	8009890 <HAL_PCD_SetAddress+0x1a>
 800988c:	2302      	movs	r3, #2
 800988e:	e012      	b.n	80098b6 <HAL_PCD_SetAddress+0x40>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2201      	movs	r2, #1
 8009894:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	78fa      	ldrb	r2, [r7, #3]
 800989c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	78fa      	ldrb	r2, [r7, #3]
 80098a4:	4611      	mov	r1, r2
 80098a6:	4618      	mov	r0, r3
 80098a8:	f007 ff6a 	bl	8011780 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80098b4:	2300      	movs	r3, #0
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3708      	adds	r7, #8
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}

080098be <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b084      	sub	sp, #16
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
 80098c6:	4608      	mov	r0, r1
 80098c8:	4611      	mov	r1, r2
 80098ca:	461a      	mov	r2, r3
 80098cc:	4603      	mov	r3, r0
 80098ce:	70fb      	strb	r3, [r7, #3]
 80098d0:	460b      	mov	r3, r1
 80098d2:	803b      	strh	r3, [r7, #0]
 80098d4:	4613      	mov	r3, r2
 80098d6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80098d8:	2300      	movs	r3, #0
 80098da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80098dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	da0e      	bge.n	8009902 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80098e4:	78fb      	ldrb	r3, [r7, #3]
 80098e6:	f003 0207 	and.w	r2, r3, #7
 80098ea:	4613      	mov	r3, r2
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	4413      	add	r3, r2
 80098f0:	00db      	lsls	r3, r3, #3
 80098f2:	3310      	adds	r3, #16
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	4413      	add	r3, r2
 80098f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2201      	movs	r2, #1
 80098fe:	705a      	strb	r2, [r3, #1]
 8009900:	e00e      	b.n	8009920 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009902:	78fb      	ldrb	r3, [r7, #3]
 8009904:	f003 0207 	and.w	r2, r3, #7
 8009908:	4613      	mov	r3, r2
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	4413      	add	r3, r2
 800990e:	00db      	lsls	r3, r3, #3
 8009910:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	4413      	add	r3, r2
 8009918:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2200      	movs	r2, #0
 800991e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009920:	78fb      	ldrb	r3, [r7, #3]
 8009922:	f003 0307 	and.w	r3, r3, #7
 8009926:	b2da      	uxtb	r2, r3
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800992c:	883b      	ldrh	r3, [r7, #0]
 800992e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	78ba      	ldrb	r2, [r7, #2]
 800993a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800993c:	78bb      	ldrb	r3, [r7, #2]
 800993e:	2b02      	cmp	r3, #2
 8009940:	d102      	bne.n	8009948 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2200      	movs	r2, #0
 8009946:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800994e:	2b01      	cmp	r3, #1
 8009950:	d101      	bne.n	8009956 <HAL_PCD_EP_Open+0x98>
 8009952:	2302      	movs	r3, #2
 8009954:	e00e      	b.n	8009974 <HAL_PCD_EP_Open+0xb6>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2201      	movs	r2, #1
 800995a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	68f9      	ldr	r1, [r7, #12]
 8009964:	4618      	mov	r0, r3
 8009966:	f006 f98d 	bl	800fc84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8009972:	7afb      	ldrb	r3, [r7, #11]
}
 8009974:	4618      	mov	r0, r3
 8009976:	3710      	adds	r7, #16
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	460b      	mov	r3, r1
 8009986:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009988:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800998c:	2b00      	cmp	r3, #0
 800998e:	da0e      	bge.n	80099ae <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009990:	78fb      	ldrb	r3, [r7, #3]
 8009992:	f003 0207 	and.w	r2, r3, #7
 8009996:	4613      	mov	r3, r2
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	4413      	add	r3, r2
 800999c:	00db      	lsls	r3, r3, #3
 800999e:	3310      	adds	r3, #16
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	4413      	add	r3, r2
 80099a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2201      	movs	r2, #1
 80099aa:	705a      	strb	r2, [r3, #1]
 80099ac:	e00e      	b.n	80099cc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80099ae:	78fb      	ldrb	r3, [r7, #3]
 80099b0:	f003 0207 	and.w	r2, r3, #7
 80099b4:	4613      	mov	r3, r2
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	4413      	add	r3, r2
 80099ba:	00db      	lsls	r3, r3, #3
 80099bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	4413      	add	r3, r2
 80099c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2200      	movs	r2, #0
 80099ca:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80099cc:	78fb      	ldrb	r3, [r7, #3]
 80099ce:	f003 0307 	and.w	r3, r3, #7
 80099d2:	b2da      	uxtb	r2, r3
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d101      	bne.n	80099e6 <HAL_PCD_EP_Close+0x6a>
 80099e2:	2302      	movs	r3, #2
 80099e4:	e00e      	b.n	8009a04 <HAL_PCD_EP_Close+0x88>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2201      	movs	r2, #1
 80099ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	68f9      	ldr	r1, [r7, #12]
 80099f4:	4618      	mov	r0, r3
 80099f6:	f006 fe2d 	bl	8010654 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8009a02:	2300      	movs	r3, #0
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3710      	adds	r7, #16
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b086      	sub	sp, #24
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	607a      	str	r2, [r7, #4]
 8009a16:	603b      	str	r3, [r7, #0]
 8009a18:	460b      	mov	r3, r1
 8009a1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009a1c:	7afb      	ldrb	r3, [r7, #11]
 8009a1e:	f003 0207 	and.w	r2, r3, #7
 8009a22:	4613      	mov	r3, r2
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	4413      	add	r3, r2
 8009a28:	00db      	lsls	r3, r3, #3
 8009a2a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	4413      	add	r3, r2
 8009a32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	683a      	ldr	r2, [r7, #0]
 8009a3e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	2200      	movs	r2, #0
 8009a44:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009a4c:	7afb      	ldrb	r3, [r7, #11]
 8009a4e:	f003 0307 	and.w	r3, r3, #7
 8009a52:	b2da      	uxtb	r2, r3
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	6979      	ldr	r1, [r7, #20]
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f006 ffe5 	bl	8010a2e <USB_EPStartXfer>

  return HAL_OK;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3718      	adds	r7, #24
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}

08009a6e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8009a6e:	b480      	push	{r7}
 8009a70:	b083      	sub	sp, #12
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
 8009a76:	460b      	mov	r3, r1
 8009a78:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009a7a:	78fb      	ldrb	r3, [r7, #3]
 8009a7c:	f003 0207 	and.w	r2, r3, #7
 8009a80:	6879      	ldr	r1, [r7, #4]
 8009a82:	4613      	mov	r3, r2
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	4413      	add	r3, r2
 8009a88:	00db      	lsls	r3, r3, #3
 8009a8a:	440b      	add	r3, r1
 8009a8c:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8009a90:	681b      	ldr	r3, [r3, #0]
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	370c      	adds	r7, #12
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr

08009a9e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b086      	sub	sp, #24
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	60f8      	str	r0, [r7, #12]
 8009aa6:	607a      	str	r2, [r7, #4]
 8009aa8:	603b      	str	r3, [r7, #0]
 8009aaa:	460b      	mov	r3, r1
 8009aac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009aae:	7afb      	ldrb	r3, [r7, #11]
 8009ab0:	f003 0207 	and.w	r2, r3, #7
 8009ab4:	4613      	mov	r3, r2
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	4413      	add	r3, r2
 8009aba:	00db      	lsls	r3, r3, #3
 8009abc:	3310      	adds	r3, #16
 8009abe:	68fa      	ldr	r2, [r7, #12]
 8009ac0:	4413      	add	r3, r2
 8009ac2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	683a      	ldr	r2, [r7, #0]
 8009ace:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	683a      	ldr	r2, [r7, #0]
 8009adc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009aea:	7afb      	ldrb	r3, [r7, #11]
 8009aec:	f003 0307 	and.w	r3, r3, #7
 8009af0:	b2da      	uxtb	r2, r3
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	6979      	ldr	r1, [r7, #20]
 8009afc:	4618      	mov	r0, r3
 8009afe:	f006 ff96 	bl	8010a2e <USB_EPStartXfer>

  return HAL_OK;
 8009b02:	2300      	movs	r3, #0
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3718      	adds	r7, #24
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	460b      	mov	r3, r1
 8009b16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009b18:	78fb      	ldrb	r3, [r7, #3]
 8009b1a:	f003 0307 	and.w	r3, r3, #7
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	7912      	ldrb	r2, [r2, #4]
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d901      	bls.n	8009b2a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009b26:	2301      	movs	r3, #1
 8009b28:	e03e      	b.n	8009ba8 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009b2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	da0e      	bge.n	8009b50 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009b32:	78fb      	ldrb	r3, [r7, #3]
 8009b34:	f003 0207 	and.w	r2, r3, #7
 8009b38:	4613      	mov	r3, r2
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	4413      	add	r3, r2
 8009b3e:	00db      	lsls	r3, r3, #3
 8009b40:	3310      	adds	r3, #16
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	4413      	add	r3, r2
 8009b46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	705a      	strb	r2, [r3, #1]
 8009b4e:	e00c      	b.n	8009b6a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009b50:	78fa      	ldrb	r2, [r7, #3]
 8009b52:	4613      	mov	r3, r2
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	4413      	add	r3, r2
 8009b58:	00db      	lsls	r3, r3, #3
 8009b5a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	4413      	add	r3, r2
 8009b62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2200      	movs	r2, #0
 8009b68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009b70:	78fb      	ldrb	r3, [r7, #3]
 8009b72:	f003 0307 	and.w	r3, r3, #7
 8009b76:	b2da      	uxtb	r2, r3
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d101      	bne.n	8009b8a <HAL_PCD_EP_SetStall+0x7e>
 8009b86:	2302      	movs	r3, #2
 8009b88:	e00e      	b.n	8009ba8 <HAL_PCD_EP_SetStall+0x9c>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	68f9      	ldr	r1, [r7, #12]
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f007 fcf7 	bl	801158c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8009ba6:	2300      	movs	r3, #0
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3710      	adds	r7, #16
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	460b      	mov	r3, r1
 8009bba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009bbc:	78fb      	ldrb	r3, [r7, #3]
 8009bbe:	f003 030f 	and.w	r3, r3, #15
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	7912      	ldrb	r2, [r2, #4]
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d901      	bls.n	8009bce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e040      	b.n	8009c50 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009bce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	da0e      	bge.n	8009bf4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009bd6:	78fb      	ldrb	r3, [r7, #3]
 8009bd8:	f003 0207 	and.w	r2, r3, #7
 8009bdc:	4613      	mov	r3, r2
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	4413      	add	r3, r2
 8009be2:	00db      	lsls	r3, r3, #3
 8009be4:	3310      	adds	r3, #16
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	4413      	add	r3, r2
 8009bea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	705a      	strb	r2, [r3, #1]
 8009bf2:	e00e      	b.n	8009c12 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009bf4:	78fb      	ldrb	r3, [r7, #3]
 8009bf6:	f003 0207 	and.w	r2, r3, #7
 8009bfa:	4613      	mov	r3, r2
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	4413      	add	r3, r2
 8009c00:	00db      	lsls	r3, r3, #3
 8009c02:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	4413      	add	r3, r2
 8009c0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2200      	movs	r2, #0
 8009c16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009c18:	78fb      	ldrb	r3, [r7, #3]
 8009c1a:	f003 0307 	and.w	r3, r3, #7
 8009c1e:	b2da      	uxtb	r2, r3
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d101      	bne.n	8009c32 <HAL_PCD_EP_ClrStall+0x82>
 8009c2e:	2302      	movs	r3, #2
 8009c30:	e00e      	b.n	8009c50 <HAL_PCD_EP_ClrStall+0xa0>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2201      	movs	r2, #1
 8009c36:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	68f9      	ldr	r1, [r7, #12]
 8009c40:	4618      	mov	r0, r3
 8009c42:	f007 fcf4 	bl	801162e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3710      	adds	r7, #16
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b092      	sub	sp, #72	@ 0x48
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009c60:	e333      	b.n	800a2ca <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009c6a:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8009c6c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	f003 030f 	and.w	r3, r3, #15
 8009c74:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8009c78:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f040 8108 	bne.w	8009e92 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8009c82:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009c84:	f003 0310 	and.w	r3, r3, #16
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d14c      	bne.n	8009d26 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	881b      	ldrh	r3, [r3, #0]
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8009c98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c9c:	813b      	strh	r3, [r7, #8]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	893b      	ldrh	r3, [r7, #8]
 8009ca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	3310      	adds	r3, #16
 8009cb4:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	00db      	lsls	r3, r3, #3
 8009cc8:	4413      	add	r3, r2
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	6812      	ldr	r2, [r2, #0]
 8009cce:	4413      	add	r3, r2
 8009cd0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009cd4:	881b      	ldrh	r3, [r3, #0]
 8009cd6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009cda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009cdc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8009cde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ce0:	695a      	ldr	r2, [r3, #20]
 8009ce2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ce4:	69db      	ldr	r3, [r3, #28]
 8009ce6:	441a      	add	r2, r3
 8009ce8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009cea:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8009cec:	2100      	movs	r1, #0
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f00e f9ef 	bl	80180d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	7b1b      	ldrb	r3, [r3, #12]
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	f000 82e5 	beq.w	800a2ca <PCD_EP_ISR_Handler+0x672>
 8009d00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d02:	699b      	ldr	r3, [r3, #24]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	f040 82e0 	bne.w	800a2ca <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	7b1b      	ldrb	r3, [r3, #12]
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009d14:	b2da      	uxtb	r2, r3
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	731a      	strb	r2, [r3, #12]
 8009d24:	e2d1      	b.n	800a2ca <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009d2c:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	881b      	ldrh	r3, [r3, #0]
 8009d34:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8009d36:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009d38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d032      	beq.n	8009da6 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	00db      	lsls	r3, r3, #3
 8009d52:	4413      	add	r3, r2
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	6812      	ldr	r2, [r2, #0]
 8009d58:	4413      	add	r3, r2
 8009d5a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009d5e:	881b      	ldrh	r3, [r3, #0]
 8009d60:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009d64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d66:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6818      	ldr	r0, [r3, #0]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8009d72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d74:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8009d76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d78:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	f007 fd7e 	bl	801187c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	881b      	ldrh	r3, [r3, #0]
 8009d86:	b29a      	uxth	r2, r3
 8009d88:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8009d8c:	4013      	ands	r3, r2
 8009d8e:	817b      	strh	r3, [r7, #10]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	897a      	ldrh	r2, [r7, #10]
 8009d96:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009d9a:	b292      	uxth	r2, r2
 8009d9c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f00e f96a 	bl	8018078 <HAL_PCD_SetupStageCallback>
 8009da4:	e291      	b.n	800a2ca <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009da6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	f280 828d 	bge.w	800a2ca <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	881b      	ldrh	r3, [r3, #0]
 8009db6:	b29a      	uxth	r2, r3
 8009db8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	81fb      	strh	r3, [r7, #14]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	89fa      	ldrh	r2, [r7, #14]
 8009dc6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009dca:	b292      	uxth	r2, r2
 8009dcc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	461a      	mov	r2, r3
 8009dda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	00db      	lsls	r3, r3, #3
 8009de0:	4413      	add	r3, r2
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	6812      	ldr	r2, [r2, #0]
 8009de6:	4413      	add	r3, r2
 8009de8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009dec:	881b      	ldrh	r3, [r3, #0]
 8009dee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009df2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009df4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8009df6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009df8:	69db      	ldr	r3, [r3, #28]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d019      	beq.n	8009e32 <PCD_EP_ISR_Handler+0x1da>
 8009dfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e00:	695b      	ldr	r3, [r3, #20]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d015      	beq.n	8009e32 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6818      	ldr	r0, [r3, #0]
 8009e0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e0c:	6959      	ldr	r1, [r3, #20]
 8009e0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e10:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8009e12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e14:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	f007 fd30 	bl	801187c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8009e1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e1e:	695a      	ldr	r2, [r3, #20]
 8009e20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e22:	69db      	ldr	r3, [r3, #28]
 8009e24:	441a      	add	r2, r3
 8009e26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e28:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8009e2a:	2100      	movs	r1, #0
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f00e f935 	bl	801809c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	881b      	ldrh	r3, [r3, #0]
 8009e38:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8009e3a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009e3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	f040 8242 	bne.w	800a2ca <PCD_EP_ISR_Handler+0x672>
 8009e46:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009e48:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009e4c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009e50:	f000 823b 	beq.w	800a2ca <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	881b      	ldrh	r3, [r3, #0]
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009e60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e64:	81bb      	strh	r3, [r7, #12]
 8009e66:	89bb      	ldrh	r3, [r7, #12]
 8009e68:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009e6c:	81bb      	strh	r3, [r7, #12]
 8009e6e:	89bb      	ldrh	r3, [r7, #12]
 8009e70:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009e74:	81bb      	strh	r3, [r7, #12]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681a      	ldr	r2, [r3, #0]
 8009e7a:	89bb      	ldrh	r3, [r7, #12]
 8009e7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	8013      	strh	r3, [r2, #0]
 8009e90:	e21b      	b.n	800a2ca <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	461a      	mov	r2, r3
 8009e98:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	4413      	add	r3, r2
 8009ea0:	881b      	ldrh	r3, [r3, #0]
 8009ea2:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009ea4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	f280 80f1 	bge.w	800a090 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	4413      	add	r3, r2
 8009ebc:	881b      	ldrh	r3, [r3, #0]
 8009ebe:	b29a      	uxth	r2, r3
 8009ec0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8009ec4:	4013      	ands	r3, r2
 8009ec6:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	461a      	mov	r2, r3
 8009ece:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	4413      	add	r3, r2
 8009ed6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8009ed8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009edc:	b292      	uxth	r2, r2
 8009ede:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8009ee0:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8009ee4:	4613      	mov	r3, r2
 8009ee6:	009b      	lsls	r3, r3, #2
 8009ee8:	4413      	add	r3, r2
 8009eea:	00db      	lsls	r3, r3, #3
 8009eec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	4413      	add	r3, r2
 8009ef4:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8009ef6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ef8:	7b1b      	ldrb	r3, [r3, #12]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d123      	bne.n	8009f46 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	461a      	mov	r2, r3
 8009f0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	00db      	lsls	r3, r3, #3
 8009f10:	4413      	add	r3, r2
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	6812      	ldr	r2, [r2, #0]
 8009f16:	4413      	add	r3, r2
 8009f18:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009f1c:	881b      	ldrh	r3, [r3, #0]
 8009f1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f22:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8009f26:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	f000 808b 	beq.w	800a046 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6818      	ldr	r0, [r3, #0]
 8009f34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f36:	6959      	ldr	r1, [r3, #20]
 8009f38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f3a:	88da      	ldrh	r2, [r3, #6]
 8009f3c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009f40:	f007 fc9c 	bl	801187c <USB_ReadPMA>
 8009f44:	e07f      	b.n	800a046 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8009f46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f48:	78db      	ldrb	r3, [r3, #3]
 8009f4a:	2b02      	cmp	r3, #2
 8009f4c:	d109      	bne.n	8009f62 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8009f4e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009f50:	461a      	mov	r2, r3
 8009f52:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 f9c6 	bl	800a2e6 <HAL_PCD_EP_DB_Receive>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8009f60:	e071      	b.n	800a046 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	461a      	mov	r2, r3
 8009f68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	4413      	add	r3, r2
 8009f70:	881b      	ldrh	r3, [r3, #0]
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f7c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	461a      	mov	r2, r3
 8009f84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	441a      	add	r2, r3
 8009f8c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009f8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f9a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	4413      	add	r3, r2
 8009fb0:	881b      	ldrh	r3, [r3, #0]
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d022      	beq.n	800a002 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	00db      	lsls	r3, r3, #3
 8009fce:	4413      	add	r3, r2
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	6812      	ldr	r2, [r2, #0]
 8009fd4:	4413      	add	r3, r2
 8009fd6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009fda:	881b      	ldrh	r3, [r3, #0]
 8009fdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009fe0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8009fe4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d02c      	beq.n	800a046 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6818      	ldr	r0, [r3, #0]
 8009ff0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ff2:	6959      	ldr	r1, [r3, #20]
 8009ff4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ff6:	891a      	ldrh	r2, [r3, #8]
 8009ff8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009ffc:	f007 fc3e 	bl	801187c <USB_ReadPMA>
 800a000:	e021      	b.n	800a046 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	461a      	mov	r2, r3
 800a00e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	00db      	lsls	r3, r3, #3
 800a014:	4413      	add	r3, r2
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	6812      	ldr	r2, [r2, #0]
 800a01a:	4413      	add	r3, r2
 800a01c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a020:	881b      	ldrh	r3, [r3, #0]
 800a022:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a026:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800a02a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d009      	beq.n	800a046 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6818      	ldr	r0, [r3, #0]
 800a036:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a038:	6959      	ldr	r1, [r3, #20]
 800a03a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a03c:	895a      	ldrh	r2, [r3, #10]
 800a03e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a042:	f007 fc1b 	bl	801187c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800a046:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a048:	69da      	ldr	r2, [r3, #28]
 800a04a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a04e:	441a      	add	r2, r3
 800a050:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a052:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800a054:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a056:	695a      	ldr	r2, [r3, #20]
 800a058:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a05c:	441a      	add	r2, r3
 800a05e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a060:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800a062:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a064:	699b      	ldr	r3, [r3, #24]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d005      	beq.n	800a076 <PCD_EP_ISR_Handler+0x41e>
 800a06a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800a06e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a070:	691b      	ldr	r3, [r3, #16]
 800a072:	429a      	cmp	r2, r3
 800a074:	d206      	bcs.n	800a084 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800a076:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	4619      	mov	r1, r3
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f00e f80d 	bl	801809c <HAL_PCD_DataOutStageCallback>
 800a082:	e005      	b.n	800a090 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a08a:	4618      	mov	r0, r3
 800a08c:	f006 fccf 	bl	8010a2e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800a090:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a096:	2b00      	cmp	r3, #0
 800a098:	f000 8117 	beq.w	800a2ca <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800a09c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	009b      	lsls	r3, r3, #2
 800a0a4:	4413      	add	r3, r2
 800a0a6:	00db      	lsls	r3, r3, #3
 800a0a8:	3310      	adds	r3, #16
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	4413      	add	r3, r2
 800a0be:	881b      	ldrh	r3, [r3, #0]
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800a0c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0ca:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	441a      	add	r2, r3
 800a0da:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a0dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0e4:	b29b      	uxth	r3, r3
 800a0e6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800a0e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0ea:	78db      	ldrb	r3, [r3, #3]
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	f040 80a1 	bne.w	800a234 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800a0f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800a0f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0fa:	7b1b      	ldrb	r3, [r3, #12]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f000 8092 	beq.w	800a226 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a102:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d046      	beq.n	800a19a <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a10c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a10e:	785b      	ldrb	r3, [r3, #1]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d126      	bne.n	800a162 <PCD_EP_ISR_Handler+0x50a>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	617b      	str	r3, [r7, #20]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a122:	b29b      	uxth	r3, r3
 800a124:	461a      	mov	r2, r3
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	4413      	add	r3, r2
 800a12a:	617b      	str	r3, [r7, #20]
 800a12c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	00da      	lsls	r2, r3, #3
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	4413      	add	r3, r2
 800a136:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a13a:	613b      	str	r3, [r7, #16]
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	881b      	ldrh	r3, [r3, #0]
 800a140:	b29b      	uxth	r3, r3
 800a142:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a146:	b29a      	uxth	r2, r3
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	801a      	strh	r2, [r3, #0]
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	881b      	ldrh	r3, [r3, #0]
 800a150:	b29b      	uxth	r3, r3
 800a152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a15a:	b29a      	uxth	r2, r3
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	801a      	strh	r2, [r3, #0]
 800a160:	e061      	b.n	800a226 <PCD_EP_ISR_Handler+0x5ce>
 800a162:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a164:	785b      	ldrb	r3, [r3, #1]
 800a166:	2b01      	cmp	r3, #1
 800a168:	d15d      	bne.n	800a226 <PCD_EP_ISR_Handler+0x5ce>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	61fb      	str	r3, [r7, #28]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a178:	b29b      	uxth	r3, r3
 800a17a:	461a      	mov	r2, r3
 800a17c:	69fb      	ldr	r3, [r7, #28]
 800a17e:	4413      	add	r3, r2
 800a180:	61fb      	str	r3, [r7, #28]
 800a182:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	00da      	lsls	r2, r3, #3
 800a188:	69fb      	ldr	r3, [r7, #28]
 800a18a:	4413      	add	r3, r2
 800a18c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a190:	61bb      	str	r3, [r7, #24]
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	2200      	movs	r2, #0
 800a196:	801a      	strh	r2, [r3, #0]
 800a198:	e045      	b.n	800a226 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a1a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1a2:	785b      	ldrb	r3, [r3, #1]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d126      	bne.n	800a1f6 <PCD_EP_ISR_Handler+0x59e>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1bc:	4413      	add	r3, r2
 800a1be:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	00da      	lsls	r2, r3, #3
 800a1c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1c8:	4413      	add	r3, r2
 800a1ca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a1ce:	623b      	str	r3, [r7, #32]
 800a1d0:	6a3b      	ldr	r3, [r7, #32]
 800a1d2:	881b      	ldrh	r3, [r3, #0]
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a1da:	b29a      	uxth	r2, r3
 800a1dc:	6a3b      	ldr	r3, [r7, #32]
 800a1de:	801a      	strh	r2, [r3, #0]
 800a1e0:	6a3b      	ldr	r3, [r7, #32]
 800a1e2:	881b      	ldrh	r3, [r3, #0]
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1ee:	b29a      	uxth	r2, r3
 800a1f0:	6a3b      	ldr	r3, [r7, #32]
 800a1f2:	801a      	strh	r2, [r3, #0]
 800a1f4:	e017      	b.n	800a226 <PCD_EP_ISR_Handler+0x5ce>
 800a1f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1f8:	785b      	ldrb	r3, [r3, #1]
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d113      	bne.n	800a226 <PCD_EP_ISR_Handler+0x5ce>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a206:	b29b      	uxth	r3, r3
 800a208:	461a      	mov	r2, r3
 800a20a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a20c:	4413      	add	r3, r2
 800a20e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a210:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	00da      	lsls	r2, r3, #3
 800a216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a218:	4413      	add	r3, r2
 800a21a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a21e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a222:	2200      	movs	r2, #0
 800a224:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a226:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	4619      	mov	r1, r3
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f00d ff50 	bl	80180d2 <HAL_PCD_DataInStageCallback>
 800a232:	e04a      	b.n	800a2ca <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800a234:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d13f      	bne.n	800a2be <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a246:	b29b      	uxth	r3, r3
 800a248:	461a      	mov	r2, r3
 800a24a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a24c:	781b      	ldrb	r3, [r3, #0]
 800a24e:	00db      	lsls	r3, r3, #3
 800a250:	4413      	add	r3, r2
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	6812      	ldr	r2, [r2, #0]
 800a256:	4413      	add	r3, r2
 800a258:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a25c:	881b      	ldrh	r3, [r3, #0]
 800a25e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a262:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 800a264:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a266:	699a      	ldr	r2, [r3, #24]
 800a268:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d906      	bls.n	800a27c <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800a26e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a270:	699a      	ldr	r2, [r3, #24]
 800a272:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800a274:	1ad2      	subs	r2, r2, r3
 800a276:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a278:	619a      	str	r2, [r3, #24]
 800a27a:	e002      	b.n	800a282 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800a27c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a27e:	2200      	movs	r2, #0
 800a280:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800a282:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a284:	699b      	ldr	r3, [r3, #24]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d106      	bne.n	800a298 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a28a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	4619      	mov	r1, r3
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f00d ff1e 	bl	80180d2 <HAL_PCD_DataInStageCallback>
 800a296:	e018      	b.n	800a2ca <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800a298:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a29a:	695a      	ldr	r2, [r3, #20]
 800a29c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800a29e:	441a      	add	r2, r3
 800a2a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2a2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800a2a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2a6:	69da      	ldr	r2, [r3, #28]
 800a2a8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800a2aa:	441a      	add	r2, r3
 800a2ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2ae:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f006 fbb9 	bl	8010a2e <USB_EPStartXfer>
 800a2bc:	e005      	b.n	800a2ca <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800a2be:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 f917 	bl	800a4f8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	b21b      	sxth	r3, r3
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	f6ff acc3 	blt.w	8009c62 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800a2dc:	2300      	movs	r3, #0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3748      	adds	r7, #72	@ 0x48
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}

0800a2e6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a2e6:	b580      	push	{r7, lr}
 800a2e8:	b088      	sub	sp, #32
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	60f8      	str	r0, [r7, #12]
 800a2ee:	60b9      	str	r1, [r7, #8]
 800a2f0:	4613      	mov	r3, r2
 800a2f2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a2f4:	88fb      	ldrh	r3, [r7, #6]
 800a2f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d07c      	beq.n	800a3f8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a306:	b29b      	uxth	r3, r3
 800a308:	461a      	mov	r2, r3
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	00db      	lsls	r3, r3, #3
 800a310:	4413      	add	r3, r2
 800a312:	68fa      	ldr	r2, [r7, #12]
 800a314:	6812      	ldr	r2, [r2, #0]
 800a316:	4413      	add	r3, r2
 800a318:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a31c:	881b      	ldrh	r3, [r3, #0]
 800a31e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a322:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	699a      	ldr	r2, [r3, #24]
 800a328:	8b7b      	ldrh	r3, [r7, #26]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d306      	bcc.n	800a33c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	699a      	ldr	r2, [r3, #24]
 800a332:	8b7b      	ldrh	r3, [r7, #26]
 800a334:	1ad2      	subs	r2, r2, r3
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	619a      	str	r2, [r3, #24]
 800a33a:	e002      	b.n	800a342 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	2200      	movs	r2, #0
 800a340:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	699b      	ldr	r3, [r3, #24]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d123      	bne.n	800a392 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	461a      	mov	r2, r3
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	009b      	lsls	r3, r3, #2
 800a356:	4413      	add	r3, r2
 800a358:	881b      	ldrh	r3, [r3, #0]
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a360:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a364:	833b      	strh	r3, [r7, #24]
 800a366:	8b3b      	ldrh	r3, [r7, #24]
 800a368:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a36c:	833b      	strh	r3, [r7, #24]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	461a      	mov	r2, r3
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	009b      	lsls	r3, r3, #2
 800a37a:	441a      	add	r2, r3
 800a37c:	8b3b      	ldrh	r3, [r7, #24]
 800a37e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a382:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a386:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a38a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a38e:	b29b      	uxth	r3, r3
 800a390:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a392:	88fb      	ldrh	r3, [r7, #6]
 800a394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d01f      	beq.n	800a3dc <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	4413      	add	r3, r2
 800a3aa:	881b      	ldrh	r3, [r3, #0]
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3b6:	82fb      	strh	r3, [r7, #22]
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	461a      	mov	r2, r3
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	009b      	lsls	r3, r3, #2
 800a3c4:	441a      	add	r2, r3
 800a3c6:	8afb      	ldrh	r3, [r7, #22]
 800a3c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3d4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800a3dc:	8b7b      	ldrh	r3, [r7, #26]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	f000 8085 	beq.w	800a4ee <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	6818      	ldr	r0, [r3, #0]
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	6959      	ldr	r1, [r3, #20]
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	891a      	ldrh	r2, [r3, #8]
 800a3f0:	8b7b      	ldrh	r3, [r7, #26]
 800a3f2:	f007 fa43 	bl	801187c <USB_ReadPMA>
 800a3f6:	e07a      	b.n	800a4ee <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a400:	b29b      	uxth	r3, r3
 800a402:	461a      	mov	r2, r3
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	00db      	lsls	r3, r3, #3
 800a40a:	4413      	add	r3, r2
 800a40c:	68fa      	ldr	r2, [r7, #12]
 800a40e:	6812      	ldr	r2, [r2, #0]
 800a410:	4413      	add	r3, r2
 800a412:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a416:	881b      	ldrh	r3, [r3, #0]
 800a418:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a41c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	699a      	ldr	r2, [r3, #24]
 800a422:	8b7b      	ldrh	r3, [r7, #26]
 800a424:	429a      	cmp	r2, r3
 800a426:	d306      	bcc.n	800a436 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	699a      	ldr	r2, [r3, #24]
 800a42c:	8b7b      	ldrh	r3, [r7, #26]
 800a42e:	1ad2      	subs	r2, r2, r3
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	619a      	str	r2, [r3, #24]
 800a434:	e002      	b.n	800a43c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	2200      	movs	r2, #0
 800a43a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	699b      	ldr	r3, [r3, #24]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d123      	bne.n	800a48c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	461a      	mov	r2, r3
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	009b      	lsls	r3, r3, #2
 800a450:	4413      	add	r3, r2
 800a452:	881b      	ldrh	r3, [r3, #0]
 800a454:	b29b      	uxth	r3, r3
 800a456:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a45a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a45e:	83fb      	strh	r3, [r7, #30]
 800a460:	8bfb      	ldrh	r3, [r7, #30]
 800a462:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a466:	83fb      	strh	r3, [r7, #30]
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	461a      	mov	r2, r3
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	441a      	add	r2, r3
 800a476:	8bfb      	ldrh	r3, [r7, #30]
 800a478:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a47c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a480:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a484:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a488:	b29b      	uxth	r3, r3
 800a48a:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800a48c:	88fb      	ldrh	r3, [r7, #6]
 800a48e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a492:	2b00      	cmp	r3, #0
 800a494:	d11f      	bne.n	800a4d6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	461a      	mov	r2, r3
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	009b      	lsls	r3, r3, #2
 800a4a2:	4413      	add	r3, r2
 800a4a4:	881b      	ldrh	r3, [r3, #0]
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4b0:	83bb      	strh	r3, [r7, #28]
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	441a      	add	r2, r3
 800a4c0:	8bbb      	ldrh	r3, [r7, #28]
 800a4c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a4c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a4ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a4ce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a4d2:	b29b      	uxth	r3, r3
 800a4d4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800a4d6:	8b7b      	ldrh	r3, [r7, #26]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d008      	beq.n	800a4ee <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	6818      	ldr	r0, [r3, #0]
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	6959      	ldr	r1, [r3, #20]
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	895a      	ldrh	r2, [r3, #10]
 800a4e8:	8b7b      	ldrh	r3, [r7, #26]
 800a4ea:	f007 f9c7 	bl	801187c <USB_ReadPMA>
    }
  }

  return count;
 800a4ee:	8b7b      	ldrh	r3, [r7, #26]
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3720      	adds	r7, #32
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b0a6      	sub	sp, #152	@ 0x98
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	60b9      	str	r1, [r7, #8]
 800a502:	4613      	mov	r3, r2
 800a504:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a506:	88fb      	ldrh	r3, [r7, #6]
 800a508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	f000 81f7 	beq.w	800a900 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	461a      	mov	r2, r3
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	00db      	lsls	r3, r3, #3
 800a524:	4413      	add	r3, r2
 800a526:	68fa      	ldr	r2, [r7, #12]
 800a528:	6812      	ldr	r2, [r2, #0]
 800a52a:	4413      	add	r3, r2
 800a52c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a530:	881b      	ldrh	r3, [r3, #0]
 800a532:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a536:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	699a      	ldr	r2, [r3, #24]
 800a53e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a542:	429a      	cmp	r2, r3
 800a544:	d907      	bls.n	800a556 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	699a      	ldr	r2, [r3, #24]
 800a54a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a54e:	1ad2      	subs	r2, r2, r3
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	619a      	str	r2, [r3, #24]
 800a554:	e002      	b.n	800a55c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	2200      	movs	r2, #0
 800a55a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	699b      	ldr	r3, [r3, #24]
 800a560:	2b00      	cmp	r3, #0
 800a562:	f040 80e1 	bne.w	800a728 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	785b      	ldrb	r3, [r3, #1]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d126      	bne.n	800a5bc <HAL_PCD_EP_DB_Transmit+0xc4>
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	633b      	str	r3, [r7, #48]	@ 0x30
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	461a      	mov	r2, r3
 800a580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a582:	4413      	add	r3, r2
 800a584:	633b      	str	r3, [r7, #48]	@ 0x30
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	00da      	lsls	r2, r3, #3
 800a58c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a58e:	4413      	add	r3, r2
 800a590:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a594:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a598:	881b      	ldrh	r3, [r3, #0]
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a5a0:	b29a      	uxth	r2, r3
 800a5a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5a4:	801a      	strh	r2, [r3, #0]
 800a5a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5a8:	881b      	ldrh	r3, [r3, #0]
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5b4:	b29a      	uxth	r2, r3
 800a5b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5b8:	801a      	strh	r2, [r3, #0]
 800a5ba:	e01a      	b.n	800a5f2 <HAL_PCD_EP_DB_Transmit+0xfa>
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	785b      	ldrb	r3, [r3, #1]
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d116      	bne.n	800a5f2 <HAL_PCD_EP_DB_Transmit+0xfa>
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5d8:	4413      	add	r3, r2
 800a5da:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	00da      	lsls	r2, r3, #3
 800a5e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5e4:	4413      	add	r3, r2
 800a5e6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a5ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	785b      	ldrb	r3, [r3, #1]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d126      	bne.n	800a64e <HAL_PCD_EP_DB_Transmit+0x156>
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	623b      	str	r3, [r7, #32]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a60e:	b29b      	uxth	r3, r3
 800a610:	461a      	mov	r2, r3
 800a612:	6a3b      	ldr	r3, [r7, #32]
 800a614:	4413      	add	r3, r2
 800a616:	623b      	str	r3, [r7, #32]
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	00da      	lsls	r2, r3, #3
 800a61e:	6a3b      	ldr	r3, [r7, #32]
 800a620:	4413      	add	r3, r2
 800a622:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a626:	61fb      	str	r3, [r7, #28]
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	881b      	ldrh	r3, [r3, #0]
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a632:	b29a      	uxth	r2, r3
 800a634:	69fb      	ldr	r3, [r7, #28]
 800a636:	801a      	strh	r2, [r3, #0]
 800a638:	69fb      	ldr	r3, [r7, #28]
 800a63a:	881b      	ldrh	r3, [r3, #0]
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a642:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a646:	b29a      	uxth	r2, r3
 800a648:	69fb      	ldr	r3, [r7, #28]
 800a64a:	801a      	strh	r2, [r3, #0]
 800a64c:	e017      	b.n	800a67e <HAL_PCD_EP_DB_Transmit+0x186>
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	785b      	ldrb	r3, [r3, #1]
 800a652:	2b01      	cmp	r3, #1
 800a654:	d113      	bne.n	800a67e <HAL_PCD_EP_DB_Transmit+0x186>
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a65e:	b29b      	uxth	r3, r3
 800a660:	461a      	mov	r2, r3
 800a662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a664:	4413      	add	r3, r2
 800a666:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	00da      	lsls	r2, r3, #3
 800a66e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a670:	4413      	add	r3, r2
 800a672:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a676:	627b      	str	r3, [r7, #36]	@ 0x24
 800a678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a67a:	2200      	movs	r2, #0
 800a67c:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	78db      	ldrb	r3, [r3, #3]
 800a682:	2b02      	cmp	r3, #2
 800a684:	d123      	bne.n	800a6ce <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	461a      	mov	r2, r3
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	781b      	ldrb	r3, [r3, #0]
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	4413      	add	r3, r2
 800a694:	881b      	ldrh	r3, [r3, #0]
 800a696:	b29b      	uxth	r3, r3
 800a698:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a69c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a6a0:	837b      	strh	r3, [r7, #26]
 800a6a2:	8b7b      	ldrh	r3, [r7, #26]
 800a6a4:	f083 0320 	eor.w	r3, r3, #32
 800a6a8:	837b      	strh	r3, [r7, #26]
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	009b      	lsls	r3, r3, #2
 800a6b6:	441a      	add	r2, r3
 800a6b8:	8b7b      	ldrh	r3, [r7, #26]
 800a6ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a6be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a6c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a6c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	68f8      	ldr	r0, [r7, #12]
 800a6d6:	f00d fcfc 	bl	80180d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a6da:	88fb      	ldrh	r3, [r7, #6]
 800a6dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d01f      	beq.n	800a724 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	009b      	lsls	r3, r3, #2
 800a6f0:	4413      	add	r3, r2
 800a6f2:	881b      	ldrh	r3, [r3, #0]
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a6fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6fe:	833b      	strh	r3, [r7, #24]
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	461a      	mov	r2, r3
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	781b      	ldrb	r3, [r3, #0]
 800a70a:	009b      	lsls	r3, r3, #2
 800a70c:	441a      	add	r2, r3
 800a70e:	8b3b      	ldrh	r3, [r7, #24]
 800a710:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a714:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a718:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a71c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a720:	b29b      	uxth	r3, r3
 800a722:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800a724:	2300      	movs	r3, #0
 800a726:	e31f      	b.n	800ad68 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a728:	88fb      	ldrh	r3, [r7, #6]
 800a72a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d021      	beq.n	800a776 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	461a      	mov	r2, r3
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	009b      	lsls	r3, r3, #2
 800a73e:	4413      	add	r3, r2
 800a740:	881b      	ldrh	r3, [r3, #0]
 800a742:	b29b      	uxth	r3, r3
 800a744:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a748:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a74c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	461a      	mov	r2, r3
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	009b      	lsls	r3, r3, #2
 800a75c:	441a      	add	r2, r3
 800a75e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a762:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a766:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a76a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a76e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a772:	b29b      	uxth	r3, r3
 800a774:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	f040 82ca 	bne.w	800ad16 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	695a      	ldr	r2, [r3, #20]
 800a786:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a78a:	441a      	add	r2, r3
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	69da      	ldr	r2, [r3, #28]
 800a794:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a798:	441a      	add	r2, r3
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	6a1a      	ldr	r2, [r3, #32]
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	691b      	ldr	r3, [r3, #16]
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	d309      	bcc.n	800a7be <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	691b      	ldr	r3, [r3, #16]
 800a7ae:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	6a1a      	ldr	r2, [r3, #32]
 800a7b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a7b6:	1ad2      	subs	r2, r2, r3
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	621a      	str	r2, [r3, #32]
 800a7bc:	e015      	b.n	800a7ea <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	6a1b      	ldr	r3, [r3, #32]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d107      	bne.n	800a7d6 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 800a7c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a7ca:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800a7d4:	e009      	b.n	800a7ea <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	6a1b      	ldr	r3, [r3, #32]
 800a7e2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	785b      	ldrb	r3, [r3, #1]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d15f      	bne.n	800a8b2 <HAL_PCD_EP_DB_Transmit+0x3ba>
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	643b      	str	r3, [r7, #64]	@ 0x40
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a800:	b29b      	uxth	r3, r3
 800a802:	461a      	mov	r2, r3
 800a804:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a806:	4413      	add	r3, r2
 800a808:	643b      	str	r3, [r7, #64]	@ 0x40
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	00da      	lsls	r2, r3, #3
 800a810:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a812:	4413      	add	r3, r2
 800a814:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a818:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a81a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a81c:	881b      	ldrh	r3, [r3, #0]
 800a81e:	b29b      	uxth	r3, r3
 800a820:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a824:	b29a      	uxth	r2, r3
 800a826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a828:	801a      	strh	r2, [r3, #0]
 800a82a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d10a      	bne.n	800a846 <HAL_PCD_EP_DB_Transmit+0x34e>
 800a830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a832:	881b      	ldrh	r3, [r3, #0]
 800a834:	b29b      	uxth	r3, r3
 800a836:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a83a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a83e:	b29a      	uxth	r2, r3
 800a840:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a842:	801a      	strh	r2, [r3, #0]
 800a844:	e051      	b.n	800a8ea <HAL_PCD_EP_DB_Transmit+0x3f2>
 800a846:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a848:	2b3e      	cmp	r3, #62	@ 0x3e
 800a84a:	d816      	bhi.n	800a87a <HAL_PCD_EP_DB_Transmit+0x382>
 800a84c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a84e:	085b      	lsrs	r3, r3, #1
 800a850:	653b      	str	r3, [r7, #80]	@ 0x50
 800a852:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a854:	f003 0301 	and.w	r3, r3, #1
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d002      	beq.n	800a862 <HAL_PCD_EP_DB_Transmit+0x36a>
 800a85c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a85e:	3301      	adds	r3, #1
 800a860:	653b      	str	r3, [r7, #80]	@ 0x50
 800a862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a864:	881b      	ldrh	r3, [r3, #0]
 800a866:	b29a      	uxth	r2, r3
 800a868:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	029b      	lsls	r3, r3, #10
 800a86e:	b29b      	uxth	r3, r3
 800a870:	4313      	orrs	r3, r2
 800a872:	b29a      	uxth	r2, r3
 800a874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a876:	801a      	strh	r2, [r3, #0]
 800a878:	e037      	b.n	800a8ea <HAL_PCD_EP_DB_Transmit+0x3f2>
 800a87a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a87c:	095b      	lsrs	r3, r3, #5
 800a87e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a880:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a882:	f003 031f 	and.w	r3, r3, #31
 800a886:	2b00      	cmp	r3, #0
 800a888:	d102      	bne.n	800a890 <HAL_PCD_EP_DB_Transmit+0x398>
 800a88a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a88c:	3b01      	subs	r3, #1
 800a88e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a890:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a892:	881b      	ldrh	r3, [r3, #0]
 800a894:	b29a      	uxth	r2, r3
 800a896:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a898:	b29b      	uxth	r3, r3
 800a89a:	029b      	lsls	r3, r3, #10
 800a89c:	b29b      	uxth	r3, r3
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8aa:	b29a      	uxth	r2, r3
 800a8ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8ae:	801a      	strh	r2, [r3, #0]
 800a8b0:	e01b      	b.n	800a8ea <HAL_PCD_EP_DB_Transmit+0x3f2>
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	785b      	ldrb	r3, [r3, #1]
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d117      	bne.n	800a8ea <HAL_PCD_EP_DB_Transmit+0x3f2>
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8ce:	4413      	add	r3, r2
 800a8d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	00da      	lsls	r2, r3, #3
 800a8d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8da:	4413      	add	r3, r2
 800a8dc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a8e0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a8e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a8e4:	b29a      	uxth	r2, r3
 800a8e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8e8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	6818      	ldr	r0, [r3, #0]
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	6959      	ldr	r1, [r3, #20]
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	891a      	ldrh	r2, [r3, #8]
 800a8f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	f006 ff7c 	bl	80117f6 <USB_WritePMA>
 800a8fe:	e20a      	b.n	800ad16 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a908:	b29b      	uxth	r3, r3
 800a90a:	461a      	mov	r2, r3
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	781b      	ldrb	r3, [r3, #0]
 800a910:	00db      	lsls	r3, r3, #3
 800a912:	4413      	add	r3, r2
 800a914:	68fa      	ldr	r2, [r7, #12]
 800a916:	6812      	ldr	r2, [r2, #0]
 800a918:	4413      	add	r3, r2
 800a91a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a91e:	881b      	ldrh	r3, [r3, #0]
 800a920:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a924:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	699a      	ldr	r2, [r3, #24]
 800a92c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a930:	429a      	cmp	r2, r3
 800a932:	d307      	bcc.n	800a944 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	699a      	ldr	r2, [r3, #24]
 800a938:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a93c:	1ad2      	subs	r2, r2, r3
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	619a      	str	r2, [r3, #24]
 800a942:	e002      	b.n	800a94a <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	2200      	movs	r2, #0
 800a948:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	699b      	ldr	r3, [r3, #24]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	f040 80f6 	bne.w	800ab40 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	785b      	ldrb	r3, [r3, #1]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d126      	bne.n	800a9aa <HAL_PCD_EP_DB_Transmit+0x4b2>
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	677b      	str	r3, [r7, #116]	@ 0x74
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	461a      	mov	r2, r3
 800a96e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a970:	4413      	add	r3, r2
 800a972:	677b      	str	r3, [r7, #116]	@ 0x74
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	00da      	lsls	r2, r3, #3
 800a97a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a97c:	4413      	add	r3, r2
 800a97e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a982:	673b      	str	r3, [r7, #112]	@ 0x70
 800a984:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a986:	881b      	ldrh	r3, [r3, #0]
 800a988:	b29b      	uxth	r3, r3
 800a98a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a98e:	b29a      	uxth	r2, r3
 800a990:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a992:	801a      	strh	r2, [r3, #0]
 800a994:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a996:	881b      	ldrh	r3, [r3, #0]
 800a998:	b29b      	uxth	r3, r3
 800a99a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a99e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9a2:	b29a      	uxth	r2, r3
 800a9a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a9a6:	801a      	strh	r2, [r3, #0]
 800a9a8:	e01a      	b.n	800a9e0 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	785b      	ldrb	r3, [r3, #1]
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	d116      	bne.n	800a9e0 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a9c6:	4413      	add	r3, r2
 800a9c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	781b      	ldrb	r3, [r3, #0]
 800a9ce:	00da      	lsls	r2, r3, #3
 800a9d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a9d2:	4413      	add	r3, r2
 800a9d4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a9d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a9da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a9dc:	2200      	movs	r2, #0
 800a9de:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	785b      	ldrb	r3, [r3, #1]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d12f      	bne.n	800aa50 <HAL_PCD_EP_DB_Transmit+0x558>
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	461a      	mov	r2, r3
 800aa04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800aa08:	4413      	add	r3, r2
 800aa0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	00da      	lsls	r2, r3, #3
 800aa14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800aa18:	4413      	add	r3, r2
 800aa1a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aa1e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800aa22:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800aa26:	881b      	ldrh	r3, [r3, #0]
 800aa28:	b29b      	uxth	r3, r3
 800aa2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa2e:	b29a      	uxth	r2, r3
 800aa30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800aa34:	801a      	strh	r2, [r3, #0]
 800aa36:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800aa3a:	881b      	ldrh	r3, [r3, #0]
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa46:	b29a      	uxth	r2, r3
 800aa48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800aa4c:	801a      	strh	r2, [r3, #0]
 800aa4e:	e01c      	b.n	800aa8a <HAL_PCD_EP_DB_Transmit+0x592>
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	785b      	ldrb	r3, [r3, #1]
 800aa54:	2b01      	cmp	r3, #1
 800aa56:	d118      	bne.n	800aa8a <HAL_PCD_EP_DB_Transmit+0x592>
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	461a      	mov	r2, r3
 800aa64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aa68:	4413      	add	r3, r2
 800aa6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	00da      	lsls	r2, r3, #3
 800aa74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aa78:	4413      	add	r3, r2
 800aa7a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aa7e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800aa82:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800aa86:	2200      	movs	r2, #0
 800aa88:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	78db      	ldrb	r3, [r3, #3]
 800aa8e:	2b02      	cmp	r3, #2
 800aa90:	d127      	bne.n	800aae2 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	461a      	mov	r2, r3
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	4413      	add	r3, r2
 800aaa0:	881b      	ldrh	r3, [r3, #0]
 800aaa2:	b29b      	uxth	r3, r3
 800aaa4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aaa8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aaac:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800aab0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800aab4:	f083 0320 	eor.w	r3, r3, #32
 800aab8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	461a      	mov	r2, r3
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	009b      	lsls	r3, r3, #2
 800aac8:	441a      	add	r2, r3
 800aaca:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800aace:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aad2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aad6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aada:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aade:	b29b      	uxth	r3, r3
 800aae0:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	4619      	mov	r1, r3
 800aae8:	68f8      	ldr	r0, [r7, #12]
 800aaea:	f00d faf2 	bl	80180d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800aaee:	88fb      	ldrh	r3, [r7, #6]
 800aaf0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d121      	bne.n	800ab3c <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	461a      	mov	r2, r3
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	009b      	lsls	r3, r3, #2
 800ab04:	4413      	add	r3, r2
 800ab06:	881b      	ldrh	r3, [r3, #0]
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab12:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	441a      	add	r2, r3
 800ab24:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800ab28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ab34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	e113      	b.n	800ad68 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800ab40:	88fb      	ldrh	r3, [r7, #6]
 800ab42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d121      	bne.n	800ab8e <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	461a      	mov	r2, r3
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	4413      	add	r3, r2
 800ab58:	881b      	ldrh	r3, [r3, #0]
 800ab5a:	b29b      	uxth	r3, r3
 800ab5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab64:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	441a      	add	r2, r3
 800ab76:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ab7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab82:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ab86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	f040 80be 	bne.w	800ad16 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	695a      	ldr	r2, [r3, #20]
 800ab9e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800aba2:	441a      	add	r2, r3
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	69da      	ldr	r2, [r3, #28]
 800abac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800abb0:	441a      	add	r2, r3
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	6a1a      	ldr	r2, [r3, #32]
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	691b      	ldr	r3, [r3, #16]
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d309      	bcc.n	800abd6 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	691b      	ldr	r3, [r3, #16]
 800abc6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	6a1a      	ldr	r2, [r3, #32]
 800abcc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800abce:	1ad2      	subs	r2, r2, r3
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	621a      	str	r2, [r3, #32]
 800abd4:	e015      	b.n	800ac02 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	6a1b      	ldr	r3, [r3, #32]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d107      	bne.n	800abee <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800abde:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800abe2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	2200      	movs	r2, #0
 800abe8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800abec:	e009      	b.n	800ac02 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	6a1b      	ldr	r3, [r3, #32]
 800abf2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	2200      	movs	r2, #0
 800abf8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	2200      	movs	r2, #0
 800abfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	785b      	ldrb	r3, [r3, #1]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d15f      	bne.n	800acd0 <HAL_PCD_EP_DB_Transmit+0x7d8>
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	461a      	mov	r2, r3
 800ac22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ac24:	4413      	add	r3, r2
 800ac26:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	00da      	lsls	r2, r3, #3
 800ac2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ac30:	4413      	add	r3, r2
 800ac32:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ac36:	667b      	str	r3, [r7, #100]	@ 0x64
 800ac38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac3a:	881b      	ldrh	r3, [r3, #0]
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac42:	b29a      	uxth	r2, r3
 800ac44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac46:	801a      	strh	r2, [r3, #0]
 800ac48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d10a      	bne.n	800ac64 <HAL_PCD_EP_DB_Transmit+0x76c>
 800ac4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac50:	881b      	ldrh	r3, [r3, #0]
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac5c:	b29a      	uxth	r2, r3
 800ac5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac60:	801a      	strh	r2, [r3, #0]
 800ac62:	e04e      	b.n	800ad02 <HAL_PCD_EP_DB_Transmit+0x80a>
 800ac64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ac66:	2b3e      	cmp	r3, #62	@ 0x3e
 800ac68:	d816      	bhi.n	800ac98 <HAL_PCD_EP_DB_Transmit+0x7a0>
 800ac6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ac6c:	085b      	lsrs	r3, r3, #1
 800ac6e:	663b      	str	r3, [r7, #96]	@ 0x60
 800ac70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ac72:	f003 0301 	and.w	r3, r3, #1
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d002      	beq.n	800ac80 <HAL_PCD_EP_DB_Transmit+0x788>
 800ac7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	663b      	str	r3, [r7, #96]	@ 0x60
 800ac80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac82:	881b      	ldrh	r3, [r3, #0]
 800ac84:	b29a      	uxth	r2, r3
 800ac86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	029b      	lsls	r3, r3, #10
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	b29a      	uxth	r2, r3
 800ac92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac94:	801a      	strh	r2, [r3, #0]
 800ac96:	e034      	b.n	800ad02 <HAL_PCD_EP_DB_Transmit+0x80a>
 800ac98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ac9a:	095b      	lsrs	r3, r3, #5
 800ac9c:	663b      	str	r3, [r7, #96]	@ 0x60
 800ac9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aca0:	f003 031f 	and.w	r3, r3, #31
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d102      	bne.n	800acae <HAL_PCD_EP_DB_Transmit+0x7b6>
 800aca8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800acaa:	3b01      	subs	r3, #1
 800acac:	663b      	str	r3, [r7, #96]	@ 0x60
 800acae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800acb0:	881b      	ldrh	r3, [r3, #0]
 800acb2:	b29a      	uxth	r2, r3
 800acb4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	029b      	lsls	r3, r3, #10
 800acba:	b29b      	uxth	r3, r3
 800acbc:	4313      	orrs	r3, r2
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acc8:	b29a      	uxth	r2, r3
 800acca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800accc:	801a      	strh	r2, [r3, #0]
 800acce:	e018      	b.n	800ad02 <HAL_PCD_EP_DB_Transmit+0x80a>
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	785b      	ldrb	r3, [r3, #1]
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d114      	bne.n	800ad02 <HAL_PCD_EP_DB_Transmit+0x80a>
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	461a      	mov	r2, r3
 800ace4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ace6:	4413      	add	r3, r2
 800ace8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	00da      	lsls	r2, r3, #3
 800acf0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800acf2:	4413      	add	r3, r2
 800acf4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800acf8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800acfa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800acfc:	b29a      	uxth	r2, r3
 800acfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad00:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	6818      	ldr	r0, [r3, #0]
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	6959      	ldr	r1, [r3, #20]
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	895a      	ldrh	r2, [r3, #10]
 800ad0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	f006 fd70 	bl	80117f6 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	009b      	lsls	r3, r3, #2
 800ad22:	4413      	add	r3, r2
 800ad24:	881b      	ldrh	r3, [r3, #0]
 800ad26:	b29b      	uxth	r3, r3
 800ad28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad30:	82fb      	strh	r3, [r7, #22]
 800ad32:	8afb      	ldrh	r3, [r7, #22]
 800ad34:	f083 0310 	eor.w	r3, r3, #16
 800ad38:	82fb      	strh	r3, [r7, #22]
 800ad3a:	8afb      	ldrh	r3, [r7, #22]
 800ad3c:	f083 0320 	eor.w	r3, r3, #32
 800ad40:	82fb      	strh	r3, [r7, #22]
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	461a      	mov	r2, r3
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	009b      	lsls	r3, r3, #2
 800ad4e:	441a      	add	r2, r3
 800ad50:	8afb      	ldrh	r3, [r7, #22]
 800ad52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad62:	b29b      	uxth	r3, r3
 800ad64:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800ad66:	2300      	movs	r3, #0
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3798      	adds	r7, #152	@ 0x98
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b087      	sub	sp, #28
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	60f8      	str	r0, [r7, #12]
 800ad78:	607b      	str	r3, [r7, #4]
 800ad7a:	460b      	mov	r3, r1
 800ad7c:	817b      	strh	r3, [r7, #10]
 800ad7e:	4613      	mov	r3, r2
 800ad80:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800ad82:	897b      	ldrh	r3, [r7, #10]
 800ad84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad88:	b29b      	uxth	r3, r3
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d00b      	beq.n	800ada6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ad8e:	897b      	ldrh	r3, [r7, #10]
 800ad90:	f003 0207 	and.w	r2, r3, #7
 800ad94:	4613      	mov	r3, r2
 800ad96:	009b      	lsls	r3, r3, #2
 800ad98:	4413      	add	r3, r2
 800ad9a:	00db      	lsls	r3, r3, #3
 800ad9c:	3310      	adds	r3, #16
 800ad9e:	68fa      	ldr	r2, [r7, #12]
 800ada0:	4413      	add	r3, r2
 800ada2:	617b      	str	r3, [r7, #20]
 800ada4:	e009      	b.n	800adba <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ada6:	897a      	ldrh	r2, [r7, #10]
 800ada8:	4613      	mov	r3, r2
 800adaa:	009b      	lsls	r3, r3, #2
 800adac:	4413      	add	r3, r2
 800adae:	00db      	lsls	r3, r3, #3
 800adb0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800adb4:	68fa      	ldr	r2, [r7, #12]
 800adb6:	4413      	add	r3, r2
 800adb8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800adba:	893b      	ldrh	r3, [r7, #8]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d107      	bne.n	800add0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	2200      	movs	r2, #0
 800adc4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	b29a      	uxth	r2, r3
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	80da      	strh	r2, [r3, #6]
 800adce:	e00b      	b.n	800ade8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	2201      	movs	r2, #1
 800add4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	b29a      	uxth	r2, r3
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	0c1b      	lsrs	r3, r3, #16
 800ade2:	b29a      	uxth	r2, r3
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800ade8:	2300      	movs	r3, #0
}
 800adea:	4618      	mov	r0, r3
 800adec:	371c      	adds	r7, #28
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr

0800adf6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800adf6:	b480      	push	{r7}
 800adf8:	b085      	sub	sp, #20
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2201      	movs	r2, #1
 800ae08:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800ae1a:	b29b      	uxth	r3, r3
 800ae1c:	f043 0301 	orr.w	r3, r3, #1
 800ae20:	b29a      	uxth	r2, r3
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	f043 0302 	orr.w	r3, r3, #2
 800ae34:	b29a      	uxth	r2, r3
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800ae3c:	2300      	movs	r3, #0
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3714      	adds	r7, #20
 800ae42:	46bd      	mov	sp, r7
 800ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae48:	4770      	bx	lr
	...

0800ae4c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ae50:	4b05      	ldr	r3, [pc, #20]	@ (800ae68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4a04      	ldr	r2, [pc, #16]	@ (800ae68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ae56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ae5a:	6013      	str	r3, [r2, #0]
}
 800ae5c:	bf00      	nop
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr
 800ae66:	bf00      	nop
 800ae68:	58000400 	.word	0x58000400

0800ae6c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800ae70:	4b04      	ldr	r3, [pc, #16]	@ (800ae84 <HAL_PWREx_GetVoltageRange+0x18>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae80:	4770      	bx	lr
 800ae82:	bf00      	nop
 800ae84:	58000400 	.word	0x58000400

0800ae88 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800ae8c:	4b05      	ldr	r3, [pc, #20]	@ (800aea4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	4a04      	ldr	r2, [pc, #16]	@ (800aea4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800ae92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ae96:	6053      	str	r3, [r2, #4]
}
 800ae98:	bf00      	nop
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr
 800aea2:	bf00      	nop
 800aea4:	58000400 	.word	0x58000400

0800aea8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800aea8:	b480      	push	{r7}
 800aeaa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800aeac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aeb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aeba:	d101      	bne.n	800aec0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800aebc:	2301      	movs	r3, #1
 800aebe:	e000      	b.n	800aec2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800aec0:	2300      	movs	r3, #0
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr

0800aecc <LL_RCC_HSE_Enable>:
{
 800aecc:	b480      	push	{r7}
 800aece:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800aed0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aeda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aede:	6013      	str	r3, [r2, #0]
}
 800aee0:	bf00      	nop
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr

0800aeea <LL_RCC_HSE_Disable>:
{
 800aeea:	b480      	push	{r7}
 800aeec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800aeee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aef8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aefc:	6013      	str	r3, [r2, #0]
}
 800aefe:	bf00      	nop
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr

0800af08 <LL_RCC_HSE_IsReady>:
{
 800af08:	b480      	push	{r7}
 800af0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800af0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af1a:	d101      	bne.n	800af20 <LL_RCC_HSE_IsReady+0x18>
 800af1c:	2301      	movs	r3, #1
 800af1e:	e000      	b.n	800af22 <LL_RCC_HSE_IsReady+0x1a>
 800af20:	2300      	movs	r3, #0
}
 800af22:	4618      	mov	r0, r3
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr

0800af2c <LL_RCC_HSI_Enable>:
{
 800af2c:	b480      	push	{r7}
 800af2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800af30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800af3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800af3e:	6013      	str	r3, [r2, #0]
}
 800af40:	bf00      	nop
 800af42:	46bd      	mov	sp, r7
 800af44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af48:	4770      	bx	lr

0800af4a <LL_RCC_HSI_Disable>:
{
 800af4a:	b480      	push	{r7}
 800af4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800af4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800af58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800af5c:	6013      	str	r3, [r2, #0]
}
 800af5e:	bf00      	nop
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr

0800af68 <LL_RCC_HSI_IsReady>:
{
 800af68:	b480      	push	{r7}
 800af6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800af6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800af76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af7a:	d101      	bne.n	800af80 <LL_RCC_HSI_IsReady+0x18>
 800af7c:	2301      	movs	r3, #1
 800af7e:	e000      	b.n	800af82 <LL_RCC_HSI_IsReady+0x1a>
 800af80:	2300      	movs	r3, #0
}
 800af82:	4618      	mov	r0, r3
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr

0800af8c <LL_RCC_HSI_SetCalibTrimming>:
{
 800af8c:	b480      	push	{r7}
 800af8e:	b083      	sub	sp, #12
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800af94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	061b      	lsls	r3, r3, #24
 800afa2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800afa6:	4313      	orrs	r3, r2
 800afa8:	604b      	str	r3, [r1, #4]
}
 800afaa:	bf00      	nop
 800afac:	370c      	adds	r7, #12
 800afae:	46bd      	mov	sp, r7
 800afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb4:	4770      	bx	lr

0800afb6 <LL_RCC_HSI48_Enable>:
{
 800afb6:	b480      	push	{r7}
 800afb8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800afba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800afbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800afc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800afc6:	f043 0301 	orr.w	r3, r3, #1
 800afca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800afce:	bf00      	nop
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr

0800afd8 <LL_RCC_HSI48_Disable>:
{
 800afd8:	b480      	push	{r7}
 800afda:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800afdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800afe0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800afe4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800afe8:	f023 0301 	bic.w	r3, r3, #1
 800afec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800aff0:	bf00      	nop
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr

0800affa <LL_RCC_HSI48_IsReady>:
{
 800affa:	b480      	push	{r7}
 800affc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800affe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b002:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b006:	f003 0302 	and.w	r3, r3, #2
 800b00a:	2b02      	cmp	r3, #2
 800b00c:	d101      	bne.n	800b012 <LL_RCC_HSI48_IsReady+0x18>
 800b00e:	2301      	movs	r3, #1
 800b010:	e000      	b.n	800b014 <LL_RCC_HSI48_IsReady+0x1a>
 800b012:	2300      	movs	r3, #0
}
 800b014:	4618      	mov	r0, r3
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr

0800b01e <LL_RCC_LSE_Enable>:
{
 800b01e:	b480      	push	{r7}
 800b020:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b022:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b02a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b02e:	f043 0301 	orr.w	r3, r3, #1
 800b032:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b036:	bf00      	nop
 800b038:	46bd      	mov	sp, r7
 800b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03e:	4770      	bx	lr

0800b040 <LL_RCC_LSE_Disable>:
{
 800b040:	b480      	push	{r7}
 800b042:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b044:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b04c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b050:	f023 0301 	bic.w	r3, r3, #1
 800b054:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b058:	bf00      	nop
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr

0800b062 <LL_RCC_LSE_EnableBypass>:
{
 800b062:	b480      	push	{r7}
 800b064:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800b066:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b06a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b06e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b072:	f043 0304 	orr.w	r3, r3, #4
 800b076:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b07a:	bf00      	nop
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr

0800b084 <LL_RCC_LSE_DisableBypass>:
{
 800b084:	b480      	push	{r7}
 800b086:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800b088:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b08c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b090:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b094:	f023 0304 	bic.w	r3, r3, #4
 800b098:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b09c:	bf00      	nop
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr

0800b0a6 <LL_RCC_LSE_IsReady>:
{
 800b0a6:	b480      	push	{r7}
 800b0a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800b0aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b0ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0b2:	f003 0302 	and.w	r3, r3, #2
 800b0b6:	2b02      	cmp	r3, #2
 800b0b8:	d101      	bne.n	800b0be <LL_RCC_LSE_IsReady+0x18>
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	e000      	b.n	800b0c0 <LL_RCC_LSE_IsReady+0x1a>
 800b0be:	2300      	movs	r3, #0
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr

0800b0ca <LL_RCC_LSI1_Enable>:
{
 800b0ca:	b480      	push	{r7}
 800b0cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800b0ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b0d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b0d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b0da:	f043 0301 	orr.w	r3, r3, #1
 800b0de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800b0e2:	bf00      	nop
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr

0800b0ec <LL_RCC_LSI1_Disable>:
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800b0f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b0f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b0f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b0fc:	f023 0301 	bic.w	r3, r3, #1
 800b100:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800b104:	bf00      	nop
 800b106:	46bd      	mov	sp, r7
 800b108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10c:	4770      	bx	lr

0800b10e <LL_RCC_LSI1_IsReady>:
{
 800b10e:	b480      	push	{r7}
 800b110:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800b112:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b116:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b11a:	f003 0302 	and.w	r3, r3, #2
 800b11e:	2b02      	cmp	r3, #2
 800b120:	d101      	bne.n	800b126 <LL_RCC_LSI1_IsReady+0x18>
 800b122:	2301      	movs	r3, #1
 800b124:	e000      	b.n	800b128 <LL_RCC_LSI1_IsReady+0x1a>
 800b126:	2300      	movs	r3, #0
}
 800b128:	4618      	mov	r0, r3
 800b12a:	46bd      	mov	sp, r7
 800b12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b130:	4770      	bx	lr

0800b132 <LL_RCC_LSI2_Enable>:
{
 800b132:	b480      	push	{r7}
 800b134:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800b136:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b13a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b13e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b142:	f043 0304 	orr.w	r3, r3, #4
 800b146:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800b14a:	bf00      	nop
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr

0800b154 <LL_RCC_LSI2_Disable>:
{
 800b154:	b480      	push	{r7}
 800b156:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800b158:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b15c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b160:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b164:	f023 0304 	bic.w	r3, r3, #4
 800b168:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800b16c:	bf00      	nop
 800b16e:	46bd      	mov	sp, r7
 800b170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b174:	4770      	bx	lr

0800b176 <LL_RCC_LSI2_IsReady>:
{
 800b176:	b480      	push	{r7}
 800b178:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800b17a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b17e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b182:	f003 0308 	and.w	r3, r3, #8
 800b186:	2b08      	cmp	r3, #8
 800b188:	d101      	bne.n	800b18e <LL_RCC_LSI2_IsReady+0x18>
 800b18a:	2301      	movs	r3, #1
 800b18c:	e000      	b.n	800b190 <LL_RCC_LSI2_IsReady+0x1a>
 800b18e:	2300      	movs	r3, #0
}
 800b190:	4618      	mov	r0, r3
 800b192:	46bd      	mov	sp, r7
 800b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b198:	4770      	bx	lr

0800b19a <LL_RCC_LSI2_SetTrimming>:
{
 800b19a:	b480      	push	{r7}
 800b19c:	b083      	sub	sp, #12
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800b1a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b1a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b1aa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	021b      	lsls	r3, r3, #8
 800b1b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800b1bc:	bf00      	nop
 800b1be:	370c      	adds	r7, #12
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr

0800b1c8 <LL_RCC_MSI_Enable>:
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800b1cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b1d6:	f043 0301 	orr.w	r3, r3, #1
 800b1da:	6013      	str	r3, [r2, #0]
}
 800b1dc:	bf00      	nop
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e4:	4770      	bx	lr

0800b1e6 <LL_RCC_MSI_Disable>:
{
 800b1e6:	b480      	push	{r7}
 800b1e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800b1ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b1f4:	f023 0301 	bic.w	r3, r3, #1
 800b1f8:	6013      	str	r3, [r2, #0]
}
 800b1fa:	bf00      	nop
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr

0800b204 <LL_RCC_MSI_IsReady>:
{
 800b204:	b480      	push	{r7}
 800b206:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800b208:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f003 0302 	and.w	r3, r3, #2
 800b212:	2b02      	cmp	r3, #2
 800b214:	d101      	bne.n	800b21a <LL_RCC_MSI_IsReady+0x16>
 800b216:	2301      	movs	r3, #1
 800b218:	e000      	b.n	800b21c <LL_RCC_MSI_IsReady+0x18>
 800b21a:	2300      	movs	r3, #0
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	46bd      	mov	sp, r7
 800b220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b224:	4770      	bx	lr

0800b226 <LL_RCC_MSI_SetRange>:
{
 800b226:	b480      	push	{r7}
 800b228:	b083      	sub	sp, #12
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800b22e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b238:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	4313      	orrs	r3, r2
 800b240:	600b      	str	r3, [r1, #0]
}
 800b242:	bf00      	nop
 800b244:	370c      	adds	r7, #12
 800b246:	46bd      	mov	sp, r7
 800b248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24c:	4770      	bx	lr

0800b24e <LL_RCC_MSI_GetRange>:
{
 800b24e:	b480      	push	{r7}
 800b250:	b083      	sub	sp, #12
 800b252:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800b254:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b25e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2bb0      	cmp	r3, #176	@ 0xb0
 800b264:	d901      	bls.n	800b26a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800b266:	23b0      	movs	r3, #176	@ 0xb0
 800b268:	607b      	str	r3, [r7, #4]
  return msiRange;
 800b26a:	687b      	ldr	r3, [r7, #4]
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	370c      	adds	r7, #12
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr

0800b278 <LL_RCC_MSI_SetCalibTrimming>:
{
 800b278:	b480      	push	{r7}
 800b27a:	b083      	sub	sp, #12
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800b280:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	021b      	lsls	r3, r3, #8
 800b28e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b292:	4313      	orrs	r3, r2
 800b294:	604b      	str	r3, [r1, #4]
}
 800b296:	bf00      	nop
 800b298:	370c      	adds	r7, #12
 800b29a:	46bd      	mov	sp, r7
 800b29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a0:	4770      	bx	lr

0800b2a2 <LL_RCC_SetSysClkSource>:
{
 800b2a2:	b480      	push	{r7}
 800b2a4:	b083      	sub	sp, #12
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800b2aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b2ae:	689b      	ldr	r3, [r3, #8]
 800b2b0:	f023 0203 	bic.w	r2, r3, #3
 800b2b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	4313      	orrs	r3, r2
 800b2bc:	608b      	str	r3, [r1, #8]
}
 800b2be:	bf00      	nop
 800b2c0:	370c      	adds	r7, #12
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c8:	4770      	bx	lr

0800b2ca <LL_RCC_GetSysClkSource>:
{
 800b2ca:	b480      	push	{r7}
 800b2cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800b2ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b2d2:	689b      	ldr	r3, [r3, #8]
 800b2d4:	f003 030c 	and.w	r3, r3, #12
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr

0800b2e2 <LL_RCC_SetAHBPrescaler>:
{
 800b2e2:	b480      	push	{r7}
 800b2e4:	b083      	sub	sp, #12
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800b2ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b2ee:	689b      	ldr	r3, [r3, #8]
 800b2f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b2f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	608b      	str	r3, [r1, #8]
}
 800b2fe:	bf00      	nop
 800b300:	370c      	adds	r7, #12
 800b302:	46bd      	mov	sp, r7
 800b304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b308:	4770      	bx	lr

0800b30a <LL_C2_RCC_SetAHBPrescaler>:
{
 800b30a:	b480      	push	{r7}
 800b30c:	b083      	sub	sp, #12
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800b312:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b316:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b31a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b31e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	4313      	orrs	r3, r2
 800b326:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800b32a:	bf00      	nop
 800b32c:	370c      	adds	r7, #12
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr

0800b336 <LL_RCC_SetAHB4Prescaler>:
{
 800b336:	b480      	push	{r7}
 800b338:	b083      	sub	sp, #12
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800b33e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b342:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b346:	f023 020f 	bic.w	r2, r3, #15
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	091b      	lsrs	r3, r3, #4
 800b34e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b352:	4313      	orrs	r3, r2
 800b354:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800b358:	bf00      	nop
 800b35a:	370c      	adds	r7, #12
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr

0800b364 <LL_RCC_SetAPB1Prescaler>:
{
 800b364:	b480      	push	{r7}
 800b366:	b083      	sub	sp, #12
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800b36c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b370:	689b      	ldr	r3, [r3, #8]
 800b372:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b376:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	4313      	orrs	r3, r2
 800b37e:	608b      	str	r3, [r1, #8]
}
 800b380:	bf00      	nop
 800b382:	370c      	adds	r7, #12
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <LL_RCC_SetAPB2Prescaler>:
{
 800b38c:	b480      	push	{r7}
 800b38e:	b083      	sub	sp, #12
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800b394:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b398:	689b      	ldr	r3, [r3, #8]
 800b39a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800b39e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	608b      	str	r3, [r1, #8]
}
 800b3a8:	bf00      	nop
 800b3aa:	370c      	adds	r7, #12
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <LL_RCC_GetAHBPrescaler>:
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800b3b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3bc:	689b      	ldr	r3, [r3, #8]
 800b3be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ca:	4770      	bx	lr

0800b3cc <LL_RCC_GetAHB4Prescaler>:
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800b3d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3d4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b3d8:	011b      	lsls	r3, r3, #4
 800b3da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <LL_RCC_GetAPB1Prescaler>:
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800b3ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3f0:	689b      	ldr	r3, [r3, #8]
 800b3f2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr

0800b400 <LL_RCC_GetAPB2Prescaler>:
{
 800b400:	b480      	push	{r7}
 800b402:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800b404:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b408:	689b      	ldr	r3, [r3, #8]
 800b40a:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800b40e:	4618      	mov	r0, r3
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr

0800b418 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800b418:	b480      	push	{r7}
 800b41a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800b41c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b426:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b42a:	6013      	str	r3, [r2, #0]
}
 800b42c:	bf00      	nop
 800b42e:	46bd      	mov	sp, r7
 800b430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b434:	4770      	bx	lr

0800b436 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800b436:	b480      	push	{r7}
 800b438:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800b43a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b444:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b448:	6013      	str	r3, [r2, #0]
}
 800b44a:	bf00      	nop
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr

0800b454 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800b454:	b480      	push	{r7}
 800b456:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800b458:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b462:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b466:	d101      	bne.n	800b46c <LL_RCC_PLL_IsReady+0x18>
 800b468:	2301      	movs	r3, #1
 800b46a:	e000      	b.n	800b46e <LL_RCC_PLL_IsReady+0x1a>
 800b46c:	2300      	movs	r3, #0
}
 800b46e:	4618      	mov	r0, r3
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr

0800b478 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800b478:	b480      	push	{r7}
 800b47a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800b47c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b480:	68db      	ldr	r3, [r3, #12]
 800b482:	0a1b      	lsrs	r3, r3, #8
 800b484:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800b488:	4618      	mov	r0, r3
 800b48a:	46bd      	mov	sp, r7
 800b48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b490:	4770      	bx	lr

0800b492 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800b492:	b480      	push	{r7}
 800b494:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800b496:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b49a:	68db      	ldr	r3, [r3, #12]
 800b49c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr

0800b4aa <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800b4aa:	b480      	push	{r7}
 800b4ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800b4ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b4b2:	68db      	ldr	r3, [r3, #12]
 800b4b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr

0800b4c2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800b4c2:	b480      	push	{r7}
 800b4c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800b4c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b4ca:	68db      	ldr	r3, [r3, #12]
 800b4cc:	f003 0303 	and.w	r3, r3, #3
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr

0800b4da <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800b4da:	b480      	push	{r7}
 800b4dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800b4de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b4e2:	689b      	ldr	r3, [r3, #8]
 800b4e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b4e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4ec:	d101      	bne.n	800b4f2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	e000      	b.n	800b4f4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800b4f2:	2300      	movs	r3, #0
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr

0800b4fe <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800b4fe:	b480      	push	{r7}
 800b500:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800b502:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b506:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b50a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b50e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b512:	d101      	bne.n	800b518 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800b514:	2301      	movs	r3, #1
 800b516:	e000      	b.n	800b51a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800b518:	2300      	movs	r3, #0
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr

0800b524 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800b524:	b480      	push	{r7}
 800b526:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800b528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b52c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b530:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b538:	d101      	bne.n	800b53e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800b53a:	2301      	movs	r3, #1
 800b53c:	e000      	b.n	800b540 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800b53e:	2300      	movs	r3, #0
}
 800b540:	4618      	mov	r0, r3
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr

0800b54a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800b54a:	b480      	push	{r7}
 800b54c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800b54e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b552:	689b      	ldr	r3, [r3, #8]
 800b554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b558:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b55c:	d101      	bne.n	800b562 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800b55e:	2301      	movs	r3, #1
 800b560:	e000      	b.n	800b564 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800b562:	2300      	movs	r3, #0
}
 800b564:	4618      	mov	r0, r3
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr

0800b56e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800b56e:	b480      	push	{r7}
 800b570:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800b572:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b576:	689b      	ldr	r3, [r3, #8]
 800b578:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b57c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b580:	d101      	bne.n	800b586 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800b582:	2301      	movs	r3, #1
 800b584:	e000      	b.n	800b588 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800b586:	2300      	movs	r3, #0
}
 800b588:	4618      	mov	r0, r3
 800b58a:	46bd      	mov	sp, r7
 800b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b590:	4770      	bx	lr
	...

0800b594 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b594:	b590      	push	{r4, r7, lr}
 800b596:	b08d      	sub	sp, #52	@ 0x34
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d101      	bne.n	800b5a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	e363      	b.n	800bc6e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f003 0320 	and.w	r3, r3, #32
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	f000 808d 	beq.w	800b6ce <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b5b4:	f7ff fe89 	bl	800b2ca <LL_RCC_GetSysClkSource>
 800b5b8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b5ba:	f7ff ff82 	bl	800b4c2 <LL_RCC_PLL_GetMainSource>
 800b5be:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800b5c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d005      	beq.n	800b5d2 <HAL_RCC_OscConfig+0x3e>
 800b5c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5c8:	2b0c      	cmp	r3, #12
 800b5ca:	d147      	bne.n	800b65c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800b5cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5ce:	2b01      	cmp	r3, #1
 800b5d0:	d144      	bne.n	800b65c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	69db      	ldr	r3, [r3, #28]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d101      	bne.n	800b5de <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800b5da:	2301      	movs	r3, #1
 800b5dc:	e347      	b.n	800bc6e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800b5e2:	f7ff fe34 	bl	800b24e <LL_RCC_MSI_GetRange>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	429c      	cmp	r4, r3
 800b5ea:	d914      	bls.n	800b616 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f000 fd2f 	bl	800c054 <RCC_SetFlashLatencyFromMSIRange>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d001      	beq.n	800b600 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	e336      	b.n	800bc6e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b604:	4618      	mov	r0, r3
 800b606:	f7ff fe0e 	bl	800b226 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6a1b      	ldr	r3, [r3, #32]
 800b60e:	4618      	mov	r0, r3
 800b610:	f7ff fe32 	bl	800b278 <LL_RCC_MSI_SetCalibTrimming>
 800b614:	e013      	b.n	800b63e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b61a:	4618      	mov	r0, r3
 800b61c:	f7ff fe03 	bl	800b226 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6a1b      	ldr	r3, [r3, #32]
 800b624:	4618      	mov	r0, r3
 800b626:	f7ff fe27 	bl	800b278 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b62e:	4618      	mov	r0, r3
 800b630:	f000 fd10 	bl	800c054 <RCC_SetFlashLatencyFromMSIRange>
 800b634:	4603      	mov	r3, r0
 800b636:	2b00      	cmp	r3, #0
 800b638:	d001      	beq.n	800b63e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800b63a:	2301      	movs	r3, #1
 800b63c:	e317      	b.n	800bc6e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800b63e:	f000 fcc9 	bl	800bfd4 <HAL_RCC_GetHCLKFreq>
 800b642:	4603      	mov	r3, r0
 800b644:	4aa4      	ldr	r2, [pc, #656]	@ (800b8d8 <HAL_RCC_OscConfig+0x344>)
 800b646:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b648:	4ba4      	ldr	r3, [pc, #656]	@ (800b8dc <HAL_RCC_OscConfig+0x348>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4618      	mov	r0, r3
 800b64e:	f7fb ff2b 	bl	80074a8 <HAL_InitTick>
 800b652:	4603      	mov	r3, r0
 800b654:	2b00      	cmp	r3, #0
 800b656:	d039      	beq.n	800b6cc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800b658:	2301      	movs	r3, #1
 800b65a:	e308      	b.n	800bc6e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	69db      	ldr	r3, [r3, #28]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d01e      	beq.n	800b6a2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800b664:	f7ff fdb0 	bl	800b1c8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b668:	f7fb ff6c 	bl	8007544 <HAL_GetTick>
 800b66c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800b66e:	e008      	b.n	800b682 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b670:	f7fb ff68 	bl	8007544 <HAL_GetTick>
 800b674:	4602      	mov	r2, r0
 800b676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b678:	1ad3      	subs	r3, r2, r3
 800b67a:	2b02      	cmp	r3, #2
 800b67c:	d901      	bls.n	800b682 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800b67e:	2303      	movs	r3, #3
 800b680:	e2f5      	b.n	800bc6e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800b682:	f7ff fdbf 	bl	800b204 <LL_RCC_MSI_IsReady>
 800b686:	4603      	mov	r3, r0
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d0f1      	beq.n	800b670 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b690:	4618      	mov	r0, r3
 800b692:	f7ff fdc8 	bl	800b226 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6a1b      	ldr	r3, [r3, #32]
 800b69a:	4618      	mov	r0, r3
 800b69c:	f7ff fdec 	bl	800b278 <LL_RCC_MSI_SetCalibTrimming>
 800b6a0:	e015      	b.n	800b6ce <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800b6a2:	f7ff fda0 	bl	800b1e6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b6a6:	f7fb ff4d 	bl	8007544 <HAL_GetTick>
 800b6aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800b6ac:	e008      	b.n	800b6c0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b6ae:	f7fb ff49 	bl	8007544 <HAL_GetTick>
 800b6b2:	4602      	mov	r2, r0
 800b6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6b6:	1ad3      	subs	r3, r2, r3
 800b6b8:	2b02      	cmp	r3, #2
 800b6ba:	d901      	bls.n	800b6c0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800b6bc:	2303      	movs	r3, #3
 800b6be:	e2d6      	b.n	800bc6e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800b6c0:	f7ff fda0 	bl	800b204 <LL_RCC_MSI_IsReady>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d1f1      	bne.n	800b6ae <HAL_RCC_OscConfig+0x11a>
 800b6ca:	e000      	b.n	800b6ce <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800b6cc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f003 0301 	and.w	r3, r3, #1
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d047      	beq.n	800b76a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b6da:	f7ff fdf6 	bl	800b2ca <LL_RCC_GetSysClkSource>
 800b6de:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b6e0:	f7ff feef 	bl	800b4c2 <LL_RCC_PLL_GetMainSource>
 800b6e4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800b6e6:	6a3b      	ldr	r3, [r7, #32]
 800b6e8:	2b08      	cmp	r3, #8
 800b6ea:	d005      	beq.n	800b6f8 <HAL_RCC_OscConfig+0x164>
 800b6ec:	6a3b      	ldr	r3, [r7, #32]
 800b6ee:	2b0c      	cmp	r3, #12
 800b6f0:	d108      	bne.n	800b704 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800b6f2:	69fb      	ldr	r3, [r7, #28]
 800b6f4:	2b03      	cmp	r3, #3
 800b6f6:	d105      	bne.n	800b704 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d134      	bne.n	800b76a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800b700:	2301      	movs	r3, #1
 800b702:	e2b4      	b.n	800bc6e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b70c:	d102      	bne.n	800b714 <HAL_RCC_OscConfig+0x180>
 800b70e:	f7ff fbdd 	bl	800aecc <LL_RCC_HSE_Enable>
 800b712:	e001      	b.n	800b718 <HAL_RCC_OscConfig+0x184>
 800b714:	f7ff fbe9 	bl	800aeea <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	685b      	ldr	r3, [r3, #4]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d012      	beq.n	800b746 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b720:	f7fb ff10 	bl	8007544 <HAL_GetTick>
 800b724:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800b726:	e008      	b.n	800b73a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b728:	f7fb ff0c 	bl	8007544 <HAL_GetTick>
 800b72c:	4602      	mov	r2, r0
 800b72e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b730:	1ad3      	subs	r3, r2, r3
 800b732:	2b64      	cmp	r3, #100	@ 0x64
 800b734:	d901      	bls.n	800b73a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800b736:	2303      	movs	r3, #3
 800b738:	e299      	b.n	800bc6e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800b73a:	f7ff fbe5 	bl	800af08 <LL_RCC_HSE_IsReady>
 800b73e:	4603      	mov	r3, r0
 800b740:	2b00      	cmp	r3, #0
 800b742:	d0f1      	beq.n	800b728 <HAL_RCC_OscConfig+0x194>
 800b744:	e011      	b.n	800b76a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b746:	f7fb fefd 	bl	8007544 <HAL_GetTick>
 800b74a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800b74c:	e008      	b.n	800b760 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b74e:	f7fb fef9 	bl	8007544 <HAL_GetTick>
 800b752:	4602      	mov	r2, r0
 800b754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b756:	1ad3      	subs	r3, r2, r3
 800b758:	2b64      	cmp	r3, #100	@ 0x64
 800b75a:	d901      	bls.n	800b760 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800b75c:	2303      	movs	r3, #3
 800b75e:	e286      	b.n	800bc6e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800b760:	f7ff fbd2 	bl	800af08 <LL_RCC_HSE_IsReady>
 800b764:	4603      	mov	r3, r0
 800b766:	2b00      	cmp	r3, #0
 800b768:	d1f1      	bne.n	800b74e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f003 0302 	and.w	r3, r3, #2
 800b772:	2b00      	cmp	r3, #0
 800b774:	d04c      	beq.n	800b810 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b776:	f7ff fda8 	bl	800b2ca <LL_RCC_GetSysClkSource>
 800b77a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b77c:	f7ff fea1 	bl	800b4c2 <LL_RCC_PLL_GetMainSource>
 800b780:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800b782:	69bb      	ldr	r3, [r7, #24]
 800b784:	2b04      	cmp	r3, #4
 800b786:	d005      	beq.n	800b794 <HAL_RCC_OscConfig+0x200>
 800b788:	69bb      	ldr	r3, [r7, #24]
 800b78a:	2b0c      	cmp	r3, #12
 800b78c:	d10e      	bne.n	800b7ac <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	2b02      	cmp	r3, #2
 800b792:	d10b      	bne.n	800b7ac <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d101      	bne.n	800b7a0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800b79c:	2301      	movs	r3, #1
 800b79e:	e266      	b.n	800bc6e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	691b      	ldr	r3, [r3, #16]
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f7ff fbf1 	bl	800af8c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800b7aa:	e031      	b.n	800b810 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	68db      	ldr	r3, [r3, #12]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d019      	beq.n	800b7e8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b7b4:	f7ff fbba 	bl	800af2c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7b8:	f7fb fec4 	bl	8007544 <HAL_GetTick>
 800b7bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800b7be:	e008      	b.n	800b7d2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b7c0:	f7fb fec0 	bl	8007544 <HAL_GetTick>
 800b7c4:	4602      	mov	r2, r0
 800b7c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7c8:	1ad3      	subs	r3, r2, r3
 800b7ca:	2b02      	cmp	r3, #2
 800b7cc:	d901      	bls.n	800b7d2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800b7ce:	2303      	movs	r3, #3
 800b7d0:	e24d      	b.n	800bc6e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800b7d2:	f7ff fbc9 	bl	800af68 <LL_RCC_HSI_IsReady>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d0f1      	beq.n	800b7c0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	691b      	ldr	r3, [r3, #16]
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f7ff fbd3 	bl	800af8c <LL_RCC_HSI_SetCalibTrimming>
 800b7e6:	e013      	b.n	800b810 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b7e8:	f7ff fbaf 	bl	800af4a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7ec:	f7fb feaa 	bl	8007544 <HAL_GetTick>
 800b7f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800b7f2:	e008      	b.n	800b806 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b7f4:	f7fb fea6 	bl	8007544 <HAL_GetTick>
 800b7f8:	4602      	mov	r2, r0
 800b7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7fc:	1ad3      	subs	r3, r2, r3
 800b7fe:	2b02      	cmp	r3, #2
 800b800:	d901      	bls.n	800b806 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800b802:	2303      	movs	r3, #3
 800b804:	e233      	b.n	800bc6e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800b806:	f7ff fbaf 	bl	800af68 <LL_RCC_HSI_IsReady>
 800b80a:	4603      	mov	r3, r0
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d1f1      	bne.n	800b7f4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f003 0308 	and.w	r3, r3, #8
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d106      	bne.n	800b82a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800b824:	2b00      	cmp	r3, #0
 800b826:	f000 80a3 	beq.w	800b970 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	695b      	ldr	r3, [r3, #20]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d076      	beq.n	800b920 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f003 0310 	and.w	r3, r3, #16
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d046      	beq.n	800b8cc <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800b83e:	f7ff fc66 	bl	800b10e <LL_RCC_LSI1_IsReady>
 800b842:	4603      	mov	r3, r0
 800b844:	2b00      	cmp	r3, #0
 800b846:	d113      	bne.n	800b870 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800b848:	f7ff fc3f 	bl	800b0ca <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b84c:	f7fb fe7a 	bl	8007544 <HAL_GetTick>
 800b850:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800b852:	e008      	b.n	800b866 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b854:	f7fb fe76 	bl	8007544 <HAL_GetTick>
 800b858:	4602      	mov	r2, r0
 800b85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b85c:	1ad3      	subs	r3, r2, r3
 800b85e:	2b02      	cmp	r3, #2
 800b860:	d901      	bls.n	800b866 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800b862:	2303      	movs	r3, #3
 800b864:	e203      	b.n	800bc6e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800b866:	f7ff fc52 	bl	800b10e <LL_RCC_LSI1_IsReady>
 800b86a:	4603      	mov	r3, r0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d0f1      	beq.n	800b854 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800b870:	f7ff fc5f 	bl	800b132 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b874:	f7fb fe66 	bl	8007544 <HAL_GetTick>
 800b878:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800b87a:	e008      	b.n	800b88e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b87c:	f7fb fe62 	bl	8007544 <HAL_GetTick>
 800b880:	4602      	mov	r2, r0
 800b882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b884:	1ad3      	subs	r3, r2, r3
 800b886:	2b03      	cmp	r3, #3
 800b888:	d901      	bls.n	800b88e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800b88a:	2303      	movs	r3, #3
 800b88c:	e1ef      	b.n	800bc6e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800b88e:	f7ff fc72 	bl	800b176 <LL_RCC_LSI2_IsReady>
 800b892:	4603      	mov	r3, r0
 800b894:	2b00      	cmp	r3, #0
 800b896:	d0f1      	beq.n	800b87c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	699b      	ldr	r3, [r3, #24]
 800b89c:	4618      	mov	r0, r3
 800b89e:	f7ff fc7c 	bl	800b19a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800b8a2:	f7ff fc23 	bl	800b0ec <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8a6:	f7fb fe4d 	bl	8007544 <HAL_GetTick>
 800b8aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800b8ac:	e008      	b.n	800b8c0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b8ae:	f7fb fe49 	bl	8007544 <HAL_GetTick>
 800b8b2:	4602      	mov	r2, r0
 800b8b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8b6:	1ad3      	subs	r3, r2, r3
 800b8b8:	2b02      	cmp	r3, #2
 800b8ba:	d901      	bls.n	800b8c0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800b8bc:	2303      	movs	r3, #3
 800b8be:	e1d6      	b.n	800bc6e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800b8c0:	f7ff fc25 	bl	800b10e <LL_RCC_LSI1_IsReady>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d1f1      	bne.n	800b8ae <HAL_RCC_OscConfig+0x31a>
 800b8ca:	e051      	b.n	800b970 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800b8cc:	f7ff fbfd 	bl	800b0ca <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8d0:	f7fb fe38 	bl	8007544 <HAL_GetTick>
 800b8d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800b8d6:	e00c      	b.n	800b8f2 <HAL_RCC_OscConfig+0x35e>
 800b8d8:	20000024 	.word	0x20000024
 800b8dc:	20000028 	.word	0x20000028
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b8e0:	f7fb fe30 	bl	8007544 <HAL_GetTick>
 800b8e4:	4602      	mov	r2, r0
 800b8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8e8:	1ad3      	subs	r3, r2, r3
 800b8ea:	2b02      	cmp	r3, #2
 800b8ec:	d901      	bls.n	800b8f2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800b8ee:	2303      	movs	r3, #3
 800b8f0:	e1bd      	b.n	800bc6e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800b8f2:	f7ff fc0c 	bl	800b10e <LL_RCC_LSI1_IsReady>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d0f1      	beq.n	800b8e0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800b8fc:	f7ff fc2a 	bl	800b154 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800b900:	e008      	b.n	800b914 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b902:	f7fb fe1f 	bl	8007544 <HAL_GetTick>
 800b906:	4602      	mov	r2, r0
 800b908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b90a:	1ad3      	subs	r3, r2, r3
 800b90c:	2b03      	cmp	r3, #3
 800b90e:	d901      	bls.n	800b914 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800b910:	2303      	movs	r3, #3
 800b912:	e1ac      	b.n	800bc6e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800b914:	f7ff fc2f 	bl	800b176 <LL_RCC_LSI2_IsReady>
 800b918:	4603      	mov	r3, r0
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d1f1      	bne.n	800b902 <HAL_RCC_OscConfig+0x36e>
 800b91e:	e027      	b.n	800b970 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800b920:	f7ff fc18 	bl	800b154 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b924:	f7fb fe0e 	bl	8007544 <HAL_GetTick>
 800b928:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800b92a:	e008      	b.n	800b93e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b92c:	f7fb fe0a 	bl	8007544 <HAL_GetTick>
 800b930:	4602      	mov	r2, r0
 800b932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b934:	1ad3      	subs	r3, r2, r3
 800b936:	2b03      	cmp	r3, #3
 800b938:	d901      	bls.n	800b93e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800b93a:	2303      	movs	r3, #3
 800b93c:	e197      	b.n	800bc6e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800b93e:	f7ff fc1a 	bl	800b176 <LL_RCC_LSI2_IsReady>
 800b942:	4603      	mov	r3, r0
 800b944:	2b00      	cmp	r3, #0
 800b946:	d1f1      	bne.n	800b92c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800b948:	f7ff fbd0 	bl	800b0ec <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b94c:	f7fb fdfa 	bl	8007544 <HAL_GetTick>
 800b950:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800b952:	e008      	b.n	800b966 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b954:	f7fb fdf6 	bl	8007544 <HAL_GetTick>
 800b958:	4602      	mov	r2, r0
 800b95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b95c:	1ad3      	subs	r3, r2, r3
 800b95e:	2b02      	cmp	r3, #2
 800b960:	d901      	bls.n	800b966 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800b962:	2303      	movs	r3, #3
 800b964:	e183      	b.n	800bc6e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800b966:	f7ff fbd2 	bl	800b10e <LL_RCC_LSI1_IsReady>
 800b96a:	4603      	mov	r3, r0
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d1f1      	bne.n	800b954 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f003 0304 	and.w	r3, r3, #4
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d05b      	beq.n	800ba34 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b97c:	4ba7      	ldr	r3, [pc, #668]	@ (800bc1c <HAL_RCC_OscConfig+0x688>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b984:	2b00      	cmp	r3, #0
 800b986:	d114      	bne.n	800b9b2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800b988:	f7ff fa60 	bl	800ae4c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b98c:	f7fb fdda 	bl	8007544 <HAL_GetTick>
 800b990:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b992:	e008      	b.n	800b9a6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b994:	f7fb fdd6 	bl	8007544 <HAL_GetTick>
 800b998:	4602      	mov	r2, r0
 800b99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b99c:	1ad3      	subs	r3, r2, r3
 800b99e:	2b02      	cmp	r3, #2
 800b9a0:	d901      	bls.n	800b9a6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800b9a2:	2303      	movs	r3, #3
 800b9a4:	e163      	b.n	800bc6e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b9a6:	4b9d      	ldr	r3, [pc, #628]	@ (800bc1c <HAL_RCC_OscConfig+0x688>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d0f0      	beq.n	800b994 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	689b      	ldr	r3, [r3, #8]
 800b9b6:	2b01      	cmp	r3, #1
 800b9b8:	d102      	bne.n	800b9c0 <HAL_RCC_OscConfig+0x42c>
 800b9ba:	f7ff fb30 	bl	800b01e <LL_RCC_LSE_Enable>
 800b9be:	e00c      	b.n	800b9da <HAL_RCC_OscConfig+0x446>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	689b      	ldr	r3, [r3, #8]
 800b9c4:	2b05      	cmp	r3, #5
 800b9c6:	d104      	bne.n	800b9d2 <HAL_RCC_OscConfig+0x43e>
 800b9c8:	f7ff fb4b 	bl	800b062 <LL_RCC_LSE_EnableBypass>
 800b9cc:	f7ff fb27 	bl	800b01e <LL_RCC_LSE_Enable>
 800b9d0:	e003      	b.n	800b9da <HAL_RCC_OscConfig+0x446>
 800b9d2:	f7ff fb35 	bl	800b040 <LL_RCC_LSE_Disable>
 800b9d6:	f7ff fb55 	bl	800b084 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	689b      	ldr	r3, [r3, #8]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d014      	beq.n	800ba0c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b9e2:	f7fb fdaf 	bl	8007544 <HAL_GetTick>
 800b9e6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800b9e8:	e00a      	b.n	800ba00 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b9ea:	f7fb fdab 	bl	8007544 <HAL_GetTick>
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f2:	1ad3      	subs	r3, r2, r3
 800b9f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d901      	bls.n	800ba00 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800b9fc:	2303      	movs	r3, #3
 800b9fe:	e136      	b.n	800bc6e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800ba00:	f7ff fb51 	bl	800b0a6 <LL_RCC_LSE_IsReady>
 800ba04:	4603      	mov	r3, r0
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d0ef      	beq.n	800b9ea <HAL_RCC_OscConfig+0x456>
 800ba0a:	e013      	b.n	800ba34 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba0c:	f7fb fd9a 	bl	8007544 <HAL_GetTick>
 800ba10:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800ba12:	e00a      	b.n	800ba2a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ba14:	f7fb fd96 	bl	8007544 <HAL_GetTick>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba1c:	1ad3      	subs	r3, r2, r3
 800ba1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d901      	bls.n	800ba2a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800ba26:	2303      	movs	r3, #3
 800ba28:	e121      	b.n	800bc6e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800ba2a:	f7ff fb3c 	bl	800b0a6 <LL_RCC_LSE_IsReady>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d1ef      	bne.n	800ba14 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d02c      	beq.n	800ba9a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d014      	beq.n	800ba72 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ba48:	f7ff fab5 	bl	800afb6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba4c:	f7fb fd7a 	bl	8007544 <HAL_GetTick>
 800ba50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800ba52:	e008      	b.n	800ba66 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ba54:	f7fb fd76 	bl	8007544 <HAL_GetTick>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba5c:	1ad3      	subs	r3, r2, r3
 800ba5e:	2b02      	cmp	r3, #2
 800ba60:	d901      	bls.n	800ba66 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800ba62:	2303      	movs	r3, #3
 800ba64:	e103      	b.n	800bc6e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800ba66:	f7ff fac8 	bl	800affa <LL_RCC_HSI48_IsReady>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d0f1      	beq.n	800ba54 <HAL_RCC_OscConfig+0x4c0>
 800ba70:	e013      	b.n	800ba9a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ba72:	f7ff fab1 	bl	800afd8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba76:	f7fb fd65 	bl	8007544 <HAL_GetTick>
 800ba7a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800ba7c:	e008      	b.n	800ba90 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ba7e:	f7fb fd61 	bl	8007544 <HAL_GetTick>
 800ba82:	4602      	mov	r2, r0
 800ba84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba86:	1ad3      	subs	r3, r2, r3
 800ba88:	2b02      	cmp	r3, #2
 800ba8a:	d901      	bls.n	800ba90 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800ba8c:	2303      	movs	r3, #3
 800ba8e:	e0ee      	b.n	800bc6e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800ba90:	f7ff fab3 	bl	800affa <LL_RCC_HSI48_IsReady>
 800ba94:	4603      	mov	r3, r0
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d1f1      	bne.n	800ba7e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	f000 80e4 	beq.w	800bc6c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800baa4:	f7ff fc11 	bl	800b2ca <LL_RCC_GetSysClkSource>
 800baa8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800baaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800baae:	68db      	ldr	r3, [r3, #12]
 800bab0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bab6:	2b02      	cmp	r3, #2
 800bab8:	f040 80b4 	bne.w	800bc24 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f003 0203 	and.w	r2, r3, #3
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d123      	bne.n	800bb12 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d11c      	bne.n	800bb12 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	0a1b      	lsrs	r3, r3, #8
 800badc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d114      	bne.n	800bb12 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d10d      	bne.n	800bb12 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d106      	bne.n	800bb12 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d05d      	beq.n	800bbce <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	2b0c      	cmp	r3, #12
 800bb16:	d058      	beq.n	800bbca <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800bb18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d001      	beq.n	800bb2a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800bb26:	2301      	movs	r3, #1
 800bb28:	e0a1      	b.n	800bc6e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800bb2a:	f7ff fc84 	bl	800b436 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800bb2e:	f7fb fd09 	bl	8007544 <HAL_GetTick>
 800bb32:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bb34:	e008      	b.n	800bb48 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bb36:	f7fb fd05 	bl	8007544 <HAL_GetTick>
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb3e:	1ad3      	subs	r3, r2, r3
 800bb40:	2b02      	cmp	r3, #2
 800bb42:	d901      	bls.n	800bb48 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800bb44:	2303      	movs	r3, #3
 800bb46:	e092      	b.n	800bc6e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bb48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d1ef      	bne.n	800bb36 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bb56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb5a:	68da      	ldr	r2, [r3, #12]
 800bb5c:	4b30      	ldr	r3, [pc, #192]	@ (800bc20 <HAL_RCC_OscConfig+0x68c>)
 800bb5e:	4013      	ands	r3, r2
 800bb60:	687a      	ldr	r2, [r7, #4]
 800bb62:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800bb68:	4311      	orrs	r1, r2
 800bb6a:	687a      	ldr	r2, [r7, #4]
 800bb6c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800bb6e:	0212      	lsls	r2, r2, #8
 800bb70:	4311      	orrs	r1, r2
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800bb76:	4311      	orrs	r1, r2
 800bb78:	687a      	ldr	r2, [r7, #4]
 800bb7a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800bb7c:	4311      	orrs	r1, r2
 800bb7e:	687a      	ldr	r2, [r7, #4]
 800bb80:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800bb82:	430a      	orrs	r2, r1
 800bb84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800bb8c:	f7ff fc44 	bl	800b418 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800bb90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb94:	68db      	ldr	r3, [r3, #12]
 800bb96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bb9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bb9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800bba0:	f7fb fcd0 	bl	8007544 <HAL_GetTick>
 800bba4:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bba6:	e008      	b.n	800bbba <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bba8:	f7fb fccc 	bl	8007544 <HAL_GetTick>
 800bbac:	4602      	mov	r2, r0
 800bbae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb0:	1ad3      	subs	r3, r2, r3
 800bbb2:	2b02      	cmp	r3, #2
 800bbb4:	d901      	bls.n	800bbba <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800bbb6:	2303      	movs	r3, #3
 800bbb8:	e059      	b.n	800bc6e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bbba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d0ef      	beq.n	800bba8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bbc8:	e050      	b.n	800bc6c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	e04f      	b.n	800bc6e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bbce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d147      	bne.n	800bc6c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800bbdc:	f7ff fc1c 	bl	800b418 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800bbe0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbe4:	68db      	ldr	r3, [r3, #12]
 800bbe6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bbea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bbee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800bbf0:	f7fb fca8 	bl	8007544 <HAL_GetTick>
 800bbf4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bbf6:	e008      	b.n	800bc0a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bbf8:	f7fb fca4 	bl	8007544 <HAL_GetTick>
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc00:	1ad3      	subs	r3, r2, r3
 800bc02:	2b02      	cmp	r3, #2
 800bc04:	d901      	bls.n	800bc0a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800bc06:	2303      	movs	r3, #3
 800bc08:	e031      	b.n	800bc6e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bc0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d0ef      	beq.n	800bbf8 <HAL_RCC_OscConfig+0x664>
 800bc18:	e028      	b.n	800bc6c <HAL_RCC_OscConfig+0x6d8>
 800bc1a:	bf00      	nop
 800bc1c:	58000400 	.word	0x58000400
 800bc20:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	2b0c      	cmp	r3, #12
 800bc28:	d01e      	beq.n	800bc68 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bc2a:	f7ff fc04 	bl	800b436 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc2e:	f7fb fc89 	bl	8007544 <HAL_GetTick>
 800bc32:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bc34:	e008      	b.n	800bc48 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc36:	f7fb fc85 	bl	8007544 <HAL_GetTick>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc3e:	1ad3      	subs	r3, r2, r3
 800bc40:	2b02      	cmp	r3, #2
 800bc42:	d901      	bls.n	800bc48 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800bc44:	2303      	movs	r3, #3
 800bc46:	e012      	b.n	800bc6e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bc48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d1ef      	bne.n	800bc36 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800bc56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc5a:	68da      	ldr	r2, [r3, #12]
 800bc5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc60:	4b05      	ldr	r3, [pc, #20]	@ (800bc78 <HAL_RCC_OscConfig+0x6e4>)
 800bc62:	4013      	ands	r3, r2
 800bc64:	60cb      	str	r3, [r1, #12]
 800bc66:	e001      	b.n	800bc6c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800bc68:	2301      	movs	r3, #1
 800bc6a:	e000      	b.n	800bc6e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800bc6c:	2300      	movs	r3, #0
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3734      	adds	r7, #52	@ 0x34
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd90      	pop	{r4, r7, pc}
 800bc76:	bf00      	nop
 800bc78:	eefefffc 	.word	0xeefefffc

0800bc7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d101      	bne.n	800bc90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	e12d      	b.n	800beec <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bc90:	4b98      	ldr	r3, [pc, #608]	@ (800bef4 <HAL_RCC_ClockConfig+0x278>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f003 0307 	and.w	r3, r3, #7
 800bc98:	683a      	ldr	r2, [r7, #0]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d91b      	bls.n	800bcd6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bc9e:	4b95      	ldr	r3, [pc, #596]	@ (800bef4 <HAL_RCC_ClockConfig+0x278>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f023 0207 	bic.w	r2, r3, #7
 800bca6:	4993      	ldr	r1, [pc, #588]	@ (800bef4 <HAL_RCC_ClockConfig+0x278>)
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	4313      	orrs	r3, r2
 800bcac:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bcae:	f7fb fc49 	bl	8007544 <HAL_GetTick>
 800bcb2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bcb4:	e008      	b.n	800bcc8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800bcb6:	f7fb fc45 	bl	8007544 <HAL_GetTick>
 800bcba:	4602      	mov	r2, r0
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	1ad3      	subs	r3, r2, r3
 800bcc0:	2b02      	cmp	r3, #2
 800bcc2:	d901      	bls.n	800bcc8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800bcc4:	2303      	movs	r3, #3
 800bcc6:	e111      	b.n	800beec <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bcc8:	4b8a      	ldr	r3, [pc, #552]	@ (800bef4 <HAL_RCC_ClockConfig+0x278>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f003 0307 	and.w	r3, r3, #7
 800bcd0:	683a      	ldr	r2, [r7, #0]
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d1ef      	bne.n	800bcb6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f003 0302 	and.w	r3, r3, #2
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d016      	beq.n	800bd10 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	689b      	ldr	r3, [r3, #8]
 800bce6:	4618      	mov	r0, r3
 800bce8:	f7ff fafb 	bl	800b2e2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800bcec:	f7fb fc2a 	bl	8007544 <HAL_GetTick>
 800bcf0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800bcf2:	e008      	b.n	800bd06 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800bcf4:	f7fb fc26 	bl	8007544 <HAL_GetTick>
 800bcf8:	4602      	mov	r2, r0
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	1ad3      	subs	r3, r2, r3
 800bcfe:	2b02      	cmp	r3, #2
 800bd00:	d901      	bls.n	800bd06 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800bd02:	2303      	movs	r3, #3
 800bd04:	e0f2      	b.n	800beec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800bd06:	f7ff fbe8 	bl	800b4da <LL_RCC_IsActiveFlag_HPRE>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d0f1      	beq.n	800bcf4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f003 0320 	and.w	r3, r3, #32
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d016      	beq.n	800bd4a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	695b      	ldr	r3, [r3, #20]
 800bd20:	4618      	mov	r0, r3
 800bd22:	f7ff faf2 	bl	800b30a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800bd26:	f7fb fc0d 	bl	8007544 <HAL_GetTick>
 800bd2a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800bd2c:	e008      	b.n	800bd40 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800bd2e:	f7fb fc09 	bl	8007544 <HAL_GetTick>
 800bd32:	4602      	mov	r2, r0
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	1ad3      	subs	r3, r2, r3
 800bd38:	2b02      	cmp	r3, #2
 800bd3a:	d901      	bls.n	800bd40 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800bd3c:	2303      	movs	r3, #3
 800bd3e:	e0d5      	b.n	800beec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800bd40:	f7ff fbdd 	bl	800b4fe <LL_RCC_IsActiveFlag_C2HPRE>
 800bd44:	4603      	mov	r3, r0
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d0f1      	beq.n	800bd2e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d016      	beq.n	800bd84 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	699b      	ldr	r3, [r3, #24]
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f7ff faeb 	bl	800b336 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800bd60:	f7fb fbf0 	bl	8007544 <HAL_GetTick>
 800bd64:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800bd66:	e008      	b.n	800bd7a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800bd68:	f7fb fbec 	bl	8007544 <HAL_GetTick>
 800bd6c:	4602      	mov	r2, r0
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	1ad3      	subs	r3, r2, r3
 800bd72:	2b02      	cmp	r3, #2
 800bd74:	d901      	bls.n	800bd7a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800bd76:	2303      	movs	r3, #3
 800bd78:	e0b8      	b.n	800beec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800bd7a:	f7ff fbd3 	bl	800b524 <LL_RCC_IsActiveFlag_SHDHPRE>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d0f1      	beq.n	800bd68 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f003 0304 	and.w	r3, r3, #4
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d016      	beq.n	800bdbe <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	68db      	ldr	r3, [r3, #12]
 800bd94:	4618      	mov	r0, r3
 800bd96:	f7ff fae5 	bl	800b364 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800bd9a:	f7fb fbd3 	bl	8007544 <HAL_GetTick>
 800bd9e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800bda0:	e008      	b.n	800bdb4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800bda2:	f7fb fbcf 	bl	8007544 <HAL_GetTick>
 800bda6:	4602      	mov	r2, r0
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	1ad3      	subs	r3, r2, r3
 800bdac:	2b02      	cmp	r3, #2
 800bdae:	d901      	bls.n	800bdb4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800bdb0:	2303      	movs	r3, #3
 800bdb2:	e09b      	b.n	800beec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800bdb4:	f7ff fbc9 	bl	800b54a <LL_RCC_IsActiveFlag_PPRE1>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d0f1      	beq.n	800bda2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f003 0308 	and.w	r3, r3, #8
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d017      	beq.n	800bdfa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	691b      	ldr	r3, [r3, #16]
 800bdce:	00db      	lsls	r3, r3, #3
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7ff fadb 	bl	800b38c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800bdd6:	f7fb fbb5 	bl	8007544 <HAL_GetTick>
 800bdda:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800bddc:	e008      	b.n	800bdf0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800bdde:	f7fb fbb1 	bl	8007544 <HAL_GetTick>
 800bde2:	4602      	mov	r2, r0
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	1ad3      	subs	r3, r2, r3
 800bde8:	2b02      	cmp	r3, #2
 800bdea:	d901      	bls.n	800bdf0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800bdec:	2303      	movs	r3, #3
 800bdee:	e07d      	b.n	800beec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800bdf0:	f7ff fbbd 	bl	800b56e <LL_RCC_IsActiveFlag_PPRE2>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d0f1      	beq.n	800bdde <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f003 0301 	and.w	r3, r3, #1
 800be02:	2b00      	cmp	r3, #0
 800be04:	d043      	beq.n	800be8e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	685b      	ldr	r3, [r3, #4]
 800be0a:	2b02      	cmp	r3, #2
 800be0c:	d106      	bne.n	800be1c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800be0e:	f7ff f87b 	bl	800af08 <LL_RCC_HSE_IsReady>
 800be12:	4603      	mov	r3, r0
 800be14:	2b00      	cmp	r3, #0
 800be16:	d11e      	bne.n	800be56 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800be18:	2301      	movs	r3, #1
 800be1a:	e067      	b.n	800beec <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	2b03      	cmp	r3, #3
 800be22:	d106      	bne.n	800be32 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800be24:	f7ff fb16 	bl	800b454 <LL_RCC_PLL_IsReady>
 800be28:	4603      	mov	r3, r0
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d113      	bne.n	800be56 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800be2e:	2301      	movs	r3, #1
 800be30:	e05c      	b.n	800beec <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d106      	bne.n	800be48 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800be3a:	f7ff f9e3 	bl	800b204 <LL_RCC_MSI_IsReady>
 800be3e:	4603      	mov	r3, r0
 800be40:	2b00      	cmp	r3, #0
 800be42:	d108      	bne.n	800be56 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800be44:	2301      	movs	r3, #1
 800be46:	e051      	b.n	800beec <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800be48:	f7ff f88e 	bl	800af68 <LL_RCC_HSI_IsReady>
 800be4c:	4603      	mov	r3, r0
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d101      	bne.n	800be56 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800be52:	2301      	movs	r3, #1
 800be54:	e04a      	b.n	800beec <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	4618      	mov	r0, r3
 800be5c:	f7ff fa21 	bl	800b2a2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be60:	f7fb fb70 	bl	8007544 <HAL_GetTick>
 800be64:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be66:	e00a      	b.n	800be7e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800be68:	f7fb fb6c 	bl	8007544 <HAL_GetTick>
 800be6c:	4602      	mov	r2, r0
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	1ad3      	subs	r3, r2, r3
 800be72:	f241 3288 	movw	r2, #5000	@ 0x1388
 800be76:	4293      	cmp	r3, r2
 800be78:	d901      	bls.n	800be7e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800be7a:	2303      	movs	r3, #3
 800be7c:	e036      	b.n	800beec <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be7e:	f7ff fa24 	bl	800b2ca <LL_RCC_GetSysClkSource>
 800be82:	4602      	mov	r2, r0
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	685b      	ldr	r3, [r3, #4]
 800be88:	009b      	lsls	r3, r3, #2
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d1ec      	bne.n	800be68 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800be8e:	4b19      	ldr	r3, [pc, #100]	@ (800bef4 <HAL_RCC_ClockConfig+0x278>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f003 0307 	and.w	r3, r3, #7
 800be96:	683a      	ldr	r2, [r7, #0]
 800be98:	429a      	cmp	r2, r3
 800be9a:	d21b      	bcs.n	800bed4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800be9c:	4b15      	ldr	r3, [pc, #84]	@ (800bef4 <HAL_RCC_ClockConfig+0x278>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f023 0207 	bic.w	r2, r3, #7
 800bea4:	4913      	ldr	r1, [pc, #76]	@ (800bef4 <HAL_RCC_ClockConfig+0x278>)
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	4313      	orrs	r3, r2
 800beaa:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800beac:	f7fb fb4a 	bl	8007544 <HAL_GetTick>
 800beb0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800beb2:	e008      	b.n	800bec6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800beb4:	f7fb fb46 	bl	8007544 <HAL_GetTick>
 800beb8:	4602      	mov	r2, r0
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	1ad3      	subs	r3, r2, r3
 800bebe:	2b02      	cmp	r3, #2
 800bec0:	d901      	bls.n	800bec6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800bec2:	2303      	movs	r3, #3
 800bec4:	e012      	b.n	800beec <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bec6:	4b0b      	ldr	r3, [pc, #44]	@ (800bef4 <HAL_RCC_ClockConfig+0x278>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f003 0307 	and.w	r3, r3, #7
 800bece:	683a      	ldr	r2, [r7, #0]
 800bed0:	429a      	cmp	r2, r3
 800bed2:	d1ef      	bne.n	800beb4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800bed4:	f000 f87e 	bl	800bfd4 <HAL_RCC_GetHCLKFreq>
 800bed8:	4603      	mov	r3, r0
 800beda:	4a07      	ldr	r2, [pc, #28]	@ (800bef8 <HAL_RCC_ClockConfig+0x27c>)
 800bedc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800bede:	f7fb fb3d 	bl	800755c <HAL_GetTickPrio>
 800bee2:	4603      	mov	r3, r0
 800bee4:	4618      	mov	r0, r3
 800bee6:	f7fb fadf 	bl	80074a8 <HAL_InitTick>
 800beea:	4603      	mov	r3, r0
}
 800beec:	4618      	mov	r0, r3
 800beee:	3710      	adds	r7, #16
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}
 800bef4:	58004000 	.word	0x58004000
 800bef8:	20000024 	.word	0x20000024

0800befc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800befc:	b590      	push	{r4, r7, lr}
 800befe:	b085      	sub	sp, #20
 800bf00:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bf02:	f7ff f9e2 	bl	800b2ca <LL_RCC_GetSysClkSource>
 800bf06:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d10a      	bne.n	800bf24 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800bf0e:	f7ff f99e 	bl	800b24e <LL_RCC_MSI_GetRange>
 800bf12:	4603      	mov	r3, r0
 800bf14:	091b      	lsrs	r3, r3, #4
 800bf16:	f003 030f 	and.w	r3, r3, #15
 800bf1a:	4a2b      	ldr	r2, [pc, #172]	@ (800bfc8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800bf1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf20:	60fb      	str	r3, [r7, #12]
 800bf22:	e04b      	b.n	800bfbc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2b04      	cmp	r3, #4
 800bf28:	d102      	bne.n	800bf30 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800bf2a:	4b28      	ldr	r3, [pc, #160]	@ (800bfcc <HAL_RCC_GetSysClockFreq+0xd0>)
 800bf2c:	60fb      	str	r3, [r7, #12]
 800bf2e:	e045      	b.n	800bfbc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2b08      	cmp	r3, #8
 800bf34:	d10a      	bne.n	800bf4c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800bf36:	f7fe ffb7 	bl	800aea8 <LL_RCC_HSE_IsEnabledDiv2>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d102      	bne.n	800bf46 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800bf40:	4b22      	ldr	r3, [pc, #136]	@ (800bfcc <HAL_RCC_GetSysClockFreq+0xd0>)
 800bf42:	60fb      	str	r3, [r7, #12]
 800bf44:	e03a      	b.n	800bfbc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800bf46:	4b22      	ldr	r3, [pc, #136]	@ (800bfd0 <HAL_RCC_GetSysClockFreq+0xd4>)
 800bf48:	60fb      	str	r3, [r7, #12]
 800bf4a:	e037      	b.n	800bfbc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800bf4c:	f7ff fab9 	bl	800b4c2 <LL_RCC_PLL_GetMainSource>
 800bf50:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	2b02      	cmp	r3, #2
 800bf56:	d003      	beq.n	800bf60 <HAL_RCC_GetSysClockFreq+0x64>
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	2b03      	cmp	r3, #3
 800bf5c:	d003      	beq.n	800bf66 <HAL_RCC_GetSysClockFreq+0x6a>
 800bf5e:	e00d      	b.n	800bf7c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800bf60:	4b1a      	ldr	r3, [pc, #104]	@ (800bfcc <HAL_RCC_GetSysClockFreq+0xd0>)
 800bf62:	60bb      	str	r3, [r7, #8]
        break;
 800bf64:	e015      	b.n	800bf92 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800bf66:	f7fe ff9f 	bl	800aea8 <LL_RCC_HSE_IsEnabledDiv2>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	2b01      	cmp	r3, #1
 800bf6e:	d102      	bne.n	800bf76 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800bf70:	4b16      	ldr	r3, [pc, #88]	@ (800bfcc <HAL_RCC_GetSysClockFreq+0xd0>)
 800bf72:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800bf74:	e00d      	b.n	800bf92 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800bf76:	4b16      	ldr	r3, [pc, #88]	@ (800bfd0 <HAL_RCC_GetSysClockFreq+0xd4>)
 800bf78:	60bb      	str	r3, [r7, #8]
        break;
 800bf7a:	e00a      	b.n	800bf92 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800bf7c:	f7ff f967 	bl	800b24e <LL_RCC_MSI_GetRange>
 800bf80:	4603      	mov	r3, r0
 800bf82:	091b      	lsrs	r3, r3, #4
 800bf84:	f003 030f 	and.w	r3, r3, #15
 800bf88:	4a0f      	ldr	r2, [pc, #60]	@ (800bfc8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800bf8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf8e:	60bb      	str	r3, [r7, #8]
        break;
 800bf90:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800bf92:	f7ff fa71 	bl	800b478 <LL_RCC_PLL_GetN>
 800bf96:	4602      	mov	r2, r0
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	fb03 f402 	mul.w	r4, r3, r2
 800bf9e:	f7ff fa84 	bl	800b4aa <LL_RCC_PLL_GetDivider>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	091b      	lsrs	r3, r3, #4
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	fbb4 f4f3 	udiv	r4, r4, r3
 800bfac:	f7ff fa71 	bl	800b492 <LL_RCC_PLL_GetR>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	0f5b      	lsrs	r3, r3, #29
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	fbb4 f3f3 	udiv	r3, r4, r3
 800bfba:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3714      	adds	r7, #20
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd90      	pop	{r4, r7, pc}
 800bfc6:	bf00      	nop
 800bfc8:	0801cc2c 	.word	0x0801cc2c
 800bfcc:	00f42400 	.word	0x00f42400
 800bfd0:	01e84800 	.word	0x01e84800

0800bfd4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bfd4:	b598      	push	{r3, r4, r7, lr}
 800bfd6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800bfd8:	f7ff ff90 	bl	800befc <HAL_RCC_GetSysClockFreq>
 800bfdc:	4604      	mov	r4, r0
 800bfde:	f7ff f9e9 	bl	800b3b4 <LL_RCC_GetAHBPrescaler>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	091b      	lsrs	r3, r3, #4
 800bfe6:	f003 030f 	and.w	r3, r3, #15
 800bfea:	4a03      	ldr	r2, [pc, #12]	@ (800bff8 <HAL_RCC_GetHCLKFreq+0x24>)
 800bfec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bff0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	bd98      	pop	{r3, r4, r7, pc}
 800bff8:	0801cbcc 	.word	0x0801cbcc

0800bffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bffc:	b598      	push	{r3, r4, r7, lr}
 800bffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800c000:	f7ff ffe8 	bl	800bfd4 <HAL_RCC_GetHCLKFreq>
 800c004:	4604      	mov	r4, r0
 800c006:	f7ff f9ef 	bl	800b3e8 <LL_RCC_GetAPB1Prescaler>
 800c00a:	4603      	mov	r3, r0
 800c00c:	0a1b      	lsrs	r3, r3, #8
 800c00e:	f003 0307 	and.w	r3, r3, #7
 800c012:	4a04      	ldr	r2, [pc, #16]	@ (800c024 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c018:	f003 031f 	and.w	r3, r3, #31
 800c01c:	fa24 f303 	lsr.w	r3, r4, r3
}
 800c020:	4618      	mov	r0, r3
 800c022:	bd98      	pop	{r3, r4, r7, pc}
 800c024:	0801cc0c 	.word	0x0801cc0c

0800c028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c028:	b598      	push	{r3, r4, r7, lr}
 800c02a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800c02c:	f7ff ffd2 	bl	800bfd4 <HAL_RCC_GetHCLKFreq>
 800c030:	4604      	mov	r4, r0
 800c032:	f7ff f9e5 	bl	800b400 <LL_RCC_GetAPB2Prescaler>
 800c036:	4603      	mov	r3, r0
 800c038:	0adb      	lsrs	r3, r3, #11
 800c03a:	f003 0307 	and.w	r3, r3, #7
 800c03e:	4a04      	ldr	r2, [pc, #16]	@ (800c050 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c044:	f003 031f 	and.w	r3, r3, #31
 800c048:	fa24 f303 	lsr.w	r3, r4, r3
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	bd98      	pop	{r3, r4, r7, pc}
 800c050:	0801cc0c 	.word	0x0801cc0c

0800c054 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800c054:	b590      	push	{r4, r7, lr}
 800c056:	b085      	sub	sp, #20
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2bb0      	cmp	r3, #176	@ 0xb0
 800c060:	d903      	bls.n	800c06a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800c062:	4b15      	ldr	r3, [pc, #84]	@ (800c0b8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800c064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c066:	60fb      	str	r3, [r7, #12]
 800c068:	e007      	b.n	800c07a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	091b      	lsrs	r3, r3, #4
 800c06e:	f003 030f 	and.w	r3, r3, #15
 800c072:	4a11      	ldr	r2, [pc, #68]	@ (800c0b8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800c074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c078:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800c07a:	f7ff f9a7 	bl	800b3cc <LL_RCC_GetAHB4Prescaler>
 800c07e:	4603      	mov	r3, r0
 800c080:	091b      	lsrs	r3, r3, #4
 800c082:	f003 030f 	and.w	r3, r3, #15
 800c086:	4a0d      	ldr	r2, [pc, #52]	@ (800c0bc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800c088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c08c:	68fa      	ldr	r2, [r7, #12]
 800c08e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c092:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	4a0a      	ldr	r2, [pc, #40]	@ (800c0c0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800c098:	fba2 2303 	umull	r2, r3, r2, r3
 800c09c:	0c9c      	lsrs	r4, r3, #18
 800c09e:	f7fe fee5 	bl	800ae6c <HAL_PWREx_GetVoltageRange>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	4620      	mov	r0, r4
 800c0a8:	f000 f80c 	bl	800c0c4 <RCC_SetFlashLatency>
 800c0ac:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3714      	adds	r7, #20
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd90      	pop	{r4, r7, pc}
 800c0b6:	bf00      	nop
 800c0b8:	0801cc2c 	.word	0x0801cc2c
 800c0bc:	0801cbcc 	.word	0x0801cbcc
 800c0c0:	431bde83 	.word	0x431bde83

0800c0c4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800c0c4:	b590      	push	{r4, r7, lr}
 800c0c6:	b093      	sub	sp, #76	@ 0x4c
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800c0ce:	4b37      	ldr	r3, [pc, #220]	@ (800c1ac <RCC_SetFlashLatency+0xe8>)
 800c0d0:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800c0d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c0d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800c0da:	4a35      	ldr	r2, [pc, #212]	@ (800c1b0 <RCC_SetFlashLatency+0xec>)
 800c0dc:	f107 031c 	add.w	r3, r7, #28
 800c0e0:	ca07      	ldmia	r2, {r0, r1, r2}
 800c0e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800c0e6:	4b33      	ldr	r3, [pc, #204]	@ (800c1b4 <RCC_SetFlashLatency+0xf0>)
 800c0e8:	f107 040c 	add.w	r4, r7, #12
 800c0ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c0ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c0fc:	d11a      	bne.n	800c134 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800c0fe:	2300      	movs	r3, #0
 800c100:	643b      	str	r3, [r7, #64]	@ 0x40
 800c102:	e013      	b.n	800c12c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800c104:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c106:	009b      	lsls	r3, r3, #2
 800c108:	3348      	adds	r3, #72	@ 0x48
 800c10a:	443b      	add	r3, r7
 800c10c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800c110:	687a      	ldr	r2, [r7, #4]
 800c112:	429a      	cmp	r2, r3
 800c114:	d807      	bhi.n	800c126 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800c116:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c118:	009b      	lsls	r3, r3, #2
 800c11a:	3348      	adds	r3, #72	@ 0x48
 800c11c:	443b      	add	r3, r7
 800c11e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800c122:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800c124:	e020      	b.n	800c168 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800c126:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c128:	3301      	adds	r3, #1
 800c12a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c12c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c12e:	2b03      	cmp	r3, #3
 800c130:	d9e8      	bls.n	800c104 <RCC_SetFlashLatency+0x40>
 800c132:	e019      	b.n	800c168 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800c134:	2300      	movs	r3, #0
 800c136:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c138:	e013      	b.n	800c162 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800c13a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c13c:	009b      	lsls	r3, r3, #2
 800c13e:	3348      	adds	r3, #72	@ 0x48
 800c140:	443b      	add	r3, r7
 800c142:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800c146:	687a      	ldr	r2, [r7, #4]
 800c148:	429a      	cmp	r2, r3
 800c14a:	d807      	bhi.n	800c15c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800c14c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c14e:	009b      	lsls	r3, r3, #2
 800c150:	3348      	adds	r3, #72	@ 0x48
 800c152:	443b      	add	r3, r7
 800c154:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800c158:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800c15a:	e005      	b.n	800c168 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800c15c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c15e:	3301      	adds	r3, #1
 800c160:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c164:	2b02      	cmp	r3, #2
 800c166:	d9e8      	bls.n	800c13a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800c168:	4b13      	ldr	r3, [pc, #76]	@ (800c1b8 <RCC_SetFlashLatency+0xf4>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f023 0207 	bic.w	r2, r3, #7
 800c170:	4911      	ldr	r1, [pc, #68]	@ (800c1b8 <RCC_SetFlashLatency+0xf4>)
 800c172:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c174:	4313      	orrs	r3, r2
 800c176:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c178:	f7fb f9e4 	bl	8007544 <HAL_GetTick>
 800c17c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800c17e:	e008      	b.n	800c192 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c180:	f7fb f9e0 	bl	8007544 <HAL_GetTick>
 800c184:	4602      	mov	r2, r0
 800c186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c188:	1ad3      	subs	r3, r2, r3
 800c18a:	2b02      	cmp	r3, #2
 800c18c:	d901      	bls.n	800c192 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800c18e:	2303      	movs	r3, #3
 800c190:	e007      	b.n	800c1a2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800c192:	4b09      	ldr	r3, [pc, #36]	@ (800c1b8 <RCC_SetFlashLatency+0xf4>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f003 0307 	and.w	r3, r3, #7
 800c19a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c19c:	429a      	cmp	r2, r3
 800c19e:	d1ef      	bne.n	800c180 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800c1a0:	2300      	movs	r3, #0
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	374c      	adds	r7, #76	@ 0x4c
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd90      	pop	{r4, r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	0801c334 	.word	0x0801c334
 800c1b0:	0801c344 	.word	0x0801c344
 800c1b4:	0801c350 	.word	0x0801c350
 800c1b8:	58004000 	.word	0x58004000

0800c1bc <LL_RCC_LSE_IsEnabled>:
{
 800c1bc:	b480      	push	{r7}
 800c1be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800c1c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c1c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1c8:	f003 0301 	and.w	r3, r3, #1
 800c1cc:	2b01      	cmp	r3, #1
 800c1ce:	d101      	bne.n	800c1d4 <LL_RCC_LSE_IsEnabled+0x18>
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	e000      	b.n	800c1d6 <LL_RCC_LSE_IsEnabled+0x1a>
 800c1d4:	2300      	movs	r3, #0
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1de:	4770      	bx	lr

0800c1e0 <LL_RCC_LSE_IsReady>:
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c1e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c1e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1ec:	f003 0302 	and.w	r3, r3, #2
 800c1f0:	2b02      	cmp	r3, #2
 800c1f2:	d101      	bne.n	800c1f8 <LL_RCC_LSE_IsReady+0x18>
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	e000      	b.n	800c1fa <LL_RCC_LSE_IsReady+0x1a>
 800c1f8:	2300      	movs	r3, #0
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c202:	4770      	bx	lr

0800c204 <LL_RCC_MSI_EnablePLLMode>:
{
 800c204:	b480      	push	{r7}
 800c206:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800c208:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c212:	f043 0304 	orr.w	r3, r3, #4
 800c216:	6013      	str	r3, [r2, #0]
}
 800c218:	bf00      	nop
 800c21a:	46bd      	mov	sp, r7
 800c21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c220:	4770      	bx	lr

0800c222 <LL_RCC_SetRFWKPClockSource>:
{
 800c222:	b480      	push	{r7}
 800c224:	b083      	sub	sp, #12
 800c226:	af00      	add	r7, sp, #0
 800c228:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800c22a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c22e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c232:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800c236:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	4313      	orrs	r3, r2
 800c23e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800c242:	bf00      	nop
 800c244:	370c      	adds	r7, #12
 800c246:	46bd      	mov	sp, r7
 800c248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24c:	4770      	bx	lr

0800c24e <LL_RCC_SetSMPSClockSource>:
{
 800c24e:	b480      	push	{r7}
 800c250:	b083      	sub	sp, #12
 800c252:	af00      	add	r7, sp, #0
 800c254:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800c256:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c25a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c25c:	f023 0203 	bic.w	r2, r3, #3
 800c260:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	4313      	orrs	r3, r2
 800c268:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800c26a:	bf00      	nop
 800c26c:	370c      	adds	r7, #12
 800c26e:	46bd      	mov	sp, r7
 800c270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c274:	4770      	bx	lr

0800c276 <LL_RCC_SetSMPSPrescaler>:
{
 800c276:	b480      	push	{r7}
 800c278:	b083      	sub	sp, #12
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800c27e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c284:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800c288:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	4313      	orrs	r3, r2
 800c290:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800c292:	bf00      	nop
 800c294:	370c      	adds	r7, #12
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr

0800c29e <LL_RCC_SetUSARTClockSource>:
{
 800c29e:	b480      	push	{r7}
 800c2a0:	b083      	sub	sp, #12
 800c2a2:	af00      	add	r7, sp, #0
 800c2a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800c2a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c2aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c2ae:	f023 0203 	bic.w	r2, r3, #3
 800c2b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	4313      	orrs	r3, r2
 800c2ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c2be:	bf00      	nop
 800c2c0:	370c      	adds	r7, #12
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c8:	4770      	bx	lr

0800c2ca <LL_RCC_SetLPUARTClockSource>:
{
 800c2ca:	b480      	push	{r7}
 800c2cc:	b083      	sub	sp, #12
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800c2d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c2d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c2da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c2de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	4313      	orrs	r3, r2
 800c2e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c2ea:	bf00      	nop
 800c2ec:	370c      	adds	r7, #12
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f4:	4770      	bx	lr

0800c2f6 <LL_RCC_SetI2CClockSource>:
{
 800c2f6:	b480      	push	{r7}
 800c2f8:	b083      	sub	sp, #12
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800c2fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c302:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	091b      	lsrs	r3, r3, #4
 800c30a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800c30e:	43db      	mvns	r3, r3
 800c310:	401a      	ands	r2, r3
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	011b      	lsls	r3, r3, #4
 800c316:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800c31a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c31e:	4313      	orrs	r3, r2
 800c320:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c324:	bf00      	nop
 800c326:	370c      	adds	r7, #12
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr

0800c330 <LL_RCC_SetLPTIMClockSource>:
{
 800c330:	b480      	push	{r7}
 800c332:	b083      	sub	sp, #12
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800c338:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c33c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	0c1b      	lsrs	r3, r3, #16
 800c344:	041b      	lsls	r3, r3, #16
 800c346:	43db      	mvns	r3, r3
 800c348:	401a      	ands	r2, r3
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	041b      	lsls	r3, r3, #16
 800c34e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c352:	4313      	orrs	r3, r2
 800c354:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c358:	bf00      	nop
 800c35a:	370c      	adds	r7, #12
 800c35c:	46bd      	mov	sp, r7
 800c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c362:	4770      	bx	lr

0800c364 <LL_RCC_SetSAIClockSource>:
{
 800c364:	b480      	push	{r7}
 800c366:	b083      	sub	sp, #12
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800c36c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c374:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800c378:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	4313      	orrs	r3, r2
 800c380:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c384:	bf00      	nop
 800c386:	370c      	adds	r7, #12
 800c388:	46bd      	mov	sp, r7
 800c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38e:	4770      	bx	lr

0800c390 <LL_RCC_SetRNGClockSource>:
{
 800c390:	b480      	push	{r7}
 800c392:	b083      	sub	sp, #12
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800c398:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c39c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c3a0:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800c3a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c3b0:	bf00      	nop
 800c3b2:	370c      	adds	r7, #12
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr

0800c3bc <LL_RCC_SetCLK48ClockSource>:
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b083      	sub	sp, #12
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800c3c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c3c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c3cc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800c3d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	4313      	orrs	r3, r2
 800c3d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c3dc:	bf00      	nop
 800c3de:	370c      	adds	r7, #12
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e6:	4770      	bx	lr

0800c3e8 <LL_RCC_SetUSBClockSource>:
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f7ff ffe3 	bl	800c3bc <LL_RCC_SetCLK48ClockSource>
}
 800c3f6:	bf00      	nop
 800c3f8:	3708      	adds	r7, #8
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}

0800c3fe <LL_RCC_SetADCClockSource>:
{
 800c3fe:	b480      	push	{r7}
 800c400:	b083      	sub	sp, #12
 800c402:	af00      	add	r7, sp, #0
 800c404:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800c406:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c40a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c40e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800c412:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	4313      	orrs	r3, r2
 800c41a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c41e:	bf00      	nop
 800c420:	370c      	adds	r7, #12
 800c422:	46bd      	mov	sp, r7
 800c424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c428:	4770      	bx	lr

0800c42a <LL_RCC_SetRTCClockSource>:
{
 800c42a:	b480      	push	{r7}
 800c42c:	b083      	sub	sp, #12
 800c42e:	af00      	add	r7, sp, #0
 800c430:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800c432:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c43a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c43e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	4313      	orrs	r3, r2
 800c446:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800c44a:	bf00      	nop
 800c44c:	370c      	adds	r7, #12
 800c44e:	46bd      	mov	sp, r7
 800c450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c454:	4770      	bx	lr

0800c456 <LL_RCC_GetRTCClockSource>:
{
 800c456:	b480      	push	{r7}
 800c458:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800c45a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c45e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c462:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800c466:	4618      	mov	r0, r3
 800c468:	46bd      	mov	sp, r7
 800c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46e:	4770      	bx	lr

0800c470 <LL_RCC_ForceBackupDomainReset>:
{
 800c470:	b480      	push	{r7}
 800c472:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800c474:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c47c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c484:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800c488:	bf00      	nop
 800c48a:	46bd      	mov	sp, r7
 800c48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c490:	4770      	bx	lr

0800c492 <LL_RCC_ReleaseBackupDomainReset>:
{
 800c492:	b480      	push	{r7}
 800c494:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800c496:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c49a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c49e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c4a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c4a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800c4aa:	bf00      	nop
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b2:	4770      	bx	lr

0800c4b4 <LL_RCC_PLLSAI1_Enable>:
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800c4b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c4c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c4c6:	6013      	str	r3, [r2, #0]
}
 800c4c8:	bf00      	nop
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d0:	4770      	bx	lr

0800c4d2 <LL_RCC_PLLSAI1_Disable>:
{
 800c4d2:	b480      	push	{r7}
 800c4d4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800c4d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c4e0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c4e4:	6013      	str	r3, [r2, #0]
}
 800c4e6:	bf00      	nop
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr

0800c4f0 <LL_RCC_PLLSAI1_IsReady>:
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800c4f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c4fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c502:	d101      	bne.n	800c508 <LL_RCC_PLLSAI1_IsReady+0x18>
 800c504:	2301      	movs	r3, #1
 800c506:	e000      	b.n	800c50a <LL_RCC_PLLSAI1_IsReady+0x1a>
 800c508:	2300      	movs	r3, #0
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	46bd      	mov	sp, r7
 800c50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c512:	4770      	bx	lr

0800c514 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b088      	sub	sp, #32
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800c51c:	2300      	movs	r3, #0
 800c51e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800c520:	2300      	movs	r3, #0
 800c522:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d034      	beq.n	800c59a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c534:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c538:	d021      	beq.n	800c57e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800c53a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c53e:	d81b      	bhi.n	800c578 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c540:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c544:	d01d      	beq.n	800c582 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800c546:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c54a:	d815      	bhi.n	800c578 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d00b      	beq.n	800c568 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800c550:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c554:	d110      	bne.n	800c578 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800c556:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c55a:	68db      	ldr	r3, [r3, #12]
 800c55c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c564:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800c566:	e00d      	b.n	800c584 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	3304      	adds	r3, #4
 800c56c:	4618      	mov	r0, r3
 800c56e:	f000 f94d 	bl	800c80c <RCCEx_PLLSAI1_ConfigNP>
 800c572:	4603      	mov	r3, r0
 800c574:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800c576:	e005      	b.n	800c584 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800c578:	2301      	movs	r3, #1
 800c57a:	77fb      	strb	r3, [r7, #31]
        break;
 800c57c:	e002      	b.n	800c584 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800c57e:	bf00      	nop
 800c580:	e000      	b.n	800c584 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800c582:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c584:	7ffb      	ldrb	r3, [r7, #31]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d105      	bne.n	800c596 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c58e:	4618      	mov	r0, r3
 800c590:	f7ff fee8 	bl	800c364 <LL_RCC_SetSAIClockSource>
 800c594:	e001      	b.n	800c59a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c596:	7ffb      	ldrb	r3, [r7, #31]
 800c598:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d046      	beq.n	800c634 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800c5a6:	f7ff ff56 	bl	800c456 <LL_RCC_GetRTCClockSource>
 800c5aa:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5b0:	69ba      	ldr	r2, [r7, #24]
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d03c      	beq.n	800c630 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800c5b6:	f7fe fc49 	bl	800ae4c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800c5ba:	69bb      	ldr	r3, [r7, #24]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d105      	bne.n	800c5cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f7ff ff30 	bl	800c42a <LL_RCC_SetRTCClockSource>
 800c5ca:	e02e      	b.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800c5cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c5d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5d4:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800c5d6:	f7ff ff4b 	bl	800c470 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800c5da:	f7ff ff5a 	bl	800c492 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800c5de:	697b      	ldr	r3, [r7, #20]
 800c5e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5e8:	4313      	orrs	r3, r2
 800c5ea:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800c5ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800c5f6:	f7ff fde1 	bl	800c1bc <LL_RCC_LSE_IsEnabled>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	d114      	bne.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c600:	f7fa ffa0 	bl	8007544 <HAL_GetTick>
 800c604:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800c606:	e00b      	b.n	800c620 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c608:	f7fa ff9c 	bl	8007544 <HAL_GetTick>
 800c60c:	4602      	mov	r2, r0
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	1ad3      	subs	r3, r2, r3
 800c612:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c616:	4293      	cmp	r3, r2
 800c618:	d902      	bls.n	800c620 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800c61a:	2303      	movs	r3, #3
 800c61c:	77fb      	strb	r3, [r7, #31]
              break;
 800c61e:	e004      	b.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800c620:	f7ff fdde 	bl	800c1e0 <LL_RCC_LSE_IsReady>
 800c624:	4603      	mov	r3, r0
 800c626:	2b01      	cmp	r3, #1
 800c628:	d1ee      	bne.n	800c608 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800c62a:	7ffb      	ldrb	r3, [r7, #31]
 800c62c:	77bb      	strb	r3, [r7, #30]
 800c62e:	e001      	b.n	800c634 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c630:	7ffb      	ldrb	r3, [r7, #31]
 800c632:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f003 0301 	and.w	r3, r3, #1
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d004      	beq.n	800c64a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	699b      	ldr	r3, [r3, #24]
 800c644:	4618      	mov	r0, r3
 800c646:	f7ff fe2a 	bl	800c29e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f003 0302 	and.w	r3, r3, #2
 800c652:	2b00      	cmp	r3, #0
 800c654:	d004      	beq.n	800c660 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	69db      	ldr	r3, [r3, #28]
 800c65a:	4618      	mov	r0, r3
 800c65c:	f7ff fe35 	bl	800c2ca <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f003 0310 	and.w	r3, r3, #16
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d004      	beq.n	800c676 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c670:	4618      	mov	r0, r3
 800c672:	f7ff fe5d 	bl	800c330 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f003 0320 	and.w	r3, r3, #32
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d004      	beq.n	800c68c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c686:	4618      	mov	r0, r3
 800c688:	f7ff fe52 	bl	800c330 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	f003 0304 	and.w	r3, r3, #4
 800c694:	2b00      	cmp	r3, #0
 800c696:	d004      	beq.n	800c6a2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6a1b      	ldr	r3, [r3, #32]
 800c69c:	4618      	mov	r0, r3
 800c69e:	f7ff fe2a 	bl	800c2f6 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f003 0308 	and.w	r3, r3, #8
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d004      	beq.n	800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f7ff fe1f 	bl	800c2f6 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d022      	beq.n	800c70a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f7ff fe8d 	bl	800c3e8 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c6d6:	d107      	bne.n	800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800c6d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c6dc:	68db      	ldr	r3, [r3, #12]
 800c6de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c6e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c6e6:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c6f0:	d10b      	bne.n	800c70a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	3304      	adds	r3, #4
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f000 f8e3 	bl	800c8c2 <RCCEx_PLLSAI1_ConfigNQ>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800c700:	7ffb      	ldrb	r3, [r7, #31]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d001      	beq.n	800c70a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800c706:	7ffb      	ldrb	r3, [r7, #31]
 800c708:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c712:	2b00      	cmp	r3, #0
 800c714:	d02b      	beq.n	800c76e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c71a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c71e:	d008      	beq.n	800c732 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c724:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c728:	d003      	beq.n	800c732 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d105      	bne.n	800c73e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c736:	4618      	mov	r0, r3
 800c738:	f7ff fe2a 	bl	800c390 <LL_RCC_SetRNGClockSource>
 800c73c:	e00a      	b.n	800c754 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c742:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c746:	60fb      	str	r3, [r7, #12]
 800c748:	2000      	movs	r0, #0
 800c74a:	f7ff fe21 	bl	800c390 <LL_RCC_SetRNGClockSource>
 800c74e:	68f8      	ldr	r0, [r7, #12]
 800c750:	f7ff fe34 	bl	800c3bc <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c758:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800c75c:	d107      	bne.n	800c76e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800c75e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c762:	68db      	ldr	r3, [r3, #12]
 800c764:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c768:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c76c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c776:	2b00      	cmp	r3, #0
 800c778:	d022      	beq.n	800c7c0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c77e:	4618      	mov	r0, r3
 800c780:	f7ff fe3d 	bl	800c3fe <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c788:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c78c:	d107      	bne.n	800c79e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c78e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c792:	68db      	ldr	r3, [r3, #12]
 800c794:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c79c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c7a6:	d10b      	bne.n	800c7c0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	3304      	adds	r3, #4
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f000 f8e3 	bl	800c978 <RCCEx_PLLSAI1_ConfigNR>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800c7b6:	7ffb      	ldrb	r3, [r7, #31]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d001      	beq.n	800c7c0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800c7bc:	7ffb      	ldrb	r3, [r7, #31]
 800c7be:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d004      	beq.n	800c7d6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f7ff fd26 	bl	800c222 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d009      	beq.n	800c7f6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f7ff fd45 	bl	800c276 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7ff fd2c 	bl	800c24e <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800c7f6:	7fbb      	ldrb	r3, [r7, #30]
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3720      	adds	r7, #32
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}

0800c800 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800c804:	f7ff fcfe 	bl	800c204 <LL_RCC_MSI_EnablePLLMode>
}
 800c808:	bf00      	nop
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b084      	sub	sp, #16
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c814:	2300      	movs	r3, #0
 800c816:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c818:	f7ff fe5b 	bl	800c4d2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c81c:	f7fa fe92 	bl	8007544 <HAL_GetTick>
 800c820:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c822:	e009      	b.n	800c838 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c824:	f7fa fe8e 	bl	8007544 <HAL_GetTick>
 800c828:	4602      	mov	r2, r0
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	1ad3      	subs	r3, r2, r3
 800c82e:	2b02      	cmp	r3, #2
 800c830:	d902      	bls.n	800c838 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800c832:	2303      	movs	r3, #3
 800c834:	73fb      	strb	r3, [r7, #15]
      break;
 800c836:	e004      	b.n	800c842 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c838:	f7ff fe5a 	bl	800c4f0 <LL_RCC_PLLSAI1_IsReady>
 800c83c:	4603      	mov	r3, r0
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d1f0      	bne.n	800c824 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800c842:	7bfb      	ldrb	r3, [r7, #15]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d137      	bne.n	800c8b8 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c848:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c84c:	691b      	ldr	r3, [r3, #16]
 800c84e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	021b      	lsls	r3, r3, #8
 800c858:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c85c:	4313      	orrs	r3, r2
 800c85e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800c860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c864:	691b      	ldr	r3, [r3, #16]
 800c866:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	685b      	ldr	r3, [r3, #4]
 800c86e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c872:	4313      	orrs	r3, r2
 800c874:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c876:	f7ff fe1d 	bl	800c4b4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c87a:	f7fa fe63 	bl	8007544 <HAL_GetTick>
 800c87e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c880:	e009      	b.n	800c896 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c882:	f7fa fe5f 	bl	8007544 <HAL_GetTick>
 800c886:	4602      	mov	r2, r0
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	1ad3      	subs	r3, r2, r3
 800c88c:	2b02      	cmp	r3, #2
 800c88e:	d902      	bls.n	800c896 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800c890:	2303      	movs	r3, #3
 800c892:	73fb      	strb	r3, [r7, #15]
        break;
 800c894:	e004      	b.n	800c8a0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c896:	f7ff fe2b 	bl	800c4f0 <LL_RCC_PLLSAI1_IsReady>
 800c89a:	4603      	mov	r3, r0
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	d1f0      	bne.n	800c882 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800c8a0:	7bfb      	ldrb	r3, [r7, #15]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d108      	bne.n	800c8b8 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c8a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c8aa:	691a      	ldr	r2, [r3, #16]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	691b      	ldr	r3, [r3, #16]
 800c8b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c8b4:	4313      	orrs	r3, r2
 800c8b6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c8b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	3710      	adds	r7, #16
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bd80      	pop	{r7, pc}

0800c8c2 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c8c2:	b580      	push	{r7, lr}
 800c8c4:	b084      	sub	sp, #16
 800c8c6:	af00      	add	r7, sp, #0
 800c8c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c8ce:	f7ff fe00 	bl	800c4d2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c8d2:	f7fa fe37 	bl	8007544 <HAL_GetTick>
 800c8d6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c8d8:	e009      	b.n	800c8ee <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c8da:	f7fa fe33 	bl	8007544 <HAL_GetTick>
 800c8de:	4602      	mov	r2, r0
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	1ad3      	subs	r3, r2, r3
 800c8e4:	2b02      	cmp	r3, #2
 800c8e6:	d902      	bls.n	800c8ee <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800c8e8:	2303      	movs	r3, #3
 800c8ea:	73fb      	strb	r3, [r7, #15]
      break;
 800c8ec:	e004      	b.n	800c8f8 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c8ee:	f7ff fdff 	bl	800c4f0 <LL_RCC_PLLSAI1_IsReady>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d1f0      	bne.n	800c8da <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800c8f8:	7bfb      	ldrb	r3, [r7, #15]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d137      	bne.n	800c96e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c8fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c902:	691b      	ldr	r3, [r3, #16]
 800c904:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	021b      	lsls	r3, r3, #8
 800c90e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c912:	4313      	orrs	r3, r2
 800c914:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800c916:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c91a:	691b      	ldr	r3, [r3, #16]
 800c91c:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	689b      	ldr	r3, [r3, #8]
 800c924:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c928:	4313      	orrs	r3, r2
 800c92a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c92c:	f7ff fdc2 	bl	800c4b4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c930:	f7fa fe08 	bl	8007544 <HAL_GetTick>
 800c934:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c936:	e009      	b.n	800c94c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c938:	f7fa fe04 	bl	8007544 <HAL_GetTick>
 800c93c:	4602      	mov	r2, r0
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	1ad3      	subs	r3, r2, r3
 800c942:	2b02      	cmp	r3, #2
 800c944:	d902      	bls.n	800c94c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800c946:	2303      	movs	r3, #3
 800c948:	73fb      	strb	r3, [r7, #15]
        break;
 800c94a:	e004      	b.n	800c956 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c94c:	f7ff fdd0 	bl	800c4f0 <LL_RCC_PLLSAI1_IsReady>
 800c950:	4603      	mov	r3, r0
 800c952:	2b01      	cmp	r3, #1
 800c954:	d1f0      	bne.n	800c938 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800c956:	7bfb      	ldrb	r3, [r7, #15]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d108      	bne.n	800c96e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c95c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c960:	691a      	ldr	r2, [r3, #16]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	691b      	ldr	r3, [r3, #16]
 800c966:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c96a:	4313      	orrs	r3, r2
 800c96c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c96e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c970:	4618      	mov	r0, r3
 800c972:	3710      	adds	r7, #16
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}

0800c978 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b084      	sub	sp, #16
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c980:	2300      	movs	r3, #0
 800c982:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c984:	f7ff fda5 	bl	800c4d2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c988:	f7fa fddc 	bl	8007544 <HAL_GetTick>
 800c98c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c98e:	e009      	b.n	800c9a4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c990:	f7fa fdd8 	bl	8007544 <HAL_GetTick>
 800c994:	4602      	mov	r2, r0
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	1ad3      	subs	r3, r2, r3
 800c99a:	2b02      	cmp	r3, #2
 800c99c:	d902      	bls.n	800c9a4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800c99e:	2303      	movs	r3, #3
 800c9a0:	73fb      	strb	r3, [r7, #15]
      break;
 800c9a2:	e004      	b.n	800c9ae <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c9a4:	f7ff fda4 	bl	800c4f0 <LL_RCC_PLLSAI1_IsReady>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d1f0      	bne.n	800c990 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800c9ae:	7bfb      	ldrb	r3, [r7, #15]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d137      	bne.n	800ca24 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c9b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c9b8:	691b      	ldr	r3, [r3, #16]
 800c9ba:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	021b      	lsls	r3, r3, #8
 800c9c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800c9cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c9d0:	691b      	ldr	r3, [r3, #16]
 800c9d2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	68db      	ldr	r3, [r3, #12]
 800c9da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c9de:	4313      	orrs	r3, r2
 800c9e0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c9e2:	f7ff fd67 	bl	800c4b4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c9e6:	f7fa fdad 	bl	8007544 <HAL_GetTick>
 800c9ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c9ec:	e009      	b.n	800ca02 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c9ee:	f7fa fda9 	bl	8007544 <HAL_GetTick>
 800c9f2:	4602      	mov	r2, r0
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	1ad3      	subs	r3, r2, r3
 800c9f8:	2b02      	cmp	r3, #2
 800c9fa:	d902      	bls.n	800ca02 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800c9fc:	2303      	movs	r3, #3
 800c9fe:	73fb      	strb	r3, [r7, #15]
        break;
 800ca00:	e004      	b.n	800ca0c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ca02:	f7ff fd75 	bl	800c4f0 <LL_RCC_PLLSAI1_IsReady>
 800ca06:	4603      	mov	r3, r0
 800ca08:	2b01      	cmp	r3, #1
 800ca0a:	d1f0      	bne.n	800c9ee <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800ca0c:	7bfb      	ldrb	r3, [r7, #15]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d108      	bne.n	800ca24 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800ca12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ca16:	691a      	ldr	r2, [r3, #16]
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	691b      	ldr	r3, [r3, #16]
 800ca1c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ca20:	4313      	orrs	r3, r2
 800ca22:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800ca24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	3710      	adds	r7, #16
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}

0800ca2e <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ca2e:	b580      	push	{r7, lr}
 800ca30:	b084      	sub	sp, #16
 800ca32:	af00      	add	r7, sp, #0
 800ca34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ca36:	2301      	movs	r3, #1
 800ca38:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d101      	bne.n	800ca44 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800ca40:	2301      	movs	r3, #1
 800ca42:	e07a      	b.n	800cb3a <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800ca4a:	b2db      	uxtb	r3, r3
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d106      	bne.n	800ca5e <HAL_RTC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2200      	movs	r2, #0
 800ca54:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f7f9 ff9f 	bl	800699c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2202      	movs	r2, #2
 800ca62:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	68db      	ldr	r3, [r3, #12]
 800ca6c:	f003 0310 	and.w	r3, r3, #16
 800ca70:	2b10      	cmp	r3, #16
 800ca72:	d058      	beq.n	800cb26 <HAL_RTC_Init+0xf8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	22ca      	movs	r2, #202	@ 0xca
 800ca7a:	625a      	str	r2, [r3, #36]	@ 0x24
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	2253      	movs	r2, #83	@ 0x53
 800ca82:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f000 f883 	bl	800cb90 <RTC_EnterInitMode>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800ca8e:	7bfb      	ldrb	r3, [r7, #15]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d12c      	bne.n	800caee <HAL_RTC_Init+0xc0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	689b      	ldr	r3, [r3, #8]
 800ca9a:	687a      	ldr	r2, [r7, #4]
 800ca9c:	6812      	ldr	r2, [r2, #0]
 800ca9e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800caa2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800caa6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	6899      	ldr	r1, [r3, #8]
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	685a      	ldr	r2, [r3, #4]
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	691b      	ldr	r3, [r3, #16]
 800cab6:	431a      	orrs	r2, r3
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	699b      	ldr	r3, [r3, #24]
 800cabc:	431a      	orrs	r2, r3
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	430a      	orrs	r2, r1
 800cac4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	687a      	ldr	r2, [r7, #4]
 800cacc:	68d2      	ldr	r2, [r2, #12]
 800cace:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	6919      	ldr	r1, [r3, #16]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	689b      	ldr	r3, [r3, #8]
 800cada:	041a      	lsls	r2, r3, #16
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	430a      	orrs	r2, r1
 800cae2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f000 f88b 	bl	800cc00 <RTC_ExitInitMode>
 800caea:	4603      	mov	r3, r0
 800caec:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800caee:	7bfb      	ldrb	r3, [r7, #15]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d113      	bne.n	800cb1c <HAL_RTC_Init+0xee>
    {
#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f022 0203 	bic.w	r2, r2, #3
 800cb02:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	69da      	ldr	r2, [r3, #28]
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	695b      	ldr	r3, [r3, #20]
 800cb12:	431a      	orrs	r2, r3
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	430a      	orrs	r2, r1
 800cb1a:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutRemap);
#endif /* RTC_OR_ALARMOUTTYPE */
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	22ff      	movs	r2, #255	@ 0xff
 800cb22:	625a      	str	r2, [r3, #36]	@ 0x24
 800cb24:	e001      	b.n	800cb2a <HAL_RTC_Init+0xfc>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800cb26:	2300      	movs	r3, #0
 800cb28:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800cb2a:	7bfb      	ldrb	r3, [r7, #15]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d103      	bne.n	800cb38 <HAL_RTC_Init+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2201      	movs	r2, #1
 800cb34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800cb38:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3710      	adds	r7, #16
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}
	...

0800cb44 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b084      	sub	sp, #16
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	4a0d      	ldr	r2, [pc, #52]	@ (800cb8c <HAL_RTC_WaitForSynchro+0x48>)
 800cb56:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cb58:	f7fa fcf4 	bl	8007544 <HAL_GetTick>
 800cb5c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cb5e:	e009      	b.n	800cb74 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cb60:	f7fa fcf0 	bl	8007544 <HAL_GetTick>
 800cb64:	4602      	mov	r2, r0
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	1ad3      	subs	r3, r2, r3
 800cb6a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cb6e:	d901      	bls.n	800cb74 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800cb70:	2303      	movs	r3, #3
 800cb72:	e007      	b.n	800cb84 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	68db      	ldr	r3, [r3, #12]
 800cb7a:	f003 0320 	and.w	r3, r3, #32
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d0ee      	beq.n	800cb60 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800cb82:	2300      	movs	r3, #0
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3710      	adds	r7, #16
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}
 800cb8c:	0001ff5f 	.word	0x0001ff5f

0800cb90 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b084      	sub	sp, #16
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	68db      	ldr	r3, [r3, #12]
 800cba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d123      	bne.n	800cbf6 <RTC_EnterInitMode+0x66>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	68da      	ldr	r2, [r3, #12]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800cbbc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cbbe:	f7fa fcc1 	bl	8007544 <HAL_GetTick>
 800cbc2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800cbc4:	e00d      	b.n	800cbe2 <RTC_EnterInitMode+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cbc6:	f7fa fcbd 	bl	8007544 <HAL_GetTick>
 800cbca:	4602      	mov	r2, r0
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	1ad3      	subs	r3, r2, r3
 800cbd0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cbd4:	d905      	bls.n	800cbe2 <RTC_EnterInitMode+0x52>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2204      	movs	r2, #4
 800cbda:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        status = HAL_ERROR;
 800cbde:	2301      	movs	r3, #1
 800cbe0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	68db      	ldr	r3, [r3, #12]
 800cbe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d102      	bne.n	800cbf6 <RTC_EnterInitMode+0x66>
 800cbf0:	7bfb      	ldrb	r3, [r7, #15]
 800cbf2:	2b01      	cmp	r3, #1
 800cbf4:	d1e7      	bne.n	800cbc6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800cbf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3710      	adds	r7, #16
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}

0800cc00 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b084      	sub	sp, #16
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	68da      	ldr	r2, [r3, #12]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cc1a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	689b      	ldr	r3, [r3, #8]
 800cc22:	f003 0320 	and.w	r3, r3, #32
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d10b      	bne.n	800cc42 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f7ff ff8a 	bl	800cb44 <HAL_RTC_WaitForSynchro>
 800cc30:	4603      	mov	r3, r0
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d005      	beq.n	800cc42 <RTC_ExitInitMode+0x42>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2204      	movs	r2, #4
 800cc3a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_ERROR;
 800cc3e:	2301      	movs	r3, #1
 800cc40:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800cc42:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3710      	adds	r7, #16
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}

0800cc4c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b087      	sub	sp, #28
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	60f8      	str	r0, [r7, #12]
 800cc54:	60b9      	str	r1, [r7, #8]
 800cc56:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800cc58:	4b5f      	ldr	r3, [pc, #380]	@ (800cdd8 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4a5f      	ldr	r2, [pc, #380]	@ (800cddc <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 800cc5e:	fba2 2303 	umull	r2, r3, r2, r3
 800cc62:	0adb      	lsrs	r3, r3, #11
 800cc64:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800cc68:	fb02 f303 	mul.w	r3, r2, r3
 800cc6c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cc74:	2b01      	cmp	r3, #1
 800cc76:	d101      	bne.n	800cc7c <HAL_RTCEx_SetWakeUpTimer_IT+0x30>
 800cc78:	2302      	movs	r3, #2
 800cc7a:	e0a7      	b.n	800cdcc <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	2201      	movs	r2, #1
 800cc80:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	2202      	movs	r2, #2
 800cc88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	22ca      	movs	r2, #202	@ 0xca
 800cc92:	625a      	str	r2, [r3, #36]	@ 0x24
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	2253      	movs	r2, #83	@ 0x53
 800cc9a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	689b      	ldr	r3, [r3, #8]
 800cca2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d01a      	beq.n	800cce0 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	3b01      	subs	r3, #1
 800ccae:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d10d      	bne.n	800ccd2 <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	22ff      	movs	r2, #255	@ 0xff
 800ccbc:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	2203      	movs	r2, #3
 800ccc2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800ccce:	2303      	movs	r3, #3
 800ccd0:	e07c      	b.n	800cdcc <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	68db      	ldr	r3, [r3, #12]
 800ccd8:	f003 0304 	and.w	r3, r3, #4
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d1e4      	bne.n	800ccaa <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	689a      	ldr	r2, [r3, #8]
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ccee:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	68db      	ldr	r3, [r3, #12]
 800ccf6:	b2da      	uxtb	r2, r3
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800cd00:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800cd02:	4b35      	ldr	r3, [pc, #212]	@ (800cdd8 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	4a35      	ldr	r2, [pc, #212]	@ (800cddc <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 800cd08:	fba2 2303 	umull	r2, r3, r2, r3
 800cd0c:	0adb      	lsrs	r3, r3, #11
 800cd0e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800cd12:	fb02 f303 	mul.w	r3, r2, r3
 800cd16:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	3b01      	subs	r3, #1
 800cd1c:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d10d      	bne.n	800cd40 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	22ff      	movs	r2, #255	@ 0xff
 800cd2a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	2203      	movs	r2, #3
 800cd30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	2200      	movs	r2, #0
 800cd38:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800cd3c:	2303      	movs	r3, #3
 800cd3e:	e045      	b.n	800cdcc <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	68db      	ldr	r3, [r3, #12]
 800cd46:	f003 0304 	and.w	r3, r3, #4
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d0e4      	beq.n	800cd18 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	689a      	ldr	r2, [r3, #8]
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	f022 0207 	bic.w	r2, r2, #7
 800cd5c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	6899      	ldr	r1, [r3, #8]
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	687a      	ldr	r2, [r7, #4]
 800cd6a:	430a      	orrs	r2, r1
 800cd6c:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	68ba      	ldr	r2, [r7, #8]
 800cd74:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800cd76:	4b1a      	ldr	r3, [pc, #104]	@ (800cde0 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800cd78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd7c:	4a18      	ldr	r2, [pc, #96]	@ (800cde0 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800cd7e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cd82:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800cd86:	4b16      	ldr	r3, [pc, #88]	@ (800cde0 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	4a15      	ldr	r2, [pc, #84]	@ (800cde0 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800cd8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cd90:	6013      	str	r3, [r2, #0]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	689a      	ldr	r2, [r3, #8]
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cda0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	689a      	ldr	r2, [r3, #8]
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800cdb0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	22ff      	movs	r2, #255	@ 0xff
 800cdb8:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800cdca:	2300      	movs	r3, #0
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	371c      	adds	r7, #28
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd6:	4770      	bx	lr
 800cdd8:	20000024 	.word	0x20000024
 800cddc:	10624dd3 	.word	0x10624dd3
 800cde0:	58000800 	.word	0x58000800

0800cde4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b084      	sub	sp, #16
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d101      	bne.n	800cdf6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	e095      	b.n	800cf22 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d108      	bne.n	800ce10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	685b      	ldr	r3, [r3, #4]
 800ce02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ce06:	d009      	beq.n	800ce1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	61da      	str	r2, [r3, #28]
 800ce0e:	e005      	b.n	800ce1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2200      	movs	r2, #0
 800ce14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2200      	movs	r2, #0
 800ce1a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ce28:	b2db      	uxtb	r3, r3
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d106      	bne.n	800ce3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2200      	movs	r2, #0
 800ce32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f7f9 feac 	bl	8006b94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2202      	movs	r2, #2
 800ce40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	681a      	ldr	r2, [r3, #0]
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ce52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	68db      	ldr	r3, [r3, #12]
 800ce58:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ce5c:	d902      	bls.n	800ce64 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	60fb      	str	r3, [r7, #12]
 800ce62:	e002      	b.n	800ce6a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ce64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ce68:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	68db      	ldr	r3, [r3, #12]
 800ce6e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800ce72:	d007      	beq.n	800ce84 <HAL_SPI_Init+0xa0>
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	68db      	ldr	r3, [r3, #12]
 800ce78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ce7c:	d002      	beq.n	800ce84 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2200      	movs	r2, #0
 800ce82:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	685b      	ldr	r3, [r3, #4]
 800ce88:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	689b      	ldr	r3, [r3, #8]
 800ce90:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800ce94:	431a      	orrs	r2, r3
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	691b      	ldr	r3, [r3, #16]
 800ce9a:	f003 0302 	and.w	r3, r3, #2
 800ce9e:	431a      	orrs	r2, r3
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	695b      	ldr	r3, [r3, #20]
 800cea4:	f003 0301 	and.w	r3, r3, #1
 800cea8:	431a      	orrs	r2, r3
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	699b      	ldr	r3, [r3, #24]
 800ceae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ceb2:	431a      	orrs	r2, r3
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	69db      	ldr	r3, [r3, #28]
 800ceb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cebc:	431a      	orrs	r2, r3
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6a1b      	ldr	r3, [r3, #32]
 800cec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cec6:	ea42 0103 	orr.w	r1, r2, r3
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cece:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	430a      	orrs	r2, r1
 800ced8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	699b      	ldr	r3, [r3, #24]
 800cede:	0c1b      	lsrs	r3, r3, #16
 800cee0:	f003 0204 	and.w	r2, r3, #4
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cee8:	f003 0310 	and.w	r3, r3, #16
 800ceec:	431a      	orrs	r2, r3
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cef2:	f003 0308 	and.w	r3, r3, #8
 800cef6:	431a      	orrs	r2, r3
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	68db      	ldr	r3, [r3, #12]
 800cefc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800cf00:	ea42 0103 	orr.w	r1, r2, r3
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	430a      	orrs	r2, r1
 800cf10:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2200      	movs	r2, #0
 800cf16:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800cf20:	2300      	movs	r3, #0
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3710      	adds	r7, #16
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}

0800cf2a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cf2a:	b580      	push	{r7, lr}
 800cf2c:	b088      	sub	sp, #32
 800cf2e:	af00      	add	r7, sp, #0
 800cf30:	60f8      	str	r0, [r7, #12]
 800cf32:	60b9      	str	r1, [r7, #8]
 800cf34:	603b      	str	r3, [r7, #0]
 800cf36:	4613      	mov	r3, r2
 800cf38:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cf3a:	f7fa fb03 	bl	8007544 <HAL_GetTick>
 800cf3e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800cf40:	88fb      	ldrh	r3, [r7, #6]
 800cf42:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800cf4a:	b2db      	uxtb	r3, r3
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	d001      	beq.n	800cf54 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800cf50:	2302      	movs	r3, #2
 800cf52:	e15c      	b.n	800d20e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d002      	beq.n	800cf60 <HAL_SPI_Transmit+0x36>
 800cf5a:	88fb      	ldrh	r3, [r7, #6]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d101      	bne.n	800cf64 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800cf60:	2301      	movs	r3, #1
 800cf62:	e154      	b.n	800d20e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800cf6a:	2b01      	cmp	r3, #1
 800cf6c:	d101      	bne.n	800cf72 <HAL_SPI_Transmit+0x48>
 800cf6e:	2302      	movs	r3, #2
 800cf70:	e14d      	b.n	800d20e <HAL_SPI_Transmit+0x2e4>
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	2201      	movs	r2, #1
 800cf76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	2203      	movs	r2, #3
 800cf7e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2200      	movs	r2, #0
 800cf86:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	68ba      	ldr	r2, [r7, #8]
 800cf8c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	88fa      	ldrh	r2, [r7, #6]
 800cf92:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	88fa      	ldrh	r2, [r7, #6]
 800cf98:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	689b      	ldr	r3, [r3, #8]
 800cfc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cfc4:	d10f      	bne.n	800cfe6 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	681a      	ldr	r2, [r3, #0]
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cfd4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	681a      	ldr	r2, [r3, #0]
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cfe4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cff0:	2b40      	cmp	r3, #64	@ 0x40
 800cff2:	d007      	beq.n	800d004 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	681a      	ldr	r2, [r3, #0]
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d002:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	68db      	ldr	r3, [r3, #12]
 800d008:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d00c:	d952      	bls.n	800d0b4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	685b      	ldr	r3, [r3, #4]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d002      	beq.n	800d01c <HAL_SPI_Transmit+0xf2>
 800d016:	8b7b      	ldrh	r3, [r7, #26]
 800d018:	2b01      	cmp	r3, #1
 800d01a:	d145      	bne.n	800d0a8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d020:	881a      	ldrh	r2, [r3, #0]
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d02c:	1c9a      	adds	r2, r3, #2
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d036:	b29b      	uxth	r3, r3
 800d038:	3b01      	subs	r3, #1
 800d03a:	b29a      	uxth	r2, r3
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d040:	e032      	b.n	800d0a8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	689b      	ldr	r3, [r3, #8]
 800d048:	f003 0302 	and.w	r3, r3, #2
 800d04c:	2b02      	cmp	r3, #2
 800d04e:	d112      	bne.n	800d076 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d054:	881a      	ldrh	r2, [r3, #0]
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d060:	1c9a      	adds	r2, r3, #2
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d06a:	b29b      	uxth	r3, r3
 800d06c:	3b01      	subs	r3, #1
 800d06e:	b29a      	uxth	r2, r3
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d074:	e018      	b.n	800d0a8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d076:	f7fa fa65 	bl	8007544 <HAL_GetTick>
 800d07a:	4602      	mov	r2, r0
 800d07c:	69fb      	ldr	r3, [r7, #28]
 800d07e:	1ad3      	subs	r3, r2, r3
 800d080:	683a      	ldr	r2, [r7, #0]
 800d082:	429a      	cmp	r2, r3
 800d084:	d803      	bhi.n	800d08e <HAL_SPI_Transmit+0x164>
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d08c:	d102      	bne.n	800d094 <HAL_SPI_Transmit+0x16a>
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d109      	bne.n	800d0a8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	2201      	movs	r2, #1
 800d098:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	2200      	movs	r2, #0
 800d0a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800d0a4:	2303      	movs	r3, #3
 800d0a6:	e0b2      	b.n	800d20e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d0ac:	b29b      	uxth	r3, r3
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d1c7      	bne.n	800d042 <HAL_SPI_Transmit+0x118>
 800d0b2:	e083      	b.n	800d1bc <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	685b      	ldr	r3, [r3, #4]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d002      	beq.n	800d0c2 <HAL_SPI_Transmit+0x198>
 800d0bc:	8b7b      	ldrh	r3, [r7, #26]
 800d0be:	2b01      	cmp	r3, #1
 800d0c0:	d177      	bne.n	800d1b2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d0c6:	b29b      	uxth	r3, r3
 800d0c8:	2b01      	cmp	r3, #1
 800d0ca:	d912      	bls.n	800d0f2 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0d0:	881a      	ldrh	r2, [r3, #0]
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0dc:	1c9a      	adds	r2, r3, #2
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d0e6:	b29b      	uxth	r3, r3
 800d0e8:	3b02      	subs	r3, #2
 800d0ea:	b29a      	uxth	r2, r3
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d0f0:	e05f      	b.n	800d1b2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	330c      	adds	r3, #12
 800d0fc:	7812      	ldrb	r2, [r2, #0]
 800d0fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d104:	1c5a      	adds	r2, r3, #1
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d10e:	b29b      	uxth	r3, r3
 800d110:	3b01      	subs	r3, #1
 800d112:	b29a      	uxth	r2, r3
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800d118:	e04b      	b.n	800d1b2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	689b      	ldr	r3, [r3, #8]
 800d120:	f003 0302 	and.w	r3, r3, #2
 800d124:	2b02      	cmp	r3, #2
 800d126:	d12b      	bne.n	800d180 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d12c:	b29b      	uxth	r3, r3
 800d12e:	2b01      	cmp	r3, #1
 800d130:	d912      	bls.n	800d158 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d136:	881a      	ldrh	r2, [r3, #0]
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d142:	1c9a      	adds	r2, r3, #2
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d14c:	b29b      	uxth	r3, r3
 800d14e:	3b02      	subs	r3, #2
 800d150:	b29a      	uxth	r2, r3
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d156:	e02c      	b.n	800d1b2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	330c      	adds	r3, #12
 800d162:	7812      	ldrb	r2, [r2, #0]
 800d164:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d16a:	1c5a      	adds	r2, r3, #1
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d174:	b29b      	uxth	r3, r3
 800d176:	3b01      	subs	r3, #1
 800d178:	b29a      	uxth	r2, r3
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d17e:	e018      	b.n	800d1b2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d180:	f7fa f9e0 	bl	8007544 <HAL_GetTick>
 800d184:	4602      	mov	r2, r0
 800d186:	69fb      	ldr	r3, [r7, #28]
 800d188:	1ad3      	subs	r3, r2, r3
 800d18a:	683a      	ldr	r2, [r7, #0]
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d803      	bhi.n	800d198 <HAL_SPI_Transmit+0x26e>
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d196:	d102      	bne.n	800d19e <HAL_SPI_Transmit+0x274>
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d109      	bne.n	800d1b2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	2201      	movs	r2, #1
 800d1a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800d1ae:	2303      	movs	r3, #3
 800d1b0:	e02d      	b.n	800d20e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d1b6:	b29b      	uxth	r3, r3
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d1ae      	bne.n	800d11a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d1bc:	69fa      	ldr	r2, [r7, #28]
 800d1be:	6839      	ldr	r1, [r7, #0]
 800d1c0:	68f8      	ldr	r0, [r7, #12]
 800d1c2:	f000 fdfd 	bl	800ddc0 <SPI_EndRxTxTransaction>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d002      	beq.n	800d1d2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	2220      	movs	r2, #32
 800d1d0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	689b      	ldr	r3, [r3, #8]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d10a      	bne.n	800d1f0 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d1da:	2300      	movs	r3, #0
 800d1dc:	617b      	str	r3, [r7, #20]
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	68db      	ldr	r3, [r3, #12]
 800d1e4:	617b      	str	r3, [r7, #20]
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	689b      	ldr	r3, [r3, #8]
 800d1ec:	617b      	str	r3, [r7, #20]
 800d1ee:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d204:	2b00      	cmp	r3, #0
 800d206:	d001      	beq.n	800d20c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800d208:	2301      	movs	r3, #1
 800d20a:	e000      	b.n	800d20e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800d20c:	2300      	movs	r3, #0
  }
}
 800d20e:	4618      	mov	r0, r3
 800d210:	3720      	adds	r7, #32
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}

0800d216 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800d216:	b580      	push	{r7, lr}
 800d218:	b08a      	sub	sp, #40	@ 0x28
 800d21a:	af00      	add	r7, sp, #0
 800d21c:	60f8      	str	r0, [r7, #12]
 800d21e:	60b9      	str	r1, [r7, #8]
 800d220:	607a      	str	r2, [r7, #4]
 800d222:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d224:	2301      	movs	r3, #1
 800d226:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d228:	f7fa f98c 	bl	8007544 <HAL_GetTick>
 800d22c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d234:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	685b      	ldr	r3, [r3, #4]
 800d23a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800d23c:	887b      	ldrh	r3, [r7, #2]
 800d23e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800d240:	887b      	ldrh	r3, [r7, #2]
 800d242:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d244:	7ffb      	ldrb	r3, [r7, #31]
 800d246:	2b01      	cmp	r3, #1
 800d248:	d00c      	beq.n	800d264 <HAL_SPI_TransmitReceive+0x4e>
 800d24a:	69bb      	ldr	r3, [r7, #24]
 800d24c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d250:	d106      	bne.n	800d260 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	689b      	ldr	r3, [r3, #8]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d102      	bne.n	800d260 <HAL_SPI_TransmitReceive+0x4a>
 800d25a:	7ffb      	ldrb	r3, [r7, #31]
 800d25c:	2b04      	cmp	r3, #4
 800d25e:	d001      	beq.n	800d264 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800d260:	2302      	movs	r3, #2
 800d262:	e1f3      	b.n	800d64c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d005      	beq.n	800d276 <HAL_SPI_TransmitReceive+0x60>
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d002      	beq.n	800d276 <HAL_SPI_TransmitReceive+0x60>
 800d270:	887b      	ldrh	r3, [r7, #2]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d101      	bne.n	800d27a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800d276:	2301      	movs	r3, #1
 800d278:	e1e8      	b.n	800d64c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800d280:	2b01      	cmp	r3, #1
 800d282:	d101      	bne.n	800d288 <HAL_SPI_TransmitReceive+0x72>
 800d284:	2302      	movs	r3, #2
 800d286:	e1e1      	b.n	800d64c <HAL_SPI_TransmitReceive+0x436>
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	2201      	movs	r2, #1
 800d28c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d296:	b2db      	uxtb	r3, r3
 800d298:	2b04      	cmp	r3, #4
 800d29a:	d003      	beq.n	800d2a4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	2205      	movs	r2, #5
 800d2a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	687a      	ldr	r2, [r7, #4]
 800d2ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	887a      	ldrh	r2, [r7, #2]
 800d2b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	887a      	ldrh	r2, [r7, #2]
 800d2bc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	68ba      	ldr	r2, [r7, #8]
 800d2c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	887a      	ldrh	r2, [r7, #2]
 800d2ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	887a      	ldrh	r2, [r7, #2]
 800d2d0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	68db      	ldr	r3, [r3, #12]
 800d2e2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d2e6:	d802      	bhi.n	800d2ee <HAL_SPI_TransmitReceive+0xd8>
 800d2e8:	8abb      	ldrh	r3, [r7, #20]
 800d2ea:	2b01      	cmp	r3, #1
 800d2ec:	d908      	bls.n	800d300 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	685a      	ldr	r2, [r3, #4]
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d2fc:	605a      	str	r2, [r3, #4]
 800d2fe:	e007      	b.n	800d310 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	685a      	ldr	r2, [r3, #4]
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d30e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d31a:	2b40      	cmp	r3, #64	@ 0x40
 800d31c:	d007      	beq.n	800d32e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	681a      	ldr	r2, [r3, #0]
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d32c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	68db      	ldr	r3, [r3, #12]
 800d332:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d336:	f240 8083 	bls.w	800d440 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	685b      	ldr	r3, [r3, #4]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d002      	beq.n	800d348 <HAL_SPI_TransmitReceive+0x132>
 800d342:	8afb      	ldrh	r3, [r7, #22]
 800d344:	2b01      	cmp	r3, #1
 800d346:	d16f      	bne.n	800d428 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d34c:	881a      	ldrh	r2, [r3, #0]
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d358:	1c9a      	adds	r2, r3, #2
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d362:	b29b      	uxth	r3, r3
 800d364:	3b01      	subs	r3, #1
 800d366:	b29a      	uxth	r2, r3
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d36c:	e05c      	b.n	800d428 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	689b      	ldr	r3, [r3, #8]
 800d374:	f003 0302 	and.w	r3, r3, #2
 800d378:	2b02      	cmp	r3, #2
 800d37a:	d11b      	bne.n	800d3b4 <HAL_SPI_TransmitReceive+0x19e>
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d380:	b29b      	uxth	r3, r3
 800d382:	2b00      	cmp	r3, #0
 800d384:	d016      	beq.n	800d3b4 <HAL_SPI_TransmitReceive+0x19e>
 800d386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d388:	2b01      	cmp	r3, #1
 800d38a:	d113      	bne.n	800d3b4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d390:	881a      	ldrh	r2, [r3, #0]
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d39c:	1c9a      	adds	r2, r3, #2
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d3a6:	b29b      	uxth	r3, r3
 800d3a8:	3b01      	subs	r3, #1
 800d3aa:	b29a      	uxth	r2, r3
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	689b      	ldr	r3, [r3, #8]
 800d3ba:	f003 0301 	and.w	r3, r3, #1
 800d3be:	2b01      	cmp	r3, #1
 800d3c0:	d11c      	bne.n	800d3fc <HAL_SPI_TransmitReceive+0x1e6>
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d3c8:	b29b      	uxth	r3, r3
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d016      	beq.n	800d3fc <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	68da      	ldr	r2, [r3, #12]
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3d8:	b292      	uxth	r2, r2
 800d3da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3e0:	1c9a      	adds	r2, r3, #2
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d3ec:	b29b      	uxth	r3, r3
 800d3ee:	3b01      	subs	r3, #1
 800d3f0:	b29a      	uxth	r2, r3
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d3fc:	f7fa f8a2 	bl	8007544 <HAL_GetTick>
 800d400:	4602      	mov	r2, r0
 800d402:	6a3b      	ldr	r3, [r7, #32]
 800d404:	1ad3      	subs	r3, r2, r3
 800d406:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d408:	429a      	cmp	r2, r3
 800d40a:	d80d      	bhi.n	800d428 <HAL_SPI_TransmitReceive+0x212>
 800d40c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d40e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d412:	d009      	beq.n	800d428 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	2201      	movs	r2, #1
 800d418:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	2200      	movs	r2, #0
 800d420:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800d424:	2303      	movs	r3, #3
 800d426:	e111      	b.n	800d64c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d42c:	b29b      	uxth	r3, r3
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d19d      	bne.n	800d36e <HAL_SPI_TransmitReceive+0x158>
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d438:	b29b      	uxth	r3, r3
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d197      	bne.n	800d36e <HAL_SPI_TransmitReceive+0x158>
 800d43e:	e0e5      	b.n	800d60c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	685b      	ldr	r3, [r3, #4]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d003      	beq.n	800d450 <HAL_SPI_TransmitReceive+0x23a>
 800d448:	8afb      	ldrh	r3, [r7, #22]
 800d44a:	2b01      	cmp	r3, #1
 800d44c:	f040 80d1 	bne.w	800d5f2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d454:	b29b      	uxth	r3, r3
 800d456:	2b01      	cmp	r3, #1
 800d458:	d912      	bls.n	800d480 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d45e:	881a      	ldrh	r2, [r3, #0]
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d46a:	1c9a      	adds	r2, r3, #2
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d474:	b29b      	uxth	r3, r3
 800d476:	3b02      	subs	r3, #2
 800d478:	b29a      	uxth	r2, r3
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d47e:	e0b8      	b.n	800d5f2 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	330c      	adds	r3, #12
 800d48a:	7812      	ldrb	r2, [r2, #0]
 800d48c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d492:	1c5a      	adds	r2, r3, #1
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d49c:	b29b      	uxth	r3, r3
 800d49e:	3b01      	subs	r3, #1
 800d4a0:	b29a      	uxth	r2, r3
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d4a6:	e0a4      	b.n	800d5f2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	689b      	ldr	r3, [r3, #8]
 800d4ae:	f003 0302 	and.w	r3, r3, #2
 800d4b2:	2b02      	cmp	r3, #2
 800d4b4:	d134      	bne.n	800d520 <HAL_SPI_TransmitReceive+0x30a>
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d4ba:	b29b      	uxth	r3, r3
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d02f      	beq.n	800d520 <HAL_SPI_TransmitReceive+0x30a>
 800d4c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4c2:	2b01      	cmp	r3, #1
 800d4c4:	d12c      	bne.n	800d520 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d4ca:	b29b      	uxth	r3, r3
 800d4cc:	2b01      	cmp	r3, #1
 800d4ce:	d912      	bls.n	800d4f6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4d4:	881a      	ldrh	r2, [r3, #0]
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4e0:	1c9a      	adds	r2, r3, #2
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d4ea:	b29b      	uxth	r3, r3
 800d4ec:	3b02      	subs	r3, #2
 800d4ee:	b29a      	uxth	r2, r3
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d4f4:	e012      	b.n	800d51c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	330c      	adds	r3, #12
 800d500:	7812      	ldrb	r2, [r2, #0]
 800d502:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d508:	1c5a      	adds	r2, r3, #1
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d512:	b29b      	uxth	r3, r3
 800d514:	3b01      	subs	r3, #1
 800d516:	b29a      	uxth	r2, r3
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d51c:	2300      	movs	r3, #0
 800d51e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	689b      	ldr	r3, [r3, #8]
 800d526:	f003 0301 	and.w	r3, r3, #1
 800d52a:	2b01      	cmp	r3, #1
 800d52c:	d148      	bne.n	800d5c0 <HAL_SPI_TransmitReceive+0x3aa>
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d534:	b29b      	uxth	r3, r3
 800d536:	2b00      	cmp	r3, #0
 800d538:	d042      	beq.n	800d5c0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d540:	b29b      	uxth	r3, r3
 800d542:	2b01      	cmp	r3, #1
 800d544:	d923      	bls.n	800d58e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	68da      	ldr	r2, [r3, #12]
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d550:	b292      	uxth	r2, r2
 800d552:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d558:	1c9a      	adds	r2, r3, #2
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d564:	b29b      	uxth	r3, r3
 800d566:	3b02      	subs	r3, #2
 800d568:	b29a      	uxth	r2, r3
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d576:	b29b      	uxth	r3, r3
 800d578:	2b01      	cmp	r3, #1
 800d57a:	d81f      	bhi.n	800d5bc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	685a      	ldr	r2, [r3, #4]
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d58a:	605a      	str	r2, [r3, #4]
 800d58c:	e016      	b.n	800d5bc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	f103 020c 	add.w	r2, r3, #12
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d59a:	7812      	ldrb	r2, [r2, #0]
 800d59c:	b2d2      	uxtb	r2, r2
 800d59e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5a4:	1c5a      	adds	r2, r3, #1
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d5b0:	b29b      	uxth	r3, r3
 800d5b2:	3b01      	subs	r3, #1
 800d5b4:	b29a      	uxth	r2, r3
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d5bc:	2301      	movs	r3, #1
 800d5be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d5c0:	f7f9 ffc0 	bl	8007544 <HAL_GetTick>
 800d5c4:	4602      	mov	r2, r0
 800d5c6:	6a3b      	ldr	r3, [r7, #32]
 800d5c8:	1ad3      	subs	r3, r2, r3
 800d5ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	d803      	bhi.n	800d5d8 <HAL_SPI_TransmitReceive+0x3c2>
 800d5d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5d6:	d102      	bne.n	800d5de <HAL_SPI_TransmitReceive+0x3c8>
 800d5d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d109      	bne.n	800d5f2 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	2201      	movs	r2, #1
 800d5e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800d5ee:	2303      	movs	r3, #3
 800d5f0:	e02c      	b.n	800d64c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d5f6:	b29b      	uxth	r3, r3
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	f47f af55 	bne.w	800d4a8 <HAL_SPI_TransmitReceive+0x292>
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d604:	b29b      	uxth	r3, r3
 800d606:	2b00      	cmp	r3, #0
 800d608:	f47f af4e 	bne.w	800d4a8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d60c:	6a3a      	ldr	r2, [r7, #32]
 800d60e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d610:	68f8      	ldr	r0, [r7, #12]
 800d612:	f000 fbd5 	bl	800ddc0 <SPI_EndRxTxTransaction>
 800d616:	4603      	mov	r3, r0
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d008      	beq.n	800d62e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	2220      	movs	r2, #32
 800d620:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	2200      	movs	r2, #0
 800d626:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800d62a:	2301      	movs	r3, #1
 800d62c:	e00e      	b.n	800d64c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	2201      	movs	r2, #1
 800d632:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	2200      	movs	r2, #0
 800d63a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d642:	2b00      	cmp	r3, #0
 800d644:	d001      	beq.n	800d64a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800d646:	2301      	movs	r3, #1
 800d648:	e000      	b.n	800d64c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800d64a:	2300      	movs	r3, #0
  }
}
 800d64c:	4618      	mov	r0, r3
 800d64e:	3728      	adds	r7, #40	@ 0x28
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}

0800d654 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b084      	sub	sp, #16
 800d658:	af00      	add	r7, sp, #0
 800d65a:	60f8      	str	r0, [r7, #12]
 800d65c:	60b9      	str	r1, [r7, #8]
 800d65e:	4613      	mov	r3, r2
 800d660:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d668:	b2db      	uxtb	r3, r3
 800d66a:	2b01      	cmp	r3, #1
 800d66c:	d001      	beq.n	800d672 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800d66e:	2302      	movs	r3, #2
 800d670:	e0d4      	b.n	800d81c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d002      	beq.n	800d67e <HAL_SPI_Transmit_DMA+0x2a>
 800d678:	88fb      	ldrh	r3, [r7, #6]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d101      	bne.n	800d682 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800d67e:	2301      	movs	r3, #1
 800d680:	e0cc      	b.n	800d81c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800d688:	2b01      	cmp	r3, #1
 800d68a:	d101      	bne.n	800d690 <HAL_SPI_Transmit_DMA+0x3c>
 800d68c:	2302      	movs	r3, #2
 800d68e:	e0c5      	b.n	800d81c <HAL_SPI_Transmit_DMA+0x1c8>
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	2201      	movs	r2, #1
 800d694:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	2203      	movs	r2, #3
 800d69c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	68ba      	ldr	r2, [r7, #8]
 800d6aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	88fa      	ldrh	r2, [r7, #6]
 800d6b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	88fa      	ldrh	r2, [r7, #6]
 800d6b6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	689b      	ldr	r3, [r3, #8]
 800d6de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d6e2:	d10f      	bne.n	800d704 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	681a      	ldr	r2, [r3, #0]
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d6f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	681a      	ldr	r2, [r3, #0]
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d702:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d708:	4a46      	ldr	r2, [pc, #280]	@ (800d824 <HAL_SPI_Transmit_DMA+0x1d0>)
 800d70a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d710:	4a45      	ldr	r2, [pc, #276]	@ (800d828 <HAL_SPI_Transmit_DMA+0x1d4>)
 800d712:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d718:	4a44      	ldr	r2, [pc, #272]	@ (800d82c <HAL_SPI_Transmit_DMA+0x1d8>)
 800d71a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d720:	2200      	movs	r2, #0
 800d722:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	685a      	ldr	r2, [r3, #4]
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800d732:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	68db      	ldr	r3, [r3, #12]
 800d738:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d73c:	d82d      	bhi.n	800d79a <HAL_SPI_Transmit_DMA+0x146>
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d742:	699b      	ldr	r3, [r3, #24]
 800d744:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d748:	d127      	bne.n	800d79a <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d74e:	b29b      	uxth	r3, r3
 800d750:	f003 0301 	and.w	r3, r3, #1
 800d754:	2b00      	cmp	r3, #0
 800d756:	d10f      	bne.n	800d778 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	685a      	ldr	r2, [r3, #4]
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800d766:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d76c:	b29b      	uxth	r3, r3
 800d76e:	085b      	lsrs	r3, r3, #1
 800d770:	b29a      	uxth	r2, r3
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d776:	e010      	b.n	800d79a <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	685a      	ldr	r2, [r3, #4]
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d786:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d78c:	b29b      	uxth	r3, r3
 800d78e:	085b      	lsrs	r3, r3, #1
 800d790:	b29b      	uxth	r3, r3
 800d792:	3301      	adds	r3, #1
 800d794:	b29a      	uxth	r2, r3
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7a2:	4619      	mov	r1, r3
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	330c      	adds	r3, #12
 800d7aa:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d7b0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d7b2:	f7fa f92d 	bl	8007a10 <HAL_DMA_Start_IT>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d00b      	beq.n	800d7d4 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d7c0:	f043 0210 	orr.w	r2, r3, #16
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800d7d0:	2301      	movs	r3, #1
 800d7d2:	e023      	b.n	800d81c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7de:	2b40      	cmp	r3, #64	@ 0x40
 800d7e0:	d007      	beq.n	800d7f2 <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	681a      	ldr	r2, [r3, #0]
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d7f0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	685a      	ldr	r2, [r3, #4]
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f042 0220 	orr.w	r2, r2, #32
 800d808:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	685a      	ldr	r2, [r3, #4]
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	f042 0202 	orr.w	r2, r2, #2
 800d818:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d81a:	2300      	movs	r3, #0
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3710      	adds	r7, #16
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}
 800d824:	0800daff 	.word	0x0800daff
 800d828:	0800da59 	.word	0x0800da59
 800d82c:	0800db1b 	.word	0x0800db1b

0800d830 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b088      	sub	sp, #32
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	685b      	ldr	r3, [r3, #4]
 800d83e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	689b      	ldr	r3, [r3, #8]
 800d846:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d848:	69bb      	ldr	r3, [r7, #24]
 800d84a:	099b      	lsrs	r3, r3, #6
 800d84c:	f003 0301 	and.w	r3, r3, #1
 800d850:	2b00      	cmp	r3, #0
 800d852:	d10f      	bne.n	800d874 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d854:	69bb      	ldr	r3, [r7, #24]
 800d856:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d00a      	beq.n	800d874 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d85e:	69fb      	ldr	r3, [r7, #28]
 800d860:	099b      	lsrs	r3, r3, #6
 800d862:	f003 0301 	and.w	r3, r3, #1
 800d866:	2b00      	cmp	r3, #0
 800d868:	d004      	beq.n	800d874 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	4798      	blx	r3
    return;
 800d872:	e0d7      	b.n	800da24 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800d874:	69bb      	ldr	r3, [r7, #24]
 800d876:	085b      	lsrs	r3, r3, #1
 800d878:	f003 0301 	and.w	r3, r3, #1
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d00a      	beq.n	800d896 <HAL_SPI_IRQHandler+0x66>
 800d880:	69fb      	ldr	r3, [r7, #28]
 800d882:	09db      	lsrs	r3, r3, #7
 800d884:	f003 0301 	and.w	r3, r3, #1
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d004      	beq.n	800d896 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	4798      	blx	r3
    return;
 800d894:	e0c6      	b.n	800da24 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d896:	69bb      	ldr	r3, [r7, #24]
 800d898:	095b      	lsrs	r3, r3, #5
 800d89a:	f003 0301 	and.w	r3, r3, #1
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d10c      	bne.n	800d8bc <HAL_SPI_IRQHandler+0x8c>
 800d8a2:	69bb      	ldr	r3, [r7, #24]
 800d8a4:	099b      	lsrs	r3, r3, #6
 800d8a6:	f003 0301 	and.w	r3, r3, #1
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d106      	bne.n	800d8bc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800d8ae:	69bb      	ldr	r3, [r7, #24]
 800d8b0:	0a1b      	lsrs	r3, r3, #8
 800d8b2:	f003 0301 	and.w	r3, r3, #1
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	f000 80b4 	beq.w	800da24 <HAL_SPI_IRQHandler+0x1f4>
 800d8bc:	69fb      	ldr	r3, [r7, #28]
 800d8be:	095b      	lsrs	r3, r3, #5
 800d8c0:	f003 0301 	and.w	r3, r3, #1
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	f000 80ad 	beq.w	800da24 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d8ca:	69bb      	ldr	r3, [r7, #24]
 800d8cc:	099b      	lsrs	r3, r3, #6
 800d8ce:	f003 0301 	and.w	r3, r3, #1
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d023      	beq.n	800d91e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d8dc:	b2db      	uxtb	r3, r3
 800d8de:	2b03      	cmp	r3, #3
 800d8e0:	d011      	beq.n	800d906 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d8e6:	f043 0204 	orr.w	r2, r3, #4
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	617b      	str	r3, [r7, #20]
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	68db      	ldr	r3, [r3, #12]
 800d8f8:	617b      	str	r3, [r7, #20]
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	689b      	ldr	r3, [r3, #8]
 800d900:	617b      	str	r3, [r7, #20]
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	e00b      	b.n	800d91e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d906:	2300      	movs	r3, #0
 800d908:	613b      	str	r3, [r7, #16]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	68db      	ldr	r3, [r3, #12]
 800d910:	613b      	str	r3, [r7, #16]
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	689b      	ldr	r3, [r3, #8]
 800d918:	613b      	str	r3, [r7, #16]
 800d91a:	693b      	ldr	r3, [r7, #16]
        return;
 800d91c:	e082      	b.n	800da24 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800d91e:	69bb      	ldr	r3, [r7, #24]
 800d920:	095b      	lsrs	r3, r3, #5
 800d922:	f003 0301 	and.w	r3, r3, #1
 800d926:	2b00      	cmp	r3, #0
 800d928:	d014      	beq.n	800d954 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d92e:	f043 0201 	orr.w	r2, r3, #1
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d936:	2300      	movs	r3, #0
 800d938:	60fb      	str	r3, [r7, #12]
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	689b      	ldr	r3, [r3, #8]
 800d940:	60fb      	str	r3, [r7, #12]
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	681a      	ldr	r2, [r3, #0]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d950:	601a      	str	r2, [r3, #0]
 800d952:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800d954:	69bb      	ldr	r3, [r7, #24]
 800d956:	0a1b      	lsrs	r3, r3, #8
 800d958:	f003 0301 	and.w	r3, r3, #1
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d00c      	beq.n	800d97a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d964:	f043 0208 	orr.w	r2, r3, #8
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d96c:	2300      	movs	r3, #0
 800d96e:	60bb      	str	r3, [r7, #8]
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	689b      	ldr	r3, [r3, #8]
 800d976:	60bb      	str	r3, [r7, #8]
 800d978:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d04f      	beq.n	800da22 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	685a      	ldr	r2, [r3, #4]
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d990:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2201      	movs	r2, #1
 800d996:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800d99a:	69fb      	ldr	r3, [r7, #28]
 800d99c:	f003 0302 	and.w	r3, r3, #2
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d104      	bne.n	800d9ae <HAL_SPI_IRQHandler+0x17e>
 800d9a4:	69fb      	ldr	r3, [r7, #28]
 800d9a6:	f003 0301 	and.w	r3, r3, #1
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d034      	beq.n	800da18 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	685a      	ldr	r2, [r3, #4]
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	f022 0203 	bic.w	r2, r2, #3
 800d9bc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d011      	beq.n	800d9ea <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d9ca:	4a18      	ldr	r2, [pc, #96]	@ (800da2c <HAL_SPI_IRQHandler+0x1fc>)
 800d9cc:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7fa f897 	bl	8007b06 <HAL_DMA_Abort_IT>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d005      	beq.n	800d9ea <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d9e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d016      	beq.n	800da20 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d9f6:	4a0d      	ldr	r2, [pc, #52]	@ (800da2c <HAL_SPI_IRQHandler+0x1fc>)
 800d9f8:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d9fe:	4618      	mov	r0, r3
 800da00:	f7fa f881 	bl	8007b06 <HAL_DMA_Abort_IT>
 800da04:	4603      	mov	r3, r0
 800da06:	2b00      	cmp	r3, #0
 800da08:	d00a      	beq.n	800da20 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800da0e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800da16:	e003      	b.n	800da20 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f000 f813 	bl	800da44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800da1e:	e000      	b.n	800da22 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800da20:	bf00      	nop
    return;
 800da22:	bf00      	nop
  }
}
 800da24:	3720      	adds	r7, #32
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}
 800da2a:	bf00      	nop
 800da2c:	0800db5b 	.word	0x0800db5b

0800da30 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800da30:	b480      	push	{r7}
 800da32:	b083      	sub	sp, #12
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800da38:	bf00      	nop
 800da3a:	370c      	adds	r7, #12
 800da3c:	46bd      	mov	sp, r7
 800da3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da42:	4770      	bx	lr

0800da44 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800da44:	b480      	push	{r7}
 800da46:	b083      	sub	sp, #12
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800da4c:	bf00      	nop
 800da4e:	370c      	adds	r7, #12
 800da50:	46bd      	mov	sp, r7
 800da52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da56:	4770      	bx	lr

0800da58 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b086      	sub	sp, #24
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da64:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800da66:	f7f9 fd6d 	bl	8007544 <HAL_GetTick>
 800da6a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	f003 0320 	and.w	r3, r3, #32
 800da76:	2b20      	cmp	r3, #32
 800da78:	d03b      	beq.n	800daf2 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	685a      	ldr	r2, [r3, #4]
 800da80:	697b      	ldr	r3, [r7, #20]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	f022 0220 	bic.w	r2, r2, #32
 800da88:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800da8a:	697b      	ldr	r3, [r7, #20]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	685a      	ldr	r2, [r3, #4]
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	f022 0202 	bic.w	r2, r2, #2
 800da98:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800da9a:	693a      	ldr	r2, [r7, #16]
 800da9c:	2164      	movs	r1, #100	@ 0x64
 800da9e:	6978      	ldr	r0, [r7, #20]
 800daa0:	f000 f98e 	bl	800ddc0 <SPI_EndRxTxTransaction>
 800daa4:	4603      	mov	r3, r0
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d005      	beq.n	800dab6 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800daae:	f043 0220 	orr.w	r2, r3, #32
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	689b      	ldr	r3, [r3, #8]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d10a      	bne.n	800dad4 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dabe:	2300      	movs	r3, #0
 800dac0:	60fb      	str	r3, [r7, #12]
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	68db      	ldr	r3, [r3, #12]
 800dac8:	60fb      	str	r3, [r7, #12]
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	689b      	ldr	r3, [r3, #8]
 800dad0:	60fb      	str	r3, [r7, #12]
 800dad2:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	2200      	movs	r2, #0
 800dad8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	2201      	movs	r2, #1
 800dade:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d003      	beq.n	800daf2 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800daea:	6978      	ldr	r0, [r7, #20]
 800daec:	f7ff ffaa 	bl	800da44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800daf0:	e002      	b.n	800daf8 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800daf2:	6978      	ldr	r0, [r7, #20]
 800daf4:	f7f8 fd72 	bl	80065dc <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800daf8:	3718      	adds	r7, #24
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}

0800dafe <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dafe:	b580      	push	{r7, lr}
 800db00:	b084      	sub	sp, #16
 800db02:	af00      	add	r7, sp, #0
 800db04:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db0a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800db0c:	68f8      	ldr	r0, [r7, #12]
 800db0e:	f7ff ff8f 	bl	800da30 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800db12:	bf00      	nop
 800db14:	3710      	adds	r7, #16
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}

0800db1a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800db1a:	b580      	push	{r7, lr}
 800db1c:	b084      	sub	sp, #16
 800db1e:	af00      	add	r7, sp, #0
 800db20:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db26:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	685a      	ldr	r2, [r3, #4]
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	f022 0203 	bic.w	r2, r2, #3
 800db36:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800db3c:	f043 0210 	orr.w	r2, r3, #16
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	2201      	movs	r2, #1
 800db48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800db4c:	68f8      	ldr	r0, [r7, #12]
 800db4e:	f7ff ff79 	bl	800da44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800db52:	bf00      	nop
 800db54:	3710      	adds	r7, #16
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}

0800db5a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800db5a:	b580      	push	{r7, lr}
 800db5c:	b084      	sub	sp, #16
 800db5e:	af00      	add	r7, sp, #0
 800db60:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db66:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	2200      	movs	r2, #0
 800db6c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	2200      	movs	r2, #0
 800db74:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800db76:	68f8      	ldr	r0, [r7, #12]
 800db78:	f7ff ff64 	bl	800da44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800db7c:	bf00      	nop
 800db7e:	3710      	adds	r7, #16
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}

0800db84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b088      	sub	sp, #32
 800db88:	af00      	add	r7, sp, #0
 800db8a:	60f8      	str	r0, [r7, #12]
 800db8c:	60b9      	str	r1, [r7, #8]
 800db8e:	603b      	str	r3, [r7, #0]
 800db90:	4613      	mov	r3, r2
 800db92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800db94:	f7f9 fcd6 	bl	8007544 <HAL_GetTick>
 800db98:	4602      	mov	r2, r0
 800db9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db9c:	1a9b      	subs	r3, r3, r2
 800db9e:	683a      	ldr	r2, [r7, #0]
 800dba0:	4413      	add	r3, r2
 800dba2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800dba4:	f7f9 fcce 	bl	8007544 <HAL_GetTick>
 800dba8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800dbaa:	4b39      	ldr	r3, [pc, #228]	@ (800dc90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	015b      	lsls	r3, r3, #5
 800dbb0:	0d1b      	lsrs	r3, r3, #20
 800dbb2:	69fa      	ldr	r2, [r7, #28]
 800dbb4:	fb02 f303 	mul.w	r3, r2, r3
 800dbb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dbba:	e054      	b.n	800dc66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbc2:	d050      	beq.n	800dc66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800dbc4:	f7f9 fcbe 	bl	8007544 <HAL_GetTick>
 800dbc8:	4602      	mov	r2, r0
 800dbca:	69bb      	ldr	r3, [r7, #24]
 800dbcc:	1ad3      	subs	r3, r2, r3
 800dbce:	69fa      	ldr	r2, [r7, #28]
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	d902      	bls.n	800dbda <SPI_WaitFlagStateUntilTimeout+0x56>
 800dbd4:	69fb      	ldr	r3, [r7, #28]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d13d      	bne.n	800dc56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	685a      	ldr	r2, [r3, #4]
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800dbe8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	685b      	ldr	r3, [r3, #4]
 800dbee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800dbf2:	d111      	bne.n	800dc18 <SPI_WaitFlagStateUntilTimeout+0x94>
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	689b      	ldr	r3, [r3, #8]
 800dbf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dbfc:	d004      	beq.n	800dc08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	689b      	ldr	r3, [r3, #8]
 800dc02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dc06:	d107      	bne.n	800dc18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	681a      	ldr	r2, [r3, #0]
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dc16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dc20:	d10f      	bne.n	800dc42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	681a      	ldr	r2, [r3, #0]
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800dc30:	601a      	str	r2, [r3, #0]
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	681a      	ldr	r2, [r3, #0]
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800dc40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	2201      	movs	r2, #1
 800dc46:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800dc52:	2303      	movs	r3, #3
 800dc54:	e017      	b.n	800dc86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d101      	bne.n	800dc60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800dc60:	697b      	ldr	r3, [r7, #20]
 800dc62:	3b01      	subs	r3, #1
 800dc64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	689a      	ldr	r2, [r3, #8]
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	4013      	ands	r3, r2
 800dc70:	68ba      	ldr	r2, [r7, #8]
 800dc72:	429a      	cmp	r2, r3
 800dc74:	bf0c      	ite	eq
 800dc76:	2301      	moveq	r3, #1
 800dc78:	2300      	movne	r3, #0
 800dc7a:	b2db      	uxtb	r3, r3
 800dc7c:	461a      	mov	r2, r3
 800dc7e:	79fb      	ldrb	r3, [r7, #7]
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d19b      	bne.n	800dbbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800dc84:	2300      	movs	r3, #0
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3720      	adds	r7, #32
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}
 800dc8e:	bf00      	nop
 800dc90:	20000024 	.word	0x20000024

0800dc94 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b08a      	sub	sp, #40	@ 0x28
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	60f8      	str	r0, [r7, #12]
 800dc9c:	60b9      	str	r1, [r7, #8]
 800dc9e:	607a      	str	r2, [r7, #4]
 800dca0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800dca2:	2300      	movs	r3, #0
 800dca4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800dca6:	f7f9 fc4d 	bl	8007544 <HAL_GetTick>
 800dcaa:	4602      	mov	r2, r0
 800dcac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcae:	1a9b      	subs	r3, r3, r2
 800dcb0:	683a      	ldr	r2, [r7, #0]
 800dcb2:	4413      	add	r3, r2
 800dcb4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800dcb6:	f7f9 fc45 	bl	8007544 <HAL_GetTick>
 800dcba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	330c      	adds	r3, #12
 800dcc2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800dcc4:	4b3d      	ldr	r3, [pc, #244]	@ (800ddbc <SPI_WaitFifoStateUntilTimeout+0x128>)
 800dcc6:	681a      	ldr	r2, [r3, #0]
 800dcc8:	4613      	mov	r3, r2
 800dcca:	009b      	lsls	r3, r3, #2
 800dccc:	4413      	add	r3, r2
 800dcce:	00da      	lsls	r2, r3, #3
 800dcd0:	1ad3      	subs	r3, r2, r3
 800dcd2:	0d1b      	lsrs	r3, r3, #20
 800dcd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dcd6:	fb02 f303 	mul.w	r3, r2, r3
 800dcda:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800dcdc:	e060      	b.n	800dda0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800dce4:	d107      	bne.n	800dcf6 <SPI_WaitFifoStateUntilTimeout+0x62>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d104      	bne.n	800dcf6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800dcec:	69fb      	ldr	r3, [r7, #28]
 800dcee:	781b      	ldrb	r3, [r3, #0]
 800dcf0:	b2db      	uxtb	r3, r3
 800dcf2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800dcf4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcfc:	d050      	beq.n	800dda0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800dcfe:	f7f9 fc21 	bl	8007544 <HAL_GetTick>
 800dd02:	4602      	mov	r2, r0
 800dd04:	6a3b      	ldr	r3, [r7, #32]
 800dd06:	1ad3      	subs	r3, r2, r3
 800dd08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd0a:	429a      	cmp	r2, r3
 800dd0c:	d902      	bls.n	800dd14 <SPI_WaitFifoStateUntilTimeout+0x80>
 800dd0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d13d      	bne.n	800dd90 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	685a      	ldr	r2, [r3, #4]
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800dd22:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	685b      	ldr	r3, [r3, #4]
 800dd28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800dd2c:	d111      	bne.n	800dd52 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	689b      	ldr	r3, [r3, #8]
 800dd32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dd36:	d004      	beq.n	800dd42 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	689b      	ldr	r3, [r3, #8]
 800dd3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dd40:	d107      	bne.n	800dd52 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	681a      	ldr	r2, [r3, #0]
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dd50:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dd5a:	d10f      	bne.n	800dd7c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	681a      	ldr	r2, [r3, #0]
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800dd6a:	601a      	str	r2, [r3, #0]
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	681a      	ldr	r2, [r3, #0]
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800dd7a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	2201      	movs	r2, #1
 800dd80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	2200      	movs	r2, #0
 800dd88:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800dd8c:	2303      	movs	r3, #3
 800dd8e:	e010      	b.n	800ddb2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800dd90:	69bb      	ldr	r3, [r7, #24]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d101      	bne.n	800dd9a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800dd96:	2300      	movs	r3, #0
 800dd98:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800dd9a:	69bb      	ldr	r3, [r7, #24]
 800dd9c:	3b01      	subs	r3, #1
 800dd9e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	689a      	ldr	r2, [r3, #8]
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	4013      	ands	r3, r2
 800ddaa:	687a      	ldr	r2, [r7, #4]
 800ddac:	429a      	cmp	r2, r3
 800ddae:	d196      	bne.n	800dcde <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800ddb0:	2300      	movs	r3, #0
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	3728      	adds	r7, #40	@ 0x28
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}
 800ddba:	bf00      	nop
 800ddbc:	20000024 	.word	0x20000024

0800ddc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b086      	sub	sp, #24
 800ddc4:	af02      	add	r7, sp, #8
 800ddc6:	60f8      	str	r0, [r7, #12]
 800ddc8:	60b9      	str	r1, [r7, #8]
 800ddca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	9300      	str	r3, [sp, #0]
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800ddd8:	68f8      	ldr	r0, [r7, #12]
 800ddda:	f7ff ff5b 	bl	800dc94 <SPI_WaitFifoStateUntilTimeout>
 800ddde:	4603      	mov	r3, r0
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d007      	beq.n	800ddf4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dde8:	f043 0220 	orr.w	r2, r3, #32
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ddf0:	2303      	movs	r3, #3
 800ddf2:	e027      	b.n	800de44 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	9300      	str	r3, [sp, #0]
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	2180      	movs	r1, #128	@ 0x80
 800ddfe:	68f8      	ldr	r0, [r7, #12]
 800de00:	f7ff fec0 	bl	800db84 <SPI_WaitFlagStateUntilTimeout>
 800de04:	4603      	mov	r3, r0
 800de06:	2b00      	cmp	r3, #0
 800de08:	d007      	beq.n	800de1a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de0e:	f043 0220 	orr.w	r2, r3, #32
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800de16:	2303      	movs	r3, #3
 800de18:	e014      	b.n	800de44 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	9300      	str	r3, [sp, #0]
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	2200      	movs	r2, #0
 800de22:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800de26:	68f8      	ldr	r0, [r7, #12]
 800de28:	f7ff ff34 	bl	800dc94 <SPI_WaitFifoStateUntilTimeout>
 800de2c:	4603      	mov	r3, r0
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d007      	beq.n	800de42 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de36:	f043 0220 	orr.w	r2, r3, #32
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800de3e:	2303      	movs	r3, #3
 800de40:	e000      	b.n	800de44 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800de42:	2300      	movs	r3, #0
}
 800de44:	4618      	mov	r0, r3
 800de46:	3710      	adds	r7, #16
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}

0800de4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b082      	sub	sp, #8
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d101      	bne.n	800de5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800de5a:	2301      	movs	r3, #1
 800de5c:	e049      	b.n	800def2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800de64:	b2db      	uxtb	r3, r3
 800de66:	2b00      	cmp	r3, #0
 800de68:	d106      	bne.n	800de78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	2200      	movs	r2, #0
 800de6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f7f9 f9b4 	bl	80071e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2202      	movs	r2, #2
 800de7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681a      	ldr	r2, [r3, #0]
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	3304      	adds	r3, #4
 800de88:	4619      	mov	r1, r3
 800de8a:	4610      	mov	r0, r2
 800de8c:	f000 fbfa 	bl	800e684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2201      	movs	r2, #1
 800de94:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2201      	movs	r2, #1
 800de9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2201      	movs	r2, #1
 800dea4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2201      	movs	r2, #1
 800deac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2201      	movs	r2, #1
 800deb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2201      	movs	r2, #1
 800debc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2201      	movs	r2, #1
 800dec4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2201      	movs	r2, #1
 800decc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2201      	movs	r2, #1
 800ded4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2201      	movs	r2, #1
 800dedc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2201      	movs	r2, #1
 800dee4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2201      	movs	r2, #1
 800deec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800def0:	2300      	movs	r3, #0
}
 800def2:	4618      	mov	r0, r3
 800def4:	3708      	adds	r7, #8
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}
	...

0800defc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800defc:	b480      	push	{r7}
 800defe:	b085      	sub	sp, #20
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800df0a:	b2db      	uxtb	r3, r3
 800df0c:	2b01      	cmp	r3, #1
 800df0e:	d001      	beq.n	800df14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800df10:	2301      	movs	r3, #1
 800df12:	e036      	b.n	800df82 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2202      	movs	r2, #2
 800df18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	68da      	ldr	r2, [r3, #12]
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	f042 0201 	orr.w	r2, r2, #1
 800df2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	4a17      	ldr	r2, [pc, #92]	@ (800df90 <HAL_TIM_Base_Start_IT+0x94>)
 800df32:	4293      	cmp	r3, r2
 800df34:	d004      	beq.n	800df40 <HAL_TIM_Base_Start_IT+0x44>
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df3e:	d115      	bne.n	800df6c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	689a      	ldr	r2, [r3, #8]
 800df46:	4b13      	ldr	r3, [pc, #76]	@ (800df94 <HAL_TIM_Base_Start_IT+0x98>)
 800df48:	4013      	ands	r3, r2
 800df4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	2b06      	cmp	r3, #6
 800df50:	d015      	beq.n	800df7e <HAL_TIM_Base_Start_IT+0x82>
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df58:	d011      	beq.n	800df7e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	681a      	ldr	r2, [r3, #0]
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	f042 0201 	orr.w	r2, r2, #1
 800df68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df6a:	e008      	b.n	800df7e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	681a      	ldr	r2, [r3, #0]
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	f042 0201 	orr.w	r2, r2, #1
 800df7a:	601a      	str	r2, [r3, #0]
 800df7c:	e000      	b.n	800df80 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800df80:	2300      	movs	r3, #0
}
 800df82:	4618      	mov	r0, r3
 800df84:	3714      	adds	r7, #20
 800df86:	46bd      	mov	sp, r7
 800df88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8c:	4770      	bx	lr
 800df8e:	bf00      	nop
 800df90:	40012c00 	.word	0x40012c00
 800df94:	00010007 	.word	0x00010007

0800df98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b082      	sub	sp, #8
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d101      	bne.n	800dfaa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dfa6:	2301      	movs	r3, #1
 800dfa8:	e049      	b.n	800e03e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dfb0:	b2db      	uxtb	r3, r3
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d106      	bne.n	800dfc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2200      	movs	r2, #0
 800dfba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	f7f9 f8fe 	bl	80071c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2202      	movs	r2, #2
 800dfc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681a      	ldr	r2, [r3, #0]
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	3304      	adds	r3, #4
 800dfd4:	4619      	mov	r1, r3
 800dfd6:	4610      	mov	r0, r2
 800dfd8:	f000 fb54 	bl	800e684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2201      	movs	r2, #1
 800dfe0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2201      	movs	r2, #1
 800dfe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2201      	movs	r2, #1
 800dff0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2201      	movs	r2, #1
 800dff8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2201      	movs	r2, #1
 800e000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2201      	movs	r2, #1
 800e008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2201      	movs	r2, #1
 800e010:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2201      	movs	r2, #1
 800e018:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2201      	movs	r2, #1
 800e020:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2201      	movs	r2, #1
 800e028:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2201      	movs	r2, #1
 800e030:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2201      	movs	r2, #1
 800e038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e03c:	2300      	movs	r3, #0
}
 800e03e:	4618      	mov	r0, r3
 800e040:	3708      	adds	r7, #8
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}
	...

0800e048 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b084      	sub	sp, #16
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
 800e050:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d109      	bne.n	800e06c <HAL_TIM_PWM_Start+0x24>
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e05e:	b2db      	uxtb	r3, r3
 800e060:	2b01      	cmp	r3, #1
 800e062:	bf14      	ite	ne
 800e064:	2301      	movne	r3, #1
 800e066:	2300      	moveq	r3, #0
 800e068:	b2db      	uxtb	r3, r3
 800e06a:	e03c      	b.n	800e0e6 <HAL_TIM_PWM_Start+0x9e>
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	2b04      	cmp	r3, #4
 800e070:	d109      	bne.n	800e086 <HAL_TIM_PWM_Start+0x3e>
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e078:	b2db      	uxtb	r3, r3
 800e07a:	2b01      	cmp	r3, #1
 800e07c:	bf14      	ite	ne
 800e07e:	2301      	movne	r3, #1
 800e080:	2300      	moveq	r3, #0
 800e082:	b2db      	uxtb	r3, r3
 800e084:	e02f      	b.n	800e0e6 <HAL_TIM_PWM_Start+0x9e>
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	2b08      	cmp	r3, #8
 800e08a:	d109      	bne.n	800e0a0 <HAL_TIM_PWM_Start+0x58>
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e092:	b2db      	uxtb	r3, r3
 800e094:	2b01      	cmp	r3, #1
 800e096:	bf14      	ite	ne
 800e098:	2301      	movne	r3, #1
 800e09a:	2300      	moveq	r3, #0
 800e09c:	b2db      	uxtb	r3, r3
 800e09e:	e022      	b.n	800e0e6 <HAL_TIM_PWM_Start+0x9e>
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	2b0c      	cmp	r3, #12
 800e0a4:	d109      	bne.n	800e0ba <HAL_TIM_PWM_Start+0x72>
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e0ac:	b2db      	uxtb	r3, r3
 800e0ae:	2b01      	cmp	r3, #1
 800e0b0:	bf14      	ite	ne
 800e0b2:	2301      	movne	r3, #1
 800e0b4:	2300      	moveq	r3, #0
 800e0b6:	b2db      	uxtb	r3, r3
 800e0b8:	e015      	b.n	800e0e6 <HAL_TIM_PWM_Start+0x9e>
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	2b10      	cmp	r3, #16
 800e0be:	d109      	bne.n	800e0d4 <HAL_TIM_PWM_Start+0x8c>
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e0c6:	b2db      	uxtb	r3, r3
 800e0c8:	2b01      	cmp	r3, #1
 800e0ca:	bf14      	ite	ne
 800e0cc:	2301      	movne	r3, #1
 800e0ce:	2300      	moveq	r3, #0
 800e0d0:	b2db      	uxtb	r3, r3
 800e0d2:	e008      	b.n	800e0e6 <HAL_TIM_PWM_Start+0x9e>
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e0da:	b2db      	uxtb	r3, r3
 800e0dc:	2b01      	cmp	r3, #1
 800e0de:	bf14      	ite	ne
 800e0e0:	2301      	movne	r3, #1
 800e0e2:	2300      	moveq	r3, #0
 800e0e4:	b2db      	uxtb	r3, r3
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d001      	beq.n	800e0ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	e079      	b.n	800e1e2 <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d104      	bne.n	800e0fe <HAL_TIM_PWM_Start+0xb6>
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2202      	movs	r2, #2
 800e0f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e0fc:	e023      	b.n	800e146 <HAL_TIM_PWM_Start+0xfe>
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	2b04      	cmp	r3, #4
 800e102:	d104      	bne.n	800e10e <HAL_TIM_PWM_Start+0xc6>
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2202      	movs	r2, #2
 800e108:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e10c:	e01b      	b.n	800e146 <HAL_TIM_PWM_Start+0xfe>
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	2b08      	cmp	r3, #8
 800e112:	d104      	bne.n	800e11e <HAL_TIM_PWM_Start+0xd6>
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2202      	movs	r2, #2
 800e118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e11c:	e013      	b.n	800e146 <HAL_TIM_PWM_Start+0xfe>
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	2b0c      	cmp	r3, #12
 800e122:	d104      	bne.n	800e12e <HAL_TIM_PWM_Start+0xe6>
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2202      	movs	r2, #2
 800e128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e12c:	e00b      	b.n	800e146 <HAL_TIM_PWM_Start+0xfe>
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	2b10      	cmp	r3, #16
 800e132:	d104      	bne.n	800e13e <HAL_TIM_PWM_Start+0xf6>
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	2202      	movs	r2, #2
 800e138:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e13c:	e003      	b.n	800e146 <HAL_TIM_PWM_Start+0xfe>
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2202      	movs	r2, #2
 800e142:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	2201      	movs	r2, #1
 800e14c:	6839      	ldr	r1, [r7, #0]
 800e14e:	4618      	mov	r0, r3
 800e150:	f000 fd80 	bl	800ec54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	4a24      	ldr	r2, [pc, #144]	@ (800e1ec <HAL_TIM_PWM_Start+0x1a4>)
 800e15a:	4293      	cmp	r3, r2
 800e15c:	d009      	beq.n	800e172 <HAL_TIM_PWM_Start+0x12a>
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	4a23      	ldr	r2, [pc, #140]	@ (800e1f0 <HAL_TIM_PWM_Start+0x1a8>)
 800e164:	4293      	cmp	r3, r2
 800e166:	d004      	beq.n	800e172 <HAL_TIM_PWM_Start+0x12a>
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	4a21      	ldr	r2, [pc, #132]	@ (800e1f4 <HAL_TIM_PWM_Start+0x1ac>)
 800e16e:	4293      	cmp	r3, r2
 800e170:	d101      	bne.n	800e176 <HAL_TIM_PWM_Start+0x12e>
 800e172:	2301      	movs	r3, #1
 800e174:	e000      	b.n	800e178 <HAL_TIM_PWM_Start+0x130>
 800e176:	2300      	movs	r3, #0
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d007      	beq.n	800e18c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e18a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	4a16      	ldr	r2, [pc, #88]	@ (800e1ec <HAL_TIM_PWM_Start+0x1a4>)
 800e192:	4293      	cmp	r3, r2
 800e194:	d004      	beq.n	800e1a0 <HAL_TIM_PWM_Start+0x158>
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e19e:	d115      	bne.n	800e1cc <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	689a      	ldr	r2, [r3, #8]
 800e1a6:	4b14      	ldr	r3, [pc, #80]	@ (800e1f8 <HAL_TIM_PWM_Start+0x1b0>)
 800e1a8:	4013      	ands	r3, r2
 800e1aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	2b06      	cmp	r3, #6
 800e1b0:	d015      	beq.n	800e1de <HAL_TIM_PWM_Start+0x196>
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e1b8:	d011      	beq.n	800e1de <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	681a      	ldr	r2, [r3, #0]
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	f042 0201 	orr.w	r2, r2, #1
 800e1c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1ca:	e008      	b.n	800e1de <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	681a      	ldr	r2, [r3, #0]
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	f042 0201 	orr.w	r2, r2, #1
 800e1da:	601a      	str	r2, [r3, #0]
 800e1dc:	e000      	b.n	800e1e0 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e1e0:	2300      	movs	r3, #0
}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	3710      	adds	r7, #16
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}
 800e1ea:	bf00      	nop
 800e1ec:	40012c00 	.word	0x40012c00
 800e1f0:	40014400 	.word	0x40014400
 800e1f4:	40014800 	.word	0x40014800
 800e1f8:	00010007 	.word	0x00010007

0800e1fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b084      	sub	sp, #16
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	68db      	ldr	r3, [r3, #12]
 800e20a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	691b      	ldr	r3, [r3, #16]
 800e212:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	f003 0302 	and.w	r3, r3, #2
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d020      	beq.n	800e260 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	f003 0302 	and.w	r3, r3, #2
 800e224:	2b00      	cmp	r3, #0
 800e226:	d01b      	beq.n	800e260 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	f06f 0202 	mvn.w	r2, #2
 800e230:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	2201      	movs	r2, #1
 800e236:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	699b      	ldr	r3, [r3, #24]
 800e23e:	f003 0303 	and.w	r3, r3, #3
 800e242:	2b00      	cmp	r3, #0
 800e244:	d003      	beq.n	800e24e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f000 f9fe 	bl	800e648 <HAL_TIM_IC_CaptureCallback>
 800e24c:	e005      	b.n	800e25a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	f000 f9f0 	bl	800e634 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e254:	6878      	ldr	r0, [r7, #4]
 800e256:	f000 fa01 	bl	800e65c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	2200      	movs	r2, #0
 800e25e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	f003 0304 	and.w	r3, r3, #4
 800e266:	2b00      	cmp	r3, #0
 800e268:	d020      	beq.n	800e2ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	f003 0304 	and.w	r3, r3, #4
 800e270:	2b00      	cmp	r3, #0
 800e272:	d01b      	beq.n	800e2ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	f06f 0204 	mvn.w	r2, #4
 800e27c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2202      	movs	r2, #2
 800e282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	699b      	ldr	r3, [r3, #24]
 800e28a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d003      	beq.n	800e29a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f000 f9d8 	bl	800e648 <HAL_TIM_IC_CaptureCallback>
 800e298:	e005      	b.n	800e2a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f000 f9ca 	bl	800e634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2a0:	6878      	ldr	r0, [r7, #4]
 800e2a2:	f000 f9db 	bl	800e65c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	f003 0308 	and.w	r3, r3, #8
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d020      	beq.n	800e2f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	f003 0308 	and.w	r3, r3, #8
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d01b      	beq.n	800e2f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	f06f 0208 	mvn.w	r2, #8
 800e2c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	2204      	movs	r2, #4
 800e2ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	69db      	ldr	r3, [r3, #28]
 800e2d6:	f003 0303 	and.w	r3, r3, #3
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d003      	beq.n	800e2e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	f000 f9b2 	bl	800e648 <HAL_TIM_IC_CaptureCallback>
 800e2e4:	e005      	b.n	800e2f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	f000 f9a4 	bl	800e634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	f000 f9b5 	bl	800e65c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e2f8:	68bb      	ldr	r3, [r7, #8]
 800e2fa:	f003 0310 	and.w	r3, r3, #16
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d020      	beq.n	800e344 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	f003 0310 	and.w	r3, r3, #16
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d01b      	beq.n	800e344 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	f06f 0210 	mvn.w	r2, #16
 800e314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	2208      	movs	r2, #8
 800e31a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	69db      	ldr	r3, [r3, #28]
 800e322:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e326:	2b00      	cmp	r3, #0
 800e328:	d003      	beq.n	800e332 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f000 f98c 	bl	800e648 <HAL_TIM_IC_CaptureCallback>
 800e330:	e005      	b.n	800e33e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e332:	6878      	ldr	r0, [r7, #4]
 800e334:	f000 f97e 	bl	800e634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e338:	6878      	ldr	r0, [r7, #4]
 800e33a:	f000 f98f 	bl	800e65c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	2200      	movs	r2, #0
 800e342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	f003 0301 	and.w	r3, r3, #1
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d00c      	beq.n	800e368 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	f003 0301 	and.w	r3, r3, #1
 800e354:	2b00      	cmp	r3, #0
 800e356:	d007      	beq.n	800e368 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	f06f 0201 	mvn.w	r2, #1
 800e360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f7f8 f886 	bl	8006474 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d104      	bne.n	800e37c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e372:	68bb      	ldr	r3, [r7, #8]
 800e374:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d00c      	beq.n	800e396 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e382:	2b00      	cmp	r3, #0
 800e384:	d007      	beq.n	800e396 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e38e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f000 fcef 	bl	800ed74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e396:	68bb      	ldr	r3, [r7, #8]
 800e398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d00c      	beq.n	800e3ba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d007      	beq.n	800e3ba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e3b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f000 fce7 	bl	800ed88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d00c      	beq.n	800e3de <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d007      	beq.n	800e3de <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e3d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	f000 f949 	bl	800e670 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	f003 0320 	and.w	r3, r3, #32
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d00c      	beq.n	800e402 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	f003 0320 	and.w	r3, r3, #32
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d007      	beq.n	800e402 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	f06f 0220 	mvn.w	r2, #32
 800e3fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	f000 fcaf 	bl	800ed60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e402:	bf00      	nop
 800e404:	3710      	adds	r7, #16
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}
	...

0800e40c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b086      	sub	sp, #24
 800e410:	af00      	add	r7, sp, #0
 800e412:	60f8      	str	r0, [r7, #12]
 800e414:	60b9      	str	r1, [r7, #8]
 800e416:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e418:	2300      	movs	r3, #0
 800e41a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e422:	2b01      	cmp	r3, #1
 800e424:	d101      	bne.n	800e42a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e426:	2302      	movs	r3, #2
 800e428:	e0ff      	b.n	800e62a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	2201      	movs	r2, #1
 800e42e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2b14      	cmp	r3, #20
 800e436:	f200 80f0 	bhi.w	800e61a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e43a:	a201      	add	r2, pc, #4	@ (adr r2, 800e440 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e440:	0800e495 	.word	0x0800e495
 800e444:	0800e61b 	.word	0x0800e61b
 800e448:	0800e61b 	.word	0x0800e61b
 800e44c:	0800e61b 	.word	0x0800e61b
 800e450:	0800e4d5 	.word	0x0800e4d5
 800e454:	0800e61b 	.word	0x0800e61b
 800e458:	0800e61b 	.word	0x0800e61b
 800e45c:	0800e61b 	.word	0x0800e61b
 800e460:	0800e517 	.word	0x0800e517
 800e464:	0800e61b 	.word	0x0800e61b
 800e468:	0800e61b 	.word	0x0800e61b
 800e46c:	0800e61b 	.word	0x0800e61b
 800e470:	0800e557 	.word	0x0800e557
 800e474:	0800e61b 	.word	0x0800e61b
 800e478:	0800e61b 	.word	0x0800e61b
 800e47c:	0800e61b 	.word	0x0800e61b
 800e480:	0800e599 	.word	0x0800e599
 800e484:	0800e61b 	.word	0x0800e61b
 800e488:	0800e61b 	.word	0x0800e61b
 800e48c:	0800e61b 	.word	0x0800e61b
 800e490:	0800e5d9 	.word	0x0800e5d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	68b9      	ldr	r1, [r7, #8]
 800e49a:	4618      	mov	r0, r3
 800e49c:	f000 f95c 	bl	800e758 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	699a      	ldr	r2, [r3, #24]
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	f042 0208 	orr.w	r2, r2, #8
 800e4ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	699a      	ldr	r2, [r3, #24]
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	f022 0204 	bic.w	r2, r2, #4
 800e4be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	6999      	ldr	r1, [r3, #24]
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	691a      	ldr	r2, [r3, #16]
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	430a      	orrs	r2, r1
 800e4d0:	619a      	str	r2, [r3, #24]
      break;
 800e4d2:	e0a5      	b.n	800e620 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	68b9      	ldr	r1, [r7, #8]
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f000 f9b8 	bl	800e850 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	699a      	ldr	r2, [r3, #24]
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e4ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	699a      	ldr	r2, [r3, #24]
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e4fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	6999      	ldr	r1, [r3, #24]
 800e506:	68bb      	ldr	r3, [r7, #8]
 800e508:	691b      	ldr	r3, [r3, #16]
 800e50a:	021a      	lsls	r2, r3, #8
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	430a      	orrs	r2, r1
 800e512:	619a      	str	r2, [r3, #24]
      break;
 800e514:	e084      	b.n	800e620 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	68b9      	ldr	r1, [r7, #8]
 800e51c:	4618      	mov	r0, r3
 800e51e:	f000 fa11 	bl	800e944 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	69da      	ldr	r2, [r3, #28]
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	f042 0208 	orr.w	r2, r2, #8
 800e530:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	69da      	ldr	r2, [r3, #28]
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	f022 0204 	bic.w	r2, r2, #4
 800e540:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	69d9      	ldr	r1, [r3, #28]
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	691a      	ldr	r2, [r3, #16]
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	430a      	orrs	r2, r1
 800e552:	61da      	str	r2, [r3, #28]
      break;
 800e554:	e064      	b.n	800e620 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	68b9      	ldr	r1, [r7, #8]
 800e55c:	4618      	mov	r0, r3
 800e55e:	f000 fa69 	bl	800ea34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	69da      	ldr	r2, [r3, #28]
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e570:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	69da      	ldr	r2, [r3, #28]
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e580:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	69d9      	ldr	r1, [r3, #28]
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	691b      	ldr	r3, [r3, #16]
 800e58c:	021a      	lsls	r2, r3, #8
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	430a      	orrs	r2, r1
 800e594:	61da      	str	r2, [r3, #28]
      break;
 800e596:	e043      	b.n	800e620 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	68b9      	ldr	r1, [r7, #8]
 800e59e:	4618      	mov	r0, r3
 800e5a0:	f000 faa6 	bl	800eaf0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	f042 0208 	orr.w	r2, r2, #8
 800e5b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	f022 0204 	bic.w	r2, r2, #4
 800e5c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	691a      	ldr	r2, [r3, #16]
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	430a      	orrs	r2, r1
 800e5d4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e5d6:	e023      	b.n	800e620 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	68b9      	ldr	r1, [r7, #8]
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f000 fade 	bl	800eba0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e5f2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e602:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e60a:	68bb      	ldr	r3, [r7, #8]
 800e60c:	691b      	ldr	r3, [r3, #16]
 800e60e:	021a      	lsls	r2, r3, #8
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	430a      	orrs	r2, r1
 800e616:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e618:	e002      	b.n	800e620 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e61a:	2301      	movs	r3, #1
 800e61c:	75fb      	strb	r3, [r7, #23]
      break;
 800e61e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	2200      	movs	r2, #0
 800e624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e628:	7dfb      	ldrb	r3, [r7, #23]
}
 800e62a:	4618      	mov	r0, r3
 800e62c:	3718      	adds	r7, #24
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}
 800e632:	bf00      	nop

0800e634 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e634:	b480      	push	{r7}
 800e636:	b083      	sub	sp, #12
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e63c:	bf00      	nop
 800e63e:	370c      	adds	r7, #12
 800e640:	46bd      	mov	sp, r7
 800e642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e646:	4770      	bx	lr

0800e648 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e648:	b480      	push	{r7}
 800e64a:	b083      	sub	sp, #12
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e650:	bf00      	nop
 800e652:	370c      	adds	r7, #12
 800e654:	46bd      	mov	sp, r7
 800e656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65a:	4770      	bx	lr

0800e65c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e65c:	b480      	push	{r7}
 800e65e:	b083      	sub	sp, #12
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e664:	bf00      	nop
 800e666:	370c      	adds	r7, #12
 800e668:	46bd      	mov	sp, r7
 800e66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66e:	4770      	bx	lr

0800e670 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e670:	b480      	push	{r7}
 800e672:	b083      	sub	sp, #12
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e678:	bf00      	nop
 800e67a:	370c      	adds	r7, #12
 800e67c:	46bd      	mov	sp, r7
 800e67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e682:	4770      	bx	lr

0800e684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e684:	b480      	push	{r7}
 800e686:	b085      	sub	sp, #20
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	4a2d      	ldr	r2, [pc, #180]	@ (800e74c <TIM_Base_SetConfig+0xc8>)
 800e698:	4293      	cmp	r3, r2
 800e69a:	d003      	beq.n	800e6a4 <TIM_Base_SetConfig+0x20>
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e6a2:	d108      	bne.n	800e6b6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e6aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	685b      	ldr	r3, [r3, #4]
 800e6b0:	68fa      	ldr	r2, [r7, #12]
 800e6b2:	4313      	orrs	r3, r2
 800e6b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	4a24      	ldr	r2, [pc, #144]	@ (800e74c <TIM_Base_SetConfig+0xc8>)
 800e6ba:	4293      	cmp	r3, r2
 800e6bc:	d00b      	beq.n	800e6d6 <TIM_Base_SetConfig+0x52>
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e6c4:	d007      	beq.n	800e6d6 <TIM_Base_SetConfig+0x52>
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	4a21      	ldr	r2, [pc, #132]	@ (800e750 <TIM_Base_SetConfig+0xcc>)
 800e6ca:	4293      	cmp	r3, r2
 800e6cc:	d003      	beq.n	800e6d6 <TIM_Base_SetConfig+0x52>
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	4a20      	ldr	r2, [pc, #128]	@ (800e754 <TIM_Base_SetConfig+0xd0>)
 800e6d2:	4293      	cmp	r3, r2
 800e6d4:	d108      	bne.n	800e6e8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e6dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	68db      	ldr	r3, [r3, #12]
 800e6e2:	68fa      	ldr	r2, [r7, #12]
 800e6e4:	4313      	orrs	r3, r2
 800e6e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	695b      	ldr	r3, [r3, #20]
 800e6f2:	4313      	orrs	r3, r2
 800e6f4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	689a      	ldr	r2, [r3, #8]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	681a      	ldr	r2, [r3, #0]
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	4a10      	ldr	r2, [pc, #64]	@ (800e74c <TIM_Base_SetConfig+0xc8>)
 800e70a:	4293      	cmp	r3, r2
 800e70c:	d007      	beq.n	800e71e <TIM_Base_SetConfig+0x9a>
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	4a0f      	ldr	r2, [pc, #60]	@ (800e750 <TIM_Base_SetConfig+0xcc>)
 800e712:	4293      	cmp	r3, r2
 800e714:	d003      	beq.n	800e71e <TIM_Base_SetConfig+0x9a>
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	4a0e      	ldr	r2, [pc, #56]	@ (800e754 <TIM_Base_SetConfig+0xd0>)
 800e71a:	4293      	cmp	r3, r2
 800e71c:	d103      	bne.n	800e726 <TIM_Base_SetConfig+0xa2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	691a      	ldr	r2, [r3, #16]
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	f043 0204 	orr.w	r2, r3, #4
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	2201      	movs	r2, #1
 800e736:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	68fa      	ldr	r2, [r7, #12]
 800e73c:	601a      	str	r2, [r3, #0]
}
 800e73e:	bf00      	nop
 800e740:	3714      	adds	r7, #20
 800e742:	46bd      	mov	sp, r7
 800e744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e748:	4770      	bx	lr
 800e74a:	bf00      	nop
 800e74c:	40012c00 	.word	0x40012c00
 800e750:	40014400 	.word	0x40014400
 800e754:	40014800 	.word	0x40014800

0800e758 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e758:	b480      	push	{r7}
 800e75a:	b087      	sub	sp, #28
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
 800e760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	6a1b      	ldr	r3, [r3, #32]
 800e766:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	6a1b      	ldr	r3, [r3, #32]
 800e76c:	f023 0201 	bic.w	r2, r3, #1
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	685b      	ldr	r3, [r3, #4]
 800e778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	699b      	ldr	r3, [r3, #24]
 800e77e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e78a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	f023 0303 	bic.w	r3, r3, #3
 800e792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	68fa      	ldr	r2, [r7, #12]
 800e79a:	4313      	orrs	r3, r2
 800e79c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e79e:	697b      	ldr	r3, [r7, #20]
 800e7a0:	f023 0302 	bic.w	r3, r3, #2
 800e7a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	689b      	ldr	r3, [r3, #8]
 800e7aa:	697a      	ldr	r2, [r7, #20]
 800e7ac:	4313      	orrs	r3, r2
 800e7ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	4a24      	ldr	r2, [pc, #144]	@ (800e844 <TIM_OC1_SetConfig+0xec>)
 800e7b4:	4293      	cmp	r3, r2
 800e7b6:	d007      	beq.n	800e7c8 <TIM_OC1_SetConfig+0x70>
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	4a23      	ldr	r2, [pc, #140]	@ (800e848 <TIM_OC1_SetConfig+0xf0>)
 800e7bc:	4293      	cmp	r3, r2
 800e7be:	d003      	beq.n	800e7c8 <TIM_OC1_SetConfig+0x70>
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	4a22      	ldr	r2, [pc, #136]	@ (800e84c <TIM_OC1_SetConfig+0xf4>)
 800e7c4:	4293      	cmp	r3, r2
 800e7c6:	d10c      	bne.n	800e7e2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e7c8:	697b      	ldr	r3, [r7, #20]
 800e7ca:	f023 0308 	bic.w	r3, r3, #8
 800e7ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	68db      	ldr	r3, [r3, #12]
 800e7d4:	697a      	ldr	r2, [r7, #20]
 800e7d6:	4313      	orrs	r3, r2
 800e7d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e7da:	697b      	ldr	r3, [r7, #20]
 800e7dc:	f023 0304 	bic.w	r3, r3, #4
 800e7e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	4a17      	ldr	r2, [pc, #92]	@ (800e844 <TIM_OC1_SetConfig+0xec>)
 800e7e6:	4293      	cmp	r3, r2
 800e7e8:	d007      	beq.n	800e7fa <TIM_OC1_SetConfig+0xa2>
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	4a17      	ldr	r2, [pc, #92]	@ (800e84c <TIM_OC1_SetConfig+0xf4>)
 800e7ee:	4293      	cmp	r3, r2
 800e7f0:	d003      	beq.n	800e7fa <TIM_OC1_SetConfig+0xa2>
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	4a14      	ldr	r2, [pc, #80]	@ (800e848 <TIM_OC1_SetConfig+0xf0>)
 800e7f6:	4293      	cmp	r3, r2
 800e7f8:	d111      	bne.n	800e81e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e7fa:	693b      	ldr	r3, [r7, #16]
 800e7fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e800:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e802:	693b      	ldr	r3, [r7, #16]
 800e804:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e808:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	695b      	ldr	r3, [r3, #20]
 800e80e:	693a      	ldr	r2, [r7, #16]
 800e810:	4313      	orrs	r3, r2
 800e812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	699b      	ldr	r3, [r3, #24]
 800e818:	693a      	ldr	r2, [r7, #16]
 800e81a:	4313      	orrs	r3, r2
 800e81c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	693a      	ldr	r2, [r7, #16]
 800e822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	68fa      	ldr	r2, [r7, #12]
 800e828:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	685a      	ldr	r2, [r3, #4]
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	697a      	ldr	r2, [r7, #20]
 800e836:	621a      	str	r2, [r3, #32]
}
 800e838:	bf00      	nop
 800e83a:	371c      	adds	r7, #28
 800e83c:	46bd      	mov	sp, r7
 800e83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e842:	4770      	bx	lr
 800e844:	40012c00 	.word	0x40012c00
 800e848:	40014800 	.word	0x40014800
 800e84c:	40014400 	.word	0x40014400

0800e850 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e850:	b480      	push	{r7}
 800e852:	b087      	sub	sp, #28
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
 800e858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	6a1b      	ldr	r3, [r3, #32]
 800e85e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	6a1b      	ldr	r3, [r3, #32]
 800e864:	f023 0210 	bic.w	r2, r3, #16
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	685b      	ldr	r3, [r3, #4]
 800e870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	699b      	ldr	r3, [r3, #24]
 800e876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e87e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e88a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	021b      	lsls	r3, r3, #8
 800e892:	68fa      	ldr	r2, [r7, #12]
 800e894:	4313      	orrs	r3, r2
 800e896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e898:	697b      	ldr	r3, [r7, #20]
 800e89a:	f023 0320 	bic.w	r3, r3, #32
 800e89e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e8a0:	683b      	ldr	r3, [r7, #0]
 800e8a2:	689b      	ldr	r3, [r3, #8]
 800e8a4:	011b      	lsls	r3, r3, #4
 800e8a6:	697a      	ldr	r2, [r7, #20]
 800e8a8:	4313      	orrs	r3, r2
 800e8aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	4a22      	ldr	r2, [pc, #136]	@ (800e938 <TIM_OC2_SetConfig+0xe8>)
 800e8b0:	4293      	cmp	r3, r2
 800e8b2:	d10d      	bne.n	800e8d0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e8b4:	697b      	ldr	r3, [r7, #20]
 800e8b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e8ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	68db      	ldr	r3, [r3, #12]
 800e8c0:	011b      	lsls	r3, r3, #4
 800e8c2:	697a      	ldr	r2, [r7, #20]
 800e8c4:	4313      	orrs	r3, r2
 800e8c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e8c8:	697b      	ldr	r3, [r7, #20]
 800e8ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e8ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	4a19      	ldr	r2, [pc, #100]	@ (800e938 <TIM_OC2_SetConfig+0xe8>)
 800e8d4:	4293      	cmp	r3, r2
 800e8d6:	d007      	beq.n	800e8e8 <TIM_OC2_SetConfig+0x98>
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	4a18      	ldr	r2, [pc, #96]	@ (800e93c <TIM_OC2_SetConfig+0xec>)
 800e8dc:	4293      	cmp	r3, r2
 800e8de:	d003      	beq.n	800e8e8 <TIM_OC2_SetConfig+0x98>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	4a17      	ldr	r2, [pc, #92]	@ (800e940 <TIM_OC2_SetConfig+0xf0>)
 800e8e4:	4293      	cmp	r3, r2
 800e8e6:	d113      	bne.n	800e910 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e8e8:	693b      	ldr	r3, [r7, #16]
 800e8ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e8ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e8f0:	693b      	ldr	r3, [r7, #16]
 800e8f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e8f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	695b      	ldr	r3, [r3, #20]
 800e8fc:	009b      	lsls	r3, r3, #2
 800e8fe:	693a      	ldr	r2, [r7, #16]
 800e900:	4313      	orrs	r3, r2
 800e902:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	699b      	ldr	r3, [r3, #24]
 800e908:	009b      	lsls	r3, r3, #2
 800e90a:	693a      	ldr	r2, [r7, #16]
 800e90c:	4313      	orrs	r3, r2
 800e90e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	693a      	ldr	r2, [r7, #16]
 800e914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	68fa      	ldr	r2, [r7, #12]
 800e91a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	685a      	ldr	r2, [r3, #4]
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	697a      	ldr	r2, [r7, #20]
 800e928:	621a      	str	r2, [r3, #32]
}
 800e92a:	bf00      	nop
 800e92c:	371c      	adds	r7, #28
 800e92e:	46bd      	mov	sp, r7
 800e930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e934:	4770      	bx	lr
 800e936:	bf00      	nop
 800e938:	40012c00 	.word	0x40012c00
 800e93c:	40014400 	.word	0x40014400
 800e940:	40014800 	.word	0x40014800

0800e944 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e944:	b480      	push	{r7}
 800e946:	b087      	sub	sp, #28
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
 800e94c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	6a1b      	ldr	r3, [r3, #32]
 800e952:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	6a1b      	ldr	r3, [r3, #32]
 800e958:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	685b      	ldr	r3, [r3, #4]
 800e964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	69db      	ldr	r3, [r3, #28]
 800e96a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	f023 0303 	bic.w	r3, r3, #3
 800e97e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	68fa      	ldr	r2, [r7, #12]
 800e986:	4313      	orrs	r3, r2
 800e988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e98a:	697b      	ldr	r3, [r7, #20]
 800e98c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e990:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	689b      	ldr	r3, [r3, #8]
 800e996:	021b      	lsls	r3, r3, #8
 800e998:	697a      	ldr	r2, [r7, #20]
 800e99a:	4313      	orrs	r3, r2
 800e99c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	4a21      	ldr	r2, [pc, #132]	@ (800ea28 <TIM_OC3_SetConfig+0xe4>)
 800e9a2:	4293      	cmp	r3, r2
 800e9a4:	d10d      	bne.n	800e9c2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e9a6:	697b      	ldr	r3, [r7, #20]
 800e9a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e9ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	68db      	ldr	r3, [r3, #12]
 800e9b2:	021b      	lsls	r3, r3, #8
 800e9b4:	697a      	ldr	r2, [r7, #20]
 800e9b6:	4313      	orrs	r3, r2
 800e9b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e9c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	4a18      	ldr	r2, [pc, #96]	@ (800ea28 <TIM_OC3_SetConfig+0xe4>)
 800e9c6:	4293      	cmp	r3, r2
 800e9c8:	d007      	beq.n	800e9da <TIM_OC3_SetConfig+0x96>
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	4a17      	ldr	r2, [pc, #92]	@ (800ea2c <TIM_OC3_SetConfig+0xe8>)
 800e9ce:	4293      	cmp	r3, r2
 800e9d0:	d003      	beq.n	800e9da <TIM_OC3_SetConfig+0x96>
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	4a16      	ldr	r2, [pc, #88]	@ (800ea30 <TIM_OC3_SetConfig+0xec>)
 800e9d6:	4293      	cmp	r3, r2
 800e9d8:	d113      	bne.n	800ea02 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e9da:	693b      	ldr	r3, [r7, #16]
 800e9dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e9e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e9e2:	693b      	ldr	r3, [r7, #16]
 800e9e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e9e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	695b      	ldr	r3, [r3, #20]
 800e9ee:	011b      	lsls	r3, r3, #4
 800e9f0:	693a      	ldr	r2, [r7, #16]
 800e9f2:	4313      	orrs	r3, r2
 800e9f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	699b      	ldr	r3, [r3, #24]
 800e9fa:	011b      	lsls	r3, r3, #4
 800e9fc:	693a      	ldr	r2, [r7, #16]
 800e9fe:	4313      	orrs	r3, r2
 800ea00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	693a      	ldr	r2, [r7, #16]
 800ea06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	68fa      	ldr	r2, [r7, #12]
 800ea0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	685a      	ldr	r2, [r3, #4]
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	697a      	ldr	r2, [r7, #20]
 800ea1a:	621a      	str	r2, [r3, #32]
}
 800ea1c:	bf00      	nop
 800ea1e:	371c      	adds	r7, #28
 800ea20:	46bd      	mov	sp, r7
 800ea22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea26:	4770      	bx	lr
 800ea28:	40012c00 	.word	0x40012c00
 800ea2c:	40014400 	.word	0x40014400
 800ea30:	40014800 	.word	0x40014800

0800ea34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ea34:	b480      	push	{r7}
 800ea36:	b087      	sub	sp, #28
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
 800ea3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	6a1b      	ldr	r3, [r3, #32]
 800ea42:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	6a1b      	ldr	r3, [r3, #32]
 800ea48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	685b      	ldr	r3, [r3, #4]
 800ea54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	69db      	ldr	r3, [r3, #28]
 800ea5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ea62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ea66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ea6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	021b      	lsls	r3, r3, #8
 800ea76:	68fa      	ldr	r2, [r7, #12]
 800ea78:	4313      	orrs	r3, r2
 800ea7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ea7c:	693b      	ldr	r3, [r7, #16]
 800ea7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ea82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	689b      	ldr	r3, [r3, #8]
 800ea88:	031b      	lsls	r3, r3, #12
 800ea8a:	693a      	ldr	r2, [r7, #16]
 800ea8c:	4313      	orrs	r3, r2
 800ea8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	4a14      	ldr	r2, [pc, #80]	@ (800eae4 <TIM_OC4_SetConfig+0xb0>)
 800ea94:	4293      	cmp	r3, r2
 800ea96:	d007      	beq.n	800eaa8 <TIM_OC4_SetConfig+0x74>
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	4a13      	ldr	r2, [pc, #76]	@ (800eae8 <TIM_OC4_SetConfig+0xb4>)
 800ea9c:	4293      	cmp	r3, r2
 800ea9e:	d003      	beq.n	800eaa8 <TIM_OC4_SetConfig+0x74>
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	4a12      	ldr	r2, [pc, #72]	@ (800eaec <TIM_OC4_SetConfig+0xb8>)
 800eaa4:	4293      	cmp	r3, r2
 800eaa6:	d109      	bne.n	800eabc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800eaa8:	697b      	ldr	r3, [r7, #20]
 800eaaa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800eaae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	695b      	ldr	r3, [r3, #20]
 800eab4:	019b      	lsls	r3, r3, #6
 800eab6:	697a      	ldr	r2, [r7, #20]
 800eab8:	4313      	orrs	r3, r2
 800eaba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	697a      	ldr	r2, [r7, #20]
 800eac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	68fa      	ldr	r2, [r7, #12]
 800eac6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	685a      	ldr	r2, [r3, #4]
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	693a      	ldr	r2, [r7, #16]
 800ead4:	621a      	str	r2, [r3, #32]
}
 800ead6:	bf00      	nop
 800ead8:	371c      	adds	r7, #28
 800eada:	46bd      	mov	sp, r7
 800eadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae0:	4770      	bx	lr
 800eae2:	bf00      	nop
 800eae4:	40012c00 	.word	0x40012c00
 800eae8:	40014400 	.word	0x40014400
 800eaec:	40014800 	.word	0x40014800

0800eaf0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800eaf0:	b480      	push	{r7}
 800eaf2:	b087      	sub	sp, #28
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
 800eaf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	6a1b      	ldr	r3, [r3, #32]
 800eafe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	6a1b      	ldr	r3, [r3, #32]
 800eb04:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	685b      	ldr	r3, [r3, #4]
 800eb10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800eb1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eb22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	68fa      	ldr	r2, [r7, #12]
 800eb2a:	4313      	orrs	r3, r2
 800eb2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800eb2e:	693b      	ldr	r3, [r7, #16]
 800eb30:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800eb34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	689b      	ldr	r3, [r3, #8]
 800eb3a:	041b      	lsls	r3, r3, #16
 800eb3c:	693a      	ldr	r2, [r7, #16]
 800eb3e:	4313      	orrs	r3, r2
 800eb40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	4a13      	ldr	r2, [pc, #76]	@ (800eb94 <TIM_OC5_SetConfig+0xa4>)
 800eb46:	4293      	cmp	r3, r2
 800eb48:	d007      	beq.n	800eb5a <TIM_OC5_SetConfig+0x6a>
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	4a12      	ldr	r2, [pc, #72]	@ (800eb98 <TIM_OC5_SetConfig+0xa8>)
 800eb4e:	4293      	cmp	r3, r2
 800eb50:	d003      	beq.n	800eb5a <TIM_OC5_SetConfig+0x6a>
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	4a11      	ldr	r2, [pc, #68]	@ (800eb9c <TIM_OC5_SetConfig+0xac>)
 800eb56:	4293      	cmp	r3, r2
 800eb58:	d109      	bne.n	800eb6e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800eb5a:	697b      	ldr	r3, [r7, #20]
 800eb5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800eb60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	695b      	ldr	r3, [r3, #20]
 800eb66:	021b      	lsls	r3, r3, #8
 800eb68:	697a      	ldr	r2, [r7, #20]
 800eb6a:	4313      	orrs	r3, r2
 800eb6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	697a      	ldr	r2, [r7, #20]
 800eb72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	68fa      	ldr	r2, [r7, #12]
 800eb78:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	685a      	ldr	r2, [r3, #4]
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	693a      	ldr	r2, [r7, #16]
 800eb86:	621a      	str	r2, [r3, #32]
}
 800eb88:	bf00      	nop
 800eb8a:	371c      	adds	r7, #28
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb92:	4770      	bx	lr
 800eb94:	40012c00 	.word	0x40012c00
 800eb98:	40014400 	.word	0x40014400
 800eb9c:	40014800 	.word	0x40014800

0800eba0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800eba0:	b480      	push	{r7}
 800eba2:	b087      	sub	sp, #28
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
 800eba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	6a1b      	ldr	r3, [r3, #32]
 800ebae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	6a1b      	ldr	r3, [r3, #32]
 800ebb4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	685b      	ldr	r3, [r3, #4]
 800ebc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ebc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ebce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ebd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	021b      	lsls	r3, r3, #8
 800ebda:	68fa      	ldr	r2, [r7, #12]
 800ebdc:	4313      	orrs	r3, r2
 800ebde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ebe6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	689b      	ldr	r3, [r3, #8]
 800ebec:	051b      	lsls	r3, r3, #20
 800ebee:	693a      	ldr	r2, [r7, #16]
 800ebf0:	4313      	orrs	r3, r2
 800ebf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	4a14      	ldr	r2, [pc, #80]	@ (800ec48 <TIM_OC6_SetConfig+0xa8>)
 800ebf8:	4293      	cmp	r3, r2
 800ebfa:	d007      	beq.n	800ec0c <TIM_OC6_SetConfig+0x6c>
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	4a13      	ldr	r2, [pc, #76]	@ (800ec4c <TIM_OC6_SetConfig+0xac>)
 800ec00:	4293      	cmp	r3, r2
 800ec02:	d003      	beq.n	800ec0c <TIM_OC6_SetConfig+0x6c>
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	4a12      	ldr	r2, [pc, #72]	@ (800ec50 <TIM_OC6_SetConfig+0xb0>)
 800ec08:	4293      	cmp	r3, r2
 800ec0a:	d109      	bne.n	800ec20 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ec12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	695b      	ldr	r3, [r3, #20]
 800ec18:	029b      	lsls	r3, r3, #10
 800ec1a:	697a      	ldr	r2, [r7, #20]
 800ec1c:	4313      	orrs	r3, r2
 800ec1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	697a      	ldr	r2, [r7, #20]
 800ec24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	68fa      	ldr	r2, [r7, #12]
 800ec2a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	685a      	ldr	r2, [r3, #4]
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	693a      	ldr	r2, [r7, #16]
 800ec38:	621a      	str	r2, [r3, #32]
}
 800ec3a:	bf00      	nop
 800ec3c:	371c      	adds	r7, #28
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec44:	4770      	bx	lr
 800ec46:	bf00      	nop
 800ec48:	40012c00 	.word	0x40012c00
 800ec4c:	40014400 	.word	0x40014400
 800ec50:	40014800 	.word	0x40014800

0800ec54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ec54:	b480      	push	{r7}
 800ec56:	b087      	sub	sp, #28
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	60f8      	str	r0, [r7, #12]
 800ec5c:	60b9      	str	r1, [r7, #8]
 800ec5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	f003 031f 	and.w	r3, r3, #31
 800ec66:	2201      	movs	r2, #1
 800ec68:	fa02 f303 	lsl.w	r3, r2, r3
 800ec6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	6a1a      	ldr	r2, [r3, #32]
 800ec72:	697b      	ldr	r3, [r7, #20]
 800ec74:	43db      	mvns	r3, r3
 800ec76:	401a      	ands	r2, r3
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	6a1a      	ldr	r2, [r3, #32]
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	f003 031f 	and.w	r3, r3, #31
 800ec86:	6879      	ldr	r1, [r7, #4]
 800ec88:	fa01 f303 	lsl.w	r3, r1, r3
 800ec8c:	431a      	orrs	r2, r3
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	621a      	str	r2, [r3, #32]
}
 800ec92:	bf00      	nop
 800ec94:	371c      	adds	r7, #28
 800ec96:	46bd      	mov	sp, r7
 800ec98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9c:	4770      	bx	lr
	...

0800eca0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800eca0:	b480      	push	{r7}
 800eca2:	b085      	sub	sp, #20
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
 800eca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ecb0:	2b01      	cmp	r3, #1
 800ecb2:	d101      	bne.n	800ecb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ecb4:	2302      	movs	r3, #2
 800ecb6:	e04a      	b.n	800ed4e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2201      	movs	r2, #1
 800ecbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2202      	movs	r2, #2
 800ecc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	685b      	ldr	r3, [r3, #4]
 800ecce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	689b      	ldr	r3, [r3, #8]
 800ecd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	4a1f      	ldr	r2, [pc, #124]	@ (800ed5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800ecde:	4293      	cmp	r3, r2
 800ece0:	d108      	bne.n	800ecf4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ece8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	685b      	ldr	r3, [r3, #4]
 800ecee:	68fa      	ldr	r2, [r7, #12]
 800ecf0:	4313      	orrs	r3, r2
 800ecf2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ecfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	68fa      	ldr	r2, [r7, #12]
 800ed02:	4313      	orrs	r3, r2
 800ed04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	68fa      	ldr	r2, [r7, #12]
 800ed0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	4a12      	ldr	r2, [pc, #72]	@ (800ed5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800ed14:	4293      	cmp	r3, r2
 800ed16:	d004      	beq.n	800ed22 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ed20:	d10c      	bne.n	800ed3c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ed22:	68bb      	ldr	r3, [r7, #8]
 800ed24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ed28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ed2a:	683b      	ldr	r3, [r7, #0]
 800ed2c:	689b      	ldr	r3, [r3, #8]
 800ed2e:	68ba      	ldr	r2, [r7, #8]
 800ed30:	4313      	orrs	r3, r2
 800ed32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	68ba      	ldr	r2, [r7, #8]
 800ed3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2201      	movs	r2, #1
 800ed40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2200      	movs	r2, #0
 800ed48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ed4c:	2300      	movs	r3, #0
}
 800ed4e:	4618      	mov	r0, r3
 800ed50:	3714      	adds	r7, #20
 800ed52:	46bd      	mov	sp, r7
 800ed54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed58:	4770      	bx	lr
 800ed5a:	bf00      	nop
 800ed5c:	40012c00 	.word	0x40012c00

0800ed60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ed60:	b480      	push	{r7}
 800ed62:	b083      	sub	sp, #12
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ed68:	bf00      	nop
 800ed6a:	370c      	adds	r7, #12
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed72:	4770      	bx	lr

0800ed74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ed74:	b480      	push	{r7}
 800ed76:	b083      	sub	sp, #12
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ed7c:	bf00      	nop
 800ed7e:	370c      	adds	r7, #12
 800ed80:	46bd      	mov	sp, r7
 800ed82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed86:	4770      	bx	lr

0800ed88 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ed88:	b480      	push	{r7}
 800ed8a:	b083      	sub	sp, #12
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ed90:	bf00      	nop
 800ed92:	370c      	adds	r7, #12
 800ed94:	46bd      	mov	sp, r7
 800ed96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9a:	4770      	bx	lr

0800ed9c <LL_RCC_GetUSARTClockSource>:
{
 800ed9c:	b480      	push	{r7}
 800ed9e:	b083      	sub	sp, #12
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800eda4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800eda8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	4013      	ands	r3, r2
}
 800edb0:	4618      	mov	r0, r3
 800edb2:	370c      	adds	r7, #12
 800edb4:	46bd      	mov	sp, r7
 800edb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edba:	4770      	bx	lr

0800edbc <LL_RCC_GetLPUARTClockSource>:
{
 800edbc:	b480      	push	{r7}
 800edbe:	b083      	sub	sp, #12
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800edc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800edc8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	4013      	ands	r3, r2
}
 800edd0:	4618      	mov	r0, r3
 800edd2:	370c      	adds	r7, #12
 800edd4:	46bd      	mov	sp, r7
 800edd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edda:	4770      	bx	lr

0800eddc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b082      	sub	sp, #8
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d101      	bne.n	800edee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800edea:	2301      	movs	r3, #1
 800edec:	e050      	b.n	800ee90 <HAL_UART_Init+0xb4>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d114      	bne.n	800ee22 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	2200      	movs	r2, #0
 800edfc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800ee00:	6878      	ldr	r0, [r7, #4]
 800ee02:	f000 f935 	bl	800f070 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d103      	bne.n	800ee18 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	4a21      	ldr	r2, [pc, #132]	@ (800ee98 <HAL_UART_Init+0xbc>)
 800ee14:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800ee1e:	6878      	ldr	r0, [r7, #4]
 800ee20:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	2224      	movs	r2, #36	@ 0x24
 800ee26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	681a      	ldr	r2, [r3, #0]
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	f022 0201 	bic.w	r2, r2, #1
 800ee38:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d002      	beq.n	800ee48 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800ee42:	6878      	ldr	r0, [r7, #4]
 800ee44:	f000 fb8e 	bl	800f564 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f000 f963 	bl	800f114 <UART_SetConfig>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	2b01      	cmp	r3, #1
 800ee52:	d101      	bne.n	800ee58 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800ee54:	2301      	movs	r3, #1
 800ee56:	e01b      	b.n	800ee90 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	685a      	ldr	r2, [r3, #4]
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ee66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	689a      	ldr	r2, [r3, #8]
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ee76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	681a      	ldr	r2, [r3, #0]
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	f042 0201 	orr.w	r2, r2, #1
 800ee86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f000 fc0d 	bl	800f6a8 <UART_CheckIdleState>
 800ee8e:	4603      	mov	r3, r0
}
 800ee90:	4618      	mov	r0, r3
 800ee92:	3708      	adds	r7, #8
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}
 800ee98:	08007369 	.word	0x08007369

0800ee9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b08a      	sub	sp, #40	@ 0x28
 800eea0:	af02      	add	r7, sp, #8
 800eea2:	60f8      	str	r0, [r7, #12]
 800eea4:	60b9      	str	r1, [r7, #8]
 800eea6:	603b      	str	r3, [r7, #0]
 800eea8:	4613      	mov	r3, r2
 800eeaa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eeb2:	2b20      	cmp	r3, #32
 800eeb4:	d17b      	bne.n	800efae <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d002      	beq.n	800eec2 <HAL_UART_Transmit+0x26>
 800eebc:	88fb      	ldrh	r3, [r7, #6]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d101      	bne.n	800eec6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800eec2:	2301      	movs	r3, #1
 800eec4:	e074      	b.n	800efb0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	2200      	movs	r2, #0
 800eeca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	2221      	movs	r2, #33	@ 0x21
 800eed2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800eed6:	f7f8 fb35 	bl	8007544 <HAL_GetTick>
 800eeda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	88fa      	ldrh	r2, [r7, #6]
 800eee0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	88fa      	ldrh	r2, [r7, #6]
 800eee8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	689b      	ldr	r3, [r3, #8]
 800eef0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eef4:	d108      	bne.n	800ef08 <HAL_UART_Transmit+0x6c>
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	691b      	ldr	r3, [r3, #16]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d104      	bne.n	800ef08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800eefe:	2300      	movs	r3, #0
 800ef00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ef02:	68bb      	ldr	r3, [r7, #8]
 800ef04:	61bb      	str	r3, [r7, #24]
 800ef06:	e003      	b.n	800ef10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ef08:	68bb      	ldr	r3, [r7, #8]
 800ef0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ef10:	e030      	b.n	800ef74 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ef12:	683b      	ldr	r3, [r7, #0]
 800ef14:	9300      	str	r3, [sp, #0]
 800ef16:	697b      	ldr	r3, [r7, #20]
 800ef18:	2200      	movs	r2, #0
 800ef1a:	2180      	movs	r1, #128	@ 0x80
 800ef1c:	68f8      	ldr	r0, [r7, #12]
 800ef1e:	f000 fc6d 	bl	800f7fc <UART_WaitOnFlagUntilTimeout>
 800ef22:	4603      	mov	r3, r0
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d005      	beq.n	800ef34 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	2220      	movs	r2, #32
 800ef2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ef30:	2303      	movs	r3, #3
 800ef32:	e03d      	b.n	800efb0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ef34:	69fb      	ldr	r3, [r7, #28]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d10b      	bne.n	800ef52 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ef3a:	69bb      	ldr	r3, [r7, #24]
 800ef3c:	881b      	ldrh	r3, [r3, #0]
 800ef3e:	461a      	mov	r2, r3
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ef48:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ef4a:	69bb      	ldr	r3, [r7, #24]
 800ef4c:	3302      	adds	r3, #2
 800ef4e:	61bb      	str	r3, [r7, #24]
 800ef50:	e007      	b.n	800ef62 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ef52:	69fb      	ldr	r3, [r7, #28]
 800ef54:	781a      	ldrb	r2, [r3, #0]
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ef5c:	69fb      	ldr	r3, [r7, #28]
 800ef5e:	3301      	adds	r3, #1
 800ef60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ef68:	b29b      	uxth	r3, r3
 800ef6a:	3b01      	subs	r3, #1
 800ef6c:	b29a      	uxth	r2, r3
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ef7a:	b29b      	uxth	r3, r3
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d1c8      	bne.n	800ef12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	9300      	str	r3, [sp, #0]
 800ef84:	697b      	ldr	r3, [r7, #20]
 800ef86:	2200      	movs	r2, #0
 800ef88:	2140      	movs	r1, #64	@ 0x40
 800ef8a:	68f8      	ldr	r0, [r7, #12]
 800ef8c:	f000 fc36 	bl	800f7fc <UART_WaitOnFlagUntilTimeout>
 800ef90:	4603      	mov	r3, r0
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d005      	beq.n	800efa2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	2220      	movs	r2, #32
 800ef9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800ef9e:	2303      	movs	r3, #3
 800efa0:	e006      	b.n	800efb0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	2220      	movs	r2, #32
 800efa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800efaa:	2300      	movs	r3, #0
 800efac:	e000      	b.n	800efb0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800efae:	2302      	movs	r3, #2
  }
}
 800efb0:	4618      	mov	r0, r3
 800efb2:	3720      	adds	r7, #32
 800efb4:	46bd      	mov	sp, r7
 800efb6:	bd80      	pop	{r7, pc}

0800efb8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800efb8:	b480      	push	{r7}
 800efba:	b083      	sub	sp, #12
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800efc0:	bf00      	nop
 800efc2:	370c      	adds	r7, #12
 800efc4:	46bd      	mov	sp, r7
 800efc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efca:	4770      	bx	lr

0800efcc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800efcc:	b480      	push	{r7}
 800efce:	b083      	sub	sp, #12
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800efd4:	bf00      	nop
 800efd6:	370c      	adds	r7, #12
 800efd8:	46bd      	mov	sp, r7
 800efda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efde:	4770      	bx	lr

0800efe0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800efe0:	b480      	push	{r7}
 800efe2:	b083      	sub	sp, #12
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800efe8:	bf00      	nop
 800efea:	370c      	adds	r7, #12
 800efec:	46bd      	mov	sp, r7
 800efee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff2:	4770      	bx	lr

0800eff4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800eff4:	b480      	push	{r7}
 800eff6:	b083      	sub	sp, #12
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800effc:	bf00      	nop
 800effe:	370c      	adds	r7, #12
 800f000:	46bd      	mov	sp, r7
 800f002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f006:	4770      	bx	lr

0800f008 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f008:	b480      	push	{r7}
 800f00a:	b083      	sub	sp, #12
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f010:	bf00      	nop
 800f012:	370c      	adds	r7, #12
 800f014:	46bd      	mov	sp, r7
 800f016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01a:	4770      	bx	lr

0800f01c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800f01c:	b480      	push	{r7}
 800f01e:	b083      	sub	sp, #12
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800f024:	bf00      	nop
 800f026:	370c      	adds	r7, #12
 800f028:	46bd      	mov	sp, r7
 800f02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f02e:	4770      	bx	lr

0800f030 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800f030:	b480      	push	{r7}
 800f032:	b083      	sub	sp, #12
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800f038:	bf00      	nop
 800f03a:	370c      	adds	r7, #12
 800f03c:	46bd      	mov	sp, r7
 800f03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f042:	4770      	bx	lr

0800f044 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800f044:	b480      	push	{r7}
 800f046:	b083      	sub	sp, #12
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800f04c:	bf00      	nop
 800f04e:	370c      	adds	r7, #12
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr

0800f058 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f058:	b480      	push	{r7}
 800f05a:	b083      	sub	sp, #12
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
 800f060:	460b      	mov	r3, r1
 800f062:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f064:	bf00      	nop
 800f066:	370c      	adds	r7, #12
 800f068:	46bd      	mov	sp, r7
 800f06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06e:	4770      	bx	lr

0800f070 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800f070:	b480      	push	{r7}
 800f072:	b083      	sub	sp, #12
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	4a1a      	ldr	r2, [pc, #104]	@ (800f0e4 <UART_InitCallbacksToDefault+0x74>)
 800f07c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	4a19      	ldr	r2, [pc, #100]	@ (800f0e8 <UART_InitCallbacksToDefault+0x78>)
 800f084:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	4a18      	ldr	r2, [pc, #96]	@ (800f0ec <UART_InitCallbacksToDefault+0x7c>)
 800f08c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	4a17      	ldr	r2, [pc, #92]	@ (800f0f0 <UART_InitCallbacksToDefault+0x80>)
 800f094:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	4a16      	ldr	r2, [pc, #88]	@ (800f0f4 <UART_InitCallbacksToDefault+0x84>)
 800f09c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	4a15      	ldr	r2, [pc, #84]	@ (800f0f8 <UART_InitCallbacksToDefault+0x88>)
 800f0a4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	4a14      	ldr	r2, [pc, #80]	@ (800f0fc <UART_InitCallbacksToDefault+0x8c>)
 800f0ac:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	4a13      	ldr	r2, [pc, #76]	@ (800f100 <UART_InitCallbacksToDefault+0x90>)
 800f0b4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	4a12      	ldr	r2, [pc, #72]	@ (800f104 <UART_InitCallbacksToDefault+0x94>)
 800f0bc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	4a11      	ldr	r2, [pc, #68]	@ (800f108 <UART_InitCallbacksToDefault+0x98>)
 800f0c4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	4a10      	ldr	r2, [pc, #64]	@ (800f10c <UART_InitCallbacksToDefault+0x9c>)
 800f0cc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	4a0f      	ldr	r2, [pc, #60]	@ (800f110 <UART_InitCallbacksToDefault+0xa0>)
 800f0d4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800f0d8:	bf00      	nop
 800f0da:	370c      	adds	r7, #12
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e2:	4770      	bx	lr
 800f0e4:	0800efcd 	.word	0x0800efcd
 800f0e8:	0800efb9 	.word	0x0800efb9
 800f0ec:	0800eff5 	.word	0x0800eff5
 800f0f0:	0800efe1 	.word	0x0800efe1
 800f0f4:	0800f009 	.word	0x0800f009
 800f0f8:	0800f01d 	.word	0x0800f01d
 800f0fc:	0800f031 	.word	0x0800f031
 800f100:	0800f045 	.word	0x0800f045
 800f104:	0800f9a3 	.word	0x0800f9a3
 800f108:	0800f9b7 	.word	0x0800f9b7
 800f10c:	0800f9cb 	.word	0x0800f9cb
 800f110:	0800f059 	.word	0x0800f059

0800f114 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f114:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f118:	b08c      	sub	sp, #48	@ 0x30
 800f11a:	af00      	add	r7, sp, #0
 800f11c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f11e:	2300      	movs	r3, #0
 800f120:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f124:	697b      	ldr	r3, [r7, #20]
 800f126:	689a      	ldr	r2, [r3, #8]
 800f128:	697b      	ldr	r3, [r7, #20]
 800f12a:	691b      	ldr	r3, [r3, #16]
 800f12c:	431a      	orrs	r2, r3
 800f12e:	697b      	ldr	r3, [r7, #20]
 800f130:	695b      	ldr	r3, [r3, #20]
 800f132:	431a      	orrs	r2, r3
 800f134:	697b      	ldr	r3, [r7, #20]
 800f136:	69db      	ldr	r3, [r3, #28]
 800f138:	4313      	orrs	r3, r2
 800f13a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	681a      	ldr	r2, [r3, #0]
 800f142:	4baf      	ldr	r3, [pc, #700]	@ (800f400 <UART_SetConfig+0x2ec>)
 800f144:	4013      	ands	r3, r2
 800f146:	697a      	ldr	r2, [r7, #20]
 800f148:	6812      	ldr	r2, [r2, #0]
 800f14a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f14c:	430b      	orrs	r3, r1
 800f14e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	685b      	ldr	r3, [r3, #4]
 800f156:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f15a:	697b      	ldr	r3, [r7, #20]
 800f15c:	68da      	ldr	r2, [r3, #12]
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	430a      	orrs	r2, r1
 800f164:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f166:	697b      	ldr	r3, [r7, #20]
 800f168:	699b      	ldr	r3, [r3, #24]
 800f16a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f16c:	697b      	ldr	r3, [r7, #20]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	4aa4      	ldr	r2, [pc, #656]	@ (800f404 <UART_SetConfig+0x2f0>)
 800f172:	4293      	cmp	r3, r2
 800f174:	d004      	beq.n	800f180 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f176:	697b      	ldr	r3, [r7, #20]
 800f178:	6a1b      	ldr	r3, [r3, #32]
 800f17a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f17c:	4313      	orrs	r3, r2
 800f17e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	689b      	ldr	r3, [r3, #8]
 800f186:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800f18a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800f18e:	697a      	ldr	r2, [r7, #20]
 800f190:	6812      	ldr	r2, [r2, #0]
 800f192:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f194:	430b      	orrs	r3, r1
 800f196:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f198:	697b      	ldr	r3, [r7, #20]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f19e:	f023 010f 	bic.w	r1, r3, #15
 800f1a2:	697b      	ldr	r3, [r7, #20]
 800f1a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f1a6:	697b      	ldr	r3, [r7, #20]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	430a      	orrs	r2, r1
 800f1ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f1ae:	697b      	ldr	r3, [r7, #20]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	4a95      	ldr	r2, [pc, #596]	@ (800f408 <UART_SetConfig+0x2f4>)
 800f1b4:	4293      	cmp	r3, r2
 800f1b6:	d125      	bne.n	800f204 <UART_SetConfig+0xf0>
 800f1b8:	2003      	movs	r0, #3
 800f1ba:	f7ff fdef 	bl	800ed9c <LL_RCC_GetUSARTClockSource>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	2b03      	cmp	r3, #3
 800f1c2:	d81b      	bhi.n	800f1fc <UART_SetConfig+0xe8>
 800f1c4:	a201      	add	r2, pc, #4	@ (adr r2, 800f1cc <UART_SetConfig+0xb8>)
 800f1c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1ca:	bf00      	nop
 800f1cc:	0800f1dd 	.word	0x0800f1dd
 800f1d0:	0800f1ed 	.word	0x0800f1ed
 800f1d4:	0800f1e5 	.word	0x0800f1e5
 800f1d8:	0800f1f5 	.word	0x0800f1f5
 800f1dc:	2301      	movs	r3, #1
 800f1de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f1e2:	e042      	b.n	800f26a <UART_SetConfig+0x156>
 800f1e4:	2302      	movs	r3, #2
 800f1e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f1ea:	e03e      	b.n	800f26a <UART_SetConfig+0x156>
 800f1ec:	2304      	movs	r3, #4
 800f1ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f1f2:	e03a      	b.n	800f26a <UART_SetConfig+0x156>
 800f1f4:	2308      	movs	r3, #8
 800f1f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f1fa:	e036      	b.n	800f26a <UART_SetConfig+0x156>
 800f1fc:	2310      	movs	r3, #16
 800f1fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f202:	e032      	b.n	800f26a <UART_SetConfig+0x156>
 800f204:	697b      	ldr	r3, [r7, #20]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	4a7e      	ldr	r2, [pc, #504]	@ (800f404 <UART_SetConfig+0x2f0>)
 800f20a:	4293      	cmp	r3, r2
 800f20c:	d12a      	bne.n	800f264 <UART_SetConfig+0x150>
 800f20e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800f212:	f7ff fdd3 	bl	800edbc <LL_RCC_GetLPUARTClockSource>
 800f216:	4603      	mov	r3, r0
 800f218:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f21c:	d01a      	beq.n	800f254 <UART_SetConfig+0x140>
 800f21e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f222:	d81b      	bhi.n	800f25c <UART_SetConfig+0x148>
 800f224:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f228:	d00c      	beq.n	800f244 <UART_SetConfig+0x130>
 800f22a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f22e:	d815      	bhi.n	800f25c <UART_SetConfig+0x148>
 800f230:	2b00      	cmp	r3, #0
 800f232:	d003      	beq.n	800f23c <UART_SetConfig+0x128>
 800f234:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f238:	d008      	beq.n	800f24c <UART_SetConfig+0x138>
 800f23a:	e00f      	b.n	800f25c <UART_SetConfig+0x148>
 800f23c:	2300      	movs	r3, #0
 800f23e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f242:	e012      	b.n	800f26a <UART_SetConfig+0x156>
 800f244:	2302      	movs	r3, #2
 800f246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f24a:	e00e      	b.n	800f26a <UART_SetConfig+0x156>
 800f24c:	2304      	movs	r3, #4
 800f24e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f252:	e00a      	b.n	800f26a <UART_SetConfig+0x156>
 800f254:	2308      	movs	r3, #8
 800f256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f25a:	e006      	b.n	800f26a <UART_SetConfig+0x156>
 800f25c:	2310      	movs	r3, #16
 800f25e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f262:	e002      	b.n	800f26a <UART_SetConfig+0x156>
 800f264:	2310      	movs	r3, #16
 800f266:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f26a:	697b      	ldr	r3, [r7, #20]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	4a65      	ldr	r2, [pc, #404]	@ (800f404 <UART_SetConfig+0x2f0>)
 800f270:	4293      	cmp	r3, r2
 800f272:	f040 8097 	bne.w	800f3a4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f276:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f27a:	2b08      	cmp	r3, #8
 800f27c:	d823      	bhi.n	800f2c6 <UART_SetConfig+0x1b2>
 800f27e:	a201      	add	r2, pc, #4	@ (adr r2, 800f284 <UART_SetConfig+0x170>)
 800f280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f284:	0800f2a9 	.word	0x0800f2a9
 800f288:	0800f2c7 	.word	0x0800f2c7
 800f28c:	0800f2b1 	.word	0x0800f2b1
 800f290:	0800f2c7 	.word	0x0800f2c7
 800f294:	0800f2b7 	.word	0x0800f2b7
 800f298:	0800f2c7 	.word	0x0800f2c7
 800f29c:	0800f2c7 	.word	0x0800f2c7
 800f2a0:	0800f2c7 	.word	0x0800f2c7
 800f2a4:	0800f2bf 	.word	0x0800f2bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f2a8:	f7fc fea8 	bl	800bffc <HAL_RCC_GetPCLK1Freq>
 800f2ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f2ae:	e010      	b.n	800f2d2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f2b0:	4b56      	ldr	r3, [pc, #344]	@ (800f40c <UART_SetConfig+0x2f8>)
 800f2b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f2b4:	e00d      	b.n	800f2d2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f2b6:	f7fc fe21 	bl	800befc <HAL_RCC_GetSysClockFreq>
 800f2ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f2bc:	e009      	b.n	800f2d2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f2be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f2c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f2c4:	e005      	b.n	800f2d2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f2d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	f000 812b 	beq.w	800f530 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f2da:	697b      	ldr	r3, [r7, #20]
 800f2dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2de:	4a4c      	ldr	r2, [pc, #304]	@ (800f410 <UART_SetConfig+0x2fc>)
 800f2e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2e4:	461a      	mov	r2, r3
 800f2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f2ec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f2ee:	697b      	ldr	r3, [r7, #20]
 800f2f0:	685a      	ldr	r2, [r3, #4]
 800f2f2:	4613      	mov	r3, r2
 800f2f4:	005b      	lsls	r3, r3, #1
 800f2f6:	4413      	add	r3, r2
 800f2f8:	69ba      	ldr	r2, [r7, #24]
 800f2fa:	429a      	cmp	r2, r3
 800f2fc:	d305      	bcc.n	800f30a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f2fe:	697b      	ldr	r3, [r7, #20]
 800f300:	685b      	ldr	r3, [r3, #4]
 800f302:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f304:	69ba      	ldr	r2, [r7, #24]
 800f306:	429a      	cmp	r2, r3
 800f308:	d903      	bls.n	800f312 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800f30a:	2301      	movs	r3, #1
 800f30c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f310:	e10e      	b.n	800f530 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f314:	2200      	movs	r2, #0
 800f316:	60bb      	str	r3, [r7, #8]
 800f318:	60fa      	str	r2, [r7, #12]
 800f31a:	697b      	ldr	r3, [r7, #20]
 800f31c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f31e:	4a3c      	ldr	r2, [pc, #240]	@ (800f410 <UART_SetConfig+0x2fc>)
 800f320:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f324:	b29b      	uxth	r3, r3
 800f326:	2200      	movs	r2, #0
 800f328:	603b      	str	r3, [r7, #0]
 800f32a:	607a      	str	r2, [r7, #4]
 800f32c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f330:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f334:	f7f1 fc60 	bl	8000bf8 <__aeabi_uldivmod>
 800f338:	4602      	mov	r2, r0
 800f33a:	460b      	mov	r3, r1
 800f33c:	4610      	mov	r0, r2
 800f33e:	4619      	mov	r1, r3
 800f340:	f04f 0200 	mov.w	r2, #0
 800f344:	f04f 0300 	mov.w	r3, #0
 800f348:	020b      	lsls	r3, r1, #8
 800f34a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f34e:	0202      	lsls	r2, r0, #8
 800f350:	6979      	ldr	r1, [r7, #20]
 800f352:	6849      	ldr	r1, [r1, #4]
 800f354:	0849      	lsrs	r1, r1, #1
 800f356:	2000      	movs	r0, #0
 800f358:	460c      	mov	r4, r1
 800f35a:	4605      	mov	r5, r0
 800f35c:	eb12 0804 	adds.w	r8, r2, r4
 800f360:	eb43 0905 	adc.w	r9, r3, r5
 800f364:	697b      	ldr	r3, [r7, #20]
 800f366:	685b      	ldr	r3, [r3, #4]
 800f368:	2200      	movs	r2, #0
 800f36a:	469a      	mov	sl, r3
 800f36c:	4693      	mov	fp, r2
 800f36e:	4652      	mov	r2, sl
 800f370:	465b      	mov	r3, fp
 800f372:	4640      	mov	r0, r8
 800f374:	4649      	mov	r1, r9
 800f376:	f7f1 fc3f 	bl	8000bf8 <__aeabi_uldivmod>
 800f37a:	4602      	mov	r2, r0
 800f37c:	460b      	mov	r3, r1
 800f37e:	4613      	mov	r3, r2
 800f380:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f382:	6a3b      	ldr	r3, [r7, #32]
 800f384:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f388:	d308      	bcc.n	800f39c <UART_SetConfig+0x288>
 800f38a:	6a3b      	ldr	r3, [r7, #32]
 800f38c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f390:	d204      	bcs.n	800f39c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800f392:	697b      	ldr	r3, [r7, #20]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	6a3a      	ldr	r2, [r7, #32]
 800f398:	60da      	str	r2, [r3, #12]
 800f39a:	e0c9      	b.n	800f530 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800f39c:	2301      	movs	r3, #1
 800f39e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f3a2:	e0c5      	b.n	800f530 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f3a4:	697b      	ldr	r3, [r7, #20]
 800f3a6:	69db      	ldr	r3, [r3, #28]
 800f3a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f3ac:	d16d      	bne.n	800f48a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800f3ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f3b2:	3b01      	subs	r3, #1
 800f3b4:	2b07      	cmp	r3, #7
 800f3b6:	d82d      	bhi.n	800f414 <UART_SetConfig+0x300>
 800f3b8:	a201      	add	r2, pc, #4	@ (adr r2, 800f3c0 <UART_SetConfig+0x2ac>)
 800f3ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3be:	bf00      	nop
 800f3c0:	0800f3e1 	.word	0x0800f3e1
 800f3c4:	0800f3e9 	.word	0x0800f3e9
 800f3c8:	0800f415 	.word	0x0800f415
 800f3cc:	0800f3ef 	.word	0x0800f3ef
 800f3d0:	0800f415 	.word	0x0800f415
 800f3d4:	0800f415 	.word	0x0800f415
 800f3d8:	0800f415 	.word	0x0800f415
 800f3dc:	0800f3f7 	.word	0x0800f3f7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f3e0:	f7fc fe22 	bl	800c028 <HAL_RCC_GetPCLK2Freq>
 800f3e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f3e6:	e01b      	b.n	800f420 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f3e8:	4b08      	ldr	r3, [pc, #32]	@ (800f40c <UART_SetConfig+0x2f8>)
 800f3ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f3ec:	e018      	b.n	800f420 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f3ee:	f7fc fd85 	bl	800befc <HAL_RCC_GetSysClockFreq>
 800f3f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f3f4:	e014      	b.n	800f420 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f3f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f3fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f3fc:	e010      	b.n	800f420 <UART_SetConfig+0x30c>
 800f3fe:	bf00      	nop
 800f400:	cfff69f3 	.word	0xcfff69f3
 800f404:	40008000 	.word	0x40008000
 800f408:	40013800 	.word	0x40013800
 800f40c:	00f42400 	.word	0x00f42400
 800f410:	0801cc6c 	.word	0x0801cc6c
      default:
        pclk = 0U;
 800f414:	2300      	movs	r3, #0
 800f416:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f418:	2301      	movs	r3, #1
 800f41a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f41e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f422:	2b00      	cmp	r3, #0
 800f424:	f000 8084 	beq.w	800f530 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f428:	697b      	ldr	r3, [r7, #20]
 800f42a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f42c:	4a4b      	ldr	r2, [pc, #300]	@ (800f55c <UART_SetConfig+0x448>)
 800f42e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f432:	461a      	mov	r2, r3
 800f434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f436:	fbb3 f3f2 	udiv	r3, r3, r2
 800f43a:	005a      	lsls	r2, r3, #1
 800f43c:	697b      	ldr	r3, [r7, #20]
 800f43e:	685b      	ldr	r3, [r3, #4]
 800f440:	085b      	lsrs	r3, r3, #1
 800f442:	441a      	add	r2, r3
 800f444:	697b      	ldr	r3, [r7, #20]
 800f446:	685b      	ldr	r3, [r3, #4]
 800f448:	fbb2 f3f3 	udiv	r3, r2, r3
 800f44c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f44e:	6a3b      	ldr	r3, [r7, #32]
 800f450:	2b0f      	cmp	r3, #15
 800f452:	d916      	bls.n	800f482 <UART_SetConfig+0x36e>
 800f454:	6a3b      	ldr	r3, [r7, #32]
 800f456:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f45a:	d212      	bcs.n	800f482 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f45c:	6a3b      	ldr	r3, [r7, #32]
 800f45e:	b29b      	uxth	r3, r3
 800f460:	f023 030f 	bic.w	r3, r3, #15
 800f464:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f466:	6a3b      	ldr	r3, [r7, #32]
 800f468:	085b      	lsrs	r3, r3, #1
 800f46a:	b29b      	uxth	r3, r3
 800f46c:	f003 0307 	and.w	r3, r3, #7
 800f470:	b29a      	uxth	r2, r3
 800f472:	8bfb      	ldrh	r3, [r7, #30]
 800f474:	4313      	orrs	r3, r2
 800f476:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800f478:	697b      	ldr	r3, [r7, #20]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	8bfa      	ldrh	r2, [r7, #30]
 800f47e:	60da      	str	r2, [r3, #12]
 800f480:	e056      	b.n	800f530 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800f482:	2301      	movs	r3, #1
 800f484:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f488:	e052      	b.n	800f530 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f48a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f48e:	3b01      	subs	r3, #1
 800f490:	2b07      	cmp	r3, #7
 800f492:	d822      	bhi.n	800f4da <UART_SetConfig+0x3c6>
 800f494:	a201      	add	r2, pc, #4	@ (adr r2, 800f49c <UART_SetConfig+0x388>)
 800f496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f49a:	bf00      	nop
 800f49c:	0800f4bd 	.word	0x0800f4bd
 800f4a0:	0800f4c5 	.word	0x0800f4c5
 800f4a4:	0800f4db 	.word	0x0800f4db
 800f4a8:	0800f4cb 	.word	0x0800f4cb
 800f4ac:	0800f4db 	.word	0x0800f4db
 800f4b0:	0800f4db 	.word	0x0800f4db
 800f4b4:	0800f4db 	.word	0x0800f4db
 800f4b8:	0800f4d3 	.word	0x0800f4d3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f4bc:	f7fc fdb4 	bl	800c028 <HAL_RCC_GetPCLK2Freq>
 800f4c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f4c2:	e010      	b.n	800f4e6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f4c4:	4b26      	ldr	r3, [pc, #152]	@ (800f560 <UART_SetConfig+0x44c>)
 800f4c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f4c8:	e00d      	b.n	800f4e6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f4ca:	f7fc fd17 	bl	800befc <HAL_RCC_GetSysClockFreq>
 800f4ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f4d0:	e009      	b.n	800f4e6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f4d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f4d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f4d8:	e005      	b.n	800f4e6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800f4da:	2300      	movs	r3, #0
 800f4dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f4de:	2301      	movs	r3, #1
 800f4e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f4e4:	bf00      	nop
    }

    if (pclk != 0U)
 800f4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d021      	beq.n	800f530 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f4ec:	697b      	ldr	r3, [r7, #20]
 800f4ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4f0:	4a1a      	ldr	r2, [pc, #104]	@ (800f55c <UART_SetConfig+0x448>)
 800f4f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f4f6:	461a      	mov	r2, r3
 800f4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4fa:	fbb3 f2f2 	udiv	r2, r3, r2
 800f4fe:	697b      	ldr	r3, [r7, #20]
 800f500:	685b      	ldr	r3, [r3, #4]
 800f502:	085b      	lsrs	r3, r3, #1
 800f504:	441a      	add	r2, r3
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	685b      	ldr	r3, [r3, #4]
 800f50a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f50e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f510:	6a3b      	ldr	r3, [r7, #32]
 800f512:	2b0f      	cmp	r3, #15
 800f514:	d909      	bls.n	800f52a <UART_SetConfig+0x416>
 800f516:	6a3b      	ldr	r3, [r7, #32]
 800f518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f51c:	d205      	bcs.n	800f52a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f51e:	6a3b      	ldr	r3, [r7, #32]
 800f520:	b29a      	uxth	r2, r3
 800f522:	697b      	ldr	r3, [r7, #20]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	60da      	str	r2, [r3, #12]
 800f528:	e002      	b.n	800f530 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800f52a:	2301      	movs	r3, #1
 800f52c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	2201      	movs	r2, #1
 800f534:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f538:	697b      	ldr	r3, [r7, #20]
 800f53a:	2201      	movs	r2, #1
 800f53c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f540:	697b      	ldr	r3, [r7, #20]
 800f542:	2200      	movs	r2, #0
 800f544:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f546:	697b      	ldr	r3, [r7, #20]
 800f548:	2200      	movs	r2, #0
 800f54a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f54c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800f550:	4618      	mov	r0, r3
 800f552:	3730      	adds	r7, #48	@ 0x30
 800f554:	46bd      	mov	sp, r7
 800f556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f55a:	bf00      	nop
 800f55c:	0801cc6c 	.word	0x0801cc6c
 800f560:	00f42400 	.word	0x00f42400

0800f564 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f564:	b480      	push	{r7}
 800f566:	b083      	sub	sp, #12
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f570:	f003 0308 	and.w	r3, r3, #8
 800f574:	2b00      	cmp	r3, #0
 800f576:	d00a      	beq.n	800f58e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	685b      	ldr	r3, [r3, #4]
 800f57e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	430a      	orrs	r2, r1
 800f58c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f592:	f003 0301 	and.w	r3, r3, #1
 800f596:	2b00      	cmp	r3, #0
 800f598:	d00a      	beq.n	800f5b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	685b      	ldr	r3, [r3, #4]
 800f5a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	430a      	orrs	r2, r1
 800f5ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5b4:	f003 0302 	and.w	r3, r3, #2
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d00a      	beq.n	800f5d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	685b      	ldr	r3, [r3, #4]
 800f5c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	430a      	orrs	r2, r1
 800f5d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5d6:	f003 0304 	and.w	r3, r3, #4
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d00a      	beq.n	800f5f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	685b      	ldr	r3, [r3, #4]
 800f5e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	430a      	orrs	r2, r1
 800f5f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5f8:	f003 0310 	and.w	r3, r3, #16
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d00a      	beq.n	800f616 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	689b      	ldr	r3, [r3, #8]
 800f606:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	430a      	orrs	r2, r1
 800f614:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f61a:	f003 0320 	and.w	r3, r3, #32
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d00a      	beq.n	800f638 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	689b      	ldr	r3, [r3, #8]
 800f628:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	430a      	orrs	r2, r1
 800f636:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f63c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f640:	2b00      	cmp	r3, #0
 800f642:	d01a      	beq.n	800f67a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	685b      	ldr	r3, [r3, #4]
 800f64a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	430a      	orrs	r2, r1
 800f658:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f65e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f662:	d10a      	bne.n	800f67a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	685b      	ldr	r3, [r3, #4]
 800f66a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	430a      	orrs	r2, r1
 800f678:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f67e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f682:	2b00      	cmp	r3, #0
 800f684:	d00a      	beq.n	800f69c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	685b      	ldr	r3, [r3, #4]
 800f68c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	430a      	orrs	r2, r1
 800f69a:	605a      	str	r2, [r3, #4]
  }
}
 800f69c:	bf00      	nop
 800f69e:	370c      	adds	r7, #12
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a6:	4770      	bx	lr

0800f6a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b098      	sub	sp, #96	@ 0x60
 800f6ac:	af02      	add	r7, sp, #8
 800f6ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f6b8:	f7f7 ff44 	bl	8007544 <HAL_GetTick>
 800f6bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	f003 0308 	and.w	r3, r3, #8
 800f6c8:	2b08      	cmp	r3, #8
 800f6ca:	d12f      	bne.n	800f72c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f6cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f6d0:	9300      	str	r3, [sp, #0]
 800f6d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f6da:	6878      	ldr	r0, [r7, #4]
 800f6dc:	f000 f88e 	bl	800f7fc <UART_WaitOnFlagUntilTimeout>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d022      	beq.n	800f72c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6ee:	e853 3f00 	ldrex	r3, [r3]
 800f6f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f6f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f6f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f6fa:	653b      	str	r3, [r7, #80]	@ 0x50
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	461a      	mov	r2, r3
 800f702:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f704:	647b      	str	r3, [r7, #68]	@ 0x44
 800f706:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f708:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f70a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f70c:	e841 2300 	strex	r3, r2, [r1]
 800f710:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f714:	2b00      	cmp	r3, #0
 800f716:	d1e6      	bne.n	800f6e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	2220      	movs	r2, #32
 800f71c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	2200      	movs	r2, #0
 800f724:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f728:	2303      	movs	r3, #3
 800f72a:	e063      	b.n	800f7f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	f003 0304 	and.w	r3, r3, #4
 800f736:	2b04      	cmp	r3, #4
 800f738:	d149      	bne.n	800f7ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f73a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f73e:	9300      	str	r3, [sp, #0]
 800f740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f742:	2200      	movs	r2, #0
 800f744:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f748:	6878      	ldr	r0, [r7, #4]
 800f74a:	f000 f857 	bl	800f7fc <UART_WaitOnFlagUntilTimeout>
 800f74e:	4603      	mov	r3, r0
 800f750:	2b00      	cmp	r3, #0
 800f752:	d03c      	beq.n	800f7ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f75c:	e853 3f00 	ldrex	r3, [r3]
 800f760:	623b      	str	r3, [r7, #32]
   return(result);
 800f762:	6a3b      	ldr	r3, [r7, #32]
 800f764:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f768:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	461a      	mov	r2, r3
 800f770:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f772:	633b      	str	r3, [r7, #48]	@ 0x30
 800f774:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f776:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f778:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f77a:	e841 2300 	strex	r3, r2, [r1]
 800f77e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f782:	2b00      	cmp	r3, #0
 800f784:	d1e6      	bne.n	800f754 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	3308      	adds	r3, #8
 800f78c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f78e:	693b      	ldr	r3, [r7, #16]
 800f790:	e853 3f00 	ldrex	r3, [r3]
 800f794:	60fb      	str	r3, [r7, #12]
   return(result);
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	f023 0301 	bic.w	r3, r3, #1
 800f79c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	3308      	adds	r3, #8
 800f7a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f7a6:	61fa      	str	r2, [r7, #28]
 800f7a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7aa:	69b9      	ldr	r1, [r7, #24]
 800f7ac:	69fa      	ldr	r2, [r7, #28]
 800f7ae:	e841 2300 	strex	r3, r2, [r1]
 800f7b2:	617b      	str	r3, [r7, #20]
   return(result);
 800f7b4:	697b      	ldr	r3, [r7, #20]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d1e5      	bne.n	800f786 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	2220      	movs	r2, #32
 800f7be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f7ca:	2303      	movs	r3, #3
 800f7cc:	e012      	b.n	800f7f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	2220      	movs	r2, #32
 800f7d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	2220      	movs	r2, #32
 800f7da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f7f2:	2300      	movs	r3, #0
}
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	3758      	adds	r7, #88	@ 0x58
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	bd80      	pop	{r7, pc}

0800f7fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b084      	sub	sp, #16
 800f800:	af00      	add	r7, sp, #0
 800f802:	60f8      	str	r0, [r7, #12]
 800f804:	60b9      	str	r1, [r7, #8]
 800f806:	603b      	str	r3, [r7, #0]
 800f808:	4613      	mov	r3, r2
 800f80a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f80c:	e04f      	b.n	800f8ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f80e:	69bb      	ldr	r3, [r7, #24]
 800f810:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f814:	d04b      	beq.n	800f8ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f816:	f7f7 fe95 	bl	8007544 <HAL_GetTick>
 800f81a:	4602      	mov	r2, r0
 800f81c:	683b      	ldr	r3, [r7, #0]
 800f81e:	1ad3      	subs	r3, r2, r3
 800f820:	69ba      	ldr	r2, [r7, #24]
 800f822:	429a      	cmp	r2, r3
 800f824:	d302      	bcc.n	800f82c <UART_WaitOnFlagUntilTimeout+0x30>
 800f826:	69bb      	ldr	r3, [r7, #24]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d101      	bne.n	800f830 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f82c:	2303      	movs	r3, #3
 800f82e:	e04e      	b.n	800f8ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	f003 0304 	and.w	r3, r3, #4
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d037      	beq.n	800f8ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800f83e:	68bb      	ldr	r3, [r7, #8]
 800f840:	2b80      	cmp	r3, #128	@ 0x80
 800f842:	d034      	beq.n	800f8ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800f844:	68bb      	ldr	r3, [r7, #8]
 800f846:	2b40      	cmp	r3, #64	@ 0x40
 800f848:	d031      	beq.n	800f8ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	69db      	ldr	r3, [r3, #28]
 800f850:	f003 0308 	and.w	r3, r3, #8
 800f854:	2b08      	cmp	r3, #8
 800f856:	d110      	bne.n	800f87a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	2208      	movs	r2, #8
 800f85e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f860:	68f8      	ldr	r0, [r7, #12]
 800f862:	f000 f838 	bl	800f8d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	2208      	movs	r2, #8
 800f86a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	2200      	movs	r2, #0
 800f872:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800f876:	2301      	movs	r3, #1
 800f878:	e029      	b.n	800f8ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	69db      	ldr	r3, [r3, #28]
 800f880:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f884:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f888:	d111      	bne.n	800f8ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f892:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f894:	68f8      	ldr	r0, [r7, #12]
 800f896:	f000 f81e 	bl	800f8d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	2220      	movs	r2, #32
 800f89e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f8aa:	2303      	movs	r3, #3
 800f8ac:	e00f      	b.n	800f8ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	69da      	ldr	r2, [r3, #28]
 800f8b4:	68bb      	ldr	r3, [r7, #8]
 800f8b6:	4013      	ands	r3, r2
 800f8b8:	68ba      	ldr	r2, [r7, #8]
 800f8ba:	429a      	cmp	r2, r3
 800f8bc:	bf0c      	ite	eq
 800f8be:	2301      	moveq	r3, #1
 800f8c0:	2300      	movne	r3, #0
 800f8c2:	b2db      	uxtb	r3, r3
 800f8c4:	461a      	mov	r2, r3
 800f8c6:	79fb      	ldrb	r3, [r7, #7]
 800f8c8:	429a      	cmp	r2, r3
 800f8ca:	d0a0      	beq.n	800f80e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f8cc:	2300      	movs	r3, #0
}
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	3710      	adds	r7, #16
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}

0800f8d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f8d6:	b480      	push	{r7}
 800f8d8:	b095      	sub	sp, #84	@ 0x54
 800f8da:	af00      	add	r7, sp, #0
 800f8dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8e6:	e853 3f00 	ldrex	r3, [r3]
 800f8ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f8ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f8f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	461a      	mov	r2, r3
 800f8fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f8fc:	643b      	str	r3, [r7, #64]	@ 0x40
 800f8fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f900:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f902:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f904:	e841 2300 	strex	r3, r2, [r1]
 800f908:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f90a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d1e6      	bne.n	800f8de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	3308      	adds	r3, #8
 800f916:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f918:	6a3b      	ldr	r3, [r7, #32]
 800f91a:	e853 3f00 	ldrex	r3, [r3]
 800f91e:	61fb      	str	r3, [r7, #28]
   return(result);
 800f920:	69fb      	ldr	r3, [r7, #28]
 800f922:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f926:	f023 0301 	bic.w	r3, r3, #1
 800f92a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	3308      	adds	r3, #8
 800f932:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f934:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f936:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f938:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f93a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f93c:	e841 2300 	strex	r3, r2, [r1]
 800f940:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f944:	2b00      	cmp	r3, #0
 800f946:	d1e3      	bne.n	800f910 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f94c:	2b01      	cmp	r3, #1
 800f94e:	d118      	bne.n	800f982 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	e853 3f00 	ldrex	r3, [r3]
 800f95c:	60bb      	str	r3, [r7, #8]
   return(result);
 800f95e:	68bb      	ldr	r3, [r7, #8]
 800f960:	f023 0310 	bic.w	r3, r3, #16
 800f964:	647b      	str	r3, [r7, #68]	@ 0x44
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	461a      	mov	r2, r3
 800f96c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f96e:	61bb      	str	r3, [r7, #24]
 800f970:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f972:	6979      	ldr	r1, [r7, #20]
 800f974:	69ba      	ldr	r2, [r7, #24]
 800f976:	e841 2300 	strex	r3, r2, [r1]
 800f97a:	613b      	str	r3, [r7, #16]
   return(result);
 800f97c:	693b      	ldr	r3, [r7, #16]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d1e6      	bne.n	800f950 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	2220      	movs	r2, #32
 800f986:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	2200      	movs	r2, #0
 800f98e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2200      	movs	r2, #0
 800f994:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f996:	bf00      	nop
 800f998:	3754      	adds	r7, #84	@ 0x54
 800f99a:	46bd      	mov	sp, r7
 800f99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a0:	4770      	bx	lr

0800f9a2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f9a2:	b480      	push	{r7}
 800f9a4:	b083      	sub	sp, #12
 800f9a6:	af00      	add	r7, sp, #0
 800f9a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f9aa:	bf00      	nop
 800f9ac:	370c      	adds	r7, #12
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b4:	4770      	bx	lr

0800f9b6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f9b6:	b480      	push	{r7}
 800f9b8:	b083      	sub	sp, #12
 800f9ba:	af00      	add	r7, sp, #0
 800f9bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f9be:	bf00      	nop
 800f9c0:	370c      	adds	r7, #12
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c8:	4770      	bx	lr

0800f9ca <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f9ca:	b480      	push	{r7}
 800f9cc:	b083      	sub	sp, #12
 800f9ce:	af00      	add	r7, sp, #0
 800f9d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f9d2:	bf00      	nop
 800f9d4:	370c      	adds	r7, #12
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9dc:	4770      	bx	lr

0800f9de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f9de:	b480      	push	{r7}
 800f9e0:	b085      	sub	sp, #20
 800f9e2:	af00      	add	r7, sp, #0
 800f9e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f9ec:	2b01      	cmp	r3, #1
 800f9ee:	d101      	bne.n	800f9f4 <HAL_UARTEx_DisableFifoMode+0x16>
 800f9f0:	2302      	movs	r3, #2
 800f9f2:	e027      	b.n	800fa44 <HAL_UARTEx_DisableFifoMode+0x66>
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2201      	movs	r2, #1
 800f9f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	2224      	movs	r2, #36	@ 0x24
 800fa00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	681a      	ldr	r2, [r3, #0]
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	f022 0201 	bic.w	r2, r2, #1
 800fa1a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800fa22:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2200      	movs	r2, #0
 800fa28:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	68fa      	ldr	r2, [r7, #12]
 800fa30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	2220      	movs	r2, #32
 800fa36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fa42:	2300      	movs	r3, #0
}
 800fa44:	4618      	mov	r0, r3
 800fa46:	3714      	adds	r7, #20
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4e:	4770      	bx	lr

0800fa50 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b084      	sub	sp, #16
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
 800fa58:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fa60:	2b01      	cmp	r3, #1
 800fa62:	d101      	bne.n	800fa68 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fa64:	2302      	movs	r3, #2
 800fa66:	e02d      	b.n	800fac4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2201      	movs	r2, #1
 800fa6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	2224      	movs	r2, #36	@ 0x24
 800fa74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	681a      	ldr	r2, [r3, #0]
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	f022 0201 	bic.w	r2, r2, #1
 800fa8e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	689b      	ldr	r3, [r3, #8]
 800fa96:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	683a      	ldr	r2, [r7, #0]
 800faa0:	430a      	orrs	r2, r1
 800faa2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800faa4:	6878      	ldr	r0, [r7, #4]
 800faa6:	f000 f84f 	bl	800fb48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	68fa      	ldr	r2, [r7, #12]
 800fab0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	2220      	movs	r2, #32
 800fab6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	2200      	movs	r2, #0
 800fabe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fac2:	2300      	movs	r3, #0
}
 800fac4:	4618      	mov	r0, r3
 800fac6:	3710      	adds	r7, #16
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}

0800facc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800facc:	b580      	push	{r7, lr}
 800face:	b084      	sub	sp, #16
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
 800fad4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fadc:	2b01      	cmp	r3, #1
 800fade:	d101      	bne.n	800fae4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fae0:	2302      	movs	r3, #2
 800fae2:	e02d      	b.n	800fb40 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2201      	movs	r2, #1
 800fae8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	2224      	movs	r2, #36	@ 0x24
 800faf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	681a      	ldr	r2, [r3, #0]
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	f022 0201 	bic.w	r2, r2, #1
 800fb0a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	689b      	ldr	r3, [r3, #8]
 800fb12:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	683a      	ldr	r2, [r7, #0]
 800fb1c:	430a      	orrs	r2, r1
 800fb1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fb20:	6878      	ldr	r0, [r7, #4]
 800fb22:	f000 f811 	bl	800fb48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	68fa      	ldr	r2, [r7, #12]
 800fb2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	2220      	movs	r2, #32
 800fb32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	2200      	movs	r2, #0
 800fb3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fb3e:	2300      	movs	r3, #0
}
 800fb40:	4618      	mov	r0, r3
 800fb42:	3710      	adds	r7, #16
 800fb44:	46bd      	mov	sp, r7
 800fb46:	bd80      	pop	{r7, pc}

0800fb48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fb48:	b480      	push	{r7}
 800fb4a:	b085      	sub	sp, #20
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d108      	bne.n	800fb6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2201      	movs	r2, #1
 800fb5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	2201      	movs	r2, #1
 800fb64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fb68:	e031      	b.n	800fbce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fb6a:	2308      	movs	r3, #8
 800fb6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fb6e:	2308      	movs	r3, #8
 800fb70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	689b      	ldr	r3, [r3, #8]
 800fb78:	0e5b      	lsrs	r3, r3, #25
 800fb7a:	b2db      	uxtb	r3, r3
 800fb7c:	f003 0307 	and.w	r3, r3, #7
 800fb80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	689b      	ldr	r3, [r3, #8]
 800fb88:	0f5b      	lsrs	r3, r3, #29
 800fb8a:	b2db      	uxtb	r3, r3
 800fb8c:	f003 0307 	and.w	r3, r3, #7
 800fb90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fb92:	7bbb      	ldrb	r3, [r7, #14]
 800fb94:	7b3a      	ldrb	r2, [r7, #12]
 800fb96:	4911      	ldr	r1, [pc, #68]	@ (800fbdc <UARTEx_SetNbDataToProcess+0x94>)
 800fb98:	5c8a      	ldrb	r2, [r1, r2]
 800fb9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fb9e:	7b3a      	ldrb	r2, [r7, #12]
 800fba0:	490f      	ldr	r1, [pc, #60]	@ (800fbe0 <UARTEx_SetNbDataToProcess+0x98>)
 800fba2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fba4:	fb93 f3f2 	sdiv	r3, r3, r2
 800fba8:	b29a      	uxth	r2, r3
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fbb0:	7bfb      	ldrb	r3, [r7, #15]
 800fbb2:	7b7a      	ldrb	r2, [r7, #13]
 800fbb4:	4909      	ldr	r1, [pc, #36]	@ (800fbdc <UARTEx_SetNbDataToProcess+0x94>)
 800fbb6:	5c8a      	ldrb	r2, [r1, r2]
 800fbb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fbbc:	7b7a      	ldrb	r2, [r7, #13]
 800fbbe:	4908      	ldr	r1, [pc, #32]	@ (800fbe0 <UARTEx_SetNbDataToProcess+0x98>)
 800fbc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fbc2:	fb93 f3f2 	sdiv	r3, r3, r2
 800fbc6:	b29a      	uxth	r2, r3
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800fbce:	bf00      	nop
 800fbd0:	3714      	adds	r7, #20
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd8:	4770      	bx	lr
 800fbda:	bf00      	nop
 800fbdc:	0801cc84 	.word	0x0801cc84
 800fbe0:	0801cc8c 	.word	0x0801cc8c

0800fbe4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800fbe4:	b480      	push	{r7}
 800fbe6:	b085      	sub	sp, #20
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2200      	movs	r2, #0
 800fbf0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800fbf4:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800fbf8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	b29a      	uxth	r2, r3
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800fc04:	2300      	movs	r3, #0
}
 800fc06:	4618      	mov	r0, r3
 800fc08:	3714      	adds	r7, #20
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc10:	4770      	bx	lr

0800fc12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800fc12:	b480      	push	{r7}
 800fc14:	b085      	sub	sp, #20
 800fc16:	af00      	add	r7, sp, #0
 800fc18:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800fc1a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800fc1e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800fc26:	b29a      	uxth	r2, r3
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	b29b      	uxth	r3, r3
 800fc2c:	43db      	mvns	r3, r3
 800fc2e:	b29b      	uxth	r3, r3
 800fc30:	4013      	ands	r3, r2
 800fc32:	b29a      	uxth	r2, r3
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800fc3a:	2300      	movs	r3, #0
}
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	3714      	adds	r7, #20
 800fc40:	46bd      	mov	sp, r7
 800fc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc46:	4770      	bx	lr

0800fc48 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800fc48:	b480      	push	{r7}
 800fc4a:	b085      	sub	sp, #20
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	60f8      	str	r0, [r7, #12]
 800fc50:	1d3b      	adds	r3, r7, #4
 800fc52:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	2201      	movs	r2, #1
 800fc5a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	2200      	movs	r2, #0
 800fc62:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	2200      	movs	r2, #0
 800fc6a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	2200      	movs	r2, #0
 800fc72:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800fc76:	2300      	movs	r3, #0
}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	3714      	adds	r7, #20
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc82:	4770      	bx	lr

0800fc84 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800fc84:	b480      	push	{r7}
 800fc86:	b0a7      	sub	sp, #156	@ 0x9c
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
 800fc8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800fc8e:	2300      	movs	r3, #0
 800fc90:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800fc94:	687a      	ldr	r2, [r7, #4]
 800fc96:	683b      	ldr	r3, [r7, #0]
 800fc98:	781b      	ldrb	r3, [r3, #0]
 800fc9a:	009b      	lsls	r3, r3, #2
 800fc9c:	4413      	add	r3, r2
 800fc9e:	881b      	ldrh	r3, [r3, #0]
 800fca0:	b29b      	uxth	r3, r3
 800fca2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800fca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fcaa:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	78db      	ldrb	r3, [r3, #3]
 800fcb2:	2b03      	cmp	r3, #3
 800fcb4:	d81f      	bhi.n	800fcf6 <USB_ActivateEndpoint+0x72>
 800fcb6:	a201      	add	r2, pc, #4	@ (adr r2, 800fcbc <USB_ActivateEndpoint+0x38>)
 800fcb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcbc:	0800fccd 	.word	0x0800fccd
 800fcc0:	0800fce9 	.word	0x0800fce9
 800fcc4:	0800fcff 	.word	0x0800fcff
 800fcc8:	0800fcdb 	.word	0x0800fcdb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800fccc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800fcd0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800fcd4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800fcd8:	e012      	b.n	800fd00 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800fcda:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800fcde:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800fce2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800fce6:	e00b      	b.n	800fd00 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800fce8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800fcec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800fcf0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800fcf4:	e004      	b.n	800fd00 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800fcf6:	2301      	movs	r3, #1
 800fcf8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800fcfc:	e000      	b.n	800fd00 <USB_ActivateEndpoint+0x7c>
      break;
 800fcfe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800fd00:	687a      	ldr	r2, [r7, #4]
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	781b      	ldrb	r3, [r3, #0]
 800fd06:	009b      	lsls	r3, r3, #2
 800fd08:	441a      	add	r2, r3
 800fd0a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800fd0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fd12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fd16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fd1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fd1e:	b29b      	uxth	r3, r3
 800fd20:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800fd22:	687a      	ldr	r2, [r7, #4]
 800fd24:	683b      	ldr	r3, [r7, #0]
 800fd26:	781b      	ldrb	r3, [r3, #0]
 800fd28:	009b      	lsls	r3, r3, #2
 800fd2a:	4413      	add	r3, r2
 800fd2c:	881b      	ldrh	r3, [r3, #0]
 800fd2e:	b29b      	uxth	r3, r3
 800fd30:	b21b      	sxth	r3, r3
 800fd32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fd36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fd3a:	b21a      	sxth	r2, r3
 800fd3c:	683b      	ldr	r3, [r7, #0]
 800fd3e:	781b      	ldrb	r3, [r3, #0]
 800fd40:	b21b      	sxth	r3, r3
 800fd42:	4313      	orrs	r3, r2
 800fd44:	b21b      	sxth	r3, r3
 800fd46:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800fd4a:	687a      	ldr	r2, [r7, #4]
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	781b      	ldrb	r3, [r3, #0]
 800fd50:	009b      	lsls	r3, r3, #2
 800fd52:	441a      	add	r2, r3
 800fd54:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800fd58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fd5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fd60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fd64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fd68:	b29b      	uxth	r3, r3
 800fd6a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	7b1b      	ldrb	r3, [r3, #12]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	f040 8180 	bne.w	8010076 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	785b      	ldrb	r3, [r3, #1]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	f000 8084 	beq.w	800fe88 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	61bb      	str	r3, [r7, #24]
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fd8a:	b29b      	uxth	r3, r3
 800fd8c:	461a      	mov	r2, r3
 800fd8e:	69bb      	ldr	r3, [r7, #24]
 800fd90:	4413      	add	r3, r2
 800fd92:	61bb      	str	r3, [r7, #24]
 800fd94:	683b      	ldr	r3, [r7, #0]
 800fd96:	781b      	ldrb	r3, [r3, #0]
 800fd98:	00da      	lsls	r2, r3, #3
 800fd9a:	69bb      	ldr	r3, [r7, #24]
 800fd9c:	4413      	add	r3, r2
 800fd9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800fda2:	617b      	str	r3, [r7, #20]
 800fda4:	683b      	ldr	r3, [r7, #0]
 800fda6:	88db      	ldrh	r3, [r3, #6]
 800fda8:	085b      	lsrs	r3, r3, #1
 800fdaa:	b29b      	uxth	r3, r3
 800fdac:	005b      	lsls	r3, r3, #1
 800fdae:	b29a      	uxth	r2, r3
 800fdb0:	697b      	ldr	r3, [r7, #20]
 800fdb2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fdb4:	687a      	ldr	r2, [r7, #4]
 800fdb6:	683b      	ldr	r3, [r7, #0]
 800fdb8:	781b      	ldrb	r3, [r3, #0]
 800fdba:	009b      	lsls	r3, r3, #2
 800fdbc:	4413      	add	r3, r2
 800fdbe:	881b      	ldrh	r3, [r3, #0]
 800fdc0:	827b      	strh	r3, [r7, #18]
 800fdc2:	8a7b      	ldrh	r3, [r7, #18]
 800fdc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d01b      	beq.n	800fe04 <USB_ActivateEndpoint+0x180>
 800fdcc:	687a      	ldr	r2, [r7, #4]
 800fdce:	683b      	ldr	r3, [r7, #0]
 800fdd0:	781b      	ldrb	r3, [r3, #0]
 800fdd2:	009b      	lsls	r3, r3, #2
 800fdd4:	4413      	add	r3, r2
 800fdd6:	881b      	ldrh	r3, [r3, #0]
 800fdd8:	b29b      	uxth	r3, r3
 800fdda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fdde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fde2:	823b      	strh	r3, [r7, #16]
 800fde4:	687a      	ldr	r2, [r7, #4]
 800fde6:	683b      	ldr	r3, [r7, #0]
 800fde8:	781b      	ldrb	r3, [r3, #0]
 800fdea:	009b      	lsls	r3, r3, #2
 800fdec:	441a      	add	r2, r3
 800fdee:	8a3b      	ldrh	r3, [r7, #16]
 800fdf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fdf4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fdf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fdfc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800fe00:	b29b      	uxth	r3, r3
 800fe02:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800fe04:	683b      	ldr	r3, [r7, #0]
 800fe06:	78db      	ldrb	r3, [r3, #3]
 800fe08:	2b01      	cmp	r3, #1
 800fe0a:	d020      	beq.n	800fe4e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800fe0c:	687a      	ldr	r2, [r7, #4]
 800fe0e:	683b      	ldr	r3, [r7, #0]
 800fe10:	781b      	ldrb	r3, [r3, #0]
 800fe12:	009b      	lsls	r3, r3, #2
 800fe14:	4413      	add	r3, r2
 800fe16:	881b      	ldrh	r3, [r3, #0]
 800fe18:	b29b      	uxth	r3, r3
 800fe1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fe1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fe22:	81bb      	strh	r3, [r7, #12]
 800fe24:	89bb      	ldrh	r3, [r7, #12]
 800fe26:	f083 0320 	eor.w	r3, r3, #32
 800fe2a:	81bb      	strh	r3, [r7, #12]
 800fe2c:	687a      	ldr	r2, [r7, #4]
 800fe2e:	683b      	ldr	r3, [r7, #0]
 800fe30:	781b      	ldrb	r3, [r3, #0]
 800fe32:	009b      	lsls	r3, r3, #2
 800fe34:	441a      	add	r2, r3
 800fe36:	89bb      	ldrh	r3, [r7, #12]
 800fe38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fe3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fe40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fe44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe48:	b29b      	uxth	r3, r3
 800fe4a:	8013      	strh	r3, [r2, #0]
 800fe4c:	e3f9      	b.n	8010642 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800fe4e:	687a      	ldr	r2, [r7, #4]
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	781b      	ldrb	r3, [r3, #0]
 800fe54:	009b      	lsls	r3, r3, #2
 800fe56:	4413      	add	r3, r2
 800fe58:	881b      	ldrh	r3, [r3, #0]
 800fe5a:	b29b      	uxth	r3, r3
 800fe5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fe60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fe64:	81fb      	strh	r3, [r7, #14]
 800fe66:	687a      	ldr	r2, [r7, #4]
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	781b      	ldrb	r3, [r3, #0]
 800fe6c:	009b      	lsls	r3, r3, #2
 800fe6e:	441a      	add	r2, r3
 800fe70:	89fb      	ldrh	r3, [r7, #14]
 800fe72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fe76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fe7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fe7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe82:	b29b      	uxth	r3, r3
 800fe84:	8013      	strh	r3, [r2, #0]
 800fe86:	e3dc      	b.n	8010642 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	633b      	str	r3, [r7, #48]	@ 0x30
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fe92:	b29b      	uxth	r3, r3
 800fe94:	461a      	mov	r2, r3
 800fe96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe98:	4413      	add	r3, r2
 800fe9a:	633b      	str	r3, [r7, #48]	@ 0x30
 800fe9c:	683b      	ldr	r3, [r7, #0]
 800fe9e:	781b      	ldrb	r3, [r3, #0]
 800fea0:	00da      	lsls	r2, r3, #3
 800fea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fea4:	4413      	add	r3, r2
 800fea6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800feaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	88db      	ldrh	r3, [r3, #6]
 800feb0:	085b      	lsrs	r3, r3, #1
 800feb2:	b29b      	uxth	r3, r3
 800feb4:	005b      	lsls	r3, r3, #1
 800feb6:	b29a      	uxth	r2, r3
 800feb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800feba:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fec6:	b29b      	uxth	r3, r3
 800fec8:	461a      	mov	r2, r3
 800feca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fecc:	4413      	add	r3, r2
 800fece:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fed0:	683b      	ldr	r3, [r7, #0]
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	00da      	lsls	r2, r3, #3
 800fed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fed8:	4413      	add	r3, r2
 800feda:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800fede:	627b      	str	r3, [r7, #36]	@ 0x24
 800fee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fee2:	881b      	ldrh	r3, [r3, #0]
 800fee4:	b29b      	uxth	r3, r3
 800fee6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800feea:	b29a      	uxth	r2, r3
 800feec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800feee:	801a      	strh	r2, [r3, #0]
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	691b      	ldr	r3, [r3, #16]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d10a      	bne.n	800ff0e <USB_ActivateEndpoint+0x28a>
 800fef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fefa:	881b      	ldrh	r3, [r3, #0]
 800fefc:	b29b      	uxth	r3, r3
 800fefe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ff02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ff06:	b29a      	uxth	r2, r3
 800ff08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff0a:	801a      	strh	r2, [r3, #0]
 800ff0c:	e041      	b.n	800ff92 <USB_ActivateEndpoint+0x30e>
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	691b      	ldr	r3, [r3, #16]
 800ff12:	2b3e      	cmp	r3, #62	@ 0x3e
 800ff14:	d81c      	bhi.n	800ff50 <USB_ActivateEndpoint+0x2cc>
 800ff16:	683b      	ldr	r3, [r7, #0]
 800ff18:	691b      	ldr	r3, [r3, #16]
 800ff1a:	085b      	lsrs	r3, r3, #1
 800ff1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	691b      	ldr	r3, [r3, #16]
 800ff24:	f003 0301 	and.w	r3, r3, #1
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d004      	beq.n	800ff36 <USB_ActivateEndpoint+0x2b2>
 800ff2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ff30:	3301      	adds	r3, #1
 800ff32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ff36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff38:	881b      	ldrh	r3, [r3, #0]
 800ff3a:	b29a      	uxth	r2, r3
 800ff3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ff40:	b29b      	uxth	r3, r3
 800ff42:	029b      	lsls	r3, r3, #10
 800ff44:	b29b      	uxth	r3, r3
 800ff46:	4313      	orrs	r3, r2
 800ff48:	b29a      	uxth	r2, r3
 800ff4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff4c:	801a      	strh	r2, [r3, #0]
 800ff4e:	e020      	b.n	800ff92 <USB_ActivateEndpoint+0x30e>
 800ff50:	683b      	ldr	r3, [r7, #0]
 800ff52:	691b      	ldr	r3, [r3, #16]
 800ff54:	095b      	lsrs	r3, r3, #5
 800ff56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	691b      	ldr	r3, [r3, #16]
 800ff5e:	f003 031f 	and.w	r3, r3, #31
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d104      	bne.n	800ff70 <USB_ActivateEndpoint+0x2ec>
 800ff66:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ff6a:	3b01      	subs	r3, #1
 800ff6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ff70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff72:	881b      	ldrh	r3, [r3, #0]
 800ff74:	b29a      	uxth	r2, r3
 800ff76:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ff7a:	b29b      	uxth	r3, r3
 800ff7c:	029b      	lsls	r3, r3, #10
 800ff7e:	b29b      	uxth	r3, r3
 800ff80:	4313      	orrs	r3, r2
 800ff82:	b29b      	uxth	r3, r3
 800ff84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ff88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ff8c:	b29a      	uxth	r2, r3
 800ff8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff90:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ff92:	687a      	ldr	r2, [r7, #4]
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	781b      	ldrb	r3, [r3, #0]
 800ff98:	009b      	lsls	r3, r3, #2
 800ff9a:	4413      	add	r3, r2
 800ff9c:	881b      	ldrh	r3, [r3, #0]
 800ff9e:	847b      	strh	r3, [r7, #34]	@ 0x22
 800ffa0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ffa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d01b      	beq.n	800ffe2 <USB_ActivateEndpoint+0x35e>
 800ffaa:	687a      	ldr	r2, [r7, #4]
 800ffac:	683b      	ldr	r3, [r7, #0]
 800ffae:	781b      	ldrb	r3, [r3, #0]
 800ffb0:	009b      	lsls	r3, r3, #2
 800ffb2:	4413      	add	r3, r2
 800ffb4:	881b      	ldrh	r3, [r3, #0]
 800ffb6:	b29b      	uxth	r3, r3
 800ffb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ffbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ffc0:	843b      	strh	r3, [r7, #32]
 800ffc2:	687a      	ldr	r2, [r7, #4]
 800ffc4:	683b      	ldr	r3, [r7, #0]
 800ffc6:	781b      	ldrb	r3, [r3, #0]
 800ffc8:	009b      	lsls	r3, r3, #2
 800ffca:	441a      	add	r2, r3
 800ffcc:	8c3b      	ldrh	r3, [r7, #32]
 800ffce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ffd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ffd6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ffda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ffde:	b29b      	uxth	r3, r3
 800ffe0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800ffe2:	683b      	ldr	r3, [r7, #0]
 800ffe4:	781b      	ldrb	r3, [r3, #0]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d124      	bne.n	8010034 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ffea:	687a      	ldr	r2, [r7, #4]
 800ffec:	683b      	ldr	r3, [r7, #0]
 800ffee:	781b      	ldrb	r3, [r3, #0]
 800fff0:	009b      	lsls	r3, r3, #2
 800fff2:	4413      	add	r3, r2
 800fff4:	881b      	ldrh	r3, [r3, #0]
 800fff6:	b29b      	uxth	r3, r3
 800fff8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fffc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010000:	83bb      	strh	r3, [r7, #28]
 8010002:	8bbb      	ldrh	r3, [r7, #28]
 8010004:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8010008:	83bb      	strh	r3, [r7, #28]
 801000a:	8bbb      	ldrh	r3, [r7, #28]
 801000c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8010010:	83bb      	strh	r3, [r7, #28]
 8010012:	687a      	ldr	r2, [r7, #4]
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	781b      	ldrb	r3, [r3, #0]
 8010018:	009b      	lsls	r3, r3, #2
 801001a:	441a      	add	r2, r3
 801001c:	8bbb      	ldrh	r3, [r7, #28]
 801001e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010022:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010026:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801002a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801002e:	b29b      	uxth	r3, r3
 8010030:	8013      	strh	r3, [r2, #0]
 8010032:	e306      	b.n	8010642 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8010034:	687a      	ldr	r2, [r7, #4]
 8010036:	683b      	ldr	r3, [r7, #0]
 8010038:	781b      	ldrb	r3, [r3, #0]
 801003a:	009b      	lsls	r3, r3, #2
 801003c:	4413      	add	r3, r2
 801003e:	881b      	ldrh	r3, [r3, #0]
 8010040:	b29b      	uxth	r3, r3
 8010042:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010046:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801004a:	83fb      	strh	r3, [r7, #30]
 801004c:	8bfb      	ldrh	r3, [r7, #30]
 801004e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8010052:	83fb      	strh	r3, [r7, #30]
 8010054:	687a      	ldr	r2, [r7, #4]
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	781b      	ldrb	r3, [r3, #0]
 801005a:	009b      	lsls	r3, r3, #2
 801005c:	441a      	add	r2, r3
 801005e:	8bfb      	ldrh	r3, [r7, #30]
 8010060:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010064:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010068:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801006c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010070:	b29b      	uxth	r3, r3
 8010072:	8013      	strh	r3, [r2, #0]
 8010074:	e2e5      	b.n	8010642 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8010076:	683b      	ldr	r3, [r7, #0]
 8010078:	78db      	ldrb	r3, [r3, #3]
 801007a:	2b02      	cmp	r3, #2
 801007c:	d11e      	bne.n	80100bc <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801007e:	687a      	ldr	r2, [r7, #4]
 8010080:	683b      	ldr	r3, [r7, #0]
 8010082:	781b      	ldrb	r3, [r3, #0]
 8010084:	009b      	lsls	r3, r3, #2
 8010086:	4413      	add	r3, r2
 8010088:	881b      	ldrh	r3, [r3, #0]
 801008a:	b29b      	uxth	r3, r3
 801008c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010090:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010094:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8010098:	687a      	ldr	r2, [r7, #4]
 801009a:	683b      	ldr	r3, [r7, #0]
 801009c:	781b      	ldrb	r3, [r3, #0]
 801009e:	009b      	lsls	r3, r3, #2
 80100a0:	441a      	add	r2, r3
 80100a2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80100a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80100aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80100ae:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80100b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80100b6:	b29b      	uxth	r3, r3
 80100b8:	8013      	strh	r3, [r2, #0]
 80100ba:	e01d      	b.n	80100f8 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80100bc:	687a      	ldr	r2, [r7, #4]
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	781b      	ldrb	r3, [r3, #0]
 80100c2:	009b      	lsls	r3, r3, #2
 80100c4:	4413      	add	r3, r2
 80100c6:	881b      	ldrh	r3, [r3, #0]
 80100c8:	b29b      	uxth	r3, r3
 80100ca:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80100ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80100d2:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 80100d6:	687a      	ldr	r2, [r7, #4]
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	781b      	ldrb	r3, [r3, #0]
 80100dc:	009b      	lsls	r3, r3, #2
 80100de:	441a      	add	r2, r3
 80100e0:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80100e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80100e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80100ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80100f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80100f4:	b29b      	uxth	r3, r3
 80100f6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010102:	b29b      	uxth	r3, r3
 8010104:	461a      	mov	r2, r3
 8010106:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010108:	4413      	add	r3, r2
 801010a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801010c:	683b      	ldr	r3, [r7, #0]
 801010e:	781b      	ldrb	r3, [r3, #0]
 8010110:	00da      	lsls	r2, r3, #3
 8010112:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010114:	4413      	add	r3, r2
 8010116:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801011a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801011c:	683b      	ldr	r3, [r7, #0]
 801011e:	891b      	ldrh	r3, [r3, #8]
 8010120:	085b      	lsrs	r3, r3, #1
 8010122:	b29b      	uxth	r3, r3
 8010124:	005b      	lsls	r3, r3, #1
 8010126:	b29a      	uxth	r2, r3
 8010128:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801012a:	801a      	strh	r2, [r3, #0]
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	677b      	str	r3, [r7, #116]	@ 0x74
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010136:	b29b      	uxth	r3, r3
 8010138:	461a      	mov	r2, r3
 801013a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801013c:	4413      	add	r3, r2
 801013e:	677b      	str	r3, [r7, #116]	@ 0x74
 8010140:	683b      	ldr	r3, [r7, #0]
 8010142:	781b      	ldrb	r3, [r3, #0]
 8010144:	00da      	lsls	r2, r3, #3
 8010146:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010148:	4413      	add	r3, r2
 801014a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 801014e:	673b      	str	r3, [r7, #112]	@ 0x70
 8010150:	683b      	ldr	r3, [r7, #0]
 8010152:	895b      	ldrh	r3, [r3, #10]
 8010154:	085b      	lsrs	r3, r3, #1
 8010156:	b29b      	uxth	r3, r3
 8010158:	005b      	lsls	r3, r3, #1
 801015a:	b29a      	uxth	r2, r3
 801015c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801015e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	785b      	ldrb	r3, [r3, #1]
 8010164:	2b00      	cmp	r3, #0
 8010166:	f040 81af 	bne.w	80104c8 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801016a:	687a      	ldr	r2, [r7, #4]
 801016c:	683b      	ldr	r3, [r7, #0]
 801016e:	781b      	ldrb	r3, [r3, #0]
 8010170:	009b      	lsls	r3, r3, #2
 8010172:	4413      	add	r3, r2
 8010174:	881b      	ldrh	r3, [r3, #0]
 8010176:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 801017a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 801017e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010182:	2b00      	cmp	r3, #0
 8010184:	d01d      	beq.n	80101c2 <USB_ActivateEndpoint+0x53e>
 8010186:	687a      	ldr	r2, [r7, #4]
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	781b      	ldrb	r3, [r3, #0]
 801018c:	009b      	lsls	r3, r3, #2
 801018e:	4413      	add	r3, r2
 8010190:	881b      	ldrh	r3, [r3, #0]
 8010192:	b29b      	uxth	r3, r3
 8010194:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010198:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801019c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80101a0:	687a      	ldr	r2, [r7, #4]
 80101a2:	683b      	ldr	r3, [r7, #0]
 80101a4:	781b      	ldrb	r3, [r3, #0]
 80101a6:	009b      	lsls	r3, r3, #2
 80101a8:	441a      	add	r2, r3
 80101aa:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80101ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80101b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80101b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80101ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80101be:	b29b      	uxth	r3, r3
 80101c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80101c2:	687a      	ldr	r2, [r7, #4]
 80101c4:	683b      	ldr	r3, [r7, #0]
 80101c6:	781b      	ldrb	r3, [r3, #0]
 80101c8:	009b      	lsls	r3, r3, #2
 80101ca:	4413      	add	r3, r2
 80101cc:	881b      	ldrh	r3, [r3, #0]
 80101ce:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80101d2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80101d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d01d      	beq.n	801021a <USB_ActivateEndpoint+0x596>
 80101de:	687a      	ldr	r2, [r7, #4]
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	781b      	ldrb	r3, [r3, #0]
 80101e4:	009b      	lsls	r3, r3, #2
 80101e6:	4413      	add	r3, r2
 80101e8:	881b      	ldrh	r3, [r3, #0]
 80101ea:	b29b      	uxth	r3, r3
 80101ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80101f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80101f4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80101f8:	687a      	ldr	r2, [r7, #4]
 80101fa:	683b      	ldr	r3, [r7, #0]
 80101fc:	781b      	ldrb	r3, [r3, #0]
 80101fe:	009b      	lsls	r3, r3, #2
 8010200:	441a      	add	r2, r3
 8010202:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8010206:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801020a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801020e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010212:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8010216:	b29b      	uxth	r3, r3
 8010218:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801021a:	683b      	ldr	r3, [r7, #0]
 801021c:	785b      	ldrb	r3, [r3, #1]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d16b      	bne.n	80102fa <USB_ActivateEndpoint+0x676>
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801022c:	b29b      	uxth	r3, r3
 801022e:	461a      	mov	r2, r3
 8010230:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010232:	4413      	add	r3, r2
 8010234:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010236:	683b      	ldr	r3, [r7, #0]
 8010238:	781b      	ldrb	r3, [r3, #0]
 801023a:	00da      	lsls	r2, r3, #3
 801023c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801023e:	4413      	add	r3, r2
 8010240:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010244:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010246:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010248:	881b      	ldrh	r3, [r3, #0]
 801024a:	b29b      	uxth	r3, r3
 801024c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010250:	b29a      	uxth	r2, r3
 8010252:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010254:	801a      	strh	r2, [r3, #0]
 8010256:	683b      	ldr	r3, [r7, #0]
 8010258:	691b      	ldr	r3, [r3, #16]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d10a      	bne.n	8010274 <USB_ActivateEndpoint+0x5f0>
 801025e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010260:	881b      	ldrh	r3, [r3, #0]
 8010262:	b29b      	uxth	r3, r3
 8010264:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010268:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801026c:	b29a      	uxth	r2, r3
 801026e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010270:	801a      	strh	r2, [r3, #0]
 8010272:	e05d      	b.n	8010330 <USB_ActivateEndpoint+0x6ac>
 8010274:	683b      	ldr	r3, [r7, #0]
 8010276:	691b      	ldr	r3, [r3, #16]
 8010278:	2b3e      	cmp	r3, #62	@ 0x3e
 801027a:	d81c      	bhi.n	80102b6 <USB_ActivateEndpoint+0x632>
 801027c:	683b      	ldr	r3, [r7, #0]
 801027e:	691b      	ldr	r3, [r3, #16]
 8010280:	085b      	lsrs	r3, r3, #1
 8010282:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8010286:	683b      	ldr	r3, [r7, #0]
 8010288:	691b      	ldr	r3, [r3, #16]
 801028a:	f003 0301 	and.w	r3, r3, #1
 801028e:	2b00      	cmp	r3, #0
 8010290:	d004      	beq.n	801029c <USB_ActivateEndpoint+0x618>
 8010292:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010296:	3301      	adds	r3, #1
 8010298:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801029c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801029e:	881b      	ldrh	r3, [r3, #0]
 80102a0:	b29a      	uxth	r2, r3
 80102a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80102a6:	b29b      	uxth	r3, r3
 80102a8:	029b      	lsls	r3, r3, #10
 80102aa:	b29b      	uxth	r3, r3
 80102ac:	4313      	orrs	r3, r2
 80102ae:	b29a      	uxth	r2, r3
 80102b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80102b2:	801a      	strh	r2, [r3, #0]
 80102b4:	e03c      	b.n	8010330 <USB_ActivateEndpoint+0x6ac>
 80102b6:	683b      	ldr	r3, [r7, #0]
 80102b8:	691b      	ldr	r3, [r3, #16]
 80102ba:	095b      	lsrs	r3, r3, #5
 80102bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80102c0:	683b      	ldr	r3, [r7, #0]
 80102c2:	691b      	ldr	r3, [r3, #16]
 80102c4:	f003 031f 	and.w	r3, r3, #31
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d104      	bne.n	80102d6 <USB_ActivateEndpoint+0x652>
 80102cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80102d0:	3b01      	subs	r3, #1
 80102d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80102d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80102d8:	881b      	ldrh	r3, [r3, #0]
 80102da:	b29a      	uxth	r2, r3
 80102dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80102e0:	b29b      	uxth	r3, r3
 80102e2:	029b      	lsls	r3, r3, #10
 80102e4:	b29b      	uxth	r3, r3
 80102e6:	4313      	orrs	r3, r2
 80102e8:	b29b      	uxth	r3, r3
 80102ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80102ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80102f2:	b29a      	uxth	r2, r3
 80102f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80102f6:	801a      	strh	r2, [r3, #0]
 80102f8:	e01a      	b.n	8010330 <USB_ActivateEndpoint+0x6ac>
 80102fa:	683b      	ldr	r3, [r7, #0]
 80102fc:	785b      	ldrb	r3, [r3, #1]
 80102fe:	2b01      	cmp	r3, #1
 8010300:	d116      	bne.n	8010330 <USB_ActivateEndpoint+0x6ac>
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	657b      	str	r3, [r7, #84]	@ 0x54
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801030c:	b29b      	uxth	r3, r3
 801030e:	461a      	mov	r2, r3
 8010310:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010312:	4413      	add	r3, r2
 8010314:	657b      	str	r3, [r7, #84]	@ 0x54
 8010316:	683b      	ldr	r3, [r7, #0]
 8010318:	781b      	ldrb	r3, [r3, #0]
 801031a:	00da      	lsls	r2, r3, #3
 801031c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801031e:	4413      	add	r3, r2
 8010320:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010324:	653b      	str	r3, [r7, #80]	@ 0x50
 8010326:	683b      	ldr	r3, [r7, #0]
 8010328:	691b      	ldr	r3, [r3, #16]
 801032a:	b29a      	uxth	r2, r3
 801032c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801032e:	801a      	strh	r2, [r3, #0]
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	647b      	str	r3, [r7, #68]	@ 0x44
 8010334:	683b      	ldr	r3, [r7, #0]
 8010336:	785b      	ldrb	r3, [r3, #1]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d16b      	bne.n	8010414 <USB_ActivateEndpoint+0x790>
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010346:	b29b      	uxth	r3, r3
 8010348:	461a      	mov	r2, r3
 801034a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801034c:	4413      	add	r3, r2
 801034e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010350:	683b      	ldr	r3, [r7, #0]
 8010352:	781b      	ldrb	r3, [r3, #0]
 8010354:	00da      	lsls	r2, r3, #3
 8010356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010358:	4413      	add	r3, r2
 801035a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801035e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010362:	881b      	ldrh	r3, [r3, #0]
 8010364:	b29b      	uxth	r3, r3
 8010366:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801036a:	b29a      	uxth	r2, r3
 801036c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801036e:	801a      	strh	r2, [r3, #0]
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	691b      	ldr	r3, [r3, #16]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d10a      	bne.n	801038e <USB_ActivateEndpoint+0x70a>
 8010378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801037a:	881b      	ldrh	r3, [r3, #0]
 801037c:	b29b      	uxth	r3, r3
 801037e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010382:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010386:	b29a      	uxth	r2, r3
 8010388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801038a:	801a      	strh	r2, [r3, #0]
 801038c:	e05b      	b.n	8010446 <USB_ActivateEndpoint+0x7c2>
 801038e:	683b      	ldr	r3, [r7, #0]
 8010390:	691b      	ldr	r3, [r3, #16]
 8010392:	2b3e      	cmp	r3, #62	@ 0x3e
 8010394:	d81c      	bhi.n	80103d0 <USB_ActivateEndpoint+0x74c>
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	691b      	ldr	r3, [r3, #16]
 801039a:	085b      	lsrs	r3, r3, #1
 801039c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80103a0:	683b      	ldr	r3, [r7, #0]
 80103a2:	691b      	ldr	r3, [r3, #16]
 80103a4:	f003 0301 	and.w	r3, r3, #1
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d004      	beq.n	80103b6 <USB_ActivateEndpoint+0x732>
 80103ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80103b0:	3301      	adds	r3, #1
 80103b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80103b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103b8:	881b      	ldrh	r3, [r3, #0]
 80103ba:	b29a      	uxth	r2, r3
 80103bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80103c0:	b29b      	uxth	r3, r3
 80103c2:	029b      	lsls	r3, r3, #10
 80103c4:	b29b      	uxth	r3, r3
 80103c6:	4313      	orrs	r3, r2
 80103c8:	b29a      	uxth	r2, r3
 80103ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103cc:	801a      	strh	r2, [r3, #0]
 80103ce:	e03a      	b.n	8010446 <USB_ActivateEndpoint+0x7c2>
 80103d0:	683b      	ldr	r3, [r7, #0]
 80103d2:	691b      	ldr	r3, [r3, #16]
 80103d4:	095b      	lsrs	r3, r3, #5
 80103d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	691b      	ldr	r3, [r3, #16]
 80103de:	f003 031f 	and.w	r3, r3, #31
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d104      	bne.n	80103f0 <USB_ActivateEndpoint+0x76c>
 80103e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80103ea:	3b01      	subs	r3, #1
 80103ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80103f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103f2:	881b      	ldrh	r3, [r3, #0]
 80103f4:	b29a      	uxth	r2, r3
 80103f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80103fa:	b29b      	uxth	r3, r3
 80103fc:	029b      	lsls	r3, r3, #10
 80103fe:	b29b      	uxth	r3, r3
 8010400:	4313      	orrs	r3, r2
 8010402:	b29b      	uxth	r3, r3
 8010404:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010408:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801040c:	b29a      	uxth	r2, r3
 801040e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010410:	801a      	strh	r2, [r3, #0]
 8010412:	e018      	b.n	8010446 <USB_ActivateEndpoint+0x7c2>
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	785b      	ldrb	r3, [r3, #1]
 8010418:	2b01      	cmp	r3, #1
 801041a:	d114      	bne.n	8010446 <USB_ActivateEndpoint+0x7c2>
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010422:	b29b      	uxth	r3, r3
 8010424:	461a      	mov	r2, r3
 8010426:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010428:	4413      	add	r3, r2
 801042a:	647b      	str	r3, [r7, #68]	@ 0x44
 801042c:	683b      	ldr	r3, [r7, #0]
 801042e:	781b      	ldrb	r3, [r3, #0]
 8010430:	00da      	lsls	r2, r3, #3
 8010432:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010434:	4413      	add	r3, r2
 8010436:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801043a:	643b      	str	r3, [r7, #64]	@ 0x40
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	691b      	ldr	r3, [r3, #16]
 8010440:	b29a      	uxth	r2, r3
 8010442:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010444:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010446:	687a      	ldr	r2, [r7, #4]
 8010448:	683b      	ldr	r3, [r7, #0]
 801044a:	781b      	ldrb	r3, [r3, #0]
 801044c:	009b      	lsls	r3, r3, #2
 801044e:	4413      	add	r3, r2
 8010450:	881b      	ldrh	r3, [r3, #0]
 8010452:	b29b      	uxth	r3, r3
 8010454:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010458:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801045c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801045e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010460:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8010464:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8010466:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010468:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 801046c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801046e:	687a      	ldr	r2, [r7, #4]
 8010470:	683b      	ldr	r3, [r7, #0]
 8010472:	781b      	ldrb	r3, [r3, #0]
 8010474:	009b      	lsls	r3, r3, #2
 8010476:	441a      	add	r2, r3
 8010478:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801047a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801047e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010482:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010486:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801048a:	b29b      	uxth	r3, r3
 801048c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801048e:	687a      	ldr	r2, [r7, #4]
 8010490:	683b      	ldr	r3, [r7, #0]
 8010492:	781b      	ldrb	r3, [r3, #0]
 8010494:	009b      	lsls	r3, r3, #2
 8010496:	4413      	add	r3, r2
 8010498:	881b      	ldrh	r3, [r3, #0]
 801049a:	b29b      	uxth	r3, r3
 801049c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80104a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80104a4:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80104a6:	687a      	ldr	r2, [r7, #4]
 80104a8:	683b      	ldr	r3, [r7, #0]
 80104aa:	781b      	ldrb	r3, [r3, #0]
 80104ac:	009b      	lsls	r3, r3, #2
 80104ae:	441a      	add	r2, r3
 80104b0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80104b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80104b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80104ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80104be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80104c2:	b29b      	uxth	r3, r3
 80104c4:	8013      	strh	r3, [r2, #0]
 80104c6:	e0bc      	b.n	8010642 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80104c8:	687a      	ldr	r2, [r7, #4]
 80104ca:	683b      	ldr	r3, [r7, #0]
 80104cc:	781b      	ldrb	r3, [r3, #0]
 80104ce:	009b      	lsls	r3, r3, #2
 80104d0:	4413      	add	r3, r2
 80104d2:	881b      	ldrh	r3, [r3, #0]
 80104d4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80104d8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80104dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d01d      	beq.n	8010520 <USB_ActivateEndpoint+0x89c>
 80104e4:	687a      	ldr	r2, [r7, #4]
 80104e6:	683b      	ldr	r3, [r7, #0]
 80104e8:	781b      	ldrb	r3, [r3, #0]
 80104ea:	009b      	lsls	r3, r3, #2
 80104ec:	4413      	add	r3, r2
 80104ee:	881b      	ldrh	r3, [r3, #0]
 80104f0:	b29b      	uxth	r3, r3
 80104f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80104f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80104fa:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 80104fe:	687a      	ldr	r2, [r7, #4]
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	781b      	ldrb	r3, [r3, #0]
 8010504:	009b      	lsls	r3, r3, #2
 8010506:	441a      	add	r2, r3
 8010508:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 801050c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010510:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010514:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010518:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801051c:	b29b      	uxth	r3, r3
 801051e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010520:	687a      	ldr	r2, [r7, #4]
 8010522:	683b      	ldr	r3, [r7, #0]
 8010524:	781b      	ldrb	r3, [r3, #0]
 8010526:	009b      	lsls	r3, r3, #2
 8010528:	4413      	add	r3, r2
 801052a:	881b      	ldrh	r3, [r3, #0]
 801052c:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8010530:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8010534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010538:	2b00      	cmp	r3, #0
 801053a:	d01d      	beq.n	8010578 <USB_ActivateEndpoint+0x8f4>
 801053c:	687a      	ldr	r2, [r7, #4]
 801053e:	683b      	ldr	r3, [r7, #0]
 8010540:	781b      	ldrb	r3, [r3, #0]
 8010542:	009b      	lsls	r3, r3, #2
 8010544:	4413      	add	r3, r2
 8010546:	881b      	ldrh	r3, [r3, #0]
 8010548:	b29b      	uxth	r3, r3
 801054a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801054e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010552:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8010556:	687a      	ldr	r2, [r7, #4]
 8010558:	683b      	ldr	r3, [r7, #0]
 801055a:	781b      	ldrb	r3, [r3, #0]
 801055c:	009b      	lsls	r3, r3, #2
 801055e:	441a      	add	r2, r3
 8010560:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8010564:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010568:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801056c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010570:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8010574:	b29b      	uxth	r3, r3
 8010576:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010578:	683b      	ldr	r3, [r7, #0]
 801057a:	78db      	ldrb	r3, [r3, #3]
 801057c:	2b01      	cmp	r3, #1
 801057e:	d024      	beq.n	80105ca <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010580:	687a      	ldr	r2, [r7, #4]
 8010582:	683b      	ldr	r3, [r7, #0]
 8010584:	781b      	ldrb	r3, [r3, #0]
 8010586:	009b      	lsls	r3, r3, #2
 8010588:	4413      	add	r3, r2
 801058a:	881b      	ldrh	r3, [r3, #0]
 801058c:	b29b      	uxth	r3, r3
 801058e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010592:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010596:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 801059a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 801059e:	f083 0320 	eor.w	r3, r3, #32
 80105a2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80105a6:	687a      	ldr	r2, [r7, #4]
 80105a8:	683b      	ldr	r3, [r7, #0]
 80105aa:	781b      	ldrb	r3, [r3, #0]
 80105ac:	009b      	lsls	r3, r3, #2
 80105ae:	441a      	add	r2, r3
 80105b0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80105b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80105b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80105bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80105c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80105c4:	b29b      	uxth	r3, r3
 80105c6:	8013      	strh	r3, [r2, #0]
 80105c8:	e01d      	b.n	8010606 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80105ca:	687a      	ldr	r2, [r7, #4]
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	781b      	ldrb	r3, [r3, #0]
 80105d0:	009b      	lsls	r3, r3, #2
 80105d2:	4413      	add	r3, r2
 80105d4:	881b      	ldrh	r3, [r3, #0]
 80105d6:	b29b      	uxth	r3, r3
 80105d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80105dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80105e0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80105e4:	687a      	ldr	r2, [r7, #4]
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	781b      	ldrb	r3, [r3, #0]
 80105ea:	009b      	lsls	r3, r3, #2
 80105ec:	441a      	add	r2, r3
 80105ee:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80105f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80105f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80105fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80105fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010602:	b29b      	uxth	r3, r3
 8010604:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010606:	687a      	ldr	r2, [r7, #4]
 8010608:	683b      	ldr	r3, [r7, #0]
 801060a:	781b      	ldrb	r3, [r3, #0]
 801060c:	009b      	lsls	r3, r3, #2
 801060e:	4413      	add	r3, r2
 8010610:	881b      	ldrh	r3, [r3, #0]
 8010612:	b29b      	uxth	r3, r3
 8010614:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010618:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801061c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8010620:	687a      	ldr	r2, [r7, #4]
 8010622:	683b      	ldr	r3, [r7, #0]
 8010624:	781b      	ldrb	r3, [r3, #0]
 8010626:	009b      	lsls	r3, r3, #2
 8010628:	441a      	add	r2, r3
 801062a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 801062e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010632:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010636:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801063a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801063e:	b29b      	uxth	r3, r3
 8010640:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8010642:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8010646:	4618      	mov	r0, r3
 8010648:	379c      	adds	r7, #156	@ 0x9c
 801064a:	46bd      	mov	sp, r7
 801064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010650:	4770      	bx	lr
 8010652:	bf00      	nop

08010654 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010654:	b480      	push	{r7}
 8010656:	b08d      	sub	sp, #52	@ 0x34
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
 801065c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801065e:	683b      	ldr	r3, [r7, #0]
 8010660:	7b1b      	ldrb	r3, [r3, #12]
 8010662:	2b00      	cmp	r3, #0
 8010664:	f040 808e 	bne.w	8010784 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8010668:	683b      	ldr	r3, [r7, #0]
 801066a:	785b      	ldrb	r3, [r3, #1]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d044      	beq.n	80106fa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010670:	687a      	ldr	r2, [r7, #4]
 8010672:	683b      	ldr	r3, [r7, #0]
 8010674:	781b      	ldrb	r3, [r3, #0]
 8010676:	009b      	lsls	r3, r3, #2
 8010678:	4413      	add	r3, r2
 801067a:	881b      	ldrh	r3, [r3, #0]
 801067c:	81bb      	strh	r3, [r7, #12]
 801067e:	89bb      	ldrh	r3, [r7, #12]
 8010680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010684:	2b00      	cmp	r3, #0
 8010686:	d01b      	beq.n	80106c0 <USB_DeactivateEndpoint+0x6c>
 8010688:	687a      	ldr	r2, [r7, #4]
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	781b      	ldrb	r3, [r3, #0]
 801068e:	009b      	lsls	r3, r3, #2
 8010690:	4413      	add	r3, r2
 8010692:	881b      	ldrh	r3, [r3, #0]
 8010694:	b29b      	uxth	r3, r3
 8010696:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801069a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801069e:	817b      	strh	r3, [r7, #10]
 80106a0:	687a      	ldr	r2, [r7, #4]
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	781b      	ldrb	r3, [r3, #0]
 80106a6:	009b      	lsls	r3, r3, #2
 80106a8:	441a      	add	r2, r3
 80106aa:	897b      	ldrh	r3, [r7, #10]
 80106ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80106b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80106b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80106b8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80106bc:	b29b      	uxth	r3, r3
 80106be:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80106c0:	687a      	ldr	r2, [r7, #4]
 80106c2:	683b      	ldr	r3, [r7, #0]
 80106c4:	781b      	ldrb	r3, [r3, #0]
 80106c6:	009b      	lsls	r3, r3, #2
 80106c8:	4413      	add	r3, r2
 80106ca:	881b      	ldrh	r3, [r3, #0]
 80106cc:	b29b      	uxth	r3, r3
 80106ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80106d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80106d6:	813b      	strh	r3, [r7, #8]
 80106d8:	687a      	ldr	r2, [r7, #4]
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	781b      	ldrb	r3, [r3, #0]
 80106de:	009b      	lsls	r3, r3, #2
 80106e0:	441a      	add	r2, r3
 80106e2:	893b      	ldrh	r3, [r7, #8]
 80106e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80106e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80106ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80106f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80106f4:	b29b      	uxth	r3, r3
 80106f6:	8013      	strh	r3, [r2, #0]
 80106f8:	e192      	b.n	8010a20 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80106fa:	687a      	ldr	r2, [r7, #4]
 80106fc:	683b      	ldr	r3, [r7, #0]
 80106fe:	781b      	ldrb	r3, [r3, #0]
 8010700:	009b      	lsls	r3, r3, #2
 8010702:	4413      	add	r3, r2
 8010704:	881b      	ldrh	r3, [r3, #0]
 8010706:	827b      	strh	r3, [r7, #18]
 8010708:	8a7b      	ldrh	r3, [r7, #18]
 801070a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801070e:	2b00      	cmp	r3, #0
 8010710:	d01b      	beq.n	801074a <USB_DeactivateEndpoint+0xf6>
 8010712:	687a      	ldr	r2, [r7, #4]
 8010714:	683b      	ldr	r3, [r7, #0]
 8010716:	781b      	ldrb	r3, [r3, #0]
 8010718:	009b      	lsls	r3, r3, #2
 801071a:	4413      	add	r3, r2
 801071c:	881b      	ldrh	r3, [r3, #0]
 801071e:	b29b      	uxth	r3, r3
 8010720:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010724:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010728:	823b      	strh	r3, [r7, #16]
 801072a:	687a      	ldr	r2, [r7, #4]
 801072c:	683b      	ldr	r3, [r7, #0]
 801072e:	781b      	ldrb	r3, [r3, #0]
 8010730:	009b      	lsls	r3, r3, #2
 8010732:	441a      	add	r2, r3
 8010734:	8a3b      	ldrh	r3, [r7, #16]
 8010736:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801073a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801073e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010746:	b29b      	uxth	r3, r3
 8010748:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801074a:	687a      	ldr	r2, [r7, #4]
 801074c:	683b      	ldr	r3, [r7, #0]
 801074e:	781b      	ldrb	r3, [r3, #0]
 8010750:	009b      	lsls	r3, r3, #2
 8010752:	4413      	add	r3, r2
 8010754:	881b      	ldrh	r3, [r3, #0]
 8010756:	b29b      	uxth	r3, r3
 8010758:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801075c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010760:	81fb      	strh	r3, [r7, #14]
 8010762:	687a      	ldr	r2, [r7, #4]
 8010764:	683b      	ldr	r3, [r7, #0]
 8010766:	781b      	ldrb	r3, [r3, #0]
 8010768:	009b      	lsls	r3, r3, #2
 801076a:	441a      	add	r2, r3
 801076c:	89fb      	ldrh	r3, [r7, #14]
 801076e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010772:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010776:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801077a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801077e:	b29b      	uxth	r3, r3
 8010780:	8013      	strh	r3, [r2, #0]
 8010782:	e14d      	b.n	8010a20 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8010784:	683b      	ldr	r3, [r7, #0]
 8010786:	785b      	ldrb	r3, [r3, #1]
 8010788:	2b00      	cmp	r3, #0
 801078a:	f040 80a5 	bne.w	80108d8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801078e:	687a      	ldr	r2, [r7, #4]
 8010790:	683b      	ldr	r3, [r7, #0]
 8010792:	781b      	ldrb	r3, [r3, #0]
 8010794:	009b      	lsls	r3, r3, #2
 8010796:	4413      	add	r3, r2
 8010798:	881b      	ldrh	r3, [r3, #0]
 801079a:	843b      	strh	r3, [r7, #32]
 801079c:	8c3b      	ldrh	r3, [r7, #32]
 801079e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d01b      	beq.n	80107de <USB_DeactivateEndpoint+0x18a>
 80107a6:	687a      	ldr	r2, [r7, #4]
 80107a8:	683b      	ldr	r3, [r7, #0]
 80107aa:	781b      	ldrb	r3, [r3, #0]
 80107ac:	009b      	lsls	r3, r3, #2
 80107ae:	4413      	add	r3, r2
 80107b0:	881b      	ldrh	r3, [r3, #0]
 80107b2:	b29b      	uxth	r3, r3
 80107b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80107b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80107bc:	83fb      	strh	r3, [r7, #30]
 80107be:	687a      	ldr	r2, [r7, #4]
 80107c0:	683b      	ldr	r3, [r7, #0]
 80107c2:	781b      	ldrb	r3, [r3, #0]
 80107c4:	009b      	lsls	r3, r3, #2
 80107c6:	441a      	add	r2, r3
 80107c8:	8bfb      	ldrh	r3, [r7, #30]
 80107ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80107ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80107d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80107d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80107da:	b29b      	uxth	r3, r3
 80107dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80107de:	687a      	ldr	r2, [r7, #4]
 80107e0:	683b      	ldr	r3, [r7, #0]
 80107e2:	781b      	ldrb	r3, [r3, #0]
 80107e4:	009b      	lsls	r3, r3, #2
 80107e6:	4413      	add	r3, r2
 80107e8:	881b      	ldrh	r3, [r3, #0]
 80107ea:	83bb      	strh	r3, [r7, #28]
 80107ec:	8bbb      	ldrh	r3, [r7, #28]
 80107ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d01b      	beq.n	801082e <USB_DeactivateEndpoint+0x1da>
 80107f6:	687a      	ldr	r2, [r7, #4]
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	781b      	ldrb	r3, [r3, #0]
 80107fc:	009b      	lsls	r3, r3, #2
 80107fe:	4413      	add	r3, r2
 8010800:	881b      	ldrh	r3, [r3, #0]
 8010802:	b29b      	uxth	r3, r3
 8010804:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010808:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801080c:	837b      	strh	r3, [r7, #26]
 801080e:	687a      	ldr	r2, [r7, #4]
 8010810:	683b      	ldr	r3, [r7, #0]
 8010812:	781b      	ldrb	r3, [r3, #0]
 8010814:	009b      	lsls	r3, r3, #2
 8010816:	441a      	add	r2, r3
 8010818:	8b7b      	ldrh	r3, [r7, #26]
 801081a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801081e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010822:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010826:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 801082a:	b29b      	uxth	r3, r3
 801082c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801082e:	687a      	ldr	r2, [r7, #4]
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	781b      	ldrb	r3, [r3, #0]
 8010834:	009b      	lsls	r3, r3, #2
 8010836:	4413      	add	r3, r2
 8010838:	881b      	ldrh	r3, [r3, #0]
 801083a:	b29b      	uxth	r3, r3
 801083c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010840:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010844:	833b      	strh	r3, [r7, #24]
 8010846:	687a      	ldr	r2, [r7, #4]
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	781b      	ldrb	r3, [r3, #0]
 801084c:	009b      	lsls	r3, r3, #2
 801084e:	441a      	add	r2, r3
 8010850:	8b3b      	ldrh	r3, [r7, #24]
 8010852:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010856:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801085a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801085e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8010862:	b29b      	uxth	r3, r3
 8010864:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010866:	687a      	ldr	r2, [r7, #4]
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	781b      	ldrb	r3, [r3, #0]
 801086c:	009b      	lsls	r3, r3, #2
 801086e:	4413      	add	r3, r2
 8010870:	881b      	ldrh	r3, [r3, #0]
 8010872:	b29b      	uxth	r3, r3
 8010874:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010878:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801087c:	82fb      	strh	r3, [r7, #22]
 801087e:	687a      	ldr	r2, [r7, #4]
 8010880:	683b      	ldr	r3, [r7, #0]
 8010882:	781b      	ldrb	r3, [r3, #0]
 8010884:	009b      	lsls	r3, r3, #2
 8010886:	441a      	add	r2, r3
 8010888:	8afb      	ldrh	r3, [r7, #22]
 801088a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801088e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010892:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010896:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801089a:	b29b      	uxth	r3, r3
 801089c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801089e:	687a      	ldr	r2, [r7, #4]
 80108a0:	683b      	ldr	r3, [r7, #0]
 80108a2:	781b      	ldrb	r3, [r3, #0]
 80108a4:	009b      	lsls	r3, r3, #2
 80108a6:	4413      	add	r3, r2
 80108a8:	881b      	ldrh	r3, [r3, #0]
 80108aa:	b29b      	uxth	r3, r3
 80108ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80108b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80108b4:	82bb      	strh	r3, [r7, #20]
 80108b6:	687a      	ldr	r2, [r7, #4]
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	781b      	ldrb	r3, [r3, #0]
 80108bc:	009b      	lsls	r3, r3, #2
 80108be:	441a      	add	r2, r3
 80108c0:	8abb      	ldrh	r3, [r7, #20]
 80108c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80108c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80108ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80108ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80108d2:	b29b      	uxth	r3, r3
 80108d4:	8013      	strh	r3, [r2, #0]
 80108d6:	e0a3      	b.n	8010a20 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80108d8:	687a      	ldr	r2, [r7, #4]
 80108da:	683b      	ldr	r3, [r7, #0]
 80108dc:	781b      	ldrb	r3, [r3, #0]
 80108de:	009b      	lsls	r3, r3, #2
 80108e0:	4413      	add	r3, r2
 80108e2:	881b      	ldrh	r3, [r3, #0]
 80108e4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80108e6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80108e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d01b      	beq.n	8010928 <USB_DeactivateEndpoint+0x2d4>
 80108f0:	687a      	ldr	r2, [r7, #4]
 80108f2:	683b      	ldr	r3, [r7, #0]
 80108f4:	781b      	ldrb	r3, [r3, #0]
 80108f6:	009b      	lsls	r3, r3, #2
 80108f8:	4413      	add	r3, r2
 80108fa:	881b      	ldrh	r3, [r3, #0]
 80108fc:	b29b      	uxth	r3, r3
 80108fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010906:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8010908:	687a      	ldr	r2, [r7, #4]
 801090a:	683b      	ldr	r3, [r7, #0]
 801090c:	781b      	ldrb	r3, [r3, #0]
 801090e:	009b      	lsls	r3, r3, #2
 8010910:	441a      	add	r2, r3
 8010912:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010914:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010918:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801091c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010920:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010924:	b29b      	uxth	r3, r3
 8010926:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010928:	687a      	ldr	r2, [r7, #4]
 801092a:	683b      	ldr	r3, [r7, #0]
 801092c:	781b      	ldrb	r3, [r3, #0]
 801092e:	009b      	lsls	r3, r3, #2
 8010930:	4413      	add	r3, r2
 8010932:	881b      	ldrh	r3, [r3, #0]
 8010934:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8010936:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801093c:	2b00      	cmp	r3, #0
 801093e:	d01b      	beq.n	8010978 <USB_DeactivateEndpoint+0x324>
 8010940:	687a      	ldr	r2, [r7, #4]
 8010942:	683b      	ldr	r3, [r7, #0]
 8010944:	781b      	ldrb	r3, [r3, #0]
 8010946:	009b      	lsls	r3, r3, #2
 8010948:	4413      	add	r3, r2
 801094a:	881b      	ldrh	r3, [r3, #0]
 801094c:	b29b      	uxth	r3, r3
 801094e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010956:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010958:	687a      	ldr	r2, [r7, #4]
 801095a:	683b      	ldr	r3, [r7, #0]
 801095c:	781b      	ldrb	r3, [r3, #0]
 801095e:	009b      	lsls	r3, r3, #2
 8010960:	441a      	add	r2, r3
 8010962:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010964:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010968:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801096c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010970:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8010974:	b29b      	uxth	r3, r3
 8010976:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8010978:	687a      	ldr	r2, [r7, #4]
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	781b      	ldrb	r3, [r3, #0]
 801097e:	009b      	lsls	r3, r3, #2
 8010980:	4413      	add	r3, r2
 8010982:	881b      	ldrh	r3, [r3, #0]
 8010984:	b29b      	uxth	r3, r3
 8010986:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801098a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801098e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010990:	687a      	ldr	r2, [r7, #4]
 8010992:	683b      	ldr	r3, [r7, #0]
 8010994:	781b      	ldrb	r3, [r3, #0]
 8010996:	009b      	lsls	r3, r3, #2
 8010998:	441a      	add	r2, r3
 801099a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801099c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80109a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80109a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80109a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80109ac:	b29b      	uxth	r3, r3
 80109ae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80109b0:	687a      	ldr	r2, [r7, #4]
 80109b2:	683b      	ldr	r3, [r7, #0]
 80109b4:	781b      	ldrb	r3, [r3, #0]
 80109b6:	009b      	lsls	r3, r3, #2
 80109b8:	4413      	add	r3, r2
 80109ba:	881b      	ldrh	r3, [r3, #0]
 80109bc:	b29b      	uxth	r3, r3
 80109be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80109c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80109c6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80109c8:	687a      	ldr	r2, [r7, #4]
 80109ca:	683b      	ldr	r3, [r7, #0]
 80109cc:	781b      	ldrb	r3, [r3, #0]
 80109ce:	009b      	lsls	r3, r3, #2
 80109d0:	441a      	add	r2, r3
 80109d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80109d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80109d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80109dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80109e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80109e4:	b29b      	uxth	r3, r3
 80109e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80109e8:	687a      	ldr	r2, [r7, #4]
 80109ea:	683b      	ldr	r3, [r7, #0]
 80109ec:	781b      	ldrb	r3, [r3, #0]
 80109ee:	009b      	lsls	r3, r3, #2
 80109f0:	4413      	add	r3, r2
 80109f2:	881b      	ldrh	r3, [r3, #0]
 80109f4:	b29b      	uxth	r3, r3
 80109f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80109fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80109fe:	847b      	strh	r3, [r7, #34]	@ 0x22
 8010a00:	687a      	ldr	r2, [r7, #4]
 8010a02:	683b      	ldr	r3, [r7, #0]
 8010a04:	781b      	ldrb	r3, [r3, #0]
 8010a06:	009b      	lsls	r3, r3, #2
 8010a08:	441a      	add	r2, r3
 8010a0a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010a0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010a10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010a14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010a18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a1c:	b29b      	uxth	r3, r3
 8010a1e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8010a20:	2300      	movs	r3, #0
}
 8010a22:	4618      	mov	r0, r3
 8010a24:	3734      	adds	r7, #52	@ 0x34
 8010a26:	46bd      	mov	sp, r7
 8010a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2c:	4770      	bx	lr

08010a2e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010a2e:	b580      	push	{r7, lr}
 8010a30:	b0ac      	sub	sp, #176	@ 0xb0
 8010a32:	af00      	add	r7, sp, #0
 8010a34:	6078      	str	r0, [r7, #4]
 8010a36:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010a38:	683b      	ldr	r3, [r7, #0]
 8010a3a:	785b      	ldrb	r3, [r3, #1]
 8010a3c:	2b01      	cmp	r3, #1
 8010a3e:	f040 84ca 	bne.w	80113d6 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8010a42:	683b      	ldr	r3, [r7, #0]
 8010a44:	699a      	ldr	r2, [r3, #24]
 8010a46:	683b      	ldr	r3, [r7, #0]
 8010a48:	691b      	ldr	r3, [r3, #16]
 8010a4a:	429a      	cmp	r2, r3
 8010a4c:	d904      	bls.n	8010a58 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8010a4e:	683b      	ldr	r3, [r7, #0]
 8010a50:	691b      	ldr	r3, [r3, #16]
 8010a52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010a56:	e003      	b.n	8010a60 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8010a58:	683b      	ldr	r3, [r7, #0]
 8010a5a:	699b      	ldr	r3, [r3, #24]
 8010a5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8010a60:	683b      	ldr	r3, [r7, #0]
 8010a62:	7b1b      	ldrb	r3, [r3, #12]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d122      	bne.n	8010aae <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	6959      	ldr	r1, [r3, #20]
 8010a6c:	683b      	ldr	r3, [r7, #0]
 8010a6e:	88da      	ldrh	r2, [r3, #6]
 8010a70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010a74:	b29b      	uxth	r3, r3
 8010a76:	6878      	ldr	r0, [r7, #4]
 8010a78:	f000 febd 	bl	80117f6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	613b      	str	r3, [r7, #16]
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010a86:	b29b      	uxth	r3, r3
 8010a88:	461a      	mov	r2, r3
 8010a8a:	693b      	ldr	r3, [r7, #16]
 8010a8c:	4413      	add	r3, r2
 8010a8e:	613b      	str	r3, [r7, #16]
 8010a90:	683b      	ldr	r3, [r7, #0]
 8010a92:	781b      	ldrb	r3, [r3, #0]
 8010a94:	00da      	lsls	r2, r3, #3
 8010a96:	693b      	ldr	r3, [r7, #16]
 8010a98:	4413      	add	r3, r2
 8010a9a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010a9e:	60fb      	str	r3, [r7, #12]
 8010aa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010aa4:	b29a      	uxth	r2, r3
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	801a      	strh	r2, [r3, #0]
 8010aaa:	f000 bc6f 	b.w	801138c <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8010aae:	683b      	ldr	r3, [r7, #0]
 8010ab0:	78db      	ldrb	r3, [r3, #3]
 8010ab2:	2b02      	cmp	r3, #2
 8010ab4:	f040 831e 	bne.w	80110f4 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8010ab8:	683b      	ldr	r3, [r7, #0]
 8010aba:	6a1a      	ldr	r2, [r3, #32]
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	691b      	ldr	r3, [r3, #16]
 8010ac0:	429a      	cmp	r2, r3
 8010ac2:	f240 82cf 	bls.w	8011064 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8010ac6:	687a      	ldr	r2, [r7, #4]
 8010ac8:	683b      	ldr	r3, [r7, #0]
 8010aca:	781b      	ldrb	r3, [r3, #0]
 8010acc:	009b      	lsls	r3, r3, #2
 8010ace:	4413      	add	r3, r2
 8010ad0:	881b      	ldrh	r3, [r3, #0]
 8010ad2:	b29b      	uxth	r3, r3
 8010ad4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010ad8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010adc:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8010ae0:	687a      	ldr	r2, [r7, #4]
 8010ae2:	683b      	ldr	r3, [r7, #0]
 8010ae4:	781b      	ldrb	r3, [r3, #0]
 8010ae6:	009b      	lsls	r3, r3, #2
 8010ae8:	441a      	add	r2, r3
 8010aea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8010aee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010af2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010af6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8010afa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010afe:	b29b      	uxth	r3, r3
 8010b00:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	6a1a      	ldr	r2, [r3, #32]
 8010b06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010b0a:	1ad2      	subs	r2, r2, r3
 8010b0c:	683b      	ldr	r3, [r7, #0]
 8010b0e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8010b10:	687a      	ldr	r2, [r7, #4]
 8010b12:	683b      	ldr	r3, [r7, #0]
 8010b14:	781b      	ldrb	r3, [r3, #0]
 8010b16:	009b      	lsls	r3, r3, #2
 8010b18:	4413      	add	r3, r2
 8010b1a:	881b      	ldrh	r3, [r3, #0]
 8010b1c:	b29b      	uxth	r3, r3
 8010b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	f000 814f 	beq.w	8010dc6 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8010b2c:	683b      	ldr	r3, [r7, #0]
 8010b2e:	785b      	ldrb	r3, [r3, #1]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d16b      	bne.n	8010c0c <USB_EPStartXfer+0x1de>
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010b3e:	b29b      	uxth	r3, r3
 8010b40:	461a      	mov	r2, r3
 8010b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b44:	4413      	add	r3, r2
 8010b46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010b48:	683b      	ldr	r3, [r7, #0]
 8010b4a:	781b      	ldrb	r3, [r3, #0]
 8010b4c:	00da      	lsls	r2, r3, #3
 8010b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b50:	4413      	add	r3, r2
 8010b52:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010b56:	627b      	str	r3, [r7, #36]	@ 0x24
 8010b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b5a:	881b      	ldrh	r3, [r3, #0]
 8010b5c:	b29b      	uxth	r3, r3
 8010b5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010b62:	b29a      	uxth	r2, r3
 8010b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b66:	801a      	strh	r2, [r3, #0]
 8010b68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d10a      	bne.n	8010b86 <USB_EPStartXfer+0x158>
 8010b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b72:	881b      	ldrh	r3, [r3, #0]
 8010b74:	b29b      	uxth	r3, r3
 8010b76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010b7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010b7e:	b29a      	uxth	r2, r3
 8010b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b82:	801a      	strh	r2, [r3, #0]
 8010b84:	e05b      	b.n	8010c3e <USB_EPStartXfer+0x210>
 8010b86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010b8a:	2b3e      	cmp	r3, #62	@ 0x3e
 8010b8c:	d81c      	bhi.n	8010bc8 <USB_EPStartXfer+0x19a>
 8010b8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010b92:	085b      	lsrs	r3, r3, #1
 8010b94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010b98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010b9c:	f003 0301 	and.w	r3, r3, #1
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d004      	beq.n	8010bae <USB_EPStartXfer+0x180>
 8010ba4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010ba8:	3301      	adds	r3, #1
 8010baa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bb0:	881b      	ldrh	r3, [r3, #0]
 8010bb2:	b29a      	uxth	r2, r3
 8010bb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010bb8:	b29b      	uxth	r3, r3
 8010bba:	029b      	lsls	r3, r3, #10
 8010bbc:	b29b      	uxth	r3, r3
 8010bbe:	4313      	orrs	r3, r2
 8010bc0:	b29a      	uxth	r2, r3
 8010bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bc4:	801a      	strh	r2, [r3, #0]
 8010bc6:	e03a      	b.n	8010c3e <USB_EPStartXfer+0x210>
 8010bc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010bcc:	095b      	lsrs	r3, r3, #5
 8010bce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010bd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010bd6:	f003 031f 	and.w	r3, r3, #31
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d104      	bne.n	8010be8 <USB_EPStartXfer+0x1ba>
 8010bde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010be2:	3b01      	subs	r3, #1
 8010be4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bea:	881b      	ldrh	r3, [r3, #0]
 8010bec:	b29a      	uxth	r2, r3
 8010bee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010bf2:	b29b      	uxth	r3, r3
 8010bf4:	029b      	lsls	r3, r3, #10
 8010bf6:	b29b      	uxth	r3, r3
 8010bf8:	4313      	orrs	r3, r2
 8010bfa:	b29b      	uxth	r3, r3
 8010bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010c04:	b29a      	uxth	r2, r3
 8010c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c08:	801a      	strh	r2, [r3, #0]
 8010c0a:	e018      	b.n	8010c3e <USB_EPStartXfer+0x210>
 8010c0c:	683b      	ldr	r3, [r7, #0]
 8010c0e:	785b      	ldrb	r3, [r3, #1]
 8010c10:	2b01      	cmp	r3, #1
 8010c12:	d114      	bne.n	8010c3e <USB_EPStartXfer+0x210>
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010c1a:	b29b      	uxth	r3, r3
 8010c1c:	461a      	mov	r2, r3
 8010c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c20:	4413      	add	r3, r2
 8010c22:	633b      	str	r3, [r7, #48]	@ 0x30
 8010c24:	683b      	ldr	r3, [r7, #0]
 8010c26:	781b      	ldrb	r3, [r3, #0]
 8010c28:	00da      	lsls	r2, r3, #3
 8010c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c2c:	4413      	add	r3, r2
 8010c2e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010c34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010c38:	b29a      	uxth	r2, r3
 8010c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c3c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8010c3e:	683b      	ldr	r3, [r7, #0]
 8010c40:	895b      	ldrh	r3, [r3, #10]
 8010c42:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010c46:	683b      	ldr	r3, [r7, #0]
 8010c48:	6959      	ldr	r1, [r3, #20]
 8010c4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010c4e:	b29b      	uxth	r3, r3
 8010c50:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8010c54:	6878      	ldr	r0, [r7, #4]
 8010c56:	f000 fdce 	bl	80117f6 <USB_WritePMA>
            ep->xfer_buff += len;
 8010c5a:	683b      	ldr	r3, [r7, #0]
 8010c5c:	695a      	ldr	r2, [r3, #20]
 8010c5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010c62:	441a      	add	r2, r3
 8010c64:	683b      	ldr	r3, [r7, #0]
 8010c66:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8010c68:	683b      	ldr	r3, [r7, #0]
 8010c6a:	6a1a      	ldr	r2, [r3, #32]
 8010c6c:	683b      	ldr	r3, [r7, #0]
 8010c6e:	691b      	ldr	r3, [r3, #16]
 8010c70:	429a      	cmp	r2, r3
 8010c72:	d907      	bls.n	8010c84 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8010c74:	683b      	ldr	r3, [r7, #0]
 8010c76:	6a1a      	ldr	r2, [r3, #32]
 8010c78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010c7c:	1ad2      	subs	r2, r2, r3
 8010c7e:	683b      	ldr	r3, [r7, #0]
 8010c80:	621a      	str	r2, [r3, #32]
 8010c82:	e006      	b.n	8010c92 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8010c84:	683b      	ldr	r3, [r7, #0]
 8010c86:	6a1b      	ldr	r3, [r3, #32]
 8010c88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8010c8c:	683b      	ldr	r3, [r7, #0]
 8010c8e:	2200      	movs	r2, #0
 8010c90:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010c92:	683b      	ldr	r3, [r7, #0]
 8010c94:	785b      	ldrb	r3, [r3, #1]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d16b      	bne.n	8010d72 <USB_EPStartXfer+0x344>
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	61bb      	str	r3, [r7, #24]
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010ca4:	b29b      	uxth	r3, r3
 8010ca6:	461a      	mov	r2, r3
 8010ca8:	69bb      	ldr	r3, [r7, #24]
 8010caa:	4413      	add	r3, r2
 8010cac:	61bb      	str	r3, [r7, #24]
 8010cae:	683b      	ldr	r3, [r7, #0]
 8010cb0:	781b      	ldrb	r3, [r3, #0]
 8010cb2:	00da      	lsls	r2, r3, #3
 8010cb4:	69bb      	ldr	r3, [r7, #24]
 8010cb6:	4413      	add	r3, r2
 8010cb8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010cbc:	617b      	str	r3, [r7, #20]
 8010cbe:	697b      	ldr	r3, [r7, #20]
 8010cc0:	881b      	ldrh	r3, [r3, #0]
 8010cc2:	b29b      	uxth	r3, r3
 8010cc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010cc8:	b29a      	uxth	r2, r3
 8010cca:	697b      	ldr	r3, [r7, #20]
 8010ccc:	801a      	strh	r2, [r3, #0]
 8010cce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d10a      	bne.n	8010cec <USB_EPStartXfer+0x2be>
 8010cd6:	697b      	ldr	r3, [r7, #20]
 8010cd8:	881b      	ldrh	r3, [r3, #0]
 8010cda:	b29b      	uxth	r3, r3
 8010cdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010ce0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010ce4:	b29a      	uxth	r2, r3
 8010ce6:	697b      	ldr	r3, [r7, #20]
 8010ce8:	801a      	strh	r2, [r3, #0]
 8010cea:	e05d      	b.n	8010da8 <USB_EPStartXfer+0x37a>
 8010cec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010cf0:	2b3e      	cmp	r3, #62	@ 0x3e
 8010cf2:	d81c      	bhi.n	8010d2e <USB_EPStartXfer+0x300>
 8010cf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010cf8:	085b      	lsrs	r3, r3, #1
 8010cfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8010cfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010d02:	f003 0301 	and.w	r3, r3, #1
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d004      	beq.n	8010d14 <USB_EPStartXfer+0x2e6>
 8010d0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010d0e:	3301      	adds	r3, #1
 8010d10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8010d14:	697b      	ldr	r3, [r7, #20]
 8010d16:	881b      	ldrh	r3, [r3, #0]
 8010d18:	b29a      	uxth	r2, r3
 8010d1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010d1e:	b29b      	uxth	r3, r3
 8010d20:	029b      	lsls	r3, r3, #10
 8010d22:	b29b      	uxth	r3, r3
 8010d24:	4313      	orrs	r3, r2
 8010d26:	b29a      	uxth	r2, r3
 8010d28:	697b      	ldr	r3, [r7, #20]
 8010d2a:	801a      	strh	r2, [r3, #0]
 8010d2c:	e03c      	b.n	8010da8 <USB_EPStartXfer+0x37a>
 8010d2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010d32:	095b      	lsrs	r3, r3, #5
 8010d34:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8010d38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010d3c:	f003 031f 	and.w	r3, r3, #31
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d104      	bne.n	8010d4e <USB_EPStartXfer+0x320>
 8010d44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010d48:	3b01      	subs	r3, #1
 8010d4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8010d4e:	697b      	ldr	r3, [r7, #20]
 8010d50:	881b      	ldrh	r3, [r3, #0]
 8010d52:	b29a      	uxth	r2, r3
 8010d54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010d58:	b29b      	uxth	r3, r3
 8010d5a:	029b      	lsls	r3, r3, #10
 8010d5c:	b29b      	uxth	r3, r3
 8010d5e:	4313      	orrs	r3, r2
 8010d60:	b29b      	uxth	r3, r3
 8010d62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010d66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010d6a:	b29a      	uxth	r2, r3
 8010d6c:	697b      	ldr	r3, [r7, #20]
 8010d6e:	801a      	strh	r2, [r3, #0]
 8010d70:	e01a      	b.n	8010da8 <USB_EPStartXfer+0x37a>
 8010d72:	683b      	ldr	r3, [r7, #0]
 8010d74:	785b      	ldrb	r3, [r3, #1]
 8010d76:	2b01      	cmp	r3, #1
 8010d78:	d116      	bne.n	8010da8 <USB_EPStartXfer+0x37a>
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	623b      	str	r3, [r7, #32]
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010d84:	b29b      	uxth	r3, r3
 8010d86:	461a      	mov	r2, r3
 8010d88:	6a3b      	ldr	r3, [r7, #32]
 8010d8a:	4413      	add	r3, r2
 8010d8c:	623b      	str	r3, [r7, #32]
 8010d8e:	683b      	ldr	r3, [r7, #0]
 8010d90:	781b      	ldrb	r3, [r3, #0]
 8010d92:	00da      	lsls	r2, r3, #3
 8010d94:	6a3b      	ldr	r3, [r7, #32]
 8010d96:	4413      	add	r3, r2
 8010d98:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010d9c:	61fb      	str	r3, [r7, #28]
 8010d9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010da2:	b29a      	uxth	r2, r3
 8010da4:	69fb      	ldr	r3, [r7, #28]
 8010da6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8010da8:	683b      	ldr	r3, [r7, #0]
 8010daa:	891b      	ldrh	r3, [r3, #8]
 8010dac:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	6959      	ldr	r1, [r3, #20]
 8010db4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010db8:	b29b      	uxth	r3, r3
 8010dba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8010dbe:	6878      	ldr	r0, [r7, #4]
 8010dc0:	f000 fd19 	bl	80117f6 <USB_WritePMA>
 8010dc4:	e2e2      	b.n	801138c <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010dc6:	683b      	ldr	r3, [r7, #0]
 8010dc8:	785b      	ldrb	r3, [r3, #1]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d16b      	bne.n	8010ea6 <USB_EPStartXfer+0x478>
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010dd8:	b29b      	uxth	r3, r3
 8010dda:	461a      	mov	r2, r3
 8010ddc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010dde:	4413      	add	r3, r2
 8010de0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010de2:	683b      	ldr	r3, [r7, #0]
 8010de4:	781b      	ldrb	r3, [r3, #0]
 8010de6:	00da      	lsls	r2, r3, #3
 8010de8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010dea:	4413      	add	r3, r2
 8010dec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010df0:	647b      	str	r3, [r7, #68]	@ 0x44
 8010df2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010df4:	881b      	ldrh	r3, [r3, #0]
 8010df6:	b29b      	uxth	r3, r3
 8010df8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010dfc:	b29a      	uxth	r2, r3
 8010dfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010e00:	801a      	strh	r2, [r3, #0]
 8010e02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d10a      	bne.n	8010e20 <USB_EPStartXfer+0x3f2>
 8010e0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010e0c:	881b      	ldrh	r3, [r3, #0]
 8010e0e:	b29b      	uxth	r3, r3
 8010e10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010e14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010e18:	b29a      	uxth	r2, r3
 8010e1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010e1c:	801a      	strh	r2, [r3, #0]
 8010e1e:	e05d      	b.n	8010edc <USB_EPStartXfer+0x4ae>
 8010e20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010e24:	2b3e      	cmp	r3, #62	@ 0x3e
 8010e26:	d81c      	bhi.n	8010e62 <USB_EPStartXfer+0x434>
 8010e28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010e2c:	085b      	lsrs	r3, r3, #1
 8010e2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010e32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010e36:	f003 0301 	and.w	r3, r3, #1
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d004      	beq.n	8010e48 <USB_EPStartXfer+0x41a>
 8010e3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010e42:	3301      	adds	r3, #1
 8010e44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010e48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010e4a:	881b      	ldrh	r3, [r3, #0]
 8010e4c:	b29a      	uxth	r2, r3
 8010e4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010e52:	b29b      	uxth	r3, r3
 8010e54:	029b      	lsls	r3, r3, #10
 8010e56:	b29b      	uxth	r3, r3
 8010e58:	4313      	orrs	r3, r2
 8010e5a:	b29a      	uxth	r2, r3
 8010e5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010e5e:	801a      	strh	r2, [r3, #0]
 8010e60:	e03c      	b.n	8010edc <USB_EPStartXfer+0x4ae>
 8010e62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010e66:	095b      	lsrs	r3, r3, #5
 8010e68:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010e6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010e70:	f003 031f 	and.w	r3, r3, #31
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d104      	bne.n	8010e82 <USB_EPStartXfer+0x454>
 8010e78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010e7c:	3b01      	subs	r3, #1
 8010e7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010e82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010e84:	881b      	ldrh	r3, [r3, #0]
 8010e86:	b29a      	uxth	r2, r3
 8010e88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010e8c:	b29b      	uxth	r3, r3
 8010e8e:	029b      	lsls	r3, r3, #10
 8010e90:	b29b      	uxth	r3, r3
 8010e92:	4313      	orrs	r3, r2
 8010e94:	b29b      	uxth	r3, r3
 8010e96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010e9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010e9e:	b29a      	uxth	r2, r3
 8010ea0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010ea2:	801a      	strh	r2, [r3, #0]
 8010ea4:	e01a      	b.n	8010edc <USB_EPStartXfer+0x4ae>
 8010ea6:	683b      	ldr	r3, [r7, #0]
 8010ea8:	785b      	ldrb	r3, [r3, #1]
 8010eaa:	2b01      	cmp	r3, #1
 8010eac:	d116      	bne.n	8010edc <USB_EPStartXfer+0x4ae>
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	653b      	str	r3, [r7, #80]	@ 0x50
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010eb8:	b29b      	uxth	r3, r3
 8010eba:	461a      	mov	r2, r3
 8010ebc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010ebe:	4413      	add	r3, r2
 8010ec0:	653b      	str	r3, [r7, #80]	@ 0x50
 8010ec2:	683b      	ldr	r3, [r7, #0]
 8010ec4:	781b      	ldrb	r3, [r3, #0]
 8010ec6:	00da      	lsls	r2, r3, #3
 8010ec8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010eca:	4413      	add	r3, r2
 8010ecc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010ed0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010ed2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010ed6:	b29a      	uxth	r2, r3
 8010ed8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010eda:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8010edc:	683b      	ldr	r3, [r7, #0]
 8010ede:	891b      	ldrh	r3, [r3, #8]
 8010ee0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010ee4:	683b      	ldr	r3, [r7, #0]
 8010ee6:	6959      	ldr	r1, [r3, #20]
 8010ee8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010eec:	b29b      	uxth	r3, r3
 8010eee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8010ef2:	6878      	ldr	r0, [r7, #4]
 8010ef4:	f000 fc7f 	bl	80117f6 <USB_WritePMA>
            ep->xfer_buff += len;
 8010ef8:	683b      	ldr	r3, [r7, #0]
 8010efa:	695a      	ldr	r2, [r3, #20]
 8010efc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010f00:	441a      	add	r2, r3
 8010f02:	683b      	ldr	r3, [r7, #0]
 8010f04:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8010f06:	683b      	ldr	r3, [r7, #0]
 8010f08:	6a1a      	ldr	r2, [r3, #32]
 8010f0a:	683b      	ldr	r3, [r7, #0]
 8010f0c:	691b      	ldr	r3, [r3, #16]
 8010f0e:	429a      	cmp	r2, r3
 8010f10:	d907      	bls.n	8010f22 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8010f12:	683b      	ldr	r3, [r7, #0]
 8010f14:	6a1a      	ldr	r2, [r3, #32]
 8010f16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010f1a:	1ad2      	subs	r2, r2, r3
 8010f1c:	683b      	ldr	r3, [r7, #0]
 8010f1e:	621a      	str	r2, [r3, #32]
 8010f20:	e006      	b.n	8010f30 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8010f22:	683b      	ldr	r3, [r7, #0]
 8010f24:	6a1b      	ldr	r3, [r3, #32]
 8010f26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8010f2a:	683b      	ldr	r3, [r7, #0]
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	643b      	str	r3, [r7, #64]	@ 0x40
 8010f34:	683b      	ldr	r3, [r7, #0]
 8010f36:	785b      	ldrb	r3, [r3, #1]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d16b      	bne.n	8011014 <USB_EPStartXfer+0x5e6>
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010f46:	b29b      	uxth	r3, r3
 8010f48:	461a      	mov	r2, r3
 8010f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f4c:	4413      	add	r3, r2
 8010f4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010f50:	683b      	ldr	r3, [r7, #0]
 8010f52:	781b      	ldrb	r3, [r3, #0]
 8010f54:	00da      	lsls	r2, r3, #3
 8010f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f58:	4413      	add	r3, r2
 8010f5a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010f5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8010f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f62:	881b      	ldrh	r3, [r3, #0]
 8010f64:	b29b      	uxth	r3, r3
 8010f66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010f6a:	b29a      	uxth	r2, r3
 8010f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f6e:	801a      	strh	r2, [r3, #0]
 8010f70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d10a      	bne.n	8010f8e <USB_EPStartXfer+0x560>
 8010f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f7a:	881b      	ldrh	r3, [r3, #0]
 8010f7c:	b29b      	uxth	r3, r3
 8010f7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010f82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010f86:	b29a      	uxth	r2, r3
 8010f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f8a:	801a      	strh	r2, [r3, #0]
 8010f8c:	e05b      	b.n	8011046 <USB_EPStartXfer+0x618>
 8010f8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010f92:	2b3e      	cmp	r3, #62	@ 0x3e
 8010f94:	d81c      	bhi.n	8010fd0 <USB_EPStartXfer+0x5a2>
 8010f96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010f9a:	085b      	lsrs	r3, r3, #1
 8010f9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010fa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010fa4:	f003 0301 	and.w	r3, r3, #1
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d004      	beq.n	8010fb6 <USB_EPStartXfer+0x588>
 8010fac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010fb0:	3301      	adds	r3, #1
 8010fb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fb8:	881b      	ldrh	r3, [r3, #0]
 8010fba:	b29a      	uxth	r2, r3
 8010fbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010fc0:	b29b      	uxth	r3, r3
 8010fc2:	029b      	lsls	r3, r3, #10
 8010fc4:	b29b      	uxth	r3, r3
 8010fc6:	4313      	orrs	r3, r2
 8010fc8:	b29a      	uxth	r2, r3
 8010fca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fcc:	801a      	strh	r2, [r3, #0]
 8010fce:	e03a      	b.n	8011046 <USB_EPStartXfer+0x618>
 8010fd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010fd4:	095b      	lsrs	r3, r3, #5
 8010fd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010fda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010fde:	f003 031f 	and.w	r3, r3, #31
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d104      	bne.n	8010ff0 <USB_EPStartXfer+0x5c2>
 8010fe6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010fea:	3b01      	subs	r3, #1
 8010fec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ff2:	881b      	ldrh	r3, [r3, #0]
 8010ff4:	b29a      	uxth	r2, r3
 8010ff6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010ffa:	b29b      	uxth	r3, r3
 8010ffc:	029b      	lsls	r3, r3, #10
 8010ffe:	b29b      	uxth	r3, r3
 8011000:	4313      	orrs	r3, r2
 8011002:	b29b      	uxth	r3, r3
 8011004:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011008:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801100c:	b29a      	uxth	r2, r3
 801100e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011010:	801a      	strh	r2, [r3, #0]
 8011012:	e018      	b.n	8011046 <USB_EPStartXfer+0x618>
 8011014:	683b      	ldr	r3, [r7, #0]
 8011016:	785b      	ldrb	r3, [r3, #1]
 8011018:	2b01      	cmp	r3, #1
 801101a:	d114      	bne.n	8011046 <USB_EPStartXfer+0x618>
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011022:	b29b      	uxth	r3, r3
 8011024:	461a      	mov	r2, r3
 8011026:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011028:	4413      	add	r3, r2
 801102a:	643b      	str	r3, [r7, #64]	@ 0x40
 801102c:	683b      	ldr	r3, [r7, #0]
 801102e:	781b      	ldrb	r3, [r3, #0]
 8011030:	00da      	lsls	r2, r3, #3
 8011032:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011034:	4413      	add	r3, r2
 8011036:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801103a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801103c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011040:	b29a      	uxth	r2, r3
 8011042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011044:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8011046:	683b      	ldr	r3, [r7, #0]
 8011048:	895b      	ldrh	r3, [r3, #10]
 801104a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801104e:	683b      	ldr	r3, [r7, #0]
 8011050:	6959      	ldr	r1, [r3, #20]
 8011052:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011056:	b29b      	uxth	r3, r3
 8011058:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801105c:	6878      	ldr	r0, [r7, #4]
 801105e:	f000 fbca 	bl	80117f6 <USB_WritePMA>
 8011062:	e193      	b.n	801138c <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8011064:	683b      	ldr	r3, [r7, #0]
 8011066:	6a1b      	ldr	r3, [r3, #32]
 8011068:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801106c:	687a      	ldr	r2, [r7, #4]
 801106e:	683b      	ldr	r3, [r7, #0]
 8011070:	781b      	ldrb	r3, [r3, #0]
 8011072:	009b      	lsls	r3, r3, #2
 8011074:	4413      	add	r3, r2
 8011076:	881b      	ldrh	r3, [r3, #0]
 8011078:	b29b      	uxth	r3, r3
 801107a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 801107e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011082:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8011086:	687a      	ldr	r2, [r7, #4]
 8011088:	683b      	ldr	r3, [r7, #0]
 801108a:	781b      	ldrb	r3, [r3, #0]
 801108c:	009b      	lsls	r3, r3, #2
 801108e:	441a      	add	r2, r3
 8011090:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8011094:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011098:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801109c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80110a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80110a4:	b29b      	uxth	r3, r3
 80110a6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80110b2:	b29b      	uxth	r3, r3
 80110b4:	461a      	mov	r2, r3
 80110b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80110b8:	4413      	add	r3, r2
 80110ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	781b      	ldrb	r3, [r3, #0]
 80110c0:	00da      	lsls	r2, r3, #3
 80110c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80110c4:	4413      	add	r3, r2
 80110c6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80110ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80110cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80110d0:	b29a      	uxth	r2, r3
 80110d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80110d4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80110d6:	683b      	ldr	r3, [r7, #0]
 80110d8:	891b      	ldrh	r3, [r3, #8]
 80110da:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80110de:	683b      	ldr	r3, [r7, #0]
 80110e0:	6959      	ldr	r1, [r3, #20]
 80110e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80110e6:	b29b      	uxth	r3, r3
 80110e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80110ec:	6878      	ldr	r0, [r7, #4]
 80110ee:	f000 fb82 	bl	80117f6 <USB_WritePMA>
 80110f2:	e14b      	b.n	801138c <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80110f4:	683b      	ldr	r3, [r7, #0]
 80110f6:	6a1a      	ldr	r2, [r3, #32]
 80110f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80110fc:	1ad2      	subs	r2, r2, r3
 80110fe:	683b      	ldr	r3, [r7, #0]
 8011100:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8011102:	687a      	ldr	r2, [r7, #4]
 8011104:	683b      	ldr	r3, [r7, #0]
 8011106:	781b      	ldrb	r3, [r3, #0]
 8011108:	009b      	lsls	r3, r3, #2
 801110a:	4413      	add	r3, r2
 801110c:	881b      	ldrh	r3, [r3, #0]
 801110e:	b29b      	uxth	r3, r3
 8011110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011114:	2b00      	cmp	r3, #0
 8011116:	f000 809a 	beq.w	801124e <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	673b      	str	r3, [r7, #112]	@ 0x70
 801111e:	683b      	ldr	r3, [r7, #0]
 8011120:	785b      	ldrb	r3, [r3, #1]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d16b      	bne.n	80111fe <USB_EPStartXfer+0x7d0>
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	66bb      	str	r3, [r7, #104]	@ 0x68
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011130:	b29b      	uxth	r3, r3
 8011132:	461a      	mov	r2, r3
 8011134:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011136:	4413      	add	r3, r2
 8011138:	66bb      	str	r3, [r7, #104]	@ 0x68
 801113a:	683b      	ldr	r3, [r7, #0]
 801113c:	781b      	ldrb	r3, [r3, #0]
 801113e:	00da      	lsls	r2, r3, #3
 8011140:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011142:	4413      	add	r3, r2
 8011144:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011148:	667b      	str	r3, [r7, #100]	@ 0x64
 801114a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801114c:	881b      	ldrh	r3, [r3, #0]
 801114e:	b29b      	uxth	r3, r3
 8011150:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011154:	b29a      	uxth	r2, r3
 8011156:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011158:	801a      	strh	r2, [r3, #0]
 801115a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801115e:	2b00      	cmp	r3, #0
 8011160:	d10a      	bne.n	8011178 <USB_EPStartXfer+0x74a>
 8011162:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011164:	881b      	ldrh	r3, [r3, #0]
 8011166:	b29b      	uxth	r3, r3
 8011168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801116c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011170:	b29a      	uxth	r2, r3
 8011172:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011174:	801a      	strh	r2, [r3, #0]
 8011176:	e05b      	b.n	8011230 <USB_EPStartXfer+0x802>
 8011178:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801117c:	2b3e      	cmp	r3, #62	@ 0x3e
 801117e:	d81c      	bhi.n	80111ba <USB_EPStartXfer+0x78c>
 8011180:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011184:	085b      	lsrs	r3, r3, #1
 8011186:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801118a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801118e:	f003 0301 	and.w	r3, r3, #1
 8011192:	2b00      	cmp	r3, #0
 8011194:	d004      	beq.n	80111a0 <USB_EPStartXfer+0x772>
 8011196:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801119a:	3301      	adds	r3, #1
 801119c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80111a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80111a2:	881b      	ldrh	r3, [r3, #0]
 80111a4:	b29a      	uxth	r2, r3
 80111a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80111aa:	b29b      	uxth	r3, r3
 80111ac:	029b      	lsls	r3, r3, #10
 80111ae:	b29b      	uxth	r3, r3
 80111b0:	4313      	orrs	r3, r2
 80111b2:	b29a      	uxth	r2, r3
 80111b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80111b6:	801a      	strh	r2, [r3, #0]
 80111b8:	e03a      	b.n	8011230 <USB_EPStartXfer+0x802>
 80111ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80111be:	095b      	lsrs	r3, r3, #5
 80111c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80111c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80111c8:	f003 031f 	and.w	r3, r3, #31
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d104      	bne.n	80111da <USB_EPStartXfer+0x7ac>
 80111d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80111d4:	3b01      	subs	r3, #1
 80111d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80111da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80111dc:	881b      	ldrh	r3, [r3, #0]
 80111de:	b29a      	uxth	r2, r3
 80111e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80111e4:	b29b      	uxth	r3, r3
 80111e6:	029b      	lsls	r3, r3, #10
 80111e8:	b29b      	uxth	r3, r3
 80111ea:	4313      	orrs	r3, r2
 80111ec:	b29b      	uxth	r3, r3
 80111ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80111f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80111f6:	b29a      	uxth	r2, r3
 80111f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80111fa:	801a      	strh	r2, [r3, #0]
 80111fc:	e018      	b.n	8011230 <USB_EPStartXfer+0x802>
 80111fe:	683b      	ldr	r3, [r7, #0]
 8011200:	785b      	ldrb	r3, [r3, #1]
 8011202:	2b01      	cmp	r3, #1
 8011204:	d114      	bne.n	8011230 <USB_EPStartXfer+0x802>
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801120c:	b29b      	uxth	r3, r3
 801120e:	461a      	mov	r2, r3
 8011210:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011212:	4413      	add	r3, r2
 8011214:	673b      	str	r3, [r7, #112]	@ 0x70
 8011216:	683b      	ldr	r3, [r7, #0]
 8011218:	781b      	ldrb	r3, [r3, #0]
 801121a:	00da      	lsls	r2, r3, #3
 801121c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801121e:	4413      	add	r3, r2
 8011220:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011224:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011226:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801122a:	b29a      	uxth	r2, r3
 801122c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801122e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8011230:	683b      	ldr	r3, [r7, #0]
 8011232:	895b      	ldrh	r3, [r3, #10]
 8011234:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011238:	683b      	ldr	r3, [r7, #0]
 801123a:	6959      	ldr	r1, [r3, #20]
 801123c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011240:	b29b      	uxth	r3, r3
 8011242:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8011246:	6878      	ldr	r0, [r7, #4]
 8011248:	f000 fad5 	bl	80117f6 <USB_WritePMA>
 801124c:	e09e      	b.n	801138c <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801124e:	683b      	ldr	r3, [r7, #0]
 8011250:	785b      	ldrb	r3, [r3, #1]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d16b      	bne.n	801132e <USB_EPStartXfer+0x900>
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011260:	b29b      	uxth	r3, r3
 8011262:	461a      	mov	r2, r3
 8011264:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011266:	4413      	add	r3, r2
 8011268:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801126a:	683b      	ldr	r3, [r7, #0]
 801126c:	781b      	ldrb	r3, [r3, #0]
 801126e:	00da      	lsls	r2, r3, #3
 8011270:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011272:	4413      	add	r3, r2
 8011274:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011278:	67bb      	str	r3, [r7, #120]	@ 0x78
 801127a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801127c:	881b      	ldrh	r3, [r3, #0]
 801127e:	b29b      	uxth	r3, r3
 8011280:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011284:	b29a      	uxth	r2, r3
 8011286:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011288:	801a      	strh	r2, [r3, #0]
 801128a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801128e:	2b00      	cmp	r3, #0
 8011290:	d10a      	bne.n	80112a8 <USB_EPStartXfer+0x87a>
 8011292:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011294:	881b      	ldrh	r3, [r3, #0]
 8011296:	b29b      	uxth	r3, r3
 8011298:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801129c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80112a0:	b29a      	uxth	r2, r3
 80112a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80112a4:	801a      	strh	r2, [r3, #0]
 80112a6:	e063      	b.n	8011370 <USB_EPStartXfer+0x942>
 80112a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80112ae:	d81c      	bhi.n	80112ea <USB_EPStartXfer+0x8bc>
 80112b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112b4:	085b      	lsrs	r3, r3, #1
 80112b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80112ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112be:	f003 0301 	and.w	r3, r3, #1
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d004      	beq.n	80112d0 <USB_EPStartXfer+0x8a2>
 80112c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80112ca:	3301      	adds	r3, #1
 80112cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80112d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80112d2:	881b      	ldrh	r3, [r3, #0]
 80112d4:	b29a      	uxth	r2, r3
 80112d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80112da:	b29b      	uxth	r3, r3
 80112dc:	029b      	lsls	r3, r3, #10
 80112de:	b29b      	uxth	r3, r3
 80112e0:	4313      	orrs	r3, r2
 80112e2:	b29a      	uxth	r2, r3
 80112e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80112e6:	801a      	strh	r2, [r3, #0]
 80112e8:	e042      	b.n	8011370 <USB_EPStartXfer+0x942>
 80112ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112ee:	095b      	lsrs	r3, r3, #5
 80112f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80112f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112f8:	f003 031f 	and.w	r3, r3, #31
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d104      	bne.n	801130a <USB_EPStartXfer+0x8dc>
 8011300:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011304:	3b01      	subs	r3, #1
 8011306:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801130a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801130c:	881b      	ldrh	r3, [r3, #0]
 801130e:	b29a      	uxth	r2, r3
 8011310:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011314:	b29b      	uxth	r3, r3
 8011316:	029b      	lsls	r3, r3, #10
 8011318:	b29b      	uxth	r3, r3
 801131a:	4313      	orrs	r3, r2
 801131c:	b29b      	uxth	r3, r3
 801131e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011326:	b29a      	uxth	r2, r3
 8011328:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801132a:	801a      	strh	r2, [r3, #0]
 801132c:	e020      	b.n	8011370 <USB_EPStartXfer+0x942>
 801132e:	683b      	ldr	r3, [r7, #0]
 8011330:	785b      	ldrb	r3, [r3, #1]
 8011332:	2b01      	cmp	r3, #1
 8011334:	d11c      	bne.n	8011370 <USB_EPStartXfer+0x942>
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011342:	b29b      	uxth	r3, r3
 8011344:	461a      	mov	r2, r3
 8011346:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801134a:	4413      	add	r3, r2
 801134c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011350:	683b      	ldr	r3, [r7, #0]
 8011352:	781b      	ldrb	r3, [r3, #0]
 8011354:	00da      	lsls	r2, r3, #3
 8011356:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801135a:	4413      	add	r3, r2
 801135c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011360:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011364:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011368:	b29a      	uxth	r2, r3
 801136a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801136e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8011370:	683b      	ldr	r3, [r7, #0]
 8011372:	891b      	ldrh	r3, [r3, #8]
 8011374:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011378:	683b      	ldr	r3, [r7, #0]
 801137a:	6959      	ldr	r1, [r3, #20]
 801137c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011380:	b29b      	uxth	r3, r3
 8011382:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8011386:	6878      	ldr	r0, [r7, #4]
 8011388:	f000 fa35 	bl	80117f6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801138c:	687a      	ldr	r2, [r7, #4]
 801138e:	683b      	ldr	r3, [r7, #0]
 8011390:	781b      	ldrb	r3, [r3, #0]
 8011392:	009b      	lsls	r3, r3, #2
 8011394:	4413      	add	r3, r2
 8011396:	881b      	ldrh	r3, [r3, #0]
 8011398:	b29b      	uxth	r3, r3
 801139a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801139e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80113a2:	817b      	strh	r3, [r7, #10]
 80113a4:	897b      	ldrh	r3, [r7, #10]
 80113a6:	f083 0310 	eor.w	r3, r3, #16
 80113aa:	817b      	strh	r3, [r7, #10]
 80113ac:	897b      	ldrh	r3, [r7, #10]
 80113ae:	f083 0320 	eor.w	r3, r3, #32
 80113b2:	817b      	strh	r3, [r7, #10]
 80113b4:	687a      	ldr	r2, [r7, #4]
 80113b6:	683b      	ldr	r3, [r7, #0]
 80113b8:	781b      	ldrb	r3, [r3, #0]
 80113ba:	009b      	lsls	r3, r3, #2
 80113bc:	441a      	add	r2, r3
 80113be:	897b      	ldrh	r3, [r7, #10]
 80113c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80113c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80113c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80113cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80113d0:	b29b      	uxth	r3, r3
 80113d2:	8013      	strh	r3, [r2, #0]
 80113d4:	e0d5      	b.n	8011582 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80113d6:	683b      	ldr	r3, [r7, #0]
 80113d8:	7b1b      	ldrb	r3, [r3, #12]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d156      	bne.n	801148c <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 80113de:	683b      	ldr	r3, [r7, #0]
 80113e0:	699b      	ldr	r3, [r3, #24]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d122      	bne.n	801142c <USB_EPStartXfer+0x9fe>
 80113e6:	683b      	ldr	r3, [r7, #0]
 80113e8:	78db      	ldrb	r3, [r3, #3]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d11e      	bne.n	801142c <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 80113ee:	687a      	ldr	r2, [r7, #4]
 80113f0:	683b      	ldr	r3, [r7, #0]
 80113f2:	781b      	ldrb	r3, [r3, #0]
 80113f4:	009b      	lsls	r3, r3, #2
 80113f6:	4413      	add	r3, r2
 80113f8:	881b      	ldrh	r3, [r3, #0]
 80113fa:	b29b      	uxth	r3, r3
 80113fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011400:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011404:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8011408:	687a      	ldr	r2, [r7, #4]
 801140a:	683b      	ldr	r3, [r7, #0]
 801140c:	781b      	ldrb	r3, [r3, #0]
 801140e:	009b      	lsls	r3, r3, #2
 8011410:	441a      	add	r2, r3
 8011412:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8011416:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801141a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801141e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8011422:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011426:	b29b      	uxth	r3, r3
 8011428:	8013      	strh	r3, [r2, #0]
 801142a:	e01d      	b.n	8011468 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 801142c:	687a      	ldr	r2, [r7, #4]
 801142e:	683b      	ldr	r3, [r7, #0]
 8011430:	781b      	ldrb	r3, [r3, #0]
 8011432:	009b      	lsls	r3, r3, #2
 8011434:	4413      	add	r3, r2
 8011436:	881b      	ldrh	r3, [r3, #0]
 8011438:	b29b      	uxth	r3, r3
 801143a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 801143e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011442:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8011446:	687a      	ldr	r2, [r7, #4]
 8011448:	683b      	ldr	r3, [r7, #0]
 801144a:	781b      	ldrb	r3, [r3, #0]
 801144c:	009b      	lsls	r3, r3, #2
 801144e:	441a      	add	r2, r3
 8011450:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8011454:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011458:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801145c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011460:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011464:	b29b      	uxth	r3, r3
 8011466:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8011468:	683b      	ldr	r3, [r7, #0]
 801146a:	699a      	ldr	r2, [r3, #24]
 801146c:	683b      	ldr	r3, [r7, #0]
 801146e:	691b      	ldr	r3, [r3, #16]
 8011470:	429a      	cmp	r2, r3
 8011472:	d907      	bls.n	8011484 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8011474:	683b      	ldr	r3, [r7, #0]
 8011476:	699a      	ldr	r2, [r3, #24]
 8011478:	683b      	ldr	r3, [r7, #0]
 801147a:	691b      	ldr	r3, [r3, #16]
 801147c:	1ad2      	subs	r2, r2, r3
 801147e:	683b      	ldr	r3, [r7, #0]
 8011480:	619a      	str	r2, [r3, #24]
 8011482:	e054      	b.n	801152e <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8011484:	683b      	ldr	r3, [r7, #0]
 8011486:	2200      	movs	r2, #0
 8011488:	619a      	str	r2, [r3, #24]
 801148a:	e050      	b.n	801152e <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801148c:	683b      	ldr	r3, [r7, #0]
 801148e:	78db      	ldrb	r3, [r3, #3]
 8011490:	2b02      	cmp	r3, #2
 8011492:	d142      	bne.n	801151a <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8011494:	683b      	ldr	r3, [r7, #0]
 8011496:	69db      	ldr	r3, [r3, #28]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d048      	beq.n	801152e <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801149c:	687a      	ldr	r2, [r7, #4]
 801149e:	683b      	ldr	r3, [r7, #0]
 80114a0:	781b      	ldrb	r3, [r3, #0]
 80114a2:	009b      	lsls	r3, r3, #2
 80114a4:	4413      	add	r3, r2
 80114a6:	881b      	ldrh	r3, [r3, #0]
 80114a8:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80114ac:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80114b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d005      	beq.n	80114c4 <USB_EPStartXfer+0xa96>
 80114b8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80114bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d10b      	bne.n	80114dc <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80114c4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80114c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d12e      	bne.n	801152e <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80114d0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80114d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d128      	bne.n	801152e <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80114dc:	687a      	ldr	r2, [r7, #4]
 80114de:	683b      	ldr	r3, [r7, #0]
 80114e0:	781b      	ldrb	r3, [r3, #0]
 80114e2:	009b      	lsls	r3, r3, #2
 80114e4:	4413      	add	r3, r2
 80114e6:	881b      	ldrh	r3, [r3, #0]
 80114e8:	b29b      	uxth	r3, r3
 80114ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80114ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80114f2:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 80114f6:	687a      	ldr	r2, [r7, #4]
 80114f8:	683b      	ldr	r3, [r7, #0]
 80114fa:	781b      	ldrb	r3, [r3, #0]
 80114fc:	009b      	lsls	r3, r3, #2
 80114fe:	441a      	add	r2, r3
 8011500:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8011504:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011508:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801150c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011510:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011514:	b29b      	uxth	r3, r3
 8011516:	8013      	strh	r3, [r2, #0]
 8011518:	e009      	b.n	801152e <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801151a:	683b      	ldr	r3, [r7, #0]
 801151c:	78db      	ldrb	r3, [r3, #3]
 801151e:	2b01      	cmp	r3, #1
 8011520:	d103      	bne.n	801152a <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8011522:	683b      	ldr	r3, [r7, #0]
 8011524:	2200      	movs	r2, #0
 8011526:	619a      	str	r2, [r3, #24]
 8011528:	e001      	b.n	801152e <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 801152a:	2301      	movs	r3, #1
 801152c:	e02a      	b.n	8011584 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801152e:	687a      	ldr	r2, [r7, #4]
 8011530:	683b      	ldr	r3, [r7, #0]
 8011532:	781b      	ldrb	r3, [r3, #0]
 8011534:	009b      	lsls	r3, r3, #2
 8011536:	4413      	add	r3, r2
 8011538:	881b      	ldrh	r3, [r3, #0]
 801153a:	b29b      	uxth	r3, r3
 801153c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011540:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011544:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8011548:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801154c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011550:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8011554:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8011558:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 801155c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8011560:	687a      	ldr	r2, [r7, #4]
 8011562:	683b      	ldr	r3, [r7, #0]
 8011564:	781b      	ldrb	r3, [r3, #0]
 8011566:	009b      	lsls	r3, r3, #2
 8011568:	441a      	add	r2, r3
 801156a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801156e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011572:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011576:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801157a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801157e:	b29b      	uxth	r3, r3
 8011580:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011582:	2300      	movs	r3, #0
}
 8011584:	4618      	mov	r0, r3
 8011586:	37b0      	adds	r7, #176	@ 0xb0
 8011588:	46bd      	mov	sp, r7
 801158a:	bd80      	pop	{r7, pc}

0801158c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801158c:	b480      	push	{r7}
 801158e:	b085      	sub	sp, #20
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
 8011594:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8011596:	683b      	ldr	r3, [r7, #0]
 8011598:	785b      	ldrb	r3, [r3, #1]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d020      	beq.n	80115e0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801159e:	687a      	ldr	r2, [r7, #4]
 80115a0:	683b      	ldr	r3, [r7, #0]
 80115a2:	781b      	ldrb	r3, [r3, #0]
 80115a4:	009b      	lsls	r3, r3, #2
 80115a6:	4413      	add	r3, r2
 80115a8:	881b      	ldrh	r3, [r3, #0]
 80115aa:	b29b      	uxth	r3, r3
 80115ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80115b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80115b4:	81bb      	strh	r3, [r7, #12]
 80115b6:	89bb      	ldrh	r3, [r7, #12]
 80115b8:	f083 0310 	eor.w	r3, r3, #16
 80115bc:	81bb      	strh	r3, [r7, #12]
 80115be:	687a      	ldr	r2, [r7, #4]
 80115c0:	683b      	ldr	r3, [r7, #0]
 80115c2:	781b      	ldrb	r3, [r3, #0]
 80115c4:	009b      	lsls	r3, r3, #2
 80115c6:	441a      	add	r2, r3
 80115c8:	89bb      	ldrh	r3, [r7, #12]
 80115ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80115ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80115d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80115d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80115da:	b29b      	uxth	r3, r3
 80115dc:	8013      	strh	r3, [r2, #0]
 80115de:	e01f      	b.n	8011620 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80115e0:	687a      	ldr	r2, [r7, #4]
 80115e2:	683b      	ldr	r3, [r7, #0]
 80115e4:	781b      	ldrb	r3, [r3, #0]
 80115e6:	009b      	lsls	r3, r3, #2
 80115e8:	4413      	add	r3, r2
 80115ea:	881b      	ldrh	r3, [r3, #0]
 80115ec:	b29b      	uxth	r3, r3
 80115ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80115f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80115f6:	81fb      	strh	r3, [r7, #14]
 80115f8:	89fb      	ldrh	r3, [r7, #14]
 80115fa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80115fe:	81fb      	strh	r3, [r7, #14]
 8011600:	687a      	ldr	r2, [r7, #4]
 8011602:	683b      	ldr	r3, [r7, #0]
 8011604:	781b      	ldrb	r3, [r3, #0]
 8011606:	009b      	lsls	r3, r3, #2
 8011608:	441a      	add	r2, r3
 801160a:	89fb      	ldrh	r3, [r7, #14]
 801160c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011610:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011614:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011618:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801161c:	b29b      	uxth	r3, r3
 801161e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011620:	2300      	movs	r3, #0
}
 8011622:	4618      	mov	r0, r3
 8011624:	3714      	adds	r7, #20
 8011626:	46bd      	mov	sp, r7
 8011628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162c:	4770      	bx	lr

0801162e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801162e:	b480      	push	{r7}
 8011630:	b087      	sub	sp, #28
 8011632:	af00      	add	r7, sp, #0
 8011634:	6078      	str	r0, [r7, #4]
 8011636:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	785b      	ldrb	r3, [r3, #1]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d04c      	beq.n	80116da <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011640:	687a      	ldr	r2, [r7, #4]
 8011642:	683b      	ldr	r3, [r7, #0]
 8011644:	781b      	ldrb	r3, [r3, #0]
 8011646:	009b      	lsls	r3, r3, #2
 8011648:	4413      	add	r3, r2
 801164a:	881b      	ldrh	r3, [r3, #0]
 801164c:	823b      	strh	r3, [r7, #16]
 801164e:	8a3b      	ldrh	r3, [r7, #16]
 8011650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011654:	2b00      	cmp	r3, #0
 8011656:	d01b      	beq.n	8011690 <USB_EPClearStall+0x62>
 8011658:	687a      	ldr	r2, [r7, #4]
 801165a:	683b      	ldr	r3, [r7, #0]
 801165c:	781b      	ldrb	r3, [r3, #0]
 801165e:	009b      	lsls	r3, r3, #2
 8011660:	4413      	add	r3, r2
 8011662:	881b      	ldrh	r3, [r3, #0]
 8011664:	b29b      	uxth	r3, r3
 8011666:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801166a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801166e:	81fb      	strh	r3, [r7, #14]
 8011670:	687a      	ldr	r2, [r7, #4]
 8011672:	683b      	ldr	r3, [r7, #0]
 8011674:	781b      	ldrb	r3, [r3, #0]
 8011676:	009b      	lsls	r3, r3, #2
 8011678:	441a      	add	r2, r3
 801167a:	89fb      	ldrh	r3, [r7, #14]
 801167c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011680:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011684:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011688:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 801168c:	b29b      	uxth	r3, r3
 801168e:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8011690:	683b      	ldr	r3, [r7, #0]
 8011692:	78db      	ldrb	r3, [r3, #3]
 8011694:	2b01      	cmp	r3, #1
 8011696:	d06c      	beq.n	8011772 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011698:	687a      	ldr	r2, [r7, #4]
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	781b      	ldrb	r3, [r3, #0]
 801169e:	009b      	lsls	r3, r3, #2
 80116a0:	4413      	add	r3, r2
 80116a2:	881b      	ldrh	r3, [r3, #0]
 80116a4:	b29b      	uxth	r3, r3
 80116a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80116aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80116ae:	81bb      	strh	r3, [r7, #12]
 80116b0:	89bb      	ldrh	r3, [r7, #12]
 80116b2:	f083 0320 	eor.w	r3, r3, #32
 80116b6:	81bb      	strh	r3, [r7, #12]
 80116b8:	687a      	ldr	r2, [r7, #4]
 80116ba:	683b      	ldr	r3, [r7, #0]
 80116bc:	781b      	ldrb	r3, [r3, #0]
 80116be:	009b      	lsls	r3, r3, #2
 80116c0:	441a      	add	r2, r3
 80116c2:	89bb      	ldrh	r3, [r7, #12]
 80116c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80116c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80116cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80116d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80116d4:	b29b      	uxth	r3, r3
 80116d6:	8013      	strh	r3, [r2, #0]
 80116d8:	e04b      	b.n	8011772 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80116da:	687a      	ldr	r2, [r7, #4]
 80116dc:	683b      	ldr	r3, [r7, #0]
 80116de:	781b      	ldrb	r3, [r3, #0]
 80116e0:	009b      	lsls	r3, r3, #2
 80116e2:	4413      	add	r3, r2
 80116e4:	881b      	ldrh	r3, [r3, #0]
 80116e6:	82fb      	strh	r3, [r7, #22]
 80116e8:	8afb      	ldrh	r3, [r7, #22]
 80116ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d01b      	beq.n	801172a <USB_EPClearStall+0xfc>
 80116f2:	687a      	ldr	r2, [r7, #4]
 80116f4:	683b      	ldr	r3, [r7, #0]
 80116f6:	781b      	ldrb	r3, [r3, #0]
 80116f8:	009b      	lsls	r3, r3, #2
 80116fa:	4413      	add	r3, r2
 80116fc:	881b      	ldrh	r3, [r3, #0]
 80116fe:	b29b      	uxth	r3, r3
 8011700:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011704:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011708:	82bb      	strh	r3, [r7, #20]
 801170a:	687a      	ldr	r2, [r7, #4]
 801170c:	683b      	ldr	r3, [r7, #0]
 801170e:	781b      	ldrb	r3, [r3, #0]
 8011710:	009b      	lsls	r3, r3, #2
 8011712:	441a      	add	r2, r3
 8011714:	8abb      	ldrh	r3, [r7, #20]
 8011716:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801171a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801171e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011726:	b29b      	uxth	r3, r3
 8011728:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801172a:	687a      	ldr	r2, [r7, #4]
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	781b      	ldrb	r3, [r3, #0]
 8011730:	009b      	lsls	r3, r3, #2
 8011732:	4413      	add	r3, r2
 8011734:	881b      	ldrh	r3, [r3, #0]
 8011736:	b29b      	uxth	r3, r3
 8011738:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801173c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011740:	827b      	strh	r3, [r7, #18]
 8011742:	8a7b      	ldrh	r3, [r7, #18]
 8011744:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011748:	827b      	strh	r3, [r7, #18]
 801174a:	8a7b      	ldrh	r3, [r7, #18]
 801174c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8011750:	827b      	strh	r3, [r7, #18]
 8011752:	687a      	ldr	r2, [r7, #4]
 8011754:	683b      	ldr	r3, [r7, #0]
 8011756:	781b      	ldrb	r3, [r3, #0]
 8011758:	009b      	lsls	r3, r3, #2
 801175a:	441a      	add	r2, r3
 801175c:	8a7b      	ldrh	r3, [r7, #18]
 801175e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011762:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011766:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801176a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801176e:	b29b      	uxth	r3, r3
 8011770:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011772:	2300      	movs	r3, #0
}
 8011774:	4618      	mov	r0, r3
 8011776:	371c      	adds	r7, #28
 8011778:	46bd      	mov	sp, r7
 801177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177e:	4770      	bx	lr

08011780 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8011780:	b480      	push	{r7}
 8011782:	b083      	sub	sp, #12
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
 8011788:	460b      	mov	r3, r1
 801178a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 801178c:	78fb      	ldrb	r3, [r7, #3]
 801178e:	2b00      	cmp	r3, #0
 8011790:	d103      	bne.n	801179a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	2280      	movs	r2, #128	@ 0x80
 8011796:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 801179a:	2300      	movs	r3, #0
}
 801179c:	4618      	mov	r0, r3
 801179e:	370c      	adds	r7, #12
 80117a0:	46bd      	mov	sp, r7
 80117a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a6:	4770      	bx	lr

080117a8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80117a8:	b480      	push	{r7}
 80117aa:	b083      	sub	sp, #12
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80117b6:	b29b      	uxth	r3, r3
 80117b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80117bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80117c0:	b29a      	uxth	r2, r3
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80117c8:	2300      	movs	r3, #0
}
 80117ca:	4618      	mov	r0, r3
 80117cc:	370c      	adds	r7, #12
 80117ce:	46bd      	mov	sp, r7
 80117d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d4:	4770      	bx	lr

080117d6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80117d6:	b480      	push	{r7}
 80117d8:	b085      	sub	sp, #20
 80117da:	af00      	add	r7, sp, #0
 80117dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80117e4:	b29b      	uxth	r3, r3
 80117e6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80117e8:	68fb      	ldr	r3, [r7, #12]
}
 80117ea:	4618      	mov	r0, r3
 80117ec:	3714      	adds	r7, #20
 80117ee:	46bd      	mov	sp, r7
 80117f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f4:	4770      	bx	lr

080117f6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80117f6:	b480      	push	{r7}
 80117f8:	b08b      	sub	sp, #44	@ 0x2c
 80117fa:	af00      	add	r7, sp, #0
 80117fc:	60f8      	str	r0, [r7, #12]
 80117fe:	60b9      	str	r1, [r7, #8]
 8011800:	4611      	mov	r1, r2
 8011802:	461a      	mov	r2, r3
 8011804:	460b      	mov	r3, r1
 8011806:	80fb      	strh	r3, [r7, #6]
 8011808:	4613      	mov	r3, r2
 801180a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801180c:	88bb      	ldrh	r3, [r7, #4]
 801180e:	3301      	adds	r3, #1
 8011810:	085b      	lsrs	r3, r3, #1
 8011812:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8011818:	68bb      	ldr	r3, [r7, #8]
 801181a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801181c:	88fa      	ldrh	r2, [r7, #6]
 801181e:	697b      	ldr	r3, [r7, #20]
 8011820:	4413      	add	r3, r2
 8011822:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011826:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8011828:	69bb      	ldr	r3, [r7, #24]
 801182a:	627b      	str	r3, [r7, #36]	@ 0x24
 801182c:	e01c      	b.n	8011868 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 801182e:	69fb      	ldr	r3, [r7, #28]
 8011830:	781b      	ldrb	r3, [r3, #0]
 8011832:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8011834:	69fb      	ldr	r3, [r7, #28]
 8011836:	3301      	adds	r3, #1
 8011838:	781b      	ldrb	r3, [r3, #0]
 801183a:	b21b      	sxth	r3, r3
 801183c:	021b      	lsls	r3, r3, #8
 801183e:	b21a      	sxth	r2, r3
 8011840:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011844:	4313      	orrs	r3, r2
 8011846:	b21b      	sxth	r3, r3
 8011848:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 801184a:	6a3b      	ldr	r3, [r7, #32]
 801184c:	8a7a      	ldrh	r2, [r7, #18]
 801184e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8011850:	6a3b      	ldr	r3, [r7, #32]
 8011852:	3302      	adds	r3, #2
 8011854:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8011856:	69fb      	ldr	r3, [r7, #28]
 8011858:	3301      	adds	r3, #1
 801185a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801185c:	69fb      	ldr	r3, [r7, #28]
 801185e:	3301      	adds	r3, #1
 8011860:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8011862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011864:	3b01      	subs	r3, #1
 8011866:	627b      	str	r3, [r7, #36]	@ 0x24
 8011868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801186a:	2b00      	cmp	r3, #0
 801186c:	d1df      	bne.n	801182e <USB_WritePMA+0x38>
  }
}
 801186e:	bf00      	nop
 8011870:	bf00      	nop
 8011872:	372c      	adds	r7, #44	@ 0x2c
 8011874:	46bd      	mov	sp, r7
 8011876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187a:	4770      	bx	lr

0801187c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801187c:	b480      	push	{r7}
 801187e:	b08b      	sub	sp, #44	@ 0x2c
 8011880:	af00      	add	r7, sp, #0
 8011882:	60f8      	str	r0, [r7, #12]
 8011884:	60b9      	str	r1, [r7, #8]
 8011886:	4611      	mov	r1, r2
 8011888:	461a      	mov	r2, r3
 801188a:	460b      	mov	r3, r1
 801188c:	80fb      	strh	r3, [r7, #6]
 801188e:	4613      	mov	r3, r2
 8011890:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8011892:	88bb      	ldrh	r3, [r7, #4]
 8011894:	085b      	lsrs	r3, r3, #1
 8011896:	b29b      	uxth	r3, r3
 8011898:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801189e:	68bb      	ldr	r3, [r7, #8]
 80118a0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80118a2:	88fa      	ldrh	r2, [r7, #6]
 80118a4:	697b      	ldr	r3, [r7, #20]
 80118a6:	4413      	add	r3, r2
 80118a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80118ac:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80118ae:	69bb      	ldr	r3, [r7, #24]
 80118b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80118b2:	e018      	b.n	80118e6 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80118b4:	6a3b      	ldr	r3, [r7, #32]
 80118b6:	881b      	ldrh	r3, [r3, #0]
 80118b8:	b29b      	uxth	r3, r3
 80118ba:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80118bc:	6a3b      	ldr	r3, [r7, #32]
 80118be:	3302      	adds	r3, #2
 80118c0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80118c2:	693b      	ldr	r3, [r7, #16]
 80118c4:	b2da      	uxtb	r2, r3
 80118c6:	69fb      	ldr	r3, [r7, #28]
 80118c8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80118ca:	69fb      	ldr	r3, [r7, #28]
 80118cc:	3301      	adds	r3, #1
 80118ce:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80118d0:	693b      	ldr	r3, [r7, #16]
 80118d2:	0a1b      	lsrs	r3, r3, #8
 80118d4:	b2da      	uxtb	r2, r3
 80118d6:	69fb      	ldr	r3, [r7, #28]
 80118d8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80118da:	69fb      	ldr	r3, [r7, #28]
 80118dc:	3301      	adds	r3, #1
 80118de:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80118e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118e2:	3b01      	subs	r3, #1
 80118e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80118e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d1e3      	bne.n	80118b4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80118ec:	88bb      	ldrh	r3, [r7, #4]
 80118ee:	f003 0301 	and.w	r3, r3, #1
 80118f2:	b29b      	uxth	r3, r3
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d007      	beq.n	8011908 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80118f8:	6a3b      	ldr	r3, [r7, #32]
 80118fa:	881b      	ldrh	r3, [r3, #0]
 80118fc:	b29b      	uxth	r3, r3
 80118fe:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8011900:	693b      	ldr	r3, [r7, #16]
 8011902:	b2da      	uxtb	r2, r3
 8011904:	69fb      	ldr	r3, [r7, #28]
 8011906:	701a      	strb	r2, [r3, #0]
  }
}
 8011908:	bf00      	nop
 801190a:	372c      	adds	r7, #44	@ 0x2c
 801190c:	46bd      	mov	sp, r7
 801190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011912:	4770      	bx	lr

08011914 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011914:	b580      	push	{r7, lr}
 8011916:	b084      	sub	sp, #16
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
 801191c:	460b      	mov	r3, r1
 801191e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8011920:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8011924:	f006 fe28 	bl	8018578 <USBD_static_malloc>
 8011928:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d109      	bne.n	8011944 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	32b0      	adds	r2, #176	@ 0xb0
 801193a:	2100      	movs	r1, #0
 801193c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8011940:	2302      	movs	r3, #2
 8011942:	e0d4      	b.n	8011aee <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8011944:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8011948:	2100      	movs	r1, #0
 801194a:	68f8      	ldr	r0, [r7, #12]
 801194c:	f008 fcad 	bl	801a2aa <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	32b0      	adds	r2, #176	@ 0xb0
 801195a:	68f9      	ldr	r1, [r7, #12]
 801195c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	32b0      	adds	r2, #176	@ 0xb0
 801196a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	7c1b      	ldrb	r3, [r3, #16]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d138      	bne.n	80119ee <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801197c:	4b5e      	ldr	r3, [pc, #376]	@ (8011af8 <USBD_CDC_Init+0x1e4>)
 801197e:	7819      	ldrb	r1, [r3, #0]
 8011980:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011984:	2202      	movs	r2, #2
 8011986:	6878      	ldr	r0, [r7, #4]
 8011988:	f006 fc9d 	bl	80182c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801198c:	4b5a      	ldr	r3, [pc, #360]	@ (8011af8 <USBD_CDC_Init+0x1e4>)
 801198e:	781b      	ldrb	r3, [r3, #0]
 8011990:	f003 020f 	and.w	r2, r3, #15
 8011994:	6879      	ldr	r1, [r7, #4]
 8011996:	4613      	mov	r3, r2
 8011998:	009b      	lsls	r3, r3, #2
 801199a:	4413      	add	r3, r2
 801199c:	009b      	lsls	r3, r3, #2
 801199e:	440b      	add	r3, r1
 80119a0:	3324      	adds	r3, #36	@ 0x24
 80119a2:	2201      	movs	r2, #1
 80119a4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80119a6:	4b55      	ldr	r3, [pc, #340]	@ (8011afc <USBD_CDC_Init+0x1e8>)
 80119a8:	7819      	ldrb	r1, [r3, #0]
 80119aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80119ae:	2202      	movs	r2, #2
 80119b0:	6878      	ldr	r0, [r7, #4]
 80119b2:	f006 fc88 	bl	80182c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80119b6:	4b51      	ldr	r3, [pc, #324]	@ (8011afc <USBD_CDC_Init+0x1e8>)
 80119b8:	781b      	ldrb	r3, [r3, #0]
 80119ba:	f003 020f 	and.w	r2, r3, #15
 80119be:	6879      	ldr	r1, [r7, #4]
 80119c0:	4613      	mov	r3, r2
 80119c2:	009b      	lsls	r3, r3, #2
 80119c4:	4413      	add	r3, r2
 80119c6:	009b      	lsls	r3, r3, #2
 80119c8:	440b      	add	r3, r1
 80119ca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80119ce:	2201      	movs	r2, #1
 80119d0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80119d2:	4b4b      	ldr	r3, [pc, #300]	@ (8011b00 <USBD_CDC_Init+0x1ec>)
 80119d4:	781b      	ldrb	r3, [r3, #0]
 80119d6:	f003 020f 	and.w	r2, r3, #15
 80119da:	6879      	ldr	r1, [r7, #4]
 80119dc:	4613      	mov	r3, r2
 80119de:	009b      	lsls	r3, r3, #2
 80119e0:	4413      	add	r3, r2
 80119e2:	009b      	lsls	r3, r3, #2
 80119e4:	440b      	add	r3, r1
 80119e6:	3326      	adds	r3, #38	@ 0x26
 80119e8:	2210      	movs	r2, #16
 80119ea:	801a      	strh	r2, [r3, #0]
 80119ec:	e035      	b.n	8011a5a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80119ee:	4b42      	ldr	r3, [pc, #264]	@ (8011af8 <USBD_CDC_Init+0x1e4>)
 80119f0:	7819      	ldrb	r1, [r3, #0]
 80119f2:	2340      	movs	r3, #64	@ 0x40
 80119f4:	2202      	movs	r2, #2
 80119f6:	6878      	ldr	r0, [r7, #4]
 80119f8:	f006 fc65 	bl	80182c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80119fc:	4b3e      	ldr	r3, [pc, #248]	@ (8011af8 <USBD_CDC_Init+0x1e4>)
 80119fe:	781b      	ldrb	r3, [r3, #0]
 8011a00:	f003 020f 	and.w	r2, r3, #15
 8011a04:	6879      	ldr	r1, [r7, #4]
 8011a06:	4613      	mov	r3, r2
 8011a08:	009b      	lsls	r3, r3, #2
 8011a0a:	4413      	add	r3, r2
 8011a0c:	009b      	lsls	r3, r3, #2
 8011a0e:	440b      	add	r3, r1
 8011a10:	3324      	adds	r3, #36	@ 0x24
 8011a12:	2201      	movs	r2, #1
 8011a14:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8011a16:	4b39      	ldr	r3, [pc, #228]	@ (8011afc <USBD_CDC_Init+0x1e8>)
 8011a18:	7819      	ldrb	r1, [r3, #0]
 8011a1a:	2340      	movs	r3, #64	@ 0x40
 8011a1c:	2202      	movs	r2, #2
 8011a1e:	6878      	ldr	r0, [r7, #4]
 8011a20:	f006 fc51 	bl	80182c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8011a24:	4b35      	ldr	r3, [pc, #212]	@ (8011afc <USBD_CDC_Init+0x1e8>)
 8011a26:	781b      	ldrb	r3, [r3, #0]
 8011a28:	f003 020f 	and.w	r2, r3, #15
 8011a2c:	6879      	ldr	r1, [r7, #4]
 8011a2e:	4613      	mov	r3, r2
 8011a30:	009b      	lsls	r3, r3, #2
 8011a32:	4413      	add	r3, r2
 8011a34:	009b      	lsls	r3, r3, #2
 8011a36:	440b      	add	r3, r1
 8011a38:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011a3c:	2201      	movs	r2, #1
 8011a3e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011a40:	4b2f      	ldr	r3, [pc, #188]	@ (8011b00 <USBD_CDC_Init+0x1ec>)
 8011a42:	781b      	ldrb	r3, [r3, #0]
 8011a44:	f003 020f 	and.w	r2, r3, #15
 8011a48:	6879      	ldr	r1, [r7, #4]
 8011a4a:	4613      	mov	r3, r2
 8011a4c:	009b      	lsls	r3, r3, #2
 8011a4e:	4413      	add	r3, r2
 8011a50:	009b      	lsls	r3, r3, #2
 8011a52:	440b      	add	r3, r1
 8011a54:	3326      	adds	r3, #38	@ 0x26
 8011a56:	2210      	movs	r2, #16
 8011a58:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8011a5a:	4b29      	ldr	r3, [pc, #164]	@ (8011b00 <USBD_CDC_Init+0x1ec>)
 8011a5c:	7819      	ldrb	r1, [r3, #0]
 8011a5e:	2308      	movs	r3, #8
 8011a60:	2203      	movs	r2, #3
 8011a62:	6878      	ldr	r0, [r7, #4]
 8011a64:	f006 fc2f 	bl	80182c6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8011a68:	4b25      	ldr	r3, [pc, #148]	@ (8011b00 <USBD_CDC_Init+0x1ec>)
 8011a6a:	781b      	ldrb	r3, [r3, #0]
 8011a6c:	f003 020f 	and.w	r2, r3, #15
 8011a70:	6879      	ldr	r1, [r7, #4]
 8011a72:	4613      	mov	r3, r2
 8011a74:	009b      	lsls	r3, r3, #2
 8011a76:	4413      	add	r3, r2
 8011a78:	009b      	lsls	r3, r3, #2
 8011a7a:	440b      	add	r3, r1
 8011a7c:	3324      	adds	r3, #36	@ 0x24
 8011a7e:	2201      	movs	r2, #1
 8011a80:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	2200      	movs	r2, #0
 8011a86:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011a90:	687a      	ldr	r2, [r7, #4]
 8011a92:	33b0      	adds	r3, #176	@ 0xb0
 8011a94:	009b      	lsls	r3, r3, #2
 8011a96:	4413      	add	r3, r2
 8011a98:	685b      	ldr	r3, [r3, #4]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	2200      	movs	r2, #0
 8011aa2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	2200      	movs	r2, #0
 8011aaa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d101      	bne.n	8011abc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8011ab8:	2302      	movs	r3, #2
 8011aba:	e018      	b.n	8011aee <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	7c1b      	ldrb	r3, [r3, #16]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d10a      	bne.n	8011ada <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8011afc <USBD_CDC_Init+0x1e8>)
 8011ac6:	7819      	ldrb	r1, [r3, #0]
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011ace:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011ad2:	6878      	ldr	r0, [r7, #4]
 8011ad4:	f006 fce6 	bl	80184a4 <USBD_LL_PrepareReceive>
 8011ad8:	e008      	b.n	8011aec <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011ada:	4b08      	ldr	r3, [pc, #32]	@ (8011afc <USBD_CDC_Init+0x1e8>)
 8011adc:	7819      	ldrb	r1, [r3, #0]
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011ae4:	2340      	movs	r3, #64	@ 0x40
 8011ae6:	6878      	ldr	r0, [r7, #4]
 8011ae8:	f006 fcdc 	bl	80184a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011aec:	2300      	movs	r3, #0
}
 8011aee:	4618      	mov	r0, r3
 8011af0:	3710      	adds	r7, #16
 8011af2:	46bd      	mov	sp, r7
 8011af4:	bd80      	pop	{r7, pc}
 8011af6:	bf00      	nop
 8011af8:	200000b7 	.word	0x200000b7
 8011afc:	200000b8 	.word	0x200000b8
 8011b00:	200000b9 	.word	0x200000b9

08011b04 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011b04:	b580      	push	{r7, lr}
 8011b06:	b082      	sub	sp, #8
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	6078      	str	r0, [r7, #4]
 8011b0c:	460b      	mov	r3, r1
 8011b0e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8011b10:	4b3a      	ldr	r3, [pc, #232]	@ (8011bfc <USBD_CDC_DeInit+0xf8>)
 8011b12:	781b      	ldrb	r3, [r3, #0]
 8011b14:	4619      	mov	r1, r3
 8011b16:	6878      	ldr	r0, [r7, #4]
 8011b18:	f006 fbfb 	bl	8018312 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8011b1c:	4b37      	ldr	r3, [pc, #220]	@ (8011bfc <USBD_CDC_DeInit+0xf8>)
 8011b1e:	781b      	ldrb	r3, [r3, #0]
 8011b20:	f003 020f 	and.w	r2, r3, #15
 8011b24:	6879      	ldr	r1, [r7, #4]
 8011b26:	4613      	mov	r3, r2
 8011b28:	009b      	lsls	r3, r3, #2
 8011b2a:	4413      	add	r3, r2
 8011b2c:	009b      	lsls	r3, r3, #2
 8011b2e:	440b      	add	r3, r1
 8011b30:	3324      	adds	r3, #36	@ 0x24
 8011b32:	2200      	movs	r2, #0
 8011b34:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8011b36:	4b32      	ldr	r3, [pc, #200]	@ (8011c00 <USBD_CDC_DeInit+0xfc>)
 8011b38:	781b      	ldrb	r3, [r3, #0]
 8011b3a:	4619      	mov	r1, r3
 8011b3c:	6878      	ldr	r0, [r7, #4]
 8011b3e:	f006 fbe8 	bl	8018312 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8011b42:	4b2f      	ldr	r3, [pc, #188]	@ (8011c00 <USBD_CDC_DeInit+0xfc>)
 8011b44:	781b      	ldrb	r3, [r3, #0]
 8011b46:	f003 020f 	and.w	r2, r3, #15
 8011b4a:	6879      	ldr	r1, [r7, #4]
 8011b4c:	4613      	mov	r3, r2
 8011b4e:	009b      	lsls	r3, r3, #2
 8011b50:	4413      	add	r3, r2
 8011b52:	009b      	lsls	r3, r3, #2
 8011b54:	440b      	add	r3, r1
 8011b56:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8011b5e:	4b29      	ldr	r3, [pc, #164]	@ (8011c04 <USBD_CDC_DeInit+0x100>)
 8011b60:	781b      	ldrb	r3, [r3, #0]
 8011b62:	4619      	mov	r1, r3
 8011b64:	6878      	ldr	r0, [r7, #4]
 8011b66:	f006 fbd4 	bl	8018312 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8011b6a:	4b26      	ldr	r3, [pc, #152]	@ (8011c04 <USBD_CDC_DeInit+0x100>)
 8011b6c:	781b      	ldrb	r3, [r3, #0]
 8011b6e:	f003 020f 	and.w	r2, r3, #15
 8011b72:	6879      	ldr	r1, [r7, #4]
 8011b74:	4613      	mov	r3, r2
 8011b76:	009b      	lsls	r3, r3, #2
 8011b78:	4413      	add	r3, r2
 8011b7a:	009b      	lsls	r3, r3, #2
 8011b7c:	440b      	add	r3, r1
 8011b7e:	3324      	adds	r3, #36	@ 0x24
 8011b80:	2200      	movs	r2, #0
 8011b82:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8011b84:	4b1f      	ldr	r3, [pc, #124]	@ (8011c04 <USBD_CDC_DeInit+0x100>)
 8011b86:	781b      	ldrb	r3, [r3, #0]
 8011b88:	f003 020f 	and.w	r2, r3, #15
 8011b8c:	6879      	ldr	r1, [r7, #4]
 8011b8e:	4613      	mov	r3, r2
 8011b90:	009b      	lsls	r3, r3, #2
 8011b92:	4413      	add	r3, r2
 8011b94:	009b      	lsls	r3, r3, #2
 8011b96:	440b      	add	r3, r1
 8011b98:	3326      	adds	r3, #38	@ 0x26
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	32b0      	adds	r2, #176	@ 0xb0
 8011ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d01f      	beq.n	8011bf0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011bb6:	687a      	ldr	r2, [r7, #4]
 8011bb8:	33b0      	adds	r3, #176	@ 0xb0
 8011bba:	009b      	lsls	r3, r3, #2
 8011bbc:	4413      	add	r3, r2
 8011bbe:	685b      	ldr	r3, [r3, #4]
 8011bc0:	685b      	ldr	r3, [r3, #4]
 8011bc2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	32b0      	adds	r2, #176	@ 0xb0
 8011bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	f006 fcde 	bl	8018594 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	32b0      	adds	r2, #176	@ 0xb0
 8011be2:	2100      	movs	r1, #0
 8011be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	2200      	movs	r2, #0
 8011bec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8011bf0:	2300      	movs	r3, #0
}
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	3708      	adds	r7, #8
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	bd80      	pop	{r7, pc}
 8011bfa:	bf00      	nop
 8011bfc:	200000b7 	.word	0x200000b7
 8011c00:	200000b8 	.word	0x200000b8
 8011c04:	200000b9 	.word	0x200000b9

08011c08 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b086      	sub	sp, #24
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
 8011c10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	32b0      	adds	r2, #176	@ 0xb0
 8011c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c20:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8011c22:	2300      	movs	r3, #0
 8011c24:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8011c26:	2300      	movs	r3, #0
 8011c28:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8011c2e:	693b      	ldr	r3, [r7, #16]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d101      	bne.n	8011c38 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8011c34:	2303      	movs	r3, #3
 8011c36:	e0bf      	b.n	8011db8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011c38:	683b      	ldr	r3, [r7, #0]
 8011c3a:	781b      	ldrb	r3, [r3, #0]
 8011c3c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d050      	beq.n	8011ce6 <USBD_CDC_Setup+0xde>
 8011c44:	2b20      	cmp	r3, #32
 8011c46:	f040 80af 	bne.w	8011da8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8011c4a:	683b      	ldr	r3, [r7, #0]
 8011c4c:	88db      	ldrh	r3, [r3, #6]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d03a      	beq.n	8011cc8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8011c52:	683b      	ldr	r3, [r7, #0]
 8011c54:	781b      	ldrb	r3, [r3, #0]
 8011c56:	b25b      	sxtb	r3, r3
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	da1b      	bge.n	8011c94 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011c62:	687a      	ldr	r2, [r7, #4]
 8011c64:	33b0      	adds	r3, #176	@ 0xb0
 8011c66:	009b      	lsls	r3, r3, #2
 8011c68:	4413      	add	r3, r2
 8011c6a:	685b      	ldr	r3, [r3, #4]
 8011c6c:	689b      	ldr	r3, [r3, #8]
 8011c6e:	683a      	ldr	r2, [r7, #0]
 8011c70:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8011c72:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011c74:	683a      	ldr	r2, [r7, #0]
 8011c76:	88d2      	ldrh	r2, [r2, #6]
 8011c78:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8011c7a:	683b      	ldr	r3, [r7, #0]
 8011c7c:	88db      	ldrh	r3, [r3, #6]
 8011c7e:	2b07      	cmp	r3, #7
 8011c80:	bf28      	it	cs
 8011c82:	2307      	movcs	r3, #7
 8011c84:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8011c86:	693b      	ldr	r3, [r7, #16]
 8011c88:	89fa      	ldrh	r2, [r7, #14]
 8011c8a:	4619      	mov	r1, r3
 8011c8c:	6878      	ldr	r0, [r7, #4]
 8011c8e:	f001 fceb 	bl	8013668 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8011c92:	e090      	b.n	8011db6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8011c94:	683b      	ldr	r3, [r7, #0]
 8011c96:	785a      	ldrb	r2, [r3, #1]
 8011c98:	693b      	ldr	r3, [r7, #16]
 8011c9a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8011c9e:	683b      	ldr	r3, [r7, #0]
 8011ca0:	88db      	ldrh	r3, [r3, #6]
 8011ca2:	2b3f      	cmp	r3, #63	@ 0x3f
 8011ca4:	d803      	bhi.n	8011cae <USBD_CDC_Setup+0xa6>
 8011ca6:	683b      	ldr	r3, [r7, #0]
 8011ca8:	88db      	ldrh	r3, [r3, #6]
 8011caa:	b2da      	uxtb	r2, r3
 8011cac:	e000      	b.n	8011cb0 <USBD_CDC_Setup+0xa8>
 8011cae:	2240      	movs	r2, #64	@ 0x40
 8011cb0:	693b      	ldr	r3, [r7, #16]
 8011cb2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8011cb6:	6939      	ldr	r1, [r7, #16]
 8011cb8:	693b      	ldr	r3, [r7, #16]
 8011cba:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8011cbe:	461a      	mov	r2, r3
 8011cc0:	6878      	ldr	r0, [r7, #4]
 8011cc2:	f001 fcfd 	bl	80136c0 <USBD_CtlPrepareRx>
      break;
 8011cc6:	e076      	b.n	8011db6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011cce:	687a      	ldr	r2, [r7, #4]
 8011cd0:	33b0      	adds	r3, #176	@ 0xb0
 8011cd2:	009b      	lsls	r3, r3, #2
 8011cd4:	4413      	add	r3, r2
 8011cd6:	685b      	ldr	r3, [r3, #4]
 8011cd8:	689b      	ldr	r3, [r3, #8]
 8011cda:	683a      	ldr	r2, [r7, #0]
 8011cdc:	7850      	ldrb	r0, [r2, #1]
 8011cde:	2200      	movs	r2, #0
 8011ce0:	6839      	ldr	r1, [r7, #0]
 8011ce2:	4798      	blx	r3
      break;
 8011ce4:	e067      	b.n	8011db6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011ce6:	683b      	ldr	r3, [r7, #0]
 8011ce8:	785b      	ldrb	r3, [r3, #1]
 8011cea:	2b0b      	cmp	r3, #11
 8011cec:	d851      	bhi.n	8011d92 <USBD_CDC_Setup+0x18a>
 8011cee:	a201      	add	r2, pc, #4	@ (adr r2, 8011cf4 <USBD_CDC_Setup+0xec>)
 8011cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cf4:	08011d25 	.word	0x08011d25
 8011cf8:	08011da1 	.word	0x08011da1
 8011cfc:	08011d93 	.word	0x08011d93
 8011d00:	08011d93 	.word	0x08011d93
 8011d04:	08011d93 	.word	0x08011d93
 8011d08:	08011d93 	.word	0x08011d93
 8011d0c:	08011d93 	.word	0x08011d93
 8011d10:	08011d93 	.word	0x08011d93
 8011d14:	08011d93 	.word	0x08011d93
 8011d18:	08011d93 	.word	0x08011d93
 8011d1c:	08011d4f 	.word	0x08011d4f
 8011d20:	08011d79 	.word	0x08011d79
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011d2a:	b2db      	uxtb	r3, r3
 8011d2c:	2b03      	cmp	r3, #3
 8011d2e:	d107      	bne.n	8011d40 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011d30:	f107 030a 	add.w	r3, r7, #10
 8011d34:	2202      	movs	r2, #2
 8011d36:	4619      	mov	r1, r3
 8011d38:	6878      	ldr	r0, [r7, #4]
 8011d3a:	f001 fc95 	bl	8013668 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011d3e:	e032      	b.n	8011da6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8011d40:	6839      	ldr	r1, [r7, #0]
 8011d42:	6878      	ldr	r0, [r7, #4]
 8011d44:	f001 fc13 	bl	801356e <USBD_CtlError>
            ret = USBD_FAIL;
 8011d48:	2303      	movs	r3, #3
 8011d4a:	75fb      	strb	r3, [r7, #23]
          break;
 8011d4c:	e02b      	b.n	8011da6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011d54:	b2db      	uxtb	r3, r3
 8011d56:	2b03      	cmp	r3, #3
 8011d58:	d107      	bne.n	8011d6a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011d5a:	f107 030d 	add.w	r3, r7, #13
 8011d5e:	2201      	movs	r2, #1
 8011d60:	4619      	mov	r1, r3
 8011d62:	6878      	ldr	r0, [r7, #4]
 8011d64:	f001 fc80 	bl	8013668 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011d68:	e01d      	b.n	8011da6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8011d6a:	6839      	ldr	r1, [r7, #0]
 8011d6c:	6878      	ldr	r0, [r7, #4]
 8011d6e:	f001 fbfe 	bl	801356e <USBD_CtlError>
            ret = USBD_FAIL;
 8011d72:	2303      	movs	r3, #3
 8011d74:	75fb      	strb	r3, [r7, #23]
          break;
 8011d76:	e016      	b.n	8011da6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011d7e:	b2db      	uxtb	r3, r3
 8011d80:	2b03      	cmp	r3, #3
 8011d82:	d00f      	beq.n	8011da4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8011d84:	6839      	ldr	r1, [r7, #0]
 8011d86:	6878      	ldr	r0, [r7, #4]
 8011d88:	f001 fbf1 	bl	801356e <USBD_CtlError>
            ret = USBD_FAIL;
 8011d8c:	2303      	movs	r3, #3
 8011d8e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8011d90:	e008      	b.n	8011da4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8011d92:	6839      	ldr	r1, [r7, #0]
 8011d94:	6878      	ldr	r0, [r7, #4]
 8011d96:	f001 fbea 	bl	801356e <USBD_CtlError>
          ret = USBD_FAIL;
 8011d9a:	2303      	movs	r3, #3
 8011d9c:	75fb      	strb	r3, [r7, #23]
          break;
 8011d9e:	e002      	b.n	8011da6 <USBD_CDC_Setup+0x19e>
          break;
 8011da0:	bf00      	nop
 8011da2:	e008      	b.n	8011db6 <USBD_CDC_Setup+0x1ae>
          break;
 8011da4:	bf00      	nop
      }
      break;
 8011da6:	e006      	b.n	8011db6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8011da8:	6839      	ldr	r1, [r7, #0]
 8011daa:	6878      	ldr	r0, [r7, #4]
 8011dac:	f001 fbdf 	bl	801356e <USBD_CtlError>
      ret = USBD_FAIL;
 8011db0:	2303      	movs	r3, #3
 8011db2:	75fb      	strb	r3, [r7, #23]
      break;
 8011db4:	bf00      	nop
  }

  return (uint8_t)ret;
 8011db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8011db8:	4618      	mov	r0, r3
 8011dba:	3718      	adds	r7, #24
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	bd80      	pop	{r7, pc}

08011dc0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b084      	sub	sp, #16
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
 8011dc8:	460b      	mov	r3, r1
 8011dca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011dd2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	32b0      	adds	r2, #176	@ 0xb0
 8011dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d101      	bne.n	8011dea <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8011de6:	2303      	movs	r3, #3
 8011de8:	e065      	b.n	8011eb6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	32b0      	adds	r2, #176	@ 0xb0
 8011df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011df8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8011dfa:	78fb      	ldrb	r3, [r7, #3]
 8011dfc:	f003 020f 	and.w	r2, r3, #15
 8011e00:	6879      	ldr	r1, [r7, #4]
 8011e02:	4613      	mov	r3, r2
 8011e04:	009b      	lsls	r3, r3, #2
 8011e06:	4413      	add	r3, r2
 8011e08:	009b      	lsls	r3, r3, #2
 8011e0a:	440b      	add	r3, r1
 8011e0c:	3318      	adds	r3, #24
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d02f      	beq.n	8011e74 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8011e14:	78fb      	ldrb	r3, [r7, #3]
 8011e16:	f003 020f 	and.w	r2, r3, #15
 8011e1a:	6879      	ldr	r1, [r7, #4]
 8011e1c:	4613      	mov	r3, r2
 8011e1e:	009b      	lsls	r3, r3, #2
 8011e20:	4413      	add	r3, r2
 8011e22:	009b      	lsls	r3, r3, #2
 8011e24:	440b      	add	r3, r1
 8011e26:	3318      	adds	r3, #24
 8011e28:	681a      	ldr	r2, [r3, #0]
 8011e2a:	78fb      	ldrb	r3, [r7, #3]
 8011e2c:	f003 010f 	and.w	r1, r3, #15
 8011e30:	68f8      	ldr	r0, [r7, #12]
 8011e32:	460b      	mov	r3, r1
 8011e34:	009b      	lsls	r3, r3, #2
 8011e36:	440b      	add	r3, r1
 8011e38:	00db      	lsls	r3, r3, #3
 8011e3a:	4403      	add	r3, r0
 8011e3c:	3320      	adds	r3, #32
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	fbb2 f1f3 	udiv	r1, r2, r3
 8011e44:	fb01 f303 	mul.w	r3, r1, r3
 8011e48:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d112      	bne.n	8011e74 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8011e4e:	78fb      	ldrb	r3, [r7, #3]
 8011e50:	f003 020f 	and.w	r2, r3, #15
 8011e54:	6879      	ldr	r1, [r7, #4]
 8011e56:	4613      	mov	r3, r2
 8011e58:	009b      	lsls	r3, r3, #2
 8011e5a:	4413      	add	r3, r2
 8011e5c:	009b      	lsls	r3, r3, #2
 8011e5e:	440b      	add	r3, r1
 8011e60:	3318      	adds	r3, #24
 8011e62:	2200      	movs	r2, #0
 8011e64:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011e66:	78f9      	ldrb	r1, [r7, #3]
 8011e68:	2300      	movs	r3, #0
 8011e6a:	2200      	movs	r2, #0
 8011e6c:	6878      	ldr	r0, [r7, #4]
 8011e6e:	f006 faf8 	bl	8018462 <USBD_LL_Transmit>
 8011e72:	e01f      	b.n	8011eb4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8011e74:	68bb      	ldr	r3, [r7, #8]
 8011e76:	2200      	movs	r2, #0
 8011e78:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011e82:	687a      	ldr	r2, [r7, #4]
 8011e84:	33b0      	adds	r3, #176	@ 0xb0
 8011e86:	009b      	lsls	r3, r3, #2
 8011e88:	4413      	add	r3, r2
 8011e8a:	685b      	ldr	r3, [r3, #4]
 8011e8c:	691b      	ldr	r3, [r3, #16]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d010      	beq.n	8011eb4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011e98:	687a      	ldr	r2, [r7, #4]
 8011e9a:	33b0      	adds	r3, #176	@ 0xb0
 8011e9c:	009b      	lsls	r3, r3, #2
 8011e9e:	4413      	add	r3, r2
 8011ea0:	685b      	ldr	r3, [r3, #4]
 8011ea2:	691b      	ldr	r3, [r3, #16]
 8011ea4:	68ba      	ldr	r2, [r7, #8]
 8011ea6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8011eaa:	68ba      	ldr	r2, [r7, #8]
 8011eac:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8011eb0:	78fa      	ldrb	r2, [r7, #3]
 8011eb2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8011eb4:	2300      	movs	r3, #0
}
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	3710      	adds	r7, #16
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	bd80      	pop	{r7, pc}

08011ebe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011ebe:	b580      	push	{r7, lr}
 8011ec0:	b084      	sub	sp, #16
 8011ec2:	af00      	add	r7, sp, #0
 8011ec4:	6078      	str	r0, [r7, #4]
 8011ec6:	460b      	mov	r3, r1
 8011ec8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	32b0      	adds	r2, #176	@ 0xb0
 8011ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ed8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	32b0      	adds	r2, #176	@ 0xb0
 8011ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d101      	bne.n	8011ef0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8011eec:	2303      	movs	r3, #3
 8011eee:	e01a      	b.n	8011f26 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011ef0:	78fb      	ldrb	r3, [r7, #3]
 8011ef2:	4619      	mov	r1, r3
 8011ef4:	6878      	ldr	r0, [r7, #4]
 8011ef6:	f006 faf6 	bl	80184e6 <USBD_LL_GetRxDataSize>
 8011efa:	4602      	mov	r2, r0
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011f08:	687a      	ldr	r2, [r7, #4]
 8011f0a:	33b0      	adds	r3, #176	@ 0xb0
 8011f0c:	009b      	lsls	r3, r3, #2
 8011f0e:	4413      	add	r3, r2
 8011f10:	685b      	ldr	r3, [r3, #4]
 8011f12:	68db      	ldr	r3, [r3, #12]
 8011f14:	68fa      	ldr	r2, [r7, #12]
 8011f16:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8011f1a:	68fa      	ldr	r2, [r7, #12]
 8011f1c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8011f20:	4611      	mov	r1, r2
 8011f22:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011f24:	2300      	movs	r3, #0
}
 8011f26:	4618      	mov	r0, r3
 8011f28:	3710      	adds	r7, #16
 8011f2a:	46bd      	mov	sp, r7
 8011f2c:	bd80      	pop	{r7, pc}

08011f2e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011f2e:	b580      	push	{r7, lr}
 8011f30:	b084      	sub	sp, #16
 8011f32:	af00      	add	r7, sp, #0
 8011f34:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	32b0      	adds	r2, #176	@ 0xb0
 8011f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f44:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d101      	bne.n	8011f50 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011f4c:	2303      	movs	r3, #3
 8011f4e:	e024      	b.n	8011f9a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011f56:	687a      	ldr	r2, [r7, #4]
 8011f58:	33b0      	adds	r3, #176	@ 0xb0
 8011f5a:	009b      	lsls	r3, r3, #2
 8011f5c:	4413      	add	r3, r2
 8011f5e:	685b      	ldr	r3, [r3, #4]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d019      	beq.n	8011f98 <USBD_CDC_EP0_RxReady+0x6a>
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8011f6a:	2bff      	cmp	r3, #255	@ 0xff
 8011f6c:	d014      	beq.n	8011f98 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011f74:	687a      	ldr	r2, [r7, #4]
 8011f76:	33b0      	adds	r3, #176	@ 0xb0
 8011f78:	009b      	lsls	r3, r3, #2
 8011f7a:	4413      	add	r3, r2
 8011f7c:	685b      	ldr	r3, [r3, #4]
 8011f7e:	689b      	ldr	r3, [r3, #8]
 8011f80:	68fa      	ldr	r2, [r7, #12]
 8011f82:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8011f86:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8011f88:	68fa      	ldr	r2, [r7, #12]
 8011f8a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8011f8e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	22ff      	movs	r2, #255	@ 0xff
 8011f94:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8011f98:	2300      	movs	r3, #0
}
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	3710      	adds	r7, #16
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	bd80      	pop	{r7, pc}
	...

08011fa4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b086      	sub	sp, #24
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011fac:	2182      	movs	r1, #130	@ 0x82
 8011fae:	4818      	ldr	r0, [pc, #96]	@ (8012010 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011fb0:	f000 fc7d 	bl	80128ae <USBD_GetEpDesc>
 8011fb4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011fb6:	2101      	movs	r1, #1
 8011fb8:	4815      	ldr	r0, [pc, #84]	@ (8012010 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011fba:	f000 fc78 	bl	80128ae <USBD_GetEpDesc>
 8011fbe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011fc0:	2181      	movs	r1, #129	@ 0x81
 8011fc2:	4813      	ldr	r0, [pc, #76]	@ (8012010 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011fc4:	f000 fc73 	bl	80128ae <USBD_GetEpDesc>
 8011fc8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011fca:	697b      	ldr	r3, [r7, #20]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d002      	beq.n	8011fd6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8011fd0:	697b      	ldr	r3, [r7, #20]
 8011fd2:	2210      	movs	r2, #16
 8011fd4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011fd6:	693b      	ldr	r3, [r7, #16]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d006      	beq.n	8011fea <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011fdc:	693b      	ldr	r3, [r7, #16]
 8011fde:	2200      	movs	r2, #0
 8011fe0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011fe4:	711a      	strb	r2, [r3, #4]
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d006      	beq.n	8011ffe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	2200      	movs	r2, #0
 8011ff4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011ff8:	711a      	strb	r2, [r3, #4]
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	2243      	movs	r2, #67	@ 0x43
 8012002:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012004:	4b02      	ldr	r3, [pc, #8]	@ (8012010 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8012006:	4618      	mov	r0, r3
 8012008:	3718      	adds	r7, #24
 801200a:	46bd      	mov	sp, r7
 801200c:	bd80      	pop	{r7, pc}
 801200e:	bf00      	nop
 8012010:	20000074 	.word	0x20000074

08012014 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8012014:	b580      	push	{r7, lr}
 8012016:	b086      	sub	sp, #24
 8012018:	af00      	add	r7, sp, #0
 801201a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801201c:	2182      	movs	r1, #130	@ 0x82
 801201e:	4818      	ldr	r0, [pc, #96]	@ (8012080 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012020:	f000 fc45 	bl	80128ae <USBD_GetEpDesc>
 8012024:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012026:	2101      	movs	r1, #1
 8012028:	4815      	ldr	r0, [pc, #84]	@ (8012080 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801202a:	f000 fc40 	bl	80128ae <USBD_GetEpDesc>
 801202e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012030:	2181      	movs	r1, #129	@ 0x81
 8012032:	4813      	ldr	r0, [pc, #76]	@ (8012080 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012034:	f000 fc3b 	bl	80128ae <USBD_GetEpDesc>
 8012038:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801203a:	697b      	ldr	r3, [r7, #20]
 801203c:	2b00      	cmp	r3, #0
 801203e:	d002      	beq.n	8012046 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8012040:	697b      	ldr	r3, [r7, #20]
 8012042:	2210      	movs	r2, #16
 8012044:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012046:	693b      	ldr	r3, [r7, #16]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d006      	beq.n	801205a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801204c:	693b      	ldr	r3, [r7, #16]
 801204e:	2200      	movs	r2, #0
 8012050:	711a      	strb	r2, [r3, #4]
 8012052:	2200      	movs	r2, #0
 8012054:	f042 0202 	orr.w	r2, r2, #2
 8012058:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d006      	beq.n	801206e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	2200      	movs	r2, #0
 8012064:	711a      	strb	r2, [r3, #4]
 8012066:	2200      	movs	r2, #0
 8012068:	f042 0202 	orr.w	r2, r2, #2
 801206c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	2243      	movs	r2, #67	@ 0x43
 8012072:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012074:	4b02      	ldr	r3, [pc, #8]	@ (8012080 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8012076:	4618      	mov	r0, r3
 8012078:	3718      	adds	r7, #24
 801207a:	46bd      	mov	sp, r7
 801207c:	bd80      	pop	{r7, pc}
 801207e:	bf00      	nop
 8012080:	20000074 	.word	0x20000074

08012084 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8012084:	b580      	push	{r7, lr}
 8012086:	b086      	sub	sp, #24
 8012088:	af00      	add	r7, sp, #0
 801208a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801208c:	2182      	movs	r1, #130	@ 0x82
 801208e:	4818      	ldr	r0, [pc, #96]	@ (80120f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012090:	f000 fc0d 	bl	80128ae <USBD_GetEpDesc>
 8012094:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012096:	2101      	movs	r1, #1
 8012098:	4815      	ldr	r0, [pc, #84]	@ (80120f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801209a:	f000 fc08 	bl	80128ae <USBD_GetEpDesc>
 801209e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80120a0:	2181      	movs	r1, #129	@ 0x81
 80120a2:	4813      	ldr	r0, [pc, #76]	@ (80120f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80120a4:	f000 fc03 	bl	80128ae <USBD_GetEpDesc>
 80120a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80120aa:	697b      	ldr	r3, [r7, #20]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d002      	beq.n	80120b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80120b0:	697b      	ldr	r3, [r7, #20]
 80120b2:	2210      	movs	r2, #16
 80120b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80120b6:	693b      	ldr	r3, [r7, #16]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d006      	beq.n	80120ca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80120bc:	693b      	ldr	r3, [r7, #16]
 80120be:	2200      	movs	r2, #0
 80120c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80120c4:	711a      	strb	r2, [r3, #4]
 80120c6:	2200      	movs	r2, #0
 80120c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d006      	beq.n	80120de <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	2200      	movs	r2, #0
 80120d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80120d8:	711a      	strb	r2, [r3, #4]
 80120da:	2200      	movs	r2, #0
 80120dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	2243      	movs	r2, #67	@ 0x43
 80120e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80120e4:	4b02      	ldr	r3, [pc, #8]	@ (80120f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80120e6:	4618      	mov	r0, r3
 80120e8:	3718      	adds	r7, #24
 80120ea:	46bd      	mov	sp, r7
 80120ec:	bd80      	pop	{r7, pc}
 80120ee:	bf00      	nop
 80120f0:	20000074 	.word	0x20000074

080120f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80120f4:	b480      	push	{r7}
 80120f6:	b083      	sub	sp, #12
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	220a      	movs	r2, #10
 8012100:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8012102:	4b03      	ldr	r3, [pc, #12]	@ (8012110 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8012104:	4618      	mov	r0, r3
 8012106:	370c      	adds	r7, #12
 8012108:	46bd      	mov	sp, r7
 801210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210e:	4770      	bx	lr
 8012110:	20000030 	.word	0x20000030

08012114 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8012114:	b480      	push	{r7}
 8012116:	b083      	sub	sp, #12
 8012118:	af00      	add	r7, sp, #0
 801211a:	6078      	str	r0, [r7, #4]
 801211c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801211e:	683b      	ldr	r3, [r7, #0]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d101      	bne.n	8012128 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8012124:	2303      	movs	r3, #3
 8012126:	e009      	b.n	801213c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801212e:	687a      	ldr	r2, [r7, #4]
 8012130:	33b0      	adds	r3, #176	@ 0xb0
 8012132:	009b      	lsls	r3, r3, #2
 8012134:	4413      	add	r3, r2
 8012136:	683a      	ldr	r2, [r7, #0]
 8012138:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801213a:	2300      	movs	r3, #0
}
 801213c:	4618      	mov	r0, r3
 801213e:	370c      	adds	r7, #12
 8012140:	46bd      	mov	sp, r7
 8012142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012146:	4770      	bx	lr

08012148 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8012148:	b480      	push	{r7}
 801214a:	b087      	sub	sp, #28
 801214c:	af00      	add	r7, sp, #0
 801214e:	60f8      	str	r0, [r7, #12]
 8012150:	60b9      	str	r1, [r7, #8]
 8012152:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	32b0      	adds	r2, #176	@ 0xb0
 801215e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012162:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8012164:	697b      	ldr	r3, [r7, #20]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d101      	bne.n	801216e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801216a:	2303      	movs	r3, #3
 801216c:	e008      	b.n	8012180 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801216e:	697b      	ldr	r3, [r7, #20]
 8012170:	68ba      	ldr	r2, [r7, #8]
 8012172:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8012176:	697b      	ldr	r3, [r7, #20]
 8012178:	687a      	ldr	r2, [r7, #4]
 801217a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 801217e:	2300      	movs	r3, #0
}
 8012180:	4618      	mov	r0, r3
 8012182:	371c      	adds	r7, #28
 8012184:	46bd      	mov	sp, r7
 8012186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218a:	4770      	bx	lr

0801218c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801218c:	b480      	push	{r7}
 801218e:	b085      	sub	sp, #20
 8012190:	af00      	add	r7, sp, #0
 8012192:	6078      	str	r0, [r7, #4]
 8012194:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	32b0      	adds	r2, #176	@ 0xb0
 80121a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d101      	bne.n	80121b0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80121ac:	2303      	movs	r3, #3
 80121ae:	e004      	b.n	80121ba <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	683a      	ldr	r2, [r7, #0]
 80121b4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80121b8:	2300      	movs	r3, #0
}
 80121ba:	4618      	mov	r0, r3
 80121bc:	3714      	adds	r7, #20
 80121be:	46bd      	mov	sp, r7
 80121c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c4:	4770      	bx	lr
	...

080121c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b084      	sub	sp, #16
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	32b0      	adds	r2, #176	@ 0xb0
 80121da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121de:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	32b0      	adds	r2, #176	@ 0xb0
 80121ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d101      	bne.n	80121f6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80121f2:	2303      	movs	r3, #3
 80121f4:	e018      	b.n	8012228 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	7c1b      	ldrb	r3, [r3, #16]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d10a      	bne.n	8012214 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80121fe:	4b0c      	ldr	r3, [pc, #48]	@ (8012230 <USBD_CDC_ReceivePacket+0x68>)
 8012200:	7819      	ldrb	r1, [r3, #0]
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012208:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801220c:	6878      	ldr	r0, [r7, #4]
 801220e:	f006 f949 	bl	80184a4 <USBD_LL_PrepareReceive>
 8012212:	e008      	b.n	8012226 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012214:	4b06      	ldr	r3, [pc, #24]	@ (8012230 <USBD_CDC_ReceivePacket+0x68>)
 8012216:	7819      	ldrb	r1, [r3, #0]
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801221e:	2340      	movs	r3, #64	@ 0x40
 8012220:	6878      	ldr	r0, [r7, #4]
 8012222:	f006 f93f 	bl	80184a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012226:	2300      	movs	r3, #0
}
 8012228:	4618      	mov	r0, r3
 801222a:	3710      	adds	r7, #16
 801222c:	46bd      	mov	sp, r7
 801222e:	bd80      	pop	{r7, pc}
 8012230:	200000b8 	.word	0x200000b8

08012234 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8012234:	b580      	push	{r7, lr}
 8012236:	b086      	sub	sp, #24
 8012238:	af00      	add	r7, sp, #0
 801223a:	60f8      	str	r0, [r7, #12]
 801223c:	60b9      	str	r1, [r7, #8]
 801223e:	4613      	mov	r3, r2
 8012240:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d101      	bne.n	801224c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8012248:	2303      	movs	r3, #3
 801224a:	e01f      	b.n	801228c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	2200      	movs	r2, #0
 8012250:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	2200      	movs	r2, #0
 8012258:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	2200      	movs	r2, #0
 8012260:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8012264:	68bb      	ldr	r3, [r7, #8]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d003      	beq.n	8012272 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	68ba      	ldr	r2, [r7, #8]
 801226e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	2201      	movs	r2, #1
 8012276:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	79fa      	ldrb	r2, [r7, #7]
 801227e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8012280:	68f8      	ldr	r0, [r7, #12]
 8012282:	f005 ffa3 	bl	80181cc <USBD_LL_Init>
 8012286:	4603      	mov	r3, r0
 8012288:	75fb      	strb	r3, [r7, #23]

  return ret;
 801228a:	7dfb      	ldrb	r3, [r7, #23]
}
 801228c:	4618      	mov	r0, r3
 801228e:	3718      	adds	r7, #24
 8012290:	46bd      	mov	sp, r7
 8012292:	bd80      	pop	{r7, pc}

08012294 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8012294:	b580      	push	{r7, lr}
 8012296:	b084      	sub	sp, #16
 8012298:	af00      	add	r7, sp, #0
 801229a:	6078      	str	r0, [r7, #4]
 801229c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801229e:	2300      	movs	r3, #0
 80122a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80122a2:	683b      	ldr	r3, [r7, #0]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d101      	bne.n	80122ac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80122a8:	2303      	movs	r3, #3
 80122aa:	e025      	b.n	80122f8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	683a      	ldr	r2, [r7, #0]
 80122b0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	32ae      	adds	r2, #174	@ 0xae
 80122be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80122c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d00f      	beq.n	80122e8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	32ae      	adds	r2, #174	@ 0xae
 80122d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80122d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122d8:	f107 020e 	add.w	r2, r7, #14
 80122dc:	4610      	mov	r0, r2
 80122de:	4798      	blx	r3
 80122e0:	4602      	mov	r2, r0
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80122ee:	1c5a      	adds	r2, r3, #1
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80122f6:	2300      	movs	r3, #0
}
 80122f8:	4618      	mov	r0, r3
 80122fa:	3710      	adds	r7, #16
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}

08012300 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8012300:	b580      	push	{r7, lr}
 8012302:	b082      	sub	sp, #8
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8012308:	6878      	ldr	r0, [r7, #4]
 801230a:	f005 ffc1 	bl	8018290 <USBD_LL_Start>
 801230e:	4603      	mov	r3, r0
}
 8012310:	4618      	mov	r0, r3
 8012312:	3708      	adds	r7, #8
 8012314:	46bd      	mov	sp, r7
 8012316:	bd80      	pop	{r7, pc}

08012318 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8012318:	b480      	push	{r7}
 801231a:	b083      	sub	sp, #12
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012320:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8012322:	4618      	mov	r0, r3
 8012324:	370c      	adds	r7, #12
 8012326:	46bd      	mov	sp, r7
 8012328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801232c:	4770      	bx	lr

0801232e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801232e:	b580      	push	{r7, lr}
 8012330:	b084      	sub	sp, #16
 8012332:	af00      	add	r7, sp, #0
 8012334:	6078      	str	r0, [r7, #4]
 8012336:	460b      	mov	r3, r1
 8012338:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801233a:	2300      	movs	r3, #0
 801233c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012344:	2b00      	cmp	r3, #0
 8012346:	d009      	beq.n	801235c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	78fa      	ldrb	r2, [r7, #3]
 8012352:	4611      	mov	r1, r2
 8012354:	6878      	ldr	r0, [r7, #4]
 8012356:	4798      	blx	r3
 8012358:	4603      	mov	r3, r0
 801235a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801235c:	7bfb      	ldrb	r3, [r7, #15]
}
 801235e:	4618      	mov	r0, r3
 8012360:	3710      	adds	r7, #16
 8012362:	46bd      	mov	sp, r7
 8012364:	bd80      	pop	{r7, pc}

08012366 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012366:	b580      	push	{r7, lr}
 8012368:	b084      	sub	sp, #16
 801236a:	af00      	add	r7, sp, #0
 801236c:	6078      	str	r0, [r7, #4]
 801236e:	460b      	mov	r3, r1
 8012370:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8012372:	2300      	movs	r3, #0
 8012374:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801237c:	685b      	ldr	r3, [r3, #4]
 801237e:	78fa      	ldrb	r2, [r7, #3]
 8012380:	4611      	mov	r1, r2
 8012382:	6878      	ldr	r0, [r7, #4]
 8012384:	4798      	blx	r3
 8012386:	4603      	mov	r3, r0
 8012388:	2b00      	cmp	r3, #0
 801238a:	d001      	beq.n	8012390 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801238c:	2303      	movs	r3, #3
 801238e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012390:	7bfb      	ldrb	r3, [r7, #15]
}
 8012392:	4618      	mov	r0, r3
 8012394:	3710      	adds	r7, #16
 8012396:	46bd      	mov	sp, r7
 8012398:	bd80      	pop	{r7, pc}

0801239a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801239a:	b580      	push	{r7, lr}
 801239c:	b084      	sub	sp, #16
 801239e:	af00      	add	r7, sp, #0
 80123a0:	6078      	str	r0, [r7, #4]
 80123a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80123aa:	6839      	ldr	r1, [r7, #0]
 80123ac:	4618      	mov	r0, r3
 80123ae:	f001 f8a4 	bl	80134fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	2201      	movs	r2, #1
 80123b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80123c0:	461a      	mov	r2, r3
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80123ce:	f003 031f 	and.w	r3, r3, #31
 80123d2:	2b02      	cmp	r3, #2
 80123d4:	d01a      	beq.n	801240c <USBD_LL_SetupStage+0x72>
 80123d6:	2b02      	cmp	r3, #2
 80123d8:	d822      	bhi.n	8012420 <USBD_LL_SetupStage+0x86>
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d002      	beq.n	80123e4 <USBD_LL_SetupStage+0x4a>
 80123de:	2b01      	cmp	r3, #1
 80123e0:	d00a      	beq.n	80123f8 <USBD_LL_SetupStage+0x5e>
 80123e2:	e01d      	b.n	8012420 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80123ea:	4619      	mov	r1, r3
 80123ec:	6878      	ldr	r0, [r7, #4]
 80123ee:	f000 fad1 	bl	8012994 <USBD_StdDevReq>
 80123f2:	4603      	mov	r3, r0
 80123f4:	73fb      	strb	r3, [r7, #15]
      break;
 80123f6:	e020      	b.n	801243a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80123fe:	4619      	mov	r1, r3
 8012400:	6878      	ldr	r0, [r7, #4]
 8012402:	f000 fb39 	bl	8012a78 <USBD_StdItfReq>
 8012406:	4603      	mov	r3, r0
 8012408:	73fb      	strb	r3, [r7, #15]
      break;
 801240a:	e016      	b.n	801243a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012412:	4619      	mov	r1, r3
 8012414:	6878      	ldr	r0, [r7, #4]
 8012416:	f000 fb9b 	bl	8012b50 <USBD_StdEPReq>
 801241a:	4603      	mov	r3, r0
 801241c:	73fb      	strb	r3, [r7, #15]
      break;
 801241e:	e00c      	b.n	801243a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012426:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801242a:	b2db      	uxtb	r3, r3
 801242c:	4619      	mov	r1, r3
 801242e:	6878      	ldr	r0, [r7, #4]
 8012430:	f005 ff8e 	bl	8018350 <USBD_LL_StallEP>
 8012434:	4603      	mov	r3, r0
 8012436:	73fb      	strb	r3, [r7, #15]
      break;
 8012438:	bf00      	nop
  }

  return ret;
 801243a:	7bfb      	ldrb	r3, [r7, #15]
}
 801243c:	4618      	mov	r0, r3
 801243e:	3710      	adds	r7, #16
 8012440:	46bd      	mov	sp, r7
 8012442:	bd80      	pop	{r7, pc}

08012444 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012444:	b580      	push	{r7, lr}
 8012446:	b086      	sub	sp, #24
 8012448:	af00      	add	r7, sp, #0
 801244a:	60f8      	str	r0, [r7, #12]
 801244c:	460b      	mov	r3, r1
 801244e:	607a      	str	r2, [r7, #4]
 8012450:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8012452:	2300      	movs	r3, #0
 8012454:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8012456:	7afb      	ldrb	r3, [r7, #11]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d16e      	bne.n	801253a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8012462:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801246a:	2b03      	cmp	r3, #3
 801246c:	f040 8098 	bne.w	80125a0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8012470:	693b      	ldr	r3, [r7, #16]
 8012472:	689a      	ldr	r2, [r3, #8]
 8012474:	693b      	ldr	r3, [r7, #16]
 8012476:	68db      	ldr	r3, [r3, #12]
 8012478:	429a      	cmp	r2, r3
 801247a:	d913      	bls.n	80124a4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801247c:	693b      	ldr	r3, [r7, #16]
 801247e:	689a      	ldr	r2, [r3, #8]
 8012480:	693b      	ldr	r3, [r7, #16]
 8012482:	68db      	ldr	r3, [r3, #12]
 8012484:	1ad2      	subs	r2, r2, r3
 8012486:	693b      	ldr	r3, [r7, #16]
 8012488:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801248a:	693b      	ldr	r3, [r7, #16]
 801248c:	68da      	ldr	r2, [r3, #12]
 801248e:	693b      	ldr	r3, [r7, #16]
 8012490:	689b      	ldr	r3, [r3, #8]
 8012492:	4293      	cmp	r3, r2
 8012494:	bf28      	it	cs
 8012496:	4613      	movcs	r3, r2
 8012498:	461a      	mov	r2, r3
 801249a:	6879      	ldr	r1, [r7, #4]
 801249c:	68f8      	ldr	r0, [r7, #12]
 801249e:	f001 f92c 	bl	80136fa <USBD_CtlContinueRx>
 80124a2:	e07d      	b.n	80125a0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80124aa:	f003 031f 	and.w	r3, r3, #31
 80124ae:	2b02      	cmp	r3, #2
 80124b0:	d014      	beq.n	80124dc <USBD_LL_DataOutStage+0x98>
 80124b2:	2b02      	cmp	r3, #2
 80124b4:	d81d      	bhi.n	80124f2 <USBD_LL_DataOutStage+0xae>
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d002      	beq.n	80124c0 <USBD_LL_DataOutStage+0x7c>
 80124ba:	2b01      	cmp	r3, #1
 80124bc:	d003      	beq.n	80124c6 <USBD_LL_DataOutStage+0x82>
 80124be:	e018      	b.n	80124f2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80124c0:	2300      	movs	r3, #0
 80124c2:	75bb      	strb	r3, [r7, #22]
            break;
 80124c4:	e018      	b.n	80124f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80124cc:	b2db      	uxtb	r3, r3
 80124ce:	4619      	mov	r1, r3
 80124d0:	68f8      	ldr	r0, [r7, #12]
 80124d2:	f000 f9d2 	bl	801287a <USBD_CoreFindIF>
 80124d6:	4603      	mov	r3, r0
 80124d8:	75bb      	strb	r3, [r7, #22]
            break;
 80124da:	e00d      	b.n	80124f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80124e2:	b2db      	uxtb	r3, r3
 80124e4:	4619      	mov	r1, r3
 80124e6:	68f8      	ldr	r0, [r7, #12]
 80124e8:	f000 f9d4 	bl	8012894 <USBD_CoreFindEP>
 80124ec:	4603      	mov	r3, r0
 80124ee:	75bb      	strb	r3, [r7, #22]
            break;
 80124f0:	e002      	b.n	80124f8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80124f2:	2300      	movs	r3, #0
 80124f4:	75bb      	strb	r3, [r7, #22]
            break;
 80124f6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80124f8:	7dbb      	ldrb	r3, [r7, #22]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d119      	bne.n	8012532 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012504:	b2db      	uxtb	r3, r3
 8012506:	2b03      	cmp	r3, #3
 8012508:	d113      	bne.n	8012532 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801250a:	7dba      	ldrb	r2, [r7, #22]
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	32ae      	adds	r2, #174	@ 0xae
 8012510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012514:	691b      	ldr	r3, [r3, #16]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d00b      	beq.n	8012532 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801251a:	7dba      	ldrb	r2, [r7, #22]
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8012522:	7dba      	ldrb	r2, [r7, #22]
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	32ae      	adds	r2, #174	@ 0xae
 8012528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801252c:	691b      	ldr	r3, [r3, #16]
 801252e:	68f8      	ldr	r0, [r7, #12]
 8012530:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8012532:	68f8      	ldr	r0, [r7, #12]
 8012534:	f001 f8f2 	bl	801371c <USBD_CtlSendStatus>
 8012538:	e032      	b.n	80125a0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801253a:	7afb      	ldrb	r3, [r7, #11]
 801253c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012540:	b2db      	uxtb	r3, r3
 8012542:	4619      	mov	r1, r3
 8012544:	68f8      	ldr	r0, [r7, #12]
 8012546:	f000 f9a5 	bl	8012894 <USBD_CoreFindEP>
 801254a:	4603      	mov	r3, r0
 801254c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801254e:	7dbb      	ldrb	r3, [r7, #22]
 8012550:	2bff      	cmp	r3, #255	@ 0xff
 8012552:	d025      	beq.n	80125a0 <USBD_LL_DataOutStage+0x15c>
 8012554:	7dbb      	ldrb	r3, [r7, #22]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d122      	bne.n	80125a0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012560:	b2db      	uxtb	r3, r3
 8012562:	2b03      	cmp	r3, #3
 8012564:	d117      	bne.n	8012596 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8012566:	7dba      	ldrb	r2, [r7, #22]
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	32ae      	adds	r2, #174	@ 0xae
 801256c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012570:	699b      	ldr	r3, [r3, #24]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d00f      	beq.n	8012596 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8012576:	7dba      	ldrb	r2, [r7, #22]
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801257e:	7dba      	ldrb	r2, [r7, #22]
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	32ae      	adds	r2, #174	@ 0xae
 8012584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012588:	699b      	ldr	r3, [r3, #24]
 801258a:	7afa      	ldrb	r2, [r7, #11]
 801258c:	4611      	mov	r1, r2
 801258e:	68f8      	ldr	r0, [r7, #12]
 8012590:	4798      	blx	r3
 8012592:	4603      	mov	r3, r0
 8012594:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8012596:	7dfb      	ldrb	r3, [r7, #23]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d001      	beq.n	80125a0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801259c:	7dfb      	ldrb	r3, [r7, #23]
 801259e:	e000      	b.n	80125a2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80125a0:	2300      	movs	r3, #0
}
 80125a2:	4618      	mov	r0, r3
 80125a4:	3718      	adds	r7, #24
 80125a6:	46bd      	mov	sp, r7
 80125a8:	bd80      	pop	{r7, pc}

080125aa <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80125aa:	b580      	push	{r7, lr}
 80125ac:	b086      	sub	sp, #24
 80125ae:	af00      	add	r7, sp, #0
 80125b0:	60f8      	str	r0, [r7, #12]
 80125b2:	460b      	mov	r3, r1
 80125b4:	607a      	str	r2, [r7, #4]
 80125b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80125b8:	7afb      	ldrb	r3, [r7, #11]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d16f      	bne.n	801269e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	3314      	adds	r3, #20
 80125c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80125ca:	2b02      	cmp	r3, #2
 80125cc:	d15a      	bne.n	8012684 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80125ce:	693b      	ldr	r3, [r7, #16]
 80125d0:	689a      	ldr	r2, [r3, #8]
 80125d2:	693b      	ldr	r3, [r7, #16]
 80125d4:	68db      	ldr	r3, [r3, #12]
 80125d6:	429a      	cmp	r2, r3
 80125d8:	d914      	bls.n	8012604 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80125da:	693b      	ldr	r3, [r7, #16]
 80125dc:	689a      	ldr	r2, [r3, #8]
 80125de:	693b      	ldr	r3, [r7, #16]
 80125e0:	68db      	ldr	r3, [r3, #12]
 80125e2:	1ad2      	subs	r2, r2, r3
 80125e4:	693b      	ldr	r3, [r7, #16]
 80125e6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80125e8:	693b      	ldr	r3, [r7, #16]
 80125ea:	689b      	ldr	r3, [r3, #8]
 80125ec:	461a      	mov	r2, r3
 80125ee:	6879      	ldr	r1, [r7, #4]
 80125f0:	68f8      	ldr	r0, [r7, #12]
 80125f2:	f001 f854 	bl	801369e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80125f6:	2300      	movs	r3, #0
 80125f8:	2200      	movs	r2, #0
 80125fa:	2100      	movs	r1, #0
 80125fc:	68f8      	ldr	r0, [r7, #12]
 80125fe:	f005 ff51 	bl	80184a4 <USBD_LL_PrepareReceive>
 8012602:	e03f      	b.n	8012684 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8012604:	693b      	ldr	r3, [r7, #16]
 8012606:	68da      	ldr	r2, [r3, #12]
 8012608:	693b      	ldr	r3, [r7, #16]
 801260a:	689b      	ldr	r3, [r3, #8]
 801260c:	429a      	cmp	r2, r3
 801260e:	d11c      	bne.n	801264a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8012610:	693b      	ldr	r3, [r7, #16]
 8012612:	685a      	ldr	r2, [r3, #4]
 8012614:	693b      	ldr	r3, [r7, #16]
 8012616:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8012618:	429a      	cmp	r2, r3
 801261a:	d316      	bcc.n	801264a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801261c:	693b      	ldr	r3, [r7, #16]
 801261e:	685a      	ldr	r2, [r3, #4]
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8012626:	429a      	cmp	r2, r3
 8012628:	d20f      	bcs.n	801264a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801262a:	2200      	movs	r2, #0
 801262c:	2100      	movs	r1, #0
 801262e:	68f8      	ldr	r0, [r7, #12]
 8012630:	f001 f835 	bl	801369e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	2200      	movs	r2, #0
 8012638:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801263c:	2300      	movs	r3, #0
 801263e:	2200      	movs	r2, #0
 8012640:	2100      	movs	r1, #0
 8012642:	68f8      	ldr	r0, [r7, #12]
 8012644:	f005 ff2e 	bl	80184a4 <USBD_LL_PrepareReceive>
 8012648:	e01c      	b.n	8012684 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012650:	b2db      	uxtb	r3, r3
 8012652:	2b03      	cmp	r3, #3
 8012654:	d10f      	bne.n	8012676 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801265c:	68db      	ldr	r3, [r3, #12]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d009      	beq.n	8012676 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	2200      	movs	r2, #0
 8012666:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012670:	68db      	ldr	r3, [r3, #12]
 8012672:	68f8      	ldr	r0, [r7, #12]
 8012674:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8012676:	2180      	movs	r1, #128	@ 0x80
 8012678:	68f8      	ldr	r0, [r7, #12]
 801267a:	f005 fe69 	bl	8018350 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801267e:	68f8      	ldr	r0, [r7, #12]
 8012680:	f001 f85f 	bl	8013742 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801268a:	2b00      	cmp	r3, #0
 801268c:	d03a      	beq.n	8012704 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801268e:	68f8      	ldr	r0, [r7, #12]
 8012690:	f7ff fe42 	bl	8012318 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	2200      	movs	r2, #0
 8012698:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 801269c:	e032      	b.n	8012704 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801269e:	7afb      	ldrb	r3, [r7, #11]
 80126a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80126a4:	b2db      	uxtb	r3, r3
 80126a6:	4619      	mov	r1, r3
 80126a8:	68f8      	ldr	r0, [r7, #12]
 80126aa:	f000 f8f3 	bl	8012894 <USBD_CoreFindEP>
 80126ae:	4603      	mov	r3, r0
 80126b0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80126b2:	7dfb      	ldrb	r3, [r7, #23]
 80126b4:	2bff      	cmp	r3, #255	@ 0xff
 80126b6:	d025      	beq.n	8012704 <USBD_LL_DataInStage+0x15a>
 80126b8:	7dfb      	ldrb	r3, [r7, #23]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d122      	bne.n	8012704 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80126c4:	b2db      	uxtb	r3, r3
 80126c6:	2b03      	cmp	r3, #3
 80126c8:	d11c      	bne.n	8012704 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80126ca:	7dfa      	ldrb	r2, [r7, #23]
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	32ae      	adds	r2, #174	@ 0xae
 80126d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80126d4:	695b      	ldr	r3, [r3, #20]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d014      	beq.n	8012704 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80126da:	7dfa      	ldrb	r2, [r7, #23]
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80126e2:	7dfa      	ldrb	r2, [r7, #23]
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	32ae      	adds	r2, #174	@ 0xae
 80126e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80126ec:	695b      	ldr	r3, [r3, #20]
 80126ee:	7afa      	ldrb	r2, [r7, #11]
 80126f0:	4611      	mov	r1, r2
 80126f2:	68f8      	ldr	r0, [r7, #12]
 80126f4:	4798      	blx	r3
 80126f6:	4603      	mov	r3, r0
 80126f8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80126fa:	7dbb      	ldrb	r3, [r7, #22]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d001      	beq.n	8012704 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8012700:	7dbb      	ldrb	r3, [r7, #22]
 8012702:	e000      	b.n	8012706 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8012704:	2300      	movs	r3, #0
}
 8012706:	4618      	mov	r0, r3
 8012708:	3718      	adds	r7, #24
 801270a:	46bd      	mov	sp, r7
 801270c:	bd80      	pop	{r7, pc}

0801270e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801270e:	b580      	push	{r7, lr}
 8012710:	b084      	sub	sp, #16
 8012712:	af00      	add	r7, sp, #0
 8012714:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8012716:	2300      	movs	r3, #0
 8012718:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	2201      	movs	r2, #1
 801271e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	2200      	movs	r2, #0
 8012726:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	2200      	movs	r2, #0
 801272e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	2200      	movs	r2, #0
 8012734:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	2200      	movs	r2, #0
 801273c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012746:	2b00      	cmp	r3, #0
 8012748:	d014      	beq.n	8012774 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012750:	685b      	ldr	r3, [r3, #4]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d00e      	beq.n	8012774 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801275c:	685b      	ldr	r3, [r3, #4]
 801275e:	687a      	ldr	r2, [r7, #4]
 8012760:	6852      	ldr	r2, [r2, #4]
 8012762:	b2d2      	uxtb	r2, r2
 8012764:	4611      	mov	r1, r2
 8012766:	6878      	ldr	r0, [r7, #4]
 8012768:	4798      	blx	r3
 801276a:	4603      	mov	r3, r0
 801276c:	2b00      	cmp	r3, #0
 801276e:	d001      	beq.n	8012774 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8012770:	2303      	movs	r3, #3
 8012772:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012774:	2340      	movs	r3, #64	@ 0x40
 8012776:	2200      	movs	r2, #0
 8012778:	2100      	movs	r1, #0
 801277a:	6878      	ldr	r0, [r7, #4]
 801277c:	f005 fda3 	bl	80182c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	2201      	movs	r2, #1
 8012784:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	2240      	movs	r2, #64	@ 0x40
 801278c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012790:	2340      	movs	r3, #64	@ 0x40
 8012792:	2200      	movs	r2, #0
 8012794:	2180      	movs	r1, #128	@ 0x80
 8012796:	6878      	ldr	r0, [r7, #4]
 8012798:	f005 fd95 	bl	80182c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	2201      	movs	r2, #1
 80127a0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	2240      	movs	r2, #64	@ 0x40
 80127a6:	621a      	str	r2, [r3, #32]

  return ret;
 80127a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80127aa:	4618      	mov	r0, r3
 80127ac:	3710      	adds	r7, #16
 80127ae:	46bd      	mov	sp, r7
 80127b0:	bd80      	pop	{r7, pc}

080127b2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80127b2:	b480      	push	{r7}
 80127b4:	b083      	sub	sp, #12
 80127b6:	af00      	add	r7, sp, #0
 80127b8:	6078      	str	r0, [r7, #4]
 80127ba:	460b      	mov	r3, r1
 80127bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	78fa      	ldrb	r2, [r7, #3]
 80127c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80127c4:	2300      	movs	r3, #0
}
 80127c6:	4618      	mov	r0, r3
 80127c8:	370c      	adds	r7, #12
 80127ca:	46bd      	mov	sp, r7
 80127cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d0:	4770      	bx	lr

080127d2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80127d2:	b480      	push	{r7}
 80127d4:	b083      	sub	sp, #12
 80127d6:	af00      	add	r7, sp, #0
 80127d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80127e0:	b2db      	uxtb	r3, r3
 80127e2:	2b04      	cmp	r3, #4
 80127e4:	d006      	beq.n	80127f4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80127ec:	b2da      	uxtb	r2, r3
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	2204      	movs	r2, #4
 80127f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80127fc:	2300      	movs	r3, #0
}
 80127fe:	4618      	mov	r0, r3
 8012800:	370c      	adds	r7, #12
 8012802:	46bd      	mov	sp, r7
 8012804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012808:	4770      	bx	lr

0801280a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801280a:	b480      	push	{r7}
 801280c:	b083      	sub	sp, #12
 801280e:	af00      	add	r7, sp, #0
 8012810:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012818:	b2db      	uxtb	r3, r3
 801281a:	2b04      	cmp	r3, #4
 801281c:	d106      	bne.n	801282c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8012824:	b2da      	uxtb	r2, r3
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 801282c:	2300      	movs	r3, #0
}
 801282e:	4618      	mov	r0, r3
 8012830:	370c      	adds	r7, #12
 8012832:	46bd      	mov	sp, r7
 8012834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012838:	4770      	bx	lr

0801283a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801283a:	b580      	push	{r7, lr}
 801283c:	b082      	sub	sp, #8
 801283e:	af00      	add	r7, sp, #0
 8012840:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012848:	b2db      	uxtb	r3, r3
 801284a:	2b03      	cmp	r3, #3
 801284c:	d110      	bne.n	8012870 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012854:	2b00      	cmp	r3, #0
 8012856:	d00b      	beq.n	8012870 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801285e:	69db      	ldr	r3, [r3, #28]
 8012860:	2b00      	cmp	r3, #0
 8012862:	d005      	beq.n	8012870 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801286a:	69db      	ldr	r3, [r3, #28]
 801286c:	6878      	ldr	r0, [r7, #4]
 801286e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8012870:	2300      	movs	r3, #0
}
 8012872:	4618      	mov	r0, r3
 8012874:	3708      	adds	r7, #8
 8012876:	46bd      	mov	sp, r7
 8012878:	bd80      	pop	{r7, pc}

0801287a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801287a:	b480      	push	{r7}
 801287c:	b083      	sub	sp, #12
 801287e:	af00      	add	r7, sp, #0
 8012880:	6078      	str	r0, [r7, #4]
 8012882:	460b      	mov	r3, r1
 8012884:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8012886:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8012888:	4618      	mov	r0, r3
 801288a:	370c      	adds	r7, #12
 801288c:	46bd      	mov	sp, r7
 801288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012892:	4770      	bx	lr

08012894 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012894:	b480      	push	{r7}
 8012896:	b083      	sub	sp, #12
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
 801289c:	460b      	mov	r3, r1
 801289e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80128a0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80128a2:	4618      	mov	r0, r3
 80128a4:	370c      	adds	r7, #12
 80128a6:	46bd      	mov	sp, r7
 80128a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ac:	4770      	bx	lr

080128ae <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80128ae:	b580      	push	{r7, lr}
 80128b0:	b086      	sub	sp, #24
 80128b2:	af00      	add	r7, sp, #0
 80128b4:	6078      	str	r0, [r7, #4]
 80128b6:	460b      	mov	r3, r1
 80128b8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80128c2:	2300      	movs	r3, #0
 80128c4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	885b      	ldrh	r3, [r3, #2]
 80128ca:	b29b      	uxth	r3, r3
 80128cc:	68fa      	ldr	r2, [r7, #12]
 80128ce:	7812      	ldrb	r2, [r2, #0]
 80128d0:	4293      	cmp	r3, r2
 80128d2:	d91f      	bls.n	8012914 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	781b      	ldrb	r3, [r3, #0]
 80128d8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80128da:	e013      	b.n	8012904 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80128dc:	f107 030a 	add.w	r3, r7, #10
 80128e0:	4619      	mov	r1, r3
 80128e2:	6978      	ldr	r0, [r7, #20]
 80128e4:	f000 f81b 	bl	801291e <USBD_GetNextDesc>
 80128e8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80128ea:	697b      	ldr	r3, [r7, #20]
 80128ec:	785b      	ldrb	r3, [r3, #1]
 80128ee:	2b05      	cmp	r3, #5
 80128f0:	d108      	bne.n	8012904 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80128f2:	697b      	ldr	r3, [r7, #20]
 80128f4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80128f6:	693b      	ldr	r3, [r7, #16]
 80128f8:	789b      	ldrb	r3, [r3, #2]
 80128fa:	78fa      	ldrb	r2, [r7, #3]
 80128fc:	429a      	cmp	r2, r3
 80128fe:	d008      	beq.n	8012912 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8012900:	2300      	movs	r3, #0
 8012902:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	885b      	ldrh	r3, [r3, #2]
 8012908:	b29a      	uxth	r2, r3
 801290a:	897b      	ldrh	r3, [r7, #10]
 801290c:	429a      	cmp	r2, r3
 801290e:	d8e5      	bhi.n	80128dc <USBD_GetEpDesc+0x2e>
 8012910:	e000      	b.n	8012914 <USBD_GetEpDesc+0x66>
          break;
 8012912:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8012914:	693b      	ldr	r3, [r7, #16]
}
 8012916:	4618      	mov	r0, r3
 8012918:	3718      	adds	r7, #24
 801291a:	46bd      	mov	sp, r7
 801291c:	bd80      	pop	{r7, pc}

0801291e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801291e:	b480      	push	{r7}
 8012920:	b085      	sub	sp, #20
 8012922:	af00      	add	r7, sp, #0
 8012924:	6078      	str	r0, [r7, #4]
 8012926:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801292c:	683b      	ldr	r3, [r7, #0]
 801292e:	881b      	ldrh	r3, [r3, #0]
 8012930:	68fa      	ldr	r2, [r7, #12]
 8012932:	7812      	ldrb	r2, [r2, #0]
 8012934:	4413      	add	r3, r2
 8012936:	b29a      	uxth	r2, r3
 8012938:	683b      	ldr	r3, [r7, #0]
 801293a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	781b      	ldrb	r3, [r3, #0]
 8012940:	461a      	mov	r2, r3
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	4413      	add	r3, r2
 8012946:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8012948:	68fb      	ldr	r3, [r7, #12]
}
 801294a:	4618      	mov	r0, r3
 801294c:	3714      	adds	r7, #20
 801294e:	46bd      	mov	sp, r7
 8012950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012954:	4770      	bx	lr

08012956 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8012956:	b480      	push	{r7}
 8012958:	b087      	sub	sp, #28
 801295a:	af00      	add	r7, sp, #0
 801295c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8012962:	697b      	ldr	r3, [r7, #20]
 8012964:	781b      	ldrb	r3, [r3, #0]
 8012966:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8012968:	697b      	ldr	r3, [r7, #20]
 801296a:	3301      	adds	r3, #1
 801296c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801296e:	697b      	ldr	r3, [r7, #20]
 8012970:	781b      	ldrb	r3, [r3, #0]
 8012972:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8012974:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012978:	021b      	lsls	r3, r3, #8
 801297a:	b21a      	sxth	r2, r3
 801297c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012980:	4313      	orrs	r3, r2
 8012982:	b21b      	sxth	r3, r3
 8012984:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8012986:	89fb      	ldrh	r3, [r7, #14]
}
 8012988:	4618      	mov	r0, r3
 801298a:	371c      	adds	r7, #28
 801298c:	46bd      	mov	sp, r7
 801298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012992:	4770      	bx	lr

08012994 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012994:	b580      	push	{r7, lr}
 8012996:	b084      	sub	sp, #16
 8012998:	af00      	add	r7, sp, #0
 801299a:	6078      	str	r0, [r7, #4]
 801299c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801299e:	2300      	movs	r3, #0
 80129a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80129a2:	683b      	ldr	r3, [r7, #0]
 80129a4:	781b      	ldrb	r3, [r3, #0]
 80129a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80129aa:	2b40      	cmp	r3, #64	@ 0x40
 80129ac:	d005      	beq.n	80129ba <USBD_StdDevReq+0x26>
 80129ae:	2b40      	cmp	r3, #64	@ 0x40
 80129b0:	d857      	bhi.n	8012a62 <USBD_StdDevReq+0xce>
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d00f      	beq.n	80129d6 <USBD_StdDevReq+0x42>
 80129b6:	2b20      	cmp	r3, #32
 80129b8:	d153      	bne.n	8012a62 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	32ae      	adds	r2, #174	@ 0xae
 80129c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129c8:	689b      	ldr	r3, [r3, #8]
 80129ca:	6839      	ldr	r1, [r7, #0]
 80129cc:	6878      	ldr	r0, [r7, #4]
 80129ce:	4798      	blx	r3
 80129d0:	4603      	mov	r3, r0
 80129d2:	73fb      	strb	r3, [r7, #15]
      break;
 80129d4:	e04a      	b.n	8012a6c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80129d6:	683b      	ldr	r3, [r7, #0]
 80129d8:	785b      	ldrb	r3, [r3, #1]
 80129da:	2b09      	cmp	r3, #9
 80129dc:	d83b      	bhi.n	8012a56 <USBD_StdDevReq+0xc2>
 80129de:	a201      	add	r2, pc, #4	@ (adr r2, 80129e4 <USBD_StdDevReq+0x50>)
 80129e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129e4:	08012a39 	.word	0x08012a39
 80129e8:	08012a4d 	.word	0x08012a4d
 80129ec:	08012a57 	.word	0x08012a57
 80129f0:	08012a43 	.word	0x08012a43
 80129f4:	08012a57 	.word	0x08012a57
 80129f8:	08012a17 	.word	0x08012a17
 80129fc:	08012a0d 	.word	0x08012a0d
 8012a00:	08012a57 	.word	0x08012a57
 8012a04:	08012a2f 	.word	0x08012a2f
 8012a08:	08012a21 	.word	0x08012a21
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012a0c:	6839      	ldr	r1, [r7, #0]
 8012a0e:	6878      	ldr	r0, [r7, #4]
 8012a10:	f000 fa3c 	bl	8012e8c <USBD_GetDescriptor>
          break;
 8012a14:	e024      	b.n	8012a60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8012a16:	6839      	ldr	r1, [r7, #0]
 8012a18:	6878      	ldr	r0, [r7, #4]
 8012a1a:	f000 fbcb 	bl	80131b4 <USBD_SetAddress>
          break;
 8012a1e:	e01f      	b.n	8012a60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8012a20:	6839      	ldr	r1, [r7, #0]
 8012a22:	6878      	ldr	r0, [r7, #4]
 8012a24:	f000 fc0a 	bl	801323c <USBD_SetConfig>
 8012a28:	4603      	mov	r3, r0
 8012a2a:	73fb      	strb	r3, [r7, #15]
          break;
 8012a2c:	e018      	b.n	8012a60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012a2e:	6839      	ldr	r1, [r7, #0]
 8012a30:	6878      	ldr	r0, [r7, #4]
 8012a32:	f000 fcad 	bl	8013390 <USBD_GetConfig>
          break;
 8012a36:	e013      	b.n	8012a60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012a38:	6839      	ldr	r1, [r7, #0]
 8012a3a:	6878      	ldr	r0, [r7, #4]
 8012a3c:	f000 fcde 	bl	80133fc <USBD_GetStatus>
          break;
 8012a40:	e00e      	b.n	8012a60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8012a42:	6839      	ldr	r1, [r7, #0]
 8012a44:	6878      	ldr	r0, [r7, #4]
 8012a46:	f000 fd0d 	bl	8013464 <USBD_SetFeature>
          break;
 8012a4a:	e009      	b.n	8012a60 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012a4c:	6839      	ldr	r1, [r7, #0]
 8012a4e:	6878      	ldr	r0, [r7, #4]
 8012a50:	f000 fd31 	bl	80134b6 <USBD_ClrFeature>
          break;
 8012a54:	e004      	b.n	8012a60 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8012a56:	6839      	ldr	r1, [r7, #0]
 8012a58:	6878      	ldr	r0, [r7, #4]
 8012a5a:	f000 fd88 	bl	801356e <USBD_CtlError>
          break;
 8012a5e:	bf00      	nop
      }
      break;
 8012a60:	e004      	b.n	8012a6c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8012a62:	6839      	ldr	r1, [r7, #0]
 8012a64:	6878      	ldr	r0, [r7, #4]
 8012a66:	f000 fd82 	bl	801356e <USBD_CtlError>
      break;
 8012a6a:	bf00      	nop
  }

  return ret;
 8012a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a6e:	4618      	mov	r0, r3
 8012a70:	3710      	adds	r7, #16
 8012a72:	46bd      	mov	sp, r7
 8012a74:	bd80      	pop	{r7, pc}
 8012a76:	bf00      	nop

08012a78 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012a78:	b580      	push	{r7, lr}
 8012a7a:	b084      	sub	sp, #16
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	6078      	str	r0, [r7, #4]
 8012a80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012a82:	2300      	movs	r3, #0
 8012a84:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012a86:	683b      	ldr	r3, [r7, #0]
 8012a88:	781b      	ldrb	r3, [r3, #0]
 8012a8a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012a8e:	2b40      	cmp	r3, #64	@ 0x40
 8012a90:	d005      	beq.n	8012a9e <USBD_StdItfReq+0x26>
 8012a92:	2b40      	cmp	r3, #64	@ 0x40
 8012a94:	d852      	bhi.n	8012b3c <USBD_StdItfReq+0xc4>
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d001      	beq.n	8012a9e <USBD_StdItfReq+0x26>
 8012a9a:	2b20      	cmp	r3, #32
 8012a9c:	d14e      	bne.n	8012b3c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012aa4:	b2db      	uxtb	r3, r3
 8012aa6:	3b01      	subs	r3, #1
 8012aa8:	2b02      	cmp	r3, #2
 8012aaa:	d840      	bhi.n	8012b2e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012aac:	683b      	ldr	r3, [r7, #0]
 8012aae:	889b      	ldrh	r3, [r3, #4]
 8012ab0:	b2db      	uxtb	r3, r3
 8012ab2:	2b01      	cmp	r3, #1
 8012ab4:	d836      	bhi.n	8012b24 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8012ab6:	683b      	ldr	r3, [r7, #0]
 8012ab8:	889b      	ldrh	r3, [r3, #4]
 8012aba:	b2db      	uxtb	r3, r3
 8012abc:	4619      	mov	r1, r3
 8012abe:	6878      	ldr	r0, [r7, #4]
 8012ac0:	f7ff fedb 	bl	801287a <USBD_CoreFindIF>
 8012ac4:	4603      	mov	r3, r0
 8012ac6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012ac8:	7bbb      	ldrb	r3, [r7, #14]
 8012aca:	2bff      	cmp	r3, #255	@ 0xff
 8012acc:	d01d      	beq.n	8012b0a <USBD_StdItfReq+0x92>
 8012ace:	7bbb      	ldrb	r3, [r7, #14]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d11a      	bne.n	8012b0a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8012ad4:	7bba      	ldrb	r2, [r7, #14]
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	32ae      	adds	r2, #174	@ 0xae
 8012ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ade:	689b      	ldr	r3, [r3, #8]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d00f      	beq.n	8012b04 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8012ae4:	7bba      	ldrb	r2, [r7, #14]
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8012aec:	7bba      	ldrb	r2, [r7, #14]
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	32ae      	adds	r2, #174	@ 0xae
 8012af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012af6:	689b      	ldr	r3, [r3, #8]
 8012af8:	6839      	ldr	r1, [r7, #0]
 8012afa:	6878      	ldr	r0, [r7, #4]
 8012afc:	4798      	blx	r3
 8012afe:	4603      	mov	r3, r0
 8012b00:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8012b02:	e004      	b.n	8012b0e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8012b04:	2303      	movs	r3, #3
 8012b06:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8012b08:	e001      	b.n	8012b0e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8012b0a:	2303      	movs	r3, #3
 8012b0c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8012b0e:	683b      	ldr	r3, [r7, #0]
 8012b10:	88db      	ldrh	r3, [r3, #6]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d110      	bne.n	8012b38 <USBD_StdItfReq+0xc0>
 8012b16:	7bfb      	ldrb	r3, [r7, #15]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d10d      	bne.n	8012b38 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8012b1c:	6878      	ldr	r0, [r7, #4]
 8012b1e:	f000 fdfd 	bl	801371c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8012b22:	e009      	b.n	8012b38 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8012b24:	6839      	ldr	r1, [r7, #0]
 8012b26:	6878      	ldr	r0, [r7, #4]
 8012b28:	f000 fd21 	bl	801356e <USBD_CtlError>
          break;
 8012b2c:	e004      	b.n	8012b38 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8012b2e:	6839      	ldr	r1, [r7, #0]
 8012b30:	6878      	ldr	r0, [r7, #4]
 8012b32:	f000 fd1c 	bl	801356e <USBD_CtlError>
          break;
 8012b36:	e000      	b.n	8012b3a <USBD_StdItfReq+0xc2>
          break;
 8012b38:	bf00      	nop
      }
      break;
 8012b3a:	e004      	b.n	8012b46 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8012b3c:	6839      	ldr	r1, [r7, #0]
 8012b3e:	6878      	ldr	r0, [r7, #4]
 8012b40:	f000 fd15 	bl	801356e <USBD_CtlError>
      break;
 8012b44:	bf00      	nop
  }

  return ret;
 8012b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b48:	4618      	mov	r0, r3
 8012b4a:	3710      	adds	r7, #16
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	bd80      	pop	{r7, pc}

08012b50 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b084      	sub	sp, #16
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
 8012b58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8012b5e:	683b      	ldr	r3, [r7, #0]
 8012b60:	889b      	ldrh	r3, [r3, #4]
 8012b62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012b64:	683b      	ldr	r3, [r7, #0]
 8012b66:	781b      	ldrb	r3, [r3, #0]
 8012b68:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012b6c:	2b40      	cmp	r3, #64	@ 0x40
 8012b6e:	d007      	beq.n	8012b80 <USBD_StdEPReq+0x30>
 8012b70:	2b40      	cmp	r3, #64	@ 0x40
 8012b72:	f200 817f 	bhi.w	8012e74 <USBD_StdEPReq+0x324>
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d02a      	beq.n	8012bd0 <USBD_StdEPReq+0x80>
 8012b7a:	2b20      	cmp	r3, #32
 8012b7c:	f040 817a 	bne.w	8012e74 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8012b80:	7bbb      	ldrb	r3, [r7, #14]
 8012b82:	4619      	mov	r1, r3
 8012b84:	6878      	ldr	r0, [r7, #4]
 8012b86:	f7ff fe85 	bl	8012894 <USBD_CoreFindEP>
 8012b8a:	4603      	mov	r3, r0
 8012b8c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012b8e:	7b7b      	ldrb	r3, [r7, #13]
 8012b90:	2bff      	cmp	r3, #255	@ 0xff
 8012b92:	f000 8174 	beq.w	8012e7e <USBD_StdEPReq+0x32e>
 8012b96:	7b7b      	ldrb	r3, [r7, #13]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	f040 8170 	bne.w	8012e7e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8012b9e:	7b7a      	ldrb	r2, [r7, #13]
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8012ba6:	7b7a      	ldrb	r2, [r7, #13]
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	32ae      	adds	r2, #174	@ 0xae
 8012bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012bb0:	689b      	ldr	r3, [r3, #8]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	f000 8163 	beq.w	8012e7e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8012bb8:	7b7a      	ldrb	r2, [r7, #13]
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	32ae      	adds	r2, #174	@ 0xae
 8012bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012bc2:	689b      	ldr	r3, [r3, #8]
 8012bc4:	6839      	ldr	r1, [r7, #0]
 8012bc6:	6878      	ldr	r0, [r7, #4]
 8012bc8:	4798      	blx	r3
 8012bca:	4603      	mov	r3, r0
 8012bcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8012bce:	e156      	b.n	8012e7e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012bd0:	683b      	ldr	r3, [r7, #0]
 8012bd2:	785b      	ldrb	r3, [r3, #1]
 8012bd4:	2b03      	cmp	r3, #3
 8012bd6:	d008      	beq.n	8012bea <USBD_StdEPReq+0x9a>
 8012bd8:	2b03      	cmp	r3, #3
 8012bda:	f300 8145 	bgt.w	8012e68 <USBD_StdEPReq+0x318>
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	f000 809b 	beq.w	8012d1a <USBD_StdEPReq+0x1ca>
 8012be4:	2b01      	cmp	r3, #1
 8012be6:	d03c      	beq.n	8012c62 <USBD_StdEPReq+0x112>
 8012be8:	e13e      	b.n	8012e68 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012bf0:	b2db      	uxtb	r3, r3
 8012bf2:	2b02      	cmp	r3, #2
 8012bf4:	d002      	beq.n	8012bfc <USBD_StdEPReq+0xac>
 8012bf6:	2b03      	cmp	r3, #3
 8012bf8:	d016      	beq.n	8012c28 <USBD_StdEPReq+0xd8>
 8012bfa:	e02c      	b.n	8012c56 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012bfc:	7bbb      	ldrb	r3, [r7, #14]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d00d      	beq.n	8012c1e <USBD_StdEPReq+0xce>
 8012c02:	7bbb      	ldrb	r3, [r7, #14]
 8012c04:	2b80      	cmp	r3, #128	@ 0x80
 8012c06:	d00a      	beq.n	8012c1e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012c08:	7bbb      	ldrb	r3, [r7, #14]
 8012c0a:	4619      	mov	r1, r3
 8012c0c:	6878      	ldr	r0, [r7, #4]
 8012c0e:	f005 fb9f 	bl	8018350 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012c12:	2180      	movs	r1, #128	@ 0x80
 8012c14:	6878      	ldr	r0, [r7, #4]
 8012c16:	f005 fb9b 	bl	8018350 <USBD_LL_StallEP>
 8012c1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012c1c:	e020      	b.n	8012c60 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8012c1e:	6839      	ldr	r1, [r7, #0]
 8012c20:	6878      	ldr	r0, [r7, #4]
 8012c22:	f000 fca4 	bl	801356e <USBD_CtlError>
              break;
 8012c26:	e01b      	b.n	8012c60 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012c28:	683b      	ldr	r3, [r7, #0]
 8012c2a:	885b      	ldrh	r3, [r3, #2]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d10e      	bne.n	8012c4e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012c30:	7bbb      	ldrb	r3, [r7, #14]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d00b      	beq.n	8012c4e <USBD_StdEPReq+0xfe>
 8012c36:	7bbb      	ldrb	r3, [r7, #14]
 8012c38:	2b80      	cmp	r3, #128	@ 0x80
 8012c3a:	d008      	beq.n	8012c4e <USBD_StdEPReq+0xfe>
 8012c3c:	683b      	ldr	r3, [r7, #0]
 8012c3e:	88db      	ldrh	r3, [r3, #6]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d104      	bne.n	8012c4e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8012c44:	7bbb      	ldrb	r3, [r7, #14]
 8012c46:	4619      	mov	r1, r3
 8012c48:	6878      	ldr	r0, [r7, #4]
 8012c4a:	f005 fb81 	bl	8018350 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8012c4e:	6878      	ldr	r0, [r7, #4]
 8012c50:	f000 fd64 	bl	801371c <USBD_CtlSendStatus>

              break;
 8012c54:	e004      	b.n	8012c60 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8012c56:	6839      	ldr	r1, [r7, #0]
 8012c58:	6878      	ldr	r0, [r7, #4]
 8012c5a:	f000 fc88 	bl	801356e <USBD_CtlError>
              break;
 8012c5e:	bf00      	nop
          }
          break;
 8012c60:	e107      	b.n	8012e72 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012c68:	b2db      	uxtb	r3, r3
 8012c6a:	2b02      	cmp	r3, #2
 8012c6c:	d002      	beq.n	8012c74 <USBD_StdEPReq+0x124>
 8012c6e:	2b03      	cmp	r3, #3
 8012c70:	d016      	beq.n	8012ca0 <USBD_StdEPReq+0x150>
 8012c72:	e04b      	b.n	8012d0c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012c74:	7bbb      	ldrb	r3, [r7, #14]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d00d      	beq.n	8012c96 <USBD_StdEPReq+0x146>
 8012c7a:	7bbb      	ldrb	r3, [r7, #14]
 8012c7c:	2b80      	cmp	r3, #128	@ 0x80
 8012c7e:	d00a      	beq.n	8012c96 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012c80:	7bbb      	ldrb	r3, [r7, #14]
 8012c82:	4619      	mov	r1, r3
 8012c84:	6878      	ldr	r0, [r7, #4]
 8012c86:	f005 fb63 	bl	8018350 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012c8a:	2180      	movs	r1, #128	@ 0x80
 8012c8c:	6878      	ldr	r0, [r7, #4]
 8012c8e:	f005 fb5f 	bl	8018350 <USBD_LL_StallEP>
 8012c92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012c94:	e040      	b.n	8012d18 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8012c96:	6839      	ldr	r1, [r7, #0]
 8012c98:	6878      	ldr	r0, [r7, #4]
 8012c9a:	f000 fc68 	bl	801356e <USBD_CtlError>
              break;
 8012c9e:	e03b      	b.n	8012d18 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012ca0:	683b      	ldr	r3, [r7, #0]
 8012ca2:	885b      	ldrh	r3, [r3, #2]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d136      	bne.n	8012d16 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012ca8:	7bbb      	ldrb	r3, [r7, #14]
 8012caa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d004      	beq.n	8012cbc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012cb2:	7bbb      	ldrb	r3, [r7, #14]
 8012cb4:	4619      	mov	r1, r3
 8012cb6:	6878      	ldr	r0, [r7, #4]
 8012cb8:	f005 fb69 	bl	801838e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8012cbc:	6878      	ldr	r0, [r7, #4]
 8012cbe:	f000 fd2d 	bl	801371c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8012cc2:	7bbb      	ldrb	r3, [r7, #14]
 8012cc4:	4619      	mov	r1, r3
 8012cc6:	6878      	ldr	r0, [r7, #4]
 8012cc8:	f7ff fde4 	bl	8012894 <USBD_CoreFindEP>
 8012ccc:	4603      	mov	r3, r0
 8012cce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012cd0:	7b7b      	ldrb	r3, [r7, #13]
 8012cd2:	2bff      	cmp	r3, #255	@ 0xff
 8012cd4:	d01f      	beq.n	8012d16 <USBD_StdEPReq+0x1c6>
 8012cd6:	7b7b      	ldrb	r3, [r7, #13]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d11c      	bne.n	8012d16 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8012cdc:	7b7a      	ldrb	r2, [r7, #13]
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8012ce4:	7b7a      	ldrb	r2, [r7, #13]
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	32ae      	adds	r2, #174	@ 0xae
 8012cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012cee:	689b      	ldr	r3, [r3, #8]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d010      	beq.n	8012d16 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8012cf4:	7b7a      	ldrb	r2, [r7, #13]
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	32ae      	adds	r2, #174	@ 0xae
 8012cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012cfe:	689b      	ldr	r3, [r3, #8]
 8012d00:	6839      	ldr	r1, [r7, #0]
 8012d02:	6878      	ldr	r0, [r7, #4]
 8012d04:	4798      	blx	r3
 8012d06:	4603      	mov	r3, r0
 8012d08:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8012d0a:	e004      	b.n	8012d16 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8012d0c:	6839      	ldr	r1, [r7, #0]
 8012d0e:	6878      	ldr	r0, [r7, #4]
 8012d10:	f000 fc2d 	bl	801356e <USBD_CtlError>
              break;
 8012d14:	e000      	b.n	8012d18 <USBD_StdEPReq+0x1c8>
              break;
 8012d16:	bf00      	nop
          }
          break;
 8012d18:	e0ab      	b.n	8012e72 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012d20:	b2db      	uxtb	r3, r3
 8012d22:	2b02      	cmp	r3, #2
 8012d24:	d002      	beq.n	8012d2c <USBD_StdEPReq+0x1dc>
 8012d26:	2b03      	cmp	r3, #3
 8012d28:	d032      	beq.n	8012d90 <USBD_StdEPReq+0x240>
 8012d2a:	e097      	b.n	8012e5c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012d2c:	7bbb      	ldrb	r3, [r7, #14]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d007      	beq.n	8012d42 <USBD_StdEPReq+0x1f2>
 8012d32:	7bbb      	ldrb	r3, [r7, #14]
 8012d34:	2b80      	cmp	r3, #128	@ 0x80
 8012d36:	d004      	beq.n	8012d42 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8012d38:	6839      	ldr	r1, [r7, #0]
 8012d3a:	6878      	ldr	r0, [r7, #4]
 8012d3c:	f000 fc17 	bl	801356e <USBD_CtlError>
                break;
 8012d40:	e091      	b.n	8012e66 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012d42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	da0b      	bge.n	8012d62 <USBD_StdEPReq+0x212>
 8012d4a:	7bbb      	ldrb	r3, [r7, #14]
 8012d4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012d50:	4613      	mov	r3, r2
 8012d52:	009b      	lsls	r3, r3, #2
 8012d54:	4413      	add	r3, r2
 8012d56:	009b      	lsls	r3, r3, #2
 8012d58:	3310      	adds	r3, #16
 8012d5a:	687a      	ldr	r2, [r7, #4]
 8012d5c:	4413      	add	r3, r2
 8012d5e:	3304      	adds	r3, #4
 8012d60:	e00b      	b.n	8012d7a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012d62:	7bbb      	ldrb	r3, [r7, #14]
 8012d64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012d68:	4613      	mov	r3, r2
 8012d6a:	009b      	lsls	r3, r3, #2
 8012d6c:	4413      	add	r3, r2
 8012d6e:	009b      	lsls	r3, r3, #2
 8012d70:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8012d74:	687a      	ldr	r2, [r7, #4]
 8012d76:	4413      	add	r3, r2
 8012d78:	3304      	adds	r3, #4
 8012d7a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8012d7c:	68bb      	ldr	r3, [r7, #8]
 8012d7e:	2200      	movs	r2, #0
 8012d80:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012d82:	68bb      	ldr	r3, [r7, #8]
 8012d84:	2202      	movs	r2, #2
 8012d86:	4619      	mov	r1, r3
 8012d88:	6878      	ldr	r0, [r7, #4]
 8012d8a:	f000 fc6d 	bl	8013668 <USBD_CtlSendData>
              break;
 8012d8e:	e06a      	b.n	8012e66 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8012d90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	da11      	bge.n	8012dbc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012d98:	7bbb      	ldrb	r3, [r7, #14]
 8012d9a:	f003 020f 	and.w	r2, r3, #15
 8012d9e:	6879      	ldr	r1, [r7, #4]
 8012da0:	4613      	mov	r3, r2
 8012da2:	009b      	lsls	r3, r3, #2
 8012da4:	4413      	add	r3, r2
 8012da6:	009b      	lsls	r3, r3, #2
 8012da8:	440b      	add	r3, r1
 8012daa:	3324      	adds	r3, #36	@ 0x24
 8012dac:	881b      	ldrh	r3, [r3, #0]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d117      	bne.n	8012de2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8012db2:	6839      	ldr	r1, [r7, #0]
 8012db4:	6878      	ldr	r0, [r7, #4]
 8012db6:	f000 fbda 	bl	801356e <USBD_CtlError>
                  break;
 8012dba:	e054      	b.n	8012e66 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012dbc:	7bbb      	ldrb	r3, [r7, #14]
 8012dbe:	f003 020f 	and.w	r2, r3, #15
 8012dc2:	6879      	ldr	r1, [r7, #4]
 8012dc4:	4613      	mov	r3, r2
 8012dc6:	009b      	lsls	r3, r3, #2
 8012dc8:	4413      	add	r3, r2
 8012dca:	009b      	lsls	r3, r3, #2
 8012dcc:	440b      	add	r3, r1
 8012dce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012dd2:	881b      	ldrh	r3, [r3, #0]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d104      	bne.n	8012de2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8012dd8:	6839      	ldr	r1, [r7, #0]
 8012dda:	6878      	ldr	r0, [r7, #4]
 8012ddc:	f000 fbc7 	bl	801356e <USBD_CtlError>
                  break;
 8012de0:	e041      	b.n	8012e66 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012de2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	da0b      	bge.n	8012e02 <USBD_StdEPReq+0x2b2>
 8012dea:	7bbb      	ldrb	r3, [r7, #14]
 8012dec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012df0:	4613      	mov	r3, r2
 8012df2:	009b      	lsls	r3, r3, #2
 8012df4:	4413      	add	r3, r2
 8012df6:	009b      	lsls	r3, r3, #2
 8012df8:	3310      	adds	r3, #16
 8012dfa:	687a      	ldr	r2, [r7, #4]
 8012dfc:	4413      	add	r3, r2
 8012dfe:	3304      	adds	r3, #4
 8012e00:	e00b      	b.n	8012e1a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012e02:	7bbb      	ldrb	r3, [r7, #14]
 8012e04:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012e08:	4613      	mov	r3, r2
 8012e0a:	009b      	lsls	r3, r3, #2
 8012e0c:	4413      	add	r3, r2
 8012e0e:	009b      	lsls	r3, r3, #2
 8012e10:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8012e14:	687a      	ldr	r2, [r7, #4]
 8012e16:	4413      	add	r3, r2
 8012e18:	3304      	adds	r3, #4
 8012e1a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012e1c:	7bbb      	ldrb	r3, [r7, #14]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d002      	beq.n	8012e28 <USBD_StdEPReq+0x2d8>
 8012e22:	7bbb      	ldrb	r3, [r7, #14]
 8012e24:	2b80      	cmp	r3, #128	@ 0x80
 8012e26:	d103      	bne.n	8012e30 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8012e28:	68bb      	ldr	r3, [r7, #8]
 8012e2a:	2200      	movs	r2, #0
 8012e2c:	601a      	str	r2, [r3, #0]
 8012e2e:	e00e      	b.n	8012e4e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8012e30:	7bbb      	ldrb	r3, [r7, #14]
 8012e32:	4619      	mov	r1, r3
 8012e34:	6878      	ldr	r0, [r7, #4]
 8012e36:	f005 fac9 	bl	80183cc <USBD_LL_IsStallEP>
 8012e3a:	4603      	mov	r3, r0
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d003      	beq.n	8012e48 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8012e40:	68bb      	ldr	r3, [r7, #8]
 8012e42:	2201      	movs	r2, #1
 8012e44:	601a      	str	r2, [r3, #0]
 8012e46:	e002      	b.n	8012e4e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8012e48:	68bb      	ldr	r3, [r7, #8]
 8012e4a:	2200      	movs	r2, #0
 8012e4c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012e4e:	68bb      	ldr	r3, [r7, #8]
 8012e50:	2202      	movs	r2, #2
 8012e52:	4619      	mov	r1, r3
 8012e54:	6878      	ldr	r0, [r7, #4]
 8012e56:	f000 fc07 	bl	8013668 <USBD_CtlSendData>
              break;
 8012e5a:	e004      	b.n	8012e66 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8012e5c:	6839      	ldr	r1, [r7, #0]
 8012e5e:	6878      	ldr	r0, [r7, #4]
 8012e60:	f000 fb85 	bl	801356e <USBD_CtlError>
              break;
 8012e64:	bf00      	nop
          }
          break;
 8012e66:	e004      	b.n	8012e72 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8012e68:	6839      	ldr	r1, [r7, #0]
 8012e6a:	6878      	ldr	r0, [r7, #4]
 8012e6c:	f000 fb7f 	bl	801356e <USBD_CtlError>
          break;
 8012e70:	bf00      	nop
      }
      break;
 8012e72:	e005      	b.n	8012e80 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8012e74:	6839      	ldr	r1, [r7, #0]
 8012e76:	6878      	ldr	r0, [r7, #4]
 8012e78:	f000 fb79 	bl	801356e <USBD_CtlError>
      break;
 8012e7c:	e000      	b.n	8012e80 <USBD_StdEPReq+0x330>
      break;
 8012e7e:	bf00      	nop
  }

  return ret;
 8012e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e82:	4618      	mov	r0, r3
 8012e84:	3710      	adds	r7, #16
 8012e86:	46bd      	mov	sp, r7
 8012e88:	bd80      	pop	{r7, pc}
	...

08012e8c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b084      	sub	sp, #16
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
 8012e94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012e96:	2300      	movs	r3, #0
 8012e98:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012ea2:	683b      	ldr	r3, [r7, #0]
 8012ea4:	885b      	ldrh	r3, [r3, #2]
 8012ea6:	0a1b      	lsrs	r3, r3, #8
 8012ea8:	b29b      	uxth	r3, r3
 8012eaa:	3b01      	subs	r3, #1
 8012eac:	2b0e      	cmp	r3, #14
 8012eae:	f200 8152 	bhi.w	8013156 <USBD_GetDescriptor+0x2ca>
 8012eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8012eb8 <USBD_GetDescriptor+0x2c>)
 8012eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012eb8:	08012f29 	.word	0x08012f29
 8012ebc:	08012f41 	.word	0x08012f41
 8012ec0:	08012f81 	.word	0x08012f81
 8012ec4:	08013157 	.word	0x08013157
 8012ec8:	08013157 	.word	0x08013157
 8012ecc:	080130f7 	.word	0x080130f7
 8012ed0:	08013123 	.word	0x08013123
 8012ed4:	08013157 	.word	0x08013157
 8012ed8:	08013157 	.word	0x08013157
 8012edc:	08013157 	.word	0x08013157
 8012ee0:	08013157 	.word	0x08013157
 8012ee4:	08013157 	.word	0x08013157
 8012ee8:	08013157 	.word	0x08013157
 8012eec:	08013157 	.word	0x08013157
 8012ef0:	08012ef5 	.word	0x08012ef5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012efa:	69db      	ldr	r3, [r3, #28]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d00b      	beq.n	8012f18 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012f06:	69db      	ldr	r3, [r3, #28]
 8012f08:	687a      	ldr	r2, [r7, #4]
 8012f0a:	7c12      	ldrb	r2, [r2, #16]
 8012f0c:	f107 0108 	add.w	r1, r7, #8
 8012f10:	4610      	mov	r0, r2
 8012f12:	4798      	blx	r3
 8012f14:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012f16:	e126      	b.n	8013166 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012f18:	6839      	ldr	r1, [r7, #0]
 8012f1a:	6878      	ldr	r0, [r7, #4]
 8012f1c:	f000 fb27 	bl	801356e <USBD_CtlError>
        err++;
 8012f20:	7afb      	ldrb	r3, [r7, #11]
 8012f22:	3301      	adds	r3, #1
 8012f24:	72fb      	strb	r3, [r7, #11]
      break;
 8012f26:	e11e      	b.n	8013166 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	687a      	ldr	r2, [r7, #4]
 8012f32:	7c12      	ldrb	r2, [r2, #16]
 8012f34:	f107 0108 	add.w	r1, r7, #8
 8012f38:	4610      	mov	r0, r2
 8012f3a:	4798      	blx	r3
 8012f3c:	60f8      	str	r0, [r7, #12]
      break;
 8012f3e:	e112      	b.n	8013166 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	7c1b      	ldrb	r3, [r3, #16]
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d10d      	bne.n	8012f64 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012f50:	f107 0208 	add.w	r2, r7, #8
 8012f54:	4610      	mov	r0, r2
 8012f56:	4798      	blx	r3
 8012f58:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	3301      	adds	r3, #1
 8012f5e:	2202      	movs	r2, #2
 8012f60:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8012f62:	e100      	b.n	8013166 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f6c:	f107 0208 	add.w	r2, r7, #8
 8012f70:	4610      	mov	r0, r2
 8012f72:	4798      	blx	r3
 8012f74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	3301      	adds	r3, #1
 8012f7a:	2202      	movs	r2, #2
 8012f7c:	701a      	strb	r2, [r3, #0]
      break;
 8012f7e:	e0f2      	b.n	8013166 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012f80:	683b      	ldr	r3, [r7, #0]
 8012f82:	885b      	ldrh	r3, [r3, #2]
 8012f84:	b2db      	uxtb	r3, r3
 8012f86:	2b05      	cmp	r3, #5
 8012f88:	f200 80ac 	bhi.w	80130e4 <USBD_GetDescriptor+0x258>
 8012f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8012f94 <USBD_GetDescriptor+0x108>)
 8012f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f92:	bf00      	nop
 8012f94:	08012fad 	.word	0x08012fad
 8012f98:	08012fe1 	.word	0x08012fe1
 8012f9c:	08013015 	.word	0x08013015
 8012fa0:	08013049 	.word	0x08013049
 8012fa4:	0801307d 	.word	0x0801307d
 8012fa8:	080130b1 	.word	0x080130b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012fb2:	685b      	ldr	r3, [r3, #4]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d00b      	beq.n	8012fd0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012fbe:	685b      	ldr	r3, [r3, #4]
 8012fc0:	687a      	ldr	r2, [r7, #4]
 8012fc2:	7c12      	ldrb	r2, [r2, #16]
 8012fc4:	f107 0108 	add.w	r1, r7, #8
 8012fc8:	4610      	mov	r0, r2
 8012fca:	4798      	blx	r3
 8012fcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012fce:	e091      	b.n	80130f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012fd0:	6839      	ldr	r1, [r7, #0]
 8012fd2:	6878      	ldr	r0, [r7, #4]
 8012fd4:	f000 facb 	bl	801356e <USBD_CtlError>
            err++;
 8012fd8:	7afb      	ldrb	r3, [r7, #11]
 8012fda:	3301      	adds	r3, #1
 8012fdc:	72fb      	strb	r3, [r7, #11]
          break;
 8012fde:	e089      	b.n	80130f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012fe6:	689b      	ldr	r3, [r3, #8]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d00b      	beq.n	8013004 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012ff2:	689b      	ldr	r3, [r3, #8]
 8012ff4:	687a      	ldr	r2, [r7, #4]
 8012ff6:	7c12      	ldrb	r2, [r2, #16]
 8012ff8:	f107 0108 	add.w	r1, r7, #8
 8012ffc:	4610      	mov	r0, r2
 8012ffe:	4798      	blx	r3
 8013000:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013002:	e077      	b.n	80130f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013004:	6839      	ldr	r1, [r7, #0]
 8013006:	6878      	ldr	r0, [r7, #4]
 8013008:	f000 fab1 	bl	801356e <USBD_CtlError>
            err++;
 801300c:	7afb      	ldrb	r3, [r7, #11]
 801300e:	3301      	adds	r3, #1
 8013010:	72fb      	strb	r3, [r7, #11]
          break;
 8013012:	e06f      	b.n	80130f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801301a:	68db      	ldr	r3, [r3, #12]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d00b      	beq.n	8013038 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013026:	68db      	ldr	r3, [r3, #12]
 8013028:	687a      	ldr	r2, [r7, #4]
 801302a:	7c12      	ldrb	r2, [r2, #16]
 801302c:	f107 0108 	add.w	r1, r7, #8
 8013030:	4610      	mov	r0, r2
 8013032:	4798      	blx	r3
 8013034:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013036:	e05d      	b.n	80130f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013038:	6839      	ldr	r1, [r7, #0]
 801303a:	6878      	ldr	r0, [r7, #4]
 801303c:	f000 fa97 	bl	801356e <USBD_CtlError>
            err++;
 8013040:	7afb      	ldrb	r3, [r7, #11]
 8013042:	3301      	adds	r3, #1
 8013044:	72fb      	strb	r3, [r7, #11]
          break;
 8013046:	e055      	b.n	80130f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801304e:	691b      	ldr	r3, [r3, #16]
 8013050:	2b00      	cmp	r3, #0
 8013052:	d00b      	beq.n	801306c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801305a:	691b      	ldr	r3, [r3, #16]
 801305c:	687a      	ldr	r2, [r7, #4]
 801305e:	7c12      	ldrb	r2, [r2, #16]
 8013060:	f107 0108 	add.w	r1, r7, #8
 8013064:	4610      	mov	r0, r2
 8013066:	4798      	blx	r3
 8013068:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801306a:	e043      	b.n	80130f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801306c:	6839      	ldr	r1, [r7, #0]
 801306e:	6878      	ldr	r0, [r7, #4]
 8013070:	f000 fa7d 	bl	801356e <USBD_CtlError>
            err++;
 8013074:	7afb      	ldrb	r3, [r7, #11]
 8013076:	3301      	adds	r3, #1
 8013078:	72fb      	strb	r3, [r7, #11]
          break;
 801307a:	e03b      	b.n	80130f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013082:	695b      	ldr	r3, [r3, #20]
 8013084:	2b00      	cmp	r3, #0
 8013086:	d00b      	beq.n	80130a0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801308e:	695b      	ldr	r3, [r3, #20]
 8013090:	687a      	ldr	r2, [r7, #4]
 8013092:	7c12      	ldrb	r2, [r2, #16]
 8013094:	f107 0108 	add.w	r1, r7, #8
 8013098:	4610      	mov	r0, r2
 801309a:	4798      	blx	r3
 801309c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801309e:	e029      	b.n	80130f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80130a0:	6839      	ldr	r1, [r7, #0]
 80130a2:	6878      	ldr	r0, [r7, #4]
 80130a4:	f000 fa63 	bl	801356e <USBD_CtlError>
            err++;
 80130a8:	7afb      	ldrb	r3, [r7, #11]
 80130aa:	3301      	adds	r3, #1
 80130ac:	72fb      	strb	r3, [r7, #11]
          break;
 80130ae:	e021      	b.n	80130f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80130b6:	699b      	ldr	r3, [r3, #24]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d00b      	beq.n	80130d4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80130c2:	699b      	ldr	r3, [r3, #24]
 80130c4:	687a      	ldr	r2, [r7, #4]
 80130c6:	7c12      	ldrb	r2, [r2, #16]
 80130c8:	f107 0108 	add.w	r1, r7, #8
 80130cc:	4610      	mov	r0, r2
 80130ce:	4798      	blx	r3
 80130d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80130d2:	e00f      	b.n	80130f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80130d4:	6839      	ldr	r1, [r7, #0]
 80130d6:	6878      	ldr	r0, [r7, #4]
 80130d8:	f000 fa49 	bl	801356e <USBD_CtlError>
            err++;
 80130dc:	7afb      	ldrb	r3, [r7, #11]
 80130de:	3301      	adds	r3, #1
 80130e0:	72fb      	strb	r3, [r7, #11]
          break;
 80130e2:	e007      	b.n	80130f4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80130e4:	6839      	ldr	r1, [r7, #0]
 80130e6:	6878      	ldr	r0, [r7, #4]
 80130e8:	f000 fa41 	bl	801356e <USBD_CtlError>
          err++;
 80130ec:	7afb      	ldrb	r3, [r7, #11]
 80130ee:	3301      	adds	r3, #1
 80130f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80130f2:	bf00      	nop
      }
      break;
 80130f4:	e037      	b.n	8013166 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	7c1b      	ldrb	r3, [r3, #16]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d109      	bne.n	8013112 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013106:	f107 0208 	add.w	r2, r7, #8
 801310a:	4610      	mov	r0, r2
 801310c:	4798      	blx	r3
 801310e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013110:	e029      	b.n	8013166 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013112:	6839      	ldr	r1, [r7, #0]
 8013114:	6878      	ldr	r0, [r7, #4]
 8013116:	f000 fa2a 	bl	801356e <USBD_CtlError>
        err++;
 801311a:	7afb      	ldrb	r3, [r7, #11]
 801311c:	3301      	adds	r3, #1
 801311e:	72fb      	strb	r3, [r7, #11]
      break;
 8013120:	e021      	b.n	8013166 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	7c1b      	ldrb	r3, [r3, #16]
 8013126:	2b00      	cmp	r3, #0
 8013128:	d10d      	bne.n	8013146 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013132:	f107 0208 	add.w	r2, r7, #8
 8013136:	4610      	mov	r0, r2
 8013138:	4798      	blx	r3
 801313a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	3301      	adds	r3, #1
 8013140:	2207      	movs	r2, #7
 8013142:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013144:	e00f      	b.n	8013166 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013146:	6839      	ldr	r1, [r7, #0]
 8013148:	6878      	ldr	r0, [r7, #4]
 801314a:	f000 fa10 	bl	801356e <USBD_CtlError>
        err++;
 801314e:	7afb      	ldrb	r3, [r7, #11]
 8013150:	3301      	adds	r3, #1
 8013152:	72fb      	strb	r3, [r7, #11]
      break;
 8013154:	e007      	b.n	8013166 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8013156:	6839      	ldr	r1, [r7, #0]
 8013158:	6878      	ldr	r0, [r7, #4]
 801315a:	f000 fa08 	bl	801356e <USBD_CtlError>
      err++;
 801315e:	7afb      	ldrb	r3, [r7, #11]
 8013160:	3301      	adds	r3, #1
 8013162:	72fb      	strb	r3, [r7, #11]
      break;
 8013164:	bf00      	nop
  }

  if (err != 0U)
 8013166:	7afb      	ldrb	r3, [r7, #11]
 8013168:	2b00      	cmp	r3, #0
 801316a:	d11e      	bne.n	80131aa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 801316c:	683b      	ldr	r3, [r7, #0]
 801316e:	88db      	ldrh	r3, [r3, #6]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d016      	beq.n	80131a2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8013174:	893b      	ldrh	r3, [r7, #8]
 8013176:	2b00      	cmp	r3, #0
 8013178:	d00e      	beq.n	8013198 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801317a:	683b      	ldr	r3, [r7, #0]
 801317c:	88da      	ldrh	r2, [r3, #6]
 801317e:	893b      	ldrh	r3, [r7, #8]
 8013180:	4293      	cmp	r3, r2
 8013182:	bf28      	it	cs
 8013184:	4613      	movcs	r3, r2
 8013186:	b29b      	uxth	r3, r3
 8013188:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801318a:	893b      	ldrh	r3, [r7, #8]
 801318c:	461a      	mov	r2, r3
 801318e:	68f9      	ldr	r1, [r7, #12]
 8013190:	6878      	ldr	r0, [r7, #4]
 8013192:	f000 fa69 	bl	8013668 <USBD_CtlSendData>
 8013196:	e009      	b.n	80131ac <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8013198:	6839      	ldr	r1, [r7, #0]
 801319a:	6878      	ldr	r0, [r7, #4]
 801319c:	f000 f9e7 	bl	801356e <USBD_CtlError>
 80131a0:	e004      	b.n	80131ac <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80131a2:	6878      	ldr	r0, [r7, #4]
 80131a4:	f000 faba 	bl	801371c <USBD_CtlSendStatus>
 80131a8:	e000      	b.n	80131ac <USBD_GetDescriptor+0x320>
    return;
 80131aa:	bf00      	nop
  }
}
 80131ac:	3710      	adds	r7, #16
 80131ae:	46bd      	mov	sp, r7
 80131b0:	bd80      	pop	{r7, pc}
 80131b2:	bf00      	nop

080131b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80131b4:	b580      	push	{r7, lr}
 80131b6:	b084      	sub	sp, #16
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	6078      	str	r0, [r7, #4]
 80131bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80131be:	683b      	ldr	r3, [r7, #0]
 80131c0:	889b      	ldrh	r3, [r3, #4]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d131      	bne.n	801322a <USBD_SetAddress+0x76>
 80131c6:	683b      	ldr	r3, [r7, #0]
 80131c8:	88db      	ldrh	r3, [r3, #6]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d12d      	bne.n	801322a <USBD_SetAddress+0x76>
 80131ce:	683b      	ldr	r3, [r7, #0]
 80131d0:	885b      	ldrh	r3, [r3, #2]
 80131d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80131d4:	d829      	bhi.n	801322a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80131d6:	683b      	ldr	r3, [r7, #0]
 80131d8:	885b      	ldrh	r3, [r3, #2]
 80131da:	b2db      	uxtb	r3, r3
 80131dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80131e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80131e8:	b2db      	uxtb	r3, r3
 80131ea:	2b03      	cmp	r3, #3
 80131ec:	d104      	bne.n	80131f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80131ee:	6839      	ldr	r1, [r7, #0]
 80131f0:	6878      	ldr	r0, [r7, #4]
 80131f2:	f000 f9bc 	bl	801356e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80131f6:	e01d      	b.n	8013234 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	7bfa      	ldrb	r2, [r7, #15]
 80131fc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8013200:	7bfb      	ldrb	r3, [r7, #15]
 8013202:	4619      	mov	r1, r3
 8013204:	6878      	ldr	r0, [r7, #4]
 8013206:	f005 f90d 	bl	8018424 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801320a:	6878      	ldr	r0, [r7, #4]
 801320c:	f000 fa86 	bl	801371c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8013210:	7bfb      	ldrb	r3, [r7, #15]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d004      	beq.n	8013220 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	2202      	movs	r2, #2
 801321a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801321e:	e009      	b.n	8013234 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	2201      	movs	r2, #1
 8013224:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013228:	e004      	b.n	8013234 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801322a:	6839      	ldr	r1, [r7, #0]
 801322c:	6878      	ldr	r0, [r7, #4]
 801322e:	f000 f99e 	bl	801356e <USBD_CtlError>
  }
}
 8013232:	bf00      	nop
 8013234:	bf00      	nop
 8013236:	3710      	adds	r7, #16
 8013238:	46bd      	mov	sp, r7
 801323a:	bd80      	pop	{r7, pc}

0801323c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801323c:	b580      	push	{r7, lr}
 801323e:	b084      	sub	sp, #16
 8013240:	af00      	add	r7, sp, #0
 8013242:	6078      	str	r0, [r7, #4]
 8013244:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013246:	2300      	movs	r3, #0
 8013248:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801324a:	683b      	ldr	r3, [r7, #0]
 801324c:	885b      	ldrh	r3, [r3, #2]
 801324e:	b2da      	uxtb	r2, r3
 8013250:	4b4e      	ldr	r3, [pc, #312]	@ (801338c <USBD_SetConfig+0x150>)
 8013252:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013254:	4b4d      	ldr	r3, [pc, #308]	@ (801338c <USBD_SetConfig+0x150>)
 8013256:	781b      	ldrb	r3, [r3, #0]
 8013258:	2b01      	cmp	r3, #1
 801325a:	d905      	bls.n	8013268 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801325c:	6839      	ldr	r1, [r7, #0]
 801325e:	6878      	ldr	r0, [r7, #4]
 8013260:	f000 f985 	bl	801356e <USBD_CtlError>
    return USBD_FAIL;
 8013264:	2303      	movs	r3, #3
 8013266:	e08c      	b.n	8013382 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801326e:	b2db      	uxtb	r3, r3
 8013270:	2b02      	cmp	r3, #2
 8013272:	d002      	beq.n	801327a <USBD_SetConfig+0x3e>
 8013274:	2b03      	cmp	r3, #3
 8013276:	d029      	beq.n	80132cc <USBD_SetConfig+0x90>
 8013278:	e075      	b.n	8013366 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801327a:	4b44      	ldr	r3, [pc, #272]	@ (801338c <USBD_SetConfig+0x150>)
 801327c:	781b      	ldrb	r3, [r3, #0]
 801327e:	2b00      	cmp	r3, #0
 8013280:	d020      	beq.n	80132c4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8013282:	4b42      	ldr	r3, [pc, #264]	@ (801338c <USBD_SetConfig+0x150>)
 8013284:	781b      	ldrb	r3, [r3, #0]
 8013286:	461a      	mov	r2, r3
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801328c:	4b3f      	ldr	r3, [pc, #252]	@ (801338c <USBD_SetConfig+0x150>)
 801328e:	781b      	ldrb	r3, [r3, #0]
 8013290:	4619      	mov	r1, r3
 8013292:	6878      	ldr	r0, [r7, #4]
 8013294:	f7ff f84b 	bl	801232e <USBD_SetClassConfig>
 8013298:	4603      	mov	r3, r0
 801329a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801329c:	7bfb      	ldrb	r3, [r7, #15]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d008      	beq.n	80132b4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80132a2:	6839      	ldr	r1, [r7, #0]
 80132a4:	6878      	ldr	r0, [r7, #4]
 80132a6:	f000 f962 	bl	801356e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	2202      	movs	r2, #2
 80132ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80132b2:	e065      	b.n	8013380 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80132b4:	6878      	ldr	r0, [r7, #4]
 80132b6:	f000 fa31 	bl	801371c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	2203      	movs	r2, #3
 80132be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80132c2:	e05d      	b.n	8013380 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80132c4:	6878      	ldr	r0, [r7, #4]
 80132c6:	f000 fa29 	bl	801371c <USBD_CtlSendStatus>
      break;
 80132ca:	e059      	b.n	8013380 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80132cc:	4b2f      	ldr	r3, [pc, #188]	@ (801338c <USBD_SetConfig+0x150>)
 80132ce:	781b      	ldrb	r3, [r3, #0]
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d112      	bne.n	80132fa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	2202      	movs	r2, #2
 80132d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80132dc:	4b2b      	ldr	r3, [pc, #172]	@ (801338c <USBD_SetConfig+0x150>)
 80132de:	781b      	ldrb	r3, [r3, #0]
 80132e0:	461a      	mov	r2, r3
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80132e6:	4b29      	ldr	r3, [pc, #164]	@ (801338c <USBD_SetConfig+0x150>)
 80132e8:	781b      	ldrb	r3, [r3, #0]
 80132ea:	4619      	mov	r1, r3
 80132ec:	6878      	ldr	r0, [r7, #4]
 80132ee:	f7ff f83a 	bl	8012366 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80132f2:	6878      	ldr	r0, [r7, #4]
 80132f4:	f000 fa12 	bl	801371c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80132f8:	e042      	b.n	8013380 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80132fa:	4b24      	ldr	r3, [pc, #144]	@ (801338c <USBD_SetConfig+0x150>)
 80132fc:	781b      	ldrb	r3, [r3, #0]
 80132fe:	461a      	mov	r2, r3
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	685b      	ldr	r3, [r3, #4]
 8013304:	429a      	cmp	r2, r3
 8013306:	d02a      	beq.n	801335e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	685b      	ldr	r3, [r3, #4]
 801330c:	b2db      	uxtb	r3, r3
 801330e:	4619      	mov	r1, r3
 8013310:	6878      	ldr	r0, [r7, #4]
 8013312:	f7ff f828 	bl	8012366 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8013316:	4b1d      	ldr	r3, [pc, #116]	@ (801338c <USBD_SetConfig+0x150>)
 8013318:	781b      	ldrb	r3, [r3, #0]
 801331a:	461a      	mov	r2, r3
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013320:	4b1a      	ldr	r3, [pc, #104]	@ (801338c <USBD_SetConfig+0x150>)
 8013322:	781b      	ldrb	r3, [r3, #0]
 8013324:	4619      	mov	r1, r3
 8013326:	6878      	ldr	r0, [r7, #4]
 8013328:	f7ff f801 	bl	801232e <USBD_SetClassConfig>
 801332c:	4603      	mov	r3, r0
 801332e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8013330:	7bfb      	ldrb	r3, [r7, #15]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d00f      	beq.n	8013356 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8013336:	6839      	ldr	r1, [r7, #0]
 8013338:	6878      	ldr	r0, [r7, #4]
 801333a:	f000 f918 	bl	801356e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	685b      	ldr	r3, [r3, #4]
 8013342:	b2db      	uxtb	r3, r3
 8013344:	4619      	mov	r1, r3
 8013346:	6878      	ldr	r0, [r7, #4]
 8013348:	f7ff f80d 	bl	8012366 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	2202      	movs	r2, #2
 8013350:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8013354:	e014      	b.n	8013380 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8013356:	6878      	ldr	r0, [r7, #4]
 8013358:	f000 f9e0 	bl	801371c <USBD_CtlSendStatus>
      break;
 801335c:	e010      	b.n	8013380 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801335e:	6878      	ldr	r0, [r7, #4]
 8013360:	f000 f9dc 	bl	801371c <USBD_CtlSendStatus>
      break;
 8013364:	e00c      	b.n	8013380 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8013366:	6839      	ldr	r1, [r7, #0]
 8013368:	6878      	ldr	r0, [r7, #4]
 801336a:	f000 f900 	bl	801356e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801336e:	4b07      	ldr	r3, [pc, #28]	@ (801338c <USBD_SetConfig+0x150>)
 8013370:	781b      	ldrb	r3, [r3, #0]
 8013372:	4619      	mov	r1, r3
 8013374:	6878      	ldr	r0, [r7, #4]
 8013376:	f7fe fff6 	bl	8012366 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801337a:	2303      	movs	r3, #3
 801337c:	73fb      	strb	r3, [r7, #15]
      break;
 801337e:	bf00      	nop
  }

  return ret;
 8013380:	7bfb      	ldrb	r3, [r7, #15]
}
 8013382:	4618      	mov	r0, r3
 8013384:	3710      	adds	r7, #16
 8013386:	46bd      	mov	sp, r7
 8013388:	bd80      	pop	{r7, pc}
 801338a:	bf00      	nop
 801338c:	20000ad4 	.word	0x20000ad4

08013390 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013390:	b580      	push	{r7, lr}
 8013392:	b082      	sub	sp, #8
 8013394:	af00      	add	r7, sp, #0
 8013396:	6078      	str	r0, [r7, #4]
 8013398:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801339a:	683b      	ldr	r3, [r7, #0]
 801339c:	88db      	ldrh	r3, [r3, #6]
 801339e:	2b01      	cmp	r3, #1
 80133a0:	d004      	beq.n	80133ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80133a2:	6839      	ldr	r1, [r7, #0]
 80133a4:	6878      	ldr	r0, [r7, #4]
 80133a6:	f000 f8e2 	bl	801356e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80133aa:	e023      	b.n	80133f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80133b2:	b2db      	uxtb	r3, r3
 80133b4:	2b02      	cmp	r3, #2
 80133b6:	dc02      	bgt.n	80133be <USBD_GetConfig+0x2e>
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	dc03      	bgt.n	80133c4 <USBD_GetConfig+0x34>
 80133bc:	e015      	b.n	80133ea <USBD_GetConfig+0x5a>
 80133be:	2b03      	cmp	r3, #3
 80133c0:	d00b      	beq.n	80133da <USBD_GetConfig+0x4a>
 80133c2:	e012      	b.n	80133ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	2200      	movs	r2, #0
 80133c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	3308      	adds	r3, #8
 80133ce:	2201      	movs	r2, #1
 80133d0:	4619      	mov	r1, r3
 80133d2:	6878      	ldr	r0, [r7, #4]
 80133d4:	f000 f948 	bl	8013668 <USBD_CtlSendData>
        break;
 80133d8:	e00c      	b.n	80133f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	3304      	adds	r3, #4
 80133de:	2201      	movs	r2, #1
 80133e0:	4619      	mov	r1, r3
 80133e2:	6878      	ldr	r0, [r7, #4]
 80133e4:	f000 f940 	bl	8013668 <USBD_CtlSendData>
        break;
 80133e8:	e004      	b.n	80133f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80133ea:	6839      	ldr	r1, [r7, #0]
 80133ec:	6878      	ldr	r0, [r7, #4]
 80133ee:	f000 f8be 	bl	801356e <USBD_CtlError>
        break;
 80133f2:	bf00      	nop
}
 80133f4:	bf00      	nop
 80133f6:	3708      	adds	r7, #8
 80133f8:	46bd      	mov	sp, r7
 80133fa:	bd80      	pop	{r7, pc}

080133fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80133fc:	b580      	push	{r7, lr}
 80133fe:	b082      	sub	sp, #8
 8013400:	af00      	add	r7, sp, #0
 8013402:	6078      	str	r0, [r7, #4]
 8013404:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801340c:	b2db      	uxtb	r3, r3
 801340e:	3b01      	subs	r3, #1
 8013410:	2b02      	cmp	r3, #2
 8013412:	d81e      	bhi.n	8013452 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013414:	683b      	ldr	r3, [r7, #0]
 8013416:	88db      	ldrh	r3, [r3, #6]
 8013418:	2b02      	cmp	r3, #2
 801341a:	d004      	beq.n	8013426 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801341c:	6839      	ldr	r1, [r7, #0]
 801341e:	6878      	ldr	r0, [r7, #4]
 8013420:	f000 f8a5 	bl	801356e <USBD_CtlError>
        break;
 8013424:	e01a      	b.n	801345c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	2201      	movs	r2, #1
 801342a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8013432:	2b00      	cmp	r3, #0
 8013434:	d005      	beq.n	8013442 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	68db      	ldr	r3, [r3, #12]
 801343a:	f043 0202 	orr.w	r2, r3, #2
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	330c      	adds	r3, #12
 8013446:	2202      	movs	r2, #2
 8013448:	4619      	mov	r1, r3
 801344a:	6878      	ldr	r0, [r7, #4]
 801344c:	f000 f90c 	bl	8013668 <USBD_CtlSendData>
      break;
 8013450:	e004      	b.n	801345c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8013452:	6839      	ldr	r1, [r7, #0]
 8013454:	6878      	ldr	r0, [r7, #4]
 8013456:	f000 f88a 	bl	801356e <USBD_CtlError>
      break;
 801345a:	bf00      	nop
  }
}
 801345c:	bf00      	nop
 801345e:	3708      	adds	r7, #8
 8013460:	46bd      	mov	sp, r7
 8013462:	bd80      	pop	{r7, pc}

08013464 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013464:	b580      	push	{r7, lr}
 8013466:	b082      	sub	sp, #8
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
 801346c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801346e:	683b      	ldr	r3, [r7, #0]
 8013470:	885b      	ldrh	r3, [r3, #2]
 8013472:	2b01      	cmp	r3, #1
 8013474:	d107      	bne.n	8013486 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	2201      	movs	r2, #1
 801347a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801347e:	6878      	ldr	r0, [r7, #4]
 8013480:	f000 f94c 	bl	801371c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8013484:	e013      	b.n	80134ae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8013486:	683b      	ldr	r3, [r7, #0]
 8013488:	885b      	ldrh	r3, [r3, #2]
 801348a:	2b02      	cmp	r3, #2
 801348c:	d10b      	bne.n	80134a6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801348e:	683b      	ldr	r3, [r7, #0]
 8013490:	889b      	ldrh	r3, [r3, #4]
 8013492:	0a1b      	lsrs	r3, r3, #8
 8013494:	b29b      	uxth	r3, r3
 8013496:	b2da      	uxtb	r2, r3
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801349e:	6878      	ldr	r0, [r7, #4]
 80134a0:	f000 f93c 	bl	801371c <USBD_CtlSendStatus>
}
 80134a4:	e003      	b.n	80134ae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80134a6:	6839      	ldr	r1, [r7, #0]
 80134a8:	6878      	ldr	r0, [r7, #4]
 80134aa:	f000 f860 	bl	801356e <USBD_CtlError>
}
 80134ae:	bf00      	nop
 80134b0:	3708      	adds	r7, #8
 80134b2:	46bd      	mov	sp, r7
 80134b4:	bd80      	pop	{r7, pc}

080134b6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80134b6:	b580      	push	{r7, lr}
 80134b8:	b082      	sub	sp, #8
 80134ba:	af00      	add	r7, sp, #0
 80134bc:	6078      	str	r0, [r7, #4]
 80134be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80134c6:	b2db      	uxtb	r3, r3
 80134c8:	3b01      	subs	r3, #1
 80134ca:	2b02      	cmp	r3, #2
 80134cc:	d80b      	bhi.n	80134e6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80134ce:	683b      	ldr	r3, [r7, #0]
 80134d0:	885b      	ldrh	r3, [r3, #2]
 80134d2:	2b01      	cmp	r3, #1
 80134d4:	d10c      	bne.n	80134f0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	2200      	movs	r2, #0
 80134da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80134de:	6878      	ldr	r0, [r7, #4]
 80134e0:	f000 f91c 	bl	801371c <USBD_CtlSendStatus>
      }
      break;
 80134e4:	e004      	b.n	80134f0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80134e6:	6839      	ldr	r1, [r7, #0]
 80134e8:	6878      	ldr	r0, [r7, #4]
 80134ea:	f000 f840 	bl	801356e <USBD_CtlError>
      break;
 80134ee:	e000      	b.n	80134f2 <USBD_ClrFeature+0x3c>
      break;
 80134f0:	bf00      	nop
  }
}
 80134f2:	bf00      	nop
 80134f4:	3708      	adds	r7, #8
 80134f6:	46bd      	mov	sp, r7
 80134f8:	bd80      	pop	{r7, pc}

080134fa <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80134fa:	b580      	push	{r7, lr}
 80134fc:	b084      	sub	sp, #16
 80134fe:	af00      	add	r7, sp, #0
 8013500:	6078      	str	r0, [r7, #4]
 8013502:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8013504:	683b      	ldr	r3, [r7, #0]
 8013506:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	781a      	ldrb	r2, [r3, #0]
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	3301      	adds	r3, #1
 8013514:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	781a      	ldrb	r2, [r3, #0]
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	3301      	adds	r3, #1
 8013522:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8013524:	68f8      	ldr	r0, [r7, #12]
 8013526:	f7ff fa16 	bl	8012956 <SWAPBYTE>
 801352a:	4603      	mov	r3, r0
 801352c:	461a      	mov	r2, r3
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	3301      	adds	r3, #1
 8013536:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	3301      	adds	r3, #1
 801353c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801353e:	68f8      	ldr	r0, [r7, #12]
 8013540:	f7ff fa09 	bl	8012956 <SWAPBYTE>
 8013544:	4603      	mov	r3, r0
 8013546:	461a      	mov	r2, r3
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	3301      	adds	r3, #1
 8013550:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	3301      	adds	r3, #1
 8013556:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8013558:	68f8      	ldr	r0, [r7, #12]
 801355a:	f7ff f9fc 	bl	8012956 <SWAPBYTE>
 801355e:	4603      	mov	r3, r0
 8013560:	461a      	mov	r2, r3
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	80da      	strh	r2, [r3, #6]
}
 8013566:	bf00      	nop
 8013568:	3710      	adds	r7, #16
 801356a:	46bd      	mov	sp, r7
 801356c:	bd80      	pop	{r7, pc}

0801356e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801356e:	b580      	push	{r7, lr}
 8013570:	b082      	sub	sp, #8
 8013572:	af00      	add	r7, sp, #0
 8013574:	6078      	str	r0, [r7, #4]
 8013576:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013578:	2180      	movs	r1, #128	@ 0x80
 801357a:	6878      	ldr	r0, [r7, #4]
 801357c:	f004 fee8 	bl	8018350 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8013580:	2100      	movs	r1, #0
 8013582:	6878      	ldr	r0, [r7, #4]
 8013584:	f004 fee4 	bl	8018350 <USBD_LL_StallEP>
}
 8013588:	bf00      	nop
 801358a:	3708      	adds	r7, #8
 801358c:	46bd      	mov	sp, r7
 801358e:	bd80      	pop	{r7, pc}

08013590 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8013590:	b580      	push	{r7, lr}
 8013592:	b086      	sub	sp, #24
 8013594:	af00      	add	r7, sp, #0
 8013596:	60f8      	str	r0, [r7, #12]
 8013598:	60b9      	str	r1, [r7, #8]
 801359a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801359c:	2300      	movs	r3, #0
 801359e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d042      	beq.n	801362c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80135aa:	6938      	ldr	r0, [r7, #16]
 80135ac:	f000 f842 	bl	8013634 <USBD_GetLen>
 80135b0:	4603      	mov	r3, r0
 80135b2:	3301      	adds	r3, #1
 80135b4:	005b      	lsls	r3, r3, #1
 80135b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80135ba:	d808      	bhi.n	80135ce <USBD_GetString+0x3e>
 80135bc:	6938      	ldr	r0, [r7, #16]
 80135be:	f000 f839 	bl	8013634 <USBD_GetLen>
 80135c2:	4603      	mov	r3, r0
 80135c4:	3301      	adds	r3, #1
 80135c6:	b29b      	uxth	r3, r3
 80135c8:	005b      	lsls	r3, r3, #1
 80135ca:	b29a      	uxth	r2, r3
 80135cc:	e001      	b.n	80135d2 <USBD_GetString+0x42>
 80135ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80135d6:	7dfb      	ldrb	r3, [r7, #23]
 80135d8:	68ba      	ldr	r2, [r7, #8]
 80135da:	4413      	add	r3, r2
 80135dc:	687a      	ldr	r2, [r7, #4]
 80135de:	7812      	ldrb	r2, [r2, #0]
 80135e0:	701a      	strb	r2, [r3, #0]
  idx++;
 80135e2:	7dfb      	ldrb	r3, [r7, #23]
 80135e4:	3301      	adds	r3, #1
 80135e6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80135e8:	7dfb      	ldrb	r3, [r7, #23]
 80135ea:	68ba      	ldr	r2, [r7, #8]
 80135ec:	4413      	add	r3, r2
 80135ee:	2203      	movs	r2, #3
 80135f0:	701a      	strb	r2, [r3, #0]
  idx++;
 80135f2:	7dfb      	ldrb	r3, [r7, #23]
 80135f4:	3301      	adds	r3, #1
 80135f6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80135f8:	e013      	b.n	8013622 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80135fa:	7dfb      	ldrb	r3, [r7, #23]
 80135fc:	68ba      	ldr	r2, [r7, #8]
 80135fe:	4413      	add	r3, r2
 8013600:	693a      	ldr	r2, [r7, #16]
 8013602:	7812      	ldrb	r2, [r2, #0]
 8013604:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8013606:	693b      	ldr	r3, [r7, #16]
 8013608:	3301      	adds	r3, #1
 801360a:	613b      	str	r3, [r7, #16]
    idx++;
 801360c:	7dfb      	ldrb	r3, [r7, #23]
 801360e:	3301      	adds	r3, #1
 8013610:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8013612:	7dfb      	ldrb	r3, [r7, #23]
 8013614:	68ba      	ldr	r2, [r7, #8]
 8013616:	4413      	add	r3, r2
 8013618:	2200      	movs	r2, #0
 801361a:	701a      	strb	r2, [r3, #0]
    idx++;
 801361c:	7dfb      	ldrb	r3, [r7, #23]
 801361e:	3301      	adds	r3, #1
 8013620:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8013622:	693b      	ldr	r3, [r7, #16]
 8013624:	781b      	ldrb	r3, [r3, #0]
 8013626:	2b00      	cmp	r3, #0
 8013628:	d1e7      	bne.n	80135fa <USBD_GetString+0x6a>
 801362a:	e000      	b.n	801362e <USBD_GetString+0x9e>
    return;
 801362c:	bf00      	nop
  }
}
 801362e:	3718      	adds	r7, #24
 8013630:	46bd      	mov	sp, r7
 8013632:	bd80      	pop	{r7, pc}

08013634 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8013634:	b480      	push	{r7}
 8013636:	b085      	sub	sp, #20
 8013638:	af00      	add	r7, sp, #0
 801363a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801363c:	2300      	movs	r3, #0
 801363e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8013644:	e005      	b.n	8013652 <USBD_GetLen+0x1e>
  {
    len++;
 8013646:	7bfb      	ldrb	r3, [r7, #15]
 8013648:	3301      	adds	r3, #1
 801364a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801364c:	68bb      	ldr	r3, [r7, #8]
 801364e:	3301      	adds	r3, #1
 8013650:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8013652:	68bb      	ldr	r3, [r7, #8]
 8013654:	781b      	ldrb	r3, [r3, #0]
 8013656:	2b00      	cmp	r3, #0
 8013658:	d1f5      	bne.n	8013646 <USBD_GetLen+0x12>
  }

  return len;
 801365a:	7bfb      	ldrb	r3, [r7, #15]
}
 801365c:	4618      	mov	r0, r3
 801365e:	3714      	adds	r7, #20
 8013660:	46bd      	mov	sp, r7
 8013662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013666:	4770      	bx	lr

08013668 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8013668:	b580      	push	{r7, lr}
 801366a:	b084      	sub	sp, #16
 801366c:	af00      	add	r7, sp, #0
 801366e:	60f8      	str	r0, [r7, #12]
 8013670:	60b9      	str	r1, [r7, #8]
 8013672:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	2202      	movs	r2, #2
 8013678:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	687a      	ldr	r2, [r7, #4]
 8013680:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	687a      	ldr	r2, [r7, #4]
 8013686:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	68ba      	ldr	r2, [r7, #8]
 801368c:	2100      	movs	r1, #0
 801368e:	68f8      	ldr	r0, [r7, #12]
 8013690:	f004 fee7 	bl	8018462 <USBD_LL_Transmit>

  return USBD_OK;
 8013694:	2300      	movs	r3, #0
}
 8013696:	4618      	mov	r0, r3
 8013698:	3710      	adds	r7, #16
 801369a:	46bd      	mov	sp, r7
 801369c:	bd80      	pop	{r7, pc}

0801369e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801369e:	b580      	push	{r7, lr}
 80136a0:	b084      	sub	sp, #16
 80136a2:	af00      	add	r7, sp, #0
 80136a4:	60f8      	str	r0, [r7, #12]
 80136a6:	60b9      	str	r1, [r7, #8]
 80136a8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	68ba      	ldr	r2, [r7, #8]
 80136ae:	2100      	movs	r1, #0
 80136b0:	68f8      	ldr	r0, [r7, #12]
 80136b2:	f004 fed6 	bl	8018462 <USBD_LL_Transmit>

  return USBD_OK;
 80136b6:	2300      	movs	r3, #0
}
 80136b8:	4618      	mov	r0, r3
 80136ba:	3710      	adds	r7, #16
 80136bc:	46bd      	mov	sp, r7
 80136be:	bd80      	pop	{r7, pc}

080136c0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80136c0:	b580      	push	{r7, lr}
 80136c2:	b084      	sub	sp, #16
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	60f8      	str	r0, [r7, #12]
 80136c8:	60b9      	str	r1, [r7, #8]
 80136ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	2203      	movs	r2, #3
 80136d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	687a      	ldr	r2, [r7, #4]
 80136d8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	687a      	ldr	r2, [r7, #4]
 80136e0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	68ba      	ldr	r2, [r7, #8]
 80136e8:	2100      	movs	r1, #0
 80136ea:	68f8      	ldr	r0, [r7, #12]
 80136ec:	f004 feda 	bl	80184a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80136f0:	2300      	movs	r3, #0
}
 80136f2:	4618      	mov	r0, r3
 80136f4:	3710      	adds	r7, #16
 80136f6:	46bd      	mov	sp, r7
 80136f8:	bd80      	pop	{r7, pc}

080136fa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80136fa:	b580      	push	{r7, lr}
 80136fc:	b084      	sub	sp, #16
 80136fe:	af00      	add	r7, sp, #0
 8013700:	60f8      	str	r0, [r7, #12]
 8013702:	60b9      	str	r1, [r7, #8]
 8013704:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	68ba      	ldr	r2, [r7, #8]
 801370a:	2100      	movs	r1, #0
 801370c:	68f8      	ldr	r0, [r7, #12]
 801370e:	f004 fec9 	bl	80184a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013712:	2300      	movs	r3, #0
}
 8013714:	4618      	mov	r0, r3
 8013716:	3710      	adds	r7, #16
 8013718:	46bd      	mov	sp, r7
 801371a:	bd80      	pop	{r7, pc}

0801371c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801371c:	b580      	push	{r7, lr}
 801371e:	b082      	sub	sp, #8
 8013720:	af00      	add	r7, sp, #0
 8013722:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	2204      	movs	r2, #4
 8013728:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801372c:	2300      	movs	r3, #0
 801372e:	2200      	movs	r2, #0
 8013730:	2100      	movs	r1, #0
 8013732:	6878      	ldr	r0, [r7, #4]
 8013734:	f004 fe95 	bl	8018462 <USBD_LL_Transmit>

  return USBD_OK;
 8013738:	2300      	movs	r3, #0
}
 801373a:	4618      	mov	r0, r3
 801373c:	3708      	adds	r7, #8
 801373e:	46bd      	mov	sp, r7
 8013740:	bd80      	pop	{r7, pc}

08013742 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8013742:	b580      	push	{r7, lr}
 8013744:	b082      	sub	sp, #8
 8013746:	af00      	add	r7, sp, #0
 8013748:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	2205      	movs	r2, #5
 801374e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013752:	2300      	movs	r3, #0
 8013754:	2200      	movs	r2, #0
 8013756:	2100      	movs	r1, #0
 8013758:	6878      	ldr	r0, [r7, #4]
 801375a:	f004 fea3 	bl	80184a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801375e:	2300      	movs	r3, #0
}
 8013760:	4618      	mov	r0, r3
 8013762:	3708      	adds	r7, #8
 8013764:	46bd      	mov	sp, r7
 8013766:	bd80      	pop	{r7, pc}

08013768 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8013768:	b580      	push	{r7, lr}
 801376a:	b088      	sub	sp, #32
 801376c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 801376e:	2300      	movs	r3, #0
 8013770:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8013772:	f107 0308 	add.w	r3, r7, #8
 8013776:	2218      	movs	r2, #24
 8013778:	2100      	movs	r1, #0
 801377a:	4618      	mov	r0, r3
 801377c:	f001 f92d 	bl	80149da <Osal_MemSet>
  rq.ogf = 0x3f;
 8013780:	233f      	movs	r3, #63	@ 0x3f
 8013782:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8013784:	2381      	movs	r3, #129	@ 0x81
 8013786:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8013788:	1dfb      	adds	r3, r7, #7
 801378a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 801378c:	2301      	movs	r3, #1
 801378e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8013790:	f107 0308 	add.w	r3, r7, #8
 8013794:	2100      	movs	r1, #0
 8013796:	4618      	mov	r0, r3
 8013798:	f001 fba8 	bl	8014eec <hci_send_req>
 801379c:	4603      	mov	r3, r0
 801379e:	2b00      	cmp	r3, #0
 80137a0:	da01      	bge.n	80137a6 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80137a2:	23ff      	movs	r3, #255	@ 0xff
 80137a4:	e000      	b.n	80137a8 <aci_gap_set_non_discoverable+0x40>
  return status;
 80137a6:	79fb      	ldrb	r3, [r7, #7]
}
 80137a8:	4618      	mov	r0, r3
 80137aa:	3720      	adds	r7, #32
 80137ac:	46bd      	mov	sp, r7
 80137ae:	bd80      	pop	{r7, pc}

080137b0 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 80137b0:	b5b0      	push	{r4, r5, r7, lr}
 80137b2:	b0ce      	sub	sp, #312	@ 0x138
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	4605      	mov	r5, r0
 80137b8:	460c      	mov	r4, r1
 80137ba:	4610      	mov	r0, r2
 80137bc:	4619      	mov	r1, r3
 80137be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80137c2:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80137c6:	462a      	mov	r2, r5
 80137c8:	701a      	strb	r2, [r3, #0]
 80137ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80137ce:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80137d2:	4622      	mov	r2, r4
 80137d4:	801a      	strh	r2, [r3, #0]
 80137d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80137da:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80137de:	4602      	mov	r2, r0
 80137e0:	801a      	strh	r2, [r3, #0]
 80137e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80137e6:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80137ea:	460a      	mov	r2, r1
 80137ec:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80137ee:	f107 0310 	add.w	r3, r7, #16
 80137f2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80137f6:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80137fa:	3308      	adds	r3, #8
 80137fc:	f107 0210 	add.w	r2, r7, #16
 8013800:	4413      	add	r3, r2
 8013802:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8013806:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 801380a:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 801380e:	4413      	add	r3, r2
 8013810:	3309      	adds	r3, #9
 8013812:	f107 0210 	add.w	r2, r7, #16
 8013816:	4413      	add	r3, r2
 8013818:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801381c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013820:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8013824:	2200      	movs	r2, #0
 8013826:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8013828:	2300      	movs	r3, #0
 801382a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 801382e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013832:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8013836:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 801383a:	7812      	ldrb	r2, [r2, #0]
 801383c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801383e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013842:	3301      	adds	r3, #1
 8013844:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8013848:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801384c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8013850:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8013854:	8812      	ldrh	r2, [r2, #0]
 8013856:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 801385a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801385e:	3302      	adds	r3, #2
 8013860:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8013864:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013868:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801386c:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8013870:	8812      	ldrh	r2, [r2, #0]
 8013872:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8013876:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801387a:	3302      	adds	r3, #2
 801387c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8013880:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013884:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8013888:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 801388c:	7812      	ldrb	r2, [r2, #0]
 801388e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8013890:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013894:	3301      	adds	r3, #1
 8013896:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 801389a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801389e:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80138a2:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80138a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80138a8:	3301      	adds	r3, #1
 80138aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80138ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80138b2:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80138b6:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80138b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80138bc:	3301      	adds	r3, #1
 80138be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80138c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80138c6:	3308      	adds	r3, #8
 80138c8:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80138cc:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 80138d0:	4618      	mov	r0, r3
 80138d2:	f001 f872 	bl	80149ba <Osal_MemCpy>
    index_input += Local_Name_Length;
 80138d6:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80138da:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80138de:	4413      	add	r3, r2
 80138e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80138e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80138e8:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80138ec:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80138ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80138f2:	3301      	adds	r3, #1
 80138f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80138f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80138fc:	3301      	adds	r3, #1
 80138fe:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8013902:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8013906:	4618      	mov	r0, r3
 8013908:	f001 f857 	bl	80149ba <Osal_MemCpy>
    index_input += Service_Uuid_length;
 801390c:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8013910:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8013914:	4413      	add	r3, r2
 8013916:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 801391a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801391e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8013922:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8013924:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013928:	3302      	adds	r3, #2
 801392a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 801392e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013932:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8013936:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8013938:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801393c:	3302      	adds	r3, #2
 801393e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8013942:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013946:	2218      	movs	r2, #24
 8013948:	2100      	movs	r1, #0
 801394a:	4618      	mov	r0, r3
 801394c:	f001 f845 	bl	80149da <Osal_MemSet>
  rq.ogf = 0x3f;
 8013950:	233f      	movs	r3, #63	@ 0x3f
 8013952:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8013956:	2383      	movs	r3, #131	@ 0x83
 8013958:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801395c:	f107 0310 	add.w	r3, r7, #16
 8013960:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8013964:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013968:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801396c:	f107 030f 	add.w	r3, r7, #15
 8013970:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8013974:	2301      	movs	r3, #1
 8013976:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801397a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801397e:	2100      	movs	r1, #0
 8013980:	4618      	mov	r0, r3
 8013982:	f001 fab3 	bl	8014eec <hci_send_req>
 8013986:	4603      	mov	r3, r0
 8013988:	2b00      	cmp	r3, #0
 801398a:	da01      	bge.n	8013990 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 801398c:	23ff      	movs	r3, #255	@ 0xff
 801398e:	e004      	b.n	801399a <aci_gap_set_discoverable+0x1ea>
  return status;
 8013990:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013994:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8013998:	781b      	ldrb	r3, [r3, #0]
}
 801399a:	4618      	mov	r0, r3
 801399c:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80139a0:	46bd      	mov	sp, r7
 80139a2:	bdb0      	pop	{r4, r5, r7, pc}

080139a4 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80139a4:	b580      	push	{r7, lr}
 80139a6:	b0cc      	sub	sp, #304	@ 0x130
 80139a8:	af00      	add	r7, sp, #0
 80139aa:	4602      	mov	r2, r0
 80139ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80139b0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80139b4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80139b6:	f107 0310 	add.w	r3, r7, #16
 80139ba:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80139be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80139c2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80139c6:	2200      	movs	r2, #0
 80139c8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80139ca:	2300      	movs	r3, #0
 80139cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 80139d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80139d4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80139d8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80139dc:	7812      	ldrb	r2, [r2, #0]
 80139de:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80139e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80139e4:	3301      	adds	r3, #1
 80139e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80139ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80139ee:	2218      	movs	r2, #24
 80139f0:	2100      	movs	r1, #0
 80139f2:	4618      	mov	r0, r3
 80139f4:	f000 fff1 	bl	80149da <Osal_MemSet>
  rq.ogf = 0x3f;
 80139f8:	233f      	movs	r3, #63	@ 0x3f
 80139fa:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 80139fe:	2385      	movs	r3, #133	@ 0x85
 8013a00:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8013a04:	f107 0310 	add.w	r3, r7, #16
 8013a08:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8013a0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013a10:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8013a14:	f107 030f 	add.w	r3, r7, #15
 8013a18:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8013a1c:	2301      	movs	r3, #1
 8013a1e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8013a22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013a26:	2100      	movs	r1, #0
 8013a28:	4618      	mov	r0, r3
 8013a2a:	f001 fa5f 	bl	8014eec <hci_send_req>
 8013a2e:	4603      	mov	r3, r0
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	da01      	bge.n	8013a38 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8013a34:	23ff      	movs	r3, #255	@ 0xff
 8013a36:	e004      	b.n	8013a42 <aci_gap_set_io_capability+0x9e>
  return status;
 8013a38:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013a3c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8013a40:	781b      	ldrb	r3, [r3, #0]
}
 8013a42:	4618      	mov	r0, r3
 8013a44:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8013a48:	46bd      	mov	sp, r7
 8013a4a:	bd80      	pop	{r7, pc}

08013a4c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8013a4c:	b5b0      	push	{r4, r5, r7, lr}
 8013a4e:	b0cc      	sub	sp, #304	@ 0x130
 8013a50:	af00      	add	r7, sp, #0
 8013a52:	4605      	mov	r5, r0
 8013a54:	460c      	mov	r4, r1
 8013a56:	4610      	mov	r0, r2
 8013a58:	4619      	mov	r1, r3
 8013a5a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013a5e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8013a62:	462a      	mov	r2, r5
 8013a64:	701a      	strb	r2, [r3, #0]
 8013a66:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013a6a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8013a6e:	4622      	mov	r2, r4
 8013a70:	701a      	strb	r2, [r3, #0]
 8013a72:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013a76:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8013a7a:	4602      	mov	r2, r0
 8013a7c:	701a      	strb	r2, [r3, #0]
 8013a7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013a82:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013a86:	460a      	mov	r2, r1
 8013a88:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8013a8a:	f107 0310 	add.w	r3, r7, #16
 8013a8e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8013a92:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013a96:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8013a9a:	2200      	movs	r2, #0
 8013a9c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8013a9e:	2300      	movs	r3, #0
 8013aa0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8013aa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013aa8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8013aac:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8013ab0:	7812      	ldrb	r2, [r2, #0]
 8013ab2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8013ab4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013ab8:	3301      	adds	r3, #1
 8013aba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8013abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013ac2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8013ac6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8013aca:	7812      	ldrb	r2, [r2, #0]
 8013acc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8013ace:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013ad2:	3301      	adds	r3, #1
 8013ad4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8013ad8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013adc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8013ae0:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8013ae4:	7812      	ldrb	r2, [r2, #0]
 8013ae6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8013ae8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013aec:	3301      	adds	r3, #1
 8013aee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8013af2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013af6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8013afa:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8013afe:	7812      	ldrb	r2, [r2, #0]
 8013b00:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8013b02:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013b06:	3301      	adds	r3, #1
 8013b08:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8013b0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013b10:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8013b14:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8013b16:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013b1a:	3301      	adds	r3, #1
 8013b1c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8013b20:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013b24:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8013b28:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8013b2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013b2e:	3301      	adds	r3, #1
 8013b30:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8013b34:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013b38:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8013b3c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8013b3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013b42:	3301      	adds	r3, #1
 8013b44:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8013b48:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013b4c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8013b50:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8013b54:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013b58:	3304      	adds	r3, #4
 8013b5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8013b5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013b62:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8013b66:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8013b68:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013b6c:	3301      	adds	r3, #1
 8013b6e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8013b72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013b76:	2218      	movs	r2, #24
 8013b78:	2100      	movs	r1, #0
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	f000 ff2d 	bl	80149da <Osal_MemSet>
  rq.ogf = 0x3f;
 8013b80:	233f      	movs	r3, #63	@ 0x3f
 8013b82:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8013b86:	2386      	movs	r3, #134	@ 0x86
 8013b88:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8013b8c:	f107 0310 	add.w	r3, r7, #16
 8013b90:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8013b94:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013b98:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8013b9c:	f107 030f 	add.w	r3, r7, #15
 8013ba0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8013ba4:	2301      	movs	r3, #1
 8013ba6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8013baa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013bae:	2100      	movs	r1, #0
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	f001 f99b 	bl	8014eec <hci_send_req>
 8013bb6:	4603      	mov	r3, r0
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	da01      	bge.n	8013bc0 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8013bbc:	23ff      	movs	r3, #255	@ 0xff
 8013bbe:	e004      	b.n	8013bca <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8013bc0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013bc4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8013bc8:	781b      	ldrb	r3, [r3, #0]
}
 8013bca:	4618      	mov	r0, r3
 8013bcc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8013bd0:	46bd      	mov	sp, r7
 8013bd2:	bdb0      	pop	{r4, r5, r7, pc}

08013bd4 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8013bd4:	b580      	push	{r7, lr}
 8013bd6:	b0cc      	sub	sp, #304	@ 0x130
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	4602      	mov	r2, r0
 8013bdc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013be0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8013be4:	6019      	str	r1, [r3, #0]
 8013be6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013bea:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8013bee:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8013bf0:	f107 0310 	add.w	r3, r7, #16
 8013bf4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8013bf8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013bfc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8013c00:	2200      	movs	r2, #0
 8013c02:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8013c04:	2300      	movs	r3, #0
 8013c06:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8013c0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013c0e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8013c12:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8013c16:	8812      	ldrh	r2, [r2, #0]
 8013c18:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8013c1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013c1e:	3302      	adds	r3, #2
 8013c20:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8013c24:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013c28:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8013c2c:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8013c30:	6812      	ldr	r2, [r2, #0]
 8013c32:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8013c36:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013c3a:	3304      	adds	r3, #4
 8013c3c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8013c40:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013c44:	2218      	movs	r2, #24
 8013c46:	2100      	movs	r1, #0
 8013c48:	4618      	mov	r0, r3
 8013c4a:	f000 fec6 	bl	80149da <Osal_MemSet>
  rq.ogf = 0x3f;
 8013c4e:	233f      	movs	r3, #63	@ 0x3f
 8013c50:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8013c54:	2388      	movs	r3, #136	@ 0x88
 8013c56:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8013c5a:	f107 0310 	add.w	r3, r7, #16
 8013c5e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8013c62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013c66:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8013c6a:	f107 030f 	add.w	r3, r7, #15
 8013c6e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8013c72:	2301      	movs	r3, #1
 8013c74:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8013c78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013c7c:	2100      	movs	r1, #0
 8013c7e:	4618      	mov	r0, r3
 8013c80:	f001 f934 	bl	8014eec <hci_send_req>
 8013c84:	4603      	mov	r3, r0
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	da01      	bge.n	8013c8e <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8013c8a:	23ff      	movs	r3, #255	@ 0xff
 8013c8c:	e004      	b.n	8013c98 <aci_gap_pass_key_resp+0xc4>
  return status;
 8013c8e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013c92:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8013c96:	781b      	ldrb	r3, [r3, #0]
}
 8013c98:	4618      	mov	r0, r3
 8013c9a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8013c9e:	46bd      	mov	sp, r7
 8013ca0:	bd80      	pop	{r7, pc}

08013ca2 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8013ca2:	b590      	push	{r4, r7, lr}
 8013ca4:	b0cd      	sub	sp, #308	@ 0x134
 8013ca6:	af00      	add	r7, sp, #0
 8013ca8:	4604      	mov	r4, r0
 8013caa:	4608      	mov	r0, r1
 8013cac:	4611      	mov	r1, r2
 8013cae:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8013cb2:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8013cb6:	6013      	str	r3, [r2, #0]
 8013cb8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013cbc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8013cc0:	4622      	mov	r2, r4
 8013cc2:	701a      	strb	r2, [r3, #0]
 8013cc4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013cc8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8013ccc:	4602      	mov	r2, r0
 8013cce:	701a      	strb	r2, [r3, #0]
 8013cd0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013cd4:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8013cd8:	460a      	mov	r2, r1
 8013cda:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8013cdc:	f107 0310 	add.w	r3, r7, #16
 8013ce0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8013ce4:	f107 0308 	add.w	r3, r7, #8
 8013ce8:	2207      	movs	r2, #7
 8013cea:	2100      	movs	r1, #0
 8013cec:	4618      	mov	r0, r3
 8013cee:	f000 fe74 	bl	80149da <Osal_MemSet>
  int index_input = 0;
 8013cf2:	2300      	movs	r3, #0
 8013cf4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8013cf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013cfc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8013d00:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8013d04:	7812      	ldrb	r2, [r2, #0]
 8013d06:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8013d08:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013d0c:	3301      	adds	r3, #1
 8013d0e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8013d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013d16:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8013d1a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8013d1e:	7812      	ldrb	r2, [r2, #0]
 8013d20:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8013d22:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013d26:	3301      	adds	r3, #1
 8013d28:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8013d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013d30:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8013d34:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8013d38:	7812      	ldrb	r2, [r2, #0]
 8013d3a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8013d3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013d40:	3301      	adds	r3, #1
 8013d42:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8013d46:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013d4a:	2218      	movs	r2, #24
 8013d4c:	2100      	movs	r1, #0
 8013d4e:	4618      	mov	r0, r3
 8013d50:	f000 fe43 	bl	80149da <Osal_MemSet>
  rq.ogf = 0x3f;
 8013d54:	233f      	movs	r3, #63	@ 0x3f
 8013d56:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8013d5a:	238a      	movs	r3, #138	@ 0x8a
 8013d5c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8013d60:	f107 0310 	add.w	r3, r7, #16
 8013d64:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8013d68:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013d6c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8013d70:	f107 0308 	add.w	r3, r7, #8
 8013d74:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8013d78:	2307      	movs	r3, #7
 8013d7a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8013d7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013d82:	2100      	movs	r1, #0
 8013d84:	4618      	mov	r0, r3
 8013d86:	f001 f8b1 	bl	8014eec <hci_send_req>
 8013d8a:	4603      	mov	r3, r0
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	da01      	bge.n	8013d94 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8013d90:	23ff      	movs	r3, #255	@ 0xff
 8013d92:	e02e      	b.n	8013df2 <aci_gap_init+0x150>
  if ( resp.Status )
 8013d94:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013d98:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8013d9c:	781b      	ldrb	r3, [r3, #0]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d005      	beq.n	8013dae <aci_gap_init+0x10c>
    return resp.Status;
 8013da2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013da6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8013daa:	781b      	ldrb	r3, [r3, #0]
 8013dac:	e021      	b.n	8013df2 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8013dae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013db2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8013db6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8013dba:	b29a      	uxth	r2, r3
 8013dbc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013dc0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8013dc8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013dcc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8013dd0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8013dd4:	b29a      	uxth	r2, r3
 8013dd6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8013dda:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8013ddc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013de0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8013de4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8013de8:	b29a      	uxth	r2, r3
 8013dea:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8013dee:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8013df0:	2300      	movs	r3, #0
}
 8013df2:	4618      	mov	r0, r3
 8013df4:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8013df8:	46bd      	mov	sp, r7
 8013dfa:	bd90      	pop	{r4, r7, pc}

08013dfc <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	b0cc      	sub	sp, #304	@ 0x130
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	4602      	mov	r2, r0
 8013e04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013e08:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8013e0c:	6019      	str	r1, [r3, #0]
 8013e0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013e12:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8013e16:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8013e18:	f107 0310 	add.w	r3, r7, #16
 8013e1c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8013e20:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013e24:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8013e28:	2200      	movs	r2, #0
 8013e2a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8013e32:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013e36:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8013e3a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8013e3e:	7812      	ldrb	r2, [r2, #0]
 8013e40:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8013e42:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013e46:	3301      	adds	r3, #1
 8013e48:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8013e4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013e50:	1c58      	adds	r0, r3, #1
 8013e52:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013e56:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8013e5a:	781a      	ldrb	r2, [r3, #0]
 8013e5c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013e60:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8013e64:	6819      	ldr	r1, [r3, #0]
 8013e66:	f000 fda8 	bl	80149ba <Osal_MemCpy>
  index_input += AdvDataLen;
 8013e6a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013e6e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8013e72:	781b      	ldrb	r3, [r3, #0]
 8013e74:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8013e78:	4413      	add	r3, r2
 8013e7a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8013e7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013e82:	2218      	movs	r2, #24
 8013e84:	2100      	movs	r1, #0
 8013e86:	4618      	mov	r0, r3
 8013e88:	f000 fda7 	bl	80149da <Osal_MemSet>
  rq.ogf = 0x3f;
 8013e8c:	233f      	movs	r3, #63	@ 0x3f
 8013e8e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8013e92:	238e      	movs	r3, #142	@ 0x8e
 8013e94:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8013e98:	f107 0310 	add.w	r3, r7, #16
 8013e9c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8013ea0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013ea4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8013ea8:	f107 030f 	add.w	r3, r7, #15
 8013eac:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8013eb0:	2301      	movs	r3, #1
 8013eb2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8013eb6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013eba:	2100      	movs	r1, #0
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	f001 f815 	bl	8014eec <hci_send_req>
 8013ec2:	4603      	mov	r3, r0
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	da01      	bge.n	8013ecc <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8013ec8:	23ff      	movs	r3, #255	@ 0xff
 8013eca:	e004      	b.n	8013ed6 <aci_gap_update_adv_data+0xda>
  return status;
 8013ecc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013ed0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8013ed4:	781b      	ldrb	r3, [r3, #0]
}
 8013ed6:	4618      	mov	r0, r3
 8013ed8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8013edc:	46bd      	mov	sp, r7
 8013ede:	bd80      	pop	{r7, pc}

08013ee0 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8013ee0:	b580      	push	{r7, lr}
 8013ee2:	b088      	sub	sp, #32
 8013ee4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8013ee6:	2300      	movs	r3, #0
 8013ee8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8013eea:	f107 0308 	add.w	r3, r7, #8
 8013eee:	2218      	movs	r2, #24
 8013ef0:	2100      	movs	r1, #0
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	f000 fd71 	bl	80149da <Osal_MemSet>
  rq.ogf = 0x3f;
 8013ef8:	233f      	movs	r3, #63	@ 0x3f
 8013efa:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8013efc:	2392      	movs	r3, #146	@ 0x92
 8013efe:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8013f00:	1dfb      	adds	r3, r7, #7
 8013f02:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8013f04:	2301      	movs	r3, #1
 8013f06:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8013f08:	f107 0308 	add.w	r3, r7, #8
 8013f0c:	2100      	movs	r1, #0
 8013f0e:	4618      	mov	r0, r3
 8013f10:	f000 ffec 	bl	8014eec <hci_send_req>
 8013f14:	4603      	mov	r3, r0
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	da01      	bge.n	8013f1e <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8013f1a:	23ff      	movs	r3, #255	@ 0xff
 8013f1c:	e000      	b.n	8013f20 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8013f1e:	79fb      	ldrb	r3, [r7, #7]
}
 8013f20:	4618      	mov	r0, r3
 8013f22:	3720      	adds	r7, #32
 8013f24:	46bd      	mov	sp, r7
 8013f26:	bd80      	pop	{r7, pc}

08013f28 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8013f28:	b580      	push	{r7, lr}
 8013f2a:	b0cc      	sub	sp, #304	@ 0x130
 8013f2c:	af00      	add	r7, sp, #0
 8013f2e:	4602      	mov	r2, r0
 8013f30:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013f34:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8013f38:	801a      	strh	r2, [r3, #0]
 8013f3a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013f3e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8013f42:	460a      	mov	r2, r1
 8013f44:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8013f46:	f107 0310 	add.w	r3, r7, #16
 8013f4a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8013f4e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013f52:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8013f56:	2200      	movs	r2, #0
 8013f58:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8013f60:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013f64:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8013f68:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8013f6c:	8812      	ldrh	r2, [r2, #0]
 8013f6e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8013f70:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013f74:	3302      	adds	r3, #2
 8013f76:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8013f7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013f7e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8013f82:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8013f86:	7812      	ldrb	r2, [r2, #0]
 8013f88:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8013f8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013f8e:	3301      	adds	r3, #1
 8013f90:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8013f94:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013f98:	2218      	movs	r2, #24
 8013f9a:	2100      	movs	r1, #0
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	f000 fd1c 	bl	80149da <Osal_MemSet>
  rq.ogf = 0x3f;
 8013fa2:	233f      	movs	r3, #63	@ 0x3f
 8013fa4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8013fa8:	23a5      	movs	r3, #165	@ 0xa5
 8013faa:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8013fae:	f107 0310 	add.w	r3, r7, #16
 8013fb2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8013fb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013fba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8013fbe:	f107 030f 	add.w	r3, r7, #15
 8013fc2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8013fc6:	2301      	movs	r3, #1
 8013fc8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8013fcc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013fd0:	2100      	movs	r1, #0
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	f000 ff8a 	bl	8014eec <hci_send_req>
 8013fd8:	4603      	mov	r3, r0
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	da01      	bge.n	8013fe2 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8013fde:	23ff      	movs	r3, #255	@ 0xff
 8013fe0:	e004      	b.n	8013fec <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8013fe2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013fe6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8013fea:	781b      	ldrb	r3, [r3, #0]
}
 8013fec:	4618      	mov	r0, r3
 8013fee:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8013ff2:	46bd      	mov	sp, r7
 8013ff4:	bd80      	pop	{r7, pc}

08013ff6 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8013ff6:	b580      	push	{r7, lr}
 8013ff8:	b088      	sub	sp, #32
 8013ffa:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8013ffc:	2300      	movs	r3, #0
 8013ffe:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014000:	f107 0308 	add.w	r3, r7, #8
 8014004:	2218      	movs	r2, #24
 8014006:	2100      	movs	r1, #0
 8014008:	4618      	mov	r0, r3
 801400a:	f000 fce6 	bl	80149da <Osal_MemSet>
  rq.ogf = 0x3f;
 801400e:	233f      	movs	r3, #63	@ 0x3f
 8014010:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8014012:	f240 1301 	movw	r3, #257	@ 0x101
 8014016:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8014018:	1dfb      	adds	r3, r7, #7
 801401a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 801401c:	2301      	movs	r3, #1
 801401e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014020:	f107 0308 	add.w	r3, r7, #8
 8014024:	2100      	movs	r1, #0
 8014026:	4618      	mov	r0, r3
 8014028:	f000 ff60 	bl	8014eec <hci_send_req>
 801402c:	4603      	mov	r3, r0
 801402e:	2b00      	cmp	r3, #0
 8014030:	da01      	bge.n	8014036 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8014032:	23ff      	movs	r3, #255	@ 0xff
 8014034:	e000      	b.n	8014038 <aci_gatt_init+0x42>
  return status;
 8014036:	79fb      	ldrb	r3, [r7, #7]
}
 8014038:	4618      	mov	r0, r3
 801403a:	3720      	adds	r7, #32
 801403c:	46bd      	mov	sp, r7
 801403e:	bd80      	pop	{r7, pc}

08014040 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8014040:	b590      	push	{r4, r7, lr}
 8014042:	b0cf      	sub	sp, #316	@ 0x13c
 8014044:	af00      	add	r7, sp, #0
 8014046:	4604      	mov	r4, r0
 8014048:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 801404c:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8014050:	6001      	str	r1, [r0, #0]
 8014052:	4610      	mov	r0, r2
 8014054:	4619      	mov	r1, r3
 8014056:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801405a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 801405e:	4622      	mov	r2, r4
 8014060:	701a      	strb	r2, [r3, #0]
 8014062:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014066:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 801406a:	4602      	mov	r2, r0
 801406c:	701a      	strb	r2, [r3, #0]
 801406e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014072:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8014076:	460a      	mov	r2, r1
 8014078:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 801407a:	f107 0310 	add.w	r3, r7, #16
 801407e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8014082:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014086:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 801408a:	781b      	ldrb	r3, [r3, #0]
 801408c:	2b01      	cmp	r3, #1
 801408e:	d00a      	beq.n	80140a6 <aci_gatt_add_service+0x66>
 8014090:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014094:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8014098:	781b      	ldrb	r3, [r3, #0]
 801409a:	2b02      	cmp	r3, #2
 801409c:	d101      	bne.n	80140a2 <aci_gatt_add_service+0x62>
 801409e:	2311      	movs	r3, #17
 80140a0:	e002      	b.n	80140a8 <aci_gatt_add_service+0x68>
 80140a2:	2301      	movs	r3, #1
 80140a4:	e000      	b.n	80140a8 <aci_gatt_add_service+0x68>
 80140a6:	2303      	movs	r3, #3
 80140a8:	f107 0210 	add.w	r2, r7, #16
 80140ac:	4413      	add	r3, r2
 80140ae:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80140b2:	f107 030c 	add.w	r3, r7, #12
 80140b6:	2203      	movs	r2, #3
 80140b8:	2100      	movs	r1, #0
 80140ba:	4618      	mov	r0, r3
 80140bc:	f000 fc8d 	bl	80149da <Osal_MemSet>
  int index_input = 0;
 80140c0:	2300      	movs	r3, #0
 80140c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80140c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80140ca:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80140ce:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80140d2:	7812      	ldrb	r2, [r2, #0]
 80140d4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80140d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80140da:	3301      	adds	r3, #1
 80140dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80140e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80140e4:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80140e8:	781b      	ldrb	r3, [r3, #0]
 80140ea:	2b01      	cmp	r3, #1
 80140ec:	d002      	beq.n	80140f4 <aci_gatt_add_service+0xb4>
 80140ee:	2b02      	cmp	r3, #2
 80140f0:	d004      	beq.n	80140fc <aci_gatt_add_service+0xbc>
 80140f2:	e007      	b.n	8014104 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 80140f4:	2302      	movs	r3, #2
 80140f6:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80140fa:	e005      	b.n	8014108 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 80140fc:	2310      	movs	r3, #16
 80140fe:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8014102:	e001      	b.n	8014108 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8014104:	2397      	movs	r3, #151	@ 0x97
 8014106:	e06c      	b.n	80141e2 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8014108:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801410c:	1c58      	adds	r0, r3, #1
 801410e:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8014112:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014116:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801411a:	6819      	ldr	r1, [r3, #0]
 801411c:	f000 fc4d 	bl	80149ba <Osal_MemCpy>
    index_input += size;
 8014120:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8014124:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8014128:	4413      	add	r3, r2
 801412a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 801412e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014132:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014136:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 801413a:	7812      	ldrb	r2, [r2, #0]
 801413c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 801413e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014142:	3301      	adds	r3, #1
 8014144:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8014148:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801414c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014150:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8014154:	7812      	ldrb	r2, [r2, #0]
 8014156:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8014158:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801415c:	3301      	adds	r3, #1
 801415e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014162:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014166:	2218      	movs	r2, #24
 8014168:	2100      	movs	r1, #0
 801416a:	4618      	mov	r0, r3
 801416c:	f000 fc35 	bl	80149da <Osal_MemSet>
  rq.ogf = 0x3f;
 8014170:	233f      	movs	r3, #63	@ 0x3f
 8014172:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8014176:	f44f 7381 	mov.w	r3, #258	@ 0x102
 801417a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801417e:	f107 0310 	add.w	r3, r7, #16
 8014182:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014186:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801418a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 801418e:	f107 030c 	add.w	r3, r7, #12
 8014192:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8014196:	2303      	movs	r3, #3
 8014198:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801419c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80141a0:	2100      	movs	r1, #0
 80141a2:	4618      	mov	r0, r3
 80141a4:	f000 fea2 	bl	8014eec <hci_send_req>
 80141a8:	4603      	mov	r3, r0
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	da01      	bge.n	80141b2 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80141ae:	23ff      	movs	r3, #255	@ 0xff
 80141b0:	e017      	b.n	80141e2 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80141b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80141b6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80141ba:	781b      	ldrb	r3, [r3, #0]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d005      	beq.n	80141cc <aci_gatt_add_service+0x18c>
    return resp.Status;
 80141c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80141c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80141c8:	781b      	ldrb	r3, [r3, #0]
 80141ca:	e00a      	b.n	80141e2 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80141cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80141d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80141d4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80141d8:	b29a      	uxth	r2, r3
 80141da:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80141de:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80141e0:	2300      	movs	r3, #0
}
 80141e2:	4618      	mov	r0, r3
 80141e4:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 80141e8:	46bd      	mov	sp, r7
 80141ea:	bd90      	pop	{r4, r7, pc}

080141ec <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80141ec:	b590      	push	{r4, r7, lr}
 80141ee:	b0d1      	sub	sp, #324	@ 0x144
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	4604      	mov	r4, r0
 80141f4:	4608      	mov	r0, r1
 80141f6:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 80141fa:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 80141fe:	600a      	str	r2, [r1, #0]
 8014200:	4619      	mov	r1, r3
 8014202:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014206:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 801420a:	4622      	mov	r2, r4
 801420c:	801a      	strh	r2, [r3, #0]
 801420e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014212:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8014216:	4602      	mov	r2, r0
 8014218:	701a      	strb	r2, [r3, #0]
 801421a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801421e:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8014222:	460a      	mov	r2, r1
 8014224:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8014226:	f107 0318 	add.w	r3, r7, #24
 801422a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 801422e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014232:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8014236:	781b      	ldrb	r3, [r3, #0]
 8014238:	2b01      	cmp	r3, #1
 801423a:	d00a      	beq.n	8014252 <aci_gatt_add_char+0x66>
 801423c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014240:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8014244:	781b      	ldrb	r3, [r3, #0]
 8014246:	2b02      	cmp	r3, #2
 8014248:	d101      	bne.n	801424e <aci_gatt_add_char+0x62>
 801424a:	2313      	movs	r3, #19
 801424c:	e002      	b.n	8014254 <aci_gatt_add_char+0x68>
 801424e:	2303      	movs	r3, #3
 8014250:	e000      	b.n	8014254 <aci_gatt_add_char+0x68>
 8014252:	2305      	movs	r3, #5
 8014254:	f107 0218 	add.w	r2, r7, #24
 8014258:	4413      	add	r3, r2
 801425a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 801425e:	f107 0314 	add.w	r3, r7, #20
 8014262:	2203      	movs	r2, #3
 8014264:	2100      	movs	r1, #0
 8014266:	4618      	mov	r0, r3
 8014268:	f000 fbb7 	bl	80149da <Osal_MemSet>
  int index_input = 0;
 801426c:	2300      	movs	r3, #0
 801426e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8014272:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8014276:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801427a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 801427e:	8812      	ldrh	r2, [r2, #0]
 8014280:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8014282:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014286:	3302      	adds	r3, #2
 8014288:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 801428c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8014290:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8014294:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8014298:	7812      	ldrb	r2, [r2, #0]
 801429a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 801429c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80142a0:	3301      	adds	r3, #1
 80142a2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80142a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80142aa:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80142ae:	781b      	ldrb	r3, [r3, #0]
 80142b0:	2b01      	cmp	r3, #1
 80142b2:	d002      	beq.n	80142ba <aci_gatt_add_char+0xce>
 80142b4:	2b02      	cmp	r3, #2
 80142b6:	d004      	beq.n	80142c2 <aci_gatt_add_char+0xd6>
 80142b8:	e007      	b.n	80142ca <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80142ba:	2302      	movs	r3, #2
 80142bc:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80142c0:	e005      	b.n	80142ce <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80142c2:	2310      	movs	r3, #16
 80142c4:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80142c8:	e001      	b.n	80142ce <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80142ca:	2397      	movs	r3, #151	@ 0x97
 80142cc:	e091      	b.n	80143f2 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80142ce:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80142d2:	1cd8      	adds	r0, r3, #3
 80142d4:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 80142d8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80142dc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80142e0:	6819      	ldr	r1, [r3, #0]
 80142e2:	f000 fb6a 	bl	80149ba <Osal_MemCpy>
    index_input += size;
 80142e6:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80142ea:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80142ee:	4413      	add	r3, r2
 80142f0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80142f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80142f8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80142fc:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8014300:	8812      	ldrh	r2, [r2, #0]
 8014302:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8014304:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014308:	3302      	adds	r3, #2
 801430a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 801430e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014312:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8014316:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8014318:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801431c:	3301      	adds	r3, #1
 801431e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8014322:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014326:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 801432a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 801432c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014330:	3301      	adds	r3, #1
 8014332:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8014336:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801433a:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 801433e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8014340:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014344:	3301      	adds	r3, #1
 8014346:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 801434a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801434e:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8014352:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8014354:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014358:	3301      	adds	r3, #1
 801435a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 801435e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014362:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8014366:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8014368:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801436c:	3301      	adds	r3, #1
 801436e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014372:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014376:	2218      	movs	r2, #24
 8014378:	2100      	movs	r1, #0
 801437a:	4618      	mov	r0, r3
 801437c:	f000 fb2d 	bl	80149da <Osal_MemSet>
  rq.ogf = 0x3f;
 8014380:	233f      	movs	r3, #63	@ 0x3f
 8014382:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8014386:	f44f 7382 	mov.w	r3, #260	@ 0x104
 801438a:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 801438e:	f107 0318 	add.w	r3, r7, #24
 8014392:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8014396:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801439a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 801439e:	f107 0314 	add.w	r3, r7, #20
 80143a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 80143a6:	2303      	movs	r3, #3
 80143a8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80143ac:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80143b0:	2100      	movs	r1, #0
 80143b2:	4618      	mov	r0, r3
 80143b4:	f000 fd9a 	bl	8014eec <hci_send_req>
 80143b8:	4603      	mov	r3, r0
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	da01      	bge.n	80143c2 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80143be:	23ff      	movs	r3, #255	@ 0xff
 80143c0:	e017      	b.n	80143f2 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80143c2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80143c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80143ca:	781b      	ldrb	r3, [r3, #0]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d005      	beq.n	80143dc <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80143d0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80143d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80143d8:	781b      	ldrb	r3, [r3, #0]
 80143da:	e00a      	b.n	80143f2 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 80143dc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80143e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80143e4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80143e8:	b29a      	uxth	r2, r3
 80143ea:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80143ee:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80143f0:	2300      	movs	r3, #0
}
 80143f2:	4618      	mov	r0, r3
 80143f4:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 80143f8:	46bd      	mov	sp, r7
 80143fa:	bd90      	pop	{r4, r7, pc}

080143fc <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80143fc:	b5b0      	push	{r4, r5, r7, lr}
 80143fe:	b0cc      	sub	sp, #304	@ 0x130
 8014400:	af00      	add	r7, sp, #0
 8014402:	4605      	mov	r5, r0
 8014404:	460c      	mov	r4, r1
 8014406:	4610      	mov	r0, r2
 8014408:	4619      	mov	r1, r3
 801440a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801440e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8014412:	462a      	mov	r2, r5
 8014414:	801a      	strh	r2, [r3, #0]
 8014416:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801441a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801441e:	4622      	mov	r2, r4
 8014420:	801a      	strh	r2, [r3, #0]
 8014422:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014426:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 801442a:	4602      	mov	r2, r0
 801442c:	701a      	strb	r2, [r3, #0]
 801442e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014432:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8014436:	460a      	mov	r2, r1
 8014438:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 801443a:	f107 0310 	add.w	r3, r7, #16
 801443e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014442:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014446:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801444a:	2200      	movs	r2, #0
 801444c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801444e:	2300      	movs	r3, #0
 8014450:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8014454:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014458:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801445c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8014460:	8812      	ldrh	r2, [r2, #0]
 8014462:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8014464:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014468:	3302      	adds	r3, #2
 801446a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 801446e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014472:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014476:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 801447a:	8812      	ldrh	r2, [r2, #0]
 801447c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 801447e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014482:	3302      	adds	r3, #2
 8014484:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8014488:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801448c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014490:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8014494:	7812      	ldrb	r2, [r2, #0]
 8014496:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8014498:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801449c:	3301      	adds	r3, #1
 801449e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80144a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80144a6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80144aa:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 80144ae:	7812      	ldrb	r2, [r2, #0]
 80144b0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80144b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80144b6:	3301      	adds	r3, #1
 80144b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80144bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80144c0:	1d98      	adds	r0, r3, #6
 80144c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80144c6:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80144ca:	781b      	ldrb	r3, [r3, #0]
 80144cc:	461a      	mov	r2, r3
 80144ce:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80144d2:	f000 fa72 	bl	80149ba <Osal_MemCpy>
  index_input += Char_Value_Length;
 80144d6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80144da:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80144de:	781b      	ldrb	r3, [r3, #0]
 80144e0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80144e4:	4413      	add	r3, r2
 80144e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80144ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80144ee:	2218      	movs	r2, #24
 80144f0:	2100      	movs	r1, #0
 80144f2:	4618      	mov	r0, r3
 80144f4:	f000 fa71 	bl	80149da <Osal_MemSet>
  rq.ogf = 0x3f;
 80144f8:	233f      	movs	r3, #63	@ 0x3f
 80144fa:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 80144fe:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8014502:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014506:	f107 0310 	add.w	r3, r7, #16
 801450a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801450e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014512:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014516:	f107 030f 	add.w	r3, r7, #15
 801451a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801451e:	2301      	movs	r3, #1
 8014520:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014524:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014528:	2100      	movs	r1, #0
 801452a:	4618      	mov	r0, r3
 801452c:	f000 fcde 	bl	8014eec <hci_send_req>
 8014530:	4603      	mov	r3, r0
 8014532:	2b00      	cmp	r3, #0
 8014534:	da01      	bge.n	801453a <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8014536:	23ff      	movs	r3, #255	@ 0xff
 8014538:	e004      	b.n	8014544 <aci_gatt_update_char_value+0x148>
  return status;
 801453a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801453e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014542:	781b      	ldrb	r3, [r3, #0]
}
 8014544:	4618      	mov	r0, r3
 8014546:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 801454a:	46bd      	mov	sp, r7
 801454c:	bdb0      	pop	{r4, r5, r7, pc}

0801454e <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 801454e:	b580      	push	{r7, lr}
 8014550:	b0cc      	sub	sp, #304	@ 0x130
 8014552:	af00      	add	r7, sp, #0
 8014554:	4602      	mov	r2, r0
 8014556:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801455a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801455e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8014560:	f107 0310 	add.w	r3, r7, #16
 8014564:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014568:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801456c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014570:	2200      	movs	r2, #0
 8014572:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014574:	2300      	movs	r3, #0
 8014576:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 801457a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801457e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014582:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8014586:	8812      	ldrh	r2, [r2, #0]
 8014588:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801458a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801458e:	3302      	adds	r3, #2
 8014590:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014594:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014598:	2218      	movs	r2, #24
 801459a:	2100      	movs	r1, #0
 801459c:	4618      	mov	r0, r3
 801459e:	f000 fa1c 	bl	80149da <Osal_MemSet>
  rq.ogf = 0x3f;
 80145a2:	233f      	movs	r3, #63	@ 0x3f
 80145a4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 80145a8:	f240 1325 	movw	r3, #293	@ 0x125
 80145ac:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80145b0:	f107 0310 	add.w	r3, r7, #16
 80145b4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80145b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80145bc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80145c0:	f107 030f 	add.w	r3, r7, #15
 80145c4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80145c8:	2301      	movs	r3, #1
 80145ca:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80145ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80145d2:	2100      	movs	r1, #0
 80145d4:	4618      	mov	r0, r3
 80145d6:	f000 fc89 	bl	8014eec <hci_send_req>
 80145da:	4603      	mov	r3, r0
 80145dc:	2b00      	cmp	r3, #0
 80145de:	da01      	bge.n	80145e4 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 80145e0:	23ff      	movs	r3, #255	@ 0xff
 80145e2:	e004      	b.n	80145ee <aci_gatt_confirm_indication+0xa0>
  return status;
 80145e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80145e8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80145ec:	781b      	ldrb	r3, [r3, #0]
}
 80145ee:	4618      	mov	r0, r3
 80145f0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80145f4:	46bd      	mov	sp, r7
 80145f6:	bd80      	pop	{r7, pc}

080145f8 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80145f8:	b580      	push	{r7, lr}
 80145fa:	b0cc      	sub	sp, #304	@ 0x130
 80145fc:	af00      	add	r7, sp, #0
 80145fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014602:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8014606:	601a      	str	r2, [r3, #0]
 8014608:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801460c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014610:	4602      	mov	r2, r0
 8014612:	701a      	strb	r2, [r3, #0]
 8014614:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014618:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801461c:	460a      	mov	r2, r1
 801461e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8014620:	f107 0310 	add.w	r3, r7, #16
 8014624:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014628:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801462c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014630:	2200      	movs	r2, #0
 8014632:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014634:	2300      	movs	r3, #0
 8014636:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 801463a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801463e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014642:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8014646:	7812      	ldrb	r2, [r2, #0]
 8014648:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801464a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801464e:	3301      	adds	r3, #1
 8014650:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8014654:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014658:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801465c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8014660:	7812      	ldrb	r2, [r2, #0]
 8014662:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8014664:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014668:	3301      	adds	r3, #1
 801466a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 801466e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014672:	1c98      	adds	r0, r3, #2
 8014674:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014678:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801467c:	781a      	ldrb	r2, [r3, #0]
 801467e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014682:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8014686:	6819      	ldr	r1, [r3, #0]
 8014688:	f000 f997 	bl	80149ba <Osal_MemCpy>
  index_input += Length;
 801468c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014690:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8014694:	781b      	ldrb	r3, [r3, #0]
 8014696:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801469a:	4413      	add	r3, r2
 801469c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80146a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80146a4:	2218      	movs	r2, #24
 80146a6:	2100      	movs	r1, #0
 80146a8:	4618      	mov	r0, r3
 80146aa:	f000 f996 	bl	80149da <Osal_MemSet>
  rq.ogf = 0x3f;
 80146ae:	233f      	movs	r3, #63	@ 0x3f
 80146b0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 80146b4:	230c      	movs	r3, #12
 80146b6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80146ba:	f107 0310 	add.w	r3, r7, #16
 80146be:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80146c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80146c6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80146ca:	f107 030f 	add.w	r3, r7, #15
 80146ce:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80146d2:	2301      	movs	r3, #1
 80146d4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80146d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80146dc:	2100      	movs	r1, #0
 80146de:	4618      	mov	r0, r3
 80146e0:	f000 fc04 	bl	8014eec <hci_send_req>
 80146e4:	4603      	mov	r3, r0
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	da01      	bge.n	80146ee <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80146ea:	23ff      	movs	r3, #255	@ 0xff
 80146ec:	e004      	b.n	80146f8 <aci_hal_write_config_data+0x100>
  return status;
 80146ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80146f2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80146f6:	781b      	ldrb	r3, [r3, #0]
}
 80146f8:	4618      	mov	r0, r3
 80146fa:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80146fe:	46bd      	mov	sp, r7
 8014700:	bd80      	pop	{r7, pc}

08014702 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8014702:	b580      	push	{r7, lr}
 8014704:	b0cc      	sub	sp, #304	@ 0x130
 8014706:	af00      	add	r7, sp, #0
 8014708:	4602      	mov	r2, r0
 801470a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801470e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014712:	701a      	strb	r2, [r3, #0]
 8014714:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014718:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801471c:	460a      	mov	r2, r1
 801471e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8014720:	f107 0310 	add.w	r3, r7, #16
 8014724:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014728:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801472c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014730:	2200      	movs	r2, #0
 8014732:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014734:	2300      	movs	r3, #0
 8014736:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 801473a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801473e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014742:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8014746:	7812      	ldrb	r2, [r2, #0]
 8014748:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801474a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801474e:	3301      	adds	r3, #1
 8014750:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8014754:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014758:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801475c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8014760:	7812      	ldrb	r2, [r2, #0]
 8014762:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8014764:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014768:	3301      	adds	r3, #1
 801476a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801476e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014772:	2218      	movs	r2, #24
 8014774:	2100      	movs	r1, #0
 8014776:	4618      	mov	r0, r3
 8014778:	f000 f92f 	bl	80149da <Osal_MemSet>
  rq.ogf = 0x3f;
 801477c:	233f      	movs	r3, #63	@ 0x3f
 801477e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8014782:	230f      	movs	r3, #15
 8014784:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014788:	f107 0310 	add.w	r3, r7, #16
 801478c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014790:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014794:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014798:	f107 030f 	add.w	r3, r7, #15
 801479c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80147a0:	2301      	movs	r3, #1
 80147a2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80147a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80147aa:	2100      	movs	r1, #0
 80147ac:	4618      	mov	r0, r3
 80147ae:	f000 fb9d 	bl	8014eec <hci_send_req>
 80147b2:	4603      	mov	r3, r0
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	da01      	bge.n	80147bc <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80147b8:	23ff      	movs	r3, #255	@ 0xff
 80147ba:	e004      	b.n	80147c6 <aci_hal_set_tx_power_level+0xc4>
  return status;
 80147bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80147c0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80147c4:	781b      	ldrb	r3, [r3, #0]
}
 80147c6:	4618      	mov	r0, r3
 80147c8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80147cc:	46bd      	mov	sp, r7
 80147ce:	bd80      	pop	{r7, pc}

080147d0 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80147d0:	b580      	push	{r7, lr}
 80147d2:	b0cc      	sub	sp, #304	@ 0x130
 80147d4:	af00      	add	r7, sp, #0
 80147d6:	4602      	mov	r2, r0
 80147d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80147dc:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80147e0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80147e2:	f107 0310 	add.w	r3, r7, #16
 80147e6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80147ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80147ee:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80147f2:	2200      	movs	r2, #0
 80147f4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80147f6:	2300      	movs	r3, #0
 80147f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 80147fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014800:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014804:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8014808:	8812      	ldrh	r2, [r2, #0]
 801480a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801480c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014810:	3302      	adds	r3, #2
 8014812:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014816:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801481a:	2218      	movs	r2, #24
 801481c:	2100      	movs	r1, #0
 801481e:	4618      	mov	r0, r3
 8014820:	f000 f8db 	bl	80149da <Osal_MemSet>
  rq.ogf = 0x3f;
 8014824:	233f      	movs	r3, #63	@ 0x3f
 8014826:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 801482a:	2318      	movs	r3, #24
 801482c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014830:	f107 0310 	add.w	r3, r7, #16
 8014834:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014838:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801483c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014840:	f107 030f 	add.w	r3, r7, #15
 8014844:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014848:	2301      	movs	r3, #1
 801484a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801484e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014852:	2100      	movs	r1, #0
 8014854:	4618      	mov	r0, r3
 8014856:	f000 fb49 	bl	8014eec <hci_send_req>
 801485a:	4603      	mov	r3, r0
 801485c:	2b00      	cmp	r3, #0
 801485e:	da01      	bge.n	8014864 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8014860:	23ff      	movs	r3, #255	@ 0xff
 8014862:	e004      	b.n	801486e <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8014864:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014868:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801486c:	781b      	ldrb	r3, [r3, #0]
}
 801486e:	4618      	mov	r0, r3
 8014870:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8014874:	46bd      	mov	sp, r7
 8014876:	bd80      	pop	{r7, pc}

08014878 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8014878:	b580      	push	{r7, lr}
 801487a:	b088      	sub	sp, #32
 801487c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 801487e:	2300      	movs	r3, #0
 8014880:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014882:	f107 0308 	add.w	r3, r7, #8
 8014886:	2218      	movs	r2, #24
 8014888:	2100      	movs	r1, #0
 801488a:	4618      	mov	r0, r3
 801488c:	f000 f8a5 	bl	80149da <Osal_MemSet>
  rq.ogf = 0x03;
 8014890:	2303      	movs	r3, #3
 8014892:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8014894:	2303      	movs	r3, #3
 8014896:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8014898:	1dfb      	adds	r3, r7, #7
 801489a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 801489c:	2301      	movs	r3, #1
 801489e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80148a0:	f107 0308 	add.w	r3, r7, #8
 80148a4:	2100      	movs	r1, #0
 80148a6:	4618      	mov	r0, r3
 80148a8:	f000 fb20 	bl	8014eec <hci_send_req>
 80148ac:	4603      	mov	r3, r0
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	da01      	bge.n	80148b6 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80148b2:	23ff      	movs	r3, #255	@ 0xff
 80148b4:	e000      	b.n	80148b8 <hci_reset+0x40>
  return status;
 80148b6:	79fb      	ldrb	r3, [r7, #7]
}
 80148b8:	4618      	mov	r0, r3
 80148ba:	3720      	adds	r7, #32
 80148bc:	46bd      	mov	sp, r7
 80148be:	bd80      	pop	{r7, pc}

080148c0 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80148c0:	b590      	push	{r4, r7, lr}
 80148c2:	b0cd      	sub	sp, #308	@ 0x134
 80148c4:	af00      	add	r7, sp, #0
 80148c6:	4604      	mov	r4, r0
 80148c8:	4608      	mov	r0, r1
 80148ca:	4611      	mov	r1, r2
 80148cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80148d0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80148d4:	4622      	mov	r2, r4
 80148d6:	701a      	strb	r2, [r3, #0]
 80148d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80148dc:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80148e0:	4602      	mov	r2, r0
 80148e2:	701a      	strb	r2, [r3, #0]
 80148e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80148e8:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80148ec:	460a      	mov	r2, r1
 80148ee:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 80148f0:	f107 0310 	add.w	r3, r7, #16
 80148f4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80148f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80148fc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014900:	2200      	movs	r2, #0
 8014902:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014904:	2300      	movs	r3, #0
 8014906:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 801490a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801490e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014912:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8014916:	7812      	ldrb	r2, [r2, #0]
 8014918:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801491a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801491e:	3301      	adds	r3, #1
 8014920:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8014924:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014928:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801492c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8014930:	7812      	ldrb	r2, [r2, #0]
 8014932:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8014934:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014938:	3301      	adds	r3, #1
 801493a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 801493e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014942:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014946:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 801494a:	7812      	ldrb	r2, [r2, #0]
 801494c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 801494e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014952:	3301      	adds	r3, #1
 8014954:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014958:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801495c:	2218      	movs	r2, #24
 801495e:	2100      	movs	r1, #0
 8014960:	4618      	mov	r0, r3
 8014962:	f000 f83a 	bl	80149da <Osal_MemSet>
  rq.ogf = 0x08;
 8014966:	2308      	movs	r3, #8
 8014968:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 801496c:	2331      	movs	r3, #49	@ 0x31
 801496e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014972:	f107 0310 	add.w	r3, r7, #16
 8014976:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801497a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801497e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014982:	f107 030f 	add.w	r3, r7, #15
 8014986:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801498a:	2301      	movs	r3, #1
 801498c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014990:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014994:	2100      	movs	r1, #0
 8014996:	4618      	mov	r0, r3
 8014998:	f000 faa8 	bl	8014eec <hci_send_req>
 801499c:	4603      	mov	r3, r0
 801499e:	2b00      	cmp	r3, #0
 80149a0:	da01      	bge.n	80149a6 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80149a2:	23ff      	movs	r3, #255	@ 0xff
 80149a4:	e004      	b.n	80149b0 <hci_le_set_default_phy+0xf0>
  return status;
 80149a6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80149aa:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80149ae:	781b      	ldrb	r3, [r3, #0]
}
 80149b0:	4618      	mov	r0, r3
 80149b2:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80149b6:	46bd      	mov	sp, r7
 80149b8:	bd90      	pop	{r4, r7, pc}

080149ba <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80149ba:	b580      	push	{r7, lr}
 80149bc:	b084      	sub	sp, #16
 80149be:	af00      	add	r7, sp, #0
 80149c0:	60f8      	str	r0, [r7, #12]
 80149c2:	60b9      	str	r1, [r7, #8]
 80149c4:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 80149c6:	687a      	ldr	r2, [r7, #4]
 80149c8:	68b9      	ldr	r1, [r7, #8]
 80149ca:	68f8      	ldr	r0, [r7, #12]
 80149cc:	f005 fd41 	bl	801a452 <memcpy>
 80149d0:	4603      	mov	r3, r0
}
 80149d2:	4618      	mov	r0, r3
 80149d4:	3710      	adds	r7, #16
 80149d6:	46bd      	mov	sp, r7
 80149d8:	bd80      	pop	{r7, pc}

080149da <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80149da:	b580      	push	{r7, lr}
 80149dc:	b084      	sub	sp, #16
 80149de:	af00      	add	r7, sp, #0
 80149e0:	60f8      	str	r0, [r7, #12]
 80149e2:	60b9      	str	r1, [r7, #8]
 80149e4:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80149e6:	687a      	ldr	r2, [r7, #4]
 80149e8:	68b9      	ldr	r1, [r7, #8]
 80149ea:	68f8      	ldr	r0, [r7, #12]
 80149ec:	f005 fc5d 	bl	801a2aa <memset>
 80149f0:	4603      	mov	r3, r0
}
 80149f2:	4618      	mov	r0, r3
 80149f4:	3710      	adds	r7, #16
 80149f6:	46bd      	mov	sp, r7
 80149f8:	bd80      	pop	{r7, pc}

080149fa <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 80149fa:	b480      	push	{r7}
 80149fc:	af00      	add	r7, sp, #0
  return;
 80149fe:	bf00      	nop
}
 8014a00:	46bd      	mov	sp, r7
 8014a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a06:	4770      	bx	lr

08014a08 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8014a08:	b480      	push	{r7}
 8014a0a:	af00      	add	r7, sp, #0
  return;
 8014a0c:	bf00      	nop
}
 8014a0e:	46bd      	mov	sp, r7
 8014a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a14:	4770      	bx	lr

08014a16 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8014a16:	b480      	push	{r7}
 8014a18:	af00      	add	r7, sp, #0
  return;
 8014a1a:	bf00      	nop
}
 8014a1c:	46bd      	mov	sp, r7
 8014a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a22:	4770      	bx	lr

08014a24 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8014a24:	b480      	push	{r7}
 8014a26:	af00      	add	r7, sp, #0
  return;
 8014a28:	bf00      	nop
}
 8014a2a:	46bd      	mov	sp, r7
 8014a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a30:	4770      	bx	lr

08014a32 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8014a32:	b480      	push	{r7}
 8014a34:	af00      	add	r7, sp, #0
  return;
 8014a36:	bf00      	nop
}
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a3e:	4770      	bx	lr

08014a40 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8014a40:	b480      	push	{r7}
 8014a42:	af00      	add	r7, sp, #0
  return;
 8014a44:	bf00      	nop
}
 8014a46:	46bd      	mov	sp, r7
 8014a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a4c:	4770      	bx	lr

08014a4e <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8014a4e:	b480      	push	{r7}
 8014a50:	af00      	add	r7, sp, #0
  return;
 8014a52:	bf00      	nop
}
 8014a54:	46bd      	mov	sp, r7
 8014a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a5a:	4770      	bx	lr

08014a5c <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8014a5c:	b480      	push	{r7}
 8014a5e:	af00      	add	r7, sp, #0
  return;
 8014a60:	bf00      	nop
}
 8014a62:	46bd      	mov	sp, r7
 8014a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a68:	4770      	bx	lr

08014a6a <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8014a6a:	b480      	push	{r7}
 8014a6c:	af00      	add	r7, sp, #0
  return;
 8014a6e:	bf00      	nop
}
 8014a70:	46bd      	mov	sp, r7
 8014a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a76:	4770      	bx	lr

08014a78 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8014a78:	b480      	push	{r7}
 8014a7a:	af00      	add	r7, sp, #0
  return;
 8014a7c:	bf00      	nop
}
 8014a7e:	46bd      	mov	sp, r7
 8014a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a84:	4770      	bx	lr

08014a86 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8014a86:	b480      	push	{r7}
 8014a88:	af00      	add	r7, sp, #0
  return;
 8014a8a:	bf00      	nop
}
 8014a8c:	46bd      	mov	sp, r7
 8014a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a92:	4770      	bx	lr

08014a94 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8014a94:	b480      	push	{r7}
 8014a96:	af00      	add	r7, sp, #0
  return;
 8014a98:	bf00      	nop
}
 8014a9a:	46bd      	mov	sp, r7
 8014a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aa0:	4770      	bx	lr

08014aa2 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8014aa2:	b480      	push	{r7}
 8014aa4:	af00      	add	r7, sp, #0
  return;
 8014aa6:	bf00      	nop
}
 8014aa8:	46bd      	mov	sp, r7
 8014aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aae:	4770      	bx	lr

08014ab0 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8014ab0:	b480      	push	{r7}
 8014ab2:	af00      	add	r7, sp, #0
  return;
 8014ab4:	bf00      	nop
}
 8014ab6:	46bd      	mov	sp, r7
 8014ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014abc:	4770      	bx	lr

08014abe <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8014abe:	b480      	push	{r7}
 8014ac0:	af00      	add	r7, sp, #0
  return;
 8014ac2:	bf00      	nop
}
 8014ac4:	46bd      	mov	sp, r7
 8014ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aca:	4770      	bx	lr

08014acc <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8014acc:	b480      	push	{r7}
 8014ace:	af00      	add	r7, sp, #0
  return;
 8014ad0:	bf00      	nop
}
 8014ad2:	46bd      	mov	sp, r7
 8014ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ad8:	4770      	bx	lr

08014ada <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8014ada:	b480      	push	{r7}
 8014adc:	af00      	add	r7, sp, #0
  return;
 8014ade:	bf00      	nop
}
 8014ae0:	46bd      	mov	sp, r7
 8014ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ae6:	4770      	bx	lr

08014ae8 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8014ae8:	b580      	push	{r7, lr}
 8014aea:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8014aec:	4b04      	ldr	r3, [pc, #16]	@ (8014b00 <SVCCTL_Init+0x18>)
 8014aee:	2200      	movs	r2, #0
 8014af0:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8014af2:	4b04      	ldr	r3, [pc, #16]	@ (8014b04 <SVCCTL_Init+0x1c>)
 8014af4:	2200      	movs	r2, #0
 8014af6:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8014af8:	f000 f806 	bl	8014b08 <SVCCTL_SvcInit>

  return;
 8014afc:	bf00      	nop
}
 8014afe:	bd80      	pop	{r7, pc}
 8014b00:	2000030c 	.word	0x2000030c
 8014b04:	2000032c 	.word	0x2000032c

08014b08 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8014b08:	b580      	push	{r7, lr}
 8014b0a:	af00      	add	r7, sp, #0
  BAS_Init();
 8014b0c:	f7ff ff75 	bl	80149fa <BAS_Init>

  BLS_Init();
 8014b10:	f7ff ff7a 	bl	8014a08 <BLS_Init>

  CRS_STM_Init();
 8014b14:	f7ff ff7f 	bl	8014a16 <CRS_STM_Init>

  DIS_Init();
 8014b18:	f7ff ff84 	bl	8014a24 <DIS_Init>

  EDS_STM_Init();
 8014b1c:	f7ff ff89 	bl	8014a32 <EDS_STM_Init>

  HIDS_Init();
 8014b20:	f7ff ff8e 	bl	8014a40 <HIDS_Init>

  HRS_Init();
 8014b24:	f7ff ff93 	bl	8014a4e <HRS_Init>

  HTS_Init();
 8014b28:	f7ff ff98 	bl	8014a5c <HTS_Init>

  IAS_Init();
 8014b2c:	f7ff ff9d 	bl	8014a6a <IAS_Init>

  LLS_Init();
 8014b30:	f7ff ffa2 	bl	8014a78 <LLS_Init>

  TPS_Init();
 8014b34:	f7ff ffa7 	bl	8014a86 <TPS_Init>

  MOTENV_STM_Init();
 8014b38:	f7ff ffac 	bl	8014a94 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8014b3c:	f7ff ffb1 	bl	8014aa2 <P2PS_STM_Init>

  ZDD_STM_Init();
 8014b40:	f7ff ffb6 	bl	8014ab0 <ZDD_STM_Init>

  OTAS_STM_Init();
 8014b44:	f7ff ffbb 	bl	8014abe <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8014b48:	f7ff ffc7 	bl	8014ada <BVOPUS_STM_Init>

  MESH_Init();
 8014b4c:	f7ff ffbe 	bl	8014acc <MESH_Init>

  SVCCTL_InitCustomSvc();
 8014b50:	f001 fb84 	bl	801625c <SVCCTL_InitCustomSvc>
  
  return;
 8014b54:	bf00      	nop
}
 8014b56:	bd80      	pop	{r7, pc}

08014b58 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8014b58:	b480      	push	{r7}
 8014b5a:	b083      	sub	sp, #12
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8014b60:	4b09      	ldr	r3, [pc, #36]	@ (8014b88 <SVCCTL_RegisterSvcHandler+0x30>)
 8014b62:	7f1b      	ldrb	r3, [r3, #28]
 8014b64:	4619      	mov	r1, r3
 8014b66:	4a08      	ldr	r2, [pc, #32]	@ (8014b88 <SVCCTL_RegisterSvcHandler+0x30>)
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8014b6e:	4b06      	ldr	r3, [pc, #24]	@ (8014b88 <SVCCTL_RegisterSvcHandler+0x30>)
 8014b70:	7f1b      	ldrb	r3, [r3, #28]
 8014b72:	3301      	adds	r3, #1
 8014b74:	b2da      	uxtb	r2, r3
 8014b76:	4b04      	ldr	r3, [pc, #16]	@ (8014b88 <SVCCTL_RegisterSvcHandler+0x30>)
 8014b78:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8014b7a:	bf00      	nop
}
 8014b7c:	370c      	adds	r7, #12
 8014b7e:	46bd      	mov	sp, r7
 8014b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b84:	4770      	bx	lr
 8014b86:	bf00      	nop
 8014b88:	2000030c 	.word	0x2000030c

08014b8c <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8014b8c:	b580      	push	{r7, lr}
 8014b8e:	b086      	sub	sp, #24
 8014b90:	af00      	add	r7, sp, #0
 8014b92:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	3301      	adds	r3, #1
 8014b98:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8014b9e:	693b      	ldr	r3, [r7, #16]
 8014ba0:	781b      	ldrb	r3, [r3, #0]
 8014ba2:	2bff      	cmp	r3, #255	@ 0xff
 8014ba4:	d125      	bne.n	8014bf2 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8014ba6:	693b      	ldr	r3, [r7, #16]
 8014ba8:	3302      	adds	r3, #2
 8014baa:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	881b      	ldrh	r3, [r3, #0]
 8014bb0:	b29b      	uxth	r3, r3
 8014bb2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014bb6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8014bba:	d118      	bne.n	8014bee <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8014bbc:	2300      	movs	r3, #0
 8014bbe:	757b      	strb	r3, [r7, #21]
 8014bc0:	e00d      	b.n	8014bde <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8014bc2:	7d7b      	ldrb	r3, [r7, #21]
 8014bc4:	4a1a      	ldr	r2, [pc, #104]	@ (8014c30 <SVCCTL_UserEvtRx+0xa4>)
 8014bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014bca:	6878      	ldr	r0, [r7, #4]
 8014bcc:	4798      	blx	r3
 8014bce:	4603      	mov	r3, r0
 8014bd0:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8014bd2:	7dfb      	ldrb	r3, [r7, #23]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d108      	bne.n	8014bea <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8014bd8:	7d7b      	ldrb	r3, [r7, #21]
 8014bda:	3301      	adds	r3, #1
 8014bdc:	757b      	strb	r3, [r7, #21]
 8014bde:	4b14      	ldr	r3, [pc, #80]	@ (8014c30 <SVCCTL_UserEvtRx+0xa4>)
 8014be0:	7f1b      	ldrb	r3, [r3, #28]
 8014be2:	7d7a      	ldrb	r2, [r7, #21]
 8014be4:	429a      	cmp	r2, r3
 8014be6:	d3ec      	bcc.n	8014bc2 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8014be8:	e002      	b.n	8014bf0 <SVCCTL_UserEvtRx+0x64>
              break;
 8014bea:	bf00      	nop
          break;
 8014bec:	e000      	b.n	8014bf0 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8014bee:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8014bf0:	e000      	b.n	8014bf4 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8014bf2:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8014bf4:	7dfb      	ldrb	r3, [r7, #23]
 8014bf6:	2b02      	cmp	r3, #2
 8014bf8:	d00f      	beq.n	8014c1a <SVCCTL_UserEvtRx+0x8e>
 8014bfa:	2b02      	cmp	r3, #2
 8014bfc:	dc10      	bgt.n	8014c20 <SVCCTL_UserEvtRx+0x94>
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d002      	beq.n	8014c08 <SVCCTL_UserEvtRx+0x7c>
 8014c02:	2b01      	cmp	r3, #1
 8014c04:	d006      	beq.n	8014c14 <SVCCTL_UserEvtRx+0x88>
 8014c06:	e00b      	b.n	8014c20 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8014c08:	6878      	ldr	r0, [r7, #4]
 8014c0a:	f000 ff85 	bl	8015b18 <SVCCTL_App_Notification>
 8014c0e:	4603      	mov	r3, r0
 8014c10:	75bb      	strb	r3, [r7, #22]
      break;
 8014c12:	e008      	b.n	8014c26 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8014c14:	2301      	movs	r3, #1
 8014c16:	75bb      	strb	r3, [r7, #22]
      break;
 8014c18:	e005      	b.n	8014c26 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8014c1a:	2300      	movs	r3, #0
 8014c1c:	75bb      	strb	r3, [r7, #22]
      break;
 8014c1e:	e002      	b.n	8014c26 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8014c20:	2301      	movs	r3, #1
 8014c22:	75bb      	strb	r3, [r7, #22]
      break;
 8014c24:	bf00      	nop
  }

  return (return_status);
 8014c26:	7dbb      	ldrb	r3, [r7, #22]
}
 8014c28:	4618      	mov	r0, r3
 8014c2a:	3718      	adds	r7, #24
 8014c2c:	46bd      	mov	sp, r7
 8014c2e:	bd80      	pop	{r7, pc}
 8014c30:	2000030c 	.word	0x2000030c

08014c34 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8014c34:	b580      	push	{r7, lr}
 8014c36:	b088      	sub	sp, #32
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8014c3c:	f107 030c 	add.w	r3, r7, #12
 8014c40:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8014c48:	69fb      	ldr	r3, [r7, #28]
 8014c4a:	212e      	movs	r1, #46	@ 0x2e
 8014c4c:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8014c50:	f000 fae8 	bl	8015224 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8014c54:	69fb      	ldr	r3, [r7, #28]
 8014c56:	330b      	adds	r3, #11
 8014c58:	78db      	ldrb	r3, [r3, #3]
}
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	3720      	adds	r7, #32
 8014c5e:	46bd      	mov	sp, r7
 8014c60:	bd80      	pop	{r7, pc}

08014c62 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8014c62:	b580      	push	{r7, lr}
 8014c64:	b088      	sub	sp, #32
 8014c66:	af00      	add	r7, sp, #0
 8014c68:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8014c6a:	f107 030c 	add.w	r3, r7, #12
 8014c6e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8014c76:	69fb      	ldr	r3, [r7, #28]
 8014c78:	210f      	movs	r1, #15
 8014c7a:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8014c7e:	f000 fad1 	bl	8015224 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8014c82:	69fb      	ldr	r3, [r7, #28]
 8014c84:	330b      	adds	r3, #11
 8014c86:	78db      	ldrb	r3, [r3, #3]
}
 8014c88:	4618      	mov	r0, r3
 8014c8a:	3720      	adds	r7, #32
 8014c8c:	46bd      	mov	sp, r7
 8014c8e:	bd80      	pop	{r7, pc}

08014c90 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8014c90:	b580      	push	{r7, lr}
 8014c92:	b088      	sub	sp, #32
 8014c94:	af00      	add	r7, sp, #0
 8014c96:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8014c98:	f107 030c 	add.w	r3, r7, #12
 8014c9c:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8014c9e:	69fb      	ldr	r3, [r7, #28]
 8014ca0:	687a      	ldr	r2, [r7, #4]
 8014ca2:	2110      	movs	r1, #16
 8014ca4:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8014ca8:	f000 fabc 	bl	8015224 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8014cac:	69fb      	ldr	r3, [r7, #28]
 8014cae:	330b      	adds	r3, #11
 8014cb0:	78db      	ldrb	r3, [r3, #3]
}
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	3720      	adds	r7, #32
 8014cb6:	46bd      	mov	sp, r7
 8014cb8:	bd80      	pop	{r7, pc}
	...

08014cbc <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8014cbc:	b480      	push	{r7}
 8014cbe:	b08b      	sub	sp, #44	@ 0x2c
 8014cc0:	af00      	add	r7, sp, #0
 8014cc2:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8014cc4:	2300      	movs	r3, #0
 8014cc6:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8014cc8:	2300      	movs	r3, #0
 8014cca:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8014ccc:	2300      	movs	r3, #0
 8014cce:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8014cd0:	2300      	movs	r3, #0
 8014cd2:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8014cd4:	2300      	movs	r3, #0
 8014cd6:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8014cd8:	2300      	movs	r3, #0
 8014cda:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8014cdc:	2300      	movs	r3, #0
 8014cde:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8014ce0:	2300      	movs	r3, #0
 8014ce2:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8014ce4:	4b4a      	ldr	r3, [pc, #296]	@ (8014e10 <SHCI_GetWirelessFwInfo+0x154>)
 8014ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014ce8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014cec:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8014cee:	693b      	ldr	r3, [r7, #16]
 8014cf0:	009b      	lsls	r3, r3, #2
 8014cf2:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8014cf6:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8014cfe:	68bb      	ldr	r3, [r7, #8]
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	4a44      	ldr	r2, [pc, #272]	@ (8014e14 <SHCI_GetWirelessFwInfo+0x158>)
 8014d04:	4293      	cmp	r3, r2
 8014d06:	d10f      	bne.n	8014d28 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8014d08:	68bb      	ldr	r3, [r7, #8]
 8014d0a:	695b      	ldr	r3, [r3, #20]
 8014d0c:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8014d0e:	68bb      	ldr	r3, [r7, #8]
 8014d10:	699b      	ldr	r3, [r3, #24]
 8014d12:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8014d14:	68bb      	ldr	r3, [r7, #8]
 8014d16:	69db      	ldr	r3, [r3, #28]
 8014d18:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8014d1a:	68bb      	ldr	r3, [r7, #8]
 8014d1c:	68db      	ldr	r3, [r3, #12]
 8014d1e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8014d20:	68bb      	ldr	r3, [r7, #8]
 8014d22:	691b      	ldr	r3, [r3, #16]
 8014d24:	617b      	str	r3, [r7, #20]
 8014d26:	e01a      	b.n	8014d5e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8014d28:	693b      	ldr	r3, [r7, #16]
 8014d2a:	009b      	lsls	r3, r3, #2
 8014d2c:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8014d30:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8014d34:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	691b      	ldr	r3, [r3, #16]
 8014d3c:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	695b      	ldr	r3, [r3, #20]
 8014d44:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	699b      	ldr	r3, [r3, #24]
 8014d4c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	681b      	ldr	r3, [r3, #0]
 8014d52:	685b      	ldr	r3, [r3, #4]
 8014d54:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	689b      	ldr	r3, [r3, #8]
 8014d5c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8014d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d60:	0e1b      	lsrs	r3, r3, #24
 8014d62:	b2da      	uxtb	r2, r3
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8014d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d6a:	0c1b      	lsrs	r3, r3, #16
 8014d6c:	b2da      	uxtb	r2, r3
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8014d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d74:	0a1b      	lsrs	r3, r3, #8
 8014d76:	b2da      	uxtb	r2, r3
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8014d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d7e:	091b      	lsrs	r3, r3, #4
 8014d80:	b2db      	uxtb	r3, r3
 8014d82:	f003 030f 	and.w	r3, r3, #15
 8014d86:	b2da      	uxtb	r2, r3
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8014d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d8e:	b2db      	uxtb	r3, r3
 8014d90:	f003 030f 	and.w	r3, r3, #15
 8014d94:	b2da      	uxtb	r2, r3
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8014d9a:	6a3b      	ldr	r3, [r7, #32]
 8014d9c:	0e1b      	lsrs	r3, r3, #24
 8014d9e:	b2da      	uxtb	r2, r3
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8014da4:	6a3b      	ldr	r3, [r7, #32]
 8014da6:	0c1b      	lsrs	r3, r3, #16
 8014da8:	b2da      	uxtb	r2, r3
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8014dae:	6a3b      	ldr	r3, [r7, #32]
 8014db0:	0a1b      	lsrs	r3, r3, #8
 8014db2:	b2da      	uxtb	r2, r3
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8014db8:	6a3b      	ldr	r3, [r7, #32]
 8014dba:	b2da      	uxtb	r2, r3
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8014dc0:	69fb      	ldr	r3, [r7, #28]
 8014dc2:	b2da      	uxtb	r2, r3
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8014dc8:	69bb      	ldr	r3, [r7, #24]
 8014dca:	0e1b      	lsrs	r3, r3, #24
 8014dcc:	b2da      	uxtb	r2, r3
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8014dd2:	69bb      	ldr	r3, [r7, #24]
 8014dd4:	0c1b      	lsrs	r3, r3, #16
 8014dd6:	b2da      	uxtb	r2, r3
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8014ddc:	69bb      	ldr	r3, [r7, #24]
 8014dde:	0a1b      	lsrs	r3, r3, #8
 8014de0:	b2da      	uxtb	r2, r3
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8014de6:	697b      	ldr	r3, [r7, #20]
 8014de8:	0e1b      	lsrs	r3, r3, #24
 8014dea:	b2da      	uxtb	r2, r3
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8014df0:	697b      	ldr	r3, [r7, #20]
 8014df2:	0c1b      	lsrs	r3, r3, #16
 8014df4:	b2da      	uxtb	r2, r3
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8014dfa:	697b      	ldr	r3, [r7, #20]
 8014dfc:	b2da      	uxtb	r2, r3
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8014e02:	2300      	movs	r3, #0
}
 8014e04:	4618      	mov	r0, r3
 8014e06:	372c      	adds	r7, #44	@ 0x2c
 8014e08:	46bd      	mov	sp, r7
 8014e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e0e:	4770      	bx	lr
 8014e10:	58004000 	.word	0x58004000
 8014e14:	a94656b9 	.word	0xa94656b9

08014e18 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8014e18:	b580      	push	{r7, lr}
 8014e1a:	b082      	sub	sp, #8
 8014e1c:	af00      	add	r7, sp, #0
 8014e1e:	6078      	str	r0, [r7, #4]
 8014e20:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8014e22:	683b      	ldr	r3, [r7, #0]
 8014e24:	685b      	ldr	r3, [r3, #4]
 8014e26:	4a08      	ldr	r2, [pc, #32]	@ (8014e48 <hci_init+0x30>)
 8014e28:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8014e2a:	4a08      	ldr	r2, [pc, #32]	@ (8014e4c <hci_init+0x34>)
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8014e30:	4806      	ldr	r0, [pc, #24]	@ (8014e4c <hci_init+0x34>)
 8014e32:	f000 f979 	bl	8015128 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8014e36:	683b      	ldr	r3, [r7, #0]
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	f000 f8da 	bl	8014ff4 <TlInit>

  return;
 8014e40:	bf00      	nop
}
 8014e42:	3708      	adds	r7, #8
 8014e44:	46bd      	mov	sp, r7
 8014e46:	bd80      	pop	{r7, pc}
 8014e48:	20000b00 	.word	0x20000b00
 8014e4c:	20000ad8 	.word	0x20000ad8

08014e50 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8014e50:	b580      	push	{r7, lr}
 8014e52:	b084      	sub	sp, #16
 8014e54:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8014e56:	4822      	ldr	r0, [pc, #136]	@ (8014ee0 <hci_user_evt_proc+0x90>)
 8014e58:	f000 fd32 	bl	80158c0 <LST_is_empty>
 8014e5c:	4603      	mov	r3, r0
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d12b      	bne.n	8014eba <hci_user_evt_proc+0x6a>
 8014e62:	4b20      	ldr	r3, [pc, #128]	@ (8014ee4 <hci_user_evt_proc+0x94>)
 8014e64:	781b      	ldrb	r3, [r3, #0]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d027      	beq.n	8014eba <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8014e6a:	f107 030c 	add.w	r3, r7, #12
 8014e6e:	4619      	mov	r1, r3
 8014e70:	481b      	ldr	r0, [pc, #108]	@ (8014ee0 <hci_user_evt_proc+0x90>)
 8014e72:	f000 fdb4 	bl	80159de <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8014e76:	4b1c      	ldr	r3, [pc, #112]	@ (8014ee8 <hci_user_evt_proc+0x98>)
 8014e78:	69db      	ldr	r3, [r3, #28]
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d00c      	beq.n	8014e98 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8014e82:	2301      	movs	r3, #1
 8014e84:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8014e86:	4b18      	ldr	r3, [pc, #96]	@ (8014ee8 <hci_user_evt_proc+0x98>)
 8014e88:	69db      	ldr	r3, [r3, #28]
 8014e8a:	1d3a      	adds	r2, r7, #4
 8014e8c:	4610      	mov	r0, r2
 8014e8e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8014e90:	793a      	ldrb	r2, [r7, #4]
 8014e92:	4b14      	ldr	r3, [pc, #80]	@ (8014ee4 <hci_user_evt_proc+0x94>)
 8014e94:	701a      	strb	r2, [r3, #0]
 8014e96:	e002      	b.n	8014e9e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8014e98:	4b12      	ldr	r3, [pc, #72]	@ (8014ee4 <hci_user_evt_proc+0x94>)
 8014e9a:	2201      	movs	r2, #1
 8014e9c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8014e9e:	4b11      	ldr	r3, [pc, #68]	@ (8014ee4 <hci_user_evt_proc+0x94>)
 8014ea0:	781b      	ldrb	r3, [r3, #0]
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d004      	beq.n	8014eb0 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	4618      	mov	r0, r3
 8014eaa:	f000 fc0d 	bl	80156c8 <TL_MM_EvtDone>
 8014eae:	e004      	b.n	8014eba <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	4619      	mov	r1, r3
 8014eb4:	480a      	ldr	r0, [pc, #40]	@ (8014ee0 <hci_user_evt_proc+0x90>)
 8014eb6:	f000 fd25 	bl	8015904 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8014eba:	4809      	ldr	r0, [pc, #36]	@ (8014ee0 <hci_user_evt_proc+0x90>)
 8014ebc:	f000 fd00 	bl	80158c0 <LST_is_empty>
 8014ec0:	4603      	mov	r3, r0
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d107      	bne.n	8014ed6 <hci_user_evt_proc+0x86>
 8014ec6:	4b07      	ldr	r3, [pc, #28]	@ (8014ee4 <hci_user_evt_proc+0x94>)
 8014ec8:	781b      	ldrb	r3, [r3, #0]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d003      	beq.n	8014ed6 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8014ece:	4804      	ldr	r0, [pc, #16]	@ (8014ee0 <hci_user_evt_proc+0x90>)
 8014ed0:	f001 f856 	bl	8015f80 <hci_notify_asynch_evt>
  }


  return;
 8014ed4:	bf00      	nop
 8014ed6:	bf00      	nop
}
 8014ed8:	3710      	adds	r7, #16
 8014eda:	46bd      	mov	sp, r7
 8014edc:	bd80      	pop	{r7, pc}
 8014ede:	bf00      	nop
 8014ee0:	20000334 	.word	0x20000334
 8014ee4:	20000340 	.word	0x20000340
 8014ee8:	20000ad8 	.word	0x20000ad8

08014eec <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b088      	sub	sp, #32
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	6078      	str	r0, [r7, #4]
 8014ef4:	460b      	mov	r3, r1
 8014ef6:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8014ef8:	2000      	movs	r0, #0
 8014efa:	f000 f8d1 	bl	80150a0 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8014efe:	2300      	movs	r3, #0
 8014f00:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	885b      	ldrh	r3, [r3, #2]
 8014f06:	b21b      	sxth	r3, r3
 8014f08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014f0c:	b21a      	sxth	r2, r3
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	881b      	ldrh	r3, [r3, #0]
 8014f12:	b21b      	sxth	r3, r3
 8014f14:	029b      	lsls	r3, r3, #10
 8014f16:	b21b      	sxth	r3, r3
 8014f18:	4313      	orrs	r3, r2
 8014f1a:	b21b      	sxth	r3, r3
 8014f1c:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8014f1e:	4b33      	ldr	r3, [pc, #204]	@ (8014fec <hci_send_req+0x100>)
 8014f20:	2201      	movs	r2, #1
 8014f22:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	68db      	ldr	r3, [r3, #12]
 8014f28:	b2d9      	uxtb	r1, r3
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	689a      	ldr	r2, [r3, #8]
 8014f2e:	8bbb      	ldrh	r3, [r7, #28]
 8014f30:	4618      	mov	r0, r3
 8014f32:	f000 f88f 	bl	8015054 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8014f36:	e04e      	b.n	8014fd6 <hci_send_req+0xea>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8014f38:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8014f3c:	f001 f837 	bl	8015fae <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8014f40:	e043      	b.n	8014fca <hci_send_req+0xde>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8014f42:	f107 030c 	add.w	r3, r7, #12
 8014f46:	4619      	mov	r1, r3
 8014f48:	4829      	ldr	r0, [pc, #164]	@ (8014ff0 <hci_send_req+0x104>)
 8014f4a:	f000 fd48 	bl	80159de <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	7a5b      	ldrb	r3, [r3, #9]
 8014f52:	2b0f      	cmp	r3, #15
 8014f54:	d114      	bne.n	8014f80 <hci_send_req+0x94>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	330b      	adds	r3, #11
 8014f5a:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8014f5c:	693b      	ldr	r3, [r7, #16]
 8014f5e:	885b      	ldrh	r3, [r3, #2]
 8014f60:	b29b      	uxth	r3, r3
 8014f62:	8bba      	ldrh	r2, [r7, #28]
 8014f64:	429a      	cmp	r2, r3
 8014f66:	d104      	bne.n	8014f72 <hci_send_req+0x86>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	691b      	ldr	r3, [r3, #16]
 8014f6c:	693a      	ldr	r2, [r7, #16]
 8014f6e:	7812      	ldrb	r2, [r2, #0]
 8014f70:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8014f72:	693b      	ldr	r3, [r7, #16]
 8014f74:	785b      	ldrb	r3, [r3, #1]
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d027      	beq.n	8014fca <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8014f7a:	2301      	movs	r3, #1
 8014f7c:	77fb      	strb	r3, [r7, #31]
 8014f7e:	e024      	b.n	8014fca <hci_send_req+0xde>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	330b      	adds	r3, #11
 8014f84:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8014f86:	69bb      	ldr	r3, [r7, #24]
 8014f88:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8014f8c:	b29b      	uxth	r3, r3
 8014f8e:	8bba      	ldrh	r2, [r7, #28]
 8014f90:	429a      	cmp	r2, r3
 8014f92:	d114      	bne.n	8014fbe <hci_send_req+0xd2>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	7a9b      	ldrb	r3, [r3, #10]
 8014f98:	3b03      	subs	r3, #3
 8014f9a:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	695a      	ldr	r2, [r3, #20]
 8014fa0:	7dfb      	ldrb	r3, [r7, #23]
 8014fa2:	429a      	cmp	r2, r3
 8014fa4:	bfa8      	it	ge
 8014fa6:	461a      	movge	r2, r3
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	6918      	ldr	r0, [r3, #16]
 8014fb0:	69bb      	ldr	r3, [r7, #24]
 8014fb2:	1cd9      	adds	r1, r3, #3
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	695b      	ldr	r3, [r3, #20]
 8014fb8:	461a      	mov	r2, r3
 8014fba:	f005 fa4a 	bl	801a452 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8014fbe:	69bb      	ldr	r3, [r7, #24]
 8014fc0:	781b      	ldrb	r3, [r3, #0]
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d001      	beq.n	8014fca <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8014fc6:	2301      	movs	r3, #1
 8014fc8:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8014fca:	4809      	ldr	r0, [pc, #36]	@ (8014ff0 <hci_send_req+0x104>)
 8014fcc:	f000 fc78 	bl	80158c0 <LST_is_empty>
 8014fd0:	4603      	mov	r3, r0
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d0b5      	beq.n	8014f42 <hci_send_req+0x56>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8014fd6:	7ffb      	ldrb	r3, [r7, #31]
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d0ad      	beq.n	8014f38 <hci_send_req+0x4c>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8014fdc:	2001      	movs	r0, #1
 8014fde:	f000 f85f 	bl	80150a0 <NotifyCmdStatus>

  return 0;
 8014fe2:	2300      	movs	r3, #0
}
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	3720      	adds	r7, #32
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	bd80      	pop	{r7, pc}
 8014fec:	20000b04 	.word	0x20000b04
 8014ff0:	20000af8 	.word	0x20000af8

08014ff4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8014ff4:	b580      	push	{r7, lr}
 8014ff6:	b086      	sub	sp, #24
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8014ffc:	480f      	ldr	r0, [pc, #60]	@ (801503c <TlInit+0x48>)
 8014ffe:	f000 fc4f 	bl	80158a0 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8015002:	4a0f      	ldr	r2, [pc, #60]	@ (8015040 <TlInit+0x4c>)
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8015008:	480e      	ldr	r0, [pc, #56]	@ (8015044 <TlInit+0x50>)
 801500a:	f000 fc49 	bl	80158a0 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 801500e:	4b0e      	ldr	r3, [pc, #56]	@ (8015048 <TlInit+0x54>)
 8015010:	2201      	movs	r2, #1
 8015012:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8015014:	4b0d      	ldr	r3, [pc, #52]	@ (801504c <TlInit+0x58>)
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	2b00      	cmp	r3, #0
 801501a:	d00a      	beq.n	8015032 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8015020:	4b0b      	ldr	r3, [pc, #44]	@ (8015050 <TlInit+0x5c>)
 8015022:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8015024:	4b09      	ldr	r3, [pc, #36]	@ (801504c <TlInit+0x58>)
 8015026:	681b      	ldr	r3, [r3, #0]
 8015028:	f107 0208 	add.w	r2, r7, #8
 801502c:	4610      	mov	r0, r2
 801502e:	4798      	blx	r3
  }

  return;
 8015030:	bf00      	nop
 8015032:	bf00      	nop
}
 8015034:	3718      	adds	r7, #24
 8015036:	46bd      	mov	sp, r7
 8015038:	bd80      	pop	{r7, pc}
 801503a:	bf00      	nop
 801503c:	20000af8 	.word	0x20000af8
 8015040:	2000033c 	.word	0x2000033c
 8015044:	20000334 	.word	0x20000334
 8015048:	20000340 	.word	0x20000340
 801504c:	20000ad8 	.word	0x20000ad8
 8015050:	080150e1 	.word	0x080150e1

08015054 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8015054:	b580      	push	{r7, lr}
 8015056:	b082      	sub	sp, #8
 8015058:	af00      	add	r7, sp, #0
 801505a:	4603      	mov	r3, r0
 801505c:	603a      	str	r2, [r7, #0]
 801505e:	80fb      	strh	r3, [r7, #6]
 8015060:	460b      	mov	r3, r1
 8015062:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8015064:	4b0c      	ldr	r3, [pc, #48]	@ (8015098 <SendCmd+0x44>)
 8015066:	681b      	ldr	r3, [r3, #0]
 8015068:	88fa      	ldrh	r2, [r7, #6]
 801506a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 801506e:	4b0a      	ldr	r3, [pc, #40]	@ (8015098 <SendCmd+0x44>)
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	797a      	ldrb	r2, [r7, #5]
 8015074:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8015076:	4b08      	ldr	r3, [pc, #32]	@ (8015098 <SendCmd+0x44>)
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	330c      	adds	r3, #12
 801507c:	797a      	ldrb	r2, [r7, #5]
 801507e:	6839      	ldr	r1, [r7, #0]
 8015080:	4618      	mov	r0, r3
 8015082:	f005 f9e6 	bl	801a452 <memcpy>

  hciContext.io.Send(0,0);
 8015086:	4b05      	ldr	r3, [pc, #20]	@ (801509c <SendCmd+0x48>)
 8015088:	691b      	ldr	r3, [r3, #16]
 801508a:	2100      	movs	r1, #0
 801508c:	2000      	movs	r0, #0
 801508e:	4798      	blx	r3

  return;
 8015090:	bf00      	nop
}
 8015092:	3708      	adds	r7, #8
 8015094:	46bd      	mov	sp, r7
 8015096:	bd80      	pop	{r7, pc}
 8015098:	2000033c 	.word	0x2000033c
 801509c:	20000ad8 	.word	0x20000ad8

080150a0 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80150a0:	b580      	push	{r7, lr}
 80150a2:	b082      	sub	sp, #8
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	4603      	mov	r3, r0
 80150a8:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80150aa:	79fb      	ldrb	r3, [r7, #7]
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d108      	bne.n	80150c2 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80150b0:	4b0a      	ldr	r3, [pc, #40]	@ (80150dc <NotifyCmdStatus+0x3c>)
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d00d      	beq.n	80150d4 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80150b8:	4b08      	ldr	r3, [pc, #32]	@ (80150dc <NotifyCmdStatus+0x3c>)
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	2000      	movs	r0, #0
 80150be:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80150c0:	e008      	b.n	80150d4 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80150c2:	4b06      	ldr	r3, [pc, #24]	@ (80150dc <NotifyCmdStatus+0x3c>)
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d004      	beq.n	80150d4 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80150ca:	4b04      	ldr	r3, [pc, #16]	@ (80150dc <NotifyCmdStatus+0x3c>)
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	2001      	movs	r0, #1
 80150d0:	4798      	blx	r3
  return;
 80150d2:	bf00      	nop
 80150d4:	bf00      	nop
}
 80150d6:	3708      	adds	r7, #8
 80150d8:	46bd      	mov	sp, r7
 80150da:	bd80      	pop	{r7, pc}
 80150dc:	20000b00 	.word	0x20000b00

080150e0 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80150e0:	b580      	push	{r7, lr}
 80150e2:	b082      	sub	sp, #8
 80150e4:	af00      	add	r7, sp, #0
 80150e6:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	7a5b      	ldrb	r3, [r3, #9]
 80150ec:	2b0f      	cmp	r3, #15
 80150ee:	d003      	beq.n	80150f8 <TlEvtReceived+0x18>
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	7a5b      	ldrb	r3, [r3, #9]
 80150f4:	2b0e      	cmp	r3, #14
 80150f6:	d107      	bne.n	8015108 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80150f8:	6879      	ldr	r1, [r7, #4]
 80150fa:	4809      	ldr	r0, [pc, #36]	@ (8015120 <TlEvtReceived+0x40>)
 80150fc:	f000 fc28 	bl	8015950 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8015100:	2000      	movs	r0, #0
 8015102:	f000 ff49 	bl	8015f98 <hci_cmd_resp_release>
 8015106:	e006      	b.n	8015116 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8015108:	6879      	ldr	r1, [r7, #4]
 801510a:	4806      	ldr	r0, [pc, #24]	@ (8015124 <TlEvtReceived+0x44>)
 801510c:	f000 fc20 	bl	8015950 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8015110:	4804      	ldr	r0, [pc, #16]	@ (8015124 <TlEvtReceived+0x44>)
 8015112:	f000 ff35 	bl	8015f80 <hci_notify_asynch_evt>
  }

  return;
 8015116:	bf00      	nop
}
 8015118:	3708      	adds	r7, #8
 801511a:	46bd      	mov	sp, r7
 801511c:	bd80      	pop	{r7, pc}
 801511e:	bf00      	nop
 8015120:	20000af8 	.word	0x20000af8
 8015124:	20000334 	.word	0x20000334

08015128 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8015128:	b480      	push	{r7}
 801512a:	b083      	sub	sp, #12
 801512c:	af00      	add	r7, sp, #0
 801512e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	4a05      	ldr	r2, [pc, #20]	@ (8015148 <hci_register_io_bus+0x20>)
 8015134:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	4a04      	ldr	r2, [pc, #16]	@ (801514c <hci_register_io_bus+0x24>)
 801513a:	611a      	str	r2, [r3, #16]

  return;
 801513c:	bf00      	nop
}
 801513e:	370c      	adds	r7, #12
 8015140:	46bd      	mov	sp, r7
 8015142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015146:	4770      	bx	lr
 8015148:	08015441 	.word	0x08015441
 801514c:	080154a9 	.word	0x080154a9

08015150 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8015150:	b580      	push	{r7, lr}
 8015152:	b082      	sub	sp, #8
 8015154:	af00      	add	r7, sp, #0
 8015156:	6078      	str	r0, [r7, #4]
 8015158:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 801515a:	683b      	ldr	r3, [r7, #0]
 801515c:	685b      	ldr	r3, [r3, #4]
 801515e:	4a08      	ldr	r2, [pc, #32]	@ (8015180 <shci_init+0x30>)
 8015160:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8015162:	4a08      	ldr	r2, [pc, #32]	@ (8015184 <shci_init+0x34>)
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8015168:	4806      	ldr	r0, [pc, #24]	@ (8015184 <shci_init+0x34>)
 801516a:	f000 f915 	bl	8015398 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 801516e:	683b      	ldr	r3, [r7, #0]
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	4618      	mov	r0, r3
 8015174:	f000 f898 	bl	80152a8 <TlInit>

  return;
 8015178:	bf00      	nop
}
 801517a:	3708      	adds	r7, #8
 801517c:	46bd      	mov	sp, r7
 801517e:	bd80      	pop	{r7, pc}
 8015180:	20000b28 	.word	0x20000b28
 8015184:	20000b08 	.word	0x20000b08

08015188 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8015188:	b580      	push	{r7, lr}
 801518a:	b084      	sub	sp, #16
 801518c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 801518e:	4822      	ldr	r0, [pc, #136]	@ (8015218 <shci_user_evt_proc+0x90>)
 8015190:	f000 fb96 	bl	80158c0 <LST_is_empty>
 8015194:	4603      	mov	r3, r0
 8015196:	2b00      	cmp	r3, #0
 8015198:	d12b      	bne.n	80151f2 <shci_user_evt_proc+0x6a>
 801519a:	4b20      	ldr	r3, [pc, #128]	@ (801521c <shci_user_evt_proc+0x94>)
 801519c:	781b      	ldrb	r3, [r3, #0]
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d027      	beq.n	80151f2 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80151a2:	f107 030c 	add.w	r3, r7, #12
 80151a6:	4619      	mov	r1, r3
 80151a8:	481b      	ldr	r0, [pc, #108]	@ (8015218 <shci_user_evt_proc+0x90>)
 80151aa:	f000 fc18 	bl	80159de <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80151ae:	4b1c      	ldr	r3, [pc, #112]	@ (8015220 <shci_user_evt_proc+0x98>)
 80151b0:	69db      	ldr	r3, [r3, #28]
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d00c      	beq.n	80151d0 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80151ba:	2301      	movs	r3, #1
 80151bc:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80151be:	4b18      	ldr	r3, [pc, #96]	@ (8015220 <shci_user_evt_proc+0x98>)
 80151c0:	69db      	ldr	r3, [r3, #28]
 80151c2:	1d3a      	adds	r2, r7, #4
 80151c4:	4610      	mov	r0, r2
 80151c6:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80151c8:	793a      	ldrb	r2, [r7, #4]
 80151ca:	4b14      	ldr	r3, [pc, #80]	@ (801521c <shci_user_evt_proc+0x94>)
 80151cc:	701a      	strb	r2, [r3, #0]
 80151ce:	e002      	b.n	80151d6 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80151d0:	4b12      	ldr	r3, [pc, #72]	@ (801521c <shci_user_evt_proc+0x94>)
 80151d2:	2201      	movs	r2, #1
 80151d4:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80151d6:	4b11      	ldr	r3, [pc, #68]	@ (801521c <shci_user_evt_proc+0x94>)
 80151d8:	781b      	ldrb	r3, [r3, #0]
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d004      	beq.n	80151e8 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	4618      	mov	r0, r3
 80151e2:	f000 fa71 	bl	80156c8 <TL_MM_EvtDone>
 80151e6:	e004      	b.n	80151f2 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	4619      	mov	r1, r3
 80151ec:	480a      	ldr	r0, [pc, #40]	@ (8015218 <shci_user_evt_proc+0x90>)
 80151ee:	f000 fb89 	bl	8015904 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80151f2:	4809      	ldr	r0, [pc, #36]	@ (8015218 <shci_user_evt_proc+0x90>)
 80151f4:	f000 fb64 	bl	80158c0 <LST_is_empty>
 80151f8:	4603      	mov	r3, r0
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d107      	bne.n	801520e <shci_user_evt_proc+0x86>
 80151fe:	4b07      	ldr	r3, [pc, #28]	@ (801521c <shci_user_evt_proc+0x94>)
 8015200:	781b      	ldrb	r3, [r3, #0]
 8015202:	2b00      	cmp	r3, #0
 8015204:	d003      	beq.n	801520e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8015206:	4804      	ldr	r0, [pc, #16]	@ (8015218 <shci_user_evt_proc+0x90>)
 8015208:	f7ef ff2d 	bl	8005066 <shci_notify_asynch_evt>
  }


  return;
 801520c:	bf00      	nop
 801520e:	bf00      	nop
}
 8015210:	3710      	adds	r7, #16
 8015212:	46bd      	mov	sp, r7
 8015214:	bd80      	pop	{r7, pc}
 8015216:	bf00      	nop
 8015218:	20000344 	.word	0x20000344
 801521c:	20000354 	.word	0x20000354
 8015220:	20000b08 	.word	0x20000b08

08015224 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8015224:	b580      	push	{r7, lr}
 8015226:	b084      	sub	sp, #16
 8015228:	af00      	add	r7, sp, #0
 801522a:	60ba      	str	r2, [r7, #8]
 801522c:	607b      	str	r3, [r7, #4]
 801522e:	4603      	mov	r3, r0
 8015230:	81fb      	strh	r3, [r7, #14]
 8015232:	460b      	mov	r3, r1
 8015234:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8015236:	2000      	movs	r0, #0
 8015238:	f000 f868 	bl	801530c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 801523c:	4b17      	ldr	r3, [pc, #92]	@ (801529c <shci_send+0x78>)
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	89fa      	ldrh	r2, [r7, #14]
 8015242:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8015246:	4b15      	ldr	r3, [pc, #84]	@ (801529c <shci_send+0x78>)
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	7b7a      	ldrb	r2, [r7, #13]
 801524c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 801524e:	4b13      	ldr	r3, [pc, #76]	@ (801529c <shci_send+0x78>)
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	330c      	adds	r3, #12
 8015254:	7b7a      	ldrb	r2, [r7, #13]
 8015256:	68b9      	ldr	r1, [r7, #8]
 8015258:	4618      	mov	r0, r3
 801525a:	f005 f8fa 	bl	801a452 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 801525e:	4b10      	ldr	r3, [pc, #64]	@ (80152a0 <shci_send+0x7c>)
 8015260:	2201      	movs	r2, #1
 8015262:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8015264:	4b0f      	ldr	r3, [pc, #60]	@ (80152a4 <shci_send+0x80>)
 8015266:	691b      	ldr	r3, [r3, #16]
 8015268:	2100      	movs	r1, #0
 801526a:	2000      	movs	r0, #0
 801526c:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 801526e:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8015272:	f7ef ff0f 	bl	8005094 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	f103 0008 	add.w	r0, r3, #8
 801527c:	4b07      	ldr	r3, [pc, #28]	@ (801529c <shci_send+0x78>)
 801527e:	6819      	ldr	r1, [r3, #0]
 8015280:	4b06      	ldr	r3, [pc, #24]	@ (801529c <shci_send+0x78>)
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	789b      	ldrb	r3, [r3, #2]
 8015286:	3303      	adds	r3, #3
 8015288:	461a      	mov	r2, r3
 801528a:	f005 f8e2 	bl	801a452 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 801528e:	2001      	movs	r0, #1
 8015290:	f000 f83c 	bl	801530c <Cmd_SetStatus>

  return;
 8015294:	bf00      	nop
}
 8015296:	3710      	adds	r7, #16
 8015298:	46bd      	mov	sp, r7
 801529a:	bd80      	pop	{r7, pc}
 801529c:	20000350 	.word	0x20000350
 80152a0:	20000b2c 	.word	0x20000b2c
 80152a4:	20000b08 	.word	0x20000b08

080152a8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80152a8:	b580      	push	{r7, lr}
 80152aa:	b086      	sub	sp, #24
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80152b0:	4a10      	ldr	r2, [pc, #64]	@ (80152f4 <TlInit+0x4c>)
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80152b6:	4810      	ldr	r0, [pc, #64]	@ (80152f8 <TlInit+0x50>)
 80152b8:	f000 faf2 	bl	80158a0 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80152bc:	2001      	movs	r0, #1
 80152be:	f000 f825 	bl	801530c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80152c2:	4b0e      	ldr	r3, [pc, #56]	@ (80152fc <TlInit+0x54>)
 80152c4:	2201      	movs	r2, #1
 80152c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80152c8:	4b0d      	ldr	r3, [pc, #52]	@ (8015300 <TlInit+0x58>)
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d00c      	beq.n	80152ea <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80152d4:	4b0b      	ldr	r3, [pc, #44]	@ (8015304 <TlInit+0x5c>)
 80152d6:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80152d8:	4b0b      	ldr	r3, [pc, #44]	@ (8015308 <TlInit+0x60>)
 80152da:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80152dc:	4b08      	ldr	r3, [pc, #32]	@ (8015300 <TlInit+0x58>)
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	f107 020c 	add.w	r2, r7, #12
 80152e4:	4610      	mov	r0, r2
 80152e6:	4798      	blx	r3
  }

  return;
 80152e8:	bf00      	nop
 80152ea:	bf00      	nop
}
 80152ec:	3718      	adds	r7, #24
 80152ee:	46bd      	mov	sp, r7
 80152f0:	bd80      	pop	{r7, pc}
 80152f2:	bf00      	nop
 80152f4:	20000350 	.word	0x20000350
 80152f8:	20000344 	.word	0x20000344
 80152fc:	20000354 	.word	0x20000354
 8015300:	20000b08 	.word	0x20000b08
 8015304:	0801535d 	.word	0x0801535d
 8015308:	08015375 	.word	0x08015375

0801530c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 801530c:	b580      	push	{r7, lr}
 801530e:	b082      	sub	sp, #8
 8015310:	af00      	add	r7, sp, #0
 8015312:	4603      	mov	r3, r0
 8015314:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8015316:	79fb      	ldrb	r3, [r7, #7]
 8015318:	2b00      	cmp	r3, #0
 801531a:	d10b      	bne.n	8015334 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 801531c:	4b0d      	ldr	r3, [pc, #52]	@ (8015354 <Cmd_SetStatus+0x48>)
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	2b00      	cmp	r3, #0
 8015322:	d003      	beq.n	801532c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8015324:	4b0b      	ldr	r3, [pc, #44]	@ (8015354 <Cmd_SetStatus+0x48>)
 8015326:	681b      	ldr	r3, [r3, #0]
 8015328:	2000      	movs	r0, #0
 801532a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 801532c:	4b0a      	ldr	r3, [pc, #40]	@ (8015358 <Cmd_SetStatus+0x4c>)
 801532e:	2200      	movs	r2, #0
 8015330:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8015332:	e00b      	b.n	801534c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8015334:	4b08      	ldr	r3, [pc, #32]	@ (8015358 <Cmd_SetStatus+0x4c>)
 8015336:	2201      	movs	r2, #1
 8015338:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 801533a:	4b06      	ldr	r3, [pc, #24]	@ (8015354 <Cmd_SetStatus+0x48>)
 801533c:	681b      	ldr	r3, [r3, #0]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d004      	beq.n	801534c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8015342:	4b04      	ldr	r3, [pc, #16]	@ (8015354 <Cmd_SetStatus+0x48>)
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	2001      	movs	r0, #1
 8015348:	4798      	blx	r3
  return;
 801534a:	bf00      	nop
 801534c:	bf00      	nop
}
 801534e:	3708      	adds	r7, #8
 8015350:	46bd      	mov	sp, r7
 8015352:	bd80      	pop	{r7, pc}
 8015354:	20000b28 	.word	0x20000b28
 8015358:	2000034c 	.word	0x2000034c

0801535c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 801535c:	b580      	push	{r7, lr}
 801535e:	b082      	sub	sp, #8
 8015360:	af00      	add	r7, sp, #0
 8015362:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8015364:	2000      	movs	r0, #0
 8015366:	f7ef fe8a 	bl	800507e <shci_cmd_resp_release>

  return;
 801536a:	bf00      	nop
}
 801536c:	3708      	adds	r7, #8
 801536e:	46bd      	mov	sp, r7
 8015370:	bd80      	pop	{r7, pc}
	...

08015374 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8015374:	b580      	push	{r7, lr}
 8015376:	b082      	sub	sp, #8
 8015378:	af00      	add	r7, sp, #0
 801537a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 801537c:	6879      	ldr	r1, [r7, #4]
 801537e:	4805      	ldr	r0, [pc, #20]	@ (8015394 <TlUserEvtReceived+0x20>)
 8015380:	f000 fae6 	bl	8015950 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8015384:	4803      	ldr	r0, [pc, #12]	@ (8015394 <TlUserEvtReceived+0x20>)
 8015386:	f7ef fe6e 	bl	8005066 <shci_notify_asynch_evt>

  return;
 801538a:	bf00      	nop
}
 801538c:	3708      	adds	r7, #8
 801538e:	46bd      	mov	sp, r7
 8015390:	bd80      	pop	{r7, pc}
 8015392:	bf00      	nop
 8015394:	20000344 	.word	0x20000344

08015398 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8015398:	b480      	push	{r7}
 801539a:	b083      	sub	sp, #12
 801539c:	af00      	add	r7, sp, #0
 801539e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	4a05      	ldr	r2, [pc, #20]	@ (80153b8 <shci_register_io_bus+0x20>)
 80153a4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	4a04      	ldr	r2, [pc, #16]	@ (80153bc <shci_register_io_bus+0x24>)
 80153aa:	611a      	str	r2, [r3, #16]

  return;
 80153ac:	bf00      	nop
}
 80153ae:	370c      	adds	r7, #12
 80153b0:	46bd      	mov	sp, r7
 80153b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b6:	4770      	bx	lr
 80153b8:	08015555 	.word	0x08015555
 80153bc:	080155a9 	.word	0x080155a9

080153c0 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 80153c0:	b580      	push	{r7, lr}
 80153c2:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80153c4:	f001 f9e4 	bl	8016790 <HW_IPCC_Enable>

  return;
 80153c8:	bf00      	nop
}
 80153ca:	bd80      	pop	{r7, pc}

080153cc <TL_Init>:


void TL_Init( void )
{
 80153cc:	b580      	push	{r7, lr}
 80153ce:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80153d0:	4b10      	ldr	r3, [pc, #64]	@ (8015414 <TL_Init+0x48>)
 80153d2:	4a11      	ldr	r2, [pc, #68]	@ (8015418 <TL_Init+0x4c>)
 80153d4:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80153d6:	4b0f      	ldr	r3, [pc, #60]	@ (8015414 <TL_Init+0x48>)
 80153d8:	4a10      	ldr	r2, [pc, #64]	@ (801541c <TL_Init+0x50>)
 80153da:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80153dc:	4b0d      	ldr	r3, [pc, #52]	@ (8015414 <TL_Init+0x48>)
 80153de:	4a10      	ldr	r2, [pc, #64]	@ (8015420 <TL_Init+0x54>)
 80153e0:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80153e2:	4b0c      	ldr	r3, [pc, #48]	@ (8015414 <TL_Init+0x48>)
 80153e4:	4a0f      	ldr	r2, [pc, #60]	@ (8015424 <TL_Init+0x58>)
 80153e6:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80153e8:	4b0a      	ldr	r3, [pc, #40]	@ (8015414 <TL_Init+0x48>)
 80153ea:	4a0f      	ldr	r2, [pc, #60]	@ (8015428 <TL_Init+0x5c>)
 80153ec:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80153ee:	4b09      	ldr	r3, [pc, #36]	@ (8015414 <TL_Init+0x48>)
 80153f0:	4a0e      	ldr	r2, [pc, #56]	@ (801542c <TL_Init+0x60>)
 80153f2:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80153f4:	4b07      	ldr	r3, [pc, #28]	@ (8015414 <TL_Init+0x48>)
 80153f6:	4a0e      	ldr	r2, [pc, #56]	@ (8015430 <TL_Init+0x64>)
 80153f8:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80153fa:	4b06      	ldr	r3, [pc, #24]	@ (8015414 <TL_Init+0x48>)
 80153fc:	4a0d      	ldr	r2, [pc, #52]	@ (8015434 <TL_Init+0x68>)
 80153fe:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8015400:	4b04      	ldr	r3, [pc, #16]	@ (8015414 <TL_Init+0x48>)
 8015402:	4a0d      	ldr	r2, [pc, #52]	@ (8015438 <TL_Init+0x6c>)
 8015404:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8015406:	4b03      	ldr	r3, [pc, #12]	@ (8015414 <TL_Init+0x48>)
 8015408:	4a0c      	ldr	r2, [pc, #48]	@ (801543c <TL_Init+0x70>)
 801540a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 801540c:	f001 f9d4 	bl	80167b8 <HW_IPCC_Init>

  return;
 8015410:	bf00      	nop
}
 8015412:	bd80      	pop	{r7, pc}
 8015414:	20030000 	.word	0x20030000
 8015418:	20030028 	.word	0x20030028
 801541c:	20030048 	.word	0x20030048
 8015420:	20030058 	.word	0x20030058
 8015424:	20030068 	.word	0x20030068
 8015428:	20030070 	.word	0x20030070
 801542c:	20030078 	.word	0x20030078
 8015430:	20030080 	.word	0x20030080
 8015434:	2003009c 	.word	0x2003009c
 8015438:	200300a0 	.word	0x200300a0
 801543c:	200300ac 	.word	0x200300ac

08015440 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8015440:	b580      	push	{r7, lr}
 8015442:	b084      	sub	sp, #16
 8015444:	af00      	add	r7, sp, #0
 8015446:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 801544c:	4811      	ldr	r0, [pc, #68]	@ (8015494 <TL_BLE_Init+0x54>)
 801544e:	f000 fa27 	bl	80158a0 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8015452:	4b11      	ldr	r3, [pc, #68]	@ (8015498 <TL_BLE_Init+0x58>)
 8015454:	685b      	ldr	r3, [r3, #4]
 8015456:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	689a      	ldr	r2, [r3, #8]
 801545c:	68bb      	ldr	r3, [r7, #8]
 801545e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	68da      	ldr	r2, [r3, #12]
 8015464:	68bb      	ldr	r3, [r7, #8]
 8015466:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8015468:	68bb      	ldr	r3, [r7, #8]
 801546a:	4a0c      	ldr	r2, [pc, #48]	@ (801549c <TL_BLE_Init+0x5c>)
 801546c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 801546e:	68bb      	ldr	r3, [r7, #8]
 8015470:	4a08      	ldr	r2, [pc, #32]	@ (8015494 <TL_BLE_Init+0x54>)
 8015472:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8015474:	f001 f9b6 	bl	80167e4 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	681b      	ldr	r3, [r3, #0]
 801547c:	4a08      	ldr	r2, [pc, #32]	@ (80154a0 <TL_BLE_Init+0x60>)
 801547e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	685b      	ldr	r3, [r3, #4]
 8015484:	4a07      	ldr	r2, [pc, #28]	@ (80154a4 <TL_BLE_Init+0x64>)
 8015486:	6013      	str	r3, [r2, #0]

  return 0;
 8015488:	2300      	movs	r3, #0
}
 801548a:	4618      	mov	r0, r3
 801548c:	3710      	adds	r7, #16
 801548e:	46bd      	mov	sp, r7
 8015490:	bd80      	pop	{r7, pc}
 8015492:	bf00      	nop
 8015494:	200300c8 	.word	0x200300c8
 8015498:	20030000 	.word	0x20030000
 801549c:	20030a58 	.word	0x20030a58
 80154a0:	20000b38 	.word	0x20000b38
 80154a4:	20000b3c 	.word	0x20000b3c

080154a8 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80154a8:	b580      	push	{r7, lr}
 80154aa:	b082      	sub	sp, #8
 80154ac:	af00      	add	r7, sp, #0
 80154ae:	6078      	str	r0, [r7, #4]
 80154b0:	460b      	mov	r3, r1
 80154b2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80154b4:	4b09      	ldr	r3, [pc, #36]	@ (80154dc <TL_BLE_SendCmd+0x34>)
 80154b6:	685b      	ldr	r3, [r3, #4]
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	2201      	movs	r2, #1
 80154bc:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80154be:	4b07      	ldr	r3, [pc, #28]	@ (80154dc <TL_BLE_SendCmd+0x34>)
 80154c0:	685b      	ldr	r3, [r3, #4]
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	4619      	mov	r1, r3
 80154c6:	2001      	movs	r0, #1
 80154c8:	f000 f96c 	bl	80157a4 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80154cc:	f001 f9a4 	bl	8016818 <HW_IPCC_BLE_SendCmd>

  return 0;
 80154d0:	2300      	movs	r3, #0
}
 80154d2:	4618      	mov	r0, r3
 80154d4:	3708      	adds	r7, #8
 80154d6:	46bd      	mov	sp, r7
 80154d8:	bd80      	pop	{r7, pc}
 80154da:	bf00      	nop
 80154dc:	20030000 	.word	0x20030000

080154e0 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80154e0:	b580      	push	{r7, lr}
 80154e2:	b082      	sub	sp, #8
 80154e4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80154e6:	e01c      	b.n	8015522 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80154e8:	1d3b      	adds	r3, r7, #4
 80154ea:	4619      	mov	r1, r3
 80154ec:	4812      	ldr	r0, [pc, #72]	@ (8015538 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80154ee:	f000 fa76 	bl	80159de <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	7a5b      	ldrb	r3, [r3, #9]
 80154f6:	2b0f      	cmp	r3, #15
 80154f8:	d003      	beq.n	8015502 <HW_IPCC_BLE_RxEvtNot+0x22>
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	7a5b      	ldrb	r3, [r3, #9]
 80154fe:	2b0e      	cmp	r3, #14
 8015500:	d105      	bne.n	801550e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	4619      	mov	r1, r3
 8015506:	2002      	movs	r0, #2
 8015508:	f000 f94c 	bl	80157a4 <OutputDbgTrace>
 801550c:	e004      	b.n	8015518 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	4619      	mov	r1, r3
 8015512:	2003      	movs	r0, #3
 8015514:	f000 f946 	bl	80157a4 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8015518:	4b08      	ldr	r3, [pc, #32]	@ (801553c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	687a      	ldr	r2, [r7, #4]
 801551e:	4610      	mov	r0, r2
 8015520:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8015522:	4805      	ldr	r0, [pc, #20]	@ (8015538 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8015524:	f000 f9cc 	bl	80158c0 <LST_is_empty>
 8015528:	4603      	mov	r3, r0
 801552a:	2b00      	cmp	r3, #0
 801552c:	d0dc      	beq.n	80154e8 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 801552e:	bf00      	nop
}
 8015530:	3708      	adds	r7, #8
 8015532:	46bd      	mov	sp, r7
 8015534:	bd80      	pop	{r7, pc}
 8015536:	bf00      	nop
 8015538:	200300c8 	.word	0x200300c8
 801553c:	20000b38 	.word	0x20000b38

08015540 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8015540:	b580      	push	{r7, lr}
 8015542:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8015544:	4b02      	ldr	r3, [pc, #8]	@ (8015550 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	4798      	blx	r3

  return;
 801554a:	bf00      	nop
}
 801554c:	bd80      	pop	{r7, pc}
 801554e:	bf00      	nop
 8015550:	20000b3c 	.word	0x20000b3c

08015554 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8015554:	b580      	push	{r7, lr}
 8015556:	b084      	sub	sp, #16
 8015558:	af00      	add	r7, sp, #0
 801555a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8015560:	480d      	ldr	r0, [pc, #52]	@ (8015598 <TL_SYS_Init+0x44>)
 8015562:	f000 f99d 	bl	80158a0 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8015566:	4b0d      	ldr	r3, [pc, #52]	@ (801559c <TL_SYS_Init+0x48>)
 8015568:	68db      	ldr	r3, [r3, #12]
 801556a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	689a      	ldr	r2, [r3, #8]
 8015570:	68bb      	ldr	r3, [r7, #8]
 8015572:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8015574:	68bb      	ldr	r3, [r7, #8]
 8015576:	4a08      	ldr	r2, [pc, #32]	@ (8015598 <TL_SYS_Init+0x44>)
 8015578:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 801557a:	f001 f97f 	bl	801687c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	681b      	ldr	r3, [r3, #0]
 8015582:	4a07      	ldr	r2, [pc, #28]	@ (80155a0 <TL_SYS_Init+0x4c>)
 8015584:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	685b      	ldr	r3, [r3, #4]
 801558a:	4a06      	ldr	r2, [pc, #24]	@ (80155a4 <TL_SYS_Init+0x50>)
 801558c:	6013      	str	r3, [r2, #0]

  return 0;
 801558e:	2300      	movs	r3, #0
}
 8015590:	4618      	mov	r0, r3
 8015592:	3710      	adds	r7, #16
 8015594:	46bd      	mov	sp, r7
 8015596:	bd80      	pop	{r7, pc}
 8015598:	200300d0 	.word	0x200300d0
 801559c:	20030000 	.word	0x20030000
 80155a0:	20000b40 	.word	0x20000b40
 80155a4:	20000b44 	.word	0x20000b44

080155a8 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80155a8:	b580      	push	{r7, lr}
 80155aa:	b082      	sub	sp, #8
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	6078      	str	r0, [r7, #4]
 80155b0:	460b      	mov	r3, r1
 80155b2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80155b4:	4b09      	ldr	r3, [pc, #36]	@ (80155dc <TL_SYS_SendCmd+0x34>)
 80155b6:	68db      	ldr	r3, [r3, #12]
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	2210      	movs	r2, #16
 80155bc:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80155be:	4b07      	ldr	r3, [pc, #28]	@ (80155dc <TL_SYS_SendCmd+0x34>)
 80155c0:	68db      	ldr	r3, [r3, #12]
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	4619      	mov	r1, r3
 80155c6:	2004      	movs	r0, #4
 80155c8:	f000 f8ec 	bl	80157a4 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80155cc:	f001 f970 	bl	80168b0 <HW_IPCC_SYS_SendCmd>

  return 0;
 80155d0:	2300      	movs	r3, #0
}
 80155d2:	4618      	mov	r0, r3
 80155d4:	3708      	adds	r7, #8
 80155d6:	46bd      	mov	sp, r7
 80155d8:	bd80      	pop	{r7, pc}
 80155da:	bf00      	nop
 80155dc:	20030000 	.word	0x20030000

080155e0 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80155e0:	b580      	push	{r7, lr}
 80155e2:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80155e4:	4b07      	ldr	r3, [pc, #28]	@ (8015604 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80155e6:	68db      	ldr	r3, [r3, #12]
 80155e8:	681b      	ldr	r3, [r3, #0]
 80155ea:	4619      	mov	r1, r3
 80155ec:	2005      	movs	r0, #5
 80155ee:	f000 f8d9 	bl	80157a4 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80155f2:	4b05      	ldr	r3, [pc, #20]	@ (8015608 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	4a03      	ldr	r2, [pc, #12]	@ (8015604 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80155f8:	68d2      	ldr	r2, [r2, #12]
 80155fa:	6812      	ldr	r2, [r2, #0]
 80155fc:	4610      	mov	r0, r2
 80155fe:	4798      	blx	r3

  return;
 8015600:	bf00      	nop
}
 8015602:	bd80      	pop	{r7, pc}
 8015604:	20030000 	.word	0x20030000
 8015608:	20000b40 	.word	0x20000b40

0801560c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 801560c:	b580      	push	{r7, lr}
 801560e:	b082      	sub	sp, #8
 8015610:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8015612:	e00e      	b.n	8015632 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8015614:	1d3b      	adds	r3, r7, #4
 8015616:	4619      	mov	r1, r3
 8015618:	480b      	ldr	r0, [pc, #44]	@ (8015648 <HW_IPCC_SYS_EvtNot+0x3c>)
 801561a:	f000 f9e0 	bl	80159de <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	4619      	mov	r1, r3
 8015622:	2006      	movs	r0, #6
 8015624:	f000 f8be 	bl	80157a4 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8015628:	4b08      	ldr	r3, [pc, #32]	@ (801564c <HW_IPCC_SYS_EvtNot+0x40>)
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	687a      	ldr	r2, [r7, #4]
 801562e:	4610      	mov	r0, r2
 8015630:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8015632:	4805      	ldr	r0, [pc, #20]	@ (8015648 <HW_IPCC_SYS_EvtNot+0x3c>)
 8015634:	f000 f944 	bl	80158c0 <LST_is_empty>
 8015638:	4603      	mov	r3, r0
 801563a:	2b00      	cmp	r3, #0
 801563c:	d0ea      	beq.n	8015614 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 801563e:	bf00      	nop
}
 8015640:	3708      	adds	r7, #8
 8015642:	46bd      	mov	sp, r7
 8015644:	bd80      	pop	{r7, pc}
 8015646:	bf00      	nop
 8015648:	200300d0 	.word	0x200300d0
 801564c:	20000b44 	.word	0x20000b44

08015650 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8015650:	b580      	push	{r7, lr}
 8015652:	b082      	sub	sp, #8
 8015654:	af00      	add	r7, sp, #0
 8015656:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8015658:	4817      	ldr	r0, [pc, #92]	@ (80156b8 <TL_MM_Init+0x68>)
 801565a:	f000 f921 	bl	80158a0 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 801565e:	4817      	ldr	r0, [pc, #92]	@ (80156bc <TL_MM_Init+0x6c>)
 8015660:	f000 f91e 	bl	80158a0 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8015664:	4b16      	ldr	r3, [pc, #88]	@ (80156c0 <TL_MM_Init+0x70>)
 8015666:	691b      	ldr	r3, [r3, #16]
 8015668:	4a16      	ldr	r2, [pc, #88]	@ (80156c4 <TL_MM_Init+0x74>)
 801566a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 801566c:	4b15      	ldr	r3, [pc, #84]	@ (80156c4 <TL_MM_Init+0x74>)
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	687a      	ldr	r2, [r7, #4]
 8015672:	6892      	ldr	r2, [r2, #8]
 8015674:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8015676:	4b13      	ldr	r3, [pc, #76]	@ (80156c4 <TL_MM_Init+0x74>)
 8015678:	681b      	ldr	r3, [r3, #0]
 801567a:	687a      	ldr	r2, [r7, #4]
 801567c:	68d2      	ldr	r2, [r2, #12]
 801567e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8015680:	4b10      	ldr	r3, [pc, #64]	@ (80156c4 <TL_MM_Init+0x74>)
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	4a0c      	ldr	r2, [pc, #48]	@ (80156b8 <TL_MM_Init+0x68>)
 8015686:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8015688:	4b0e      	ldr	r3, [pc, #56]	@ (80156c4 <TL_MM_Init+0x74>)
 801568a:	681b      	ldr	r3, [r3, #0]
 801568c:	687a      	ldr	r2, [r7, #4]
 801568e:	6812      	ldr	r2, [r2, #0]
 8015690:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8015692:	4b0c      	ldr	r3, [pc, #48]	@ (80156c4 <TL_MM_Init+0x74>)
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	687a      	ldr	r2, [r7, #4]
 8015698:	6852      	ldr	r2, [r2, #4]
 801569a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 801569c:	4b09      	ldr	r3, [pc, #36]	@ (80156c4 <TL_MM_Init+0x74>)
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	687a      	ldr	r2, [r7, #4]
 80156a2:	6912      	ldr	r2, [r2, #16]
 80156a4:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80156a6:	4b07      	ldr	r3, [pc, #28]	@ (80156c4 <TL_MM_Init+0x74>)
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	687a      	ldr	r2, [r7, #4]
 80156ac:	6952      	ldr	r2, [r2, #20]
 80156ae:	619a      	str	r2, [r3, #24]

  return;
 80156b0:	bf00      	nop
}
 80156b2:	3708      	adds	r7, #8
 80156b4:	46bd      	mov	sp, r7
 80156b6:	bd80      	pop	{r7, pc}
 80156b8:	200300b8 	.word	0x200300b8
 80156bc:	20000b30 	.word	0x20000b30
 80156c0:	20030000 	.word	0x20030000
 80156c4:	20000b48 	.word	0x20000b48

080156c8 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80156c8:	b580      	push	{r7, lr}
 80156ca:	b082      	sub	sp, #8
 80156cc:	af00      	add	r7, sp, #0
 80156ce:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80156d0:	6879      	ldr	r1, [r7, #4]
 80156d2:	4807      	ldr	r0, [pc, #28]	@ (80156f0 <TL_MM_EvtDone+0x28>)
 80156d4:	f000 f93c 	bl	8015950 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80156d8:	6879      	ldr	r1, [r7, #4]
 80156da:	2000      	movs	r0, #0
 80156dc:	f000 f862 	bl	80157a4 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80156e0:	4804      	ldr	r0, [pc, #16]	@ (80156f4 <TL_MM_EvtDone+0x2c>)
 80156e2:	f001 f92b 	bl	801693c <HW_IPCC_MM_SendFreeBuf>

  return;
 80156e6:	bf00      	nop
}
 80156e8:	3708      	adds	r7, #8
 80156ea:	46bd      	mov	sp, r7
 80156ec:	bd80      	pop	{r7, pc}
 80156ee:	bf00      	nop
 80156f0:	20000b30 	.word	0x20000b30
 80156f4:	080156f9 	.word	0x080156f9

080156f8 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80156f8:	b580      	push	{r7, lr}
 80156fa:	b082      	sub	sp, #8
 80156fc:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80156fe:	e00c      	b.n	801571a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8015700:	1d3b      	adds	r3, r7, #4
 8015702:	4619      	mov	r1, r3
 8015704:	480a      	ldr	r0, [pc, #40]	@ (8015730 <SendFreeBuf+0x38>)
 8015706:	f000 f96a 	bl	80159de <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 801570a:	4b0a      	ldr	r3, [pc, #40]	@ (8015734 <SendFreeBuf+0x3c>)
 801570c:	691b      	ldr	r3, [r3, #16]
 801570e:	691b      	ldr	r3, [r3, #16]
 8015710:	687a      	ldr	r2, [r7, #4]
 8015712:	4611      	mov	r1, r2
 8015714:	4618      	mov	r0, r3
 8015716:	f000 f91b 	bl	8015950 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 801571a:	4805      	ldr	r0, [pc, #20]	@ (8015730 <SendFreeBuf+0x38>)
 801571c:	f000 f8d0 	bl	80158c0 <LST_is_empty>
 8015720:	4603      	mov	r3, r0
 8015722:	2b00      	cmp	r3, #0
 8015724:	d0ec      	beq.n	8015700 <SendFreeBuf+0x8>
  }

  return;
 8015726:	bf00      	nop
}
 8015728:	3708      	adds	r7, #8
 801572a:	46bd      	mov	sp, r7
 801572c:	bd80      	pop	{r7, pc}
 801572e:	bf00      	nop
 8015730:	20000b30 	.word	0x20000b30
 8015734:	20030000 	.word	0x20030000

08015738 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8015738:	b580      	push	{r7, lr}
 801573a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 801573c:	4805      	ldr	r0, [pc, #20]	@ (8015754 <TL_TRACES_Init+0x1c>)
 801573e:	f000 f8af 	bl	80158a0 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8015742:	4b05      	ldr	r3, [pc, #20]	@ (8015758 <TL_TRACES_Init+0x20>)
 8015744:	695b      	ldr	r3, [r3, #20]
 8015746:	4a03      	ldr	r2, [pc, #12]	@ (8015754 <TL_TRACES_Init+0x1c>)
 8015748:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 801574a:	f001 f949 	bl	80169e0 <HW_IPCC_TRACES_Init>

  return;
 801574e:	bf00      	nop
}
 8015750:	bd80      	pop	{r7, pc}
 8015752:	bf00      	nop
 8015754:	200300c0 	.word	0x200300c0
 8015758:	20030000 	.word	0x20030000

0801575c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 801575c:	b580      	push	{r7, lr}
 801575e:	b082      	sub	sp, #8
 8015760:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8015762:	e008      	b.n	8015776 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8015764:	1d3b      	adds	r3, r7, #4
 8015766:	4619      	mov	r1, r3
 8015768:	4808      	ldr	r0, [pc, #32]	@ (801578c <HW_IPCC_TRACES_EvtNot+0x30>)
 801576a:	f000 f938 	bl	80159de <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	4618      	mov	r0, r3
 8015772:	f000 f80d 	bl	8015790 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8015776:	4805      	ldr	r0, [pc, #20]	@ (801578c <HW_IPCC_TRACES_EvtNot+0x30>)
 8015778:	f000 f8a2 	bl	80158c0 <LST_is_empty>
 801577c:	4603      	mov	r3, r0
 801577e:	2b00      	cmp	r3, #0
 8015780:	d0f0      	beq.n	8015764 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8015782:	bf00      	nop
}
 8015784:	3708      	adds	r7, #8
 8015786:	46bd      	mov	sp, r7
 8015788:	bd80      	pop	{r7, pc}
 801578a:	bf00      	nop
 801578c:	200300c0 	.word	0x200300c0

08015790 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8015790:	b480      	push	{r7}
 8015792:	b083      	sub	sp, #12
 8015794:	af00      	add	r7, sp, #0
 8015796:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8015798:	bf00      	nop
 801579a:	370c      	adds	r7, #12
 801579c:	46bd      	mov	sp, r7
 801579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a2:	4770      	bx	lr

080157a4 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80157a4:	b480      	push	{r7}
 80157a6:	b087      	sub	sp, #28
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	4603      	mov	r3, r0
 80157ac:	6039      	str	r1, [r7, #0]
 80157ae:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 80157b0:	79fb      	ldrb	r3, [r7, #7]
 80157b2:	2b06      	cmp	r3, #6
 80157b4:	d845      	bhi.n	8015842 <OutputDbgTrace+0x9e>
 80157b6:	a201      	add	r2, pc, #4	@ (adr r2, 80157bc <OutputDbgTrace+0x18>)
 80157b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157bc:	080157d9 	.word	0x080157d9
 80157c0:	080157fd 	.word	0x080157fd
 80157c4:	08015803 	.word	0x08015803
 80157c8:	08015817 	.word	0x08015817
 80157cc:	08015823 	.word	0x08015823
 80157d0:	08015829 	.word	0x08015829
 80157d4:	08015837 	.word	0x08015837
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80157d8:	683b      	ldr	r3, [r7, #0]
 80157da:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80157dc:	697b      	ldr	r3, [r7, #20]
 80157de:	7a5b      	ldrb	r3, [r3, #9]
 80157e0:	2bff      	cmp	r3, #255	@ 0xff
 80157e2:	d005      	beq.n	80157f0 <OutputDbgTrace+0x4c>
 80157e4:	2bff      	cmp	r3, #255	@ 0xff
 80157e6:	dc05      	bgt.n	80157f4 <OutputDbgTrace+0x50>
 80157e8:	2b0e      	cmp	r3, #14
 80157ea:	d005      	beq.n	80157f8 <OutputDbgTrace+0x54>
 80157ec:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80157ee:	e001      	b.n	80157f4 <OutputDbgTrace+0x50>
          break;
 80157f0:	bf00      	nop
 80157f2:	e027      	b.n	8015844 <OutputDbgTrace+0xa0>
          break;
 80157f4:	bf00      	nop
 80157f6:	e025      	b.n	8015844 <OutputDbgTrace+0xa0>
          break;
 80157f8:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80157fa:	e023      	b.n	8015844 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80157fc:	683b      	ldr	r3, [r7, #0]
 80157fe:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8015800:	e020      	b.n	8015844 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8015802:	683b      	ldr	r3, [r7, #0]
 8015804:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8015806:	697b      	ldr	r3, [r7, #20]
 8015808:	7a5b      	ldrb	r3, [r3, #9]
 801580a:	2b0e      	cmp	r3, #14
 801580c:	d001      	beq.n	8015812 <OutputDbgTrace+0x6e>
 801580e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8015810:	e000      	b.n	8015814 <OutputDbgTrace+0x70>
          break;
 8015812:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8015814:	e016      	b.n	8015844 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8015816:	683b      	ldr	r3, [r7, #0]
 8015818:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 801581a:	697b      	ldr	r3, [r7, #20]
 801581c:	7a5b      	ldrb	r3, [r3, #9]
 801581e:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8015820:	e010      	b.n	8015844 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8015822:	683b      	ldr	r3, [r7, #0]
 8015824:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8015826:	e00d      	b.n	8015844 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 8015828:	683b      	ldr	r3, [r7, #0]
 801582a:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 801582c:	693b      	ldr	r3, [r7, #16]
 801582e:	785b      	ldrb	r3, [r3, #1]
 8015830:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 8015832:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 8015834:	e006      	b.n	8015844 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8015836:	683b      	ldr	r3, [r7, #0]
 8015838:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 801583a:	697b      	ldr	r3, [r7, #20]
 801583c:	7a5b      	ldrb	r3, [r3, #9]
 801583e:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8015840:	e000      	b.n	8015844 <OutputDbgTrace+0xa0>

    default:
      break;
 8015842:	bf00      	nop
  }

  return;
 8015844:	bf00      	nop
}
 8015846:	371c      	adds	r7, #28
 8015848:	46bd      	mov	sp, r7
 801584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801584e:	4770      	bx	lr

08015850 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8015850:	b480      	push	{r7}
 8015852:	b085      	sub	sp, #20
 8015854:	af00      	add	r7, sp, #0
 8015856:	4603      	mov	r3, r0
 8015858:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 801585a:	4b0f      	ldr	r3, [pc, #60]	@ (8015898 <OTP_Read+0x48>)
 801585c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 801585e:	e002      	b.n	8015866 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	3b08      	subs	r3, #8
 8015864:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	3307      	adds	r3, #7
 801586a:	781b      	ldrb	r3, [r3, #0]
 801586c:	79fa      	ldrb	r2, [r7, #7]
 801586e:	429a      	cmp	r2, r3
 8015870:	d003      	beq.n	801587a <OTP_Read+0x2a>
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	4a09      	ldr	r2, [pc, #36]	@ (801589c <OTP_Read+0x4c>)
 8015876:	4293      	cmp	r3, r2
 8015878:	d1f2      	bne.n	8015860 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	3307      	adds	r3, #7
 801587e:	781b      	ldrb	r3, [r3, #0]
 8015880:	79fa      	ldrb	r2, [r7, #7]
 8015882:	429a      	cmp	r2, r3
 8015884:	d001      	beq.n	801588a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8015886:	2300      	movs	r3, #0
 8015888:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 801588a:	68fb      	ldr	r3, [r7, #12]
}
 801588c:	4618      	mov	r0, r3
 801588e:	3714      	adds	r7, #20
 8015890:	46bd      	mov	sp, r7
 8015892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015896:	4770      	bx	lr
 8015898:	1fff73f8 	.word	0x1fff73f8
 801589c:	1fff7000 	.word	0x1fff7000

080158a0 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80158a0:	b480      	push	{r7}
 80158a2:	b083      	sub	sp, #12
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	687a      	ldr	r2, [r7, #4]
 80158ac:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	687a      	ldr	r2, [r7, #4]
 80158b2:	605a      	str	r2, [r3, #4]
}
 80158b4:	bf00      	nop
 80158b6:	370c      	adds	r7, #12
 80158b8:	46bd      	mov	sp, r7
 80158ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158be:	4770      	bx	lr

080158c0 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80158c0:	b480      	push	{r7}
 80158c2:	b087      	sub	sp, #28
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80158c8:	f3ef 8310 	mrs	r3, PRIMASK
 80158cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80158ce:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80158d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80158d2:	b672      	cpsid	i
}
 80158d4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	687a      	ldr	r2, [r7, #4]
 80158dc:	429a      	cmp	r2, r3
 80158de:	d102      	bne.n	80158e6 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80158e0:	2301      	movs	r3, #1
 80158e2:	75fb      	strb	r3, [r7, #23]
 80158e4:	e001      	b.n	80158ea <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80158e6:	2300      	movs	r3, #0
 80158e8:	75fb      	strb	r3, [r7, #23]
 80158ea:	693b      	ldr	r3, [r7, #16]
 80158ec:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80158ee:	68bb      	ldr	r3, [r7, #8]
 80158f0:	f383 8810 	msr	PRIMASK, r3
}
 80158f4:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80158f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80158f8:	4618      	mov	r0, r3
 80158fa:	371c      	adds	r7, #28
 80158fc:	46bd      	mov	sp, r7
 80158fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015902:	4770      	bx	lr

08015904 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8015904:	b480      	push	{r7}
 8015906:	b087      	sub	sp, #28
 8015908:	af00      	add	r7, sp, #0
 801590a:	6078      	str	r0, [r7, #4]
 801590c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801590e:	f3ef 8310 	mrs	r3, PRIMASK
 8015912:	60fb      	str	r3, [r7, #12]
  return(result);
 8015914:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8015916:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015918:	b672      	cpsid	i
}
 801591a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	681a      	ldr	r2, [r3, #0]
 8015920:	683b      	ldr	r3, [r7, #0]
 8015922:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8015924:	683b      	ldr	r3, [r7, #0]
 8015926:	687a      	ldr	r2, [r7, #4]
 8015928:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	683a      	ldr	r2, [r7, #0]
 801592e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8015930:	683b      	ldr	r3, [r7, #0]
 8015932:	681b      	ldr	r3, [r3, #0]
 8015934:	683a      	ldr	r2, [r7, #0]
 8015936:	605a      	str	r2, [r3, #4]
 8015938:	697b      	ldr	r3, [r7, #20]
 801593a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801593c:	693b      	ldr	r3, [r7, #16]
 801593e:	f383 8810 	msr	PRIMASK, r3
}
 8015942:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8015944:	bf00      	nop
 8015946:	371c      	adds	r7, #28
 8015948:	46bd      	mov	sp, r7
 801594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801594e:	4770      	bx	lr

08015950 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8015950:	b480      	push	{r7}
 8015952:	b087      	sub	sp, #28
 8015954:	af00      	add	r7, sp, #0
 8015956:	6078      	str	r0, [r7, #4]
 8015958:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801595a:	f3ef 8310 	mrs	r3, PRIMASK
 801595e:	60fb      	str	r3, [r7, #12]
  return(result);
 8015960:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8015962:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015964:	b672      	cpsid	i
}
 8015966:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8015968:	683b      	ldr	r3, [r7, #0]
 801596a:	687a      	ldr	r2, [r7, #4]
 801596c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	685a      	ldr	r2, [r3, #4]
 8015972:	683b      	ldr	r3, [r7, #0]
 8015974:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	683a      	ldr	r2, [r7, #0]
 801597a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 801597c:	683b      	ldr	r3, [r7, #0]
 801597e:	685b      	ldr	r3, [r3, #4]
 8015980:	683a      	ldr	r2, [r7, #0]
 8015982:	601a      	str	r2, [r3, #0]
 8015984:	697b      	ldr	r3, [r7, #20]
 8015986:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015988:	693b      	ldr	r3, [r7, #16]
 801598a:	f383 8810 	msr	PRIMASK, r3
}
 801598e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8015990:	bf00      	nop
 8015992:	371c      	adds	r7, #28
 8015994:	46bd      	mov	sp, r7
 8015996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801599a:	4770      	bx	lr

0801599c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 801599c:	b480      	push	{r7}
 801599e:	b087      	sub	sp, #28
 80159a0:	af00      	add	r7, sp, #0
 80159a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80159a4:	f3ef 8310 	mrs	r3, PRIMASK
 80159a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80159aa:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80159ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80159ae:	b672      	cpsid	i
}
 80159b0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	685b      	ldr	r3, [r3, #4]
 80159b6:	687a      	ldr	r2, [r7, #4]
 80159b8:	6812      	ldr	r2, [r2, #0]
 80159ba:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	687a      	ldr	r2, [r7, #4]
 80159c2:	6852      	ldr	r2, [r2, #4]
 80159c4:	605a      	str	r2, [r3, #4]
 80159c6:	697b      	ldr	r3, [r7, #20]
 80159c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80159ca:	693b      	ldr	r3, [r7, #16]
 80159cc:	f383 8810 	msr	PRIMASK, r3
}
 80159d0:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80159d2:	bf00      	nop
 80159d4:	371c      	adds	r7, #28
 80159d6:	46bd      	mov	sp, r7
 80159d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159dc:	4770      	bx	lr

080159de <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80159de:	b580      	push	{r7, lr}
 80159e0:	b086      	sub	sp, #24
 80159e2:	af00      	add	r7, sp, #0
 80159e4:	6078      	str	r0, [r7, #4]
 80159e6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80159e8:	f3ef 8310 	mrs	r3, PRIMASK
 80159ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80159ee:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80159f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80159f2:	b672      	cpsid	i
}
 80159f4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	681a      	ldr	r2, [r3, #0]
 80159fa:	683b      	ldr	r3, [r7, #0]
 80159fc:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	4618      	mov	r0, r3
 8015a04:	f7ff ffca 	bl	801599c <LST_remove_node>
 8015a08:	697b      	ldr	r3, [r7, #20]
 8015a0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015a0c:	693b      	ldr	r3, [r7, #16]
 8015a0e:	f383 8810 	msr	PRIMASK, r3
}
 8015a12:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8015a14:	bf00      	nop
 8015a16:	3718      	adds	r7, #24
 8015a18:	46bd      	mov	sp, r7
 8015a1a:	bd80      	pop	{r7, pc}

08015a1c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8015a1c:	b480      	push	{r7}
 8015a1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8015a20:	4b03      	ldr	r3, [pc, #12]	@ (8015a30 <LL_FLASH_GetUDN+0x14>)
 8015a22:	681b      	ldr	r3, [r3, #0]
}
 8015a24:	4618      	mov	r0, r3
 8015a26:	46bd      	mov	sp, r7
 8015a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a2c:	4770      	bx	lr
 8015a2e:	bf00      	nop
 8015a30:	1fff7580 	.word	0x1fff7580

08015a34 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8015a34:	b480      	push	{r7}
 8015a36:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8015a38:	4b03      	ldr	r3, [pc, #12]	@ (8015a48 <LL_FLASH_GetDeviceID+0x14>)
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	b2db      	uxtb	r3, r3
}
 8015a3e:	4618      	mov	r0, r3
 8015a40:	46bd      	mov	sp, r7
 8015a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a46:	4770      	bx	lr
 8015a48:	1fff7584 	.word	0x1fff7584

08015a4c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8015a4c:	b480      	push	{r7}
 8015a4e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8015a50:	4b03      	ldr	r3, [pc, #12]	@ (8015a60 <LL_FLASH_GetSTCompanyID+0x14>)
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	0a1b      	lsrs	r3, r3, #8
}
 8015a56:	4618      	mov	r0, r3
 8015a58:	46bd      	mov	sp, r7
 8015a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a5e:	4770      	bx	lr
 8015a60:	1fff7584 	.word	0x1fff7584

08015a64 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8015a64:	b5b0      	push	{r4, r5, r7, lr}
 8015a66:	b090      	sub	sp, #64	@ 0x40
 8015a68:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8015a6a:	2392      	movs	r3, #146	@ 0x92
 8015a6c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8015a70:	4b25      	ldr	r3, [pc, #148]	@ (8015b08 <APP_BLE_Init+0xa4>)
 8015a72:	1d3c      	adds	r4, r7, #4
 8015a74:	461d      	mov	r5, r3
 8015a76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015a78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015a7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015a7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015a7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015a80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015a82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8015a86:	c403      	stmia	r4!, {r0, r1}
 8015a88:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8015a8a:	f000 f921 	bl	8015cd0 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8015a8e:	2101      	movs	r1, #1
 8015a90:	2002      	movs	r0, #2
 8015a92:	f002 fdcd 	bl	8018630 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8015a96:	4a1d      	ldr	r2, [pc, #116]	@ (8015b0c <APP_BLE_Init+0xa8>)
 8015a98:	2100      	movs	r1, #0
 8015a9a:	2002      	movs	r0, #2
 8015a9c:	f002 fef4 	bl	8018888 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8015aa0:	1d3b      	adds	r3, r7, #4
 8015aa2:	4618      	mov	r0, r3
 8015aa4:	f7ff f8c6 	bl	8014c34 <SHCI_C2_BLE_Init>
 8015aa8:	4603      	mov	r3, r0
 8015aaa:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8015aae:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d001      	beq.n	8015aba <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8015ab6:	f7f0 fecb 	bl	8006850 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8015aba:	f000 f91f 	bl	8015cfc <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8015abe:	f7ff f813 	bl	8014ae8 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8015ac2:	4b13      	ldr	r3, [pc, #76]	@ (8015b10 <APP_BLE_Init+0xac>)
 8015ac4:	2200      	movs	r2, #0
 8015ac6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8015aca:	4b11      	ldr	r3, [pc, #68]	@ (8015b10 <APP_BLE_Init+0xac>)
 8015acc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015ad0:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8015ad2:	4a10      	ldr	r2, [pc, #64]	@ (8015b14 <APP_BLE_Init+0xb0>)
 8015ad4:	2100      	movs	r1, #0
 8015ad6:	2001      	movs	r0, #1
 8015ad8:	f002 fed6 	bl	8018888 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8015adc:	2006      	movs	r0, #6
 8015ade:	f7fe fe77 	bl	80147d0 <aci_hal_set_radio_activity_mask>
 8015ae2:	4603      	mov	r3, r0
 8015ae4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8015ae8:	f000 fadc 	bl	80160a4 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8015aec:	4b08      	ldr	r3, [pc, #32]	@ (8015b10 <APP_BLE_Init+0xac>)
 8015aee:	2200      	movs	r2, #0
 8015af0:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8015af2:	4b07      	ldr	r3, [pc, #28]	@ (8015b10 <APP_BLE_Init+0xac>)
 8015af4:	2200      	movs	r2, #0
 8015af6:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8015af8:	2001      	movs	r0, #1
 8015afa:	f000 f9b3 	bl	8015e64 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8015afe:	bf00      	nop
}
 8015b00:	3740      	adds	r7, #64	@ 0x40
 8015b02:	46bd      	mov	sp, r7
 8015b04:	bdb0      	pop	{r4, r5, r7, pc}
 8015b06:	bf00      	nop
 8015b08:	0801c360 	.word	0x0801c360
 8015b0c:	08014e51 	.word	0x08014e51
 8015b10:	20000b54 	.word	0x20000b54
 8015b14:	08015f4d 	.word	0x08015f4d

08015b18 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8015b18:	b580      	push	{r7, lr}
 8015b1a:	b08c      	sub	sp, #48	@ 0x30
 8015b1c:	af00      	add	r7, sp, #0
 8015b1e:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8015b20:	2392      	movs	r3, #146	@ 0x92
 8015b22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	3301      	adds	r3, #1
 8015b2a:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 8015b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b2e:	781b      	ldrb	r3, [r3, #0]
 8015b30:	2bff      	cmp	r3, #255	@ 0xff
 8015b32:	d05c      	beq.n	8015bee <SVCCTL_App_Notification+0xd6>
 8015b34:	2bff      	cmp	r3, #255	@ 0xff
 8015b36:	f300 80bd 	bgt.w	8015cb4 <SVCCTL_App_Notification+0x19c>
 8015b3a:	2b3e      	cmp	r3, #62	@ 0x3e
 8015b3c:	d02b      	beq.n	8015b96 <SVCCTL_App_Notification+0x7e>
 8015b3e:	2b3e      	cmp	r3, #62	@ 0x3e
 8015b40:	f300 80b8 	bgt.w	8015cb4 <SVCCTL_App_Notification+0x19c>
 8015b44:	2b05      	cmp	r3, #5
 8015b46:	d002      	beq.n	8015b4e <SVCCTL_App_Notification+0x36>
 8015b48:	2b10      	cmp	r3, #16
 8015b4a:	d020      	beq.n	8015b8e <SVCCTL_App_Notification+0x76>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8015b4c:	e0b2      	b.n	8015cb4 <SVCCTL_App_Notification+0x19c>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8015b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b50:	3302      	adds	r3, #2
 8015b52:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8015b5a:	b29a      	uxth	r2, r3
 8015b5c:	4b59      	ldr	r3, [pc, #356]	@ (8015cc4 <SVCCTL_App_Notification+0x1ac>)
 8015b5e:	8adb      	ldrh	r3, [r3, #22]
 8015b60:	429a      	cmp	r2, r3
 8015b62:	d106      	bne.n	8015b72 <SVCCTL_App_Notification+0x5a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8015b64:	4b57      	ldr	r3, [pc, #348]	@ (8015cc4 <SVCCTL_App_Notification+0x1ac>)
 8015b66:	2200      	movs	r2, #0
 8015b68:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8015b6a:	4b56      	ldr	r3, [pc, #344]	@ (8015cc4 <SVCCTL_App_Notification+0x1ac>)
 8015b6c:	2200      	movs	r2, #0
 8015b6e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8015b72:	2001      	movs	r0, #1
 8015b74:	f000 f976 	bl	8015e64 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8015b78:	4b53      	ldr	r3, [pc, #332]	@ (8015cc8 <SVCCTL_App_Notification+0x1b0>)
 8015b7a:	2201      	movs	r2, #1
 8015b7c:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8015b7e:	4b51      	ldr	r3, [pc, #324]	@ (8015cc4 <SVCCTL_App_Notification+0x1ac>)
 8015b80:	8ada      	ldrh	r2, [r3, #22]
 8015b82:	4b51      	ldr	r3, [pc, #324]	@ (8015cc8 <SVCCTL_App_Notification+0x1b0>)
 8015b84:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8015b86:	4850      	ldr	r0, [pc, #320]	@ (8015cc8 <SVCCTL_App_Notification+0x1b0>)
 8015b88:	f000 fa78 	bl	801607c <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8015b8c:	e095      	b.n	8015cba <SVCCTL_App_Notification+0x1a2>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 8015b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b90:	3302      	adds	r3, #2
 8015b92:	613b      	str	r3, [r7, #16]
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 8015b94:	e091      	b.n	8015cba <SVCCTL_App_Notification+0x1a2>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8015b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b98:	3302      	adds	r3, #2
 8015b9a:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 8015b9c:	69bb      	ldr	r3, [r7, #24]
 8015b9e:	781b      	ldrb	r3, [r3, #0]
 8015ba0:	2b01      	cmp	r3, #1
 8015ba2:	d001      	beq.n	8015ba8 <SVCCTL_App_Notification+0x90>
 8015ba4:	2b03      	cmp	r3, #3
          break;
 8015ba6:	e021      	b.n	8015bec <SVCCTL_App_Notification+0xd4>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8015ba8:	69bb      	ldr	r3, [r7, #24]
 8015baa:	3301      	adds	r3, #1
 8015bac:	617b      	str	r3, [r7, #20]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8015bae:	4b45      	ldr	r3, [pc, #276]	@ (8015cc4 <SVCCTL_App_Notification+0x1ac>)
 8015bb0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8015bb4:	2b04      	cmp	r3, #4
 8015bb6:	d104      	bne.n	8015bc2 <SVCCTL_App_Notification+0xaa>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8015bb8:	4b42      	ldr	r3, [pc, #264]	@ (8015cc4 <SVCCTL_App_Notification+0x1ac>)
 8015bba:	2206      	movs	r2, #6
 8015bbc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8015bc0:	e003      	b.n	8015bca <SVCCTL_App_Notification+0xb2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8015bc2:	4b40      	ldr	r3, [pc, #256]	@ (8015cc4 <SVCCTL_App_Notification+0x1ac>)
 8015bc4:	2205      	movs	r2, #5
 8015bc6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8015bca:	697b      	ldr	r3, [r7, #20]
 8015bcc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8015bd0:	b29a      	uxth	r2, r3
 8015bd2:	4b3c      	ldr	r3, [pc, #240]	@ (8015cc4 <SVCCTL_App_Notification+0x1ac>)
 8015bd4:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8015bd6:	4b3c      	ldr	r3, [pc, #240]	@ (8015cc8 <SVCCTL_App_Notification+0x1b0>)
 8015bd8:	2200      	movs	r2, #0
 8015bda:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8015bdc:	4b39      	ldr	r3, [pc, #228]	@ (8015cc4 <SVCCTL_App_Notification+0x1ac>)
 8015bde:	8ada      	ldrh	r2, [r3, #22]
 8015be0:	4b39      	ldr	r3, [pc, #228]	@ (8015cc8 <SVCCTL_App_Notification+0x1b0>)
 8015be2:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8015be4:	4838      	ldr	r0, [pc, #224]	@ (8015cc8 <SVCCTL_App_Notification+0x1b0>)
 8015be6:	f000 fa49 	bl	801607c <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8015bea:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8015bec:	e065      	b.n	8015cba <SVCCTL_App_Notification+0x1a2>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8015bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015bf0:	3302      	adds	r3, #2
 8015bf2:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 8015bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bf6:	881b      	ldrh	r3, [r3, #0]
 8015bf8:	b29b      	uxth	r3, r3
 8015bfa:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8015bfe:	4293      	cmp	r3, r2
 8015c00:	d048      	beq.n	8015c94 <SVCCTL_App_Notification+0x17c>
 8015c02:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8015c06:	4293      	cmp	r3, r2
 8015c08:	dc56      	bgt.n	8015cb8 <SVCCTL_App_Notification+0x1a0>
 8015c0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015c0e:	d04b      	beq.n	8015ca8 <SVCCTL_App_Notification+0x190>
 8015c10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015c14:	dc50      	bgt.n	8015cb8 <SVCCTL_App_Notification+0x1a0>
 8015c16:	f240 420a 	movw	r2, #1034	@ 0x40a
 8015c1a:	4293      	cmp	r3, r2
 8015c1c:	dc4c      	bgt.n	8015cb8 <SVCCTL_App_Notification+0x1a0>
 8015c1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8015c22:	dc04      	bgt.n	8015c2e <SVCCTL_App_Notification+0x116>
 8015c24:	2b04      	cmp	r3, #4
 8015c26:	d041      	beq.n	8015cac <SVCCTL_App_Notification+0x194>
 8015c28:	2b06      	cmp	r3, #6
 8015c2a:	d039      	beq.n	8015ca0 <SVCCTL_App_Notification+0x188>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8015c2c:	e044      	b.n	8015cb8 <SVCCTL_App_Notification+0x1a0>
      switch (p_blecore_evt->ecode)
 8015c2e:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8015c32:	2b09      	cmp	r3, #9
 8015c34:	d840      	bhi.n	8015cb8 <SVCCTL_App_Notification+0x1a0>
 8015c36:	a201      	add	r2, pc, #4	@ (adr r2, 8015c3c <SVCCTL_App_Notification+0x124>)
 8015c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c3c:	08015c8d 	.word	0x08015c8d
 8015c40:	08015c65 	.word	0x08015c65
 8015c44:	08015cb9 	.word	0x08015cb9
 8015c48:	08015cb9 	.word	0x08015cb9
 8015c4c:	08015cb9 	.word	0x08015cb9
 8015c50:	08015cb9 	.word	0x08015cb9
 8015c54:	08015cb1 	.word	0x08015cb1
 8015c58:	08015cb9 	.word	0x08015cb9
 8015c5c:	08015c79 	.word	0x08015c79
 8015c60:	08015cb1 	.word	0x08015cb1
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8015c64:	4b17      	ldr	r3, [pc, #92]	@ (8015cc4 <SVCCTL_App_Notification+0x1ac>)
 8015c66:	8adb      	ldrh	r3, [r3, #22]
 8015c68:	4918      	ldr	r1, [pc, #96]	@ (8015ccc <SVCCTL_App_Notification+0x1b4>)
 8015c6a:	4618      	mov	r0, r3
 8015c6c:	f7fd ffb2 	bl	8013bd4 <aci_gap_pass_key_resp>
 8015c70:	4603      	mov	r3, r0
 8015c72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8015c76:	e01c      	b.n	8015cb2 <SVCCTL_App_Notification+0x19a>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8015c78:	4b12      	ldr	r3, [pc, #72]	@ (8015cc4 <SVCCTL_App_Notification+0x1ac>)
 8015c7a:	8adb      	ldrh	r3, [r3, #22]
 8015c7c:	2101      	movs	r1, #1
 8015c7e:	4618      	mov	r0, r3
 8015c80:	f7fe f952 	bl	8013f28 <aci_gap_numeric_comparison_value_confirm_yesno>
 8015c84:	4603      	mov	r3, r0
 8015c86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8015c8a:	e012      	b.n	8015cb2 <SVCCTL_App_Notification+0x19a>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8015c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c8e:	3302      	adds	r3, #2
 8015c90:	623b      	str	r3, [r7, #32]
          break;
 8015c92:	e00e      	b.n	8015cb2 <SVCCTL_App_Notification+0x19a>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8015c94:	4b0b      	ldr	r3, [pc, #44]	@ (8015cc4 <SVCCTL_App_Notification+0x1ac>)
 8015c96:	8adb      	ldrh	r3, [r3, #22]
 8015c98:	4618      	mov	r0, r3
 8015c9a:	f7fe fc58 	bl	801454e <aci_gatt_confirm_indication>
        break;
 8015c9e:	e008      	b.n	8015cb2 <SVCCTL_App_Notification+0x19a>
	      p_warning_event = (aci_hal_warning_event_rp0 *)p_blecore_evt->data;
 8015ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ca2:	3302      	adds	r3, #2
 8015ca4:	61fb      	str	r3, [r7, #28]
          break;
 8015ca6:	e004      	b.n	8015cb2 <SVCCTL_App_Notification+0x19a>
          break;
 8015ca8:	bf00      	nop
 8015caa:	e005      	b.n	8015cb8 <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8015cac:	bf00      	nop
 8015cae:	e003      	b.n	8015cb8 <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8015cb0:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8015cb2:	e001      	b.n	8015cb8 <SVCCTL_App_Notification+0x1a0>
      break;
 8015cb4:	bf00      	nop
 8015cb6:	e000      	b.n	8015cba <SVCCTL_App_Notification+0x1a2>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8015cb8:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8015cba:	2301      	movs	r3, #1
}
 8015cbc:	4618      	mov	r0, r3
 8015cbe:	3730      	adds	r7, #48	@ 0x30
 8015cc0:	46bd      	mov	sp, r7
 8015cc2:	bd80      	pop	{r7, pc}
 8015cc4:	20000b54 	.word	0x20000b54
 8015cc8:	20000bd8 	.word	0x20000bd8
 8015ccc:	0001b207 	.word	0x0001b207

08015cd0 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8015cd0:	b580      	push	{r7, lr}
 8015cd2:	b082      	sub	sp, #8
 8015cd4:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8015cd6:	4b06      	ldr	r3, [pc, #24]	@ (8015cf0 <Ble_Tl_Init+0x20>)
 8015cd8:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8015cda:	4b06      	ldr	r3, [pc, #24]	@ (8015cf4 <Ble_Tl_Init+0x24>)
 8015cdc:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8015cde:	463b      	mov	r3, r7
 8015ce0:	4619      	mov	r1, r3
 8015ce2:	4805      	ldr	r0, [pc, #20]	@ (8015cf8 <Ble_Tl_Init+0x28>)
 8015ce4:	f7ff f898 	bl	8014e18 <hci_init>

  return;
 8015ce8:	bf00      	nop
}
 8015cea:	3708      	adds	r7, #8
 8015cec:	46bd      	mov	sp, r7
 8015cee:	bd80      	pop	{r7, pc}
 8015cf0:	200300d8 	.word	0x200300d8
 8015cf4:	08015ffd 	.word	0x08015ffd
 8015cf8:	08015fc5 	.word	0x08015fc5

08015cfc <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8015cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015cfe:	b08d      	sub	sp, #52	@ 0x34
 8015d00:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8015d02:	2300      	movs	r3, #0
 8015d04:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8015d06:	2392      	movs	r3, #146	@ 0x92
 8015d08:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8015d0a:	f7fe fdb5 	bl	8014878 <hci_reset>
 8015d0e:	4603      	mov	r3, r0
 8015d10:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8015d12:	f000 f8d7 	bl	8015ec4 <BleGetBdAddress>
 8015d16:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBLIC_ADDRESS_OFFSET, CONFIG_DATA_PUBLIC_ADDRESS_LEN, (uint8_t*) p_bd_addr);
 8015d18:	693a      	ldr	r2, [r7, #16]
 8015d1a:	2106      	movs	r1, #6
 8015d1c:	2000      	movs	r0, #0
 8015d1e:	f7fe fc6b 	bl	80145f8 <aci_hal_write_config_data>
 8015d22:	4603      	mov	r3, r0
 8015d24:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8015d26:	4a4a      	ldr	r2, [pc, #296]	@ (8015e50 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8015d28:	2110      	movs	r1, #16
 8015d2a:	2018      	movs	r0, #24
 8015d2c:	f7fe fc64 	bl	80145f8 <aci_hal_write_config_data>
 8015d30:	4603      	mov	r3, r0
 8015d32:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8015d34:	4a47      	ldr	r2, [pc, #284]	@ (8015e54 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8015d36:	2110      	movs	r1, #16
 8015d38:	2008      	movs	r0, #8
 8015d3a:	f7fe fc5d 	bl	80145f8 <aci_hal_write_config_data>
 8015d3e:	4603      	mov	r3, r0
 8015d40:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8015d42:	2118      	movs	r1, #24
 8015d44:	2001      	movs	r0, #1
 8015d46:	f7fe fcdc 	bl	8014702 <aci_hal_set_tx_power_level>
 8015d4a:	4603      	mov	r3, r0
 8015d4c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8015d4e:	f7fe f952 	bl	8013ff6 <aci_gatt_init>
 8015d52:	4603      	mov	r3, r0
 8015d54:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8015d56:	2300      	movs	r3, #0
 8015d58:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8015d5a:	7bfb      	ldrb	r3, [r7, #15]
 8015d5c:	f043 0301 	orr.w	r3, r3, #1
 8015d60:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8015d62:	7bfb      	ldrb	r3, [r7, #15]
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d01f      	beq.n	8015da8 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8015d68:	4b3b      	ldr	r3, [pc, #236]	@ (8015e58 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8015d6a:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8015d6c:	1dba      	adds	r2, r7, #6
 8015d6e:	7bf8      	ldrb	r0, [r7, #15]
 8015d70:	1cbb      	adds	r3, r7, #2
 8015d72:	9301      	str	r3, [sp, #4]
 8015d74:	1d3b      	adds	r3, r7, #4
 8015d76:	9300      	str	r3, [sp, #0]
 8015d78:	4613      	mov	r3, r2
 8015d7a:	2208      	movs	r2, #8
 8015d7c:	2100      	movs	r1, #0
 8015d7e:	f7fd ff90 	bl	8013ca2 <aci_gap_init>
 8015d82:	4603      	mov	r3, r0
 8015d84:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8015d86:	88fc      	ldrh	r4, [r7, #6]
 8015d88:	88bd      	ldrh	r5, [r7, #4]
 8015d8a:	68b8      	ldr	r0, [r7, #8]
 8015d8c:	f7ea fa48 	bl	8000220 <strlen>
 8015d90:	4603      	mov	r3, r0
 8015d92:	b2da      	uxtb	r2, r3
 8015d94:	68bb      	ldr	r3, [r7, #8]
 8015d96:	9300      	str	r3, [sp, #0]
 8015d98:	4613      	mov	r3, r2
 8015d9a:	2200      	movs	r2, #0
 8015d9c:	4629      	mov	r1, r5
 8015d9e:	4620      	mov	r0, r4
 8015da0:	f7fe fb2c 	bl	80143fc <aci_gatt_update_char_value>
 8015da4:	4603      	mov	r3, r0
 8015da6:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8015da8:	88f8      	ldrh	r0, [r7, #6]
 8015daa:	8879      	ldrh	r1, [r7, #2]
 8015dac:	463b      	mov	r3, r7
 8015dae:	9300      	str	r3, [sp, #0]
 8015db0:	2302      	movs	r3, #2
 8015db2:	2200      	movs	r2, #0
 8015db4:	f7fe fb22 	bl	80143fc <aci_gatt_update_char_value>
 8015db8:	4603      	mov	r3, r0
 8015dba:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8015dbc:	2202      	movs	r2, #2
 8015dbe:	2102      	movs	r1, #2
 8015dc0:	2000      	movs	r0, #0
 8015dc2:	f7fe fd7d 	bl	80148c0 <hci_le_set_default_phy>
 8015dc6:	4603      	mov	r3, r0
 8015dc8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8015dca:	4b24      	ldr	r3, [pc, #144]	@ (8015e5c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8015dcc:	2201      	movs	r2, #1
 8015dce:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8015dd0:	4b22      	ldr	r3, [pc, #136]	@ (8015e5c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8015dd2:	781b      	ldrb	r3, [r3, #0]
 8015dd4:	4618      	mov	r0, r3
 8015dd6:	f7fd fde5 	bl	80139a4 <aci_gap_set_io_capability>
 8015dda:	4603      	mov	r3, r0
 8015ddc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8015dde:	4b1f      	ldr	r3, [pc, #124]	@ (8015e5c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8015de0:	2201      	movs	r2, #1
 8015de2:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8015de4:	4b1d      	ldr	r3, [pc, #116]	@ (8015e5c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8015de6:	2208      	movs	r2, #8
 8015de8:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8015dea:	4b1c      	ldr	r3, [pc, #112]	@ (8015e5c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8015dec:	2210      	movs	r2, #16
 8015dee:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8015df0:	4b1a      	ldr	r3, [pc, #104]	@ (8015e5c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8015df2:	2200      	movs	r2, #0
 8015df4:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8015df6:	4b19      	ldr	r3, [pc, #100]	@ (8015e5c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8015df8:	4a19      	ldr	r2, [pc, #100]	@ (8015e60 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8015dfa:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8015dfc:	4b17      	ldr	r3, [pc, #92]	@ (8015e5c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8015dfe:	2200      	movs	r2, #0
 8015e00:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8015e02:	4b16      	ldr	r3, [pc, #88]	@ (8015e5c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8015e04:	789c      	ldrb	r4, [r3, #2]
 8015e06:	4b15      	ldr	r3, [pc, #84]	@ (8015e5c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8015e08:	785d      	ldrb	r5, [r3, #1]
 8015e0a:	4b14      	ldr	r3, [pc, #80]	@ (8015e5c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8015e0c:	791b      	ldrb	r3, [r3, #4]
 8015e0e:	4a13      	ldr	r2, [pc, #76]	@ (8015e5c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8015e10:	7952      	ldrb	r2, [r2, #5]
 8015e12:	4912      	ldr	r1, [pc, #72]	@ (8015e5c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8015e14:	78c9      	ldrb	r1, [r1, #3]
 8015e16:	4811      	ldr	r0, [pc, #68]	@ (8015e5c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8015e18:	6880      	ldr	r0, [r0, #8]
 8015e1a:	2600      	movs	r6, #0
 8015e1c:	9604      	str	r6, [sp, #16]
 8015e1e:	9003      	str	r0, [sp, #12]
 8015e20:	9102      	str	r1, [sp, #8]
 8015e22:	9201      	str	r2, [sp, #4]
 8015e24:	9300      	str	r3, [sp, #0]
 8015e26:	2300      	movs	r3, #0
 8015e28:	2201      	movs	r2, #1
 8015e2a:	4629      	mov	r1, r5
 8015e2c:	4620      	mov	r0, r4
 8015e2e:	f7fd fe0d 	bl	8013a4c <aci_gap_set_authentication_requirement>
 8015e32:	4603      	mov	r3, r0
 8015e34:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8015e36:	4b09      	ldr	r3, [pc, #36]	@ (8015e5c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8015e38:	789b      	ldrb	r3, [r3, #2]
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d003      	beq.n	8015e46 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8015e3e:	f7fe f84f 	bl	8013ee0 <aci_gap_configure_filter_accept_list>
 8015e42:	4603      	mov	r3, r0
 8015e44:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8015e46:	bf00      	nop
 8015e48:	371c      	adds	r7, #28
 8015e4a:	46bd      	mov	sp, r7
 8015e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e4e:	bf00      	nop
 8015e50:	0801cc9c 	.word	0x0801cc9c
 8015e54:	0801ccac 	.word	0x0801ccac
 8015e58:	0801c39c 	.word	0x0801c39c
 8015e5c:	20000b54 	.word	0x20000b54
 8015e60:	0001b207 	.word	0x0001b207

08015e64 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8015e64:	b580      	push	{r7, lr}
 8015e66:	b08c      	sub	sp, #48	@ 0x30
 8015e68:	af08      	add	r7, sp, #32
 8015e6a:	4603      	mov	r3, r0
 8015e6c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8015e6e:	2392      	movs	r3, #146	@ 0x92
 8015e70:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8015e72:	4a12      	ldr	r2, [pc, #72]	@ (8015ebc <Adv_Request+0x58>)
 8015e74:	79fb      	ldrb	r3, [r7, #7]
 8015e76:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8015e7a:	2300      	movs	r3, #0
 8015e7c:	9306      	str	r3, [sp, #24]
 8015e7e:	2300      	movs	r3, #0
 8015e80:	9305      	str	r3, [sp, #20]
 8015e82:	2300      	movs	r3, #0
 8015e84:	9304      	str	r3, [sp, #16]
 8015e86:	2300      	movs	r3, #0
 8015e88:	9303      	str	r3, [sp, #12]
 8015e8a:	2300      	movs	r3, #0
 8015e8c:	9302      	str	r3, [sp, #8]
 8015e8e:	2300      	movs	r3, #0
 8015e90:	9301      	str	r3, [sp, #4]
 8015e92:	2300      	movs	r3, #0
 8015e94:	9300      	str	r3, [sp, #0]
 8015e96:	2300      	movs	r3, #0
 8015e98:	22a0      	movs	r2, #160	@ 0xa0
 8015e9a:	2180      	movs	r1, #128	@ 0x80
 8015e9c:	2000      	movs	r0, #0
 8015e9e:	f7fd fc87 	bl	80137b0 <aci_gap_set_discoverable>
 8015ea2:	4603      	mov	r3, r0
 8015ea4:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8015ea6:	4906      	ldr	r1, [pc, #24]	@ (8015ec0 <Adv_Request+0x5c>)
 8015ea8:	200f      	movs	r0, #15
 8015eaa:	f7fd ffa7 	bl	8013dfc <aci_gap_update_adv_data>
 8015eae:	4603      	mov	r3, r0
 8015eb0:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8015eb2:	bf00      	nop
}
 8015eb4:	3710      	adds	r7, #16
 8015eb6:	46bd      	mov	sp, r7
 8015eb8:	bd80      	pop	{r7, pc}
 8015eba:	bf00      	nop
 8015ebc:	20000b54 	.word	0x20000b54
 8015ec0:	200000bc 	.word	0x200000bc

08015ec4 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8015ec4:	b580      	push	{r7, lr}
 8015ec6:	b086      	sub	sp, #24
 8015ec8:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8015eca:	f7ff fda7 	bl	8015a1c <LL_FLASH_GetUDN>
 8015ece:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8015ed0:	693b      	ldr	r3, [r7, #16]
 8015ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ed6:	d023      	beq.n	8015f20 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8015ed8:	f7ff fdb8 	bl	8015a4c <LL_FLASH_GetSTCompanyID>
 8015edc:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8015ede:	f7ff fda9 	bl	8015a34 <LL_FLASH_GetDeviceID>
 8015ee2:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8015ee4:	693b      	ldr	r3, [r7, #16]
 8015ee6:	b2da      	uxtb	r2, r3
 8015ee8:	4b16      	ldr	r3, [pc, #88]	@ (8015f44 <BleGetBdAddress+0x80>)
 8015eea:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8015eec:	693b      	ldr	r3, [r7, #16]
 8015eee:	0a1b      	lsrs	r3, r3, #8
 8015ef0:	b2da      	uxtb	r2, r3
 8015ef2:	4b14      	ldr	r3, [pc, #80]	@ (8015f44 <BleGetBdAddress+0x80>)
 8015ef4:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	b2da      	uxtb	r2, r3
 8015efa:	4b12      	ldr	r3, [pc, #72]	@ (8015f44 <BleGetBdAddress+0x80>)
 8015efc:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8015efe:	68bb      	ldr	r3, [r7, #8]
 8015f00:	b2da      	uxtb	r2, r3
 8015f02:	4b10      	ldr	r3, [pc, #64]	@ (8015f44 <BleGetBdAddress+0x80>)
 8015f04:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8015f06:	68bb      	ldr	r3, [r7, #8]
 8015f08:	0a1b      	lsrs	r3, r3, #8
 8015f0a:	b2da      	uxtb	r2, r3
 8015f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8015f44 <BleGetBdAddress+0x80>)
 8015f0e:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8015f10:	68bb      	ldr	r3, [r7, #8]
 8015f12:	0c1b      	lsrs	r3, r3, #16
 8015f14:	b2da      	uxtb	r2, r3
 8015f16:	4b0b      	ldr	r3, [pc, #44]	@ (8015f44 <BleGetBdAddress+0x80>)
 8015f18:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8015f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8015f44 <BleGetBdAddress+0x80>)
 8015f1c:	617b      	str	r3, [r7, #20]
 8015f1e:	e00b      	b.n	8015f38 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8015f20:	2000      	movs	r0, #0
 8015f22:	f7ff fc95 	bl	8015850 <OTP_Read>
 8015f26:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d002      	beq.n	8015f34 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8015f2e:	68fb      	ldr	r3, [r7, #12]
 8015f30:	617b      	str	r3, [r7, #20]
 8015f32:	e001      	b.n	8015f38 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8015f34:	4b04      	ldr	r3, [pc, #16]	@ (8015f48 <BleGetBdAddress+0x84>)
 8015f36:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8015f38:	697b      	ldr	r3, [r7, #20]
}
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	3718      	adds	r7, #24
 8015f3e:	46bd      	mov	sp, r7
 8015f40:	bd80      	pop	{r7, pc}
 8015f42:	bf00      	nop
 8015f44:	20000b4c 	.word	0x20000b4c
 8015f48:	0801cc94 	.word	0x0801cc94

08015f4c <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8015f4c:	b580      	push	{r7, lr}
 8015f4e:	b082      	sub	sp, #8
 8015f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8015f52:	4b0a      	ldr	r3, [pc, #40]	@ (8015f7c <Adv_Cancel+0x30>)
 8015f54:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8015f58:	2b05      	cmp	r3, #5
 8015f5a:	d00a      	beq.n	8015f72 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8015f5c:	2392      	movs	r3, #146	@ 0x92
 8015f5e:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8015f60:	f7fd fc02 	bl	8013768 <aci_gap_set_non_discoverable>
 8015f64:	4603      	mov	r3, r0
 8015f66:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8015f68:	4b04      	ldr	r3, [pc, #16]	@ (8015f7c <Adv_Cancel+0x30>)
 8015f6a:	2200      	movs	r2, #0
 8015f6c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8015f70:	bf00      	nop
 8015f72:	bf00      	nop
}
 8015f74:	3708      	adds	r7, #8
 8015f76:	46bd      	mov	sp, r7
 8015f78:	bd80      	pop	{r7, pc}
 8015f7a:	bf00      	nop
 8015f7c:	20000b54 	.word	0x20000b54

08015f80 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8015f80:	b580      	push	{r7, lr}
 8015f82:	b082      	sub	sp, #8
 8015f84:	af00      	add	r7, sp, #0
 8015f86:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8015f88:	2100      	movs	r1, #0
 8015f8a:	2002      	movs	r0, #2
 8015f8c:	f002 fc9e 	bl	80188cc <UTIL_SEQ_SetTask>

  return;
 8015f90:	bf00      	nop
}
 8015f92:	3708      	adds	r7, #8
 8015f94:	46bd      	mov	sp, r7
 8015f96:	bd80      	pop	{r7, pc}

08015f98 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8015f98:	b580      	push	{r7, lr}
 8015f9a:	b082      	sub	sp, #8
 8015f9c:	af00      	add	r7, sp, #0
 8015f9e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8015fa0:	2001      	movs	r0, #1
 8015fa2:	f002 fcff 	bl	80189a4 <UTIL_SEQ_SetEvt>

  return;
 8015fa6:	bf00      	nop
}
 8015fa8:	3708      	adds	r7, #8
 8015faa:	46bd      	mov	sp, r7
 8015fac:	bd80      	pop	{r7, pc}

08015fae <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8015fae:	b580      	push	{r7, lr}
 8015fb0:	b082      	sub	sp, #8
 8015fb2:	af00      	add	r7, sp, #0
 8015fb4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8015fb6:	2001      	movs	r0, #1
 8015fb8:	f002 fd14 	bl	80189e4 <UTIL_SEQ_WaitEvt>

  return;
 8015fbc:	bf00      	nop
}
 8015fbe:	3708      	adds	r7, #8
 8015fc0:	46bd      	mov	sp, r7
 8015fc2:	bd80      	pop	{r7, pc}

08015fc4 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8015fc4:	b580      	push	{r7, lr}
 8015fc6:	b084      	sub	sp, #16
 8015fc8:	af00      	add	r7, sp, #0
 8015fca:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8015fd0:	68fb      	ldr	r3, [r7, #12]
 8015fd2:	685b      	ldr	r3, [r3, #4]
 8015fd4:	3308      	adds	r3, #8
 8015fd6:	4618      	mov	r0, r3
 8015fd8:	f7fe fdd8 	bl	8014b8c <SVCCTL_UserEvtRx>
 8015fdc:	4603      	mov	r3, r0
 8015fde:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8015fe0:	7afb      	ldrb	r3, [r7, #11]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d003      	beq.n	8015fee <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8015fe6:	68fb      	ldr	r3, [r7, #12]
 8015fe8:	2201      	movs	r2, #1
 8015fea:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8015fec:	e003      	b.n	8015ff6 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8015fee:	68fb      	ldr	r3, [r7, #12]
 8015ff0:	2200      	movs	r2, #0
 8015ff2:	701a      	strb	r2, [r3, #0]
  return;
 8015ff4:	bf00      	nop
}
 8015ff6:	3710      	adds	r7, #16
 8015ff8:	46bd      	mov	sp, r7
 8015ffa:	bd80      	pop	{r7, pc}

08015ffc <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8015ffc:	b580      	push	{r7, lr}
 8015ffe:	b084      	sub	sp, #16
 8016000:	af00      	add	r7, sp, #0
 8016002:	4603      	mov	r3, r0
 8016004:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8016006:	79fb      	ldrb	r3, [r7, #7]
 8016008:	2b00      	cmp	r3, #0
 801600a:	d002      	beq.n	8016012 <BLE_StatusNot+0x16>
 801600c:	2b01      	cmp	r3, #1
 801600e:	d006      	beq.n	801601e <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8016010:	e00b      	b.n	801602a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8016012:	2307      	movs	r3, #7
 8016014:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8016016:	68f8      	ldr	r0, [r7, #12]
 8016018:	f002 fc84 	bl	8018924 <UTIL_SEQ_PauseTask>
      break;
 801601c:	e005      	b.n	801602a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 801601e:	2307      	movs	r3, #7
 8016020:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8016022:	68f8      	ldr	r0, [r7, #12]
 8016024:	f002 fc9e 	bl	8018964 <UTIL_SEQ_ResumeTask>
      break;
 8016028:	bf00      	nop
  }

  return;
 801602a:	bf00      	nop
}
 801602c:	3710      	adds	r7, #16
 801602e:	46bd      	mov	sp, r7
 8016030:	bd80      	pop	{r7, pc}
	...

08016034 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8016034:	b480      	push	{r7}
 8016036:	b083      	sub	sp, #12
 8016038:	af00      	add	r7, sp, #0
 801603a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	781b      	ldrb	r3, [r3, #0]
 8016040:	2b07      	cmp	r3, #7
 8016042:	d813      	bhi.n	801606c <Custom_STM_App_Notification+0x38>
 8016044:	a201      	add	r2, pc, #4	@ (adr r2, 801604c <Custom_STM_App_Notification+0x18>)
 8016046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801604a:	bf00      	nop
 801604c:	0801606d 	.word	0x0801606d
 8016050:	0801606d 	.word	0x0801606d
 8016054:	0801606d 	.word	0x0801606d
 8016058:	0801606d 	.word	0x0801606d
 801605c:	0801606d 	.word	0x0801606d
 8016060:	0801606d 	.word	0x0801606d
 8016064:	0801606d 	.word	0x0801606d
 8016068:	0801606d 	.word	0x0801606d

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 801606c:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 801606e:	bf00      	nop
}
 8016070:	370c      	adds	r7, #12
 8016072:	46bd      	mov	sp, r7
 8016074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016078:	4770      	bx	lr
 801607a:	bf00      	nop

0801607c <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 801607c:	b480      	push	{r7}
 801607e:	b083      	sub	sp, #12
 8016080:	af00      	add	r7, sp, #0
 8016082:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	781b      	ldrb	r3, [r3, #0]
 8016088:	2b00      	cmp	r3, #0
 801608a:	d002      	beq.n	8016092 <Custom_APP_Notification+0x16>
 801608c:	2b01      	cmp	r3, #1
 801608e:	d002      	beq.n	8016096 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8016090:	e002      	b.n	8016098 <Custom_APP_Notification+0x1c>
      break;
 8016092:	bf00      	nop
 8016094:	e000      	b.n	8016098 <Custom_APP_Notification+0x1c>
      break;
 8016096:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8016098:	bf00      	nop
}
 801609a:	370c      	adds	r7, #12
 801609c:	46bd      	mov	sp, r7
 801609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160a2:	4770      	bx	lr

080160a4 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 80160a4:	b480      	push	{r7}
 80160a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 80160a8:	bf00      	nop
}
 80160aa:	46bd      	mov	sp, r7
 80160ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160b0:	4770      	bx	lr
	...

080160b4 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 80160b4:	b580      	push	{r7, lr}
 80160b6:	b08c      	sub	sp, #48	@ 0x30
 80160b8:	af00      	add	r7, sp, #0
 80160ba:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 80160bc:	2300      	movs	r3, #0
 80160be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	3301      	adds	r3, #1
 80160c6:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 80160c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160ca:	781b      	ldrb	r3, [r3, #0]
 80160cc:	2bff      	cmp	r3, #255	@ 0xff
 80160ce:	f040 80bc 	bne.w	801624a <Custom_STM_Event_Handler+0x196>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80160d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160d4:	3302      	adds	r3, #2
 80160d6:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 80160d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160da:	881b      	ldrh	r3, [r3, #0]
 80160dc:	b29b      	uxth	r3, r3
 80160de:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 80160e2:	2b1a      	cmp	r3, #26
 80160e4:	f200 80ad 	bhi.w	8016242 <Custom_STM_Event_Handler+0x18e>
 80160e8:	a201      	add	r2, pc, #4	@ (adr r2, 80160f0 <Custom_STM_Event_Handler+0x3c>)
 80160ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80160ee:	bf00      	nop
 80160f0:	0801615d 	.word	0x0801615d
 80160f4:	08016243 	.word	0x08016243
 80160f8:	08016243 	.word	0x08016243
 80160fc:	08016243 	.word	0x08016243
 8016100:	08016243 	.word	0x08016243
 8016104:	08016243 	.word	0x08016243
 8016108:	08016243 	.word	0x08016243
 801610c:	08016243 	.word	0x08016243
 8016110:	08016243 	.word	0x08016243
 8016114:	08016243 	.word	0x08016243
 8016118:	08016243 	.word	0x08016243
 801611c:	08016243 	.word	0x08016243
 8016120:	08016243 	.word	0x08016243
 8016124:	08016243 	.word	0x08016243
 8016128:	08016243 	.word	0x08016243
 801612c:	08016243 	.word	0x08016243
 8016130:	08016243 	.word	0x08016243
 8016134:	08016243 	.word	0x08016243
 8016138:	08016243 	.word	0x08016243
 801613c:	08016243 	.word	0x08016243
 8016140:	08016243 	.word	0x08016243
 8016144:	08016243 	.word	0x08016243
 8016148:	08016243 	.word	0x08016243
 801614c:	08016243 	.word	0x08016243
 8016150:	08016243 	.word	0x08016243
 8016154:	08016243 	.word	0x08016243
 8016158:	08016225 	.word	0x08016225
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 801615c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801615e:	3302      	adds	r3, #2
 8016160:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomSwitch_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8016162:	69fb      	ldr	r3, [r7, #28]
 8016164:	885b      	ldrh	r3, [r3, #2]
 8016166:	b29b      	uxth	r3, r3
 8016168:	461a      	mov	r2, r3
 801616a:	4b3b      	ldr	r3, [pc, #236]	@ (8016258 <Custom_STM_Event_Handler+0x1a4>)
 801616c:	889b      	ldrh	r3, [r3, #4]
 801616e:	3302      	adds	r3, #2
 8016170:	429a      	cmp	r2, r3
 8016172:	d119      	bne.n	80161a8 <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8016174:	2301      	movs	r3, #1
 8016176:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 801617a:	69fb      	ldr	r3, [r7, #28]
 801617c:	7a1b      	ldrb	r3, [r3, #8]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d002      	beq.n	8016188 <Custom_STM_Event_Handler+0xd4>
 8016182:	2b01      	cmp	r3, #1
 8016184:	d008      	beq.n	8016198 <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 8016186:	e04c      	b.n	8016222 <Custom_STM_Event_Handler+0x16e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT;
 8016188:	2303      	movs	r3, #3
 801618a:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 801618c:	f107 0308 	add.w	r3, r7, #8
 8016190:	4618      	mov	r0, r3
 8016192:	f7ff ff4f 	bl	8016034 <Custom_STM_App_Notification>
                break;
 8016196:	e044      	b.n	8016222 <Custom_STM_Event_Handler+0x16e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT;
 8016198:	2302      	movs	r3, #2
 801619a:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 801619c:	f107 0308 	add.w	r3, r7, #8
 80161a0:	4618      	mov	r0, r3
 80161a2:	f7ff ff47 	bl	8016034 <Custom_STM_App_Notification>
                break;
 80161a6:	e03c      	b.n	8016222 <Custom_STM_Event_Handler+0x16e>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomSwitch_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomDelta_T_ChHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 80161a8:	69fb      	ldr	r3, [r7, #28]
 80161aa:	885b      	ldrh	r3, [r3, #2]
 80161ac:	b29b      	uxth	r3, r3
 80161ae:	461a      	mov	r2, r3
 80161b0:	4b29      	ldr	r3, [pc, #164]	@ (8016258 <Custom_STM_Event_Handler+0x1a4>)
 80161b2:	891b      	ldrh	r3, [r3, #8]
 80161b4:	3302      	adds	r3, #2
 80161b6:	429a      	cmp	r2, r3
 80161b8:	d119      	bne.n	80161ee <Custom_STM_Event_Handler+0x13a>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80161ba:	2301      	movs	r3, #1
 80161bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_4 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_4 */
            switch (attribute_modified->Attr_Data[0])
 80161c0:	69fb      	ldr	r3, [r7, #28]
 80161c2:	7a1b      	ldrb	r3, [r3, #8]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d002      	beq.n	80161ce <Custom_STM_Event_Handler+0x11a>
 80161c8:	2b01      	cmp	r3, #1
 80161ca:	d008      	beq.n	80161de <Custom_STM_Event_Handler+0x12a>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_4_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_4_default */
              break;
 80161cc:	e029      	b.n	8016222 <Custom_STM_Event_Handler+0x16e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_DELTA_T_CH_NOTIFY_DISABLED_EVT;
 80161ce:	2306      	movs	r3, #6
 80161d0:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80161d2:	f107 0308 	add.w	r3, r7, #8
 80161d6:	4618      	mov	r0, r3
 80161d8:	f7ff ff2c 	bl	8016034 <Custom_STM_App_Notification>
                break;
 80161dc:	e021      	b.n	8016222 <Custom_STM_Event_Handler+0x16e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_DELTA_T_CH_NOTIFY_ENABLED_EVT;
 80161de:	2305      	movs	r3, #5
 80161e0:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80161e2:	f107 0308 	add.w	r3, r7, #8
 80161e6:	4618      	mov	r0, r3
 80161e8:	f7ff ff24 	bl	8016034 <Custom_STM_App_Notification>
                break;
 80161ec:	e019      	b.n	8016222 <Custom_STM_Event_Handler+0x16e>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomDelta_T_ChHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomLed_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80161ee:	69fb      	ldr	r3, [r7, #28]
 80161f0:	885b      	ldrh	r3, [r3, #2]
 80161f2:	b29b      	uxth	r3, r3
 80161f4:	461a      	mov	r2, r3
 80161f6:	4b18      	ldr	r3, [pc, #96]	@ (8016258 <Custom_STM_Event_Handler+0x1a4>)
 80161f8:	885b      	ldrh	r3, [r3, #2]
 80161fa:	3301      	adds	r3, #1
 80161fc:	429a      	cmp	r2, r3
 80161fe:	d103      	bne.n	8016208 <Custom_STM_Event_Handler+0x154>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8016200:	2301      	movs	r3, #1
 8016202:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE END CUSTOM_STM_Service_1_Char_3_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomReboot_Request_ChHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 8016206:	e01e      	b.n	8016246 <Custom_STM_Event_Handler+0x192>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomReboot_Request_ChHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8016208:	69fb      	ldr	r3, [r7, #28]
 801620a:	885b      	ldrh	r3, [r3, #2]
 801620c:	b29b      	uxth	r3, r3
 801620e:	461a      	mov	r2, r3
 8016210:	4b11      	ldr	r3, [pc, #68]	@ (8016258 <Custom_STM_Event_Handler+0x1a4>)
 8016212:	88db      	ldrh	r3, [r3, #6]
 8016214:	3301      	adds	r3, #1
 8016216:	429a      	cmp	r2, r3
 8016218:	d115      	bne.n	8016246 <Custom_STM_Event_Handler+0x192>
            return_value = SVCCTL_EvtAckFlowEnable;
 801621a:	2301      	movs	r3, #1
 801621c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8016220:	e011      	b.n	8016246 <Custom_STM_Event_Handler+0x192>
 8016222:	e010      	b.n	8016246 <Custom_STM_Event_Handler+0x192>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 8016224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016226:	3302      	adds	r3, #2
 8016228:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 801622a:	2307      	movs	r3, #7
 801622c:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 801622e:	6a3b      	ldr	r3, [r7, #32]
 8016230:	881b      	ldrh	r3, [r3, #0]
 8016232:	b29b      	uxth	r3, r3
 8016234:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 8016236:	f107 0308 	add.w	r3, r7, #8
 801623a:	4618      	mov	r0, r3
 801623c:	f7ff fefa 	bl	8016034 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8016240:	e002      	b.n	8016248 <Custom_STM_Event_Handler+0x194>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8016242:	bf00      	nop
 8016244:	e002      	b.n	801624c <Custom_STM_Event_Handler+0x198>
          break;
 8016246:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8016248:	e000      	b.n	801624c <Custom_STM_Event_Handler+0x198>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 801624a:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 801624c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 8016250:	4618      	mov	r0, r3
 8016252:	3730      	adds	r7, #48	@ 0x30
 8016254:	46bd      	mov	sp, r7
 8016256:	bd80      	pop	{r7, pc}
 8016258:	20000bdc 	.word	0x20000bdc

0801625c <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 801625c:	b580      	push	{r7, lr}
 801625e:	b08c      	sub	sp, #48	@ 0x30
 8016260:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8016262:	2392      	movs	r3, #146	@ 0x92
 8016264:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8016266:	4885      	ldr	r0, [pc, #532]	@ (801647c <SVCCTL_InitCustomSvc+0x220>)
 8016268:	f7fe fc76 	bl	8014b58 <SVCCTL_RegisterSvcHandler>
   *                              = 12
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 12;
 801626c:	230c      	movs	r3, #12
 801626e:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService1 */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService1 */

  COPY_MY_P2P_SERVER_UUID(uuid.Char_UUID_128);
 8016270:	238f      	movs	r3, #143	@ 0x8f
 8016272:	713b      	strb	r3, [r7, #4]
 8016274:	23e5      	movs	r3, #229	@ 0xe5
 8016276:	717b      	strb	r3, [r7, #5]
 8016278:	23b3      	movs	r3, #179	@ 0xb3
 801627a:	71bb      	strb	r3, [r7, #6]
 801627c:	23d5      	movs	r3, #213	@ 0xd5
 801627e:	71fb      	strb	r3, [r7, #7]
 8016280:	232e      	movs	r3, #46	@ 0x2e
 8016282:	723b      	strb	r3, [r7, #8]
 8016284:	237f      	movs	r3, #127	@ 0x7f
 8016286:	727b      	strb	r3, [r7, #9]
 8016288:	234a      	movs	r3, #74	@ 0x4a
 801628a:	72bb      	strb	r3, [r7, #10]
 801628c:	2398      	movs	r3, #152	@ 0x98
 801628e:	72fb      	strb	r3, [r7, #11]
 8016290:	232a      	movs	r3, #42	@ 0x2a
 8016292:	733b      	strb	r3, [r7, #12]
 8016294:	2348      	movs	r3, #72	@ 0x48
 8016296:	737b      	strb	r3, [r7, #13]
 8016298:	237a      	movs	r3, #122	@ 0x7a
 801629a:	73bb      	strb	r3, [r7, #14]
 801629c:	23cc      	movs	r3, #204	@ 0xcc
 801629e:	73fb      	strb	r3, [r7, #15]
 80162a0:	2340      	movs	r3, #64	@ 0x40
 80162a2:	743b      	strb	r3, [r7, #16]
 80162a4:	23fe      	movs	r3, #254	@ 0xfe
 80162a6:	747b      	strb	r3, [r7, #17]
 80162a8:	2300      	movs	r3, #0
 80162aa:	74bb      	strb	r3, [r7, #18]
 80162ac:	2300      	movs	r3, #0
 80162ae:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 80162b0:	7dbb      	ldrb	r3, [r7, #22]
 80162b2:	1d39      	adds	r1, r7, #4
 80162b4:	4a72      	ldr	r2, [pc, #456]	@ (8016480 <SVCCTL_InitCustomSvc+0x224>)
 80162b6:	9200      	str	r2, [sp, #0]
 80162b8:	2201      	movs	r2, #1
 80162ba:	2002      	movs	r0, #2
 80162bc:	f7fd fec0 	bl	8014040 <aci_gatt_add_service>
 80162c0:	4603      	mov	r3, r0
 80162c2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  My_LED_Char
   */
  COPY_MY_LED_CHAR_UUID(uuid.Char_UUID_128);
 80162c4:	2319      	movs	r3, #25
 80162c6:	713b      	strb	r3, [r7, #4]
 80162c8:	23ed      	movs	r3, #237	@ 0xed
 80162ca:	717b      	strb	r3, [r7, #5]
 80162cc:	2382      	movs	r3, #130	@ 0x82
 80162ce:	71bb      	strb	r3, [r7, #6]
 80162d0:	23ae      	movs	r3, #174	@ 0xae
 80162d2:	71fb      	strb	r3, [r7, #7]
 80162d4:	23ed      	movs	r3, #237	@ 0xed
 80162d6:	723b      	strb	r3, [r7, #8]
 80162d8:	2321      	movs	r3, #33	@ 0x21
 80162da:	727b      	strb	r3, [r7, #9]
 80162dc:	234c      	movs	r3, #76	@ 0x4c
 80162de:	72bb      	strb	r3, [r7, #10]
 80162e0:	239d      	movs	r3, #157	@ 0x9d
 80162e2:	72fb      	strb	r3, [r7, #11]
 80162e4:	2341      	movs	r3, #65	@ 0x41
 80162e6:	733b      	strb	r3, [r7, #12]
 80162e8:	2345      	movs	r3, #69	@ 0x45
 80162ea:	737b      	strb	r3, [r7, #13]
 80162ec:	2322      	movs	r3, #34	@ 0x22
 80162ee:	73bb      	strb	r3, [r7, #14]
 80162f0:	238e      	movs	r3, #142	@ 0x8e
 80162f2:	73fb      	strb	r3, [r7, #15]
 80162f4:	2341      	movs	r3, #65	@ 0x41
 80162f6:	743b      	strb	r3, [r7, #16]
 80162f8:	23fe      	movs	r3, #254	@ 0xfe
 80162fa:	747b      	strb	r3, [r7, #17]
 80162fc:	2300      	movs	r3, #0
 80162fe:	74bb      	strb	r3, [r7, #18]
 8016300:	2300      	movs	r3, #0
 8016302:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomP2PsHdle,
 8016304:	4b5e      	ldr	r3, [pc, #376]	@ (8016480 <SVCCTL_InitCustomSvc+0x224>)
 8016306:	8818      	ldrh	r0, [r3, #0]
 8016308:	4b5e      	ldr	r3, [pc, #376]	@ (8016484 <SVCCTL_InitCustomSvc+0x228>)
 801630a:	881b      	ldrh	r3, [r3, #0]
 801630c:	1d3a      	adds	r2, r7, #4
 801630e:	495e      	ldr	r1, [pc, #376]	@ (8016488 <SVCCTL_InitCustomSvc+0x22c>)
 8016310:	9105      	str	r1, [sp, #20]
 8016312:	2101      	movs	r1, #1
 8016314:	9104      	str	r1, [sp, #16]
 8016316:	2110      	movs	r1, #16
 8016318:	9103      	str	r1, [sp, #12]
 801631a:	2101      	movs	r1, #1
 801631c:	9102      	str	r1, [sp, #8]
 801631e:	2100      	movs	r1, #0
 8016320:	9101      	str	r1, [sp, #4]
 8016322:	2106      	movs	r1, #6
 8016324:	9100      	str	r1, [sp, #0]
 8016326:	2102      	movs	r1, #2
 8016328:	f7fd ff60 	bl	80141ec <aci_gatt_add_char>
 801632c:	4603      	mov	r3, r0
 801632e:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  My_Switch_Char
   */
  COPY_MY_SWITCH_CHAR_UUID(uuid.Char_UUID_128);
 8016330:	2319      	movs	r3, #25
 8016332:	713b      	strb	r3, [r7, #4]
 8016334:	23ed      	movs	r3, #237	@ 0xed
 8016336:	717b      	strb	r3, [r7, #5]
 8016338:	2382      	movs	r3, #130	@ 0x82
 801633a:	71bb      	strb	r3, [r7, #6]
 801633c:	23ae      	movs	r3, #174	@ 0xae
 801633e:	71fb      	strb	r3, [r7, #7]
 8016340:	23ed      	movs	r3, #237	@ 0xed
 8016342:	723b      	strb	r3, [r7, #8]
 8016344:	2321      	movs	r3, #33	@ 0x21
 8016346:	727b      	strb	r3, [r7, #9]
 8016348:	234c      	movs	r3, #76	@ 0x4c
 801634a:	72bb      	strb	r3, [r7, #10]
 801634c:	239d      	movs	r3, #157	@ 0x9d
 801634e:	72fb      	strb	r3, [r7, #11]
 8016350:	2341      	movs	r3, #65	@ 0x41
 8016352:	733b      	strb	r3, [r7, #12]
 8016354:	2345      	movs	r3, #69	@ 0x45
 8016356:	737b      	strb	r3, [r7, #13]
 8016358:	2322      	movs	r3, #34	@ 0x22
 801635a:	73bb      	strb	r3, [r7, #14]
 801635c:	238e      	movs	r3, #142	@ 0x8e
 801635e:	73fb      	strb	r3, [r7, #15]
 8016360:	2342      	movs	r3, #66	@ 0x42
 8016362:	743b      	strb	r3, [r7, #16]
 8016364:	23fe      	movs	r3, #254	@ 0xfe
 8016366:	747b      	strb	r3, [r7, #17]
 8016368:	2300      	movs	r3, #0
 801636a:	74bb      	strb	r3, [r7, #18]
 801636c:	2300      	movs	r3, #0
 801636e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomP2PsHdle,
 8016370:	4b43      	ldr	r3, [pc, #268]	@ (8016480 <SVCCTL_InitCustomSvc+0x224>)
 8016372:	8818      	ldrh	r0, [r3, #0]
 8016374:	4b45      	ldr	r3, [pc, #276]	@ (801648c <SVCCTL_InitCustomSvc+0x230>)
 8016376:	881b      	ldrh	r3, [r3, #0]
 8016378:	1d3a      	adds	r2, r7, #4
 801637a:	4945      	ldr	r1, [pc, #276]	@ (8016490 <SVCCTL_InitCustomSvc+0x234>)
 801637c:	9105      	str	r1, [sp, #20]
 801637e:	2101      	movs	r1, #1
 8016380:	9104      	str	r1, [sp, #16]
 8016382:	2110      	movs	r1, #16
 8016384:	9103      	str	r1, [sp, #12]
 8016386:	2101      	movs	r1, #1
 8016388:	9102      	str	r1, [sp, #8]
 801638a:	2100      	movs	r1, #0
 801638c:	9101      	str	r1, [sp, #4]
 801638e:	2110      	movs	r1, #16
 8016390:	9100      	str	r1, [sp, #0]
 8016392:	2102      	movs	r1, #2
 8016394:	f7fd ff2a 	bl	80141ec <aci_gatt_add_char>
 8016398:	4603      	mov	r3, r0
 801639a:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char2 */
  /**
   *  REBOOT_REQUEST_CHAR
   */
  COPY_REBOOT_REQUEST_CHAR_UUID(uuid.Char_UUID_128);
 801639c:	2319      	movs	r3, #25
 801639e:	713b      	strb	r3, [r7, #4]
 80163a0:	23ed      	movs	r3, #237	@ 0xed
 80163a2:	717b      	strb	r3, [r7, #5]
 80163a4:	2382      	movs	r3, #130	@ 0x82
 80163a6:	71bb      	strb	r3, [r7, #6]
 80163a8:	23ae      	movs	r3, #174	@ 0xae
 80163aa:	71fb      	strb	r3, [r7, #7]
 80163ac:	23ed      	movs	r3, #237	@ 0xed
 80163ae:	723b      	strb	r3, [r7, #8]
 80163b0:	2321      	movs	r3, #33	@ 0x21
 80163b2:	727b      	strb	r3, [r7, #9]
 80163b4:	234c      	movs	r3, #76	@ 0x4c
 80163b6:	72bb      	strb	r3, [r7, #10]
 80163b8:	239d      	movs	r3, #157	@ 0x9d
 80163ba:	72fb      	strb	r3, [r7, #11]
 80163bc:	2341      	movs	r3, #65	@ 0x41
 80163be:	733b      	strb	r3, [r7, #12]
 80163c0:	2345      	movs	r3, #69	@ 0x45
 80163c2:	737b      	strb	r3, [r7, #13]
 80163c4:	2322      	movs	r3, #34	@ 0x22
 80163c6:	73bb      	strb	r3, [r7, #14]
 80163c8:	238e      	movs	r3, #142	@ 0x8e
 80163ca:	73fb      	strb	r3, [r7, #15]
 80163cc:	2311      	movs	r3, #17
 80163ce:	743b      	strb	r3, [r7, #16]
 80163d0:	23fe      	movs	r3, #254	@ 0xfe
 80163d2:	747b      	strb	r3, [r7, #17]
 80163d4:	2300      	movs	r3, #0
 80163d6:	74bb      	strb	r3, [r7, #18]
 80163d8:	2300      	movs	r3, #0
 80163da:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomP2PsHdle,
 80163dc:	4b28      	ldr	r3, [pc, #160]	@ (8016480 <SVCCTL_InitCustomSvc+0x224>)
 80163de:	8818      	ldrh	r0, [r3, #0]
 80163e0:	4b2c      	ldr	r3, [pc, #176]	@ (8016494 <SVCCTL_InitCustomSvc+0x238>)
 80163e2:	881b      	ldrh	r3, [r3, #0]
 80163e4:	1d3a      	adds	r2, r7, #4
 80163e6:	492c      	ldr	r1, [pc, #176]	@ (8016498 <SVCCTL_InitCustomSvc+0x23c>)
 80163e8:	9105      	str	r1, [sp, #20]
 80163ea:	2101      	movs	r1, #1
 80163ec:	9104      	str	r1, [sp, #16]
 80163ee:	2110      	movs	r1, #16
 80163f0:	9103      	str	r1, [sp, #12]
 80163f2:	2101      	movs	r1, #1
 80163f4:	9102      	str	r1, [sp, #8]
 80163f6:	2100      	movs	r1, #0
 80163f8:	9101      	str	r1, [sp, #4]
 80163fa:	2104      	movs	r1, #4
 80163fc:	9100      	str	r1, [sp, #0]
 80163fe:	2102      	movs	r1, #2
 8016400:	f7fd fef4 	bl	80141ec <aci_gatt_add_char>
 8016404:	4603      	mov	r3, r0
 8016406:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char3 */
  /**
   *  DELTA_T_CHAR
   */
  COPY_DELTA_T_CHAR_UUID(uuid.Char_UUID_128);
 8016408:	2319      	movs	r3, #25
 801640a:	713b      	strb	r3, [r7, #4]
 801640c:	23ed      	movs	r3, #237	@ 0xed
 801640e:	717b      	strb	r3, [r7, #5]
 8016410:	2382      	movs	r3, #130	@ 0x82
 8016412:	71bb      	strb	r3, [r7, #6]
 8016414:	23ae      	movs	r3, #174	@ 0xae
 8016416:	71fb      	strb	r3, [r7, #7]
 8016418:	23ed      	movs	r3, #237	@ 0xed
 801641a:	723b      	strb	r3, [r7, #8]
 801641c:	2321      	movs	r3, #33	@ 0x21
 801641e:	727b      	strb	r3, [r7, #9]
 8016420:	234c      	movs	r3, #76	@ 0x4c
 8016422:	72bb      	strb	r3, [r7, #10]
 8016424:	239d      	movs	r3, #157	@ 0x9d
 8016426:	72fb      	strb	r3, [r7, #11]
 8016428:	2341      	movs	r3, #65	@ 0x41
 801642a:	733b      	strb	r3, [r7, #12]
 801642c:	2345      	movs	r3, #69	@ 0x45
 801642e:	737b      	strb	r3, [r7, #13]
 8016430:	2322      	movs	r3, #34	@ 0x22
 8016432:	73bb      	strb	r3, [r7, #14]
 8016434:	238e      	movs	r3, #142	@ 0x8e
 8016436:	73fb      	strb	r3, [r7, #15]
 8016438:	2343      	movs	r3, #67	@ 0x43
 801643a:	743b      	strb	r3, [r7, #16]
 801643c:	23fe      	movs	r3, #254	@ 0xfe
 801643e:	747b      	strb	r3, [r7, #17]
 8016440:	2300      	movs	r3, #0
 8016442:	74bb      	strb	r3, [r7, #18]
 8016444:	2300      	movs	r3, #0
 8016446:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomP2PsHdle,
 8016448:	4b0d      	ldr	r3, [pc, #52]	@ (8016480 <SVCCTL_InitCustomSvc+0x224>)
 801644a:	8818      	ldrh	r0, [r3, #0]
 801644c:	4b13      	ldr	r3, [pc, #76]	@ (801649c <SVCCTL_InitCustomSvc+0x240>)
 801644e:	881b      	ldrh	r3, [r3, #0]
 8016450:	1d3a      	adds	r2, r7, #4
 8016452:	4913      	ldr	r1, [pc, #76]	@ (80164a0 <SVCCTL_InitCustomSvc+0x244>)
 8016454:	9105      	str	r1, [sp, #20]
 8016456:	2101      	movs	r1, #1
 8016458:	9104      	str	r1, [sp, #16]
 801645a:	2110      	movs	r1, #16
 801645c:	9103      	str	r1, [sp, #12]
 801645e:	2100      	movs	r1, #0
 8016460:	9102      	str	r1, [sp, #8]
 8016462:	2100      	movs	r1, #0
 8016464:	9101      	str	r1, [sp, #4]
 8016466:	2111      	movs	r1, #17
 8016468:	9100      	str	r1, [sp, #0]
 801646a:	2102      	movs	r1, #2
 801646c:	f7fd febe 	bl	80141ec <aci_gatt_add_char>
 8016470:	4603      	mov	r3, r0
 8016472:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8016474:	bf00      	nop
}
 8016476:	3718      	adds	r7, #24
 8016478:	46bd      	mov	sp, r7
 801647a:	bd80      	pop	{r7, pc}
 801647c:	080160b5 	.word	0x080160b5
 8016480:	20000bdc 	.word	0x20000bdc
 8016484:	200000cc 	.word	0x200000cc
 8016488:	20000bde 	.word	0x20000bde
 801648c:	200000ce 	.word	0x200000ce
 8016490:	20000be0 	.word	0x20000be0
 8016494:	200000d0 	.word	0x200000d0
 8016498:	20000be2 	.word	0x20000be2
 801649c:	200000d2 	.word	0x200000d2
 80164a0:	20000be4 	.word	0x20000be4

080164a4 <LL_PWR_EnableBootC2>:
{
 80164a4:	b480      	push	{r7}
 80164a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80164a8:	4b05      	ldr	r3, [pc, #20]	@ (80164c0 <LL_PWR_EnableBootC2+0x1c>)
 80164aa:	68db      	ldr	r3, [r3, #12]
 80164ac:	4a04      	ldr	r2, [pc, #16]	@ (80164c0 <LL_PWR_EnableBootC2+0x1c>)
 80164ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80164b2:	60d3      	str	r3, [r2, #12]
}
 80164b4:	bf00      	nop
 80164b6:	46bd      	mov	sp, r7
 80164b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164bc:	4770      	bx	lr
 80164be:	bf00      	nop
 80164c0:	58000400 	.word	0x58000400

080164c4 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80164c4:	b480      	push	{r7}
 80164c6:	b083      	sub	sp, #12
 80164c8:	af00      	add	r7, sp, #0
 80164ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80164cc:	4b06      	ldr	r3, [pc, #24]	@ (80164e8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80164ce:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80164d2:	4905      	ldr	r1, [pc, #20]	@ (80164e8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	4313      	orrs	r3, r2
 80164d8:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 80164dc:	bf00      	nop
 80164de:	370c      	adds	r7, #12
 80164e0:	46bd      	mov	sp, r7
 80164e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164e6:	4770      	bx	lr
 80164e8:	58000800 	.word	0x58000800

080164ec <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80164ec:	b480      	push	{r7}
 80164ee:	b083      	sub	sp, #12
 80164f0:	af00      	add	r7, sp, #0
 80164f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80164f4:	4b05      	ldr	r3, [pc, #20]	@ (801650c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80164f6:	6a1a      	ldr	r2, [r3, #32]
 80164f8:	4904      	ldr	r1, [pc, #16]	@ (801650c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	4313      	orrs	r3, r2
 80164fe:	620b      	str	r3, [r1, #32]
}
 8016500:	bf00      	nop
 8016502:	370c      	adds	r7, #12
 8016504:	46bd      	mov	sp, r7
 8016506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801650a:	4770      	bx	lr
 801650c:	58000800 	.word	0x58000800

08016510 <LL_AHB3_GRP1_EnableClock>:
{
 8016510:	b480      	push	{r7}
 8016512:	b085      	sub	sp, #20
 8016514:	af00      	add	r7, sp, #0
 8016516:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8016518:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801651c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801651e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	4313      	orrs	r3, r2
 8016526:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8016528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801652c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	4013      	ands	r3, r2
 8016532:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8016534:	68fb      	ldr	r3, [r7, #12]
}
 8016536:	bf00      	nop
 8016538:	3714      	adds	r7, #20
 801653a:	46bd      	mov	sp, r7
 801653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016540:	4770      	bx	lr

08016542 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8016542:	b480      	push	{r7}
 8016544:	b085      	sub	sp, #20
 8016546:	af00      	add	r7, sp, #0
 8016548:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 801654a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801654e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8016552:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	4313      	orrs	r3, r2
 801655a:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 801655e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016562:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	4013      	ands	r3, r2
 801656a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801656c:	68fb      	ldr	r3, [r7, #12]
}
 801656e:	bf00      	nop
 8016570:	3714      	adds	r7, #20
 8016572:	46bd      	mov	sp, r7
 8016574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016578:	4770      	bx	lr

0801657a <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 801657a:	b480      	push	{r7}
 801657c:	b083      	sub	sp, #12
 801657e:	af00      	add	r7, sp, #0
 8016580:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	601a      	str	r2, [r3, #0]
}
 801658e:	bf00      	nop
 8016590:	370c      	adds	r7, #12
 8016592:	46bd      	mov	sp, r7
 8016594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016598:	4770      	bx	lr

0801659a <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 801659a:	b480      	push	{r7}
 801659c:	b083      	sub	sp, #12
 801659e:	af00      	add	r7, sp, #0
 80165a0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	f043 0201 	orr.w	r2, r3, #1
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	601a      	str	r2, [r3, #0]
}
 80165ae:	bf00      	nop
 80165b0:	370c      	adds	r7, #12
 80165b2:	46bd      	mov	sp, r7
 80165b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b8:	4770      	bx	lr

080165ba <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80165ba:	b480      	push	{r7}
 80165bc:	b083      	sub	sp, #12
 80165be:	af00      	add	r7, sp, #0
 80165c0:	6078      	str	r0, [r7, #4]
 80165c2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	685a      	ldr	r2, [r3, #4]
 80165c8:	683b      	ldr	r3, [r7, #0]
 80165ca:	041b      	lsls	r3, r3, #16
 80165cc:	43db      	mvns	r3, r3
 80165ce:	401a      	ands	r2, r3
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	605a      	str	r2, [r3, #4]
}
 80165d4:	bf00      	nop
 80165d6:	370c      	adds	r7, #12
 80165d8:	46bd      	mov	sp, r7
 80165da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165de:	4770      	bx	lr

080165e0 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80165e0:	b480      	push	{r7}
 80165e2:	b083      	sub	sp, #12
 80165e4:	af00      	add	r7, sp, #0
 80165e6:	6078      	str	r0, [r7, #4]
 80165e8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	685a      	ldr	r2, [r3, #4]
 80165ee:	683b      	ldr	r3, [r7, #0]
 80165f0:	041b      	lsls	r3, r3, #16
 80165f2:	431a      	orrs	r2, r3
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	605a      	str	r2, [r3, #4]
}
 80165f8:	bf00      	nop
 80165fa:	370c      	adds	r7, #12
 80165fc:	46bd      	mov	sp, r7
 80165fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016602:	4770      	bx	lr

08016604 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8016604:	b480      	push	{r7}
 8016606:	b083      	sub	sp, #12
 8016608:	af00      	add	r7, sp, #0
 801660a:	6078      	str	r0, [r7, #4]
 801660c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	685a      	ldr	r2, [r3, #4]
 8016612:	683b      	ldr	r3, [r7, #0]
 8016614:	43db      	mvns	r3, r3
 8016616:	401a      	ands	r2, r3
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	605a      	str	r2, [r3, #4]
}
 801661c:	bf00      	nop
 801661e:	370c      	adds	r7, #12
 8016620:	46bd      	mov	sp, r7
 8016622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016626:	4770      	bx	lr

08016628 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8016628:	b480      	push	{r7}
 801662a:	b083      	sub	sp, #12
 801662c:	af00      	add	r7, sp, #0
 801662e:	6078      	str	r0, [r7, #4]
 8016630:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	683a      	ldr	r2, [r7, #0]
 8016636:	609a      	str	r2, [r3, #8]
}
 8016638:	bf00      	nop
 801663a:	370c      	adds	r7, #12
 801663c:	46bd      	mov	sp, r7
 801663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016642:	4770      	bx	lr

08016644 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8016644:	b480      	push	{r7}
 8016646:	b083      	sub	sp, #12
 8016648:	af00      	add	r7, sp, #0
 801664a:	6078      	str	r0, [r7, #4]
 801664c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 801664e:	683b      	ldr	r3, [r7, #0]
 8016650:	041a      	lsls	r2, r3, #16
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	609a      	str	r2, [r3, #8]
}
 8016656:	bf00      	nop
 8016658:	370c      	adds	r7, #12
 801665a:	46bd      	mov	sp, r7
 801665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016660:	4770      	bx	lr

08016662 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8016662:	b480      	push	{r7}
 8016664:	b083      	sub	sp, #12
 8016666:	af00      	add	r7, sp, #0
 8016668:	6078      	str	r0, [r7, #4]
 801666a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	68da      	ldr	r2, [r3, #12]
 8016670:	683b      	ldr	r3, [r7, #0]
 8016672:	4013      	ands	r3, r2
 8016674:	683a      	ldr	r2, [r7, #0]
 8016676:	429a      	cmp	r2, r3
 8016678:	d101      	bne.n	801667e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 801667a:	2301      	movs	r3, #1
 801667c:	e000      	b.n	8016680 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 801667e:	2300      	movs	r3, #0
}
 8016680:	4618      	mov	r0, r3
 8016682:	370c      	adds	r7, #12
 8016684:	46bd      	mov	sp, r7
 8016686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801668a:	4770      	bx	lr

0801668c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 801668c:	b480      	push	{r7}
 801668e:	b083      	sub	sp, #12
 8016690:	af00      	add	r7, sp, #0
 8016692:	6078      	str	r0, [r7, #4]
 8016694:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	69da      	ldr	r2, [r3, #28]
 801669a:	683b      	ldr	r3, [r7, #0]
 801669c:	4013      	ands	r3, r2
 801669e:	683a      	ldr	r2, [r7, #0]
 80166a0:	429a      	cmp	r2, r3
 80166a2:	d101      	bne.n	80166a8 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80166a4:	2301      	movs	r3, #1
 80166a6:	e000      	b.n	80166aa <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80166a8:	2300      	movs	r3, #0
}
 80166aa:	4618      	mov	r0, r3
 80166ac:	370c      	adds	r7, #12
 80166ae:	46bd      	mov	sp, r7
 80166b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166b4:	4770      	bx	lr
	...

080166b8 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80166b8:	b580      	push	{r7, lr}
 80166ba:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80166bc:	2102      	movs	r1, #2
 80166be:	4818      	ldr	r0, [pc, #96]	@ (8016720 <HW_IPCC_Rx_Handler+0x68>)
 80166c0:	f7ff ffe4 	bl	801668c <LL_C2_IPCC_IsActiveFlag_CHx>
 80166c4:	4603      	mov	r3, r0
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d008      	beq.n	80166dc <HW_IPCC_Rx_Handler+0x24>
 80166ca:	4b15      	ldr	r3, [pc, #84]	@ (8016720 <HW_IPCC_Rx_Handler+0x68>)
 80166cc:	685b      	ldr	r3, [r3, #4]
 80166ce:	f003 0302 	and.w	r3, r3, #2
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d102      	bne.n	80166dc <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 80166d6:	f000 f925 	bl	8016924 <HW_IPCC_SYS_EvtHandler>
 80166da:	e01e      	b.n	801671a <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80166dc:	2101      	movs	r1, #1
 80166de:	4810      	ldr	r0, [pc, #64]	@ (8016720 <HW_IPCC_Rx_Handler+0x68>)
 80166e0:	f7ff ffd4 	bl	801668c <LL_C2_IPCC_IsActiveFlag_CHx>
 80166e4:	4603      	mov	r3, r0
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d008      	beq.n	80166fc <HW_IPCC_Rx_Handler+0x44>
 80166ea:	4b0d      	ldr	r3, [pc, #52]	@ (8016720 <HW_IPCC_Rx_Handler+0x68>)
 80166ec:	685b      	ldr	r3, [r3, #4]
 80166ee:	f003 0301 	and.w	r3, r3, #1
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d102      	bne.n	80166fc <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 80166f6:	f000 f899 	bl	801682c <HW_IPCC_BLE_EvtHandler>
 80166fa:	e00e      	b.n	801671a <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80166fc:	2108      	movs	r1, #8
 80166fe:	4808      	ldr	r0, [pc, #32]	@ (8016720 <HW_IPCC_Rx_Handler+0x68>)
 8016700:	f7ff ffc4 	bl	801668c <LL_C2_IPCC_IsActiveFlag_CHx>
 8016704:	4603      	mov	r3, r0
 8016706:	2b00      	cmp	r3, #0
 8016708:	d008      	beq.n	801671c <HW_IPCC_Rx_Handler+0x64>
 801670a:	4b05      	ldr	r3, [pc, #20]	@ (8016720 <HW_IPCC_Rx_Handler+0x68>)
 801670c:	685b      	ldr	r3, [r3, #4]
 801670e:	f003 0308 	and.w	r3, r3, #8
 8016712:	2b00      	cmp	r3, #0
 8016714:	d102      	bne.n	801671c <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8016716:	f000 f97d 	bl	8016a14 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 801671a:	bf00      	nop
 801671c:	bf00      	nop
}
 801671e:	bd80      	pop	{r7, pc}
 8016720:	58000c00 	.word	0x58000c00

08016724 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8016724:	b580      	push	{r7, lr}
 8016726:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8016728:	2102      	movs	r1, #2
 801672a:	4818      	ldr	r0, [pc, #96]	@ (801678c <HW_IPCC_Tx_Handler+0x68>)
 801672c:	f7ff ff99 	bl	8016662 <LL_C1_IPCC_IsActiveFlag_CHx>
 8016730:	4603      	mov	r3, r0
 8016732:	2b00      	cmp	r3, #0
 8016734:	d108      	bne.n	8016748 <HW_IPCC_Tx_Handler+0x24>
 8016736:	4b15      	ldr	r3, [pc, #84]	@ (801678c <HW_IPCC_Tx_Handler+0x68>)
 8016738:	685b      	ldr	r3, [r3, #4]
 801673a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801673e:	2b00      	cmp	r3, #0
 8016740:	d102      	bne.n	8016748 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8016742:	f000 f8d3 	bl	80168ec <HW_IPCC_SYS_CmdEvtHandler>
 8016746:	e01e      	b.n	8016786 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8016748:	2108      	movs	r1, #8
 801674a:	4810      	ldr	r0, [pc, #64]	@ (801678c <HW_IPCC_Tx_Handler+0x68>)
 801674c:	f7ff ff89 	bl	8016662 <LL_C1_IPCC_IsActiveFlag_CHx>
 8016750:	4603      	mov	r3, r0
 8016752:	2b00      	cmp	r3, #0
 8016754:	d108      	bne.n	8016768 <HW_IPCC_Tx_Handler+0x44>
 8016756:	4b0d      	ldr	r3, [pc, #52]	@ (801678c <HW_IPCC_Tx_Handler+0x68>)
 8016758:	685b      	ldr	r3, [r3, #4]
 801675a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801675e:	2b00      	cmp	r3, #0
 8016760:	d102      	bne.n	8016768 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8016762:	f000 f919 	bl	8016998 <HW_IPCC_MM_FreeBufHandler>
 8016766:	e00e      	b.n	8016786 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8016768:	2120      	movs	r1, #32
 801676a:	4808      	ldr	r0, [pc, #32]	@ (801678c <HW_IPCC_Tx_Handler+0x68>)
 801676c:	f7ff ff79 	bl	8016662 <LL_C1_IPCC_IsActiveFlag_CHx>
 8016770:	4603      	mov	r3, r0
 8016772:	2b00      	cmp	r3, #0
 8016774:	d108      	bne.n	8016788 <HW_IPCC_Tx_Handler+0x64>
 8016776:	4b05      	ldr	r3, [pc, #20]	@ (801678c <HW_IPCC_Tx_Handler+0x68>)
 8016778:	685b      	ldr	r3, [r3, #4]
 801677a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801677e:	2b00      	cmp	r3, #0
 8016780:	d102      	bne.n	8016788 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8016782:	f000 f85f 	bl	8016844 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8016786:	bf00      	nop
 8016788:	bf00      	nop
}
 801678a:	bd80      	pop	{r7, pc}
 801678c:	58000c00 	.word	0x58000c00

08016790 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8016790:	b580      	push	{r7, lr}
 8016792:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8016794:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8016798:	f7ff fed3 	bl	8016542 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 801679c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80167a0:	f7ff fea4 	bl	80164ec <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80167a4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80167a8:	f7ff fe8c 	bl	80164c4 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80167ac:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80167ae:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80167b0:	f7ff fe78 	bl	80164a4 <LL_PWR_EnableBootC2>

  return;
 80167b4:	bf00      	nop
}
 80167b6:	bd80      	pop	{r7, pc}

080167b8 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80167b8:	b580      	push	{r7, lr}
 80167ba:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80167bc:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80167c0:	f7ff fea6 	bl	8016510 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80167c4:	4806      	ldr	r0, [pc, #24]	@ (80167e0 <HW_IPCC_Init+0x28>)
 80167c6:	f7ff fee8 	bl	801659a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80167ca:	4805      	ldr	r0, [pc, #20]	@ (80167e0 <HW_IPCC_Init+0x28>)
 80167cc:	f7ff fed5 	bl	801657a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80167d0:	202c      	movs	r0, #44	@ 0x2c
 80167d2:	f7f1 f830 	bl	8007836 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80167d6:	202d      	movs	r0, #45	@ 0x2d
 80167d8:	f7f1 f82d 	bl	8007836 <HAL_NVIC_EnableIRQ>

  return;
 80167dc:	bf00      	nop
}
 80167de:	bd80      	pop	{r7, pc}
 80167e0:	58000c00 	.word	0x58000c00

080167e4 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80167e4:	b580      	push	{r7, lr}
 80167e6:	b084      	sub	sp, #16
 80167e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80167ea:	f3ef 8310 	mrs	r3, PRIMASK
 80167ee:	607b      	str	r3, [r7, #4]
  return(result);
 80167f0:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 80167f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80167f4:	b672      	cpsid	i
}
 80167f6:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80167f8:	2101      	movs	r1, #1
 80167fa:	4806      	ldr	r0, [pc, #24]	@ (8016814 <HW_IPCC_BLE_Init+0x30>)
 80167fc:	f7ff ff02 	bl	8016604 <LL_C1_IPCC_EnableReceiveChannel>
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016804:	68bb      	ldr	r3, [r7, #8]
 8016806:	f383 8810 	msr	PRIMASK, r3
}
 801680a:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 801680c:	bf00      	nop
}
 801680e:	3710      	adds	r7, #16
 8016810:	46bd      	mov	sp, r7
 8016812:	bd80      	pop	{r7, pc}
 8016814:	58000c00 	.word	0x58000c00

08016818 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8016818:	b580      	push	{r7, lr}
 801681a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 801681c:	2101      	movs	r1, #1
 801681e:	4802      	ldr	r0, [pc, #8]	@ (8016828 <HW_IPCC_BLE_SendCmd+0x10>)
 8016820:	f7ff ff10 	bl	8016644 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8016824:	bf00      	nop
}
 8016826:	bd80      	pop	{r7, pc}
 8016828:	58000c00 	.word	0x58000c00

0801682c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 801682c:	b580      	push	{r7, lr}
 801682e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8016830:	f7fe fe56 	bl	80154e0 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8016834:	2101      	movs	r1, #1
 8016836:	4802      	ldr	r0, [pc, #8]	@ (8016840 <HW_IPCC_BLE_EvtHandler+0x14>)
 8016838:	f7ff fef6 	bl	8016628 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 801683c:	bf00      	nop
}
 801683e:	bd80      	pop	{r7, pc}
 8016840:	58000c00 	.word	0x58000c00

08016844 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8016844:	b580      	push	{r7, lr}
 8016846:	b084      	sub	sp, #16
 8016848:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801684a:	f3ef 8310 	mrs	r3, PRIMASK
 801684e:	607b      	str	r3, [r7, #4]
  return(result);
 8016850:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8016852:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8016854:	b672      	cpsid	i
}
 8016856:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8016858:	2120      	movs	r1, #32
 801685a:	4807      	ldr	r0, [pc, #28]	@ (8016878 <HW_IPCC_BLE_AclDataEvtHandler+0x34>)
 801685c:	f7ff fec0 	bl	80165e0 <LL_C1_IPCC_DisableTransmitChannel>
 8016860:	68fb      	ldr	r3, [r7, #12]
 8016862:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016864:	68bb      	ldr	r3, [r7, #8]
 8016866:	f383 8810 	msr	PRIMASK, r3
}
 801686a:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_BLE_AclDataAckNot();
 801686c:	f7fe fe68 	bl	8015540 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8016870:	bf00      	nop
}
 8016872:	3710      	adds	r7, #16
 8016874:	46bd      	mov	sp, r7
 8016876:	bd80      	pop	{r7, pc}
 8016878:	58000c00 	.word	0x58000c00

0801687c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 801687c:	b580      	push	{r7, lr}
 801687e:	b084      	sub	sp, #16
 8016880:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016882:	f3ef 8310 	mrs	r3, PRIMASK
 8016886:	607b      	str	r3, [r7, #4]
  return(result);
 8016888:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 801688a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801688c:	b672      	cpsid	i
}
 801688e:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8016890:	2102      	movs	r1, #2
 8016892:	4806      	ldr	r0, [pc, #24]	@ (80168ac <HW_IPCC_SYS_Init+0x30>)
 8016894:	f7ff feb6 	bl	8016604 <LL_C1_IPCC_EnableReceiveChannel>
 8016898:	68fb      	ldr	r3, [r7, #12]
 801689a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801689c:	68bb      	ldr	r3, [r7, #8]
 801689e:	f383 8810 	msr	PRIMASK, r3
}
 80168a2:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 80168a4:	bf00      	nop
}
 80168a6:	3710      	adds	r7, #16
 80168a8:	46bd      	mov	sp, r7
 80168aa:	bd80      	pop	{r7, pc}
 80168ac:	58000c00 	.word	0x58000c00

080168b0 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80168b0:	b580      	push	{r7, lr}
 80168b2:	b084      	sub	sp, #16
 80168b4:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80168b6:	2102      	movs	r1, #2
 80168b8:	480b      	ldr	r0, [pc, #44]	@ (80168e8 <HW_IPCC_SYS_SendCmd+0x38>)
 80168ba:	f7ff fec3 	bl	8016644 <LL_C1_IPCC_SetFlag_CHx>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80168be:	f3ef 8310 	mrs	r3, PRIMASK
 80168c2:	607b      	str	r3, [r7, #4]
  return(result);
 80168c4:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 80168c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80168c8:	b672      	cpsid	i
}
 80168ca:	bf00      	nop
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80168cc:	2102      	movs	r1, #2
 80168ce:	4806      	ldr	r0, [pc, #24]	@ (80168e8 <HW_IPCC_SYS_SendCmd+0x38>)
 80168d0:	f7ff fe73 	bl	80165ba <LL_C1_IPCC_EnableTransmitChannel>
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80168d8:	68bb      	ldr	r3, [r7, #8]
 80168da:	f383 8810 	msr	PRIMASK, r3
}
 80168de:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 80168e0:	bf00      	nop
}
 80168e2:	3710      	adds	r7, #16
 80168e4:	46bd      	mov	sp, r7
 80168e6:	bd80      	pop	{r7, pc}
 80168e8:	58000c00 	.word	0x58000c00

080168ec <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80168ec:	b580      	push	{r7, lr}
 80168ee:	b084      	sub	sp, #16
 80168f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80168f2:	f3ef 8310 	mrs	r3, PRIMASK
 80168f6:	607b      	str	r3, [r7, #4]
  return(result);
 80168f8:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 80168fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80168fc:	b672      	cpsid	i
}
 80168fe:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8016900:	2102      	movs	r1, #2
 8016902:	4807      	ldr	r0, [pc, #28]	@ (8016920 <HW_IPCC_SYS_CmdEvtHandler+0x34>)
 8016904:	f7ff fe6c 	bl	80165e0 <LL_C1_IPCC_DisableTransmitChannel>
 8016908:	68fb      	ldr	r3, [r7, #12]
 801690a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801690c:	68bb      	ldr	r3, [r7, #8]
 801690e:	f383 8810 	msr	PRIMASK, r3
}
 8016912:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_SYS_CmdEvtNot();
 8016914:	f7fe fe64 	bl	80155e0 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8016918:	bf00      	nop
}
 801691a:	3710      	adds	r7, #16
 801691c:	46bd      	mov	sp, r7
 801691e:	bd80      	pop	{r7, pc}
 8016920:	58000c00 	.word	0x58000c00

08016924 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8016924:	b580      	push	{r7, lr}
 8016926:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8016928:	f7fe fe70 	bl	801560c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 801692c:	2102      	movs	r1, #2
 801692e:	4802      	ldr	r0, [pc, #8]	@ (8016938 <HW_IPCC_SYS_EvtHandler+0x14>)
 8016930:	f7ff fe7a 	bl	8016628 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8016934:	bf00      	nop
}
 8016936:	bd80      	pop	{r7, pc}
 8016938:	58000c00 	.word	0x58000c00

0801693c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 801693c:	b580      	push	{r7, lr}
 801693e:	b086      	sub	sp, #24
 8016940:	af00      	add	r7, sp, #0
 8016942:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8016944:	2108      	movs	r1, #8
 8016946:	4812      	ldr	r0, [pc, #72]	@ (8016990 <HW_IPCC_MM_SendFreeBuf+0x54>)
 8016948:	f7ff fe8b 	bl	8016662 <LL_C1_IPCC_IsActiveFlag_CHx>
 801694c:	4603      	mov	r3, r0
 801694e:	2b00      	cmp	r3, #0
 8016950:	d013      	beq.n	801697a <HW_IPCC_MM_SendFreeBuf+0x3e>
  {
    FreeBufCb = cb;
 8016952:	4a10      	ldr	r2, [pc, #64]	@ (8016994 <HW_IPCC_MM_SendFreeBuf+0x58>)
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016958:	f3ef 8310 	mrs	r3, PRIMASK
 801695c:	60fb      	str	r3, [r7, #12]
  return(result);
 801695e:	68fb      	ldr	r3, [r7, #12]
    UTILS_ENTER_CRITICAL_SECTION();
 8016960:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016962:	b672      	cpsid	i
}
 8016964:	bf00      	nop
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8016966:	2108      	movs	r1, #8
 8016968:	4809      	ldr	r0, [pc, #36]	@ (8016990 <HW_IPCC_MM_SendFreeBuf+0x54>)
 801696a:	f7ff fe26 	bl	80165ba <LL_C1_IPCC_EnableTransmitChannel>
 801696e:	697b      	ldr	r3, [r7, #20]
 8016970:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016972:	693b      	ldr	r3, [r7, #16]
 8016974:	f383 8810 	msr	PRIMASK, r3
}
 8016978:	e005      	b.n	8016986 <HW_IPCC_MM_SendFreeBuf+0x4a>
    UTILS_EXIT_CRITICAL_SECTION();
  }
  else
  {
    cb();
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	4798      	blx	r3

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801697e:	2108      	movs	r1, #8
 8016980:	4803      	ldr	r0, [pc, #12]	@ (8016990 <HW_IPCC_MM_SendFreeBuf+0x54>)
 8016982:	f7ff fe5f 	bl	8016644 <LL_C1_IPCC_SetFlag_CHx>
  }

  return;
 8016986:	bf00      	nop
}
 8016988:	3718      	adds	r7, #24
 801698a:	46bd      	mov	sp, r7
 801698c:	bd80      	pop	{r7, pc}
 801698e:	bf00      	nop
 8016990:	58000c00 	.word	0x58000c00
 8016994:	20000be8 	.word	0x20000be8

08016998 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8016998:	b580      	push	{r7, lr}
 801699a:	b084      	sub	sp, #16
 801699c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801699e:	f3ef 8310 	mrs	r3, PRIMASK
 80169a2:	607b      	str	r3, [r7, #4]
  return(result);
 80169a4:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 80169a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80169a8:	b672      	cpsid	i
}
 80169aa:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80169ac:	2108      	movs	r1, #8
 80169ae:	480a      	ldr	r0, [pc, #40]	@ (80169d8 <HW_IPCC_MM_FreeBufHandler+0x40>)
 80169b0:	f7ff fe16 	bl	80165e0 <LL_C1_IPCC_DisableTransmitChannel>
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80169b8:	68bb      	ldr	r3, [r7, #8]
 80169ba:	f383 8810 	msr	PRIMASK, r3
}
 80169be:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  FreeBufCb();
 80169c0:	4b06      	ldr	r3, [pc, #24]	@ (80169dc <HW_IPCC_MM_FreeBufHandler+0x44>)
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80169c6:	2108      	movs	r1, #8
 80169c8:	4803      	ldr	r0, [pc, #12]	@ (80169d8 <HW_IPCC_MM_FreeBufHandler+0x40>)
 80169ca:	f7ff fe3b 	bl	8016644 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80169ce:	bf00      	nop
}
 80169d0:	3710      	adds	r7, #16
 80169d2:	46bd      	mov	sp, r7
 80169d4:	bd80      	pop	{r7, pc}
 80169d6:	bf00      	nop
 80169d8:	58000c00 	.word	0x58000c00
 80169dc:	20000be8 	.word	0x20000be8

080169e0 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80169e0:	b580      	push	{r7, lr}
 80169e2:	b084      	sub	sp, #16
 80169e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80169e6:	f3ef 8310 	mrs	r3, PRIMASK
 80169ea:	607b      	str	r3, [r7, #4]
  return(result);
 80169ec:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 80169ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80169f0:	b672      	cpsid	i
}
 80169f2:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80169f4:	2108      	movs	r1, #8
 80169f6:	4806      	ldr	r0, [pc, #24]	@ (8016a10 <HW_IPCC_TRACES_Init+0x30>)
 80169f8:	f7ff fe04 	bl	8016604 <LL_C1_IPCC_EnableReceiveChannel>
 80169fc:	68fb      	ldr	r3, [r7, #12]
 80169fe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016a00:	68bb      	ldr	r3, [r7, #8]
 8016a02:	f383 8810 	msr	PRIMASK, r3
}
 8016a06:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 8016a08:	bf00      	nop
}
 8016a0a:	3710      	adds	r7, #16
 8016a0c:	46bd      	mov	sp, r7
 8016a0e:	bd80      	pop	{r7, pc}
 8016a10:	58000c00 	.word	0x58000c00

08016a14 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8016a14:	b580      	push	{r7, lr}
 8016a16:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8016a18:	f7fe fea0 	bl	801575c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8016a1c:	2108      	movs	r1, #8
 8016a1e:	4802      	ldr	r0, [pc, #8]	@ (8016a28 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8016a20:	f7ff fe02 	bl	8016628 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8016a24:	bf00      	nop
}
 8016a26:	bd80      	pop	{r7, pc}
 8016a28:	58000c00 	.word	0x58000c00

08016a2c <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8016a2c:	b580      	push	{r7, lr}
 8016a2e:	b082      	sub	sp, #8
 8016a30:	af00      	add	r7, sp, #0
 8016a32:	ed87 0a01 	vstr	s0, [r7, #4]
 8016a36:	ed97 0a01 	vldr	s0, [r7, #4]
 8016a3a:	f002 f851 	bl	8018ae0 <cosf>
 8016a3e:	eef0 7a40 	vmov.f32	s15, s0
 8016a42:	eeb0 0a67 	vmov.f32	s0, s15
 8016a46:	3708      	adds	r7, #8
 8016a48:	46bd      	mov	sp, r7
 8016a4a:	bd80      	pop	{r7, pc}

08016a4c <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8016a4c:	b580      	push	{r7, lr}
 8016a4e:	b082      	sub	sp, #8
 8016a50:	af00      	add	r7, sp, #0
 8016a52:	ed87 0a01 	vstr	s0, [r7, #4]
 8016a56:	ed97 0a01 	vldr	s0, [r7, #4]
 8016a5a:	f002 f885 	bl	8018b68 <sinf>
 8016a5e:	eef0 7a40 	vmov.f32	s15, s0
 8016a62:	eeb0 0a67 	vmov.f32	s0, s15
 8016a66:	3708      	adds	r7, #8
 8016a68:	46bd      	mov	sp, r7
 8016a6a:	bd80      	pop	{r7, pc}

08016a6c <_ZN6Screen11renderMeterEv>:
}

void Screen::renderMeter()

// void Screen::renderMeter(GFXcanvas16 &canvas)
{
 8016a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a6e:	b089      	sub	sp, #36	@ 0x24
 8016a70:	af04      	add	r7, sp, #16
 8016a72:	6078      	str	r0, [r7, #4]

    // background
    // canvas.fillRect(0, 0, canvas.width(), canvas.height(), BACKGROUND_COLOR);

    canvas.fillScreen(BACKGROUND_COLOR);
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	336c      	adds	r3, #108	@ 0x6c
 8016a78:	f64d 41ff 	movw	r1, #56575	@ 0xdcff
 8016a7c:	4618      	mov	r0, r3
 8016a7e:	f7ec f921 	bl	8002cc4 <_ZN11GFXcanvas1610fillScreenEt>

    // border
    for (int i = 0; i < 3; i++)
 8016a82:	2300      	movs	r3, #0
 8016a84:	60fb      	str	r3, [r7, #12]
 8016a86:	e035      	b.n	8016af4 <_ZN6Screen11renderMeterEv+0x88>
    {
        canvas.drawRect(overallBorderX - i, overallBorderY - i, overallBorderWidth + 2 * i, overallBorderHeight + 2 * i, TEXT_COLOR);
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8016a94:	b29a      	uxth	r2, r3
 8016a96:	68fb      	ldr	r3, [r7, #12]
 8016a98:	b29b      	uxth	r3, r3
 8016a9a:	1ad3      	subs	r3, r2, r3
 8016a9c:	b29b      	uxth	r3, r3
 8016a9e:	b219      	sxth	r1, r3
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8016aa6:	b29a      	uxth	r2, r3
 8016aa8:	68fb      	ldr	r3, [r7, #12]
 8016aaa:	b29b      	uxth	r3, r3
 8016aac:	1ad3      	subs	r3, r2, r3
 8016aae:	b29b      	uxth	r3, r3
 8016ab0:	b21c      	sxth	r4, r3
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8016ab8:	b29a      	uxth	r2, r3
 8016aba:	68fb      	ldr	r3, [r7, #12]
 8016abc:	b29b      	uxth	r3, r3
 8016abe:	005b      	lsls	r3, r3, #1
 8016ac0:	b29b      	uxth	r3, r3
 8016ac2:	4413      	add	r3, r2
 8016ac4:	b29b      	uxth	r3, r3
 8016ac6:	b21d      	sxth	r5, r3
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8016ace:	b29a      	uxth	r2, r3
 8016ad0:	68fb      	ldr	r3, [r7, #12]
 8016ad2:	b29b      	uxth	r3, r3
 8016ad4:	005b      	lsls	r3, r3, #1
 8016ad6:	b29b      	uxth	r3, r3
 8016ad8:	4413      	add	r3, r2
 8016ada:	b29b      	uxth	r3, r3
 8016adc:	b21b      	sxth	r3, r3
 8016ade:	f24a 3229 	movw	r2, #41769	@ 0xa329
 8016ae2:	9201      	str	r2, [sp, #4]
 8016ae4:	9300      	str	r3, [sp, #0]
 8016ae6:	462b      	mov	r3, r5
 8016ae8:	4622      	mov	r2, r4
 8016aea:	f7eb f8f7 	bl	8001cdc <_ZN12Adafruit_GFX8drawRectEsssst>
    for (int i = 0; i < 3; i++)
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	3301      	adds	r3, #1
 8016af2:	60fb      	str	r3, [r7, #12]
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	2b02      	cmp	r3, #2
 8016af8:	ddc6      	ble.n	8016a88 <_ZN6Screen11renderMeterEv+0x1c>
    }
    // yield();
    // status border
    canvas.drawRect(statusBorderX, statusBorderY, statusWidth, statusHeight, TEXT_COLOR);
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8016b06:	b219      	sxth	r1, r3
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8016b0e:	b21a      	sxth	r2, r3
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8016b16:	b21c      	sxth	r4, r3
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8016b1e:	b21b      	sxth	r3, r3
 8016b20:	f24a 3529 	movw	r5, #41769	@ 0xa329
 8016b24:	9501      	str	r5, [sp, #4]
 8016b26:	9300      	str	r3, [sp, #0]
 8016b28:	4623      	mov	r3, r4
 8016b2a:	f7eb f8d7 	bl	8001cdc <_ZN12Adafruit_GFX8drawRectEsssst>

    canvas.drawRect(meterX, meterY, meterWidth, meterHeight, TEXT_COLOR);
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8016b3a:	b219      	sxth	r1, r3
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8016b42:	b21a      	sxth	r2, r3
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8016b4a:	b21c      	sxth	r4, r3
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8016b52:	b21b      	sxth	r3, r3
 8016b54:	f24a 3529 	movw	r5, #41769	@ 0xa329
 8016b58:	9501      	str	r5, [sp, #4]
 8016b5a:	9300      	str	r3, [sp, #0]
 8016b5c:	4623      	mov	r3, r4
 8016b5e:	f7eb f8bd 	bl	8001cdc <_ZN12Adafruit_GFX8drawRectEsssst>
    canvas.drawRect(labelX, labelY, labelWidth, labelHeight, TEXT_COLOR);
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8016b6e:	b219      	sxth	r1, r3
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8016b76:	b21a      	sxth	r2, r3
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8016b7e:	b21c      	sxth	r4, r3
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8016b86:	b21b      	sxth	r3, r3
 8016b88:	f24a 3529 	movw	r5, #41769	@ 0xa329
 8016b8c:	9501      	str	r5, [sp, #4]
 8016b8e:	9300      	str	r3, [sp, #0]
 8016b90:	4623      	mov	r3, r4
 8016b92:	f7eb f8a3 	bl	8001cdc <_ZN12Adafruit_GFX8drawRectEsssst>
    canvas.drawRect(buttonBorderX, buttonBorderY, buttonBorderWidth, buttonBorderHeight, TEXT_COLOR);
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8016ba2:	b219      	sxth	r1, r3
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8016baa:	b21a      	sxth	r2, r3
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8016bb2:	b21c      	sxth	r4, r3
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8016bba:	b21b      	sxth	r3, r3
 8016bbc:	f24a 3529 	movw	r5, #41769	@ 0xa329
 8016bc0:	9501      	str	r5, [sp, #4]
 8016bc2:	9300      	str	r3, [sp, #0]
 8016bc4:	4623      	mov	r3, r4
 8016bc6:	f7eb f889 	bl	8001cdc <_ZN12Adafruit_GFX8drawRectEsssst>

    canvas.fillRoundRect(buttonX1, buttonY1, buttonWidth, buttonHeight, buttonRadius, ACCENT_COLOR);
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8016bd6:	b219      	sxth	r1, r3
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8016bde:	b21c      	sxth	r4, r3
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8016be6:	b21d      	sxth	r5, r3
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8016bee:	b21b      	sxth	r3, r3
 8016bf0:	687a      	ldr	r2, [r7, #4]
 8016bf2:	f8d2 21b0 	ldr.w	r2, [r2, #432]	@ 0x1b0
 8016bf6:	b212      	sxth	r2, r2
 8016bf8:	f246 7663 	movw	r6, #26467	@ 0x6763
 8016bfc:	9602      	str	r6, [sp, #8]
 8016bfe:	9201      	str	r2, [sp, #4]
 8016c00:	9300      	str	r3, [sp, #0]
 8016c02:	462b      	mov	r3, r5
 8016c04:	4622      	mov	r2, r4
 8016c06:	f7eb f8cc 	bl	8001da2 <_ZN12Adafruit_GFX13fillRoundRectEssssst>
    canvas.fillRoundRect(buttonX2, buttonY2, buttonWidth, buttonHeight, buttonRadius, ACCENT_COLOR);
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 8016c16:	b219      	sxth	r1, r3
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8016c1e:	b21c      	sxth	r4, r3
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8016c26:	b21d      	sxth	r5, r3
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8016c2e:	b21b      	sxth	r3, r3
 8016c30:	687a      	ldr	r2, [r7, #4]
 8016c32:	f8d2 21b0 	ldr.w	r2, [r2, #432]	@ 0x1b0
 8016c36:	b212      	sxth	r2, r2
 8016c38:	f246 7663 	movw	r6, #26467	@ 0x6763
 8016c3c:	9602      	str	r6, [sp, #8]
 8016c3e:	9201      	str	r2, [sp, #4]
 8016c40:	9300      	str	r3, [sp, #0]
 8016c42:	462b      	mov	r3, r5
 8016c44:	4622      	mov	r2, r4
 8016c46:	f7eb f8ac 	bl	8001da2 <_ZN12Adafruit_GFX13fillRoundRectEssssst>

    canvas.drawPixel(10, 10, ACCENT_COLOR);
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8016c50:	f246 7363 	movw	r3, #26467	@ 0x6763
 8016c54:	220a      	movs	r2, #10
 8016c56:	210a      	movs	r1, #10
 8016c58:	f7eb ffb8 	bl	8002bcc <_ZN11GFXcanvas169drawPixelEsst>
    canvas.drawPixel(11, 10, ACCENT_COLOR);
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8016c62:	f246 7363 	movw	r3, #26467	@ 0x6763
 8016c66:	220a      	movs	r2, #10
 8016c68:	210b      	movs	r1, #11
 8016c6a:	f7eb ffaf 	bl	8002bcc <_ZN11GFXcanvas169drawPixelEsst>
    canvas.drawPixel(12, 10, ACCENT_COLOR);
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8016c74:	f246 7363 	movw	r3, #26467	@ 0x6763
 8016c78:	220a      	movs	r2, #10
 8016c7a:	210c      	movs	r1, #12
 8016c7c:	f7eb ffa6 	bl	8002bcc <_ZN11GFXcanvas169drawPixelEsst>
    canvas.drawPixel(13, 10, ACCENT_COLOR);
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8016c86:	f246 7363 	movw	r3, #26467	@ 0x6763
 8016c8a:	220a      	movs	r2, #10
 8016c8c:	210d      	movs	r1, #13
 8016c8e:	f7eb ff9d 	bl	8002bcc <_ZN11GFXcanvas169drawPixelEsst>
    canvas.drawPixel(10, 11, ACCENT_COLOR);
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8016c98:	f246 7363 	movw	r3, #26467	@ 0x6763
 8016c9c:	220b      	movs	r2, #11
 8016c9e:	210a      	movs	r1, #10
 8016ca0:	f7eb ff94 	bl	8002bcc <_ZN11GFXcanvas169drawPixelEsst>
    canvas.drawPixel(10, 12, ACCENT_COLOR);
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8016caa:	f246 7363 	movw	r3, #26467	@ 0x6763
 8016cae:	220c      	movs	r2, #12
 8016cb0:	210a      	movs	r1, #10
 8016cb2:	f7eb ff8b 	bl	8002bcc <_ZN11GFXcanvas169drawPixelEsst>
    canvas.drawPixel(10, 13, ACCENT_COLOR);
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8016cbc:	f246 7363 	movw	r3, #26467	@ 0x6763
 8016cc0:	220d      	movs	r2, #13
 8016cc2:	210a      	movs	r1, #10
 8016cc4:	f7eb ff82 	bl	8002bcc <_ZN11GFXcanvas169drawPixelEsst>

    // calculate the size of a few things....
    canvas.getTextBounds("40%", 0, 0, &batteryTextX, &batteryTextY, &batteryW, &batteryH);
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	33cc      	adds	r3, #204	@ 0xcc
 8016cd2:	687a      	ldr	r2, [r7, #4]
 8016cd4:	32ce      	adds	r2, #206	@ 0xce
 8016cd6:	6879      	ldr	r1, [r7, #4]
 8016cd8:	31d0      	adds	r1, #208	@ 0xd0
 8016cda:	6878      	ldr	r0, [r7, #4]
 8016cdc:	30d2      	adds	r0, #210	@ 0xd2
 8016cde:	9003      	str	r0, [sp, #12]
 8016ce0:	9102      	str	r1, [sp, #8]
 8016ce2:	9201      	str	r2, [sp, #4]
 8016ce4:	9300      	str	r3, [sp, #0]
 8016ce6:	2300      	movs	r3, #0
 8016ce8:	2200      	movs	r2, #0
 8016cea:	49bc      	ldr	r1, [pc, #752]	@ (8016fdc <_ZN6Screen11renderMeterEv+0x570>)
 8016cec:	4620      	mov	r0, r4
 8016cee:	f7eb fe86 	bl	80029fe <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>
    // origin of battery text based on its size...
    batteryX = overallBorderWidth - batteryW - 2 * batterySpacer;
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8016cf8:	687a      	ldr	r2, [r7, #4]
 8016cfa:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	@ 0xd0
 8016cfe:	1a9a      	subs	r2, r3, r2
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8016d06:	005b      	lsls	r3, r3, #1
 8016d08:	1ad2      	subs	r2, r2, r3
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    batteryY = statusBorderY + statusHeight / 2 + batteryH / 2;
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8016d1c:	0fd9      	lsrs	r1, r3, #31
 8016d1e:	440b      	add	r3, r1
 8016d20:	105b      	asrs	r3, r3, #1
 8016d22:	4413      	add	r3, r2
 8016d24:	687a      	ldr	r2, [r7, #4]
 8016d26:	f8b2 20d2 	ldrh.w	r2, [r2, #210]	@ 0xd2
 8016d2a:	0852      	lsrs	r2, r2, #1
 8016d2c:	b292      	uxth	r2, r2
 8016d2e:	441a      	add	r2, r3
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

    // // Serial.println(batteryX);
    // // Serial.println(batteryY);
    canvas.setTextColor(TEXT_COLOR);
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	336c      	adds	r3, #108	@ 0x6c
 8016d3a:	f24a 3129 	movw	r1, #41769	@ 0xa329
 8016d3e:	4618      	mov	r0, r3
 8016d40:	f7ea fb83 	bl	800144a <_ZN12Adafruit_GFX12setTextColorEt>
    canvas.setCursor(batteryX, batteryY);
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8016d50:	b219      	sxth	r1, r3
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8016d58:	b21b      	sxth	r3, r3
 8016d5a:	461a      	mov	r2, r3
 8016d5c:	f7ea fb61 	bl	8001422 <_ZN12Adafruit_GFX9setCursorEss>
    canvas.print("40%");
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	336c      	adds	r3, #108	@ 0x6c
 8016d64:	499d      	ldr	r1, [pc, #628]	@ (8016fdc <_ZN6Screen11renderMeterEv+0x570>)
 8016d66:	4618      	mov	r0, r3
 8016d68:	f7ec fadb 	bl	8003322 <_ZN5Print5printEPKc>

    // calculate size of charging:
    canvas.getTextBounds("+ ", 0, 0, &chargingTextX, &chargingTextY, &chargingW, &chargingH);
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	33e0      	adds	r3, #224	@ 0xe0
 8016d76:	687a      	ldr	r2, [r7, #4]
 8016d78:	32e2      	adds	r2, #226	@ 0xe2
 8016d7a:	6879      	ldr	r1, [r7, #4]
 8016d7c:	31e4      	adds	r1, #228	@ 0xe4
 8016d7e:	6878      	ldr	r0, [r7, #4]
 8016d80:	30e6      	adds	r0, #230	@ 0xe6
 8016d82:	9003      	str	r0, [sp, #12]
 8016d84:	9102      	str	r1, [sp, #8]
 8016d86:	9201      	str	r2, [sp, #4]
 8016d88:	9300      	str	r3, [sp, #0]
 8016d8a:	2300      	movs	r3, #0
 8016d8c:	2200      	movs	r2, #0
 8016d8e:	4994      	ldr	r1, [pc, #592]	@ (8016fe0 <_ZN6Screen11renderMeterEv+0x574>)
 8016d90:	4620      	mov	r0, r4
 8016d92:	f7eb fe34 	bl	80029fe <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>
    chargingX = overallBorderWidth - batteryW - chargingW - 2 * batterySpacer;
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8016d9c:	687a      	ldr	r2, [r7, #4]
 8016d9e:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	@ 0xd0
 8016da2:	1a9b      	subs	r3, r3, r2
 8016da4:	687a      	ldr	r2, [r7, #4]
 8016da6:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	@ 0xe4
 8016daa:	1a9a      	subs	r2, r3, r2
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8016db2:	005b      	lsls	r3, r3, #1
 8016db4:	1ad2      	subs	r2, r2, r3
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
    chargingY = statusBorderY + statusHeight / 2 + chargingH / 2;
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8016dc8:	0fd9      	lsrs	r1, r3, #31
 8016dca:	440b      	add	r3, r1
 8016dcc:	105b      	asrs	r3, r3, #1
 8016dce:	4413      	add	r3, r2
 8016dd0:	687a      	ldr	r2, [r7, #4]
 8016dd2:	f8b2 20e6 	ldrh.w	r2, [r2, #230]	@ 0xe6
 8016dd6:	0852      	lsrs	r2, r2, #1
 8016dd8:	b292      	uxth	r2, r2
 8016dda:	441a      	add	r2, r3
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    canvas.setTextColor(TEXT_COLOR);
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	336c      	adds	r3, #108	@ 0x6c
 8016de6:	f24a 3129 	movw	r1, #41769	@ 0xa329
 8016dea:	4618      	mov	r0, r3
 8016dec:	f7ea fb2d 	bl	800144a <_ZN12Adafruit_GFX12setTextColorEt>
    // // Serial.println(chargingX);
    // // Serial.println(chargingY);
    canvas.setCursor(chargingX, chargingY);
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8016dfc:	b219      	sxth	r1, r3
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8016e04:	b21b      	sxth	r3, r3
 8016e06:	461a      	mov	r2, r3
 8016e08:	f7ea fb0b 	bl	8001422 <_ZN12Adafruit_GFX9setCursorEss>
    canvas.print("+");
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	336c      	adds	r3, #108	@ 0x6c
 8016e10:	4974      	ldr	r1, [pc, #464]	@ (8016fe4 <_ZN6Screen11renderMeterEv+0x578>)
 8016e12:	4618      	mov	r0, r3
 8016e14:	f7ec fa85 	bl	8003322 <_ZN5Print5printEPKc>

    // calculate size of settings:
    canvas.getTextBounds("Settings", 0, 0, &label1X, &label1Y, &label1W, &label1H);
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8016e24:	687a      	ldr	r2, [r7, #4]
 8016e26:	f502 72ab 	add.w	r2, r2, #342	@ 0x156
 8016e2a:	6879      	ldr	r1, [r7, #4]
 8016e2c:	f501 71ac 	add.w	r1, r1, #344	@ 0x158
 8016e30:	6878      	ldr	r0, [r7, #4]
 8016e32:	f500 70ad 	add.w	r0, r0, #346	@ 0x15a
 8016e36:	9003      	str	r0, [sp, #12]
 8016e38:	9102      	str	r1, [sp, #8]
 8016e3a:	9201      	str	r2, [sp, #4]
 8016e3c:	9300      	str	r3, [sp, #0]
 8016e3e:	2300      	movs	r3, #0
 8016e40:	2200      	movs	r2, #0
 8016e42:	4969      	ldr	r1, [pc, #420]	@ (8016fe8 <_ZN6Screen11renderMeterEv+0x57c>)
 8016e44:	4620      	mov	r0, r4
 8016e46:	f7eb fdda 	bl	80029fe <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>
    label1X = buttonX1 + buttonWidth / 2 - label1W / 2;
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8016e50:	b29a      	uxth	r2, r3
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8016e58:	0fd9      	lsrs	r1, r3, #31
 8016e5a:	440b      	add	r3, r1
 8016e5c:	105b      	asrs	r3, r3, #1
 8016e5e:	b29b      	uxth	r3, r3
 8016e60:	4413      	add	r3, r2
 8016e62:	b29a      	uxth	r2, r3
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	f8b3 3158 	ldrh.w	r3, [r3, #344]	@ 0x158
 8016e6a:	085b      	lsrs	r3, r3, #1
 8016e6c:	b29b      	uxth	r3, r3
 8016e6e:	1ad3      	subs	r3, r2, r3
 8016e70:	b29b      	uxth	r3, r3
 8016e72:	b21a      	sxth	r2, r3
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	f8a3 2154 	strh.w	r2, [r3, #340]	@ 0x154
    label1Y = buttonY1 + buttonHeight - label1H;
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8016e80:	b29a      	uxth	r2, r3
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8016e88:	b29b      	uxth	r3, r3
 8016e8a:	4413      	add	r3, r2
 8016e8c:	b29a      	uxth	r2, r3
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	f8b3 315a 	ldrh.w	r3, [r3, #346]	@ 0x15a
 8016e94:	1ad3      	subs	r3, r2, r3
 8016e96:	b29b      	uxth	r3, r3
 8016e98:	b21a      	sxth	r2, r3
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	f8a3 2156 	strh.w	r2, [r3, #342]	@ 0x156
    canvas.setTextColor(BACKGROUND_COLOR);
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	336c      	adds	r3, #108	@ 0x6c
 8016ea4:	f64d 41ff 	movw	r1, #56575	@ 0xdcff
 8016ea8:	4618      	mov	r0, r3
 8016eaa:	f7ea face 	bl	800144a <_ZN12Adafruit_GFX12setTextColorEt>
    // Serial.println(label1X);
    // Serial.println(label1Y);
    canvas.setCursor(label1X, label1Y);
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	f9b3 1154 	ldrsh.w	r1, [r3, #340]	@ 0x154
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	@ 0x156
 8016ec0:	461a      	mov	r2, r3
 8016ec2:	f7ea faae 	bl	8001422 <_ZN12Adafruit_GFX9setCursorEss>
    canvas.print("Settings");
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	336c      	adds	r3, #108	@ 0x6c
 8016eca:	4947      	ldr	r1, [pc, #284]	@ (8016fe8 <_ZN6Screen11renderMeterEv+0x57c>)
 8016ecc:	4618      	mov	r0, r3
 8016ece:	f7ec fa28 	bl	8003322 <_ZN5Print5printEPKc>

    canvas.getTextBounds("Sleep", 0, 0, &label2X, &label2Y, &label2W, &label2H);
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8016ede:	687a      	ldr	r2, [r7, #4]
 8016ee0:	f502 72af 	add.w	r2, r2, #350	@ 0x15e
 8016ee4:	6879      	ldr	r1, [r7, #4]
 8016ee6:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8016eea:	6878      	ldr	r0, [r7, #4]
 8016eec:	f500 70b1 	add.w	r0, r0, #354	@ 0x162
 8016ef0:	9003      	str	r0, [sp, #12]
 8016ef2:	9102      	str	r1, [sp, #8]
 8016ef4:	9201      	str	r2, [sp, #4]
 8016ef6:	9300      	str	r3, [sp, #0]
 8016ef8:	2300      	movs	r3, #0
 8016efa:	2200      	movs	r2, #0
 8016efc:	493b      	ldr	r1, [pc, #236]	@ (8016fec <_ZN6Screen11renderMeterEv+0x580>)
 8016efe:	4620      	mov	r0, r4
 8016f00:	f7eb fd7d 	bl	80029fe <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>
    label2X = buttonX2 + buttonWidth / 2 - label2W / 2;
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 8016f0a:	b29a      	uxth	r2, r3
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8016f12:	0fd9      	lsrs	r1, r3, #31
 8016f14:	440b      	add	r3, r1
 8016f16:	105b      	asrs	r3, r3, #1
 8016f18:	b29b      	uxth	r3, r3
 8016f1a:	4413      	add	r3, r2
 8016f1c:	b29a      	uxth	r2, r3
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	f8b3 3160 	ldrh.w	r3, [r3, #352]	@ 0x160
 8016f24:	085b      	lsrs	r3, r3, #1
 8016f26:	b29b      	uxth	r3, r3
 8016f28:	1ad3      	subs	r3, r2, r3
 8016f2a:	b29b      	uxth	r3, r3
 8016f2c:	b21a      	sxth	r2, r3
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	f8a3 215c 	strh.w	r2, [r3, #348]	@ 0x15c
    label2Y = buttonY2 + buttonHeight - label2H;
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8016f3a:	b29a      	uxth	r2, r3
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8016f42:	b29b      	uxth	r3, r3
 8016f44:	4413      	add	r3, r2
 8016f46:	b29a      	uxth	r2, r3
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 8016f4e:	1ad3      	subs	r3, r2, r3
 8016f50:	b29b      	uxth	r3, r3
 8016f52:	b21a      	sxth	r2, r3
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	f8a3 215e 	strh.w	r2, [r3, #350]	@ 0x15e
    canvas.setTextColor(BACKGROUND_COLOR);
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	336c      	adds	r3, #108	@ 0x6c
 8016f5e:	f64d 41ff 	movw	r1, #56575	@ 0xdcff
 8016f62:	4618      	mov	r0, r3
 8016f64:	f7ea fa71 	bl	800144a <_ZN12Adafruit_GFX12setTextColorEt>
    // Serial.println(label2X);
    // Serial.println(label2Y);
    canvas.setCursor(label2X, label2Y);
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	f9b3 115c 	ldrsh.w	r1, [r3, #348]	@ 0x15c
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	f9b3 315e 	ldrsh.w	r3, [r3, #350]	@ 0x15e
 8016f7a:	461a      	mov	r2, r3
 8016f7c:	f7ea fa51 	bl	8001422 <_ZN12Adafruit_GFX9setCursorEss>
    canvas.print("Sleep");
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	336c      	adds	r3, #108	@ 0x6c
 8016f84:	4919      	ldr	r1, [pc, #100]	@ (8016fec <_ZN6Screen11renderMeterEv+0x580>)
 8016f86:	4618      	mov	r0, r3
 8016f88:	f7ec f9cb 	bl	8003322 <_ZN5Print5printEPKc>

    drawMeterLines(meterOriginX, meterOriginY, meterHeight - 40, -8, 8);
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	f8d3 10f8 	ldr.w	r1, [r3, #248]	@ 0xf8
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8016f9e:	3b28      	subs	r3, #40	@ 0x28
 8016fa0:	2008      	movs	r0, #8
 8016fa2:	9001      	str	r0, [sp, #4]
 8016fa4:	f06f 0007 	mvn.w	r0, #7
 8016fa8:	9000      	str	r0, [sp, #0]
 8016faa:	6878      	ldr	r0, [r7, #4]
 8016fac:	f000 f91c 	bl	80171e8 <_ZN6Screen14drawMeterLinesEiiiii>

    canvas.getTextBounds("DELTA T PROBE", 0, 0, &textOriginX, &textOriginY, &textWidth, &textHeight);
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8016fbc:	687a      	ldr	r2, [r7, #4]
 8016fbe:	f502 72b3 	add.w	r2, r2, #358	@ 0x166
 8016fc2:	6879      	ldr	r1, [r7, #4]
 8016fc4:	f501 71b4 	add.w	r1, r1, #360	@ 0x168
 8016fc8:	6878      	ldr	r0, [r7, #4]
 8016fca:	f500 70b5 	add.w	r0, r0, #362	@ 0x16a
 8016fce:	9003      	str	r0, [sp, #12]
 8016fd0:	9102      	str	r1, [sp, #8]
 8016fd2:	9201      	str	r2, [sp, #4]
 8016fd4:	9300      	str	r3, [sp, #0]
 8016fd6:	2300      	movs	r3, #0
 8016fd8:	2200      	movs	r2, #0
 8016fda:	e009      	b.n	8016ff0 <_ZN6Screen11renderMeterEv+0x584>
 8016fdc:	0801c3a8 	.word	0x0801c3a8
 8016fe0:	0801c3ac 	.word	0x0801c3ac
 8016fe4:	0801c3b0 	.word	0x0801c3b0
 8016fe8:	0801c3b4 	.word	0x0801c3b4
 8016fec:	0801c3c0 	.word	0x0801c3c0
 8016ff0:	4979      	ldr	r1, [pc, #484]	@ (80171d8 <_ZN6Screen11renderMeterEv+0x76c>)
 8016ff2:	4620      	mov	r0, r4
 8016ff4:	f7eb fd03 	bl	80029fe <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>
    textX = labelX + labelWidth / 2 - textWidth / 2;
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8017004:	0fd9      	lsrs	r1, r3, #31
 8017006:	440b      	add	r3, r1
 8017008:	105b      	asrs	r3, r3, #1
 801700a:	4413      	add	r3, r2
 801700c:	687a      	ldr	r2, [r7, #4]
 801700e:	f8b2 2168 	ldrh.w	r2, [r2, #360]	@ 0x168
 8017012:	0852      	lsrs	r2, r2, #1
 8017014:	b292      	uxth	r2, r2
 8017016:	1a9a      	subs	r2, r3, r2
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
    textY = labelY + textHeight + meterSpacer;
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8017024:	687a      	ldr	r2, [r7, #4]
 8017026:	f8b2 216a 	ldrh.w	r2, [r2, #362]	@ 0x16a
 801702a:	441a      	add	r2, r3
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8017032:	441a      	add	r2, r3
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
    canvas.setTextColor(TEXT_COLOR);
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	336c      	adds	r3, #108	@ 0x6c
 801703e:	f24a 3129 	movw	r1, #41769	@ 0xa329
 8017042:	4618      	mov	r0, r3
 8017044:	f7ea fa01 	bl	800144a <_ZN12Adafruit_GFX12setTextColorEt>

    canvas.setCursor(textX, textY);
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8017054:	b219      	sxth	r1, r3
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 801705c:	b21b      	sxth	r3, r3
 801705e:	461a      	mov	r2, r3
 8017060:	f7ea f9df 	bl	8001422 <_ZN12Adafruit_GFX9setCursorEss>
    canvas.print("DELTA T PROBE");
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	336c      	adds	r3, #108	@ 0x6c
 8017068:	495b      	ldr	r1, [pc, #364]	@ (80171d8 <_ZN6Screen11renderMeterEv+0x76c>)
 801706a:	4618      	mov	r0, r3
 801706c:	f7ec f959 	bl	8003322 <_ZN5Print5printEPKc>

    canvas.getTextBounds("The Instrument Company", 0, 0, &textOriginX, &textOriginY, &textWidth, &textHeight);
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801707c:	687a      	ldr	r2, [r7, #4]
 801707e:	f502 72b3 	add.w	r2, r2, #358	@ 0x166
 8017082:	6879      	ldr	r1, [r7, #4]
 8017084:	f501 71b4 	add.w	r1, r1, #360	@ 0x168
 8017088:	6878      	ldr	r0, [r7, #4]
 801708a:	f500 70b5 	add.w	r0, r0, #362	@ 0x16a
 801708e:	9003      	str	r0, [sp, #12]
 8017090:	9102      	str	r1, [sp, #8]
 8017092:	9201      	str	r2, [sp, #4]
 8017094:	9300      	str	r3, [sp, #0]
 8017096:	2300      	movs	r3, #0
 8017098:	2200      	movs	r2, #0
 801709a:	4950      	ldr	r1, [pc, #320]	@ (80171dc <_ZN6Screen11renderMeterEv+0x770>)
 801709c:	4620      	mov	r0, r4
 801709e:	f7eb fcae 	bl	80029fe <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>
    textX = labelX + labelWidth / 2 - textWidth / 2;
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80170ae:	0fd9      	lsrs	r1, r3, #31
 80170b0:	440b      	add	r3, r1
 80170b2:	105b      	asrs	r3, r3, #1
 80170b4:	4413      	add	r3, r2
 80170b6:	687a      	ldr	r2, [r7, #4]
 80170b8:	f8b2 2168 	ldrh.w	r2, [r2, #360]	@ 0x168
 80170bc:	0852      	lsrs	r2, r2, #1
 80170be:	b292      	uxth	r2, r2
 80170c0:	1a9a      	subs	r2, r3, r2
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
    textY = labelY + textHeight * 2 + meterSpacer;
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	f8b3 316a 	ldrh.w	r3, [r3, #362]	@ 0x16a
 80170d4:	005b      	lsls	r3, r3, #1
 80170d6:	441a      	add	r2, r3
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80170de:	441a      	add	r2, r3
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
    canvas.setTextColor(TEXT_COLOR);
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	336c      	adds	r3, #108	@ 0x6c
 80170ea:	f24a 3129 	movw	r1, #41769	@ 0xa329
 80170ee:	4618      	mov	r0, r3
 80170f0:	f7ea f9ab 	bl	800144a <_ZN12Adafruit_GFX12setTextColorEt>

    canvas.setCursor(textX, textY);
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8017100:	b219      	sxth	r1, r3
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8017108:	b21b      	sxth	r3, r3
 801710a:	461a      	mov	r2, r3
 801710c:	f7ea f989 	bl	8001422 <_ZN12Adafruit_GFX9setCursorEss>
    canvas.print("The Instrument Company");
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	336c      	adds	r3, #108	@ 0x6c
 8017114:	4931      	ldr	r1, [pc, #196]	@ (80171dc <_ZN6Screen11renderMeterEv+0x770>)
 8017116:	4618      	mov	r0, r3
 8017118:	f7ec f903 	bl	8003322 <_ZN5Print5printEPKc>

    canvas.getTextBounds("Dr. Ed Carr, Fort Collins, CO", 0, 0, &textOriginX, &textOriginY, &textWidth, &textHeight);
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8017128:	687a      	ldr	r2, [r7, #4]
 801712a:	f502 72b3 	add.w	r2, r2, #358	@ 0x166
 801712e:	6879      	ldr	r1, [r7, #4]
 8017130:	f501 71b4 	add.w	r1, r1, #360	@ 0x168
 8017134:	6878      	ldr	r0, [r7, #4]
 8017136:	f500 70b5 	add.w	r0, r0, #362	@ 0x16a
 801713a:	9003      	str	r0, [sp, #12]
 801713c:	9102      	str	r1, [sp, #8]
 801713e:	9201      	str	r2, [sp, #4]
 8017140:	9300      	str	r3, [sp, #0]
 8017142:	2300      	movs	r3, #0
 8017144:	2200      	movs	r2, #0
 8017146:	4926      	ldr	r1, [pc, #152]	@ (80171e0 <_ZN6Screen11renderMeterEv+0x774>)
 8017148:	4620      	mov	r0, r4
 801714a:	f7eb fc58 	bl	80029fe <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>
    textX = labelX + labelWidth / 2 - textWidth / 2;
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 801715a:	0fd9      	lsrs	r1, r3, #31
 801715c:	440b      	add	r3, r1
 801715e:	105b      	asrs	r3, r3, #1
 8017160:	4413      	add	r3, r2
 8017162:	687a      	ldr	r2, [r7, #4]
 8017164:	f8b2 2168 	ldrh.w	r2, [r2, #360]	@ 0x168
 8017168:	0852      	lsrs	r2, r2, #1
 801716a:	b292      	uxth	r2, r2
 801716c:	1a9a      	subs	r2, r3, r2
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
    textY = labelY + textHeight * 3 + meterSpacer * 2;
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	f8b3 316a 	ldrh.w	r3, [r3, #362]	@ 0x16a
 8017180:	4619      	mov	r1, r3
 8017182:	460b      	mov	r3, r1
 8017184:	005b      	lsls	r3, r3, #1
 8017186:	440b      	add	r3, r1
 8017188:	441a      	add	r2, r3
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8017190:	005b      	lsls	r3, r3, #1
 8017192:	441a      	add	r2, r3
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
    canvas.setTextColor(TEXT_COLOR);
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	336c      	adds	r3, #108	@ 0x6c
 801719e:	f24a 3129 	movw	r1, #41769	@ 0xa329
 80171a2:	4618      	mov	r0, r3
 80171a4:	f7ea f951 	bl	800144a <_ZN12Adafruit_GFX12setTextColorEt>

    canvas.setCursor(textX, textY);
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 80171b4:	b219      	sxth	r1, r3
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 80171bc:	b21b      	sxth	r3, r3
 80171be:	461a      	mov	r2, r3
 80171c0:	f7ea f92f 	bl	8001422 <_ZN12Adafruit_GFX9setCursorEss>
    canvas.print("Dr. Ed Carr, Fort Collins, CO");
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	336c      	adds	r3, #108	@ 0x6c
 80171c8:	4905      	ldr	r1, [pc, #20]	@ (80171e0 <_ZN6Screen11renderMeterEv+0x774>)
 80171ca:	4618      	mov	r0, r3
 80171cc:	f7ec f8a9 	bl	8003322 <_ZN5Print5printEPKc>
    //
    // canvas.getTextBounds("Fort Collins, CO", 0, 0, &textOriginX, &textOriginY, &fccotextWidth, &fccotextHeight);
    // canvas.setCursor(width / 2 - fccotextWidth / 2, screenOffset + statusHeight + meterHeight + dttextHeight + tictextHeight + fccotextHeight + screenOffset);
    // canvas.print("Fort Collins, CO");
    //
}
 80171d0:	bf00      	nop
 80171d2:	3714      	adds	r7, #20
 80171d4:	46bd      	mov	sp, r7
 80171d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80171d8:	0801c3c8 	.word	0x0801c3c8
 80171dc:	0801c3d8 	.word	0x0801c3d8
 80171e0:	0801c3f0 	.word	0x0801c3f0
 80171e4:	00000000 	.word	0x00000000

080171e8 <_ZN6Screen14drawMeterLinesEiiiii>:

void Screen::drawMeterLines(int centerX, int centerY, int radius, int lineStart, int lineEnd)
{ // points = 8 - - 8 = 16
 80171e8:	b5b0      	push	{r4, r5, r7, lr}
 80171ea:	ed2d 8b02 	vpush	{d8}
 80171ee:	b098      	sub	sp, #96	@ 0x60
 80171f0:	af04      	add	r7, sp, #16
 80171f2:	60f8      	str	r0, [r7, #12]
 80171f4:	60b9      	str	r1, [r7, #8]
 80171f6:	607a      	str	r2, [r7, #4]
 80171f8:	603b      	str	r3, [r7, #0]
    int points = lineEnd - lineStart;
 80171fa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80171fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80171fe:	1ad3      	subs	r3, r2, r3
 8017200:	647b      	str	r3, [r7, #68]	@ 0x44
    //[0 1 2 ... 17 18]
    canvas.fillCircle(centerX, centerY, 3, ST7789V_BLACK);
 8017202:	68fb      	ldr	r3, [r7, #12]
 8017204:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017208:	68bb      	ldr	r3, [r7, #8]
 801720a:	b219      	sxth	r1, r3
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	b21a      	sxth	r2, r3
 8017210:	2300      	movs	r3, #0
 8017212:	9300      	str	r3, [sp, #0]
 8017214:	2303      	movs	r3, #3
 8017216:	f7ea fc32 	bl	8001a7e <_ZN12Adafruit_GFX10fillCircleEssst>

    // Loop to draw the lines
    for (int i = lineStart; i <= lineEnd; i++)
 801721a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801721c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801721e:	e270      	b.n	8017702 <_ZN6Screen14drawMeterLinesEiiiii+0x51a>
    {
        // Calculate angle for the line
        // float angle = (i * (90.0 / points)) + 235 - 90 / points;
        // goes from -8 * 90/16 + 270 = 225, to 8 * 90/18 + 270 = 315
        float angle = (i * (90.0 / points)) + 270; // distribute over 90 deg and shift by 270
 8017220:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8017222:	f7e9 f957 	bl	80004d4 <__aeabi_i2d>
 8017226:	4604      	mov	r4, r0
 8017228:	460d      	mov	r5, r1
 801722a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801722c:	f7e9 f952 	bl	80004d4 <__aeabi_i2d>
 8017230:	4602      	mov	r2, r0
 8017232:	460b      	mov	r3, r1
 8017234:	f04f 0000 	mov.w	r0, #0
 8017238:	49bd      	ldr	r1, [pc, #756]	@ (8017530 <_ZN6Screen14drawMeterLinesEiiiii+0x348>)
 801723a:	f7e9 fadf 	bl	80007fc <__aeabi_ddiv>
 801723e:	4602      	mov	r2, r0
 8017240:	460b      	mov	r3, r1
 8017242:	4620      	mov	r0, r4
 8017244:	4629      	mov	r1, r5
 8017246:	f7e9 f9af 	bl	80005a8 <__aeabi_dmul>
 801724a:	4602      	mov	r2, r0
 801724c:	460b      	mov	r3, r1
 801724e:	4610      	mov	r0, r2
 8017250:	4619      	mov	r1, r3
 8017252:	a3b5      	add	r3, pc, #724	@ (adr r3, 8017528 <_ZN6Screen14drawMeterLinesEiiiii+0x340>)
 8017254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017258:	f7e8 fff0 	bl	800023c <__adddf3>
 801725c:	4602      	mov	r2, r0
 801725e:	460b      	mov	r3, r1
 8017260:	4610      	mov	r0, r2
 8017262:	4619      	mov	r1, r3
 8017264:	f7e9 fc78 	bl	8000b58 <__aeabi_d2f>
 8017268:	4603      	mov	r3, r0
 801726a:	643b      	str	r3, [r7, #64]	@ 0x40

        // Convert angle to radians
        float rad = radians(angle);
 801726c:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 8017270:	68f8      	ldr	r0, [r7, #12]
 8017272:	f000 faf9 	bl	8017868 <_ZN6Screen7radiansEf>
 8017276:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c

        // Calculate the endpoint of the line (on the circle's perimeter) // outer ring i think
        int xEnd = centerX + radius * cos(rad);
 801727a:	68bb      	ldr	r3, [r7, #8]
 801727c:	ee07 3a90 	vmov	s15, r3
 8017280:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8017284:	683b      	ldr	r3, [r7, #0]
 8017286:	ee07 3a90 	vmov	s15, r3
 801728a:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 801728e:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8017292:	f7ff fbcb 	bl	8016a2c <_ZSt3cosf>
 8017296:	eef0 7a40 	vmov.f32	s15, s0
 801729a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801729e:	ee78 7a27 	vadd.f32	s15, s16, s15
 80172a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80172a6:	ee17 3a90 	vmov	r3, s15
 80172aa:	63bb      	str	r3, [r7, #56]	@ 0x38
        int yEnd = centerY + radius * sin(rad);
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	ee07 3a90 	vmov	s15, r3
 80172b2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80172b6:	683b      	ldr	r3, [r7, #0]
 80172b8:	ee07 3a90 	vmov	s15, r3
 80172bc:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 80172c0:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 80172c4:	f7ff fbc2 	bl	8016a4c <_ZSt3sinf>
 80172c8:	eef0 7a40 	vmov.f32	s15, s0
 80172cc:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80172d0:	ee78 7a27 	vadd.f32	s15, s16, s15
 80172d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80172d8:	ee17 3a90 	vmov	r3, s15
 80172dc:	637b      	str	r3, [r7, #52]	@ 0x34

        // Calculate the endpoint of the line (on the circle's perimeter)
        int xStart = centerX + (radius - 20) * cos(rad);
 80172de:	68bb      	ldr	r3, [r7, #8]
 80172e0:	ee07 3a90 	vmov	s15, r3
 80172e4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80172e8:	683b      	ldr	r3, [r7, #0]
 80172ea:	3b14      	subs	r3, #20
 80172ec:	ee07 3a90 	vmov	s15, r3
 80172f0:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 80172f4:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 80172f8:	f7ff fb98 	bl	8016a2c <_ZSt3cosf>
 80172fc:	eef0 7a40 	vmov.f32	s15, s0
 8017300:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8017304:	ee78 7a27 	vadd.f32	s15, s16, s15
 8017308:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801730c:	ee17 3a90 	vmov	r3, s15
 8017310:	633b      	str	r3, [r7, #48]	@ 0x30
        int yStart = centerY + (radius - 20) * sin(rad);
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	ee07 3a90 	vmov	s15, r3
 8017318:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 801731c:	683b      	ldr	r3, [r7, #0]
 801731e:	3b14      	subs	r3, #20
 8017320:	ee07 3a90 	vmov	s15, r3
 8017324:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8017328:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 801732c:	f7ff fb8e 	bl	8016a4c <_ZSt3sinf>
 8017330:	eef0 7a40 	vmov.f32	s15, s0
 8017334:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8017338:	ee78 7a27 	vadd.f32	s15, s16, s15
 801733c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017340:	ee17 3a90 	vmov	r3, s15
 8017344:	62fb      	str	r3, [r7, #44]	@ 0x2c

        // Draw a normal line
        canvas.drawLine(xStart, yStart, xEnd, yEnd, ST7789V_BLACK);
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 801734c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801734e:	b219      	sxth	r1, r3
 8017350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017352:	b21a      	sxth	r2, r3
 8017354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017356:	b21c      	sxth	r4, r3
 8017358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801735a:	b21b      	sxth	r3, r3
 801735c:	2500      	movs	r5, #0
 801735e:	9501      	str	r5, [sp, #4]
 8017360:	9300      	str	r3, [sp, #0]
 8017362:	4623      	mov	r3, r4
 8017364:	f7ea fb0e 	bl	8001984 <_ZN12Adafruit_GFX8drawLineEsssst>

        if (i == lineStart)
 8017368:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801736a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801736c:	429a      	cmp	r2, r3
 801736e:	d122      	bne.n	80173b6 <_ZN6Screen14drawMeterLinesEiiiii+0x1ce>
        {

            canvas.setCursor(overallBorderX + meterSpacer, yEnd - 10);
 8017370:	68fb      	ldr	r3, [r7, #12]
 8017372:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017376:	68fb      	ldr	r3, [r7, #12]
 8017378:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801737c:	b29a      	uxth	r2, r3
 801737e:	68fb      	ldr	r3, [r7, #12]
 8017380:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8017384:	b29b      	uxth	r3, r3
 8017386:	4413      	add	r3, r2
 8017388:	b29b      	uxth	r3, r3
 801738a:	b219      	sxth	r1, r3
 801738c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801738e:	b29b      	uxth	r3, r3
 8017390:	3b0a      	subs	r3, #10
 8017392:	b29b      	uxth	r3, r3
 8017394:	b21b      	sxth	r3, r3
 8017396:	461a      	mov	r2, r3
 8017398:	f7ea f843 	bl	8001422 <_ZN12Adafruit_GFX9setCursorEss>
            canvas.setTextColor(TEXT_COLOR);
 801739c:	68fb      	ldr	r3, [r7, #12]
 801739e:	336c      	adds	r3, #108	@ 0x6c
 80173a0:	f24a 3129 	movw	r1, #41769	@ 0xa329
 80173a4:	4618      	mov	r0, r3
 80173a6:	f7ea f850 	bl	800144a <_ZN12Adafruit_GFX12setTextColorEt>
            canvas.print("25");
 80173aa:	68fb      	ldr	r3, [r7, #12]
 80173ac:	336c      	adds	r3, #108	@ 0x6c
 80173ae:	4961      	ldr	r1, [pc, #388]	@ (8017534 <_ZN6Screen14drawMeterLinesEiiiii+0x34c>)
 80173b0:	4618      	mov	r0, r3
 80173b2:	f7eb ffb6 	bl	8003322 <_ZN5Print5printEPKc>
        }

        if (i == -3)
 80173b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80173b8:	f113 0f03 	cmn.w	r3, #3
 80173bc:	d151      	bne.n	8017462 <_ZN6Screen14drawMeterLinesEiiiii+0x27a>
        {
            canvas.setTextColor(TEXT_COLOR);
 80173be:	68fb      	ldr	r3, [r7, #12]
 80173c0:	336c      	adds	r3, #108	@ 0x6c
 80173c2:	f24a 3129 	movw	r1, #41769	@ 0xa329
 80173c6:	4618      	mov	r0, r3
 80173c8:	f7ea f83f 	bl	800144a <_ZN12Adafruit_GFX12setTextColorEt>

            canvas.setCursor(xEnd, yEnd - 20);
 80173cc:	68fb      	ldr	r3, [r7, #12]
 80173ce:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 80173d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173d4:	b219      	sxth	r1, r3
 80173d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80173d8:	b29b      	uxth	r3, r3
 80173da:	3b14      	subs	r3, #20
 80173dc:	b29b      	uxth	r3, r3
 80173de:	b21b      	sxth	r3, r3
 80173e0:	461a      	mov	r2, r3
 80173e2:	f7ea f81e 	bl	8001422 <_ZN12Adafruit_GFX9setCursorEss>

            canvas.print("LO");
 80173e6:	68fb      	ldr	r3, [r7, #12]
 80173e8:	336c      	adds	r3, #108	@ 0x6c
 80173ea:	4953      	ldr	r1, [pc, #332]	@ (8017538 <_ZN6Screen14drawMeterLinesEiiiii+0x350>)
 80173ec:	4618      	mov	r0, r3
 80173ee:	f7eb ff98 	bl	8003322 <_ZN5Print5printEPKc>

            canvas.getTextBounds("HI", 0, 0, &textOriginX, &textOriginY, &textWidth, &textHeight);
 80173f2:	68fb      	ldr	r3, [r7, #12]
 80173f4:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80173fe:	68fa      	ldr	r2, [r7, #12]
 8017400:	f502 72b3 	add.w	r2, r2, #358	@ 0x166
 8017404:	68f9      	ldr	r1, [r7, #12]
 8017406:	f501 71b4 	add.w	r1, r1, #360	@ 0x168
 801740a:	68f8      	ldr	r0, [r7, #12]
 801740c:	f500 70b5 	add.w	r0, r0, #362	@ 0x16a
 8017410:	9003      	str	r0, [sp, #12]
 8017412:	9102      	str	r1, [sp, #8]
 8017414:	9201      	str	r2, [sp, #4]
 8017416:	9300      	str	r3, [sp, #0]
 8017418:	2300      	movs	r3, #0
 801741a:	2200      	movs	r2, #0
 801741c:	4947      	ldr	r1, [pc, #284]	@ (801753c <_ZN6Screen14drawMeterLinesEiiiii+0x354>)
 801741e:	4620      	mov	r0, r4
 8017420:	f7eb faed 	bl	80029fe <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>

            canvas.setCursor(overallBorderWidth - xEnd - textWidth, yEnd - 20);
 8017424:	68fb      	ldr	r3, [r7, #12]
 8017426:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8017430:	b29a      	uxth	r2, r3
 8017432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017434:	b29b      	uxth	r3, r3
 8017436:	1ad3      	subs	r3, r2, r3
 8017438:	b29a      	uxth	r2, r3
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	f8b3 3168 	ldrh.w	r3, [r3, #360]	@ 0x168
 8017440:	1ad3      	subs	r3, r2, r3
 8017442:	b29b      	uxth	r3, r3
 8017444:	b219      	sxth	r1, r3
 8017446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017448:	b29b      	uxth	r3, r3
 801744a:	3b14      	subs	r3, #20
 801744c:	b29b      	uxth	r3, r3
 801744e:	b21b      	sxth	r3, r3
 8017450:	461a      	mov	r2, r3
 8017452:	f7e9 ffe6 	bl	8001422 <_ZN12Adafruit_GFX9setCursorEss>

            canvas.print("HI");
 8017456:	68fb      	ldr	r3, [r7, #12]
 8017458:	336c      	adds	r3, #108	@ 0x6c
 801745a:	4938      	ldr	r1, [pc, #224]	@ (801753c <_ZN6Screen14drawMeterLinesEiiiii+0x354>)
 801745c:	4618      	mov	r0, r3
 801745e:	f7eb ff60 	bl	8003322 <_ZN5Print5printEPKc>
        }

        if (i == 0)
 8017462:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017464:	2b00      	cmp	r3, #0
 8017466:	d13a      	bne.n	80174de <_ZN6Screen14drawMeterLinesEiiiii+0x2f6>
        {
            canvas.getTextBounds("0", 0, 0, &textOriginX, &textOriginY, &textWidth, &textHeight);
 8017468:	68fb      	ldr	r3, [r7, #12]
 801746a:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 801746e:	68fb      	ldr	r3, [r7, #12]
 8017470:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8017474:	68fa      	ldr	r2, [r7, #12]
 8017476:	f502 72b3 	add.w	r2, r2, #358	@ 0x166
 801747a:	68f9      	ldr	r1, [r7, #12]
 801747c:	f501 71b4 	add.w	r1, r1, #360	@ 0x168
 8017480:	68f8      	ldr	r0, [r7, #12]
 8017482:	f500 70b5 	add.w	r0, r0, #362	@ 0x16a
 8017486:	9003      	str	r0, [sp, #12]
 8017488:	9102      	str	r1, [sp, #8]
 801748a:	9201      	str	r2, [sp, #4]
 801748c:	9300      	str	r3, [sp, #0]
 801748e:	2300      	movs	r3, #0
 8017490:	2200      	movs	r2, #0
 8017492:	492b      	ldr	r1, [pc, #172]	@ (8017540 <_ZN6Screen14drawMeterLinesEiiiii+0x358>)
 8017494:	4620      	mov	r0, r4
 8017496:	f7eb fab2 	bl	80029fe <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>

            canvas.setCursor(xEnd - textWidth / 2, yEnd - 5);
 801749a:	68fb      	ldr	r3, [r7, #12]
 801749c:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 80174a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80174a2:	b29a      	uxth	r2, r3
 80174a4:	68fb      	ldr	r3, [r7, #12]
 80174a6:	f8b3 3168 	ldrh.w	r3, [r3, #360]	@ 0x168
 80174aa:	085b      	lsrs	r3, r3, #1
 80174ac:	b29b      	uxth	r3, r3
 80174ae:	1ad3      	subs	r3, r2, r3
 80174b0:	b29b      	uxth	r3, r3
 80174b2:	b219      	sxth	r1, r3
 80174b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80174b6:	b29b      	uxth	r3, r3
 80174b8:	3b05      	subs	r3, #5
 80174ba:	b29b      	uxth	r3, r3
 80174bc:	b21b      	sxth	r3, r3
 80174be:	461a      	mov	r2, r3
 80174c0:	f7e9 ffaf 	bl	8001422 <_ZN12Adafruit_GFX9setCursorEss>
            canvas.setTextColor(TEXT_COLOR);
 80174c4:	68fb      	ldr	r3, [r7, #12]
 80174c6:	336c      	adds	r3, #108	@ 0x6c
 80174c8:	f24a 3129 	movw	r1, #41769	@ 0xa329
 80174cc:	4618      	mov	r0, r3
 80174ce:	f7e9 ffbc 	bl	800144a <_ZN12Adafruit_GFX12setTextColorEt>

            canvas.print("0");
 80174d2:	68fb      	ldr	r3, [r7, #12]
 80174d4:	336c      	adds	r3, #108	@ 0x6c
 80174d6:	491a      	ldr	r1, [pc, #104]	@ (8017540 <_ZN6Screen14drawMeterLinesEiiiii+0x358>)
 80174d8:	4618      	mov	r0, r3
 80174da:	f7eb ff22 	bl	8003322 <_ZN5Print5printEPKc>
        }

        if (i == lineEnd)
 80174de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80174e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80174e2:	429a      	cmp	r2, r3
 80174e4:	d150      	bne.n	8017588 <_ZN6Screen14drawMeterLinesEiiiii+0x3a0>
        {
            canvas.getTextBounds("25", 0, 0, &textOriginX, &textOriginY, &textWidth, &textHeight);
 80174e6:	68fb      	ldr	r3, [r7, #12]
 80174e8:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 80174ec:	68fb      	ldr	r3, [r7, #12]
 80174ee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80174f2:	68fa      	ldr	r2, [r7, #12]
 80174f4:	f502 72b3 	add.w	r2, r2, #358	@ 0x166
 80174f8:	68f9      	ldr	r1, [r7, #12]
 80174fa:	f501 71b4 	add.w	r1, r1, #360	@ 0x168
 80174fe:	68f8      	ldr	r0, [r7, #12]
 8017500:	f500 70b5 	add.w	r0, r0, #362	@ 0x16a
 8017504:	9003      	str	r0, [sp, #12]
 8017506:	9102      	str	r1, [sp, #8]
 8017508:	9201      	str	r2, [sp, #4]
 801750a:	9300      	str	r3, [sp, #0]
 801750c:	2300      	movs	r3, #0
 801750e:	2200      	movs	r2, #0
 8017510:	4908      	ldr	r1, [pc, #32]	@ (8017534 <_ZN6Screen14drawMeterLinesEiiiii+0x34c>)
 8017512:	4620      	mov	r0, r4
 8017514:	f7eb fa73 	bl	80029fe <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>

            canvas.setCursor(overallBorderWidth - textWidth - meterSpacer, yEnd - 10);
 8017518:	68fb      	ldr	r3, [r7, #12]
 801751a:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 801751e:	68fb      	ldr	r3, [r7, #12]
 8017520:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8017524:	e00e      	b.n	8017544 <_ZN6Screen14drawMeterLinesEiiiii+0x35c>
 8017526:	bf00      	nop
 8017528:	00000000 	.word	0x00000000
 801752c:	4070e000 	.word	0x4070e000
 8017530:	40568000 	.word	0x40568000
 8017534:	0801c410 	.word	0x0801c410
 8017538:	0801c414 	.word	0x0801c414
 801753c:	0801c418 	.word	0x0801c418
 8017540:	0801c41c 	.word	0x0801c41c
 8017544:	b29a      	uxth	r2, r3
 8017546:	68fb      	ldr	r3, [r7, #12]
 8017548:	f8b3 3168 	ldrh.w	r3, [r3, #360]	@ 0x168
 801754c:	1ad3      	subs	r3, r2, r3
 801754e:	b29a      	uxth	r2, r3
 8017550:	68fb      	ldr	r3, [r7, #12]
 8017552:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8017556:	b29b      	uxth	r3, r3
 8017558:	1ad3      	subs	r3, r2, r3
 801755a:	b29b      	uxth	r3, r3
 801755c:	b219      	sxth	r1, r3
 801755e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017560:	b29b      	uxth	r3, r3
 8017562:	3b0a      	subs	r3, #10
 8017564:	b29b      	uxth	r3, r3
 8017566:	b21b      	sxth	r3, r3
 8017568:	461a      	mov	r2, r3
 801756a:	f7e9 ff5a 	bl	8001422 <_ZN12Adafruit_GFX9setCursorEss>
            canvas.setTextColor(TEXT_COLOR);
 801756e:	68fb      	ldr	r3, [r7, #12]
 8017570:	336c      	adds	r3, #108	@ 0x6c
 8017572:	f24a 3129 	movw	r1, #41769	@ 0xa329
 8017576:	4618      	mov	r0, r3
 8017578:	f7e9 ff67 	bl	800144a <_ZN12Adafruit_GFX12setTextColorEt>
            canvas.print("25");
 801757c:	68fb      	ldr	r3, [r7, #12]
 801757e:	336c      	adds	r3, #108	@ 0x6c
 8017580:	4969      	ldr	r1, [pc, #420]	@ (8017728 <_ZN6Screen14drawMeterLinesEiiiii+0x540>)
 8017582:	4618      	mov	r0, r3
 8017584:	f7eb fecd 	bl	8003322 <_ZN5Print5printEPKc>
        }

        // draw all the little tick marks
        for (int i = lineStart * 4; i <= lineEnd * 4; i++)
 8017588:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801758a:	009b      	lsls	r3, r3, #2
 801758c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801758e:	e0af      	b.n	80176f0 <_ZN6Screen14drawMeterLinesEiiiii+0x508>
        {
            float angle = (i * 0.25 * (90.0 / points)) + 270; // distribute over 90 deg and shift by 270
 8017590:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8017592:	f7e8 ff9f 	bl	80004d4 <__aeabi_i2d>
 8017596:	f04f 0200 	mov.w	r2, #0
 801759a:	4b64      	ldr	r3, [pc, #400]	@ (801772c <_ZN6Screen14drawMeterLinesEiiiii+0x544>)
 801759c:	f7e9 f804 	bl	80005a8 <__aeabi_dmul>
 80175a0:	4602      	mov	r2, r0
 80175a2:	460b      	mov	r3, r1
 80175a4:	4614      	mov	r4, r2
 80175a6:	461d      	mov	r5, r3
 80175a8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80175aa:	f7e8 ff93 	bl	80004d4 <__aeabi_i2d>
 80175ae:	4602      	mov	r2, r0
 80175b0:	460b      	mov	r3, r1
 80175b2:	f04f 0000 	mov.w	r0, #0
 80175b6:	495e      	ldr	r1, [pc, #376]	@ (8017730 <_ZN6Screen14drawMeterLinesEiiiii+0x548>)
 80175b8:	f7e9 f920 	bl	80007fc <__aeabi_ddiv>
 80175bc:	4602      	mov	r2, r0
 80175be:	460b      	mov	r3, r1
 80175c0:	4620      	mov	r0, r4
 80175c2:	4629      	mov	r1, r5
 80175c4:	f7e8 fff0 	bl	80005a8 <__aeabi_dmul>
 80175c8:	4602      	mov	r2, r0
 80175ca:	460b      	mov	r3, r1
 80175cc:	4610      	mov	r0, r2
 80175ce:	4619      	mov	r1, r3
 80175d0:	a353      	add	r3, pc, #332	@ (adr r3, 8017720 <_ZN6Screen14drawMeterLinesEiiiii+0x538>)
 80175d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175d6:	f7e8 fe31 	bl	800023c <__adddf3>
 80175da:	4602      	mov	r2, r0
 80175dc:	460b      	mov	r3, r1
 80175de:	4610      	mov	r0, r2
 80175e0:	4619      	mov	r1, r3
 80175e2:	f7e9 fab9 	bl	8000b58 <__aeabi_d2f>
 80175e6:	4603      	mov	r3, r0
 80175e8:	62bb      	str	r3, [r7, #40]	@ 0x28

            // Convert angle to radians
            float rad = radians(angle);
 80175ea:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 80175ee:	68f8      	ldr	r0, [r7, #12]
 80175f0:	f000 f93a 	bl	8017868 <_ZN6Screen7radiansEf>
 80175f4:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

            // Calculate the endpoint of the line (on the circle's perimeter) // outer ring i think
            int xEnd = centerX + (radius - 10) * cos(rad);
 80175f8:	68bb      	ldr	r3, [r7, #8]
 80175fa:	ee07 3a90 	vmov	s15, r3
 80175fe:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8017602:	683b      	ldr	r3, [r7, #0]
 8017604:	3b0a      	subs	r3, #10
 8017606:	ee07 3a90 	vmov	s15, r3
 801760a:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 801760e:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8017612:	f7ff fa0b 	bl	8016a2c <_ZSt3cosf>
 8017616:	eef0 7a40 	vmov.f32	s15, s0
 801761a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801761e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8017622:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017626:	ee17 3a90 	vmov	r3, s15
 801762a:	623b      	str	r3, [r7, #32]
            int yEnd = centerY + (radius - 10) * sin(rad);
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	ee07 3a90 	vmov	s15, r3
 8017632:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8017636:	683b      	ldr	r3, [r7, #0]
 8017638:	3b0a      	subs	r3, #10
 801763a:	ee07 3a90 	vmov	s15, r3
 801763e:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8017642:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8017646:	f7ff fa01 	bl	8016a4c <_ZSt3sinf>
 801764a:	eef0 7a40 	vmov.f32	s15, s0
 801764e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8017652:	ee78 7a27 	vadd.f32	s15, s16, s15
 8017656:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801765a:	ee17 3a90 	vmov	r3, s15
 801765e:	61fb      	str	r3, [r7, #28]

            // Calculate the endpoint of the line (on the circle's perimeter)
            int xStart = centerX + (radius - 20) * cos(rad);
 8017660:	68bb      	ldr	r3, [r7, #8]
 8017662:	ee07 3a90 	vmov	s15, r3
 8017666:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 801766a:	683b      	ldr	r3, [r7, #0]
 801766c:	3b14      	subs	r3, #20
 801766e:	ee07 3a90 	vmov	s15, r3
 8017672:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8017676:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 801767a:	f7ff f9d7 	bl	8016a2c <_ZSt3cosf>
 801767e:	eef0 7a40 	vmov.f32	s15, s0
 8017682:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8017686:	ee78 7a27 	vadd.f32	s15, s16, s15
 801768a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801768e:	ee17 3a90 	vmov	r3, s15
 8017692:	61bb      	str	r3, [r7, #24]
            int yStart = centerY + (radius - 20) * sin(rad);
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	ee07 3a90 	vmov	s15, r3
 801769a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 801769e:	683b      	ldr	r3, [r7, #0]
 80176a0:	3b14      	subs	r3, #20
 80176a2:	ee07 3a90 	vmov	s15, r3
 80176a6:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 80176aa:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80176ae:	f7ff f9cd 	bl	8016a4c <_ZSt3sinf>
 80176b2:	eef0 7a40 	vmov.f32	s15, s0
 80176b6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80176ba:	ee78 7a27 	vadd.f32	s15, s16, s15
 80176be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80176c2:	ee17 3a90 	vmov	r3, s15
 80176c6:	617b      	str	r3, [r7, #20]

            // Draw a normal line
            canvas.drawLine(xStart, yStart, xEnd, yEnd, ST7789V_BLACK);
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 80176ce:	69bb      	ldr	r3, [r7, #24]
 80176d0:	b219      	sxth	r1, r3
 80176d2:	697b      	ldr	r3, [r7, #20]
 80176d4:	b21a      	sxth	r2, r3
 80176d6:	6a3b      	ldr	r3, [r7, #32]
 80176d8:	b21c      	sxth	r4, r3
 80176da:	69fb      	ldr	r3, [r7, #28]
 80176dc:	b21b      	sxth	r3, r3
 80176de:	2500      	movs	r5, #0
 80176e0:	9501      	str	r5, [sp, #4]
 80176e2:	9300      	str	r3, [sp, #0]
 80176e4:	4623      	mov	r3, r4
 80176e6:	f7ea f94d 	bl	8001984 <_ZN12Adafruit_GFX8drawLineEsssst>
        for (int i = lineStart * 4; i <= lineEnd * 4; i++)
 80176ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80176ec:	3301      	adds	r3, #1
 80176ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80176f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80176f2:	009b      	lsls	r3, r3, #2
 80176f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80176f6:	429a      	cmp	r2, r3
 80176f8:	f77f af4a 	ble.w	8017590 <_ZN6Screen14drawMeterLinesEiiiii+0x3a8>
    for (int i = lineStart; i <= lineEnd; i++)
 80176fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80176fe:	3301      	adds	r3, #1
 8017700:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017702:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017704:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017706:	429a      	cmp	r2, r3
 8017708:	f77f ad8a 	ble.w	8017220 <_ZN6Screen14drawMeterLinesEiiiii+0x38>
        }
    }
}
 801770c:	bf00      	nop
 801770e:	bf00      	nop
 8017710:	3750      	adds	r7, #80	@ 0x50
 8017712:	46bd      	mov	sp, r7
 8017714:	ecbd 8b02 	vpop	{d8}
 8017718:	bdb0      	pop	{r4, r5, r7, pc}
 801771a:	bf00      	nop
 801771c:	f3af 8000 	nop.w
 8017720:	00000000 	.word	0x00000000
 8017724:	4070e000 	.word	0x4070e000
 8017728:	0801c410 	.word	0x0801c410
 801772c:	3fd00000 	.word	0x3fd00000
 8017730:	40568000 	.word	0x40568000

08017734 <_ZN12Adafruit_GFX11setTextWrapEb>:
  @brief  Set whether text that is too long for the screen width should
          automatically wrap around to the next line (else clip right).
  @param  w  true for wrapping, false for clipping
  */
  /**********************************************************************/
  void setTextWrap(bool w) { wrap = w; }
 8017734:	b480      	push	{r7}
 8017736:	b083      	sub	sp, #12
 8017738:	af00      	add	r7, sp, #0
 801773a:	6078      	str	r0, [r7, #4]
 801773c:	460b      	mov	r3, r1
 801773e:	70fb      	strb	r3, [r7, #3]
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	78fa      	ldrb	r2, [r7, #3]
 8017744:	76da      	strb	r2, [r3, #27]
 8017746:	bf00      	nop
 8017748:	370c      	adds	r7, #12
 801774a:	46bd      	mov	sp, r7
 801774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017750:	4770      	bx	lr

08017752 <_ZNK11GFXcanvas169getBufferEv>:
  /*!
    @brief    Get a pointer to the internal buffer memory
    @returns  A pointer to the allocated buffer
  */
  /**********************************************************************/
  uint16_t *getBuffer(void) const { return buffer; }
 8017752:	b480      	push	{r7}
 8017754:	b083      	sub	sp, #12
 8017756:	af00      	add	r7, sp, #0
 8017758:	6078      	str	r0, [r7, #4]
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801775e:	4618      	mov	r0, r3
 8017760:	370c      	adds	r7, #12
 8017762:	46bd      	mov	sp, r7
 8017764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017768:	4770      	bx	lr
	...

0801776c <_ZN6Screen5setupEv>:
#include "Screen.hpp"

void Screen::setup(void)
{
 801776c:	b5b0      	push	{r4, r5, r7, lr}
 801776e:	b084      	sub	sp, #16
 8017770:	af02      	add	r7, sp, #8
 8017772:	6078      	str	r0, [r7, #4]

    needleBuffer[32] = {0};
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	2200      	movs	r2, #0
 8017778:	f883 2239 	strb.w	r2, [r3, #569]	@ 0x239

    // SPI_Set_Mode(0);

    totalPixels = canvas.width() * canvas.height();
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	336c      	adds	r3, #108	@ 0x6c
 8017780:	4618      	mov	r0, r3
 8017782:	f7e9 fe75 	bl	8001470 <_ZNK12Adafruit_GFX5widthEv>
 8017786:	4603      	mov	r3, r0
 8017788:	461c      	mov	r4, r3
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	336c      	adds	r3, #108	@ 0x6c
 801778e:	4618      	mov	r0, r3
 8017790:	f7e9 fe7b 	bl	800148a <_ZNK12Adafruit_GFX6heightEv>
 8017794:	4603      	mov	r3, r0
 8017796:	fb04 f303 	mul.w	r3, r4, r3
 801779a:	461a      	mov	r2, r3
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	669a      	str	r2, [r3, #104]	@ 0x68

    tft.begin();
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	4618      	mov	r0, r3
 80177a4:	f7eb fe0c 	bl	80033c0 <_ZN13ST7789V_STM325beginEv>
    tft.setRotation(2); // places the screen connector further away from the probe tubes
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	2102      	movs	r1, #2
 80177ac:	4618      	mov	r0, r3
 80177ae:	f7ec f967 	bl	8003a80 <_ZN13ST7789V_STM3211setRotationEh>
    tft.setFont(&FreeSans9pt7b);
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	491a      	ldr	r1, [pc, #104]	@ (8017820 <_ZN6Screen5setupEv+0xb4>)
 80177b6:	4618      	mov	r0, r3
 80177b8:	f7ea ff54 	bl	8002664 <_ZN12Adafruit_GFX7setFontEPK7GFXfont>
    tft.setTextWrap(true);
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	2101      	movs	r1, #1
 80177c0:	4618      	mov	r0, r3
 80177c2:	f7ff ffb7 	bl	8017734 <_ZN12Adafruit_GFX11setTextWrapEb>
    tft.setTextSize(1);
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	2101      	movs	r1, #1
 80177ca:	4618      	mov	r0, r3
 80177cc:	f7ea fee3 	bl	8002596 <_ZN12Adafruit_GFX11setTextSizeEh>
    tft.setWindow(0, 0, canvas.width() - 1, canvas.height() - 1);
 80177d0:	687c      	ldr	r4, [r7, #4]
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	336c      	adds	r3, #108	@ 0x6c
 80177d6:	4618      	mov	r0, r3
 80177d8:	f7e9 fe4a 	bl	8001470 <_ZNK12Adafruit_GFX5widthEv>
 80177dc:	4603      	mov	r3, r0
 80177de:	b29b      	uxth	r3, r3
 80177e0:	3b01      	subs	r3, #1
 80177e2:	b29d      	uxth	r5, r3
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	336c      	adds	r3, #108	@ 0x6c
 80177e8:	4618      	mov	r0, r3
 80177ea:	f7e9 fe4e 	bl	800148a <_ZNK12Adafruit_GFX6heightEv>
 80177ee:	4603      	mov	r3, r0
 80177f0:	b29b      	uxth	r3, r3
 80177f2:	3b01      	subs	r3, #1
 80177f4:	b29b      	uxth	r3, r3
 80177f6:	9300      	str	r3, [sp, #0]
 80177f8:	462b      	mov	r3, r5
 80177fa:	2200      	movs	r2, #0
 80177fc:	2100      	movs	r1, #0
 80177fe:	4620      	mov	r0, r4
 8017800:	f7ec fa1d 	bl	8003c3e <_ZN13ST7789V_STM329setWindowEtttt>

    // initial state: meter
    page = METER;
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	2200      	movs	r2, #0
 8017808:	f883 2239 	strb.w	r2, [r3, #569]	@ 0x239
    renderMeter();
 801780c:	6878      	ldr	r0, [r7, #4]
 801780e:	f7ff f92d 	bl	8016a6c <_ZN6Screen11renderMeterEv>
    // canvas.byteSwap();

    writeCanvas();
 8017812:	6878      	ldr	r0, [r7, #4]
 8017814:	f000 f811 	bl	801783a <_ZN6Screen11writeCanvasEv>
    // renderMeter(canvas);

    // fadeIn();
}
 8017818:	bf00      	nop
 801781a:	3708      	adds	r7, #8
 801781c:	46bd      	mov	sp, r7
 801781e:	bdb0      	pop	{r4, r5, r7, pc}
 8017820:	0801d434 	.word	0x0801d434

08017824 <_ZN6Screen12stateMachineEv>:

void Screen::stateMachine(void)

{
 8017824:	b580      	push	{r7, lr}
 8017826:	b082      	sub	sp, #8
 8017828:	af00      	add	r7, sp, #0
 801782a:	6078      	str	r0, [r7, #4]

    // switch (page)
    // {
    // case METER:
    //
    updateMeter();
 801782c:	6878      	ldr	r0, [r7, #4]
 801782e:	f000 f849 	bl	80178c4 <_ZN6Screen11updateMeterEv>
    //     break;
    //
    // default:
    //     break;
    // }
}
 8017832:	bf00      	nop
 8017834:	3708      	adds	r7, #8
 8017836:	46bd      	mov	sp, r7
 8017838:	bd80      	pop	{r7, pc}

0801783a <_ZN6Screen11writeCanvasEv>:

void Screen::writeCanvas(void)
{
 801783a:	b580      	push	{r7, lr}
 801783c:	b084      	sub	sp, #16
 801783e:	af00      	add	r7, sp, #0
 8017840:	6078      	str	r0, [r7, #4]

    // SPI_Set_Mode(0);
    uint16_t *buffer = canvas.getBuffer();
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	336c      	adds	r3, #108	@ 0x6c
 8017846:	4618      	mov	r0, r3
 8017848:	f7ff ff83 	bl	8017752 <_ZNK11GFXcanvas169getBufferEv>
 801784c:	60f8      	str	r0, [r7, #12]
    //tft.startWrite();
    //tft.writeBuffer(buffer, totalPixels);
    // tft.writeBufferDMA(buffer, totalPixels);
    tft.writeBufferDMA(buffer, totalPixels);
 801784e:	6878      	ldr	r0, [r7, #4]
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017854:	461a      	mov	r2, r3
 8017856:	68f9      	ldr	r1, [r7, #12]
 8017858:	f7ec fad9 	bl	8003e0e <_ZN13ST7789V_STM3214writeBufferDMAEPtm>
    //tft.endWrite();
    // SPI_Set_Mode(1);
}
 801785c:	bf00      	nop
 801785e:	3710      	adds	r7, #16
 8017860:	46bd      	mov	sp, r7
 8017862:	bd80      	pop	{r7, pc}
 8017864:	0000      	movs	r0, r0
	...

08017868 <_ZN6Screen7radiansEf>:
//     tft.endWrite();
//     SPI_Set_Mode(1);
// }

float Screen::radians(float degrees)
{
 8017868:	b580      	push	{r7, lr}
 801786a:	b082      	sub	sp, #8
 801786c:	af00      	add	r7, sp, #0
 801786e:	6078      	str	r0, [r7, #4]
 8017870:	ed87 0a00 	vstr	s0, [r7]
    return degrees * M_PI / 180.0f;
 8017874:	6838      	ldr	r0, [r7, #0]
 8017876:	f7e8 fe3f 	bl	80004f8 <__aeabi_f2d>
 801787a:	a310      	add	r3, pc, #64	@ (adr r3, 80178bc <_ZN6Screen7radiansEf+0x54>)
 801787c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017880:	f7e8 fe92 	bl	80005a8 <__aeabi_dmul>
 8017884:	4602      	mov	r2, r0
 8017886:	460b      	mov	r3, r1
 8017888:	4610      	mov	r0, r2
 801788a:	4619      	mov	r1, r3
 801788c:	f04f 0200 	mov.w	r2, #0
 8017890:	4b09      	ldr	r3, [pc, #36]	@ (80178b8 <_ZN6Screen7radiansEf+0x50>)
 8017892:	f7e8 ffb3 	bl	80007fc <__aeabi_ddiv>
 8017896:	4602      	mov	r2, r0
 8017898:	460b      	mov	r3, r1
 801789a:	4610      	mov	r0, r2
 801789c:	4619      	mov	r1, r3
 801789e:	f7e9 f95b 	bl	8000b58 <__aeabi_d2f>
 80178a2:	4603      	mov	r3, r0
 80178a4:	ee07 3a90 	vmov	s15, r3
}
 80178a8:	eeb0 0a67 	vmov.f32	s0, s15
 80178ac:	3708      	adds	r7, #8
 80178ae:	46bd      	mov	sp, r7
 80178b0:	bd80      	pop	{r7, pc}
 80178b2:	bf00      	nop
 80178b4:	f3af 8000 	nop.w
 80178b8:	40668000 	.word	0x40668000
 80178bc:	54442d18 	.word	0x54442d18
 80178c0:	400921fb 	.word	0x400921fb

080178c4 <_ZN6Screen11updateMeterEv>:
#include "Screen.hpp"
#include "BatteryMonitor.hpp"
#include "Thermocouples.hpp"
#include <stdlib.h>
void Screen::updateMeter(void)
{
 80178c4:	b5b0      	push	{r4, r5, r7, lr}
 80178c6:	ed2d 8b02 	vpush	{d8}
 80178ca:	b084      	sub	sp, #16
 80178cc:	af02      	add	r7, sp, #8
 80178ce:	6078      	str	r0, [r7, #4]
    //
    // //{
    // //  Serial.println(Thermocouples::deltaTemp);
    // //  Serial.println();

    needleAngle = Thermocouples::deltaTemp - 90.0;
 80178d0:	4ba8      	ldr	r3, [pc, #672]	@ (8017b74 <_ZN6Screen11updateMeterEv+0x2b0>)
 80178d2:	edd3 7a00 	vldr	s15, [r3]
 80178d6:	ed9f 7aa8 	vldr	s14, [pc, #672]	@ 8017b78 <_ZN6Screen11updateMeterEv+0x2b4>
 80178da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	edc3 7a4a 	vstr	s15, [r3, #296]	@ 0x128

    canvas.setCursor(batteryX * 6, batteryY * 6);
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80178f0:	b29b      	uxth	r3, r3
 80178f2:	461a      	mov	r2, r3
 80178f4:	0052      	lsls	r2, r2, #1
 80178f6:	4413      	add	r3, r2
 80178f8:	005b      	lsls	r3, r3, #1
 80178fa:	b29b      	uxth	r3, r3
 80178fc:	b219      	sxth	r1, r3
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8017904:	b29b      	uxth	r3, r3
 8017906:	461a      	mov	r2, r3
 8017908:	0052      	lsls	r2, r2, #1
 801790a:	4413      	add	r3, r2
 801790c:	005b      	lsls	r3, r3, #1
 801790e:	b29b      	uxth	r3, r3
 8017910:	b21b      	sxth	r3, r3
 8017912:	461a      	mov	r2, r3
 8017914:	f7e9 fd85 	bl	8001422 <_ZN12Adafruit_GFX9setCursorEss>

    snprintf(needleBuffer, sizeof(needleBuffer), "needleAngle: %ld\r\n", (long)needleAngle);
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	f203 2019 	addw	r0, r3, #537	@ 0x219
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	edd3 7a4a 	vldr	s15, [r3, #296]	@ 0x128
 8017924:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017928:	ee17 3a90 	vmov	r3, s15
 801792c:	4a93      	ldr	r2, [pc, #588]	@ (8017b7c <_ZN6Screen11updateMeterEv+0x2b8>)
 801792e:	2120      	movs	r1, #32
 8017930:	f002 fc28 	bl	801a184 <sniprintf>

    canvas.print(needleBuffer);
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	f203 2319 	addw	r3, r3, #537	@ 0x219
 8017940:	4619      	mov	r1, r3
 8017942:	4610      	mov	r0, r2
 8017944:	f7eb fced 	bl	8003322 <_ZN5Print5printEPKc>

    if (needleAngle > -45)
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	edd3 7a4a 	vldr	s15, [r3, #296]	@ 0x128
 801794e:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8017b80 <_ZN6Screen11updateMeterEv+0x2bc>
 8017952:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801795a:	dd03      	ble.n	8017964 <_ZN6Screen11updateMeterEv+0xa0>
    {
        needleAngle = -45;
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	4a89      	ldr	r2, [pc, #548]	@ (8017b84 <_ZN6Screen11updateMeterEv+0x2c0>)
 8017960:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
    }

    if (needleAngle < -135)
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	edd3 7a4a 	vldr	s15, [r3, #296]	@ 0x128
 801796a:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 8017b88 <_ZN6Screen11updateMeterEv+0x2c4>
 801796e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017976:	d503      	bpl.n	8017980 <_ZN6Screen11updateMeterEv+0xbc>
    {
        needleAngle = -135;
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	4a84      	ldr	r2, [pc, #528]	@ (8017b8c <_ZN6Screen11updateMeterEv+0x2c8>)
 801797c:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
    //       needleAngle = needleAngle - 1.0; // decrease by 1 deg
    //   }

    // 90 / 2 is degs per point
    // Convert angle to radians
    needleRad = radians(needleAngle);
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	edd3 7a4a 	vldr	s15, [r3, #296]	@ 0x128
 8017986:	eeb0 0a67 	vmov.f32	s0, s15
 801798a:	6878      	ldr	r0, [r7, #4]
 801798c:	f7ff ff6c 	bl	8017868 <_ZN6Screen7radiansEf>
 8017990:	eef0 7a40 	vmov.f32	s15, s0
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    // Serial.println(needleAngle);

    // Calculate the endpoint of the line (on the circle's perimeter)
    needleX1 = float(meterOriginX) + (float(meterHeight) - 80) * std::cos(needleRad);
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80179a0:	ee07 3a90 	vmov	s15, r3
 80179a4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80179ae:	ee07 3a90 	vmov	s15, r3
 80179b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80179b6:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8017b90 <_ZN6Screen11updateMeterEv+0x2cc>
 80179ba:	ee77 8ac7 	vsub.f32	s17, s15, s14
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	edd3 7a49 	vldr	s15, [r3, #292]	@ 0x124
 80179c4:	eeb0 0a67 	vmov.f32	s0, s15
 80179c8:	f7ff f830 	bl	8016a2c <_ZSt3cosf>
 80179cc:	eef0 7a40 	vmov.f32	s15, s0
 80179d0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80179d4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80179d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80179dc:	ee17 2a90 	vmov	r2, s15
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
    needleY1 = float(meterOriginY) + (float(meterHeight) - 80) * std::sin(needleRad);
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80179ec:	ee07 3a90 	vmov	s15, r3
 80179f0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80179fa:	ee07 3a90 	vmov	s15, r3
 80179fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a02:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8017b90 <_ZN6Screen11updateMeterEv+0x2cc>
 8017a06:	ee77 8ac7 	vsub.f32	s17, s15, s14
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	edd3 7a49 	vldr	s15, [r3, #292]	@ 0x124
 8017a10:	eeb0 0a67 	vmov.f32	s0, s15
 8017a14:	f7ff f81a 	bl	8016a4c <_ZSt3sinf>
 8017a18:	eef0 7a40 	vmov.f32	s15, s0
 8017a1c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8017a20:	ee78 7a27 	vadd.f32	s15, s16, s15
 8017a24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017a28:	ee17 2a90 	vmov	r2, s15
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
    // Serial.println(needleX1);
    // Serial.println(needleY1);
    //  Calculate the endpoint of the line (on the circle's perimeter)
    needleX2 = float(meterOriginX) + (float(meterHeight) - 170) * std::cos(needleRad);
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8017a38:	ee07 3a90 	vmov	s15, r3
 8017a3c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8017a46:	ee07 3a90 	vmov	s15, r3
 8017a4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a4e:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8017b94 <_ZN6Screen11updateMeterEv+0x2d0>
 8017a52:	ee77 8ac7 	vsub.f32	s17, s15, s14
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	edd3 7a49 	vldr	s15, [r3, #292]	@ 0x124
 8017a5c:	eeb0 0a67 	vmov.f32	s0, s15
 8017a60:	f7fe ffe4 	bl	8016a2c <_ZSt3cosf>
 8017a64:	eef0 7a40 	vmov.f32	s15, s0
 8017a68:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8017a6c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8017a70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017a74:	ee17 2a90 	vmov	r2, s15
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    needleY2 = float(meterOriginY) + (float(meterHeight) - 170) * std::sin(needleRad);
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8017a84:	ee07 3a90 	vmov	s15, r3
 8017a88:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8017a92:	ee07 3a90 	vmov	s15, r3
 8017a96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a9a:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8017b94 <_ZN6Screen11updateMeterEv+0x2d0>
 8017a9e:	ee77 8ac7 	vsub.f32	s17, s15, s14
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	edd3 7a49 	vldr	s15, [r3, #292]	@ 0x124
 8017aa8:	eeb0 0a67 	vmov.f32	s0, s15
 8017aac:	f7fe ffce 	bl	8016a4c <_ZSt3sinf>
 8017ab0:	eef0 7a40 	vmov.f32	s15, s0
 8017ab4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8017ab8:	ee78 7a27 	vadd.f32	s15, s16, s15
 8017abc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017ac0:	ee17 2a90 	vmov	r2, s15
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110

    canvas.drawLine(lastNeedleX1, lastNeedleY1, lastNeedleX2, lastNeedleY2, BACKGROUND_COLOR);
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8017ad6:	b219      	sxth	r1, r3
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8017ade:	b21a      	sxth	r2, r3
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8017ae6:	b21c      	sxth	r4, r3
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8017aee:	b21b      	sxth	r3, r3
 8017af0:	f64d 45ff 	movw	r5, #56575	@ 0xdcff
 8017af4:	9501      	str	r5, [sp, #4]
 8017af6:	9300      	str	r3, [sp, #0]
 8017af8:	4623      	mov	r3, r4
 8017afa:	f7e9 ff43 	bl	8001984 <_ZN12Adafruit_GFX8drawLineEsssst>
    // writeNeedleFromCanvas(x0, y0, x1, y1, color);

    // Draw a normal line
    canvas.drawLine(needleX1, needleY1, needleX2, needleY2, ST7789V_BLACK);
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8017b0a:	b219      	sxth	r1, r3
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8017b12:	b21a      	sxth	r2, r3
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8017b1a:	b21c      	sxth	r4, r3
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8017b22:	b21b      	sxth	r3, r3
 8017b24:	2500      	movs	r5, #0
 8017b26:	9501      	str	r5, [sp, #4]
 8017b28:	9300      	str	r3, [sp, #0]
 8017b2a:	4623      	mov	r3, r4
 8017b2c:	f7e9 ff2a 	bl	8001984 <_ZN12Adafruit_GFX8drawLineEsssst>
    // writeNeedleFromCanvas(x0, y0, x1, y1, color);

    lastNeedleX1 = needleX1;
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    lastNeedleX2 = needleX2;
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    lastNeedleY1 = needleY1;
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
    lastNeedleY2 = needleY2;
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8017b5a:	687b      	ldr	r3, [r7, #4]
 8017b5c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
    // renderDelay = 15; // about a 60hz refresh rate
    writeCanvas();
 8017b60:	6878      	ldr	r0, [r7, #4]
 8017b62:	f7ff fe6a 	bl	801783a <_ZN6Screen11writeCanvasEv>
    //     ledcWrite(backlightChannel, 0);
    //     esp_sleep_enable_timer_wakeup(1000000);
    //     esp_light_sleep_start();
    //     fadeIn();
    // }
} // update meter f(x)
 8017b66:	bf00      	nop
 8017b68:	3708      	adds	r7, #8
 8017b6a:	46bd      	mov	sp, r7
 8017b6c:	ecbd 8b02 	vpop	{d8}
 8017b70:	bdb0      	pop	{r4, r5, r7, pc}
 8017b72:	bf00      	nop
 8017b74:	20000378 	.word	0x20000378
 8017b78:	42b40000 	.word	0x42b40000
 8017b7c:	0801c420 	.word	0x0801c420
 8017b80:	c2340000 	.word	0xc2340000
 8017b84:	c2340000 	.word	0xc2340000
 8017b88:	c3070000 	.word	0xc3070000
 8017b8c:	c3070000 	.word	0xc3070000
 8017b90:	42a00000 	.word	0x42a00000
 8017b94:	432a0000 	.word	0x432a0000

08017b98 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8017b98:	b580      	push	{r7, lr}
 8017b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8017b9c:	2200      	movs	r2, #0
 8017b9e:	4912      	ldr	r1, [pc, #72]	@ (8017be8 <MX_USB_Device_Init+0x50>)
 8017ba0:	4812      	ldr	r0, [pc, #72]	@ (8017bec <MX_USB_Device_Init+0x54>)
 8017ba2:	f7fa fb47 	bl	8012234 <USBD_Init>
 8017ba6:	4603      	mov	r3, r0
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d001      	beq.n	8017bb0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8017bac:	f7ee fe50 	bl	8006850 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8017bb0:	490f      	ldr	r1, [pc, #60]	@ (8017bf0 <MX_USB_Device_Init+0x58>)
 8017bb2:	480e      	ldr	r0, [pc, #56]	@ (8017bec <MX_USB_Device_Init+0x54>)
 8017bb4:	f7fa fb6e 	bl	8012294 <USBD_RegisterClass>
 8017bb8:	4603      	mov	r3, r0
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d001      	beq.n	8017bc2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8017bbe:	f7ee fe47 	bl	8006850 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8017bc2:	490c      	ldr	r1, [pc, #48]	@ (8017bf4 <MX_USB_Device_Init+0x5c>)
 8017bc4:	4809      	ldr	r0, [pc, #36]	@ (8017bec <MX_USB_Device_Init+0x54>)
 8017bc6:	f7fa faa5 	bl	8012114 <USBD_CDC_RegisterInterface>
 8017bca:	4603      	mov	r3, r0
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d001      	beq.n	8017bd4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8017bd0:	f7ee fe3e 	bl	8006850 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8017bd4:	4805      	ldr	r0, [pc, #20]	@ (8017bec <MX_USB_Device_Init+0x54>)
 8017bd6:	f7fa fb93 	bl	8012300 <USBD_Start>
 8017bda:	4603      	mov	r3, r0
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	d001      	beq.n	8017be4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8017be0:	f7ee fe36 	bl	8006850 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8017be4:	bf00      	nop
 8017be6:	bd80      	pop	{r7, pc}
 8017be8:	200000e8 	.word	0x200000e8
 8017bec:	20000bec 	.word	0x20000bec
 8017bf0:	2000003c 	.word	0x2000003c
 8017bf4:	200000d4 	.word	0x200000d4

08017bf8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8017bf8:	b580      	push	{r7, lr}
 8017bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8017bfc:	2200      	movs	r2, #0
 8017bfe:	4905      	ldr	r1, [pc, #20]	@ (8017c14 <CDC_Init_FS+0x1c>)
 8017c00:	4805      	ldr	r0, [pc, #20]	@ (8017c18 <CDC_Init_FS+0x20>)
 8017c02:	f7fa faa1 	bl	8012148 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8017c06:	4905      	ldr	r1, [pc, #20]	@ (8017c1c <CDC_Init_FS+0x24>)
 8017c08:	4803      	ldr	r0, [pc, #12]	@ (8017c18 <CDC_Init_FS+0x20>)
 8017c0a:	f7fa fabf 	bl	801218c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017c0e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017c10:	4618      	mov	r0, r3
 8017c12:	bd80      	pop	{r7, pc}
 8017c14:	200016c8 	.word	0x200016c8
 8017c18:	20000bec 	.word	0x20000bec
 8017c1c:	20000ec8 	.word	0x20000ec8

08017c20 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017c20:	b480      	push	{r7}
 8017c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017c24:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8017c26:	4618      	mov	r0, r3
 8017c28:	46bd      	mov	sp, r7
 8017c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c2e:	4770      	bx	lr

08017c30 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017c30:	b480      	push	{r7}
 8017c32:	b083      	sub	sp, #12
 8017c34:	af00      	add	r7, sp, #0
 8017c36:	4603      	mov	r3, r0
 8017c38:	6039      	str	r1, [r7, #0]
 8017c3a:	71fb      	strb	r3, [r7, #7]
 8017c3c:	4613      	mov	r3, r2
 8017c3e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017c40:	79fb      	ldrb	r3, [r7, #7]
 8017c42:	2b23      	cmp	r3, #35	@ 0x23
 8017c44:	d84a      	bhi.n	8017cdc <CDC_Control_FS+0xac>
 8017c46:	a201      	add	r2, pc, #4	@ (adr r2, 8017c4c <CDC_Control_FS+0x1c>)
 8017c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017c4c:	08017cdd 	.word	0x08017cdd
 8017c50:	08017cdd 	.word	0x08017cdd
 8017c54:	08017cdd 	.word	0x08017cdd
 8017c58:	08017cdd 	.word	0x08017cdd
 8017c5c:	08017cdd 	.word	0x08017cdd
 8017c60:	08017cdd 	.word	0x08017cdd
 8017c64:	08017cdd 	.word	0x08017cdd
 8017c68:	08017cdd 	.word	0x08017cdd
 8017c6c:	08017cdd 	.word	0x08017cdd
 8017c70:	08017cdd 	.word	0x08017cdd
 8017c74:	08017cdd 	.word	0x08017cdd
 8017c78:	08017cdd 	.word	0x08017cdd
 8017c7c:	08017cdd 	.word	0x08017cdd
 8017c80:	08017cdd 	.word	0x08017cdd
 8017c84:	08017cdd 	.word	0x08017cdd
 8017c88:	08017cdd 	.word	0x08017cdd
 8017c8c:	08017cdd 	.word	0x08017cdd
 8017c90:	08017cdd 	.word	0x08017cdd
 8017c94:	08017cdd 	.word	0x08017cdd
 8017c98:	08017cdd 	.word	0x08017cdd
 8017c9c:	08017cdd 	.word	0x08017cdd
 8017ca0:	08017cdd 	.word	0x08017cdd
 8017ca4:	08017cdd 	.word	0x08017cdd
 8017ca8:	08017cdd 	.word	0x08017cdd
 8017cac:	08017cdd 	.word	0x08017cdd
 8017cb0:	08017cdd 	.word	0x08017cdd
 8017cb4:	08017cdd 	.word	0x08017cdd
 8017cb8:	08017cdd 	.word	0x08017cdd
 8017cbc:	08017cdd 	.word	0x08017cdd
 8017cc0:	08017cdd 	.word	0x08017cdd
 8017cc4:	08017cdd 	.word	0x08017cdd
 8017cc8:	08017cdd 	.word	0x08017cdd
 8017ccc:	08017cdd 	.word	0x08017cdd
 8017cd0:	08017cdd 	.word	0x08017cdd
 8017cd4:	08017cdd 	.word	0x08017cdd
 8017cd8:	08017cdd 	.word	0x08017cdd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017cdc:	bf00      	nop
  }

  return (USBD_OK);
 8017cde:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017ce0:	4618      	mov	r0, r3
 8017ce2:	370c      	adds	r7, #12
 8017ce4:	46bd      	mov	sp, r7
 8017ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cea:	4770      	bx	lr

08017cec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8017cec:	b580      	push	{r7, lr}
 8017cee:	b082      	sub	sp, #8
 8017cf0:	af00      	add	r7, sp, #0
 8017cf2:	6078      	str	r0, [r7, #4]
 8017cf4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8017cf6:	6879      	ldr	r1, [r7, #4]
 8017cf8:	4805      	ldr	r0, [pc, #20]	@ (8017d10 <CDC_Receive_FS+0x24>)
 8017cfa:	f7fa fa47 	bl	801218c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8017cfe:	4804      	ldr	r0, [pc, #16]	@ (8017d10 <CDC_Receive_FS+0x24>)
 8017d00:	f7fa fa62 	bl	80121c8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8017d04:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8017d06:	4618      	mov	r0, r3
 8017d08:	3708      	adds	r7, #8
 8017d0a:	46bd      	mov	sp, r7
 8017d0c:	bd80      	pop	{r7, pc}
 8017d0e:	bf00      	nop
 8017d10:	20000bec 	.word	0x20000bec

08017d14 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8017d14:	b480      	push	{r7}
 8017d16:	b087      	sub	sp, #28
 8017d18:	af00      	add	r7, sp, #0
 8017d1a:	60f8      	str	r0, [r7, #12]
 8017d1c:	60b9      	str	r1, [r7, #8]
 8017d1e:	4613      	mov	r3, r2
 8017d20:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8017d22:	2300      	movs	r3, #0
 8017d24:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8017d26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017d2a:	4618      	mov	r0, r3
 8017d2c:	371c      	adds	r7, #28
 8017d2e:	46bd      	mov	sp, r7
 8017d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d34:	4770      	bx	lr
	...

08017d38 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017d38:	b480      	push	{r7}
 8017d3a:	b083      	sub	sp, #12
 8017d3c:	af00      	add	r7, sp, #0
 8017d3e:	4603      	mov	r3, r0
 8017d40:	6039      	str	r1, [r7, #0]
 8017d42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8017d44:	683b      	ldr	r3, [r7, #0]
 8017d46:	2212      	movs	r2, #18
 8017d48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8017d4a:	4b03      	ldr	r3, [pc, #12]	@ (8017d58 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8017d4c:	4618      	mov	r0, r3
 8017d4e:	370c      	adds	r7, #12
 8017d50:	46bd      	mov	sp, r7
 8017d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d56:	4770      	bx	lr
 8017d58:	20000108 	.word	0x20000108

08017d5c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017d5c:	b480      	push	{r7}
 8017d5e:	b083      	sub	sp, #12
 8017d60:	af00      	add	r7, sp, #0
 8017d62:	4603      	mov	r3, r0
 8017d64:	6039      	str	r1, [r7, #0]
 8017d66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017d68:	683b      	ldr	r3, [r7, #0]
 8017d6a:	2204      	movs	r2, #4
 8017d6c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017d6e:	4b03      	ldr	r3, [pc, #12]	@ (8017d7c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8017d70:	4618      	mov	r0, r3
 8017d72:	370c      	adds	r7, #12
 8017d74:	46bd      	mov	sp, r7
 8017d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d7a:	4770      	bx	lr
 8017d7c:	2000011c 	.word	0x2000011c

08017d80 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017d80:	b580      	push	{r7, lr}
 8017d82:	b082      	sub	sp, #8
 8017d84:	af00      	add	r7, sp, #0
 8017d86:	4603      	mov	r3, r0
 8017d88:	6039      	str	r1, [r7, #0]
 8017d8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017d8c:	79fb      	ldrb	r3, [r7, #7]
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	d105      	bne.n	8017d9e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8017d92:	683a      	ldr	r2, [r7, #0]
 8017d94:	4907      	ldr	r1, [pc, #28]	@ (8017db4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8017d96:	4808      	ldr	r0, [pc, #32]	@ (8017db8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8017d98:	f7fb fbfa 	bl	8013590 <USBD_GetString>
 8017d9c:	e004      	b.n	8017da8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8017d9e:	683a      	ldr	r2, [r7, #0]
 8017da0:	4904      	ldr	r1, [pc, #16]	@ (8017db4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8017da2:	4805      	ldr	r0, [pc, #20]	@ (8017db8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8017da4:	f7fb fbf4 	bl	8013590 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017da8:	4b02      	ldr	r3, [pc, #8]	@ (8017db4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8017daa:	4618      	mov	r0, r3
 8017dac:	3708      	adds	r7, #8
 8017dae:	46bd      	mov	sp, r7
 8017db0:	bd80      	pop	{r7, pc}
 8017db2:	bf00      	nop
 8017db4:	20001ec8 	.word	0x20001ec8
 8017db8:	0801c434 	.word	0x0801c434

08017dbc <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017dbc:	b580      	push	{r7, lr}
 8017dbe:	b082      	sub	sp, #8
 8017dc0:	af00      	add	r7, sp, #0
 8017dc2:	4603      	mov	r3, r0
 8017dc4:	6039      	str	r1, [r7, #0]
 8017dc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017dc8:	683a      	ldr	r2, [r7, #0]
 8017dca:	4904      	ldr	r1, [pc, #16]	@ (8017ddc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8017dcc:	4804      	ldr	r0, [pc, #16]	@ (8017de0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8017dce:	f7fb fbdf 	bl	8013590 <USBD_GetString>
  return USBD_StrDesc;
 8017dd2:	4b02      	ldr	r3, [pc, #8]	@ (8017ddc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8017dd4:	4618      	mov	r0, r3
 8017dd6:	3708      	adds	r7, #8
 8017dd8:	46bd      	mov	sp, r7
 8017dda:	bd80      	pop	{r7, pc}
 8017ddc:	20001ec8 	.word	0x20001ec8
 8017de0:	0801c44c 	.word	0x0801c44c

08017de4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017de4:	b580      	push	{r7, lr}
 8017de6:	b082      	sub	sp, #8
 8017de8:	af00      	add	r7, sp, #0
 8017dea:	4603      	mov	r3, r0
 8017dec:	6039      	str	r1, [r7, #0]
 8017dee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017df0:	683b      	ldr	r3, [r7, #0]
 8017df2:	221a      	movs	r2, #26
 8017df4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017df6:	f000 f843 	bl	8017e80 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8017dfa:	4b02      	ldr	r3, [pc, #8]	@ (8017e04 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8017dfc:	4618      	mov	r0, r3
 8017dfe:	3708      	adds	r7, #8
 8017e00:	46bd      	mov	sp, r7
 8017e02:	bd80      	pop	{r7, pc}
 8017e04:	20000120 	.word	0x20000120

08017e08 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017e08:	b580      	push	{r7, lr}
 8017e0a:	b082      	sub	sp, #8
 8017e0c:	af00      	add	r7, sp, #0
 8017e0e:	4603      	mov	r3, r0
 8017e10:	6039      	str	r1, [r7, #0]
 8017e12:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017e14:	79fb      	ldrb	r3, [r7, #7]
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d105      	bne.n	8017e26 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8017e1a:	683a      	ldr	r2, [r7, #0]
 8017e1c:	4907      	ldr	r1, [pc, #28]	@ (8017e3c <USBD_CDC_ConfigStrDescriptor+0x34>)
 8017e1e:	4808      	ldr	r0, [pc, #32]	@ (8017e40 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8017e20:	f7fb fbb6 	bl	8013590 <USBD_GetString>
 8017e24:	e004      	b.n	8017e30 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8017e26:	683a      	ldr	r2, [r7, #0]
 8017e28:	4904      	ldr	r1, [pc, #16]	@ (8017e3c <USBD_CDC_ConfigStrDescriptor+0x34>)
 8017e2a:	4805      	ldr	r0, [pc, #20]	@ (8017e40 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8017e2c:	f7fb fbb0 	bl	8013590 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017e30:	4b02      	ldr	r3, [pc, #8]	@ (8017e3c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8017e32:	4618      	mov	r0, r3
 8017e34:	3708      	adds	r7, #8
 8017e36:	46bd      	mov	sp, r7
 8017e38:	bd80      	pop	{r7, pc}
 8017e3a:	bf00      	nop
 8017e3c:	20001ec8 	.word	0x20001ec8
 8017e40:	0801c460 	.word	0x0801c460

08017e44 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017e44:	b580      	push	{r7, lr}
 8017e46:	b082      	sub	sp, #8
 8017e48:	af00      	add	r7, sp, #0
 8017e4a:	4603      	mov	r3, r0
 8017e4c:	6039      	str	r1, [r7, #0]
 8017e4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017e50:	79fb      	ldrb	r3, [r7, #7]
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d105      	bne.n	8017e62 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8017e56:	683a      	ldr	r2, [r7, #0]
 8017e58:	4907      	ldr	r1, [pc, #28]	@ (8017e78 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8017e5a:	4808      	ldr	r0, [pc, #32]	@ (8017e7c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8017e5c:	f7fb fb98 	bl	8013590 <USBD_GetString>
 8017e60:	e004      	b.n	8017e6c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8017e62:	683a      	ldr	r2, [r7, #0]
 8017e64:	4904      	ldr	r1, [pc, #16]	@ (8017e78 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8017e66:	4805      	ldr	r0, [pc, #20]	@ (8017e7c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8017e68:	f7fb fb92 	bl	8013590 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017e6c:	4b02      	ldr	r3, [pc, #8]	@ (8017e78 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8017e6e:	4618      	mov	r0, r3
 8017e70:	3708      	adds	r7, #8
 8017e72:	46bd      	mov	sp, r7
 8017e74:	bd80      	pop	{r7, pc}
 8017e76:	bf00      	nop
 8017e78:	20001ec8 	.word	0x20001ec8
 8017e7c:	0801c46c 	.word	0x0801c46c

08017e80 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017e80:	b580      	push	{r7, lr}
 8017e82:	b084      	sub	sp, #16
 8017e84:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017e86:	4b0f      	ldr	r3, [pc, #60]	@ (8017ec4 <Get_SerialNum+0x44>)
 8017e88:	681b      	ldr	r3, [r3, #0]
 8017e8a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8017ec8 <Get_SerialNum+0x48>)
 8017e8e:	681b      	ldr	r3, [r3, #0]
 8017e90:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017e92:	4b0e      	ldr	r3, [pc, #56]	@ (8017ecc <Get_SerialNum+0x4c>)
 8017e94:	681b      	ldr	r3, [r3, #0]
 8017e96:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017e98:	68fa      	ldr	r2, [r7, #12]
 8017e9a:	687b      	ldr	r3, [r7, #4]
 8017e9c:	4413      	add	r3, r2
 8017e9e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017ea0:	68fb      	ldr	r3, [r7, #12]
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	d009      	beq.n	8017eba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017ea6:	2208      	movs	r2, #8
 8017ea8:	4909      	ldr	r1, [pc, #36]	@ (8017ed0 <Get_SerialNum+0x50>)
 8017eaa:	68f8      	ldr	r0, [r7, #12]
 8017eac:	f000 f814 	bl	8017ed8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017eb0:	2204      	movs	r2, #4
 8017eb2:	4908      	ldr	r1, [pc, #32]	@ (8017ed4 <Get_SerialNum+0x54>)
 8017eb4:	68b8      	ldr	r0, [r7, #8]
 8017eb6:	f000 f80f 	bl	8017ed8 <IntToUnicode>
  }
}
 8017eba:	bf00      	nop
 8017ebc:	3710      	adds	r7, #16
 8017ebe:	46bd      	mov	sp, r7
 8017ec0:	bd80      	pop	{r7, pc}
 8017ec2:	bf00      	nop
 8017ec4:	1fff7590 	.word	0x1fff7590
 8017ec8:	1fff7594 	.word	0x1fff7594
 8017ecc:	1fff7598 	.word	0x1fff7598
 8017ed0:	20000122 	.word	0x20000122
 8017ed4:	20000132 	.word	0x20000132

08017ed8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017ed8:	b480      	push	{r7}
 8017eda:	b087      	sub	sp, #28
 8017edc:	af00      	add	r7, sp, #0
 8017ede:	60f8      	str	r0, [r7, #12]
 8017ee0:	60b9      	str	r1, [r7, #8]
 8017ee2:	4613      	mov	r3, r2
 8017ee4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017ee6:	2300      	movs	r3, #0
 8017ee8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017eea:	2300      	movs	r3, #0
 8017eec:	75fb      	strb	r3, [r7, #23]
 8017eee:	e027      	b.n	8017f40 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017ef0:	68fb      	ldr	r3, [r7, #12]
 8017ef2:	0f1b      	lsrs	r3, r3, #28
 8017ef4:	2b09      	cmp	r3, #9
 8017ef6:	d80b      	bhi.n	8017f10 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017ef8:	68fb      	ldr	r3, [r7, #12]
 8017efa:	0f1b      	lsrs	r3, r3, #28
 8017efc:	b2da      	uxtb	r2, r3
 8017efe:	7dfb      	ldrb	r3, [r7, #23]
 8017f00:	005b      	lsls	r3, r3, #1
 8017f02:	4619      	mov	r1, r3
 8017f04:	68bb      	ldr	r3, [r7, #8]
 8017f06:	440b      	add	r3, r1
 8017f08:	3230      	adds	r2, #48	@ 0x30
 8017f0a:	b2d2      	uxtb	r2, r2
 8017f0c:	701a      	strb	r2, [r3, #0]
 8017f0e:	e00a      	b.n	8017f26 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017f10:	68fb      	ldr	r3, [r7, #12]
 8017f12:	0f1b      	lsrs	r3, r3, #28
 8017f14:	b2da      	uxtb	r2, r3
 8017f16:	7dfb      	ldrb	r3, [r7, #23]
 8017f18:	005b      	lsls	r3, r3, #1
 8017f1a:	4619      	mov	r1, r3
 8017f1c:	68bb      	ldr	r3, [r7, #8]
 8017f1e:	440b      	add	r3, r1
 8017f20:	3237      	adds	r2, #55	@ 0x37
 8017f22:	b2d2      	uxtb	r2, r2
 8017f24:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017f26:	68fb      	ldr	r3, [r7, #12]
 8017f28:	011b      	lsls	r3, r3, #4
 8017f2a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017f2c:	7dfb      	ldrb	r3, [r7, #23]
 8017f2e:	005b      	lsls	r3, r3, #1
 8017f30:	3301      	adds	r3, #1
 8017f32:	68ba      	ldr	r2, [r7, #8]
 8017f34:	4413      	add	r3, r2
 8017f36:	2200      	movs	r2, #0
 8017f38:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017f3a:	7dfb      	ldrb	r3, [r7, #23]
 8017f3c:	3301      	adds	r3, #1
 8017f3e:	75fb      	strb	r3, [r7, #23]
 8017f40:	7dfa      	ldrb	r2, [r7, #23]
 8017f42:	79fb      	ldrb	r3, [r7, #7]
 8017f44:	429a      	cmp	r2, r3
 8017f46:	d3d3      	bcc.n	8017ef0 <IntToUnicode+0x18>
  }
}
 8017f48:	bf00      	nop
 8017f4a:	bf00      	nop
 8017f4c:	371c      	adds	r7, #28
 8017f4e:	46bd      	mov	sp, r7
 8017f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f54:	4770      	bx	lr

08017f56 <LL_AHB2_GRP1_EnableClock>:
{
 8017f56:	b480      	push	{r7}
 8017f58:	b085      	sub	sp, #20
 8017f5a:	af00      	add	r7, sp, #0
 8017f5c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8017f5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8017f62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017f64:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	4313      	orrs	r3, r2
 8017f6c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8017f6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8017f72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	4013      	ands	r3, r2
 8017f78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8017f7a:	68fb      	ldr	r3, [r7, #12]
}
 8017f7c:	bf00      	nop
 8017f7e:	3714      	adds	r7, #20
 8017f80:	46bd      	mov	sp, r7
 8017f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f86:	4770      	bx	lr

08017f88 <LL_APB1_GRP1_EnableClock>:
{
 8017f88:	b480      	push	{r7}
 8017f8a:	b085      	sub	sp, #20
 8017f8c:	af00      	add	r7, sp, #0
 8017f8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8017f90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8017f94:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017f96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8017f9a:	687b      	ldr	r3, [r7, #4]
 8017f9c:	4313      	orrs	r3, r2
 8017f9e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8017fa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8017fa4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	4013      	ands	r3, r2
 8017faa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8017fac:	68fb      	ldr	r3, [r7, #12]
}
 8017fae:	bf00      	nop
 8017fb0:	3714      	adds	r7, #20
 8017fb2:	46bd      	mov	sp, r7
 8017fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fb8:	4770      	bx	lr
	...

08017fbc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017fbc:	b580      	push	{r7, lr}
 8017fbe:	b09c      	sub	sp, #112	@ 0x70
 8017fc0:	af00      	add	r7, sp, #0
 8017fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017fc4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8017fc8:	2200      	movs	r2, #0
 8017fca:	601a      	str	r2, [r3, #0]
 8017fcc:	605a      	str	r2, [r3, #4]
 8017fce:	609a      	str	r2, [r3, #8]
 8017fd0:	60da      	str	r2, [r3, #12]
 8017fd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017fd4:	f107 030c 	add.w	r3, r7, #12
 8017fd8:	2250      	movs	r2, #80	@ 0x50
 8017fda:	2100      	movs	r1, #0
 8017fdc:	4618      	mov	r0, r3
 8017fde:	f002 f964 	bl	801a2aa <memset>
  if(pcdHandle->Instance==USB)
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	681b      	ldr	r3, [r3, #0]
 8017fe6:	4a23      	ldr	r2, [pc, #140]	@ (8018074 <HAL_PCD_MspInit+0xb8>)
 8017fe8:	4293      	cmp	r3, r2
 8017fea:	d13e      	bne.n	801806a <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8017fec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8017ff0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8017ff2:	2318      	movs	r3, #24
 8017ff4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8017ff6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8017ffa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8017ffc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8018000:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8018002:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8018006:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8018008:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801800c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 801800e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8018012:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8018014:	f107 030c 	add.w	r3, r7, #12
 8018018:	4618      	mov	r0, r3
 801801a:	f7f4 fa7b 	bl	800c514 <HAL_RCCEx_PeriphCLKConfig>
 801801e:	4603      	mov	r3, r0
 8018020:	2b00      	cmp	r3, #0
 8018022:	d001      	beq.n	8018028 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8018024:	f7ee fc14 	bl	8006850 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018028:	2001      	movs	r0, #1
 801802a:	f7ff ff94 	bl	8017f56 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801802e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8018032:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018034:	2302      	movs	r3, #2
 8018036:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018038:	2300      	movs	r3, #0
 801803a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801803c:	2300      	movs	r3, #0
 801803e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8018040:	230a      	movs	r3, #10
 8018042:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018044:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8018048:	4619      	mov	r1, r3
 801804a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801804e:	f7ef ff0b 	bl	8007e68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8018052:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8018056:	f7ff ff97 	bl	8017f88 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 801805a:	2200      	movs	r2, #0
 801805c:	2100      	movs	r1, #0
 801805e:	2014      	movs	r0, #20
 8018060:	f7ef fbcf 	bl	8007802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8018064:	2014      	movs	r0, #20
 8018066:	f7ef fbe6 	bl	8007836 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801806a:	bf00      	nop
 801806c:	3770      	adds	r7, #112	@ 0x70
 801806e:	46bd      	mov	sp, r7
 8018070:	bd80      	pop	{r7, pc}
 8018072:	bf00      	nop
 8018074:	40006800 	.word	0x40006800

08018078 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018078:	b580      	push	{r7, lr}
 801807a:	b082      	sub	sp, #8
 801807c:	af00      	add	r7, sp, #0
 801807e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 801808c:	4619      	mov	r1, r3
 801808e:	4610      	mov	r0, r2
 8018090:	f7fa f983 	bl	801239a <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8018094:	bf00      	nop
 8018096:	3708      	adds	r7, #8
 8018098:	46bd      	mov	sp, r7
 801809a:	bd80      	pop	{r7, pc}

0801809c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801809c:	b580      	push	{r7, lr}
 801809e:	b082      	sub	sp, #8
 80180a0:	af00      	add	r7, sp, #0
 80180a2:	6078      	str	r0, [r7, #4]
 80180a4:	460b      	mov	r3, r1
 80180a6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80180ae:	78fa      	ldrb	r2, [r7, #3]
 80180b0:	6879      	ldr	r1, [r7, #4]
 80180b2:	4613      	mov	r3, r2
 80180b4:	009b      	lsls	r3, r3, #2
 80180b6:	4413      	add	r3, r2
 80180b8:	00db      	lsls	r3, r3, #3
 80180ba:	440b      	add	r3, r1
 80180bc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80180c0:	681a      	ldr	r2, [r3, #0]
 80180c2:	78fb      	ldrb	r3, [r7, #3]
 80180c4:	4619      	mov	r1, r3
 80180c6:	f7fa f9bd 	bl	8012444 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80180ca:	bf00      	nop
 80180cc:	3708      	adds	r7, #8
 80180ce:	46bd      	mov	sp, r7
 80180d0:	bd80      	pop	{r7, pc}

080180d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80180d2:	b580      	push	{r7, lr}
 80180d4:	b082      	sub	sp, #8
 80180d6:	af00      	add	r7, sp, #0
 80180d8:	6078      	str	r0, [r7, #4]
 80180da:	460b      	mov	r3, r1
 80180dc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80180e4:	78fa      	ldrb	r2, [r7, #3]
 80180e6:	6879      	ldr	r1, [r7, #4]
 80180e8:	4613      	mov	r3, r2
 80180ea:	009b      	lsls	r3, r3, #2
 80180ec:	4413      	add	r3, r2
 80180ee:	00db      	lsls	r3, r3, #3
 80180f0:	440b      	add	r3, r1
 80180f2:	3324      	adds	r3, #36	@ 0x24
 80180f4:	681a      	ldr	r2, [r3, #0]
 80180f6:	78fb      	ldrb	r3, [r7, #3]
 80180f8:	4619      	mov	r1, r3
 80180fa:	f7fa fa56 	bl	80125aa <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80180fe:	bf00      	nop
 8018100:	3708      	adds	r7, #8
 8018102:	46bd      	mov	sp, r7
 8018104:	bd80      	pop	{r7, pc}

08018106 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018106:	b580      	push	{r7, lr}
 8018108:	b082      	sub	sp, #8
 801810a:	af00      	add	r7, sp, #0
 801810c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018114:	4618      	mov	r0, r3
 8018116:	f7fa fb90 	bl	801283a <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801811a:	bf00      	nop
 801811c:	3708      	adds	r7, #8
 801811e:	46bd      	mov	sp, r7
 8018120:	bd80      	pop	{r7, pc}

08018122 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018122:	b580      	push	{r7, lr}
 8018124:	b084      	sub	sp, #16
 8018126:	af00      	add	r7, sp, #0
 8018128:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801812a:	2301      	movs	r3, #1
 801812c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	795b      	ldrb	r3, [r3, #5]
 8018132:	2b02      	cmp	r3, #2
 8018134:	d001      	beq.n	801813a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8018136:	f7ee fb8b 	bl	8006850 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018140:	7bfa      	ldrb	r2, [r7, #15]
 8018142:	4611      	mov	r1, r2
 8018144:	4618      	mov	r0, r3
 8018146:	f7fa fb34 	bl	80127b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018150:	4618      	mov	r0, r3
 8018152:	f7fa fadc 	bl	801270e <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8018156:	bf00      	nop
 8018158:	3710      	adds	r7, #16
 801815a:	46bd      	mov	sp, r7
 801815c:	bd80      	pop	{r7, pc}
	...

08018160 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018160:	b580      	push	{r7, lr}
 8018162:	b082      	sub	sp, #8
 8018164:	af00      	add	r7, sp, #0
 8018166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801816e:	4618      	mov	r0, r3
 8018170:	f7fa fb2f 	bl	80127d2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	7a5b      	ldrb	r3, [r3, #9]
 8018178:	2b00      	cmp	r3, #0
 801817a:	d005      	beq.n	8018188 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801817c:	4b04      	ldr	r3, [pc, #16]	@ (8018190 <HAL_PCD_SuspendCallback+0x30>)
 801817e:	691b      	ldr	r3, [r3, #16]
 8018180:	4a03      	ldr	r2, [pc, #12]	@ (8018190 <HAL_PCD_SuspendCallback+0x30>)
 8018182:	f043 0306 	orr.w	r3, r3, #6
 8018186:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8018188:	bf00      	nop
 801818a:	3708      	adds	r7, #8
 801818c:	46bd      	mov	sp, r7
 801818e:	bd80      	pop	{r7, pc}
 8018190:	e000ed00 	.word	0xe000ed00

08018194 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018194:	b580      	push	{r7, lr}
 8018196:	b082      	sub	sp, #8
 8018198:	af00      	add	r7, sp, #0
 801819a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	7a5b      	ldrb	r3, [r3, #9]
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d007      	beq.n	80181b4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80181a4:	4b08      	ldr	r3, [pc, #32]	@ (80181c8 <HAL_PCD_ResumeCallback+0x34>)
 80181a6:	691b      	ldr	r3, [r3, #16]
 80181a8:	4a07      	ldr	r2, [pc, #28]	@ (80181c8 <HAL_PCD_ResumeCallback+0x34>)
 80181aa:	f023 0306 	bic.w	r3, r3, #6
 80181ae:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80181b0:	f000 f9fa 	bl	80185a8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80181ba:	4618      	mov	r0, r3
 80181bc:	f7fa fb25 	bl	801280a <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80181c0:	bf00      	nop
 80181c2:	3708      	adds	r7, #8
 80181c4:	46bd      	mov	sp, r7
 80181c6:	bd80      	pop	{r7, pc}
 80181c8:	e000ed00 	.word	0xe000ed00

080181cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80181cc:	b580      	push	{r7, lr}
 80181ce:	b082      	sub	sp, #8
 80181d0:	af00      	add	r7, sp, #0
 80181d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80181d4:	4a2c      	ldr	r2, [pc, #176]	@ (8018288 <USBD_LL_Init+0xbc>)
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	4a2a      	ldr	r2, [pc, #168]	@ (8018288 <USBD_LL_Init+0xbc>)
 80181e0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80181e4:	f7f2 fe50 	bl	800ae88 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 80181e8:	4b27      	ldr	r3, [pc, #156]	@ (8018288 <USBD_LL_Init+0xbc>)
 80181ea:	4a28      	ldr	r2, [pc, #160]	@ (801828c <USBD_LL_Init+0xc0>)
 80181ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80181ee:	4b26      	ldr	r3, [pc, #152]	@ (8018288 <USBD_LL_Init+0xbc>)
 80181f0:	2208      	movs	r2, #8
 80181f2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80181f4:	4b24      	ldr	r3, [pc, #144]	@ (8018288 <USBD_LL_Init+0xbc>)
 80181f6:	2202      	movs	r2, #2
 80181f8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80181fa:	4b23      	ldr	r3, [pc, #140]	@ (8018288 <USBD_LL_Init+0xbc>)
 80181fc:	2202      	movs	r2, #2
 80181fe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8018200:	4b21      	ldr	r3, [pc, #132]	@ (8018288 <USBD_LL_Init+0xbc>)
 8018202:	2200      	movs	r2, #0
 8018204:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8018206:	4b20      	ldr	r3, [pc, #128]	@ (8018288 <USBD_LL_Init+0xbc>)
 8018208:	2200      	movs	r2, #0
 801820a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801820c:	4b1e      	ldr	r3, [pc, #120]	@ (8018288 <USBD_LL_Init+0xbc>)
 801820e:	2200      	movs	r2, #0
 8018210:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8018212:	4b1d      	ldr	r3, [pc, #116]	@ (8018288 <USBD_LL_Init+0xbc>)
 8018214:	2200      	movs	r2, #0
 8018216:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8018218:	481b      	ldr	r0, [pc, #108]	@ (8018288 <USBD_LL_Init+0xbc>)
 801821a:	f7f1 f915 	bl	8009448 <HAL_PCD_Init>
 801821e:	4603      	mov	r3, r0
 8018220:	2b00      	cmp	r3, #0
 8018222:	d001      	beq.n	8018228 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8018224:	f7ee fb14 	bl	8006850 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801822e:	2318      	movs	r3, #24
 8018230:	2200      	movs	r2, #0
 8018232:	2100      	movs	r1, #0
 8018234:	f7f2 fd9c 	bl	800ad70 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801823e:	2358      	movs	r3, #88	@ 0x58
 8018240:	2200      	movs	r2, #0
 8018242:	2180      	movs	r1, #128	@ 0x80
 8018244:	f7f2 fd94 	bl	800ad70 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801824e:	23c0      	movs	r3, #192	@ 0xc0
 8018250:	2200      	movs	r2, #0
 8018252:	2181      	movs	r1, #129	@ 0x81
 8018254:	f7f2 fd8c 	bl	800ad70 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801825e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8018262:	2200      	movs	r2, #0
 8018264:	2101      	movs	r1, #1
 8018266:	f7f2 fd83 	bl	800ad70 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018270:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8018274:	2200      	movs	r2, #0
 8018276:	2182      	movs	r1, #130	@ 0x82
 8018278:	f7f2 fd7a 	bl	800ad70 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801827c:	2300      	movs	r3, #0
}
 801827e:	4618      	mov	r0, r3
 8018280:	3708      	adds	r7, #8
 8018282:	46bd      	mov	sp, r7
 8018284:	bd80      	pop	{r7, pc}
 8018286:	bf00      	nop
 8018288:	200020c8 	.word	0x200020c8
 801828c:	40006800 	.word	0x40006800

08018290 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018290:	b580      	push	{r7, lr}
 8018292:	b084      	sub	sp, #16
 8018294:	af00      	add	r7, sp, #0
 8018296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018298:	2300      	movs	r3, #0
 801829a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801829c:	2300      	movs	r3, #0
 801829e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80182a6:	4618      	mov	r0, r3
 80182a8:	f7f1 f99c 	bl	80095e4 <HAL_PCD_Start>
 80182ac:	4603      	mov	r3, r0
 80182ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80182b0:	7bfb      	ldrb	r3, [r7, #15]
 80182b2:	4618      	mov	r0, r3
 80182b4:	f000 f97e 	bl	80185b4 <USBD_Get_USB_Status>
 80182b8:	4603      	mov	r3, r0
 80182ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80182bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80182be:	4618      	mov	r0, r3
 80182c0:	3710      	adds	r7, #16
 80182c2:	46bd      	mov	sp, r7
 80182c4:	bd80      	pop	{r7, pc}

080182c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80182c6:	b580      	push	{r7, lr}
 80182c8:	b084      	sub	sp, #16
 80182ca:	af00      	add	r7, sp, #0
 80182cc:	6078      	str	r0, [r7, #4]
 80182ce:	4608      	mov	r0, r1
 80182d0:	4611      	mov	r1, r2
 80182d2:	461a      	mov	r2, r3
 80182d4:	4603      	mov	r3, r0
 80182d6:	70fb      	strb	r3, [r7, #3]
 80182d8:	460b      	mov	r3, r1
 80182da:	70bb      	strb	r3, [r7, #2]
 80182dc:	4613      	mov	r3, r2
 80182de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80182e0:	2300      	movs	r3, #0
 80182e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80182e4:	2300      	movs	r3, #0
 80182e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80182ee:	78bb      	ldrb	r3, [r7, #2]
 80182f0:	883a      	ldrh	r2, [r7, #0]
 80182f2:	78f9      	ldrb	r1, [r7, #3]
 80182f4:	f7f1 fae3 	bl	80098be <HAL_PCD_EP_Open>
 80182f8:	4603      	mov	r3, r0
 80182fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80182fc:	7bfb      	ldrb	r3, [r7, #15]
 80182fe:	4618      	mov	r0, r3
 8018300:	f000 f958 	bl	80185b4 <USBD_Get_USB_Status>
 8018304:	4603      	mov	r3, r0
 8018306:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018308:	7bbb      	ldrb	r3, [r7, #14]
}
 801830a:	4618      	mov	r0, r3
 801830c:	3710      	adds	r7, #16
 801830e:	46bd      	mov	sp, r7
 8018310:	bd80      	pop	{r7, pc}

08018312 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018312:	b580      	push	{r7, lr}
 8018314:	b084      	sub	sp, #16
 8018316:	af00      	add	r7, sp, #0
 8018318:	6078      	str	r0, [r7, #4]
 801831a:	460b      	mov	r3, r1
 801831c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801831e:	2300      	movs	r3, #0
 8018320:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018322:	2300      	movs	r3, #0
 8018324:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801832c:	78fa      	ldrb	r2, [r7, #3]
 801832e:	4611      	mov	r1, r2
 8018330:	4618      	mov	r0, r3
 8018332:	f7f1 fb23 	bl	800997c <HAL_PCD_EP_Close>
 8018336:	4603      	mov	r3, r0
 8018338:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801833a:	7bfb      	ldrb	r3, [r7, #15]
 801833c:	4618      	mov	r0, r3
 801833e:	f000 f939 	bl	80185b4 <USBD_Get_USB_Status>
 8018342:	4603      	mov	r3, r0
 8018344:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018346:	7bbb      	ldrb	r3, [r7, #14]
}
 8018348:	4618      	mov	r0, r3
 801834a:	3710      	adds	r7, #16
 801834c:	46bd      	mov	sp, r7
 801834e:	bd80      	pop	{r7, pc}

08018350 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018350:	b580      	push	{r7, lr}
 8018352:	b084      	sub	sp, #16
 8018354:	af00      	add	r7, sp, #0
 8018356:	6078      	str	r0, [r7, #4]
 8018358:	460b      	mov	r3, r1
 801835a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801835c:	2300      	movs	r3, #0
 801835e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018360:	2300      	movs	r3, #0
 8018362:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801836a:	78fa      	ldrb	r2, [r7, #3]
 801836c:	4611      	mov	r1, r2
 801836e:	4618      	mov	r0, r3
 8018370:	f7f1 fbcc 	bl	8009b0c <HAL_PCD_EP_SetStall>
 8018374:	4603      	mov	r3, r0
 8018376:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018378:	7bfb      	ldrb	r3, [r7, #15]
 801837a:	4618      	mov	r0, r3
 801837c:	f000 f91a 	bl	80185b4 <USBD_Get_USB_Status>
 8018380:	4603      	mov	r3, r0
 8018382:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018384:	7bbb      	ldrb	r3, [r7, #14]
}
 8018386:	4618      	mov	r0, r3
 8018388:	3710      	adds	r7, #16
 801838a:	46bd      	mov	sp, r7
 801838c:	bd80      	pop	{r7, pc}

0801838e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801838e:	b580      	push	{r7, lr}
 8018390:	b084      	sub	sp, #16
 8018392:	af00      	add	r7, sp, #0
 8018394:	6078      	str	r0, [r7, #4]
 8018396:	460b      	mov	r3, r1
 8018398:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801839a:	2300      	movs	r3, #0
 801839c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801839e:	2300      	movs	r3, #0
 80183a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80183a8:	78fa      	ldrb	r2, [r7, #3]
 80183aa:	4611      	mov	r1, r2
 80183ac:	4618      	mov	r0, r3
 80183ae:	f7f1 fbff 	bl	8009bb0 <HAL_PCD_EP_ClrStall>
 80183b2:	4603      	mov	r3, r0
 80183b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80183b6:	7bfb      	ldrb	r3, [r7, #15]
 80183b8:	4618      	mov	r0, r3
 80183ba:	f000 f8fb 	bl	80185b4 <USBD_Get_USB_Status>
 80183be:	4603      	mov	r3, r0
 80183c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80183c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80183c4:	4618      	mov	r0, r3
 80183c6:	3710      	adds	r7, #16
 80183c8:	46bd      	mov	sp, r7
 80183ca:	bd80      	pop	{r7, pc}

080183cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80183cc:	b480      	push	{r7}
 80183ce:	b085      	sub	sp, #20
 80183d0:	af00      	add	r7, sp, #0
 80183d2:	6078      	str	r0, [r7, #4]
 80183d4:	460b      	mov	r3, r1
 80183d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80183de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80183e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	da0b      	bge.n	8018400 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80183e8:	78fb      	ldrb	r3, [r7, #3]
 80183ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80183ee:	68f9      	ldr	r1, [r7, #12]
 80183f0:	4613      	mov	r3, r2
 80183f2:	009b      	lsls	r3, r3, #2
 80183f4:	4413      	add	r3, r2
 80183f6:	00db      	lsls	r3, r3, #3
 80183f8:	440b      	add	r3, r1
 80183fa:	3312      	adds	r3, #18
 80183fc:	781b      	ldrb	r3, [r3, #0]
 80183fe:	e00b      	b.n	8018418 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018400:	78fb      	ldrb	r3, [r7, #3]
 8018402:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018406:	68f9      	ldr	r1, [r7, #12]
 8018408:	4613      	mov	r3, r2
 801840a:	009b      	lsls	r3, r3, #2
 801840c:	4413      	add	r3, r2
 801840e:	00db      	lsls	r3, r3, #3
 8018410:	440b      	add	r3, r1
 8018412:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8018416:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018418:	4618      	mov	r0, r3
 801841a:	3714      	adds	r7, #20
 801841c:	46bd      	mov	sp, r7
 801841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018422:	4770      	bx	lr

08018424 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018424:	b580      	push	{r7, lr}
 8018426:	b084      	sub	sp, #16
 8018428:	af00      	add	r7, sp, #0
 801842a:	6078      	str	r0, [r7, #4]
 801842c:	460b      	mov	r3, r1
 801842e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018430:	2300      	movs	r3, #0
 8018432:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018434:	2300      	movs	r3, #0
 8018436:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801843e:	78fa      	ldrb	r2, [r7, #3]
 8018440:	4611      	mov	r1, r2
 8018442:	4618      	mov	r0, r3
 8018444:	f7f1 fa17 	bl	8009876 <HAL_PCD_SetAddress>
 8018448:	4603      	mov	r3, r0
 801844a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801844c:	7bfb      	ldrb	r3, [r7, #15]
 801844e:	4618      	mov	r0, r3
 8018450:	f000 f8b0 	bl	80185b4 <USBD_Get_USB_Status>
 8018454:	4603      	mov	r3, r0
 8018456:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018458:	7bbb      	ldrb	r3, [r7, #14]
}
 801845a:	4618      	mov	r0, r3
 801845c:	3710      	adds	r7, #16
 801845e:	46bd      	mov	sp, r7
 8018460:	bd80      	pop	{r7, pc}

08018462 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018462:	b580      	push	{r7, lr}
 8018464:	b086      	sub	sp, #24
 8018466:	af00      	add	r7, sp, #0
 8018468:	60f8      	str	r0, [r7, #12]
 801846a:	607a      	str	r2, [r7, #4]
 801846c:	603b      	str	r3, [r7, #0]
 801846e:	460b      	mov	r3, r1
 8018470:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018472:	2300      	movs	r3, #0
 8018474:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018476:	2300      	movs	r3, #0
 8018478:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801847a:	68fb      	ldr	r3, [r7, #12]
 801847c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018480:	7af9      	ldrb	r1, [r7, #11]
 8018482:	683b      	ldr	r3, [r7, #0]
 8018484:	687a      	ldr	r2, [r7, #4]
 8018486:	f7f1 fb0a 	bl	8009a9e <HAL_PCD_EP_Transmit>
 801848a:	4603      	mov	r3, r0
 801848c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801848e:	7dfb      	ldrb	r3, [r7, #23]
 8018490:	4618      	mov	r0, r3
 8018492:	f000 f88f 	bl	80185b4 <USBD_Get_USB_Status>
 8018496:	4603      	mov	r3, r0
 8018498:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801849a:	7dbb      	ldrb	r3, [r7, #22]
}
 801849c:	4618      	mov	r0, r3
 801849e:	3718      	adds	r7, #24
 80184a0:	46bd      	mov	sp, r7
 80184a2:	bd80      	pop	{r7, pc}

080184a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80184a4:	b580      	push	{r7, lr}
 80184a6:	b086      	sub	sp, #24
 80184a8:	af00      	add	r7, sp, #0
 80184aa:	60f8      	str	r0, [r7, #12]
 80184ac:	607a      	str	r2, [r7, #4]
 80184ae:	603b      	str	r3, [r7, #0]
 80184b0:	460b      	mov	r3, r1
 80184b2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80184b4:	2300      	movs	r3, #0
 80184b6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80184b8:	2300      	movs	r3, #0
 80184ba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80184bc:	68fb      	ldr	r3, [r7, #12]
 80184be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80184c2:	7af9      	ldrb	r1, [r7, #11]
 80184c4:	683b      	ldr	r3, [r7, #0]
 80184c6:	687a      	ldr	r2, [r7, #4]
 80184c8:	f7f1 faa0 	bl	8009a0c <HAL_PCD_EP_Receive>
 80184cc:	4603      	mov	r3, r0
 80184ce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80184d0:	7dfb      	ldrb	r3, [r7, #23]
 80184d2:	4618      	mov	r0, r3
 80184d4:	f000 f86e 	bl	80185b4 <USBD_Get_USB_Status>
 80184d8:	4603      	mov	r3, r0
 80184da:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80184dc:	7dbb      	ldrb	r3, [r7, #22]
}
 80184de:	4618      	mov	r0, r3
 80184e0:	3718      	adds	r7, #24
 80184e2:	46bd      	mov	sp, r7
 80184e4:	bd80      	pop	{r7, pc}

080184e6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80184e6:	b580      	push	{r7, lr}
 80184e8:	b082      	sub	sp, #8
 80184ea:	af00      	add	r7, sp, #0
 80184ec:	6078      	str	r0, [r7, #4]
 80184ee:	460b      	mov	r3, r1
 80184f0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80184f8:	78fa      	ldrb	r2, [r7, #3]
 80184fa:	4611      	mov	r1, r2
 80184fc:	4618      	mov	r0, r3
 80184fe:	f7f1 fab6 	bl	8009a6e <HAL_PCD_EP_GetRxCount>
 8018502:	4603      	mov	r3, r0
}
 8018504:	4618      	mov	r0, r3
 8018506:	3708      	adds	r7, #8
 8018508:	46bd      	mov	sp, r7
 801850a:	bd80      	pop	{r7, pc}

0801850c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801850c:	b580      	push	{r7, lr}
 801850e:	b082      	sub	sp, #8
 8018510:	af00      	add	r7, sp, #0
 8018512:	6078      	str	r0, [r7, #4]
 8018514:	460b      	mov	r3, r1
 8018516:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8018518:	78fb      	ldrb	r3, [r7, #3]
 801851a:	2b00      	cmp	r3, #0
 801851c:	d002      	beq.n	8018524 <HAL_PCDEx_LPM_Callback+0x18>
 801851e:	2b01      	cmp	r3, #1
 8018520:	d013      	beq.n	801854a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8018522:	e023      	b.n	801856c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	7a5b      	ldrb	r3, [r3, #9]
 8018528:	2b00      	cmp	r3, #0
 801852a:	d007      	beq.n	801853c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801852c:	f000 f83c 	bl	80185a8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018530:	4b10      	ldr	r3, [pc, #64]	@ (8018574 <HAL_PCDEx_LPM_Callback+0x68>)
 8018532:	691b      	ldr	r3, [r3, #16]
 8018534:	4a0f      	ldr	r2, [pc, #60]	@ (8018574 <HAL_PCDEx_LPM_Callback+0x68>)
 8018536:	f023 0306 	bic.w	r3, r3, #6
 801853a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018542:	4618      	mov	r0, r3
 8018544:	f7fa f961 	bl	801280a <USBD_LL_Resume>
    break;
 8018548:	e010      	b.n	801856c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018550:	4618      	mov	r0, r3
 8018552:	f7fa f93e 	bl	80127d2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	7a5b      	ldrb	r3, [r3, #9]
 801855a:	2b00      	cmp	r3, #0
 801855c:	d005      	beq.n	801856a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801855e:	4b05      	ldr	r3, [pc, #20]	@ (8018574 <HAL_PCDEx_LPM_Callback+0x68>)
 8018560:	691b      	ldr	r3, [r3, #16]
 8018562:	4a04      	ldr	r2, [pc, #16]	@ (8018574 <HAL_PCDEx_LPM_Callback+0x68>)
 8018564:	f043 0306 	orr.w	r3, r3, #6
 8018568:	6113      	str	r3, [r2, #16]
    break;
 801856a:	bf00      	nop
}
 801856c:	bf00      	nop
 801856e:	3708      	adds	r7, #8
 8018570:	46bd      	mov	sp, r7
 8018572:	bd80      	pop	{r7, pc}
 8018574:	e000ed00 	.word	0xe000ed00

08018578 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018578:	b480      	push	{r7}
 801857a:	b083      	sub	sp, #12
 801857c:	af00      	add	r7, sp, #0
 801857e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018580:	4b03      	ldr	r3, [pc, #12]	@ (8018590 <USBD_static_malloc+0x18>)
}
 8018582:	4618      	mov	r0, r3
 8018584:	370c      	adds	r7, #12
 8018586:	46bd      	mov	sp, r7
 8018588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801858c:	4770      	bx	lr
 801858e:	bf00      	nop
 8018590:	200023a4 	.word	0x200023a4

08018594 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018594:	b480      	push	{r7}
 8018596:	b083      	sub	sp, #12
 8018598:	af00      	add	r7, sp, #0
 801859a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801859c:	bf00      	nop
 801859e:	370c      	adds	r7, #12
 80185a0:	46bd      	mov	sp, r7
 80185a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185a6:	4770      	bx	lr

080185a8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80185a8:	b580      	push	{r7, lr}
 80185aa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80185ac:	f7ee f8a4 	bl	80066f8 <SystemClock_Config>
}
 80185b0:	bf00      	nop
 80185b2:	bd80      	pop	{r7, pc}

080185b4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80185b4:	b480      	push	{r7}
 80185b6:	b085      	sub	sp, #20
 80185b8:	af00      	add	r7, sp, #0
 80185ba:	4603      	mov	r3, r0
 80185bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80185be:	2300      	movs	r3, #0
 80185c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80185c2:	79fb      	ldrb	r3, [r7, #7]
 80185c4:	2b03      	cmp	r3, #3
 80185c6:	d817      	bhi.n	80185f8 <USBD_Get_USB_Status+0x44>
 80185c8:	a201      	add	r2, pc, #4	@ (adr r2, 80185d0 <USBD_Get_USB_Status+0x1c>)
 80185ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80185ce:	bf00      	nop
 80185d0:	080185e1 	.word	0x080185e1
 80185d4:	080185e7 	.word	0x080185e7
 80185d8:	080185ed 	.word	0x080185ed
 80185dc:	080185f3 	.word	0x080185f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80185e0:	2300      	movs	r3, #0
 80185e2:	73fb      	strb	r3, [r7, #15]
    break;
 80185e4:	e00b      	b.n	80185fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80185e6:	2303      	movs	r3, #3
 80185e8:	73fb      	strb	r3, [r7, #15]
    break;
 80185ea:	e008      	b.n	80185fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80185ec:	2301      	movs	r3, #1
 80185ee:	73fb      	strb	r3, [r7, #15]
    break;
 80185f0:	e005      	b.n	80185fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80185f2:	2303      	movs	r3, #3
 80185f4:	73fb      	strb	r3, [r7, #15]
    break;
 80185f6:	e002      	b.n	80185fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80185f8:	2303      	movs	r3, #3
 80185fa:	73fb      	strb	r3, [r7, #15]
    break;
 80185fc:	bf00      	nop
  }
  return usb_status;
 80185fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8018600:	4618      	mov	r0, r3
 8018602:	3714      	adds	r7, #20
 8018604:	46bd      	mov	sp, r7
 8018606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801860a:	4770      	bx	lr

0801860c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801860c:	b480      	push	{r7}
 801860e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8018610:	4b05      	ldr	r3, [pc, #20]	@ (8018628 <UTIL_LPM_Init+0x1c>)
 8018612:	2200      	movs	r2, #0
 8018614:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8018616:	4b05      	ldr	r3, [pc, #20]	@ (801862c <UTIL_LPM_Init+0x20>)
 8018618:	2200      	movs	r2, #0
 801861a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801861c:	bf00      	nop
 801861e:	46bd      	mov	sp, r7
 8018620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018624:	4770      	bx	lr
 8018626:	bf00      	nop
 8018628:	200025c4 	.word	0x200025c4
 801862c:	200025c8 	.word	0x200025c8

08018630 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8018630:	b480      	push	{r7}
 8018632:	b087      	sub	sp, #28
 8018634:	af00      	add	r7, sp, #0
 8018636:	6078      	str	r0, [r7, #4]
 8018638:	460b      	mov	r3, r1
 801863a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801863c:	f3ef 8310 	mrs	r3, PRIMASK
 8018640:	613b      	str	r3, [r7, #16]
  return(result);
 8018642:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8018644:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018646:	b672      	cpsid	i
}
 8018648:	bf00      	nop
  
  switch(state)
 801864a:	78fb      	ldrb	r3, [r7, #3]
 801864c:	2b00      	cmp	r3, #0
 801864e:	d008      	beq.n	8018662 <UTIL_LPM_SetOffMode+0x32>
 8018650:	2b01      	cmp	r3, #1
 8018652:	d10e      	bne.n	8018672 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8018654:	4b0d      	ldr	r3, [pc, #52]	@ (801868c <UTIL_LPM_SetOffMode+0x5c>)
 8018656:	681a      	ldr	r2, [r3, #0]
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	4313      	orrs	r3, r2
 801865c:	4a0b      	ldr	r2, [pc, #44]	@ (801868c <UTIL_LPM_SetOffMode+0x5c>)
 801865e:	6013      	str	r3, [r2, #0]
      break;
 8018660:	e008      	b.n	8018674 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	43da      	mvns	r2, r3
 8018666:	4b09      	ldr	r3, [pc, #36]	@ (801868c <UTIL_LPM_SetOffMode+0x5c>)
 8018668:	681b      	ldr	r3, [r3, #0]
 801866a:	4013      	ands	r3, r2
 801866c:	4a07      	ldr	r2, [pc, #28]	@ (801868c <UTIL_LPM_SetOffMode+0x5c>)
 801866e:	6013      	str	r3, [r2, #0]
      break;
 8018670:	e000      	b.n	8018674 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8018672:	bf00      	nop
 8018674:	697b      	ldr	r3, [r7, #20]
 8018676:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018678:	68fb      	ldr	r3, [r7, #12]
 801867a:	f383 8810 	msr	PRIMASK, r3
}
 801867e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8018680:	bf00      	nop
 8018682:	371c      	adds	r7, #28
 8018684:	46bd      	mov	sp, r7
 8018686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801868a:	4770      	bx	lr
 801868c:	200025c8 	.word	0x200025c8

08018690 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8018690:	b580      	push	{r7, lr}
 8018692:	b090      	sub	sp, #64	@ 0x40
 8018694:	af00      	add	r7, sp, #0
 8018696:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8018698:	4b73      	ldr	r3, [pc, #460]	@ (8018868 <UTIL_SEQ_Run+0x1d8>)
 801869a:	681b      	ldr	r3, [r3, #0]
 801869c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801869e:	4b72      	ldr	r3, [pc, #456]	@ (8018868 <UTIL_SEQ_Run+0x1d8>)
 80186a0:	681a      	ldr	r2, [r3, #0]
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	4013      	ands	r3, r2
 80186a6:	4a70      	ldr	r2, [pc, #448]	@ (8018868 <UTIL_SEQ_Run+0x1d8>)
 80186a8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80186aa:	4b70      	ldr	r3, [pc, #448]	@ (801886c <UTIL_SEQ_Run+0x1dc>)
 80186ac:	681b      	ldr	r3, [r3, #0]
 80186ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 80186b0:	4b6f      	ldr	r3, [pc, #444]	@ (8018870 <UTIL_SEQ_Run+0x1e0>)
 80186b2:	681b      	ldr	r3, [r3, #0]
 80186b4:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 80186b6:	4b6f      	ldr	r3, [pc, #444]	@ (8018874 <UTIL_SEQ_Run+0x1e4>)
 80186b8:	681b      	ldr	r3, [r3, #0]
 80186ba:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 80186bc:	4b6e      	ldr	r3, [pc, #440]	@ (8018878 <UTIL_SEQ_Run+0x1e8>)
 80186be:	681b      	ldr	r3, [r3, #0]
 80186c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80186c2:	e08d      	b.n	80187e0 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 80186c4:	2300      	movs	r3, #0
 80186c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80186c8:	e002      	b.n	80186d0 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 80186ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80186cc:	3301      	adds	r3, #1
 80186ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80186d0:	4a6a      	ldr	r2, [pc, #424]	@ (801887c <UTIL_SEQ_Run+0x1ec>)
 80186d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80186d4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80186d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80186da:	401a      	ands	r2, r3
 80186dc:	4b62      	ldr	r3, [pc, #392]	@ (8018868 <UTIL_SEQ_Run+0x1d8>)
 80186de:	681b      	ldr	r3, [r3, #0]
 80186e0:	4013      	ands	r3, r2
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	d0f1      	beq.n	80186ca <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80186e6:	4a65      	ldr	r2, [pc, #404]	@ (801887c <UTIL_SEQ_Run+0x1ec>)
 80186e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80186ea:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80186ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80186f0:	401a      	ands	r2, r3
 80186f2:	4b5d      	ldr	r3, [pc, #372]	@ (8018868 <UTIL_SEQ_Run+0x1d8>)
 80186f4:	681b      	ldr	r3, [r3, #0]
 80186f6:	4013      	ands	r3, r2
 80186f8:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80186fa:	4a60      	ldr	r2, [pc, #384]	@ (801887c <UTIL_SEQ_Run+0x1ec>)
 80186fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80186fe:	00db      	lsls	r3, r3, #3
 8018700:	4413      	add	r3, r2
 8018702:	685a      	ldr	r2, [r3, #4]
 8018704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018706:	4013      	ands	r3, r2
 8018708:	2b00      	cmp	r3, #0
 801870a:	d106      	bne.n	801871a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801870c:	4a5b      	ldr	r2, [pc, #364]	@ (801887c <UTIL_SEQ_Run+0x1ec>)
 801870e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018710:	00db      	lsls	r3, r3, #3
 8018712:	4413      	add	r3, r2
 8018714:	f04f 32ff 	mov.w	r2, #4294967295
 8018718:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801871a:	4a58      	ldr	r2, [pc, #352]	@ (801887c <UTIL_SEQ_Run+0x1ec>)
 801871c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801871e:	00db      	lsls	r3, r3, #3
 8018720:	4413      	add	r3, r2
 8018722:	685a      	ldr	r2, [r3, #4]
 8018724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018726:	4013      	ands	r3, r2
 8018728:	4618      	mov	r0, r3
 801872a:	f000 f9c1 	bl	8018ab0 <SEQ_BitPosition>
 801872e:	4603      	mov	r3, r0
 8018730:	461a      	mov	r2, r3
 8018732:	4b53      	ldr	r3, [pc, #332]	@ (8018880 <UTIL_SEQ_Run+0x1f0>)
 8018734:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8018736:	4a51      	ldr	r2, [pc, #324]	@ (801887c <UTIL_SEQ_Run+0x1ec>)
 8018738:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801873a:	00db      	lsls	r3, r3, #3
 801873c:	4413      	add	r3, r2
 801873e:	685a      	ldr	r2, [r3, #4]
 8018740:	4b4f      	ldr	r3, [pc, #316]	@ (8018880 <UTIL_SEQ_Run+0x1f0>)
 8018742:	681b      	ldr	r3, [r3, #0]
 8018744:	2101      	movs	r1, #1
 8018746:	fa01 f303 	lsl.w	r3, r1, r3
 801874a:	43db      	mvns	r3, r3
 801874c:	401a      	ands	r2, r3
 801874e:	494b      	ldr	r1, [pc, #300]	@ (801887c <UTIL_SEQ_Run+0x1ec>)
 8018750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018752:	00db      	lsls	r3, r3, #3
 8018754:	440b      	add	r3, r1
 8018756:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018758:	f3ef 8310 	mrs	r3, PRIMASK
 801875c:	61bb      	str	r3, [r7, #24]
  return(result);
 801875e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8018760:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8018762:	b672      	cpsid	i
}
 8018764:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8018766:	4b46      	ldr	r3, [pc, #280]	@ (8018880 <UTIL_SEQ_Run+0x1f0>)
 8018768:	681b      	ldr	r3, [r3, #0]
 801876a:	2201      	movs	r2, #1
 801876c:	fa02 f303 	lsl.w	r3, r2, r3
 8018770:	43da      	mvns	r2, r3
 8018772:	4b3e      	ldr	r3, [pc, #248]	@ (801886c <UTIL_SEQ_Run+0x1dc>)
 8018774:	681b      	ldr	r3, [r3, #0]
 8018776:	4013      	ands	r3, r2
 8018778:	4a3c      	ldr	r2, [pc, #240]	@ (801886c <UTIL_SEQ_Run+0x1dc>)
 801877a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801877c:	2301      	movs	r3, #1
 801877e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018780:	e013      	b.n	80187aa <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8018782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018784:	3b01      	subs	r3, #1
 8018786:	4a3d      	ldr	r2, [pc, #244]	@ (801887c <UTIL_SEQ_Run+0x1ec>)
 8018788:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801878c:	4b3c      	ldr	r3, [pc, #240]	@ (8018880 <UTIL_SEQ_Run+0x1f0>)
 801878e:	681b      	ldr	r3, [r3, #0]
 8018790:	2201      	movs	r2, #1
 8018792:	fa02 f303 	lsl.w	r3, r2, r3
 8018796:	43da      	mvns	r2, r3
 8018798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801879a:	3b01      	subs	r3, #1
 801879c:	400a      	ands	r2, r1
 801879e:	4937      	ldr	r1, [pc, #220]	@ (801887c <UTIL_SEQ_Run+0x1ec>)
 80187a0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80187a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80187a6:	3b01      	subs	r3, #1
 80187a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80187aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80187ac:	2b00      	cmp	r3, #0
 80187ae:	d1e8      	bne.n	8018782 <UTIL_SEQ_Run+0xf2>
 80187b0:	6a3b      	ldr	r3, [r7, #32]
 80187b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187b4:	697b      	ldr	r3, [r7, #20]
 80187b6:	f383 8810 	msr	PRIMASK, r3
}
 80187ba:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80187bc:	4b30      	ldr	r3, [pc, #192]	@ (8018880 <UTIL_SEQ_Run+0x1f0>)
 80187be:	681b      	ldr	r3, [r3, #0]
 80187c0:	4a30      	ldr	r2, [pc, #192]	@ (8018884 <UTIL_SEQ_Run+0x1f4>)
 80187c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80187c6:	4798      	blx	r3

    local_taskset = TaskSet;
 80187c8:	4b28      	ldr	r3, [pc, #160]	@ (801886c <UTIL_SEQ_Run+0x1dc>)
 80187ca:	681b      	ldr	r3, [r3, #0]
 80187cc:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 80187ce:	4b28      	ldr	r3, [pc, #160]	@ (8018870 <UTIL_SEQ_Run+0x1e0>)
 80187d0:	681b      	ldr	r3, [r3, #0]
 80187d2:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 80187d4:	4b27      	ldr	r3, [pc, #156]	@ (8018874 <UTIL_SEQ_Run+0x1e4>)
 80187d6:	681b      	ldr	r3, [r3, #0]
 80187d8:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 80187da:	4b27      	ldr	r3, [pc, #156]	@ (8018878 <UTIL_SEQ_Run+0x1e8>)
 80187dc:	681b      	ldr	r3, [r3, #0]
 80187de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80187e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80187e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80187e4:	401a      	ands	r2, r3
 80187e6:	4b20      	ldr	r3, [pc, #128]	@ (8018868 <UTIL_SEQ_Run+0x1d8>)
 80187e8:	681b      	ldr	r3, [r3, #0]
 80187ea:	4013      	ands	r3, r2
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	d005      	beq.n	80187fc <UTIL_SEQ_Run+0x16c>
 80187f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80187f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187f4:	4013      	ands	r3, r2
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	f43f af64 	beq.w	80186c4 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80187fc:	4b20      	ldr	r3, [pc, #128]	@ (8018880 <UTIL_SEQ_Run+0x1f0>)
 80187fe:	f04f 32ff 	mov.w	r2, #4294967295
 8018802:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8018804:	f000 f946 	bl	8018a94 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018808:	f3ef 8310 	mrs	r3, PRIMASK
 801880c:	613b      	str	r3, [r7, #16]
  return(result);
 801880e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8018810:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8018812:	b672      	cpsid	i
}
 8018814:	bf00      	nop
  local_taskset = TaskSet;
 8018816:	4b15      	ldr	r3, [pc, #84]	@ (801886c <UTIL_SEQ_Run+0x1dc>)
 8018818:	681b      	ldr	r3, [r3, #0]
 801881a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801881c:	4b14      	ldr	r3, [pc, #80]	@ (8018870 <UTIL_SEQ_Run+0x1e0>)
 801881e:	681b      	ldr	r3, [r3, #0]
 8018820:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8018822:	4b14      	ldr	r3, [pc, #80]	@ (8018874 <UTIL_SEQ_Run+0x1e4>)
 8018824:	681b      	ldr	r3, [r3, #0]
 8018826:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8018828:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801882a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801882c:	401a      	ands	r2, r3
 801882e:	4b0e      	ldr	r3, [pc, #56]	@ (8018868 <UTIL_SEQ_Run+0x1d8>)
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	4013      	ands	r3, r2
 8018834:	2b00      	cmp	r3, #0
 8018836:	d107      	bne.n	8018848 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8018838:	4b0f      	ldr	r3, [pc, #60]	@ (8018878 <UTIL_SEQ_Run+0x1e8>)
 801883a:	681a      	ldr	r2, [r3, #0]
 801883c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801883e:	4013      	ands	r3, r2
 8018840:	2b00      	cmp	r3, #0
 8018842:	d101      	bne.n	8018848 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8018844:	f7ec fc08 	bl	8005058 <UTIL_SEQ_Idle>
 8018848:	69fb      	ldr	r3, [r7, #28]
 801884a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801884c:	68fb      	ldr	r3, [r7, #12]
 801884e:	f383 8810 	msr	PRIMASK, r3
}
 8018852:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8018854:	f000 f925 	bl	8018aa2 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8018858:	4a03      	ldr	r2, [pc, #12]	@ (8018868 <UTIL_SEQ_Run+0x1d8>)
 801885a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801885c:	6013      	str	r3, [r2, #0]

  return;
 801885e:	bf00      	nop
}
 8018860:	3740      	adds	r7, #64	@ 0x40
 8018862:	46bd      	mov	sp, r7
 8018864:	bd80      	pop	{r7, pc}
 8018866:	bf00      	nop
 8018868:	20000140 	.word	0x20000140
 801886c:	200025cc 	.word	0x200025cc
 8018870:	200025d0 	.word	0x200025d0
 8018874:	2000013c 	.word	0x2000013c
 8018878:	200025d4 	.word	0x200025d4
 801887c:	2000265c 	.word	0x2000265c
 8018880:	200025d8 	.word	0x200025d8
 8018884:	200025dc 	.word	0x200025dc

08018888 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8018888:	b580      	push	{r7, lr}
 801888a:	b088      	sub	sp, #32
 801888c:	af00      	add	r7, sp, #0
 801888e:	60f8      	str	r0, [r7, #12]
 8018890:	60b9      	str	r1, [r7, #8]
 8018892:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018894:	f3ef 8310 	mrs	r3, PRIMASK
 8018898:	617b      	str	r3, [r7, #20]
  return(result);
 801889a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801889c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801889e:	b672      	cpsid	i
}
 80188a0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80188a2:	68f8      	ldr	r0, [r7, #12]
 80188a4:	f000 f904 	bl	8018ab0 <SEQ_BitPosition>
 80188a8:	4603      	mov	r3, r0
 80188aa:	4619      	mov	r1, r3
 80188ac:	4a06      	ldr	r2, [pc, #24]	@ (80188c8 <UTIL_SEQ_RegTask+0x40>)
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80188b4:	69fb      	ldr	r3, [r7, #28]
 80188b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188b8:	69bb      	ldr	r3, [r7, #24]
 80188ba:	f383 8810 	msr	PRIMASK, r3
}
 80188be:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80188c0:	bf00      	nop
}
 80188c2:	3720      	adds	r7, #32
 80188c4:	46bd      	mov	sp, r7
 80188c6:	bd80      	pop	{r7, pc}
 80188c8:	200025dc 	.word	0x200025dc

080188cc <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80188cc:	b480      	push	{r7}
 80188ce:	b087      	sub	sp, #28
 80188d0:	af00      	add	r7, sp, #0
 80188d2:	6078      	str	r0, [r7, #4]
 80188d4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80188d6:	f3ef 8310 	mrs	r3, PRIMASK
 80188da:	60fb      	str	r3, [r7, #12]
  return(result);
 80188dc:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80188de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80188e0:	b672      	cpsid	i
}
 80188e2:	bf00      	nop

  TaskSet |= TaskId_bm;
 80188e4:	4b0d      	ldr	r3, [pc, #52]	@ (801891c <UTIL_SEQ_SetTask+0x50>)
 80188e6:	681a      	ldr	r2, [r3, #0]
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	4313      	orrs	r3, r2
 80188ec:	4a0b      	ldr	r2, [pc, #44]	@ (801891c <UTIL_SEQ_SetTask+0x50>)
 80188ee:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80188f0:	4a0b      	ldr	r2, [pc, #44]	@ (8018920 <UTIL_SEQ_SetTask+0x54>)
 80188f2:	683b      	ldr	r3, [r7, #0]
 80188f4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	431a      	orrs	r2, r3
 80188fc:	4908      	ldr	r1, [pc, #32]	@ (8018920 <UTIL_SEQ_SetTask+0x54>)
 80188fe:	683b      	ldr	r3, [r7, #0]
 8018900:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8018904:	697b      	ldr	r3, [r7, #20]
 8018906:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018908:	693b      	ldr	r3, [r7, #16]
 801890a:	f383 8810 	msr	PRIMASK, r3
}
 801890e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8018910:	bf00      	nop
}
 8018912:	371c      	adds	r7, #28
 8018914:	46bd      	mov	sp, r7
 8018916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801891a:	4770      	bx	lr
 801891c:	200025cc 	.word	0x200025cc
 8018920:	2000265c 	.word	0x2000265c

08018924 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8018924:	b480      	push	{r7}
 8018926:	b087      	sub	sp, #28
 8018928:	af00      	add	r7, sp, #0
 801892a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801892c:	f3ef 8310 	mrs	r3, PRIMASK
 8018930:	60fb      	str	r3, [r7, #12]
  return(result);
 8018932:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8018934:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018936:	b672      	cpsid	i
}
 8018938:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	43da      	mvns	r2, r3
 801893e:	4b08      	ldr	r3, [pc, #32]	@ (8018960 <UTIL_SEQ_PauseTask+0x3c>)
 8018940:	681b      	ldr	r3, [r3, #0]
 8018942:	4013      	ands	r3, r2
 8018944:	4a06      	ldr	r2, [pc, #24]	@ (8018960 <UTIL_SEQ_PauseTask+0x3c>)
 8018946:	6013      	str	r3, [r2, #0]
 8018948:	697b      	ldr	r3, [r7, #20]
 801894a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801894c:	693b      	ldr	r3, [r7, #16]
 801894e:	f383 8810 	msr	PRIMASK, r3
}
 8018952:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8018954:	bf00      	nop
}
 8018956:	371c      	adds	r7, #28
 8018958:	46bd      	mov	sp, r7
 801895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801895e:	4770      	bx	lr
 8018960:	2000013c 	.word	0x2000013c

08018964 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8018964:	b480      	push	{r7}
 8018966:	b087      	sub	sp, #28
 8018968:	af00      	add	r7, sp, #0
 801896a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801896c:	f3ef 8310 	mrs	r3, PRIMASK
 8018970:	60fb      	str	r3, [r7, #12]
  return(result);
 8018972:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8018974:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018976:	b672      	cpsid	i
}
 8018978:	bf00      	nop

  TaskMask |= TaskId_bm;
 801897a:	4b09      	ldr	r3, [pc, #36]	@ (80189a0 <UTIL_SEQ_ResumeTask+0x3c>)
 801897c:	681a      	ldr	r2, [r3, #0]
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	4313      	orrs	r3, r2
 8018982:	4a07      	ldr	r2, [pc, #28]	@ (80189a0 <UTIL_SEQ_ResumeTask+0x3c>)
 8018984:	6013      	str	r3, [r2, #0]
 8018986:	697b      	ldr	r3, [r7, #20]
 8018988:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801898a:	693b      	ldr	r3, [r7, #16]
 801898c:	f383 8810 	msr	PRIMASK, r3
}
 8018990:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8018992:	bf00      	nop
}
 8018994:	371c      	adds	r7, #28
 8018996:	46bd      	mov	sp, r7
 8018998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801899c:	4770      	bx	lr
 801899e:	bf00      	nop
 80189a0:	2000013c 	.word	0x2000013c

080189a4 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80189a4:	b480      	push	{r7}
 80189a6:	b087      	sub	sp, #28
 80189a8:	af00      	add	r7, sp, #0
 80189aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80189ac:	f3ef 8310 	mrs	r3, PRIMASK
 80189b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80189b2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80189b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80189b6:	b672      	cpsid	i
}
 80189b8:	bf00      	nop

  EvtSet |= EvtId_bm;
 80189ba:	4b09      	ldr	r3, [pc, #36]	@ (80189e0 <UTIL_SEQ_SetEvt+0x3c>)
 80189bc:	681a      	ldr	r2, [r3, #0]
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	4313      	orrs	r3, r2
 80189c2:	4a07      	ldr	r2, [pc, #28]	@ (80189e0 <UTIL_SEQ_SetEvt+0x3c>)
 80189c4:	6013      	str	r3, [r2, #0]
 80189c6:	697b      	ldr	r3, [r7, #20]
 80189c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80189ca:	693b      	ldr	r3, [r7, #16]
 80189cc:	f383 8810 	msr	PRIMASK, r3
}
 80189d0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80189d2:	bf00      	nop
}
 80189d4:	371c      	adds	r7, #28
 80189d6:	46bd      	mov	sp, r7
 80189d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189dc:	4770      	bx	lr
 80189de:	bf00      	nop
 80189e0:	200025d0 	.word	0x200025d0

080189e4 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80189e4:	b580      	push	{r7, lr}
 80189e6:	b088      	sub	sp, #32
 80189e8:	af00      	add	r7, sp, #0
 80189ea:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80189ec:	4b1f      	ldr	r3, [pc, #124]	@ (8018a6c <UTIL_SEQ_WaitEvt+0x88>)
 80189ee:	681b      	ldr	r3, [r3, #0]
 80189f0:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80189f2:	4b1e      	ldr	r3, [pc, #120]	@ (8018a6c <UTIL_SEQ_WaitEvt+0x88>)
 80189f4:	681b      	ldr	r3, [r3, #0]
 80189f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80189fa:	d102      	bne.n	8018a02 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 80189fc:	2300      	movs	r3, #0
 80189fe:	61fb      	str	r3, [r7, #28]
 8018a00:	e005      	b.n	8018a0e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8018a02:	4b1a      	ldr	r3, [pc, #104]	@ (8018a6c <UTIL_SEQ_WaitEvt+0x88>)
 8018a04:	681b      	ldr	r3, [r3, #0]
 8018a06:	2201      	movs	r2, #1
 8018a08:	fa02 f303 	lsl.w	r3, r2, r3
 8018a0c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8018a0e:	4b18      	ldr	r3, [pc, #96]	@ (8018a70 <UTIL_SEQ_WaitEvt+0x8c>)
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8018a14:	4a16      	ldr	r2, [pc, #88]	@ (8018a70 <UTIL_SEQ_WaitEvt+0x8c>)
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8018a1a:	e003      	b.n	8018a24 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8018a1c:	6879      	ldr	r1, [r7, #4]
 8018a1e:	69f8      	ldr	r0, [r7, #28]
 8018a20:	f000 f82a 	bl	8018a78 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8018a24:	4b13      	ldr	r3, [pc, #76]	@ (8018a74 <UTIL_SEQ_WaitEvt+0x90>)
 8018a26:	681a      	ldr	r2, [r3, #0]
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	4013      	ands	r3, r2
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	d0f5      	beq.n	8018a1c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8018a30:	4a0e      	ldr	r2, [pc, #56]	@ (8018a6c <UTIL_SEQ_WaitEvt+0x88>)
 8018a32:	69bb      	ldr	r3, [r7, #24]
 8018a34:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018a36:	f3ef 8310 	mrs	r3, PRIMASK
 8018a3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8018a3c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8018a3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8018a40:	b672      	cpsid	i
}
 8018a42:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	43da      	mvns	r2, r3
 8018a48:	4b0a      	ldr	r3, [pc, #40]	@ (8018a74 <UTIL_SEQ_WaitEvt+0x90>)
 8018a4a:	681b      	ldr	r3, [r3, #0]
 8018a4c:	4013      	ands	r3, r2
 8018a4e:	4a09      	ldr	r2, [pc, #36]	@ (8018a74 <UTIL_SEQ_WaitEvt+0x90>)
 8018a50:	6013      	str	r3, [r2, #0]
 8018a52:	693b      	ldr	r3, [r7, #16]
 8018a54:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a56:	68fb      	ldr	r3, [r7, #12]
 8018a58:	f383 8810 	msr	PRIMASK, r3
}
 8018a5c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8018a5e:	4a04      	ldr	r2, [pc, #16]	@ (8018a70 <UTIL_SEQ_WaitEvt+0x8c>)
 8018a60:	697b      	ldr	r3, [r7, #20]
 8018a62:	6013      	str	r3, [r2, #0]
  return;
 8018a64:	bf00      	nop
}
 8018a66:	3720      	adds	r7, #32
 8018a68:	46bd      	mov	sp, r7
 8018a6a:	bd80      	pop	{r7, pc}
 8018a6c:	200025d8 	.word	0x200025d8
 8018a70:	200025d4 	.word	0x200025d4
 8018a74:	200025d0 	.word	0x200025d0

08018a78 <UTIL_SEQ_EvtIdle>:
  UTIL_SEQ_bm_t local_evtwaited = EvtWaited;
  return (EvtSet & local_evtwaited);
}

__WEAK void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t TaskId_bm, UTIL_SEQ_bm_t EvtWaited_bm )
{
 8018a78:	b580      	push	{r7, lr}
 8018a7a:	b082      	sub	sp, #8
 8018a7c:	af00      	add	r7, sp, #0
 8018a7e:	6078      	str	r0, [r7, #4]
 8018a80:	6039      	str	r1, [r7, #0]
  (void)EvtWaited_bm;
  UTIL_SEQ_Run(~TaskId_bm);
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	43db      	mvns	r3, r3
 8018a86:	4618      	mov	r0, r3
 8018a88:	f7ff fe02 	bl	8018690 <UTIL_SEQ_Run>
  return;
 8018a8c:	bf00      	nop
}
 8018a8e:	3708      	adds	r7, #8
 8018a90:	46bd      	mov	sp, r7
 8018a92:	bd80      	pop	{r7, pc}

08018a94 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8018a94:	b480      	push	{r7}
 8018a96:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8018a98:	bf00      	nop
}
 8018a9a:	46bd      	mov	sp, r7
 8018a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aa0:	4770      	bx	lr

08018aa2 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8018aa2:	b480      	push	{r7}
 8018aa4:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8018aa6:	bf00      	nop
}
 8018aa8:	46bd      	mov	sp, r7
 8018aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aae:	4770      	bx	lr

08018ab0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8018ab0:	b480      	push	{r7}
 8018ab2:	b085      	sub	sp, #20
 8018ab4:	af00      	add	r7, sp, #0
 8018ab6:	6078      	str	r0, [r7, #4]
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 8018abc:	68fb      	ldr	r3, [r7, #12]
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	d101      	bne.n	8018ac6 <SEQ_BitPosition+0x16>
    return 32U;
 8018ac2:	2320      	movs	r3, #32
 8018ac4:	e003      	b.n	8018ace <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 8018ac6:	68fb      	ldr	r3, [r7, #12]
 8018ac8:	fab3 f383 	clz	r3, r3
 8018acc:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 8018ace:	f1c3 031f 	rsb	r3, r3, #31
 8018ad2:	b2db      	uxtb	r3, r3
}
 8018ad4:	4618      	mov	r0, r3
 8018ad6:	3714      	adds	r7, #20
 8018ad8:	46bd      	mov	sp, r7
 8018ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ade:	4770      	bx	lr

08018ae0 <cosf>:
 8018ae0:	ee10 3a10 	vmov	r3, s0
 8018ae4:	b507      	push	{r0, r1, r2, lr}
 8018ae6:	4a1e      	ldr	r2, [pc, #120]	@ (8018b60 <cosf+0x80>)
 8018ae8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018aec:	4293      	cmp	r3, r2
 8018aee:	d806      	bhi.n	8018afe <cosf+0x1e>
 8018af0:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8018b64 <cosf+0x84>
 8018af4:	b003      	add	sp, #12
 8018af6:	f85d eb04 	ldr.w	lr, [sp], #4
 8018afa:	f000 b87b 	b.w	8018bf4 <__kernel_cosf>
 8018afe:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8018b02:	d304      	bcc.n	8018b0e <cosf+0x2e>
 8018b04:	ee30 0a40 	vsub.f32	s0, s0, s0
 8018b08:	b003      	add	sp, #12
 8018b0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8018b0e:	4668      	mov	r0, sp
 8018b10:	f000 f910 	bl	8018d34 <__ieee754_rem_pio2f>
 8018b14:	f000 0003 	and.w	r0, r0, #3
 8018b18:	2801      	cmp	r0, #1
 8018b1a:	d009      	beq.n	8018b30 <cosf+0x50>
 8018b1c:	2802      	cmp	r0, #2
 8018b1e:	d010      	beq.n	8018b42 <cosf+0x62>
 8018b20:	b9b0      	cbnz	r0, 8018b50 <cosf+0x70>
 8018b22:	eddd 0a01 	vldr	s1, [sp, #4]
 8018b26:	ed9d 0a00 	vldr	s0, [sp]
 8018b2a:	f000 f863 	bl	8018bf4 <__kernel_cosf>
 8018b2e:	e7eb      	b.n	8018b08 <cosf+0x28>
 8018b30:	eddd 0a01 	vldr	s1, [sp, #4]
 8018b34:	ed9d 0a00 	vldr	s0, [sp]
 8018b38:	f000 f8b4 	bl	8018ca4 <__kernel_sinf>
 8018b3c:	eeb1 0a40 	vneg.f32	s0, s0
 8018b40:	e7e2      	b.n	8018b08 <cosf+0x28>
 8018b42:	eddd 0a01 	vldr	s1, [sp, #4]
 8018b46:	ed9d 0a00 	vldr	s0, [sp]
 8018b4a:	f000 f853 	bl	8018bf4 <__kernel_cosf>
 8018b4e:	e7f5      	b.n	8018b3c <cosf+0x5c>
 8018b50:	eddd 0a01 	vldr	s1, [sp, #4]
 8018b54:	ed9d 0a00 	vldr	s0, [sp]
 8018b58:	2001      	movs	r0, #1
 8018b5a:	f000 f8a3 	bl	8018ca4 <__kernel_sinf>
 8018b5e:	e7d3      	b.n	8018b08 <cosf+0x28>
 8018b60:	3f490fd8 	.word	0x3f490fd8
 8018b64:	00000000 	.word	0x00000000

08018b68 <sinf>:
 8018b68:	ee10 3a10 	vmov	r3, s0
 8018b6c:	b507      	push	{r0, r1, r2, lr}
 8018b6e:	4a1f      	ldr	r2, [pc, #124]	@ (8018bec <sinf+0x84>)
 8018b70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018b74:	4293      	cmp	r3, r2
 8018b76:	d807      	bhi.n	8018b88 <sinf+0x20>
 8018b78:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8018bf0 <sinf+0x88>
 8018b7c:	2000      	movs	r0, #0
 8018b7e:	b003      	add	sp, #12
 8018b80:	f85d eb04 	ldr.w	lr, [sp], #4
 8018b84:	f000 b88e 	b.w	8018ca4 <__kernel_sinf>
 8018b88:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8018b8c:	d304      	bcc.n	8018b98 <sinf+0x30>
 8018b8e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8018b92:	b003      	add	sp, #12
 8018b94:	f85d fb04 	ldr.w	pc, [sp], #4
 8018b98:	4668      	mov	r0, sp
 8018b9a:	f000 f8cb 	bl	8018d34 <__ieee754_rem_pio2f>
 8018b9e:	f000 0003 	and.w	r0, r0, #3
 8018ba2:	2801      	cmp	r0, #1
 8018ba4:	d00a      	beq.n	8018bbc <sinf+0x54>
 8018ba6:	2802      	cmp	r0, #2
 8018ba8:	d00f      	beq.n	8018bca <sinf+0x62>
 8018baa:	b9c0      	cbnz	r0, 8018bde <sinf+0x76>
 8018bac:	eddd 0a01 	vldr	s1, [sp, #4]
 8018bb0:	ed9d 0a00 	vldr	s0, [sp]
 8018bb4:	2001      	movs	r0, #1
 8018bb6:	f000 f875 	bl	8018ca4 <__kernel_sinf>
 8018bba:	e7ea      	b.n	8018b92 <sinf+0x2a>
 8018bbc:	eddd 0a01 	vldr	s1, [sp, #4]
 8018bc0:	ed9d 0a00 	vldr	s0, [sp]
 8018bc4:	f000 f816 	bl	8018bf4 <__kernel_cosf>
 8018bc8:	e7e3      	b.n	8018b92 <sinf+0x2a>
 8018bca:	eddd 0a01 	vldr	s1, [sp, #4]
 8018bce:	ed9d 0a00 	vldr	s0, [sp]
 8018bd2:	2001      	movs	r0, #1
 8018bd4:	f000 f866 	bl	8018ca4 <__kernel_sinf>
 8018bd8:	eeb1 0a40 	vneg.f32	s0, s0
 8018bdc:	e7d9      	b.n	8018b92 <sinf+0x2a>
 8018bde:	eddd 0a01 	vldr	s1, [sp, #4]
 8018be2:	ed9d 0a00 	vldr	s0, [sp]
 8018be6:	f000 f805 	bl	8018bf4 <__kernel_cosf>
 8018bea:	e7f5      	b.n	8018bd8 <sinf+0x70>
 8018bec:	3f490fd8 	.word	0x3f490fd8
 8018bf0:	00000000 	.word	0x00000000

08018bf4 <__kernel_cosf>:
 8018bf4:	ee10 3a10 	vmov	r3, s0
 8018bf8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018bfc:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8018c00:	eef0 6a40 	vmov.f32	s13, s0
 8018c04:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8018c08:	d204      	bcs.n	8018c14 <__kernel_cosf+0x20>
 8018c0a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8018c0e:	ee17 2a90 	vmov	r2, s15
 8018c12:	b342      	cbz	r2, 8018c66 <__kernel_cosf+0x72>
 8018c14:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8018c18:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8018c84 <__kernel_cosf+0x90>
 8018c1c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8018c88 <__kernel_cosf+0x94>
 8018c20:	4a1a      	ldr	r2, [pc, #104]	@ (8018c8c <__kernel_cosf+0x98>)
 8018c22:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018c26:	4293      	cmp	r3, r2
 8018c28:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8018c90 <__kernel_cosf+0x9c>
 8018c2c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018c30:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8018c94 <__kernel_cosf+0xa0>
 8018c34:	eea7 6a87 	vfma.f32	s12, s15, s14
 8018c38:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8018c98 <__kernel_cosf+0xa4>
 8018c3c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018c40:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8018c9c <__kernel_cosf+0xa8>
 8018c44:	eea7 6a87 	vfma.f32	s12, s15, s14
 8018c48:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8018c4c:	ee26 6a07 	vmul.f32	s12, s12, s14
 8018c50:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018c54:	eee7 0a06 	vfma.f32	s1, s14, s12
 8018c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018c5c:	d804      	bhi.n	8018c68 <__kernel_cosf+0x74>
 8018c5e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8018c62:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018c66:	4770      	bx	lr
 8018c68:	4a0d      	ldr	r2, [pc, #52]	@ (8018ca0 <__kernel_cosf+0xac>)
 8018c6a:	4293      	cmp	r3, r2
 8018c6c:	bf9a      	itte	ls
 8018c6e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8018c72:	ee07 3a10 	vmovls	s14, r3
 8018c76:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8018c7a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8018c7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018c82:	e7ec      	b.n	8018c5e <__kernel_cosf+0x6a>
 8018c84:	ad47d74e 	.word	0xad47d74e
 8018c88:	310f74f6 	.word	0x310f74f6
 8018c8c:	3e999999 	.word	0x3e999999
 8018c90:	b493f27c 	.word	0xb493f27c
 8018c94:	37d00d01 	.word	0x37d00d01
 8018c98:	bab60b61 	.word	0xbab60b61
 8018c9c:	3d2aaaab 	.word	0x3d2aaaab
 8018ca0:	3f480000 	.word	0x3f480000

08018ca4 <__kernel_sinf>:
 8018ca4:	ee10 3a10 	vmov	r3, s0
 8018ca8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018cac:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8018cb0:	d204      	bcs.n	8018cbc <__kernel_sinf+0x18>
 8018cb2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8018cb6:	ee17 3a90 	vmov	r3, s15
 8018cba:	b35b      	cbz	r3, 8018d14 <__kernel_sinf+0x70>
 8018cbc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8018cc0:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8018d18 <__kernel_sinf+0x74>
 8018cc4:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8018d1c <__kernel_sinf+0x78>
 8018cc8:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018ccc:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8018d20 <__kernel_sinf+0x7c>
 8018cd0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018cd4:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8018d24 <__kernel_sinf+0x80>
 8018cd8:	eea7 6a87 	vfma.f32	s12, s15, s14
 8018cdc:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8018d28 <__kernel_sinf+0x84>
 8018ce0:	ee60 6a07 	vmul.f32	s13, s0, s14
 8018ce4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018ce8:	b930      	cbnz	r0, 8018cf8 <__kernel_sinf+0x54>
 8018cea:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8018d2c <__kernel_sinf+0x88>
 8018cee:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018cf2:	eea6 0a26 	vfma.f32	s0, s12, s13
 8018cf6:	4770      	bx	lr
 8018cf8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8018cfc:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8018d00:	eee0 7a86 	vfma.f32	s15, s1, s12
 8018d04:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8018d08:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8018d30 <__kernel_sinf+0x8c>
 8018d0c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8018d10:	ee30 0a60 	vsub.f32	s0, s0, s1
 8018d14:	4770      	bx	lr
 8018d16:	bf00      	nop
 8018d18:	2f2ec9d3 	.word	0x2f2ec9d3
 8018d1c:	b2d72f34 	.word	0xb2d72f34
 8018d20:	3638ef1b 	.word	0x3638ef1b
 8018d24:	b9500d01 	.word	0xb9500d01
 8018d28:	3c088889 	.word	0x3c088889
 8018d2c:	be2aaaab 	.word	0xbe2aaaab
 8018d30:	3e2aaaab 	.word	0x3e2aaaab

08018d34 <__ieee754_rem_pio2f>:
 8018d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018d36:	ee10 6a10 	vmov	r6, s0
 8018d3a:	4b88      	ldr	r3, [pc, #544]	@ (8018f5c <__ieee754_rem_pio2f+0x228>)
 8018d3c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8018d40:	429d      	cmp	r5, r3
 8018d42:	b087      	sub	sp, #28
 8018d44:	4604      	mov	r4, r0
 8018d46:	d805      	bhi.n	8018d54 <__ieee754_rem_pio2f+0x20>
 8018d48:	2300      	movs	r3, #0
 8018d4a:	ed80 0a00 	vstr	s0, [r0]
 8018d4e:	6043      	str	r3, [r0, #4]
 8018d50:	2000      	movs	r0, #0
 8018d52:	e022      	b.n	8018d9a <__ieee754_rem_pio2f+0x66>
 8018d54:	4b82      	ldr	r3, [pc, #520]	@ (8018f60 <__ieee754_rem_pio2f+0x22c>)
 8018d56:	429d      	cmp	r5, r3
 8018d58:	d83a      	bhi.n	8018dd0 <__ieee754_rem_pio2f+0x9c>
 8018d5a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8018d5e:	2e00      	cmp	r6, #0
 8018d60:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8018f64 <__ieee754_rem_pio2f+0x230>
 8018d64:	4a80      	ldr	r2, [pc, #512]	@ (8018f68 <__ieee754_rem_pio2f+0x234>)
 8018d66:	f023 030f 	bic.w	r3, r3, #15
 8018d6a:	dd18      	ble.n	8018d9e <__ieee754_rem_pio2f+0x6a>
 8018d6c:	4293      	cmp	r3, r2
 8018d6e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8018d72:	bf09      	itett	eq
 8018d74:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8018f6c <__ieee754_rem_pio2f+0x238>
 8018d78:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8018f70 <__ieee754_rem_pio2f+0x23c>
 8018d7c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8018f74 <__ieee754_rem_pio2f+0x240>
 8018d80:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8018d84:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8018d88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018d8c:	ed80 7a00 	vstr	s14, [r0]
 8018d90:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018d94:	edc0 7a01 	vstr	s15, [r0, #4]
 8018d98:	2001      	movs	r0, #1
 8018d9a:	b007      	add	sp, #28
 8018d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d9e:	4293      	cmp	r3, r2
 8018da0:	ee70 7a07 	vadd.f32	s15, s0, s14
 8018da4:	bf09      	itett	eq
 8018da6:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8018f6c <__ieee754_rem_pio2f+0x238>
 8018daa:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8018f70 <__ieee754_rem_pio2f+0x23c>
 8018dae:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8018f74 <__ieee754_rem_pio2f+0x240>
 8018db2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8018db6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8018dba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018dbe:	ed80 7a00 	vstr	s14, [r0]
 8018dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018dc6:	edc0 7a01 	vstr	s15, [r0, #4]
 8018dca:	f04f 30ff 	mov.w	r0, #4294967295
 8018dce:	e7e4      	b.n	8018d9a <__ieee754_rem_pio2f+0x66>
 8018dd0:	4b69      	ldr	r3, [pc, #420]	@ (8018f78 <__ieee754_rem_pio2f+0x244>)
 8018dd2:	429d      	cmp	r5, r3
 8018dd4:	d873      	bhi.n	8018ebe <__ieee754_rem_pio2f+0x18a>
 8018dd6:	f000 f8dd 	bl	8018f94 <fabsf>
 8018dda:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8018f7c <__ieee754_rem_pio2f+0x248>
 8018dde:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018de2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018de6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018dea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018dee:	ee17 0a90 	vmov	r0, s15
 8018df2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8018f64 <__ieee754_rem_pio2f+0x230>
 8018df6:	eea7 0a67 	vfms.f32	s0, s14, s15
 8018dfa:	281f      	cmp	r0, #31
 8018dfc:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8018f70 <__ieee754_rem_pio2f+0x23c>
 8018e00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018e04:	eeb1 6a47 	vneg.f32	s12, s14
 8018e08:	ee70 6a67 	vsub.f32	s13, s0, s15
 8018e0c:	ee16 1a90 	vmov	r1, s13
 8018e10:	dc09      	bgt.n	8018e26 <__ieee754_rem_pio2f+0xf2>
 8018e12:	4a5b      	ldr	r2, [pc, #364]	@ (8018f80 <__ieee754_rem_pio2f+0x24c>)
 8018e14:	1e47      	subs	r7, r0, #1
 8018e16:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8018e1a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8018e1e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8018e22:	4293      	cmp	r3, r2
 8018e24:	d107      	bne.n	8018e36 <__ieee754_rem_pio2f+0x102>
 8018e26:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8018e2a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8018e2e:	2a08      	cmp	r2, #8
 8018e30:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8018e34:	dc14      	bgt.n	8018e60 <__ieee754_rem_pio2f+0x12c>
 8018e36:	6021      	str	r1, [r4, #0]
 8018e38:	ed94 7a00 	vldr	s14, [r4]
 8018e3c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8018e40:	2e00      	cmp	r6, #0
 8018e42:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018e46:	ed84 0a01 	vstr	s0, [r4, #4]
 8018e4a:	daa6      	bge.n	8018d9a <__ieee754_rem_pio2f+0x66>
 8018e4c:	eeb1 7a47 	vneg.f32	s14, s14
 8018e50:	eeb1 0a40 	vneg.f32	s0, s0
 8018e54:	ed84 7a00 	vstr	s14, [r4]
 8018e58:	ed84 0a01 	vstr	s0, [r4, #4]
 8018e5c:	4240      	negs	r0, r0
 8018e5e:	e79c      	b.n	8018d9a <__ieee754_rem_pio2f+0x66>
 8018e60:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8018f6c <__ieee754_rem_pio2f+0x238>
 8018e64:	eef0 6a40 	vmov.f32	s13, s0
 8018e68:	eee6 6a25 	vfma.f32	s13, s12, s11
 8018e6c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8018e70:	eee6 7a25 	vfma.f32	s15, s12, s11
 8018e74:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8018f74 <__ieee754_rem_pio2f+0x240>
 8018e78:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8018e7c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8018e80:	ee15 2a90 	vmov	r2, s11
 8018e84:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8018e88:	1a5b      	subs	r3, r3, r1
 8018e8a:	2b19      	cmp	r3, #25
 8018e8c:	dc04      	bgt.n	8018e98 <__ieee754_rem_pio2f+0x164>
 8018e8e:	edc4 5a00 	vstr	s11, [r4]
 8018e92:	eeb0 0a66 	vmov.f32	s0, s13
 8018e96:	e7cf      	b.n	8018e38 <__ieee754_rem_pio2f+0x104>
 8018e98:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8018f84 <__ieee754_rem_pio2f+0x250>
 8018e9c:	eeb0 0a66 	vmov.f32	s0, s13
 8018ea0:	eea6 0a25 	vfma.f32	s0, s12, s11
 8018ea4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8018ea8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8018f88 <__ieee754_rem_pio2f+0x254>
 8018eac:	eee6 7a25 	vfma.f32	s15, s12, s11
 8018eb0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8018eb4:	ee30 7a67 	vsub.f32	s14, s0, s15
 8018eb8:	ed84 7a00 	vstr	s14, [r4]
 8018ebc:	e7bc      	b.n	8018e38 <__ieee754_rem_pio2f+0x104>
 8018ebe:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8018ec2:	d306      	bcc.n	8018ed2 <__ieee754_rem_pio2f+0x19e>
 8018ec4:	ee70 7a40 	vsub.f32	s15, s0, s0
 8018ec8:	edc0 7a01 	vstr	s15, [r0, #4]
 8018ecc:	edc0 7a00 	vstr	s15, [r0]
 8018ed0:	e73e      	b.n	8018d50 <__ieee754_rem_pio2f+0x1c>
 8018ed2:	15ea      	asrs	r2, r5, #23
 8018ed4:	3a86      	subs	r2, #134	@ 0x86
 8018ed6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8018eda:	ee07 3a90 	vmov	s15, r3
 8018ede:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8018ee2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8018f8c <__ieee754_rem_pio2f+0x258>
 8018ee6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018eea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018eee:	ed8d 7a03 	vstr	s14, [sp, #12]
 8018ef2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018ef6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8018efa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018efe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018f02:	ed8d 7a04 	vstr	s14, [sp, #16]
 8018f06:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018f0a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f12:	edcd 7a05 	vstr	s15, [sp, #20]
 8018f16:	d11e      	bne.n	8018f56 <__ieee754_rem_pio2f+0x222>
 8018f18:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8018f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f20:	bf0c      	ite	eq
 8018f22:	2301      	moveq	r3, #1
 8018f24:	2302      	movne	r3, #2
 8018f26:	491a      	ldr	r1, [pc, #104]	@ (8018f90 <__ieee754_rem_pio2f+0x25c>)
 8018f28:	9101      	str	r1, [sp, #4]
 8018f2a:	2102      	movs	r1, #2
 8018f2c:	9100      	str	r1, [sp, #0]
 8018f2e:	a803      	add	r0, sp, #12
 8018f30:	4621      	mov	r1, r4
 8018f32:	f000 f837 	bl	8018fa4 <__kernel_rem_pio2f>
 8018f36:	2e00      	cmp	r6, #0
 8018f38:	f6bf af2f 	bge.w	8018d9a <__ieee754_rem_pio2f+0x66>
 8018f3c:	edd4 7a00 	vldr	s15, [r4]
 8018f40:	eef1 7a67 	vneg.f32	s15, s15
 8018f44:	edc4 7a00 	vstr	s15, [r4]
 8018f48:	edd4 7a01 	vldr	s15, [r4, #4]
 8018f4c:	eef1 7a67 	vneg.f32	s15, s15
 8018f50:	edc4 7a01 	vstr	s15, [r4, #4]
 8018f54:	e782      	b.n	8018e5c <__ieee754_rem_pio2f+0x128>
 8018f56:	2303      	movs	r3, #3
 8018f58:	e7e5      	b.n	8018f26 <__ieee754_rem_pio2f+0x1f2>
 8018f5a:	bf00      	nop
 8018f5c:	3f490fd8 	.word	0x3f490fd8
 8018f60:	4016cbe3 	.word	0x4016cbe3
 8018f64:	3fc90f80 	.word	0x3fc90f80
 8018f68:	3fc90fd0 	.word	0x3fc90fd0
 8018f6c:	37354400 	.word	0x37354400
 8018f70:	37354443 	.word	0x37354443
 8018f74:	2e85a308 	.word	0x2e85a308
 8018f78:	43490f80 	.word	0x43490f80
 8018f7c:	3f22f984 	.word	0x3f22f984
 8018f80:	0801d444 	.word	0x0801d444
 8018f84:	2e85a300 	.word	0x2e85a300
 8018f88:	248d3132 	.word	0x248d3132
 8018f8c:	43800000 	.word	0x43800000
 8018f90:	0801d4c4 	.word	0x0801d4c4

08018f94 <fabsf>:
 8018f94:	ee10 3a10 	vmov	r3, s0
 8018f98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018f9c:	ee00 3a10 	vmov	s0, r3
 8018fa0:	4770      	bx	lr
	...

08018fa4 <__kernel_rem_pio2f>:
 8018fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fa8:	ed2d 8b04 	vpush	{d8-d9}
 8018fac:	b0d9      	sub	sp, #356	@ 0x164
 8018fae:	4690      	mov	r8, r2
 8018fb0:	9001      	str	r0, [sp, #4]
 8018fb2:	4ab6      	ldr	r2, [pc, #728]	@ (801928c <__kernel_rem_pio2f+0x2e8>)
 8018fb4:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8018fb6:	f118 0f04 	cmn.w	r8, #4
 8018fba:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8018fbe:	460f      	mov	r7, r1
 8018fc0:	f103 3bff 	add.w	fp, r3, #4294967295
 8018fc4:	db26      	blt.n	8019014 <__kernel_rem_pio2f+0x70>
 8018fc6:	f1b8 0203 	subs.w	r2, r8, #3
 8018fca:	bf48      	it	mi
 8018fcc:	f108 0204 	addmi.w	r2, r8, #4
 8018fd0:	10d2      	asrs	r2, r2, #3
 8018fd2:	1c55      	adds	r5, r2, #1
 8018fd4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8018fd6:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 801929c <__kernel_rem_pio2f+0x2f8>
 8018fda:	00e8      	lsls	r0, r5, #3
 8018fdc:	eba2 060b 	sub.w	r6, r2, fp
 8018fe0:	9002      	str	r0, [sp, #8]
 8018fe2:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8018fe6:	eb0a 0c0b 	add.w	ip, sl, fp
 8018fea:	ac1c      	add	r4, sp, #112	@ 0x70
 8018fec:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8018ff0:	2000      	movs	r0, #0
 8018ff2:	4560      	cmp	r0, ip
 8018ff4:	dd10      	ble.n	8019018 <__kernel_rem_pio2f+0x74>
 8018ff6:	a91c      	add	r1, sp, #112	@ 0x70
 8018ff8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8018ffc:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8019000:	2600      	movs	r6, #0
 8019002:	4556      	cmp	r6, sl
 8019004:	dc24      	bgt.n	8019050 <__kernel_rem_pio2f+0xac>
 8019006:	f8dd e004 	ldr.w	lr, [sp, #4]
 801900a:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 801929c <__kernel_rem_pio2f+0x2f8>
 801900e:	4684      	mov	ip, r0
 8019010:	2400      	movs	r4, #0
 8019012:	e016      	b.n	8019042 <__kernel_rem_pio2f+0x9e>
 8019014:	2200      	movs	r2, #0
 8019016:	e7dc      	b.n	8018fd2 <__kernel_rem_pio2f+0x2e>
 8019018:	42c6      	cmn	r6, r0
 801901a:	bf5d      	ittte	pl
 801901c:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8019020:	ee07 1a90 	vmovpl	s15, r1
 8019024:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8019028:	eef0 7a47 	vmovmi.f32	s15, s14
 801902c:	ece4 7a01 	vstmia	r4!, {s15}
 8019030:	3001      	adds	r0, #1
 8019032:	e7de      	b.n	8018ff2 <__kernel_rem_pio2f+0x4e>
 8019034:	ecfe 6a01 	vldmia	lr!, {s13}
 8019038:	ed3c 7a01 	vldmdb	ip!, {s14}
 801903c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019040:	3401      	adds	r4, #1
 8019042:	455c      	cmp	r4, fp
 8019044:	ddf6      	ble.n	8019034 <__kernel_rem_pio2f+0x90>
 8019046:	ece9 7a01 	vstmia	r9!, {s15}
 801904a:	3601      	adds	r6, #1
 801904c:	3004      	adds	r0, #4
 801904e:	e7d8      	b.n	8019002 <__kernel_rem_pio2f+0x5e>
 8019050:	a908      	add	r1, sp, #32
 8019052:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019056:	9104      	str	r1, [sp, #16]
 8019058:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801905a:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8019298 <__kernel_rem_pio2f+0x2f4>
 801905e:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8019294 <__kernel_rem_pio2f+0x2f0>
 8019062:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8019066:	9203      	str	r2, [sp, #12]
 8019068:	4654      	mov	r4, sl
 801906a:	00a2      	lsls	r2, r4, #2
 801906c:	9205      	str	r2, [sp, #20]
 801906e:	aa58      	add	r2, sp, #352	@ 0x160
 8019070:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8019074:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8019078:	a944      	add	r1, sp, #272	@ 0x110
 801907a:	aa08      	add	r2, sp, #32
 801907c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8019080:	4694      	mov	ip, r2
 8019082:	4626      	mov	r6, r4
 8019084:	2e00      	cmp	r6, #0
 8019086:	dc4c      	bgt.n	8019122 <__kernel_rem_pio2f+0x17e>
 8019088:	4628      	mov	r0, r5
 801908a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801908e:	f000 f9f1 	bl	8019474 <scalbnf>
 8019092:	eeb0 8a40 	vmov.f32	s16, s0
 8019096:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801909a:	ee28 0a00 	vmul.f32	s0, s16, s0
 801909e:	f000 fa4f 	bl	8019540 <floorf>
 80190a2:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80190a6:	eea0 8a67 	vfms.f32	s16, s0, s15
 80190aa:	2d00      	cmp	r5, #0
 80190ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80190b0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80190b4:	ee17 9a90 	vmov	r9, s15
 80190b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80190bc:	ee38 8a67 	vsub.f32	s16, s16, s15
 80190c0:	dd41      	ble.n	8019146 <__kernel_rem_pio2f+0x1a2>
 80190c2:	f104 3cff 	add.w	ip, r4, #4294967295
 80190c6:	a908      	add	r1, sp, #32
 80190c8:	f1c5 0e08 	rsb	lr, r5, #8
 80190cc:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80190d0:	fa46 f00e 	asr.w	r0, r6, lr
 80190d4:	4481      	add	r9, r0
 80190d6:	fa00 f00e 	lsl.w	r0, r0, lr
 80190da:	1a36      	subs	r6, r6, r0
 80190dc:	f1c5 0007 	rsb	r0, r5, #7
 80190e0:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80190e4:	4106      	asrs	r6, r0
 80190e6:	2e00      	cmp	r6, #0
 80190e8:	dd3c      	ble.n	8019164 <__kernel_rem_pio2f+0x1c0>
 80190ea:	f04f 0e00 	mov.w	lr, #0
 80190ee:	f109 0901 	add.w	r9, r9, #1
 80190f2:	4670      	mov	r0, lr
 80190f4:	4574      	cmp	r4, lr
 80190f6:	dc68      	bgt.n	80191ca <__kernel_rem_pio2f+0x226>
 80190f8:	2d00      	cmp	r5, #0
 80190fa:	dd03      	ble.n	8019104 <__kernel_rem_pio2f+0x160>
 80190fc:	2d01      	cmp	r5, #1
 80190fe:	d074      	beq.n	80191ea <__kernel_rem_pio2f+0x246>
 8019100:	2d02      	cmp	r5, #2
 8019102:	d07d      	beq.n	8019200 <__kernel_rem_pio2f+0x25c>
 8019104:	2e02      	cmp	r6, #2
 8019106:	d12d      	bne.n	8019164 <__kernel_rem_pio2f+0x1c0>
 8019108:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801910c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8019110:	b340      	cbz	r0, 8019164 <__kernel_rem_pio2f+0x1c0>
 8019112:	4628      	mov	r0, r5
 8019114:	9306      	str	r3, [sp, #24]
 8019116:	f000 f9ad 	bl	8019474 <scalbnf>
 801911a:	9b06      	ldr	r3, [sp, #24]
 801911c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8019120:	e020      	b.n	8019164 <__kernel_rem_pio2f+0x1c0>
 8019122:	ee60 7a28 	vmul.f32	s15, s0, s17
 8019126:	3e01      	subs	r6, #1
 8019128:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801912c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019130:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8019134:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019138:	ecac 0a01 	vstmia	ip!, {s0}
 801913c:	ed30 0a01 	vldmdb	r0!, {s0}
 8019140:	ee37 0a80 	vadd.f32	s0, s15, s0
 8019144:	e79e      	b.n	8019084 <__kernel_rem_pio2f+0xe0>
 8019146:	d105      	bne.n	8019154 <__kernel_rem_pio2f+0x1b0>
 8019148:	1e60      	subs	r0, r4, #1
 801914a:	a908      	add	r1, sp, #32
 801914c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8019150:	11f6      	asrs	r6, r6, #7
 8019152:	e7c8      	b.n	80190e6 <__kernel_rem_pio2f+0x142>
 8019154:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8019158:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801915c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019160:	da31      	bge.n	80191c6 <__kernel_rem_pio2f+0x222>
 8019162:	2600      	movs	r6, #0
 8019164:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8019168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801916c:	f040 8098 	bne.w	80192a0 <__kernel_rem_pio2f+0x2fc>
 8019170:	1e60      	subs	r0, r4, #1
 8019172:	2200      	movs	r2, #0
 8019174:	4550      	cmp	r0, sl
 8019176:	da4b      	bge.n	8019210 <__kernel_rem_pio2f+0x26c>
 8019178:	2a00      	cmp	r2, #0
 801917a:	d065      	beq.n	8019248 <__kernel_rem_pio2f+0x2a4>
 801917c:	3c01      	subs	r4, #1
 801917e:	ab08      	add	r3, sp, #32
 8019180:	3d08      	subs	r5, #8
 8019182:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8019186:	2b00      	cmp	r3, #0
 8019188:	d0f8      	beq.n	801917c <__kernel_rem_pio2f+0x1d8>
 801918a:	4628      	mov	r0, r5
 801918c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8019190:	f000 f970 	bl	8019474 <scalbnf>
 8019194:	1c63      	adds	r3, r4, #1
 8019196:	aa44      	add	r2, sp, #272	@ 0x110
 8019198:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8019298 <__kernel_rem_pio2f+0x2f4>
 801919c:	0099      	lsls	r1, r3, #2
 801919e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80191a2:	4623      	mov	r3, r4
 80191a4:	2b00      	cmp	r3, #0
 80191a6:	f280 80a9 	bge.w	80192fc <__kernel_rem_pio2f+0x358>
 80191aa:	4623      	mov	r3, r4
 80191ac:	2b00      	cmp	r3, #0
 80191ae:	f2c0 80c7 	blt.w	8019340 <__kernel_rem_pio2f+0x39c>
 80191b2:	aa44      	add	r2, sp, #272	@ 0x110
 80191b4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80191b8:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8019290 <__kernel_rem_pio2f+0x2ec>
 80191bc:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801929c <__kernel_rem_pio2f+0x2f8>
 80191c0:	2000      	movs	r0, #0
 80191c2:	1ae2      	subs	r2, r4, r3
 80191c4:	e0b1      	b.n	801932a <__kernel_rem_pio2f+0x386>
 80191c6:	2602      	movs	r6, #2
 80191c8:	e78f      	b.n	80190ea <__kernel_rem_pio2f+0x146>
 80191ca:	f852 1b04 	ldr.w	r1, [r2], #4
 80191ce:	b948      	cbnz	r0, 80191e4 <__kernel_rem_pio2f+0x240>
 80191d0:	b121      	cbz	r1, 80191dc <__kernel_rem_pio2f+0x238>
 80191d2:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80191d6:	f842 1c04 	str.w	r1, [r2, #-4]
 80191da:	2101      	movs	r1, #1
 80191dc:	f10e 0e01 	add.w	lr, lr, #1
 80191e0:	4608      	mov	r0, r1
 80191e2:	e787      	b.n	80190f4 <__kernel_rem_pio2f+0x150>
 80191e4:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80191e8:	e7f5      	b.n	80191d6 <__kernel_rem_pio2f+0x232>
 80191ea:	f104 3cff 	add.w	ip, r4, #4294967295
 80191ee:	aa08      	add	r2, sp, #32
 80191f0:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80191f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80191f8:	a908      	add	r1, sp, #32
 80191fa:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80191fe:	e781      	b.n	8019104 <__kernel_rem_pio2f+0x160>
 8019200:	f104 3cff 	add.w	ip, r4, #4294967295
 8019204:	aa08      	add	r2, sp, #32
 8019206:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801920a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801920e:	e7f3      	b.n	80191f8 <__kernel_rem_pio2f+0x254>
 8019210:	a908      	add	r1, sp, #32
 8019212:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8019216:	3801      	subs	r0, #1
 8019218:	430a      	orrs	r2, r1
 801921a:	e7ab      	b.n	8019174 <__kernel_rem_pio2f+0x1d0>
 801921c:	3201      	adds	r2, #1
 801921e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8019222:	2e00      	cmp	r6, #0
 8019224:	d0fa      	beq.n	801921c <__kernel_rem_pio2f+0x278>
 8019226:	9905      	ldr	r1, [sp, #20]
 8019228:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 801922c:	eb0d 0001 	add.w	r0, sp, r1
 8019230:	18e6      	adds	r6, r4, r3
 8019232:	a91c      	add	r1, sp, #112	@ 0x70
 8019234:	f104 0c01 	add.w	ip, r4, #1
 8019238:	384c      	subs	r0, #76	@ 0x4c
 801923a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801923e:	4422      	add	r2, r4
 8019240:	4562      	cmp	r2, ip
 8019242:	da04      	bge.n	801924e <__kernel_rem_pio2f+0x2aa>
 8019244:	4614      	mov	r4, r2
 8019246:	e710      	b.n	801906a <__kernel_rem_pio2f+0xc6>
 8019248:	9804      	ldr	r0, [sp, #16]
 801924a:	2201      	movs	r2, #1
 801924c:	e7e7      	b.n	801921e <__kernel_rem_pio2f+0x27a>
 801924e:	9903      	ldr	r1, [sp, #12]
 8019250:	f8dd e004 	ldr.w	lr, [sp, #4]
 8019254:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8019258:	9105      	str	r1, [sp, #20]
 801925a:	ee07 1a90 	vmov	s15, r1
 801925e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019262:	2400      	movs	r4, #0
 8019264:	ece6 7a01 	vstmia	r6!, {s15}
 8019268:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801929c <__kernel_rem_pio2f+0x2f8>
 801926c:	46b1      	mov	r9, r6
 801926e:	455c      	cmp	r4, fp
 8019270:	dd04      	ble.n	801927c <__kernel_rem_pio2f+0x2d8>
 8019272:	ece0 7a01 	vstmia	r0!, {s15}
 8019276:	f10c 0c01 	add.w	ip, ip, #1
 801927a:	e7e1      	b.n	8019240 <__kernel_rem_pio2f+0x29c>
 801927c:	ecfe 6a01 	vldmia	lr!, {s13}
 8019280:	ed39 7a01 	vldmdb	r9!, {s14}
 8019284:	3401      	adds	r4, #1
 8019286:	eee6 7a87 	vfma.f32	s15, s13, s14
 801928a:	e7f0      	b.n	801926e <__kernel_rem_pio2f+0x2ca>
 801928c:	0801d808 	.word	0x0801d808
 8019290:	0801d7dc 	.word	0x0801d7dc
 8019294:	43800000 	.word	0x43800000
 8019298:	3b800000 	.word	0x3b800000
 801929c:	00000000 	.word	0x00000000
 80192a0:	9b02      	ldr	r3, [sp, #8]
 80192a2:	eeb0 0a48 	vmov.f32	s0, s16
 80192a6:	eba3 0008 	sub.w	r0, r3, r8
 80192aa:	f000 f8e3 	bl	8019474 <scalbnf>
 80192ae:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8019294 <__kernel_rem_pio2f+0x2f0>
 80192b2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80192b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192ba:	db19      	blt.n	80192f0 <__kernel_rem_pio2f+0x34c>
 80192bc:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8019298 <__kernel_rem_pio2f+0x2f4>
 80192c0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80192c4:	aa08      	add	r2, sp, #32
 80192c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80192ca:	3508      	adds	r5, #8
 80192cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80192d0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80192d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80192d8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80192dc:	ee10 3a10 	vmov	r3, s0
 80192e0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80192e4:	ee17 3a90 	vmov	r3, s15
 80192e8:	3401      	adds	r4, #1
 80192ea:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80192ee:	e74c      	b.n	801918a <__kernel_rem_pio2f+0x1e6>
 80192f0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80192f4:	aa08      	add	r2, sp, #32
 80192f6:	ee10 3a10 	vmov	r3, s0
 80192fa:	e7f6      	b.n	80192ea <__kernel_rem_pio2f+0x346>
 80192fc:	a808      	add	r0, sp, #32
 80192fe:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8019302:	9001      	str	r0, [sp, #4]
 8019304:	ee07 0a90 	vmov	s15, r0
 8019308:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801930c:	3b01      	subs	r3, #1
 801930e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019312:	ee20 0a07 	vmul.f32	s0, s0, s14
 8019316:	ed62 7a01 	vstmdb	r2!, {s15}
 801931a:	e743      	b.n	80191a4 <__kernel_rem_pio2f+0x200>
 801931c:	ecfc 6a01 	vldmia	ip!, {s13}
 8019320:	ecb5 7a01 	vldmia	r5!, {s14}
 8019324:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019328:	3001      	adds	r0, #1
 801932a:	4550      	cmp	r0, sl
 801932c:	dc01      	bgt.n	8019332 <__kernel_rem_pio2f+0x38e>
 801932e:	4290      	cmp	r0, r2
 8019330:	ddf4      	ble.n	801931c <__kernel_rem_pio2f+0x378>
 8019332:	a858      	add	r0, sp, #352	@ 0x160
 8019334:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8019338:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 801933c:	3b01      	subs	r3, #1
 801933e:	e735      	b.n	80191ac <__kernel_rem_pio2f+0x208>
 8019340:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8019342:	2b02      	cmp	r3, #2
 8019344:	dc09      	bgt.n	801935a <__kernel_rem_pio2f+0x3b6>
 8019346:	2b00      	cmp	r3, #0
 8019348:	dc27      	bgt.n	801939a <__kernel_rem_pio2f+0x3f6>
 801934a:	d040      	beq.n	80193ce <__kernel_rem_pio2f+0x42a>
 801934c:	f009 0007 	and.w	r0, r9, #7
 8019350:	b059      	add	sp, #356	@ 0x164
 8019352:	ecbd 8b04 	vpop	{d8-d9}
 8019356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801935a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801935c:	2b03      	cmp	r3, #3
 801935e:	d1f5      	bne.n	801934c <__kernel_rem_pio2f+0x3a8>
 8019360:	aa30      	add	r2, sp, #192	@ 0xc0
 8019362:	1f0b      	subs	r3, r1, #4
 8019364:	4413      	add	r3, r2
 8019366:	461a      	mov	r2, r3
 8019368:	4620      	mov	r0, r4
 801936a:	2800      	cmp	r0, #0
 801936c:	dc50      	bgt.n	8019410 <__kernel_rem_pio2f+0x46c>
 801936e:	4622      	mov	r2, r4
 8019370:	2a01      	cmp	r2, #1
 8019372:	dc5d      	bgt.n	8019430 <__kernel_rem_pio2f+0x48c>
 8019374:	ab30      	add	r3, sp, #192	@ 0xc0
 8019376:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 801929c <__kernel_rem_pio2f+0x2f8>
 801937a:	440b      	add	r3, r1
 801937c:	2c01      	cmp	r4, #1
 801937e:	dc67      	bgt.n	8019450 <__kernel_rem_pio2f+0x4ac>
 8019380:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8019384:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8019388:	2e00      	cmp	r6, #0
 801938a:	d167      	bne.n	801945c <__kernel_rem_pio2f+0x4b8>
 801938c:	edc7 6a00 	vstr	s13, [r7]
 8019390:	ed87 7a01 	vstr	s14, [r7, #4]
 8019394:	edc7 7a02 	vstr	s15, [r7, #8]
 8019398:	e7d8      	b.n	801934c <__kernel_rem_pio2f+0x3a8>
 801939a:	ab30      	add	r3, sp, #192	@ 0xc0
 801939c:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 801929c <__kernel_rem_pio2f+0x2f8>
 80193a0:	440b      	add	r3, r1
 80193a2:	4622      	mov	r2, r4
 80193a4:	2a00      	cmp	r2, #0
 80193a6:	da24      	bge.n	80193f2 <__kernel_rem_pio2f+0x44e>
 80193a8:	b34e      	cbz	r6, 80193fe <__kernel_rem_pio2f+0x45a>
 80193aa:	eef1 7a47 	vneg.f32	s15, s14
 80193ae:	edc7 7a00 	vstr	s15, [r7]
 80193b2:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80193b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80193ba:	aa31      	add	r2, sp, #196	@ 0xc4
 80193bc:	2301      	movs	r3, #1
 80193be:	429c      	cmp	r4, r3
 80193c0:	da20      	bge.n	8019404 <__kernel_rem_pio2f+0x460>
 80193c2:	b10e      	cbz	r6, 80193c8 <__kernel_rem_pio2f+0x424>
 80193c4:	eef1 7a67 	vneg.f32	s15, s15
 80193c8:	edc7 7a01 	vstr	s15, [r7, #4]
 80193cc:	e7be      	b.n	801934c <__kernel_rem_pio2f+0x3a8>
 80193ce:	ab30      	add	r3, sp, #192	@ 0xc0
 80193d0:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 801929c <__kernel_rem_pio2f+0x2f8>
 80193d4:	440b      	add	r3, r1
 80193d6:	2c00      	cmp	r4, #0
 80193d8:	da05      	bge.n	80193e6 <__kernel_rem_pio2f+0x442>
 80193da:	b10e      	cbz	r6, 80193e0 <__kernel_rem_pio2f+0x43c>
 80193dc:	eef1 7a67 	vneg.f32	s15, s15
 80193e0:	edc7 7a00 	vstr	s15, [r7]
 80193e4:	e7b2      	b.n	801934c <__kernel_rem_pio2f+0x3a8>
 80193e6:	ed33 7a01 	vldmdb	r3!, {s14}
 80193ea:	3c01      	subs	r4, #1
 80193ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80193f0:	e7f1      	b.n	80193d6 <__kernel_rem_pio2f+0x432>
 80193f2:	ed73 7a01 	vldmdb	r3!, {s15}
 80193f6:	3a01      	subs	r2, #1
 80193f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80193fc:	e7d2      	b.n	80193a4 <__kernel_rem_pio2f+0x400>
 80193fe:	eef0 7a47 	vmov.f32	s15, s14
 8019402:	e7d4      	b.n	80193ae <__kernel_rem_pio2f+0x40a>
 8019404:	ecb2 7a01 	vldmia	r2!, {s14}
 8019408:	3301      	adds	r3, #1
 801940a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801940e:	e7d6      	b.n	80193be <__kernel_rem_pio2f+0x41a>
 8019410:	ed72 7a01 	vldmdb	r2!, {s15}
 8019414:	edd2 6a01 	vldr	s13, [r2, #4]
 8019418:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801941c:	3801      	subs	r0, #1
 801941e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019422:	ed82 7a00 	vstr	s14, [r2]
 8019426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801942a:	edc2 7a01 	vstr	s15, [r2, #4]
 801942e:	e79c      	b.n	801936a <__kernel_rem_pio2f+0x3c6>
 8019430:	ed73 7a01 	vldmdb	r3!, {s15}
 8019434:	edd3 6a01 	vldr	s13, [r3, #4]
 8019438:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801943c:	3a01      	subs	r2, #1
 801943e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019442:	ed83 7a00 	vstr	s14, [r3]
 8019446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801944a:	edc3 7a01 	vstr	s15, [r3, #4]
 801944e:	e78f      	b.n	8019370 <__kernel_rem_pio2f+0x3cc>
 8019450:	ed33 7a01 	vldmdb	r3!, {s14}
 8019454:	3c01      	subs	r4, #1
 8019456:	ee77 7a87 	vadd.f32	s15, s15, s14
 801945a:	e78f      	b.n	801937c <__kernel_rem_pio2f+0x3d8>
 801945c:	eef1 6a66 	vneg.f32	s13, s13
 8019460:	eeb1 7a47 	vneg.f32	s14, s14
 8019464:	edc7 6a00 	vstr	s13, [r7]
 8019468:	ed87 7a01 	vstr	s14, [r7, #4]
 801946c:	eef1 7a67 	vneg.f32	s15, s15
 8019470:	e790      	b.n	8019394 <__kernel_rem_pio2f+0x3f0>
 8019472:	bf00      	nop

08019474 <scalbnf>:
 8019474:	ee10 3a10 	vmov	r3, s0
 8019478:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801947c:	d02b      	beq.n	80194d6 <scalbnf+0x62>
 801947e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8019482:	d302      	bcc.n	801948a <scalbnf+0x16>
 8019484:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019488:	4770      	bx	lr
 801948a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801948e:	d123      	bne.n	80194d8 <scalbnf+0x64>
 8019490:	4b24      	ldr	r3, [pc, #144]	@ (8019524 <scalbnf+0xb0>)
 8019492:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8019528 <scalbnf+0xb4>
 8019496:	4298      	cmp	r0, r3
 8019498:	ee20 0a27 	vmul.f32	s0, s0, s15
 801949c:	db17      	blt.n	80194ce <scalbnf+0x5a>
 801949e:	ee10 3a10 	vmov	r3, s0
 80194a2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80194a6:	3a19      	subs	r2, #25
 80194a8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80194ac:	4288      	cmp	r0, r1
 80194ae:	dd15      	ble.n	80194dc <scalbnf+0x68>
 80194b0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801952c <scalbnf+0xb8>
 80194b4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8019530 <scalbnf+0xbc>
 80194b8:	ee10 3a10 	vmov	r3, s0
 80194bc:	eeb0 7a67 	vmov.f32	s14, s15
 80194c0:	2b00      	cmp	r3, #0
 80194c2:	bfb8      	it	lt
 80194c4:	eef0 7a66 	vmovlt.f32	s15, s13
 80194c8:	ee27 0a87 	vmul.f32	s0, s15, s14
 80194cc:	4770      	bx	lr
 80194ce:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8019534 <scalbnf+0xc0>
 80194d2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80194d6:	4770      	bx	lr
 80194d8:	0dd2      	lsrs	r2, r2, #23
 80194da:	e7e5      	b.n	80194a8 <scalbnf+0x34>
 80194dc:	4410      	add	r0, r2
 80194de:	28fe      	cmp	r0, #254	@ 0xfe
 80194e0:	dce6      	bgt.n	80194b0 <scalbnf+0x3c>
 80194e2:	2800      	cmp	r0, #0
 80194e4:	dd06      	ble.n	80194f4 <scalbnf+0x80>
 80194e6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80194ea:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80194ee:	ee00 3a10 	vmov	s0, r3
 80194f2:	4770      	bx	lr
 80194f4:	f110 0f16 	cmn.w	r0, #22
 80194f8:	da09      	bge.n	801950e <scalbnf+0x9a>
 80194fa:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8019534 <scalbnf+0xc0>
 80194fe:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8019538 <scalbnf+0xc4>
 8019502:	ee10 3a10 	vmov	r3, s0
 8019506:	eeb0 7a67 	vmov.f32	s14, s15
 801950a:	2b00      	cmp	r3, #0
 801950c:	e7d9      	b.n	80194c2 <scalbnf+0x4e>
 801950e:	3019      	adds	r0, #25
 8019510:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8019514:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8019518:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801953c <scalbnf+0xc8>
 801951c:	ee07 3a90 	vmov	s15, r3
 8019520:	e7d7      	b.n	80194d2 <scalbnf+0x5e>
 8019522:	bf00      	nop
 8019524:	ffff3cb0 	.word	0xffff3cb0
 8019528:	4c000000 	.word	0x4c000000
 801952c:	7149f2ca 	.word	0x7149f2ca
 8019530:	f149f2ca 	.word	0xf149f2ca
 8019534:	0da24260 	.word	0x0da24260
 8019538:	8da24260 	.word	0x8da24260
 801953c:	33000000 	.word	0x33000000

08019540 <floorf>:
 8019540:	ee10 3a10 	vmov	r3, s0
 8019544:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019548:	3a7f      	subs	r2, #127	@ 0x7f
 801954a:	2a16      	cmp	r2, #22
 801954c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8019550:	dc2b      	bgt.n	80195aa <floorf+0x6a>
 8019552:	2a00      	cmp	r2, #0
 8019554:	da12      	bge.n	801957c <floorf+0x3c>
 8019556:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80195bc <floorf+0x7c>
 801955a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801955e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019566:	dd06      	ble.n	8019576 <floorf+0x36>
 8019568:	2b00      	cmp	r3, #0
 801956a:	da24      	bge.n	80195b6 <floorf+0x76>
 801956c:	2900      	cmp	r1, #0
 801956e:	4b14      	ldr	r3, [pc, #80]	@ (80195c0 <floorf+0x80>)
 8019570:	bf08      	it	eq
 8019572:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8019576:	ee00 3a10 	vmov	s0, r3
 801957a:	4770      	bx	lr
 801957c:	4911      	ldr	r1, [pc, #68]	@ (80195c4 <floorf+0x84>)
 801957e:	4111      	asrs	r1, r2
 8019580:	420b      	tst	r3, r1
 8019582:	d0fa      	beq.n	801957a <floorf+0x3a>
 8019584:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80195bc <floorf+0x7c>
 8019588:	ee30 0a27 	vadd.f32	s0, s0, s15
 801958c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019594:	ddef      	ble.n	8019576 <floorf+0x36>
 8019596:	2b00      	cmp	r3, #0
 8019598:	bfbe      	ittt	lt
 801959a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801959e:	fa40 f202 	asrlt.w	r2, r0, r2
 80195a2:	189b      	addlt	r3, r3, r2
 80195a4:	ea23 0301 	bic.w	r3, r3, r1
 80195a8:	e7e5      	b.n	8019576 <floorf+0x36>
 80195aa:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80195ae:	d3e4      	bcc.n	801957a <floorf+0x3a>
 80195b0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80195b4:	4770      	bx	lr
 80195b6:	2300      	movs	r3, #0
 80195b8:	e7dd      	b.n	8019576 <floorf+0x36>
 80195ba:	bf00      	nop
 80195bc:	7149f2ca 	.word	0x7149f2ca
 80195c0:	bf800000 	.word	0xbf800000
 80195c4:	007fffff 	.word	0x007fffff

080195c8 <abort>:
 80195c8:	b508      	push	{r3, lr}
 80195ca:	2006      	movs	r0, #6
 80195cc:	f000 fe9e 	bl	801a30c <raise>
 80195d0:	2001      	movs	r0, #1
 80195d2:	f7ed fc29 	bl	8006e28 <_exit>
	...

080195d8 <malloc>:
 80195d8:	4b02      	ldr	r3, [pc, #8]	@ (80195e4 <malloc+0xc>)
 80195da:	4601      	mov	r1, r0
 80195dc:	6818      	ldr	r0, [r3, #0]
 80195de:	f000 b82d 	b.w	801963c <_malloc_r>
 80195e2:	bf00      	nop
 80195e4:	20000150 	.word	0x20000150

080195e8 <free>:
 80195e8:	4b02      	ldr	r3, [pc, #8]	@ (80195f4 <free+0xc>)
 80195ea:	4601      	mov	r1, r0
 80195ec:	6818      	ldr	r0, [r3, #0]
 80195ee:	f001 bd97 	b.w	801b120 <_free_r>
 80195f2:	bf00      	nop
 80195f4:	20000150 	.word	0x20000150

080195f8 <sbrk_aligned>:
 80195f8:	b570      	push	{r4, r5, r6, lr}
 80195fa:	4e0f      	ldr	r6, [pc, #60]	@ (8019638 <sbrk_aligned+0x40>)
 80195fc:	460c      	mov	r4, r1
 80195fe:	6831      	ldr	r1, [r6, #0]
 8019600:	4605      	mov	r5, r0
 8019602:	b911      	cbnz	r1, 801960a <sbrk_aligned+0x12>
 8019604:	f000 fed6 	bl	801a3b4 <_sbrk_r>
 8019608:	6030      	str	r0, [r6, #0]
 801960a:	4621      	mov	r1, r4
 801960c:	4628      	mov	r0, r5
 801960e:	f000 fed1 	bl	801a3b4 <_sbrk_r>
 8019612:	1c43      	adds	r3, r0, #1
 8019614:	d103      	bne.n	801961e <sbrk_aligned+0x26>
 8019616:	f04f 34ff 	mov.w	r4, #4294967295
 801961a:	4620      	mov	r0, r4
 801961c:	bd70      	pop	{r4, r5, r6, pc}
 801961e:	1cc4      	adds	r4, r0, #3
 8019620:	f024 0403 	bic.w	r4, r4, #3
 8019624:	42a0      	cmp	r0, r4
 8019626:	d0f8      	beq.n	801961a <sbrk_aligned+0x22>
 8019628:	1a21      	subs	r1, r4, r0
 801962a:	4628      	mov	r0, r5
 801962c:	f000 fec2 	bl	801a3b4 <_sbrk_r>
 8019630:	3001      	adds	r0, #1
 8019632:	d1f2      	bne.n	801961a <sbrk_aligned+0x22>
 8019634:	e7ef      	b.n	8019616 <sbrk_aligned+0x1e>
 8019636:	bf00      	nop
 8019638:	20002664 	.word	0x20002664

0801963c <_malloc_r>:
 801963c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019640:	1ccd      	adds	r5, r1, #3
 8019642:	f025 0503 	bic.w	r5, r5, #3
 8019646:	3508      	adds	r5, #8
 8019648:	2d0c      	cmp	r5, #12
 801964a:	bf38      	it	cc
 801964c:	250c      	movcc	r5, #12
 801964e:	2d00      	cmp	r5, #0
 8019650:	4606      	mov	r6, r0
 8019652:	db01      	blt.n	8019658 <_malloc_r+0x1c>
 8019654:	42a9      	cmp	r1, r5
 8019656:	d904      	bls.n	8019662 <_malloc_r+0x26>
 8019658:	230c      	movs	r3, #12
 801965a:	6033      	str	r3, [r6, #0]
 801965c:	2000      	movs	r0, #0
 801965e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019662:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019738 <_malloc_r+0xfc>
 8019666:	f000 f869 	bl	801973c <__malloc_lock>
 801966a:	f8d8 3000 	ldr.w	r3, [r8]
 801966e:	461c      	mov	r4, r3
 8019670:	bb44      	cbnz	r4, 80196c4 <_malloc_r+0x88>
 8019672:	4629      	mov	r1, r5
 8019674:	4630      	mov	r0, r6
 8019676:	f7ff ffbf 	bl	80195f8 <sbrk_aligned>
 801967a:	1c43      	adds	r3, r0, #1
 801967c:	4604      	mov	r4, r0
 801967e:	d158      	bne.n	8019732 <_malloc_r+0xf6>
 8019680:	f8d8 4000 	ldr.w	r4, [r8]
 8019684:	4627      	mov	r7, r4
 8019686:	2f00      	cmp	r7, #0
 8019688:	d143      	bne.n	8019712 <_malloc_r+0xd6>
 801968a:	2c00      	cmp	r4, #0
 801968c:	d04b      	beq.n	8019726 <_malloc_r+0xea>
 801968e:	6823      	ldr	r3, [r4, #0]
 8019690:	4639      	mov	r1, r7
 8019692:	4630      	mov	r0, r6
 8019694:	eb04 0903 	add.w	r9, r4, r3
 8019698:	f000 fe8c 	bl	801a3b4 <_sbrk_r>
 801969c:	4581      	cmp	r9, r0
 801969e:	d142      	bne.n	8019726 <_malloc_r+0xea>
 80196a0:	6821      	ldr	r1, [r4, #0]
 80196a2:	1a6d      	subs	r5, r5, r1
 80196a4:	4629      	mov	r1, r5
 80196a6:	4630      	mov	r0, r6
 80196a8:	f7ff ffa6 	bl	80195f8 <sbrk_aligned>
 80196ac:	3001      	adds	r0, #1
 80196ae:	d03a      	beq.n	8019726 <_malloc_r+0xea>
 80196b0:	6823      	ldr	r3, [r4, #0]
 80196b2:	442b      	add	r3, r5
 80196b4:	6023      	str	r3, [r4, #0]
 80196b6:	f8d8 3000 	ldr.w	r3, [r8]
 80196ba:	685a      	ldr	r2, [r3, #4]
 80196bc:	bb62      	cbnz	r2, 8019718 <_malloc_r+0xdc>
 80196be:	f8c8 7000 	str.w	r7, [r8]
 80196c2:	e00f      	b.n	80196e4 <_malloc_r+0xa8>
 80196c4:	6822      	ldr	r2, [r4, #0]
 80196c6:	1b52      	subs	r2, r2, r5
 80196c8:	d420      	bmi.n	801970c <_malloc_r+0xd0>
 80196ca:	2a0b      	cmp	r2, #11
 80196cc:	d917      	bls.n	80196fe <_malloc_r+0xc2>
 80196ce:	1961      	adds	r1, r4, r5
 80196d0:	42a3      	cmp	r3, r4
 80196d2:	6025      	str	r5, [r4, #0]
 80196d4:	bf18      	it	ne
 80196d6:	6059      	strne	r1, [r3, #4]
 80196d8:	6863      	ldr	r3, [r4, #4]
 80196da:	bf08      	it	eq
 80196dc:	f8c8 1000 	streq.w	r1, [r8]
 80196e0:	5162      	str	r2, [r4, r5]
 80196e2:	604b      	str	r3, [r1, #4]
 80196e4:	4630      	mov	r0, r6
 80196e6:	f000 f82f 	bl	8019748 <__malloc_unlock>
 80196ea:	f104 000b 	add.w	r0, r4, #11
 80196ee:	1d23      	adds	r3, r4, #4
 80196f0:	f020 0007 	bic.w	r0, r0, #7
 80196f4:	1ac2      	subs	r2, r0, r3
 80196f6:	bf1c      	itt	ne
 80196f8:	1a1b      	subne	r3, r3, r0
 80196fa:	50a3      	strne	r3, [r4, r2]
 80196fc:	e7af      	b.n	801965e <_malloc_r+0x22>
 80196fe:	6862      	ldr	r2, [r4, #4]
 8019700:	42a3      	cmp	r3, r4
 8019702:	bf0c      	ite	eq
 8019704:	f8c8 2000 	streq.w	r2, [r8]
 8019708:	605a      	strne	r2, [r3, #4]
 801970a:	e7eb      	b.n	80196e4 <_malloc_r+0xa8>
 801970c:	4623      	mov	r3, r4
 801970e:	6864      	ldr	r4, [r4, #4]
 8019710:	e7ae      	b.n	8019670 <_malloc_r+0x34>
 8019712:	463c      	mov	r4, r7
 8019714:	687f      	ldr	r7, [r7, #4]
 8019716:	e7b6      	b.n	8019686 <_malloc_r+0x4a>
 8019718:	461a      	mov	r2, r3
 801971a:	685b      	ldr	r3, [r3, #4]
 801971c:	42a3      	cmp	r3, r4
 801971e:	d1fb      	bne.n	8019718 <_malloc_r+0xdc>
 8019720:	2300      	movs	r3, #0
 8019722:	6053      	str	r3, [r2, #4]
 8019724:	e7de      	b.n	80196e4 <_malloc_r+0xa8>
 8019726:	230c      	movs	r3, #12
 8019728:	6033      	str	r3, [r6, #0]
 801972a:	4630      	mov	r0, r6
 801972c:	f000 f80c 	bl	8019748 <__malloc_unlock>
 8019730:	e794      	b.n	801965c <_malloc_r+0x20>
 8019732:	6005      	str	r5, [r0, #0]
 8019734:	e7d6      	b.n	80196e4 <_malloc_r+0xa8>
 8019736:	bf00      	nop
 8019738:	20002668 	.word	0x20002668

0801973c <__malloc_lock>:
 801973c:	4801      	ldr	r0, [pc, #4]	@ (8019744 <__malloc_lock+0x8>)
 801973e:	f000 be86 	b.w	801a44e <__retarget_lock_acquire_recursive>
 8019742:	bf00      	nop
 8019744:	200027ac 	.word	0x200027ac

08019748 <__malloc_unlock>:
 8019748:	4801      	ldr	r0, [pc, #4]	@ (8019750 <__malloc_unlock+0x8>)
 801974a:	f000 be81 	b.w	801a450 <__retarget_lock_release_recursive>
 801974e:	bf00      	nop
 8019750:	200027ac 	.word	0x200027ac

08019754 <__cvt>:
 8019754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019758:	ec57 6b10 	vmov	r6, r7, d0
 801975c:	2f00      	cmp	r7, #0
 801975e:	460c      	mov	r4, r1
 8019760:	4619      	mov	r1, r3
 8019762:	463b      	mov	r3, r7
 8019764:	bfbb      	ittet	lt
 8019766:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801976a:	461f      	movlt	r7, r3
 801976c:	2300      	movge	r3, #0
 801976e:	232d      	movlt	r3, #45	@ 0x2d
 8019770:	700b      	strb	r3, [r1, #0]
 8019772:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019774:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8019778:	4691      	mov	r9, r2
 801977a:	f023 0820 	bic.w	r8, r3, #32
 801977e:	bfbc      	itt	lt
 8019780:	4632      	movlt	r2, r6
 8019782:	4616      	movlt	r6, r2
 8019784:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8019788:	d005      	beq.n	8019796 <__cvt+0x42>
 801978a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801978e:	d100      	bne.n	8019792 <__cvt+0x3e>
 8019790:	3401      	adds	r4, #1
 8019792:	2102      	movs	r1, #2
 8019794:	e000      	b.n	8019798 <__cvt+0x44>
 8019796:	2103      	movs	r1, #3
 8019798:	ab03      	add	r3, sp, #12
 801979a:	9301      	str	r3, [sp, #4]
 801979c:	ab02      	add	r3, sp, #8
 801979e:	9300      	str	r3, [sp, #0]
 80197a0:	ec47 6b10 	vmov	d0, r6, r7
 80197a4:	4653      	mov	r3, sl
 80197a6:	4622      	mov	r2, r4
 80197a8:	f000 feea 	bl	801a580 <_dtoa_r>
 80197ac:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80197b0:	4605      	mov	r5, r0
 80197b2:	d119      	bne.n	80197e8 <__cvt+0x94>
 80197b4:	f019 0f01 	tst.w	r9, #1
 80197b8:	d00e      	beq.n	80197d8 <__cvt+0x84>
 80197ba:	eb00 0904 	add.w	r9, r0, r4
 80197be:	2200      	movs	r2, #0
 80197c0:	2300      	movs	r3, #0
 80197c2:	4630      	mov	r0, r6
 80197c4:	4639      	mov	r1, r7
 80197c6:	f7e7 f957 	bl	8000a78 <__aeabi_dcmpeq>
 80197ca:	b108      	cbz	r0, 80197d0 <__cvt+0x7c>
 80197cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80197d0:	2230      	movs	r2, #48	@ 0x30
 80197d2:	9b03      	ldr	r3, [sp, #12]
 80197d4:	454b      	cmp	r3, r9
 80197d6:	d31e      	bcc.n	8019816 <__cvt+0xc2>
 80197d8:	9b03      	ldr	r3, [sp, #12]
 80197da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80197dc:	1b5b      	subs	r3, r3, r5
 80197de:	4628      	mov	r0, r5
 80197e0:	6013      	str	r3, [r2, #0]
 80197e2:	b004      	add	sp, #16
 80197e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80197e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80197ec:	eb00 0904 	add.w	r9, r0, r4
 80197f0:	d1e5      	bne.n	80197be <__cvt+0x6a>
 80197f2:	7803      	ldrb	r3, [r0, #0]
 80197f4:	2b30      	cmp	r3, #48	@ 0x30
 80197f6:	d10a      	bne.n	801980e <__cvt+0xba>
 80197f8:	2200      	movs	r2, #0
 80197fa:	2300      	movs	r3, #0
 80197fc:	4630      	mov	r0, r6
 80197fe:	4639      	mov	r1, r7
 8019800:	f7e7 f93a 	bl	8000a78 <__aeabi_dcmpeq>
 8019804:	b918      	cbnz	r0, 801980e <__cvt+0xba>
 8019806:	f1c4 0401 	rsb	r4, r4, #1
 801980a:	f8ca 4000 	str.w	r4, [sl]
 801980e:	f8da 3000 	ldr.w	r3, [sl]
 8019812:	4499      	add	r9, r3
 8019814:	e7d3      	b.n	80197be <__cvt+0x6a>
 8019816:	1c59      	adds	r1, r3, #1
 8019818:	9103      	str	r1, [sp, #12]
 801981a:	701a      	strb	r2, [r3, #0]
 801981c:	e7d9      	b.n	80197d2 <__cvt+0x7e>

0801981e <__exponent>:
 801981e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019820:	2900      	cmp	r1, #0
 8019822:	bfba      	itte	lt
 8019824:	4249      	neglt	r1, r1
 8019826:	232d      	movlt	r3, #45	@ 0x2d
 8019828:	232b      	movge	r3, #43	@ 0x2b
 801982a:	2909      	cmp	r1, #9
 801982c:	7002      	strb	r2, [r0, #0]
 801982e:	7043      	strb	r3, [r0, #1]
 8019830:	dd29      	ble.n	8019886 <__exponent+0x68>
 8019832:	f10d 0307 	add.w	r3, sp, #7
 8019836:	461d      	mov	r5, r3
 8019838:	270a      	movs	r7, #10
 801983a:	461a      	mov	r2, r3
 801983c:	fbb1 f6f7 	udiv	r6, r1, r7
 8019840:	fb07 1416 	mls	r4, r7, r6, r1
 8019844:	3430      	adds	r4, #48	@ 0x30
 8019846:	f802 4c01 	strb.w	r4, [r2, #-1]
 801984a:	460c      	mov	r4, r1
 801984c:	2c63      	cmp	r4, #99	@ 0x63
 801984e:	f103 33ff 	add.w	r3, r3, #4294967295
 8019852:	4631      	mov	r1, r6
 8019854:	dcf1      	bgt.n	801983a <__exponent+0x1c>
 8019856:	3130      	adds	r1, #48	@ 0x30
 8019858:	1e94      	subs	r4, r2, #2
 801985a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801985e:	1c41      	adds	r1, r0, #1
 8019860:	4623      	mov	r3, r4
 8019862:	42ab      	cmp	r3, r5
 8019864:	d30a      	bcc.n	801987c <__exponent+0x5e>
 8019866:	f10d 0309 	add.w	r3, sp, #9
 801986a:	1a9b      	subs	r3, r3, r2
 801986c:	42ac      	cmp	r4, r5
 801986e:	bf88      	it	hi
 8019870:	2300      	movhi	r3, #0
 8019872:	3302      	adds	r3, #2
 8019874:	4403      	add	r3, r0
 8019876:	1a18      	subs	r0, r3, r0
 8019878:	b003      	add	sp, #12
 801987a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801987c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8019880:	f801 6f01 	strb.w	r6, [r1, #1]!
 8019884:	e7ed      	b.n	8019862 <__exponent+0x44>
 8019886:	2330      	movs	r3, #48	@ 0x30
 8019888:	3130      	adds	r1, #48	@ 0x30
 801988a:	7083      	strb	r3, [r0, #2]
 801988c:	70c1      	strb	r1, [r0, #3]
 801988e:	1d03      	adds	r3, r0, #4
 8019890:	e7f1      	b.n	8019876 <__exponent+0x58>
	...

08019894 <_printf_float>:
 8019894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019898:	b08d      	sub	sp, #52	@ 0x34
 801989a:	460c      	mov	r4, r1
 801989c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80198a0:	4616      	mov	r6, r2
 80198a2:	461f      	mov	r7, r3
 80198a4:	4605      	mov	r5, r0
 80198a6:	f000 fd39 	bl	801a31c <_localeconv_r>
 80198aa:	6803      	ldr	r3, [r0, #0]
 80198ac:	9304      	str	r3, [sp, #16]
 80198ae:	4618      	mov	r0, r3
 80198b0:	f7e6 fcb6 	bl	8000220 <strlen>
 80198b4:	2300      	movs	r3, #0
 80198b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80198b8:	f8d8 3000 	ldr.w	r3, [r8]
 80198bc:	9005      	str	r0, [sp, #20]
 80198be:	3307      	adds	r3, #7
 80198c0:	f023 0307 	bic.w	r3, r3, #7
 80198c4:	f103 0208 	add.w	r2, r3, #8
 80198c8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80198cc:	f8d4 b000 	ldr.w	fp, [r4]
 80198d0:	f8c8 2000 	str.w	r2, [r8]
 80198d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80198d8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80198dc:	9307      	str	r3, [sp, #28]
 80198de:	f8cd 8018 	str.w	r8, [sp, #24]
 80198e2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80198e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80198ea:	4b9c      	ldr	r3, [pc, #624]	@ (8019b5c <_printf_float+0x2c8>)
 80198ec:	f04f 32ff 	mov.w	r2, #4294967295
 80198f0:	f7e7 f8f4 	bl	8000adc <__aeabi_dcmpun>
 80198f4:	bb70      	cbnz	r0, 8019954 <_printf_float+0xc0>
 80198f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80198fa:	4b98      	ldr	r3, [pc, #608]	@ (8019b5c <_printf_float+0x2c8>)
 80198fc:	f04f 32ff 	mov.w	r2, #4294967295
 8019900:	f7e7 f8ce 	bl	8000aa0 <__aeabi_dcmple>
 8019904:	bb30      	cbnz	r0, 8019954 <_printf_float+0xc0>
 8019906:	2200      	movs	r2, #0
 8019908:	2300      	movs	r3, #0
 801990a:	4640      	mov	r0, r8
 801990c:	4649      	mov	r1, r9
 801990e:	f7e7 f8bd 	bl	8000a8c <__aeabi_dcmplt>
 8019912:	b110      	cbz	r0, 801991a <_printf_float+0x86>
 8019914:	232d      	movs	r3, #45	@ 0x2d
 8019916:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801991a:	4a91      	ldr	r2, [pc, #580]	@ (8019b60 <_printf_float+0x2cc>)
 801991c:	4b91      	ldr	r3, [pc, #580]	@ (8019b64 <_printf_float+0x2d0>)
 801991e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8019922:	bf8c      	ite	hi
 8019924:	4690      	movhi	r8, r2
 8019926:	4698      	movls	r8, r3
 8019928:	2303      	movs	r3, #3
 801992a:	6123      	str	r3, [r4, #16]
 801992c:	f02b 0304 	bic.w	r3, fp, #4
 8019930:	6023      	str	r3, [r4, #0]
 8019932:	f04f 0900 	mov.w	r9, #0
 8019936:	9700      	str	r7, [sp, #0]
 8019938:	4633      	mov	r3, r6
 801993a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801993c:	4621      	mov	r1, r4
 801993e:	4628      	mov	r0, r5
 8019940:	f000 f9d2 	bl	8019ce8 <_printf_common>
 8019944:	3001      	adds	r0, #1
 8019946:	f040 808d 	bne.w	8019a64 <_printf_float+0x1d0>
 801994a:	f04f 30ff 	mov.w	r0, #4294967295
 801994e:	b00d      	add	sp, #52	@ 0x34
 8019950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019954:	4642      	mov	r2, r8
 8019956:	464b      	mov	r3, r9
 8019958:	4640      	mov	r0, r8
 801995a:	4649      	mov	r1, r9
 801995c:	f7e7 f8be 	bl	8000adc <__aeabi_dcmpun>
 8019960:	b140      	cbz	r0, 8019974 <_printf_float+0xe0>
 8019962:	464b      	mov	r3, r9
 8019964:	2b00      	cmp	r3, #0
 8019966:	bfbc      	itt	lt
 8019968:	232d      	movlt	r3, #45	@ 0x2d
 801996a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801996e:	4a7e      	ldr	r2, [pc, #504]	@ (8019b68 <_printf_float+0x2d4>)
 8019970:	4b7e      	ldr	r3, [pc, #504]	@ (8019b6c <_printf_float+0x2d8>)
 8019972:	e7d4      	b.n	801991e <_printf_float+0x8a>
 8019974:	6863      	ldr	r3, [r4, #4]
 8019976:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801997a:	9206      	str	r2, [sp, #24]
 801997c:	1c5a      	adds	r2, r3, #1
 801997e:	d13b      	bne.n	80199f8 <_printf_float+0x164>
 8019980:	2306      	movs	r3, #6
 8019982:	6063      	str	r3, [r4, #4]
 8019984:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8019988:	2300      	movs	r3, #0
 801998a:	6022      	str	r2, [r4, #0]
 801998c:	9303      	str	r3, [sp, #12]
 801998e:	ab0a      	add	r3, sp, #40	@ 0x28
 8019990:	e9cd a301 	strd	sl, r3, [sp, #4]
 8019994:	ab09      	add	r3, sp, #36	@ 0x24
 8019996:	9300      	str	r3, [sp, #0]
 8019998:	6861      	ldr	r1, [r4, #4]
 801999a:	ec49 8b10 	vmov	d0, r8, r9
 801999e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80199a2:	4628      	mov	r0, r5
 80199a4:	f7ff fed6 	bl	8019754 <__cvt>
 80199a8:	9b06      	ldr	r3, [sp, #24]
 80199aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80199ac:	2b47      	cmp	r3, #71	@ 0x47
 80199ae:	4680      	mov	r8, r0
 80199b0:	d129      	bne.n	8019a06 <_printf_float+0x172>
 80199b2:	1cc8      	adds	r0, r1, #3
 80199b4:	db02      	blt.n	80199bc <_printf_float+0x128>
 80199b6:	6863      	ldr	r3, [r4, #4]
 80199b8:	4299      	cmp	r1, r3
 80199ba:	dd41      	ble.n	8019a40 <_printf_float+0x1ac>
 80199bc:	f1aa 0a02 	sub.w	sl, sl, #2
 80199c0:	fa5f fa8a 	uxtb.w	sl, sl
 80199c4:	3901      	subs	r1, #1
 80199c6:	4652      	mov	r2, sl
 80199c8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80199cc:	9109      	str	r1, [sp, #36]	@ 0x24
 80199ce:	f7ff ff26 	bl	801981e <__exponent>
 80199d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80199d4:	1813      	adds	r3, r2, r0
 80199d6:	2a01      	cmp	r2, #1
 80199d8:	4681      	mov	r9, r0
 80199da:	6123      	str	r3, [r4, #16]
 80199dc:	dc02      	bgt.n	80199e4 <_printf_float+0x150>
 80199de:	6822      	ldr	r2, [r4, #0]
 80199e0:	07d2      	lsls	r2, r2, #31
 80199e2:	d501      	bpl.n	80199e8 <_printf_float+0x154>
 80199e4:	3301      	adds	r3, #1
 80199e6:	6123      	str	r3, [r4, #16]
 80199e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d0a2      	beq.n	8019936 <_printf_float+0xa2>
 80199f0:	232d      	movs	r3, #45	@ 0x2d
 80199f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80199f6:	e79e      	b.n	8019936 <_printf_float+0xa2>
 80199f8:	9a06      	ldr	r2, [sp, #24]
 80199fa:	2a47      	cmp	r2, #71	@ 0x47
 80199fc:	d1c2      	bne.n	8019984 <_printf_float+0xf0>
 80199fe:	2b00      	cmp	r3, #0
 8019a00:	d1c0      	bne.n	8019984 <_printf_float+0xf0>
 8019a02:	2301      	movs	r3, #1
 8019a04:	e7bd      	b.n	8019982 <_printf_float+0xee>
 8019a06:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8019a0a:	d9db      	bls.n	80199c4 <_printf_float+0x130>
 8019a0c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8019a10:	d118      	bne.n	8019a44 <_printf_float+0x1b0>
 8019a12:	2900      	cmp	r1, #0
 8019a14:	6863      	ldr	r3, [r4, #4]
 8019a16:	dd0b      	ble.n	8019a30 <_printf_float+0x19c>
 8019a18:	6121      	str	r1, [r4, #16]
 8019a1a:	b913      	cbnz	r3, 8019a22 <_printf_float+0x18e>
 8019a1c:	6822      	ldr	r2, [r4, #0]
 8019a1e:	07d0      	lsls	r0, r2, #31
 8019a20:	d502      	bpl.n	8019a28 <_printf_float+0x194>
 8019a22:	3301      	adds	r3, #1
 8019a24:	440b      	add	r3, r1
 8019a26:	6123      	str	r3, [r4, #16]
 8019a28:	65a1      	str	r1, [r4, #88]	@ 0x58
 8019a2a:	f04f 0900 	mov.w	r9, #0
 8019a2e:	e7db      	b.n	80199e8 <_printf_float+0x154>
 8019a30:	b913      	cbnz	r3, 8019a38 <_printf_float+0x1a4>
 8019a32:	6822      	ldr	r2, [r4, #0]
 8019a34:	07d2      	lsls	r2, r2, #31
 8019a36:	d501      	bpl.n	8019a3c <_printf_float+0x1a8>
 8019a38:	3302      	adds	r3, #2
 8019a3a:	e7f4      	b.n	8019a26 <_printf_float+0x192>
 8019a3c:	2301      	movs	r3, #1
 8019a3e:	e7f2      	b.n	8019a26 <_printf_float+0x192>
 8019a40:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8019a44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019a46:	4299      	cmp	r1, r3
 8019a48:	db05      	blt.n	8019a56 <_printf_float+0x1c2>
 8019a4a:	6823      	ldr	r3, [r4, #0]
 8019a4c:	6121      	str	r1, [r4, #16]
 8019a4e:	07d8      	lsls	r0, r3, #31
 8019a50:	d5ea      	bpl.n	8019a28 <_printf_float+0x194>
 8019a52:	1c4b      	adds	r3, r1, #1
 8019a54:	e7e7      	b.n	8019a26 <_printf_float+0x192>
 8019a56:	2900      	cmp	r1, #0
 8019a58:	bfd4      	ite	le
 8019a5a:	f1c1 0202 	rsble	r2, r1, #2
 8019a5e:	2201      	movgt	r2, #1
 8019a60:	4413      	add	r3, r2
 8019a62:	e7e0      	b.n	8019a26 <_printf_float+0x192>
 8019a64:	6823      	ldr	r3, [r4, #0]
 8019a66:	055a      	lsls	r2, r3, #21
 8019a68:	d407      	bmi.n	8019a7a <_printf_float+0x1e6>
 8019a6a:	6923      	ldr	r3, [r4, #16]
 8019a6c:	4642      	mov	r2, r8
 8019a6e:	4631      	mov	r1, r6
 8019a70:	4628      	mov	r0, r5
 8019a72:	47b8      	blx	r7
 8019a74:	3001      	adds	r0, #1
 8019a76:	d12b      	bne.n	8019ad0 <_printf_float+0x23c>
 8019a78:	e767      	b.n	801994a <_printf_float+0xb6>
 8019a7a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8019a7e:	f240 80dd 	bls.w	8019c3c <_printf_float+0x3a8>
 8019a82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8019a86:	2200      	movs	r2, #0
 8019a88:	2300      	movs	r3, #0
 8019a8a:	f7e6 fff5 	bl	8000a78 <__aeabi_dcmpeq>
 8019a8e:	2800      	cmp	r0, #0
 8019a90:	d033      	beq.n	8019afa <_printf_float+0x266>
 8019a92:	4a37      	ldr	r2, [pc, #220]	@ (8019b70 <_printf_float+0x2dc>)
 8019a94:	2301      	movs	r3, #1
 8019a96:	4631      	mov	r1, r6
 8019a98:	4628      	mov	r0, r5
 8019a9a:	47b8      	blx	r7
 8019a9c:	3001      	adds	r0, #1
 8019a9e:	f43f af54 	beq.w	801994a <_printf_float+0xb6>
 8019aa2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8019aa6:	4543      	cmp	r3, r8
 8019aa8:	db02      	blt.n	8019ab0 <_printf_float+0x21c>
 8019aaa:	6823      	ldr	r3, [r4, #0]
 8019aac:	07d8      	lsls	r0, r3, #31
 8019aae:	d50f      	bpl.n	8019ad0 <_printf_float+0x23c>
 8019ab0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019ab4:	4631      	mov	r1, r6
 8019ab6:	4628      	mov	r0, r5
 8019ab8:	47b8      	blx	r7
 8019aba:	3001      	adds	r0, #1
 8019abc:	f43f af45 	beq.w	801994a <_printf_float+0xb6>
 8019ac0:	f04f 0900 	mov.w	r9, #0
 8019ac4:	f108 38ff 	add.w	r8, r8, #4294967295
 8019ac8:	f104 0a1a 	add.w	sl, r4, #26
 8019acc:	45c8      	cmp	r8, r9
 8019ace:	dc09      	bgt.n	8019ae4 <_printf_float+0x250>
 8019ad0:	6823      	ldr	r3, [r4, #0]
 8019ad2:	079b      	lsls	r3, r3, #30
 8019ad4:	f100 8103 	bmi.w	8019cde <_printf_float+0x44a>
 8019ad8:	68e0      	ldr	r0, [r4, #12]
 8019ada:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019adc:	4298      	cmp	r0, r3
 8019ade:	bfb8      	it	lt
 8019ae0:	4618      	movlt	r0, r3
 8019ae2:	e734      	b.n	801994e <_printf_float+0xba>
 8019ae4:	2301      	movs	r3, #1
 8019ae6:	4652      	mov	r2, sl
 8019ae8:	4631      	mov	r1, r6
 8019aea:	4628      	mov	r0, r5
 8019aec:	47b8      	blx	r7
 8019aee:	3001      	adds	r0, #1
 8019af0:	f43f af2b 	beq.w	801994a <_printf_float+0xb6>
 8019af4:	f109 0901 	add.w	r9, r9, #1
 8019af8:	e7e8      	b.n	8019acc <_printf_float+0x238>
 8019afa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019afc:	2b00      	cmp	r3, #0
 8019afe:	dc39      	bgt.n	8019b74 <_printf_float+0x2e0>
 8019b00:	4a1b      	ldr	r2, [pc, #108]	@ (8019b70 <_printf_float+0x2dc>)
 8019b02:	2301      	movs	r3, #1
 8019b04:	4631      	mov	r1, r6
 8019b06:	4628      	mov	r0, r5
 8019b08:	47b8      	blx	r7
 8019b0a:	3001      	adds	r0, #1
 8019b0c:	f43f af1d 	beq.w	801994a <_printf_float+0xb6>
 8019b10:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8019b14:	ea59 0303 	orrs.w	r3, r9, r3
 8019b18:	d102      	bne.n	8019b20 <_printf_float+0x28c>
 8019b1a:	6823      	ldr	r3, [r4, #0]
 8019b1c:	07d9      	lsls	r1, r3, #31
 8019b1e:	d5d7      	bpl.n	8019ad0 <_printf_float+0x23c>
 8019b20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019b24:	4631      	mov	r1, r6
 8019b26:	4628      	mov	r0, r5
 8019b28:	47b8      	blx	r7
 8019b2a:	3001      	adds	r0, #1
 8019b2c:	f43f af0d 	beq.w	801994a <_printf_float+0xb6>
 8019b30:	f04f 0a00 	mov.w	sl, #0
 8019b34:	f104 0b1a 	add.w	fp, r4, #26
 8019b38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019b3a:	425b      	negs	r3, r3
 8019b3c:	4553      	cmp	r3, sl
 8019b3e:	dc01      	bgt.n	8019b44 <_printf_float+0x2b0>
 8019b40:	464b      	mov	r3, r9
 8019b42:	e793      	b.n	8019a6c <_printf_float+0x1d8>
 8019b44:	2301      	movs	r3, #1
 8019b46:	465a      	mov	r2, fp
 8019b48:	4631      	mov	r1, r6
 8019b4a:	4628      	mov	r0, r5
 8019b4c:	47b8      	blx	r7
 8019b4e:	3001      	adds	r0, #1
 8019b50:	f43f aefb 	beq.w	801994a <_printf_float+0xb6>
 8019b54:	f10a 0a01 	add.w	sl, sl, #1
 8019b58:	e7ee      	b.n	8019b38 <_printf_float+0x2a4>
 8019b5a:	bf00      	nop
 8019b5c:	7fefffff 	.word	0x7fefffff
 8019b60:	0801d818 	.word	0x0801d818
 8019b64:	0801d814 	.word	0x0801d814
 8019b68:	0801d820 	.word	0x0801d820
 8019b6c:	0801d81c 	.word	0x0801d81c
 8019b70:	0801d824 	.word	0x0801d824
 8019b74:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8019b76:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8019b7a:	4553      	cmp	r3, sl
 8019b7c:	bfa8      	it	ge
 8019b7e:	4653      	movge	r3, sl
 8019b80:	2b00      	cmp	r3, #0
 8019b82:	4699      	mov	r9, r3
 8019b84:	dc36      	bgt.n	8019bf4 <_printf_float+0x360>
 8019b86:	f04f 0b00 	mov.w	fp, #0
 8019b8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019b8e:	f104 021a 	add.w	r2, r4, #26
 8019b92:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8019b94:	9306      	str	r3, [sp, #24]
 8019b96:	eba3 0309 	sub.w	r3, r3, r9
 8019b9a:	455b      	cmp	r3, fp
 8019b9c:	dc31      	bgt.n	8019c02 <_printf_float+0x36e>
 8019b9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019ba0:	459a      	cmp	sl, r3
 8019ba2:	dc3a      	bgt.n	8019c1a <_printf_float+0x386>
 8019ba4:	6823      	ldr	r3, [r4, #0]
 8019ba6:	07da      	lsls	r2, r3, #31
 8019ba8:	d437      	bmi.n	8019c1a <_printf_float+0x386>
 8019baa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019bac:	ebaa 0903 	sub.w	r9, sl, r3
 8019bb0:	9b06      	ldr	r3, [sp, #24]
 8019bb2:	ebaa 0303 	sub.w	r3, sl, r3
 8019bb6:	4599      	cmp	r9, r3
 8019bb8:	bfa8      	it	ge
 8019bba:	4699      	movge	r9, r3
 8019bbc:	f1b9 0f00 	cmp.w	r9, #0
 8019bc0:	dc33      	bgt.n	8019c2a <_printf_float+0x396>
 8019bc2:	f04f 0800 	mov.w	r8, #0
 8019bc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019bca:	f104 0b1a 	add.w	fp, r4, #26
 8019bce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019bd0:	ebaa 0303 	sub.w	r3, sl, r3
 8019bd4:	eba3 0309 	sub.w	r3, r3, r9
 8019bd8:	4543      	cmp	r3, r8
 8019bda:	f77f af79 	ble.w	8019ad0 <_printf_float+0x23c>
 8019bde:	2301      	movs	r3, #1
 8019be0:	465a      	mov	r2, fp
 8019be2:	4631      	mov	r1, r6
 8019be4:	4628      	mov	r0, r5
 8019be6:	47b8      	blx	r7
 8019be8:	3001      	adds	r0, #1
 8019bea:	f43f aeae 	beq.w	801994a <_printf_float+0xb6>
 8019bee:	f108 0801 	add.w	r8, r8, #1
 8019bf2:	e7ec      	b.n	8019bce <_printf_float+0x33a>
 8019bf4:	4642      	mov	r2, r8
 8019bf6:	4631      	mov	r1, r6
 8019bf8:	4628      	mov	r0, r5
 8019bfa:	47b8      	blx	r7
 8019bfc:	3001      	adds	r0, #1
 8019bfe:	d1c2      	bne.n	8019b86 <_printf_float+0x2f2>
 8019c00:	e6a3      	b.n	801994a <_printf_float+0xb6>
 8019c02:	2301      	movs	r3, #1
 8019c04:	4631      	mov	r1, r6
 8019c06:	4628      	mov	r0, r5
 8019c08:	9206      	str	r2, [sp, #24]
 8019c0a:	47b8      	blx	r7
 8019c0c:	3001      	adds	r0, #1
 8019c0e:	f43f ae9c 	beq.w	801994a <_printf_float+0xb6>
 8019c12:	9a06      	ldr	r2, [sp, #24]
 8019c14:	f10b 0b01 	add.w	fp, fp, #1
 8019c18:	e7bb      	b.n	8019b92 <_printf_float+0x2fe>
 8019c1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019c1e:	4631      	mov	r1, r6
 8019c20:	4628      	mov	r0, r5
 8019c22:	47b8      	blx	r7
 8019c24:	3001      	adds	r0, #1
 8019c26:	d1c0      	bne.n	8019baa <_printf_float+0x316>
 8019c28:	e68f      	b.n	801994a <_printf_float+0xb6>
 8019c2a:	9a06      	ldr	r2, [sp, #24]
 8019c2c:	464b      	mov	r3, r9
 8019c2e:	4442      	add	r2, r8
 8019c30:	4631      	mov	r1, r6
 8019c32:	4628      	mov	r0, r5
 8019c34:	47b8      	blx	r7
 8019c36:	3001      	adds	r0, #1
 8019c38:	d1c3      	bne.n	8019bc2 <_printf_float+0x32e>
 8019c3a:	e686      	b.n	801994a <_printf_float+0xb6>
 8019c3c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8019c40:	f1ba 0f01 	cmp.w	sl, #1
 8019c44:	dc01      	bgt.n	8019c4a <_printf_float+0x3b6>
 8019c46:	07db      	lsls	r3, r3, #31
 8019c48:	d536      	bpl.n	8019cb8 <_printf_float+0x424>
 8019c4a:	2301      	movs	r3, #1
 8019c4c:	4642      	mov	r2, r8
 8019c4e:	4631      	mov	r1, r6
 8019c50:	4628      	mov	r0, r5
 8019c52:	47b8      	blx	r7
 8019c54:	3001      	adds	r0, #1
 8019c56:	f43f ae78 	beq.w	801994a <_printf_float+0xb6>
 8019c5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019c5e:	4631      	mov	r1, r6
 8019c60:	4628      	mov	r0, r5
 8019c62:	47b8      	blx	r7
 8019c64:	3001      	adds	r0, #1
 8019c66:	f43f ae70 	beq.w	801994a <_printf_float+0xb6>
 8019c6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8019c6e:	2200      	movs	r2, #0
 8019c70:	2300      	movs	r3, #0
 8019c72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019c76:	f7e6 feff 	bl	8000a78 <__aeabi_dcmpeq>
 8019c7a:	b9c0      	cbnz	r0, 8019cae <_printf_float+0x41a>
 8019c7c:	4653      	mov	r3, sl
 8019c7e:	f108 0201 	add.w	r2, r8, #1
 8019c82:	4631      	mov	r1, r6
 8019c84:	4628      	mov	r0, r5
 8019c86:	47b8      	blx	r7
 8019c88:	3001      	adds	r0, #1
 8019c8a:	d10c      	bne.n	8019ca6 <_printf_float+0x412>
 8019c8c:	e65d      	b.n	801994a <_printf_float+0xb6>
 8019c8e:	2301      	movs	r3, #1
 8019c90:	465a      	mov	r2, fp
 8019c92:	4631      	mov	r1, r6
 8019c94:	4628      	mov	r0, r5
 8019c96:	47b8      	blx	r7
 8019c98:	3001      	adds	r0, #1
 8019c9a:	f43f ae56 	beq.w	801994a <_printf_float+0xb6>
 8019c9e:	f108 0801 	add.w	r8, r8, #1
 8019ca2:	45d0      	cmp	r8, sl
 8019ca4:	dbf3      	blt.n	8019c8e <_printf_float+0x3fa>
 8019ca6:	464b      	mov	r3, r9
 8019ca8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8019cac:	e6df      	b.n	8019a6e <_printf_float+0x1da>
 8019cae:	f04f 0800 	mov.w	r8, #0
 8019cb2:	f104 0b1a 	add.w	fp, r4, #26
 8019cb6:	e7f4      	b.n	8019ca2 <_printf_float+0x40e>
 8019cb8:	2301      	movs	r3, #1
 8019cba:	4642      	mov	r2, r8
 8019cbc:	e7e1      	b.n	8019c82 <_printf_float+0x3ee>
 8019cbe:	2301      	movs	r3, #1
 8019cc0:	464a      	mov	r2, r9
 8019cc2:	4631      	mov	r1, r6
 8019cc4:	4628      	mov	r0, r5
 8019cc6:	47b8      	blx	r7
 8019cc8:	3001      	adds	r0, #1
 8019cca:	f43f ae3e 	beq.w	801994a <_printf_float+0xb6>
 8019cce:	f108 0801 	add.w	r8, r8, #1
 8019cd2:	68e3      	ldr	r3, [r4, #12]
 8019cd4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8019cd6:	1a5b      	subs	r3, r3, r1
 8019cd8:	4543      	cmp	r3, r8
 8019cda:	dcf0      	bgt.n	8019cbe <_printf_float+0x42a>
 8019cdc:	e6fc      	b.n	8019ad8 <_printf_float+0x244>
 8019cde:	f04f 0800 	mov.w	r8, #0
 8019ce2:	f104 0919 	add.w	r9, r4, #25
 8019ce6:	e7f4      	b.n	8019cd2 <_printf_float+0x43e>

08019ce8 <_printf_common>:
 8019ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019cec:	4616      	mov	r6, r2
 8019cee:	4698      	mov	r8, r3
 8019cf0:	688a      	ldr	r2, [r1, #8]
 8019cf2:	690b      	ldr	r3, [r1, #16]
 8019cf4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019cf8:	4293      	cmp	r3, r2
 8019cfa:	bfb8      	it	lt
 8019cfc:	4613      	movlt	r3, r2
 8019cfe:	6033      	str	r3, [r6, #0]
 8019d00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019d04:	4607      	mov	r7, r0
 8019d06:	460c      	mov	r4, r1
 8019d08:	b10a      	cbz	r2, 8019d0e <_printf_common+0x26>
 8019d0a:	3301      	adds	r3, #1
 8019d0c:	6033      	str	r3, [r6, #0]
 8019d0e:	6823      	ldr	r3, [r4, #0]
 8019d10:	0699      	lsls	r1, r3, #26
 8019d12:	bf42      	ittt	mi
 8019d14:	6833      	ldrmi	r3, [r6, #0]
 8019d16:	3302      	addmi	r3, #2
 8019d18:	6033      	strmi	r3, [r6, #0]
 8019d1a:	6825      	ldr	r5, [r4, #0]
 8019d1c:	f015 0506 	ands.w	r5, r5, #6
 8019d20:	d106      	bne.n	8019d30 <_printf_common+0x48>
 8019d22:	f104 0a19 	add.w	sl, r4, #25
 8019d26:	68e3      	ldr	r3, [r4, #12]
 8019d28:	6832      	ldr	r2, [r6, #0]
 8019d2a:	1a9b      	subs	r3, r3, r2
 8019d2c:	42ab      	cmp	r3, r5
 8019d2e:	dc26      	bgt.n	8019d7e <_printf_common+0x96>
 8019d30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019d34:	6822      	ldr	r2, [r4, #0]
 8019d36:	3b00      	subs	r3, #0
 8019d38:	bf18      	it	ne
 8019d3a:	2301      	movne	r3, #1
 8019d3c:	0692      	lsls	r2, r2, #26
 8019d3e:	d42b      	bmi.n	8019d98 <_printf_common+0xb0>
 8019d40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019d44:	4641      	mov	r1, r8
 8019d46:	4638      	mov	r0, r7
 8019d48:	47c8      	blx	r9
 8019d4a:	3001      	adds	r0, #1
 8019d4c:	d01e      	beq.n	8019d8c <_printf_common+0xa4>
 8019d4e:	6823      	ldr	r3, [r4, #0]
 8019d50:	6922      	ldr	r2, [r4, #16]
 8019d52:	f003 0306 	and.w	r3, r3, #6
 8019d56:	2b04      	cmp	r3, #4
 8019d58:	bf02      	ittt	eq
 8019d5a:	68e5      	ldreq	r5, [r4, #12]
 8019d5c:	6833      	ldreq	r3, [r6, #0]
 8019d5e:	1aed      	subeq	r5, r5, r3
 8019d60:	68a3      	ldr	r3, [r4, #8]
 8019d62:	bf0c      	ite	eq
 8019d64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019d68:	2500      	movne	r5, #0
 8019d6a:	4293      	cmp	r3, r2
 8019d6c:	bfc4      	itt	gt
 8019d6e:	1a9b      	subgt	r3, r3, r2
 8019d70:	18ed      	addgt	r5, r5, r3
 8019d72:	2600      	movs	r6, #0
 8019d74:	341a      	adds	r4, #26
 8019d76:	42b5      	cmp	r5, r6
 8019d78:	d11a      	bne.n	8019db0 <_printf_common+0xc8>
 8019d7a:	2000      	movs	r0, #0
 8019d7c:	e008      	b.n	8019d90 <_printf_common+0xa8>
 8019d7e:	2301      	movs	r3, #1
 8019d80:	4652      	mov	r2, sl
 8019d82:	4641      	mov	r1, r8
 8019d84:	4638      	mov	r0, r7
 8019d86:	47c8      	blx	r9
 8019d88:	3001      	adds	r0, #1
 8019d8a:	d103      	bne.n	8019d94 <_printf_common+0xac>
 8019d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8019d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d94:	3501      	adds	r5, #1
 8019d96:	e7c6      	b.n	8019d26 <_printf_common+0x3e>
 8019d98:	18e1      	adds	r1, r4, r3
 8019d9a:	1c5a      	adds	r2, r3, #1
 8019d9c:	2030      	movs	r0, #48	@ 0x30
 8019d9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019da2:	4422      	add	r2, r4
 8019da4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019da8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019dac:	3302      	adds	r3, #2
 8019dae:	e7c7      	b.n	8019d40 <_printf_common+0x58>
 8019db0:	2301      	movs	r3, #1
 8019db2:	4622      	mov	r2, r4
 8019db4:	4641      	mov	r1, r8
 8019db6:	4638      	mov	r0, r7
 8019db8:	47c8      	blx	r9
 8019dba:	3001      	adds	r0, #1
 8019dbc:	d0e6      	beq.n	8019d8c <_printf_common+0xa4>
 8019dbe:	3601      	adds	r6, #1
 8019dc0:	e7d9      	b.n	8019d76 <_printf_common+0x8e>
	...

08019dc4 <_printf_i>:
 8019dc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019dc8:	7e0f      	ldrb	r7, [r1, #24]
 8019dca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019dcc:	2f78      	cmp	r7, #120	@ 0x78
 8019dce:	4691      	mov	r9, r2
 8019dd0:	4680      	mov	r8, r0
 8019dd2:	460c      	mov	r4, r1
 8019dd4:	469a      	mov	sl, r3
 8019dd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019dda:	d807      	bhi.n	8019dec <_printf_i+0x28>
 8019ddc:	2f62      	cmp	r7, #98	@ 0x62
 8019dde:	d80a      	bhi.n	8019df6 <_printf_i+0x32>
 8019de0:	2f00      	cmp	r7, #0
 8019de2:	f000 80d1 	beq.w	8019f88 <_printf_i+0x1c4>
 8019de6:	2f58      	cmp	r7, #88	@ 0x58
 8019de8:	f000 80b8 	beq.w	8019f5c <_printf_i+0x198>
 8019dec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019df0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019df4:	e03a      	b.n	8019e6c <_printf_i+0xa8>
 8019df6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019dfa:	2b15      	cmp	r3, #21
 8019dfc:	d8f6      	bhi.n	8019dec <_printf_i+0x28>
 8019dfe:	a101      	add	r1, pc, #4	@ (adr r1, 8019e04 <_printf_i+0x40>)
 8019e00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019e04:	08019e5d 	.word	0x08019e5d
 8019e08:	08019e71 	.word	0x08019e71
 8019e0c:	08019ded 	.word	0x08019ded
 8019e10:	08019ded 	.word	0x08019ded
 8019e14:	08019ded 	.word	0x08019ded
 8019e18:	08019ded 	.word	0x08019ded
 8019e1c:	08019e71 	.word	0x08019e71
 8019e20:	08019ded 	.word	0x08019ded
 8019e24:	08019ded 	.word	0x08019ded
 8019e28:	08019ded 	.word	0x08019ded
 8019e2c:	08019ded 	.word	0x08019ded
 8019e30:	08019f6f 	.word	0x08019f6f
 8019e34:	08019e9b 	.word	0x08019e9b
 8019e38:	08019f29 	.word	0x08019f29
 8019e3c:	08019ded 	.word	0x08019ded
 8019e40:	08019ded 	.word	0x08019ded
 8019e44:	08019f91 	.word	0x08019f91
 8019e48:	08019ded 	.word	0x08019ded
 8019e4c:	08019e9b 	.word	0x08019e9b
 8019e50:	08019ded 	.word	0x08019ded
 8019e54:	08019ded 	.word	0x08019ded
 8019e58:	08019f31 	.word	0x08019f31
 8019e5c:	6833      	ldr	r3, [r6, #0]
 8019e5e:	1d1a      	adds	r2, r3, #4
 8019e60:	681b      	ldr	r3, [r3, #0]
 8019e62:	6032      	str	r2, [r6, #0]
 8019e64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019e68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019e6c:	2301      	movs	r3, #1
 8019e6e:	e09c      	b.n	8019faa <_printf_i+0x1e6>
 8019e70:	6833      	ldr	r3, [r6, #0]
 8019e72:	6820      	ldr	r0, [r4, #0]
 8019e74:	1d19      	adds	r1, r3, #4
 8019e76:	6031      	str	r1, [r6, #0]
 8019e78:	0606      	lsls	r6, r0, #24
 8019e7a:	d501      	bpl.n	8019e80 <_printf_i+0xbc>
 8019e7c:	681d      	ldr	r5, [r3, #0]
 8019e7e:	e003      	b.n	8019e88 <_printf_i+0xc4>
 8019e80:	0645      	lsls	r5, r0, #25
 8019e82:	d5fb      	bpl.n	8019e7c <_printf_i+0xb8>
 8019e84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019e88:	2d00      	cmp	r5, #0
 8019e8a:	da03      	bge.n	8019e94 <_printf_i+0xd0>
 8019e8c:	232d      	movs	r3, #45	@ 0x2d
 8019e8e:	426d      	negs	r5, r5
 8019e90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019e94:	4858      	ldr	r0, [pc, #352]	@ (8019ff8 <_printf_i+0x234>)
 8019e96:	230a      	movs	r3, #10
 8019e98:	e011      	b.n	8019ebe <_printf_i+0xfa>
 8019e9a:	6821      	ldr	r1, [r4, #0]
 8019e9c:	6833      	ldr	r3, [r6, #0]
 8019e9e:	0608      	lsls	r0, r1, #24
 8019ea0:	f853 5b04 	ldr.w	r5, [r3], #4
 8019ea4:	d402      	bmi.n	8019eac <_printf_i+0xe8>
 8019ea6:	0649      	lsls	r1, r1, #25
 8019ea8:	bf48      	it	mi
 8019eaa:	b2ad      	uxthmi	r5, r5
 8019eac:	2f6f      	cmp	r7, #111	@ 0x6f
 8019eae:	4852      	ldr	r0, [pc, #328]	@ (8019ff8 <_printf_i+0x234>)
 8019eb0:	6033      	str	r3, [r6, #0]
 8019eb2:	bf14      	ite	ne
 8019eb4:	230a      	movne	r3, #10
 8019eb6:	2308      	moveq	r3, #8
 8019eb8:	2100      	movs	r1, #0
 8019eba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019ebe:	6866      	ldr	r6, [r4, #4]
 8019ec0:	60a6      	str	r6, [r4, #8]
 8019ec2:	2e00      	cmp	r6, #0
 8019ec4:	db05      	blt.n	8019ed2 <_printf_i+0x10e>
 8019ec6:	6821      	ldr	r1, [r4, #0]
 8019ec8:	432e      	orrs	r6, r5
 8019eca:	f021 0104 	bic.w	r1, r1, #4
 8019ece:	6021      	str	r1, [r4, #0]
 8019ed0:	d04b      	beq.n	8019f6a <_printf_i+0x1a6>
 8019ed2:	4616      	mov	r6, r2
 8019ed4:	fbb5 f1f3 	udiv	r1, r5, r3
 8019ed8:	fb03 5711 	mls	r7, r3, r1, r5
 8019edc:	5dc7      	ldrb	r7, [r0, r7]
 8019ede:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019ee2:	462f      	mov	r7, r5
 8019ee4:	42bb      	cmp	r3, r7
 8019ee6:	460d      	mov	r5, r1
 8019ee8:	d9f4      	bls.n	8019ed4 <_printf_i+0x110>
 8019eea:	2b08      	cmp	r3, #8
 8019eec:	d10b      	bne.n	8019f06 <_printf_i+0x142>
 8019eee:	6823      	ldr	r3, [r4, #0]
 8019ef0:	07df      	lsls	r7, r3, #31
 8019ef2:	d508      	bpl.n	8019f06 <_printf_i+0x142>
 8019ef4:	6923      	ldr	r3, [r4, #16]
 8019ef6:	6861      	ldr	r1, [r4, #4]
 8019ef8:	4299      	cmp	r1, r3
 8019efa:	bfde      	ittt	le
 8019efc:	2330      	movle	r3, #48	@ 0x30
 8019efe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019f02:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019f06:	1b92      	subs	r2, r2, r6
 8019f08:	6122      	str	r2, [r4, #16]
 8019f0a:	f8cd a000 	str.w	sl, [sp]
 8019f0e:	464b      	mov	r3, r9
 8019f10:	aa03      	add	r2, sp, #12
 8019f12:	4621      	mov	r1, r4
 8019f14:	4640      	mov	r0, r8
 8019f16:	f7ff fee7 	bl	8019ce8 <_printf_common>
 8019f1a:	3001      	adds	r0, #1
 8019f1c:	d14a      	bne.n	8019fb4 <_printf_i+0x1f0>
 8019f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8019f22:	b004      	add	sp, #16
 8019f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f28:	6823      	ldr	r3, [r4, #0]
 8019f2a:	f043 0320 	orr.w	r3, r3, #32
 8019f2e:	6023      	str	r3, [r4, #0]
 8019f30:	4832      	ldr	r0, [pc, #200]	@ (8019ffc <_printf_i+0x238>)
 8019f32:	2778      	movs	r7, #120	@ 0x78
 8019f34:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8019f38:	6823      	ldr	r3, [r4, #0]
 8019f3a:	6831      	ldr	r1, [r6, #0]
 8019f3c:	061f      	lsls	r7, r3, #24
 8019f3e:	f851 5b04 	ldr.w	r5, [r1], #4
 8019f42:	d402      	bmi.n	8019f4a <_printf_i+0x186>
 8019f44:	065f      	lsls	r7, r3, #25
 8019f46:	bf48      	it	mi
 8019f48:	b2ad      	uxthmi	r5, r5
 8019f4a:	6031      	str	r1, [r6, #0]
 8019f4c:	07d9      	lsls	r1, r3, #31
 8019f4e:	bf44      	itt	mi
 8019f50:	f043 0320 	orrmi.w	r3, r3, #32
 8019f54:	6023      	strmi	r3, [r4, #0]
 8019f56:	b11d      	cbz	r5, 8019f60 <_printf_i+0x19c>
 8019f58:	2310      	movs	r3, #16
 8019f5a:	e7ad      	b.n	8019eb8 <_printf_i+0xf4>
 8019f5c:	4826      	ldr	r0, [pc, #152]	@ (8019ff8 <_printf_i+0x234>)
 8019f5e:	e7e9      	b.n	8019f34 <_printf_i+0x170>
 8019f60:	6823      	ldr	r3, [r4, #0]
 8019f62:	f023 0320 	bic.w	r3, r3, #32
 8019f66:	6023      	str	r3, [r4, #0]
 8019f68:	e7f6      	b.n	8019f58 <_printf_i+0x194>
 8019f6a:	4616      	mov	r6, r2
 8019f6c:	e7bd      	b.n	8019eea <_printf_i+0x126>
 8019f6e:	6833      	ldr	r3, [r6, #0]
 8019f70:	6825      	ldr	r5, [r4, #0]
 8019f72:	6961      	ldr	r1, [r4, #20]
 8019f74:	1d18      	adds	r0, r3, #4
 8019f76:	6030      	str	r0, [r6, #0]
 8019f78:	062e      	lsls	r6, r5, #24
 8019f7a:	681b      	ldr	r3, [r3, #0]
 8019f7c:	d501      	bpl.n	8019f82 <_printf_i+0x1be>
 8019f7e:	6019      	str	r1, [r3, #0]
 8019f80:	e002      	b.n	8019f88 <_printf_i+0x1c4>
 8019f82:	0668      	lsls	r0, r5, #25
 8019f84:	d5fb      	bpl.n	8019f7e <_printf_i+0x1ba>
 8019f86:	8019      	strh	r1, [r3, #0]
 8019f88:	2300      	movs	r3, #0
 8019f8a:	6123      	str	r3, [r4, #16]
 8019f8c:	4616      	mov	r6, r2
 8019f8e:	e7bc      	b.n	8019f0a <_printf_i+0x146>
 8019f90:	6833      	ldr	r3, [r6, #0]
 8019f92:	1d1a      	adds	r2, r3, #4
 8019f94:	6032      	str	r2, [r6, #0]
 8019f96:	681e      	ldr	r6, [r3, #0]
 8019f98:	6862      	ldr	r2, [r4, #4]
 8019f9a:	2100      	movs	r1, #0
 8019f9c:	4630      	mov	r0, r6
 8019f9e:	f7e6 f8ef 	bl	8000180 <memchr>
 8019fa2:	b108      	cbz	r0, 8019fa8 <_printf_i+0x1e4>
 8019fa4:	1b80      	subs	r0, r0, r6
 8019fa6:	6060      	str	r0, [r4, #4]
 8019fa8:	6863      	ldr	r3, [r4, #4]
 8019faa:	6123      	str	r3, [r4, #16]
 8019fac:	2300      	movs	r3, #0
 8019fae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019fb2:	e7aa      	b.n	8019f0a <_printf_i+0x146>
 8019fb4:	6923      	ldr	r3, [r4, #16]
 8019fb6:	4632      	mov	r2, r6
 8019fb8:	4649      	mov	r1, r9
 8019fba:	4640      	mov	r0, r8
 8019fbc:	47d0      	blx	sl
 8019fbe:	3001      	adds	r0, #1
 8019fc0:	d0ad      	beq.n	8019f1e <_printf_i+0x15a>
 8019fc2:	6823      	ldr	r3, [r4, #0]
 8019fc4:	079b      	lsls	r3, r3, #30
 8019fc6:	d413      	bmi.n	8019ff0 <_printf_i+0x22c>
 8019fc8:	68e0      	ldr	r0, [r4, #12]
 8019fca:	9b03      	ldr	r3, [sp, #12]
 8019fcc:	4298      	cmp	r0, r3
 8019fce:	bfb8      	it	lt
 8019fd0:	4618      	movlt	r0, r3
 8019fd2:	e7a6      	b.n	8019f22 <_printf_i+0x15e>
 8019fd4:	2301      	movs	r3, #1
 8019fd6:	4632      	mov	r2, r6
 8019fd8:	4649      	mov	r1, r9
 8019fda:	4640      	mov	r0, r8
 8019fdc:	47d0      	blx	sl
 8019fde:	3001      	adds	r0, #1
 8019fe0:	d09d      	beq.n	8019f1e <_printf_i+0x15a>
 8019fe2:	3501      	adds	r5, #1
 8019fe4:	68e3      	ldr	r3, [r4, #12]
 8019fe6:	9903      	ldr	r1, [sp, #12]
 8019fe8:	1a5b      	subs	r3, r3, r1
 8019fea:	42ab      	cmp	r3, r5
 8019fec:	dcf2      	bgt.n	8019fd4 <_printf_i+0x210>
 8019fee:	e7eb      	b.n	8019fc8 <_printf_i+0x204>
 8019ff0:	2500      	movs	r5, #0
 8019ff2:	f104 0619 	add.w	r6, r4, #25
 8019ff6:	e7f5      	b.n	8019fe4 <_printf_i+0x220>
 8019ff8:	0801d826 	.word	0x0801d826
 8019ffc:	0801d837 	.word	0x0801d837

0801a000 <std>:
 801a000:	2300      	movs	r3, #0
 801a002:	b510      	push	{r4, lr}
 801a004:	4604      	mov	r4, r0
 801a006:	e9c0 3300 	strd	r3, r3, [r0]
 801a00a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a00e:	6083      	str	r3, [r0, #8]
 801a010:	8181      	strh	r1, [r0, #12]
 801a012:	6643      	str	r3, [r0, #100]	@ 0x64
 801a014:	81c2      	strh	r2, [r0, #14]
 801a016:	6183      	str	r3, [r0, #24]
 801a018:	4619      	mov	r1, r3
 801a01a:	2208      	movs	r2, #8
 801a01c:	305c      	adds	r0, #92	@ 0x5c
 801a01e:	f000 f944 	bl	801a2aa <memset>
 801a022:	4b0d      	ldr	r3, [pc, #52]	@ (801a058 <std+0x58>)
 801a024:	6263      	str	r3, [r4, #36]	@ 0x24
 801a026:	4b0d      	ldr	r3, [pc, #52]	@ (801a05c <std+0x5c>)
 801a028:	62a3      	str	r3, [r4, #40]	@ 0x28
 801a02a:	4b0d      	ldr	r3, [pc, #52]	@ (801a060 <std+0x60>)
 801a02c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801a02e:	4b0d      	ldr	r3, [pc, #52]	@ (801a064 <std+0x64>)
 801a030:	6323      	str	r3, [r4, #48]	@ 0x30
 801a032:	4b0d      	ldr	r3, [pc, #52]	@ (801a068 <std+0x68>)
 801a034:	6224      	str	r4, [r4, #32]
 801a036:	429c      	cmp	r4, r3
 801a038:	d006      	beq.n	801a048 <std+0x48>
 801a03a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801a03e:	4294      	cmp	r4, r2
 801a040:	d002      	beq.n	801a048 <std+0x48>
 801a042:	33d0      	adds	r3, #208	@ 0xd0
 801a044:	429c      	cmp	r4, r3
 801a046:	d105      	bne.n	801a054 <std+0x54>
 801a048:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801a04c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a050:	f000 b9fc 	b.w	801a44c <__retarget_lock_init_recursive>
 801a054:	bd10      	pop	{r4, pc}
 801a056:	bf00      	nop
 801a058:	0801a1f1 	.word	0x0801a1f1
 801a05c:	0801a213 	.word	0x0801a213
 801a060:	0801a24b 	.word	0x0801a24b
 801a064:	0801a26f 	.word	0x0801a26f
 801a068:	2000266c 	.word	0x2000266c

0801a06c <stdio_exit_handler>:
 801a06c:	4a02      	ldr	r2, [pc, #8]	@ (801a078 <stdio_exit_handler+0xc>)
 801a06e:	4903      	ldr	r1, [pc, #12]	@ (801a07c <stdio_exit_handler+0x10>)
 801a070:	4803      	ldr	r0, [pc, #12]	@ (801a080 <stdio_exit_handler+0x14>)
 801a072:	f000 b869 	b.w	801a148 <_fwalk_sglue>
 801a076:	bf00      	nop
 801a078:	20000144 	.word	0x20000144
 801a07c:	0801bee5 	.word	0x0801bee5
 801a080:	20000154 	.word	0x20000154

0801a084 <cleanup_stdio>:
 801a084:	6841      	ldr	r1, [r0, #4]
 801a086:	4b0c      	ldr	r3, [pc, #48]	@ (801a0b8 <cleanup_stdio+0x34>)
 801a088:	4299      	cmp	r1, r3
 801a08a:	b510      	push	{r4, lr}
 801a08c:	4604      	mov	r4, r0
 801a08e:	d001      	beq.n	801a094 <cleanup_stdio+0x10>
 801a090:	f001 ff28 	bl	801bee4 <_fflush_r>
 801a094:	68a1      	ldr	r1, [r4, #8]
 801a096:	4b09      	ldr	r3, [pc, #36]	@ (801a0bc <cleanup_stdio+0x38>)
 801a098:	4299      	cmp	r1, r3
 801a09a:	d002      	beq.n	801a0a2 <cleanup_stdio+0x1e>
 801a09c:	4620      	mov	r0, r4
 801a09e:	f001 ff21 	bl	801bee4 <_fflush_r>
 801a0a2:	68e1      	ldr	r1, [r4, #12]
 801a0a4:	4b06      	ldr	r3, [pc, #24]	@ (801a0c0 <cleanup_stdio+0x3c>)
 801a0a6:	4299      	cmp	r1, r3
 801a0a8:	d004      	beq.n	801a0b4 <cleanup_stdio+0x30>
 801a0aa:	4620      	mov	r0, r4
 801a0ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a0b0:	f001 bf18 	b.w	801bee4 <_fflush_r>
 801a0b4:	bd10      	pop	{r4, pc}
 801a0b6:	bf00      	nop
 801a0b8:	2000266c 	.word	0x2000266c
 801a0bc:	200026d4 	.word	0x200026d4
 801a0c0:	2000273c 	.word	0x2000273c

0801a0c4 <global_stdio_init.part.0>:
 801a0c4:	b510      	push	{r4, lr}
 801a0c6:	4b0b      	ldr	r3, [pc, #44]	@ (801a0f4 <global_stdio_init.part.0+0x30>)
 801a0c8:	4c0b      	ldr	r4, [pc, #44]	@ (801a0f8 <global_stdio_init.part.0+0x34>)
 801a0ca:	4a0c      	ldr	r2, [pc, #48]	@ (801a0fc <global_stdio_init.part.0+0x38>)
 801a0cc:	601a      	str	r2, [r3, #0]
 801a0ce:	4620      	mov	r0, r4
 801a0d0:	2200      	movs	r2, #0
 801a0d2:	2104      	movs	r1, #4
 801a0d4:	f7ff ff94 	bl	801a000 <std>
 801a0d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801a0dc:	2201      	movs	r2, #1
 801a0de:	2109      	movs	r1, #9
 801a0e0:	f7ff ff8e 	bl	801a000 <std>
 801a0e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801a0e8:	2202      	movs	r2, #2
 801a0ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a0ee:	2112      	movs	r1, #18
 801a0f0:	f7ff bf86 	b.w	801a000 <std>
 801a0f4:	200027a4 	.word	0x200027a4
 801a0f8:	2000266c 	.word	0x2000266c
 801a0fc:	0801a06d 	.word	0x0801a06d

0801a100 <__sfp_lock_acquire>:
 801a100:	4801      	ldr	r0, [pc, #4]	@ (801a108 <__sfp_lock_acquire+0x8>)
 801a102:	f000 b9a4 	b.w	801a44e <__retarget_lock_acquire_recursive>
 801a106:	bf00      	nop
 801a108:	200027ad 	.word	0x200027ad

0801a10c <__sfp_lock_release>:
 801a10c:	4801      	ldr	r0, [pc, #4]	@ (801a114 <__sfp_lock_release+0x8>)
 801a10e:	f000 b99f 	b.w	801a450 <__retarget_lock_release_recursive>
 801a112:	bf00      	nop
 801a114:	200027ad 	.word	0x200027ad

0801a118 <__sinit>:
 801a118:	b510      	push	{r4, lr}
 801a11a:	4604      	mov	r4, r0
 801a11c:	f7ff fff0 	bl	801a100 <__sfp_lock_acquire>
 801a120:	6a23      	ldr	r3, [r4, #32]
 801a122:	b11b      	cbz	r3, 801a12c <__sinit+0x14>
 801a124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a128:	f7ff bff0 	b.w	801a10c <__sfp_lock_release>
 801a12c:	4b04      	ldr	r3, [pc, #16]	@ (801a140 <__sinit+0x28>)
 801a12e:	6223      	str	r3, [r4, #32]
 801a130:	4b04      	ldr	r3, [pc, #16]	@ (801a144 <__sinit+0x2c>)
 801a132:	681b      	ldr	r3, [r3, #0]
 801a134:	2b00      	cmp	r3, #0
 801a136:	d1f5      	bne.n	801a124 <__sinit+0xc>
 801a138:	f7ff ffc4 	bl	801a0c4 <global_stdio_init.part.0>
 801a13c:	e7f2      	b.n	801a124 <__sinit+0xc>
 801a13e:	bf00      	nop
 801a140:	0801a085 	.word	0x0801a085
 801a144:	200027a4 	.word	0x200027a4

0801a148 <_fwalk_sglue>:
 801a148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a14c:	4607      	mov	r7, r0
 801a14e:	4688      	mov	r8, r1
 801a150:	4614      	mov	r4, r2
 801a152:	2600      	movs	r6, #0
 801a154:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a158:	f1b9 0901 	subs.w	r9, r9, #1
 801a15c:	d505      	bpl.n	801a16a <_fwalk_sglue+0x22>
 801a15e:	6824      	ldr	r4, [r4, #0]
 801a160:	2c00      	cmp	r4, #0
 801a162:	d1f7      	bne.n	801a154 <_fwalk_sglue+0xc>
 801a164:	4630      	mov	r0, r6
 801a166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a16a:	89ab      	ldrh	r3, [r5, #12]
 801a16c:	2b01      	cmp	r3, #1
 801a16e:	d907      	bls.n	801a180 <_fwalk_sglue+0x38>
 801a170:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a174:	3301      	adds	r3, #1
 801a176:	d003      	beq.n	801a180 <_fwalk_sglue+0x38>
 801a178:	4629      	mov	r1, r5
 801a17a:	4638      	mov	r0, r7
 801a17c:	47c0      	blx	r8
 801a17e:	4306      	orrs	r6, r0
 801a180:	3568      	adds	r5, #104	@ 0x68
 801a182:	e7e9      	b.n	801a158 <_fwalk_sglue+0x10>

0801a184 <sniprintf>:
 801a184:	b40c      	push	{r2, r3}
 801a186:	b530      	push	{r4, r5, lr}
 801a188:	4b18      	ldr	r3, [pc, #96]	@ (801a1ec <sniprintf+0x68>)
 801a18a:	1e0c      	subs	r4, r1, #0
 801a18c:	681d      	ldr	r5, [r3, #0]
 801a18e:	b09d      	sub	sp, #116	@ 0x74
 801a190:	da08      	bge.n	801a1a4 <sniprintf+0x20>
 801a192:	238b      	movs	r3, #139	@ 0x8b
 801a194:	602b      	str	r3, [r5, #0]
 801a196:	f04f 30ff 	mov.w	r0, #4294967295
 801a19a:	b01d      	add	sp, #116	@ 0x74
 801a19c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a1a0:	b002      	add	sp, #8
 801a1a2:	4770      	bx	lr
 801a1a4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801a1a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a1ac:	f04f 0300 	mov.w	r3, #0
 801a1b0:	931b      	str	r3, [sp, #108]	@ 0x6c
 801a1b2:	bf14      	ite	ne
 801a1b4:	f104 33ff 	addne.w	r3, r4, #4294967295
 801a1b8:	4623      	moveq	r3, r4
 801a1ba:	9304      	str	r3, [sp, #16]
 801a1bc:	9307      	str	r3, [sp, #28]
 801a1be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a1c2:	9002      	str	r0, [sp, #8]
 801a1c4:	9006      	str	r0, [sp, #24]
 801a1c6:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a1ca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801a1cc:	ab21      	add	r3, sp, #132	@ 0x84
 801a1ce:	a902      	add	r1, sp, #8
 801a1d0:	4628      	mov	r0, r5
 801a1d2:	9301      	str	r3, [sp, #4]
 801a1d4:	f001 fbc4 	bl	801b960 <_svfiprintf_r>
 801a1d8:	1c43      	adds	r3, r0, #1
 801a1da:	bfbc      	itt	lt
 801a1dc:	238b      	movlt	r3, #139	@ 0x8b
 801a1de:	602b      	strlt	r3, [r5, #0]
 801a1e0:	2c00      	cmp	r4, #0
 801a1e2:	d0da      	beq.n	801a19a <sniprintf+0x16>
 801a1e4:	9b02      	ldr	r3, [sp, #8]
 801a1e6:	2200      	movs	r2, #0
 801a1e8:	701a      	strb	r2, [r3, #0]
 801a1ea:	e7d6      	b.n	801a19a <sniprintf+0x16>
 801a1ec:	20000150 	.word	0x20000150

0801a1f0 <__sread>:
 801a1f0:	b510      	push	{r4, lr}
 801a1f2:	460c      	mov	r4, r1
 801a1f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a1f8:	f000 f8b6 	bl	801a368 <_read_r>
 801a1fc:	2800      	cmp	r0, #0
 801a1fe:	bfab      	itete	ge
 801a200:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801a202:	89a3      	ldrhlt	r3, [r4, #12]
 801a204:	181b      	addge	r3, r3, r0
 801a206:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801a20a:	bfac      	ite	ge
 801a20c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801a20e:	81a3      	strhlt	r3, [r4, #12]
 801a210:	bd10      	pop	{r4, pc}

0801a212 <__swrite>:
 801a212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a216:	461f      	mov	r7, r3
 801a218:	898b      	ldrh	r3, [r1, #12]
 801a21a:	05db      	lsls	r3, r3, #23
 801a21c:	4605      	mov	r5, r0
 801a21e:	460c      	mov	r4, r1
 801a220:	4616      	mov	r6, r2
 801a222:	d505      	bpl.n	801a230 <__swrite+0x1e>
 801a224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a228:	2302      	movs	r3, #2
 801a22a:	2200      	movs	r2, #0
 801a22c:	f000 f88a 	bl	801a344 <_lseek_r>
 801a230:	89a3      	ldrh	r3, [r4, #12]
 801a232:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a236:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a23a:	81a3      	strh	r3, [r4, #12]
 801a23c:	4632      	mov	r2, r6
 801a23e:	463b      	mov	r3, r7
 801a240:	4628      	mov	r0, r5
 801a242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a246:	f000 b8c5 	b.w	801a3d4 <_write_r>

0801a24a <__sseek>:
 801a24a:	b510      	push	{r4, lr}
 801a24c:	460c      	mov	r4, r1
 801a24e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a252:	f000 f877 	bl	801a344 <_lseek_r>
 801a256:	1c43      	adds	r3, r0, #1
 801a258:	89a3      	ldrh	r3, [r4, #12]
 801a25a:	bf15      	itete	ne
 801a25c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801a25e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801a262:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801a266:	81a3      	strheq	r3, [r4, #12]
 801a268:	bf18      	it	ne
 801a26a:	81a3      	strhne	r3, [r4, #12]
 801a26c:	bd10      	pop	{r4, pc}

0801a26e <__sclose>:
 801a26e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a272:	f000 b857 	b.w	801a324 <_close_r>

0801a276 <memmove>:
 801a276:	4288      	cmp	r0, r1
 801a278:	b510      	push	{r4, lr}
 801a27a:	eb01 0402 	add.w	r4, r1, r2
 801a27e:	d902      	bls.n	801a286 <memmove+0x10>
 801a280:	4284      	cmp	r4, r0
 801a282:	4623      	mov	r3, r4
 801a284:	d807      	bhi.n	801a296 <memmove+0x20>
 801a286:	1e43      	subs	r3, r0, #1
 801a288:	42a1      	cmp	r1, r4
 801a28a:	d008      	beq.n	801a29e <memmove+0x28>
 801a28c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a290:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a294:	e7f8      	b.n	801a288 <memmove+0x12>
 801a296:	4402      	add	r2, r0
 801a298:	4601      	mov	r1, r0
 801a29a:	428a      	cmp	r2, r1
 801a29c:	d100      	bne.n	801a2a0 <memmove+0x2a>
 801a29e:	bd10      	pop	{r4, pc}
 801a2a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a2a4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a2a8:	e7f7      	b.n	801a29a <memmove+0x24>

0801a2aa <memset>:
 801a2aa:	4402      	add	r2, r0
 801a2ac:	4603      	mov	r3, r0
 801a2ae:	4293      	cmp	r3, r2
 801a2b0:	d100      	bne.n	801a2b4 <memset+0xa>
 801a2b2:	4770      	bx	lr
 801a2b4:	f803 1b01 	strb.w	r1, [r3], #1
 801a2b8:	e7f9      	b.n	801a2ae <memset+0x4>

0801a2ba <_raise_r>:
 801a2ba:	291f      	cmp	r1, #31
 801a2bc:	b538      	push	{r3, r4, r5, lr}
 801a2be:	4605      	mov	r5, r0
 801a2c0:	460c      	mov	r4, r1
 801a2c2:	d904      	bls.n	801a2ce <_raise_r+0x14>
 801a2c4:	2316      	movs	r3, #22
 801a2c6:	6003      	str	r3, [r0, #0]
 801a2c8:	f04f 30ff 	mov.w	r0, #4294967295
 801a2cc:	bd38      	pop	{r3, r4, r5, pc}
 801a2ce:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801a2d0:	b112      	cbz	r2, 801a2d8 <_raise_r+0x1e>
 801a2d2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a2d6:	b94b      	cbnz	r3, 801a2ec <_raise_r+0x32>
 801a2d8:	4628      	mov	r0, r5
 801a2da:	f000 f869 	bl	801a3b0 <_getpid_r>
 801a2de:	4622      	mov	r2, r4
 801a2e0:	4601      	mov	r1, r0
 801a2e2:	4628      	mov	r0, r5
 801a2e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a2e8:	f000 b850 	b.w	801a38c <_kill_r>
 801a2ec:	2b01      	cmp	r3, #1
 801a2ee:	d00a      	beq.n	801a306 <_raise_r+0x4c>
 801a2f0:	1c59      	adds	r1, r3, #1
 801a2f2:	d103      	bne.n	801a2fc <_raise_r+0x42>
 801a2f4:	2316      	movs	r3, #22
 801a2f6:	6003      	str	r3, [r0, #0]
 801a2f8:	2001      	movs	r0, #1
 801a2fa:	e7e7      	b.n	801a2cc <_raise_r+0x12>
 801a2fc:	2100      	movs	r1, #0
 801a2fe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801a302:	4620      	mov	r0, r4
 801a304:	4798      	blx	r3
 801a306:	2000      	movs	r0, #0
 801a308:	e7e0      	b.n	801a2cc <_raise_r+0x12>
	...

0801a30c <raise>:
 801a30c:	4b02      	ldr	r3, [pc, #8]	@ (801a318 <raise+0xc>)
 801a30e:	4601      	mov	r1, r0
 801a310:	6818      	ldr	r0, [r3, #0]
 801a312:	f7ff bfd2 	b.w	801a2ba <_raise_r>
 801a316:	bf00      	nop
 801a318:	20000150 	.word	0x20000150

0801a31c <_localeconv_r>:
 801a31c:	4800      	ldr	r0, [pc, #0]	@ (801a320 <_localeconv_r+0x4>)
 801a31e:	4770      	bx	lr
 801a320:	20000290 	.word	0x20000290

0801a324 <_close_r>:
 801a324:	b538      	push	{r3, r4, r5, lr}
 801a326:	4d06      	ldr	r5, [pc, #24]	@ (801a340 <_close_r+0x1c>)
 801a328:	2300      	movs	r3, #0
 801a32a:	4604      	mov	r4, r0
 801a32c:	4608      	mov	r0, r1
 801a32e:	602b      	str	r3, [r5, #0]
 801a330:	f7ec fdbe 	bl	8006eb0 <_close>
 801a334:	1c43      	adds	r3, r0, #1
 801a336:	d102      	bne.n	801a33e <_close_r+0x1a>
 801a338:	682b      	ldr	r3, [r5, #0]
 801a33a:	b103      	cbz	r3, 801a33e <_close_r+0x1a>
 801a33c:	6023      	str	r3, [r4, #0]
 801a33e:	bd38      	pop	{r3, r4, r5, pc}
 801a340:	200027a8 	.word	0x200027a8

0801a344 <_lseek_r>:
 801a344:	b538      	push	{r3, r4, r5, lr}
 801a346:	4d07      	ldr	r5, [pc, #28]	@ (801a364 <_lseek_r+0x20>)
 801a348:	4604      	mov	r4, r0
 801a34a:	4608      	mov	r0, r1
 801a34c:	4611      	mov	r1, r2
 801a34e:	2200      	movs	r2, #0
 801a350:	602a      	str	r2, [r5, #0]
 801a352:	461a      	mov	r2, r3
 801a354:	f7ec fdd3 	bl	8006efe <_lseek>
 801a358:	1c43      	adds	r3, r0, #1
 801a35a:	d102      	bne.n	801a362 <_lseek_r+0x1e>
 801a35c:	682b      	ldr	r3, [r5, #0]
 801a35e:	b103      	cbz	r3, 801a362 <_lseek_r+0x1e>
 801a360:	6023      	str	r3, [r4, #0]
 801a362:	bd38      	pop	{r3, r4, r5, pc}
 801a364:	200027a8 	.word	0x200027a8

0801a368 <_read_r>:
 801a368:	b538      	push	{r3, r4, r5, lr}
 801a36a:	4d07      	ldr	r5, [pc, #28]	@ (801a388 <_read_r+0x20>)
 801a36c:	4604      	mov	r4, r0
 801a36e:	4608      	mov	r0, r1
 801a370:	4611      	mov	r1, r2
 801a372:	2200      	movs	r2, #0
 801a374:	602a      	str	r2, [r5, #0]
 801a376:	461a      	mov	r2, r3
 801a378:	f7ec fd61 	bl	8006e3e <_read>
 801a37c:	1c43      	adds	r3, r0, #1
 801a37e:	d102      	bne.n	801a386 <_read_r+0x1e>
 801a380:	682b      	ldr	r3, [r5, #0]
 801a382:	b103      	cbz	r3, 801a386 <_read_r+0x1e>
 801a384:	6023      	str	r3, [r4, #0]
 801a386:	bd38      	pop	{r3, r4, r5, pc}
 801a388:	200027a8 	.word	0x200027a8

0801a38c <_kill_r>:
 801a38c:	b538      	push	{r3, r4, r5, lr}
 801a38e:	4d07      	ldr	r5, [pc, #28]	@ (801a3ac <_kill_r+0x20>)
 801a390:	2300      	movs	r3, #0
 801a392:	4604      	mov	r4, r0
 801a394:	4608      	mov	r0, r1
 801a396:	4611      	mov	r1, r2
 801a398:	602b      	str	r3, [r5, #0]
 801a39a:	f7ec fd35 	bl	8006e08 <_kill>
 801a39e:	1c43      	adds	r3, r0, #1
 801a3a0:	d102      	bne.n	801a3a8 <_kill_r+0x1c>
 801a3a2:	682b      	ldr	r3, [r5, #0]
 801a3a4:	b103      	cbz	r3, 801a3a8 <_kill_r+0x1c>
 801a3a6:	6023      	str	r3, [r4, #0]
 801a3a8:	bd38      	pop	{r3, r4, r5, pc}
 801a3aa:	bf00      	nop
 801a3ac:	200027a8 	.word	0x200027a8

0801a3b0 <_getpid_r>:
 801a3b0:	f7ec bd22 	b.w	8006df8 <_getpid>

0801a3b4 <_sbrk_r>:
 801a3b4:	b538      	push	{r3, r4, r5, lr}
 801a3b6:	4d06      	ldr	r5, [pc, #24]	@ (801a3d0 <_sbrk_r+0x1c>)
 801a3b8:	2300      	movs	r3, #0
 801a3ba:	4604      	mov	r4, r0
 801a3bc:	4608      	mov	r0, r1
 801a3be:	602b      	str	r3, [r5, #0]
 801a3c0:	f7ec fdaa 	bl	8006f18 <_sbrk>
 801a3c4:	1c43      	adds	r3, r0, #1
 801a3c6:	d102      	bne.n	801a3ce <_sbrk_r+0x1a>
 801a3c8:	682b      	ldr	r3, [r5, #0]
 801a3ca:	b103      	cbz	r3, 801a3ce <_sbrk_r+0x1a>
 801a3cc:	6023      	str	r3, [r4, #0]
 801a3ce:	bd38      	pop	{r3, r4, r5, pc}
 801a3d0:	200027a8 	.word	0x200027a8

0801a3d4 <_write_r>:
 801a3d4:	b538      	push	{r3, r4, r5, lr}
 801a3d6:	4d07      	ldr	r5, [pc, #28]	@ (801a3f4 <_write_r+0x20>)
 801a3d8:	4604      	mov	r4, r0
 801a3da:	4608      	mov	r0, r1
 801a3dc:	4611      	mov	r1, r2
 801a3de:	2200      	movs	r2, #0
 801a3e0:	602a      	str	r2, [r5, #0]
 801a3e2:	461a      	mov	r2, r3
 801a3e4:	f7ec fd48 	bl	8006e78 <_write>
 801a3e8:	1c43      	adds	r3, r0, #1
 801a3ea:	d102      	bne.n	801a3f2 <_write_r+0x1e>
 801a3ec:	682b      	ldr	r3, [r5, #0]
 801a3ee:	b103      	cbz	r3, 801a3f2 <_write_r+0x1e>
 801a3f0:	6023      	str	r3, [r4, #0]
 801a3f2:	bd38      	pop	{r3, r4, r5, pc}
 801a3f4:	200027a8 	.word	0x200027a8

0801a3f8 <__errno>:
 801a3f8:	4b01      	ldr	r3, [pc, #4]	@ (801a400 <__errno+0x8>)
 801a3fa:	6818      	ldr	r0, [r3, #0]
 801a3fc:	4770      	bx	lr
 801a3fe:	bf00      	nop
 801a400:	20000150 	.word	0x20000150

0801a404 <__libc_init_array>:
 801a404:	b570      	push	{r4, r5, r6, lr}
 801a406:	4d0d      	ldr	r5, [pc, #52]	@ (801a43c <__libc_init_array+0x38>)
 801a408:	4c0d      	ldr	r4, [pc, #52]	@ (801a440 <__libc_init_array+0x3c>)
 801a40a:	1b64      	subs	r4, r4, r5
 801a40c:	10a4      	asrs	r4, r4, #2
 801a40e:	2600      	movs	r6, #0
 801a410:	42a6      	cmp	r6, r4
 801a412:	d109      	bne.n	801a428 <__libc_init_array+0x24>
 801a414:	4d0b      	ldr	r5, [pc, #44]	@ (801a444 <__libc_init_array+0x40>)
 801a416:	4c0c      	ldr	r4, [pc, #48]	@ (801a448 <__libc_init_array+0x44>)
 801a418:	f001 ff3e 	bl	801c298 <_init>
 801a41c:	1b64      	subs	r4, r4, r5
 801a41e:	10a4      	asrs	r4, r4, #2
 801a420:	2600      	movs	r6, #0
 801a422:	42a6      	cmp	r6, r4
 801a424:	d105      	bne.n	801a432 <__libc_init_array+0x2e>
 801a426:	bd70      	pop	{r4, r5, r6, pc}
 801a428:	f855 3b04 	ldr.w	r3, [r5], #4
 801a42c:	4798      	blx	r3
 801a42e:	3601      	adds	r6, #1
 801a430:	e7ee      	b.n	801a410 <__libc_init_array+0xc>
 801a432:	f855 3b04 	ldr.w	r3, [r5], #4
 801a436:	4798      	blx	r3
 801a438:	3601      	adds	r6, #1
 801a43a:	e7f2      	b.n	801a422 <__libc_init_array+0x1e>
 801a43c:	0801db94 	.word	0x0801db94
 801a440:	0801db94 	.word	0x0801db94
 801a444:	0801db94 	.word	0x0801db94
 801a448:	0801db9c 	.word	0x0801db9c

0801a44c <__retarget_lock_init_recursive>:
 801a44c:	4770      	bx	lr

0801a44e <__retarget_lock_acquire_recursive>:
 801a44e:	4770      	bx	lr

0801a450 <__retarget_lock_release_recursive>:
 801a450:	4770      	bx	lr

0801a452 <memcpy>:
 801a452:	440a      	add	r2, r1
 801a454:	4291      	cmp	r1, r2
 801a456:	f100 33ff 	add.w	r3, r0, #4294967295
 801a45a:	d100      	bne.n	801a45e <memcpy+0xc>
 801a45c:	4770      	bx	lr
 801a45e:	b510      	push	{r4, lr}
 801a460:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a464:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a468:	4291      	cmp	r1, r2
 801a46a:	d1f9      	bne.n	801a460 <memcpy+0xe>
 801a46c:	bd10      	pop	{r4, pc}

0801a46e <quorem>:
 801a46e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a472:	6903      	ldr	r3, [r0, #16]
 801a474:	690c      	ldr	r4, [r1, #16]
 801a476:	42a3      	cmp	r3, r4
 801a478:	4607      	mov	r7, r0
 801a47a:	db7e      	blt.n	801a57a <quorem+0x10c>
 801a47c:	3c01      	subs	r4, #1
 801a47e:	f101 0814 	add.w	r8, r1, #20
 801a482:	00a3      	lsls	r3, r4, #2
 801a484:	f100 0514 	add.w	r5, r0, #20
 801a488:	9300      	str	r3, [sp, #0]
 801a48a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a48e:	9301      	str	r3, [sp, #4]
 801a490:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a494:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a498:	3301      	adds	r3, #1
 801a49a:	429a      	cmp	r2, r3
 801a49c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a4a0:	fbb2 f6f3 	udiv	r6, r2, r3
 801a4a4:	d32e      	bcc.n	801a504 <quorem+0x96>
 801a4a6:	f04f 0a00 	mov.w	sl, #0
 801a4aa:	46c4      	mov	ip, r8
 801a4ac:	46ae      	mov	lr, r5
 801a4ae:	46d3      	mov	fp, sl
 801a4b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 801a4b4:	b298      	uxth	r0, r3
 801a4b6:	fb06 a000 	mla	r0, r6, r0, sl
 801a4ba:	0c02      	lsrs	r2, r0, #16
 801a4bc:	0c1b      	lsrs	r3, r3, #16
 801a4be:	fb06 2303 	mla	r3, r6, r3, r2
 801a4c2:	f8de 2000 	ldr.w	r2, [lr]
 801a4c6:	b280      	uxth	r0, r0
 801a4c8:	b292      	uxth	r2, r2
 801a4ca:	1a12      	subs	r2, r2, r0
 801a4cc:	445a      	add	r2, fp
 801a4ce:	f8de 0000 	ldr.w	r0, [lr]
 801a4d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a4d6:	b29b      	uxth	r3, r3
 801a4d8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801a4dc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801a4e0:	b292      	uxth	r2, r2
 801a4e2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801a4e6:	45e1      	cmp	r9, ip
 801a4e8:	f84e 2b04 	str.w	r2, [lr], #4
 801a4ec:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801a4f0:	d2de      	bcs.n	801a4b0 <quorem+0x42>
 801a4f2:	9b00      	ldr	r3, [sp, #0]
 801a4f4:	58eb      	ldr	r3, [r5, r3]
 801a4f6:	b92b      	cbnz	r3, 801a504 <quorem+0x96>
 801a4f8:	9b01      	ldr	r3, [sp, #4]
 801a4fa:	3b04      	subs	r3, #4
 801a4fc:	429d      	cmp	r5, r3
 801a4fe:	461a      	mov	r2, r3
 801a500:	d32f      	bcc.n	801a562 <quorem+0xf4>
 801a502:	613c      	str	r4, [r7, #16]
 801a504:	4638      	mov	r0, r7
 801a506:	f001 f8c7 	bl	801b698 <__mcmp>
 801a50a:	2800      	cmp	r0, #0
 801a50c:	db25      	blt.n	801a55a <quorem+0xec>
 801a50e:	4629      	mov	r1, r5
 801a510:	2000      	movs	r0, #0
 801a512:	f858 2b04 	ldr.w	r2, [r8], #4
 801a516:	f8d1 c000 	ldr.w	ip, [r1]
 801a51a:	fa1f fe82 	uxth.w	lr, r2
 801a51e:	fa1f f38c 	uxth.w	r3, ip
 801a522:	eba3 030e 	sub.w	r3, r3, lr
 801a526:	4403      	add	r3, r0
 801a528:	0c12      	lsrs	r2, r2, #16
 801a52a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801a52e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801a532:	b29b      	uxth	r3, r3
 801a534:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a538:	45c1      	cmp	r9, r8
 801a53a:	f841 3b04 	str.w	r3, [r1], #4
 801a53e:	ea4f 4022 	mov.w	r0, r2, asr #16
 801a542:	d2e6      	bcs.n	801a512 <quorem+0xa4>
 801a544:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a548:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a54c:	b922      	cbnz	r2, 801a558 <quorem+0xea>
 801a54e:	3b04      	subs	r3, #4
 801a550:	429d      	cmp	r5, r3
 801a552:	461a      	mov	r2, r3
 801a554:	d30b      	bcc.n	801a56e <quorem+0x100>
 801a556:	613c      	str	r4, [r7, #16]
 801a558:	3601      	adds	r6, #1
 801a55a:	4630      	mov	r0, r6
 801a55c:	b003      	add	sp, #12
 801a55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a562:	6812      	ldr	r2, [r2, #0]
 801a564:	3b04      	subs	r3, #4
 801a566:	2a00      	cmp	r2, #0
 801a568:	d1cb      	bne.n	801a502 <quorem+0x94>
 801a56a:	3c01      	subs	r4, #1
 801a56c:	e7c6      	b.n	801a4fc <quorem+0x8e>
 801a56e:	6812      	ldr	r2, [r2, #0]
 801a570:	3b04      	subs	r3, #4
 801a572:	2a00      	cmp	r2, #0
 801a574:	d1ef      	bne.n	801a556 <quorem+0xe8>
 801a576:	3c01      	subs	r4, #1
 801a578:	e7ea      	b.n	801a550 <quorem+0xe2>
 801a57a:	2000      	movs	r0, #0
 801a57c:	e7ee      	b.n	801a55c <quorem+0xee>
	...

0801a580 <_dtoa_r>:
 801a580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a584:	69c7      	ldr	r7, [r0, #28]
 801a586:	b097      	sub	sp, #92	@ 0x5c
 801a588:	ed8d 0b04 	vstr	d0, [sp, #16]
 801a58c:	ec55 4b10 	vmov	r4, r5, d0
 801a590:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801a592:	9107      	str	r1, [sp, #28]
 801a594:	4681      	mov	r9, r0
 801a596:	920c      	str	r2, [sp, #48]	@ 0x30
 801a598:	9311      	str	r3, [sp, #68]	@ 0x44
 801a59a:	b97f      	cbnz	r7, 801a5bc <_dtoa_r+0x3c>
 801a59c:	2010      	movs	r0, #16
 801a59e:	f7ff f81b 	bl	80195d8 <malloc>
 801a5a2:	4602      	mov	r2, r0
 801a5a4:	f8c9 001c 	str.w	r0, [r9, #28]
 801a5a8:	b920      	cbnz	r0, 801a5b4 <_dtoa_r+0x34>
 801a5aa:	4ba9      	ldr	r3, [pc, #676]	@ (801a850 <_dtoa_r+0x2d0>)
 801a5ac:	21ef      	movs	r1, #239	@ 0xef
 801a5ae:	48a9      	ldr	r0, [pc, #676]	@ (801a854 <_dtoa_r+0x2d4>)
 801a5b0:	f001 fd54 	bl	801c05c <__assert_func>
 801a5b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801a5b8:	6007      	str	r7, [r0, #0]
 801a5ba:	60c7      	str	r7, [r0, #12]
 801a5bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801a5c0:	6819      	ldr	r1, [r3, #0]
 801a5c2:	b159      	cbz	r1, 801a5dc <_dtoa_r+0x5c>
 801a5c4:	685a      	ldr	r2, [r3, #4]
 801a5c6:	604a      	str	r2, [r1, #4]
 801a5c8:	2301      	movs	r3, #1
 801a5ca:	4093      	lsls	r3, r2
 801a5cc:	608b      	str	r3, [r1, #8]
 801a5ce:	4648      	mov	r0, r9
 801a5d0:	f000 fe30 	bl	801b234 <_Bfree>
 801a5d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801a5d8:	2200      	movs	r2, #0
 801a5da:	601a      	str	r2, [r3, #0]
 801a5dc:	1e2b      	subs	r3, r5, #0
 801a5de:	bfb9      	ittee	lt
 801a5e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801a5e4:	9305      	strlt	r3, [sp, #20]
 801a5e6:	2300      	movge	r3, #0
 801a5e8:	6033      	strge	r3, [r6, #0]
 801a5ea:	9f05      	ldr	r7, [sp, #20]
 801a5ec:	4b9a      	ldr	r3, [pc, #616]	@ (801a858 <_dtoa_r+0x2d8>)
 801a5ee:	bfbc      	itt	lt
 801a5f0:	2201      	movlt	r2, #1
 801a5f2:	6032      	strlt	r2, [r6, #0]
 801a5f4:	43bb      	bics	r3, r7
 801a5f6:	d112      	bne.n	801a61e <_dtoa_r+0x9e>
 801a5f8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801a5fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 801a5fe:	6013      	str	r3, [r2, #0]
 801a600:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801a604:	4323      	orrs	r3, r4
 801a606:	f000 855a 	beq.w	801b0be <_dtoa_r+0xb3e>
 801a60a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801a60c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801a86c <_dtoa_r+0x2ec>
 801a610:	2b00      	cmp	r3, #0
 801a612:	f000 855c 	beq.w	801b0ce <_dtoa_r+0xb4e>
 801a616:	f10a 0303 	add.w	r3, sl, #3
 801a61a:	f000 bd56 	b.w	801b0ca <_dtoa_r+0xb4a>
 801a61e:	ed9d 7b04 	vldr	d7, [sp, #16]
 801a622:	2200      	movs	r2, #0
 801a624:	ec51 0b17 	vmov	r0, r1, d7
 801a628:	2300      	movs	r3, #0
 801a62a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801a62e:	f7e6 fa23 	bl	8000a78 <__aeabi_dcmpeq>
 801a632:	4680      	mov	r8, r0
 801a634:	b158      	cbz	r0, 801a64e <_dtoa_r+0xce>
 801a636:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801a638:	2301      	movs	r3, #1
 801a63a:	6013      	str	r3, [r2, #0]
 801a63c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801a63e:	b113      	cbz	r3, 801a646 <_dtoa_r+0xc6>
 801a640:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801a642:	4b86      	ldr	r3, [pc, #536]	@ (801a85c <_dtoa_r+0x2dc>)
 801a644:	6013      	str	r3, [r2, #0]
 801a646:	f8df a228 	ldr.w	sl, [pc, #552]	@ 801a870 <_dtoa_r+0x2f0>
 801a64a:	f000 bd40 	b.w	801b0ce <_dtoa_r+0xb4e>
 801a64e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801a652:	aa14      	add	r2, sp, #80	@ 0x50
 801a654:	a915      	add	r1, sp, #84	@ 0x54
 801a656:	4648      	mov	r0, r9
 801a658:	f001 f8ce 	bl	801b7f8 <__d2b>
 801a65c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801a660:	9002      	str	r0, [sp, #8]
 801a662:	2e00      	cmp	r6, #0
 801a664:	d078      	beq.n	801a758 <_dtoa_r+0x1d8>
 801a666:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a668:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801a66c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a670:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801a674:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801a678:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801a67c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801a680:	4619      	mov	r1, r3
 801a682:	2200      	movs	r2, #0
 801a684:	4b76      	ldr	r3, [pc, #472]	@ (801a860 <_dtoa_r+0x2e0>)
 801a686:	f7e5 fdd7 	bl	8000238 <__aeabi_dsub>
 801a68a:	a36b      	add	r3, pc, #428	@ (adr r3, 801a838 <_dtoa_r+0x2b8>)
 801a68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a690:	f7e5 ff8a 	bl	80005a8 <__aeabi_dmul>
 801a694:	a36a      	add	r3, pc, #424	@ (adr r3, 801a840 <_dtoa_r+0x2c0>)
 801a696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a69a:	f7e5 fdcf 	bl	800023c <__adddf3>
 801a69e:	4604      	mov	r4, r0
 801a6a0:	4630      	mov	r0, r6
 801a6a2:	460d      	mov	r5, r1
 801a6a4:	f7e5 ff16 	bl	80004d4 <__aeabi_i2d>
 801a6a8:	a367      	add	r3, pc, #412	@ (adr r3, 801a848 <_dtoa_r+0x2c8>)
 801a6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6ae:	f7e5 ff7b 	bl	80005a8 <__aeabi_dmul>
 801a6b2:	4602      	mov	r2, r0
 801a6b4:	460b      	mov	r3, r1
 801a6b6:	4620      	mov	r0, r4
 801a6b8:	4629      	mov	r1, r5
 801a6ba:	f7e5 fdbf 	bl	800023c <__adddf3>
 801a6be:	4604      	mov	r4, r0
 801a6c0:	460d      	mov	r5, r1
 801a6c2:	f7e6 fa21 	bl	8000b08 <__aeabi_d2iz>
 801a6c6:	2200      	movs	r2, #0
 801a6c8:	4607      	mov	r7, r0
 801a6ca:	2300      	movs	r3, #0
 801a6cc:	4620      	mov	r0, r4
 801a6ce:	4629      	mov	r1, r5
 801a6d0:	f7e6 f9dc 	bl	8000a8c <__aeabi_dcmplt>
 801a6d4:	b140      	cbz	r0, 801a6e8 <_dtoa_r+0x168>
 801a6d6:	4638      	mov	r0, r7
 801a6d8:	f7e5 fefc 	bl	80004d4 <__aeabi_i2d>
 801a6dc:	4622      	mov	r2, r4
 801a6de:	462b      	mov	r3, r5
 801a6e0:	f7e6 f9ca 	bl	8000a78 <__aeabi_dcmpeq>
 801a6e4:	b900      	cbnz	r0, 801a6e8 <_dtoa_r+0x168>
 801a6e6:	3f01      	subs	r7, #1
 801a6e8:	2f16      	cmp	r7, #22
 801a6ea:	d852      	bhi.n	801a792 <_dtoa_r+0x212>
 801a6ec:	4b5d      	ldr	r3, [pc, #372]	@ (801a864 <_dtoa_r+0x2e4>)
 801a6ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801a6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801a6fa:	f7e6 f9c7 	bl	8000a8c <__aeabi_dcmplt>
 801a6fe:	2800      	cmp	r0, #0
 801a700:	d049      	beq.n	801a796 <_dtoa_r+0x216>
 801a702:	3f01      	subs	r7, #1
 801a704:	2300      	movs	r3, #0
 801a706:	9310      	str	r3, [sp, #64]	@ 0x40
 801a708:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801a70a:	1b9b      	subs	r3, r3, r6
 801a70c:	1e5a      	subs	r2, r3, #1
 801a70e:	bf45      	ittet	mi
 801a710:	f1c3 0301 	rsbmi	r3, r3, #1
 801a714:	9300      	strmi	r3, [sp, #0]
 801a716:	2300      	movpl	r3, #0
 801a718:	2300      	movmi	r3, #0
 801a71a:	9206      	str	r2, [sp, #24]
 801a71c:	bf54      	ite	pl
 801a71e:	9300      	strpl	r3, [sp, #0]
 801a720:	9306      	strmi	r3, [sp, #24]
 801a722:	2f00      	cmp	r7, #0
 801a724:	db39      	blt.n	801a79a <_dtoa_r+0x21a>
 801a726:	9b06      	ldr	r3, [sp, #24]
 801a728:	970d      	str	r7, [sp, #52]	@ 0x34
 801a72a:	443b      	add	r3, r7
 801a72c:	9306      	str	r3, [sp, #24]
 801a72e:	2300      	movs	r3, #0
 801a730:	9308      	str	r3, [sp, #32]
 801a732:	9b07      	ldr	r3, [sp, #28]
 801a734:	2b09      	cmp	r3, #9
 801a736:	d863      	bhi.n	801a800 <_dtoa_r+0x280>
 801a738:	2b05      	cmp	r3, #5
 801a73a:	bfc4      	itt	gt
 801a73c:	3b04      	subgt	r3, #4
 801a73e:	9307      	strgt	r3, [sp, #28]
 801a740:	9b07      	ldr	r3, [sp, #28]
 801a742:	f1a3 0302 	sub.w	r3, r3, #2
 801a746:	bfcc      	ite	gt
 801a748:	2400      	movgt	r4, #0
 801a74a:	2401      	movle	r4, #1
 801a74c:	2b03      	cmp	r3, #3
 801a74e:	d863      	bhi.n	801a818 <_dtoa_r+0x298>
 801a750:	e8df f003 	tbb	[pc, r3]
 801a754:	2b375452 	.word	0x2b375452
 801a758:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801a75c:	441e      	add	r6, r3
 801a75e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801a762:	2b20      	cmp	r3, #32
 801a764:	bfc1      	itttt	gt
 801a766:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801a76a:	409f      	lslgt	r7, r3
 801a76c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801a770:	fa24 f303 	lsrgt.w	r3, r4, r3
 801a774:	bfd6      	itet	le
 801a776:	f1c3 0320 	rsble	r3, r3, #32
 801a77a:	ea47 0003 	orrgt.w	r0, r7, r3
 801a77e:	fa04 f003 	lslle.w	r0, r4, r3
 801a782:	f7e5 fe97 	bl	80004b4 <__aeabi_ui2d>
 801a786:	2201      	movs	r2, #1
 801a788:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801a78c:	3e01      	subs	r6, #1
 801a78e:	9212      	str	r2, [sp, #72]	@ 0x48
 801a790:	e776      	b.n	801a680 <_dtoa_r+0x100>
 801a792:	2301      	movs	r3, #1
 801a794:	e7b7      	b.n	801a706 <_dtoa_r+0x186>
 801a796:	9010      	str	r0, [sp, #64]	@ 0x40
 801a798:	e7b6      	b.n	801a708 <_dtoa_r+0x188>
 801a79a:	9b00      	ldr	r3, [sp, #0]
 801a79c:	1bdb      	subs	r3, r3, r7
 801a79e:	9300      	str	r3, [sp, #0]
 801a7a0:	427b      	negs	r3, r7
 801a7a2:	9308      	str	r3, [sp, #32]
 801a7a4:	2300      	movs	r3, #0
 801a7a6:	930d      	str	r3, [sp, #52]	@ 0x34
 801a7a8:	e7c3      	b.n	801a732 <_dtoa_r+0x1b2>
 801a7aa:	2301      	movs	r3, #1
 801a7ac:	9309      	str	r3, [sp, #36]	@ 0x24
 801a7ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a7b0:	eb07 0b03 	add.w	fp, r7, r3
 801a7b4:	f10b 0301 	add.w	r3, fp, #1
 801a7b8:	2b01      	cmp	r3, #1
 801a7ba:	9303      	str	r3, [sp, #12]
 801a7bc:	bfb8      	it	lt
 801a7be:	2301      	movlt	r3, #1
 801a7c0:	e006      	b.n	801a7d0 <_dtoa_r+0x250>
 801a7c2:	2301      	movs	r3, #1
 801a7c4:	9309      	str	r3, [sp, #36]	@ 0x24
 801a7c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a7c8:	2b00      	cmp	r3, #0
 801a7ca:	dd28      	ble.n	801a81e <_dtoa_r+0x29e>
 801a7cc:	469b      	mov	fp, r3
 801a7ce:	9303      	str	r3, [sp, #12]
 801a7d0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801a7d4:	2100      	movs	r1, #0
 801a7d6:	2204      	movs	r2, #4
 801a7d8:	f102 0514 	add.w	r5, r2, #20
 801a7dc:	429d      	cmp	r5, r3
 801a7de:	d926      	bls.n	801a82e <_dtoa_r+0x2ae>
 801a7e0:	6041      	str	r1, [r0, #4]
 801a7e2:	4648      	mov	r0, r9
 801a7e4:	f000 fce6 	bl	801b1b4 <_Balloc>
 801a7e8:	4682      	mov	sl, r0
 801a7ea:	2800      	cmp	r0, #0
 801a7ec:	d142      	bne.n	801a874 <_dtoa_r+0x2f4>
 801a7ee:	4b1e      	ldr	r3, [pc, #120]	@ (801a868 <_dtoa_r+0x2e8>)
 801a7f0:	4602      	mov	r2, r0
 801a7f2:	f240 11af 	movw	r1, #431	@ 0x1af
 801a7f6:	e6da      	b.n	801a5ae <_dtoa_r+0x2e>
 801a7f8:	2300      	movs	r3, #0
 801a7fa:	e7e3      	b.n	801a7c4 <_dtoa_r+0x244>
 801a7fc:	2300      	movs	r3, #0
 801a7fe:	e7d5      	b.n	801a7ac <_dtoa_r+0x22c>
 801a800:	2401      	movs	r4, #1
 801a802:	2300      	movs	r3, #0
 801a804:	9307      	str	r3, [sp, #28]
 801a806:	9409      	str	r4, [sp, #36]	@ 0x24
 801a808:	f04f 3bff 	mov.w	fp, #4294967295
 801a80c:	2200      	movs	r2, #0
 801a80e:	f8cd b00c 	str.w	fp, [sp, #12]
 801a812:	2312      	movs	r3, #18
 801a814:	920c      	str	r2, [sp, #48]	@ 0x30
 801a816:	e7db      	b.n	801a7d0 <_dtoa_r+0x250>
 801a818:	2301      	movs	r3, #1
 801a81a:	9309      	str	r3, [sp, #36]	@ 0x24
 801a81c:	e7f4      	b.n	801a808 <_dtoa_r+0x288>
 801a81e:	f04f 0b01 	mov.w	fp, #1
 801a822:	f8cd b00c 	str.w	fp, [sp, #12]
 801a826:	465b      	mov	r3, fp
 801a828:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801a82c:	e7d0      	b.n	801a7d0 <_dtoa_r+0x250>
 801a82e:	3101      	adds	r1, #1
 801a830:	0052      	lsls	r2, r2, #1
 801a832:	e7d1      	b.n	801a7d8 <_dtoa_r+0x258>
 801a834:	f3af 8000 	nop.w
 801a838:	636f4361 	.word	0x636f4361
 801a83c:	3fd287a7 	.word	0x3fd287a7
 801a840:	8b60c8b3 	.word	0x8b60c8b3
 801a844:	3fc68a28 	.word	0x3fc68a28
 801a848:	509f79fb 	.word	0x509f79fb
 801a84c:	3fd34413 	.word	0x3fd34413
 801a850:	0801d855 	.word	0x0801d855
 801a854:	0801d86c 	.word	0x0801d86c
 801a858:	7ff00000 	.word	0x7ff00000
 801a85c:	0801d825 	.word	0x0801d825
 801a860:	3ff80000 	.word	0x3ff80000
 801a864:	0801d9c0 	.word	0x0801d9c0
 801a868:	0801d8c4 	.word	0x0801d8c4
 801a86c:	0801d851 	.word	0x0801d851
 801a870:	0801d824 	.word	0x0801d824
 801a874:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801a878:	6018      	str	r0, [r3, #0]
 801a87a:	9b03      	ldr	r3, [sp, #12]
 801a87c:	2b0e      	cmp	r3, #14
 801a87e:	f200 80a1 	bhi.w	801a9c4 <_dtoa_r+0x444>
 801a882:	2c00      	cmp	r4, #0
 801a884:	f000 809e 	beq.w	801a9c4 <_dtoa_r+0x444>
 801a888:	2f00      	cmp	r7, #0
 801a88a:	dd33      	ble.n	801a8f4 <_dtoa_r+0x374>
 801a88c:	4b9c      	ldr	r3, [pc, #624]	@ (801ab00 <_dtoa_r+0x580>)
 801a88e:	f007 020f 	and.w	r2, r7, #15
 801a892:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a896:	ed93 7b00 	vldr	d7, [r3]
 801a89a:	05f8      	lsls	r0, r7, #23
 801a89c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 801a8a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 801a8a4:	d516      	bpl.n	801a8d4 <_dtoa_r+0x354>
 801a8a6:	4b97      	ldr	r3, [pc, #604]	@ (801ab04 <_dtoa_r+0x584>)
 801a8a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801a8ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801a8b0:	f7e5 ffa4 	bl	80007fc <__aeabi_ddiv>
 801a8b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a8b8:	f004 040f 	and.w	r4, r4, #15
 801a8bc:	2603      	movs	r6, #3
 801a8be:	4d91      	ldr	r5, [pc, #580]	@ (801ab04 <_dtoa_r+0x584>)
 801a8c0:	b954      	cbnz	r4, 801a8d8 <_dtoa_r+0x358>
 801a8c2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801a8c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a8ca:	f7e5 ff97 	bl	80007fc <__aeabi_ddiv>
 801a8ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a8d2:	e028      	b.n	801a926 <_dtoa_r+0x3a6>
 801a8d4:	2602      	movs	r6, #2
 801a8d6:	e7f2      	b.n	801a8be <_dtoa_r+0x33e>
 801a8d8:	07e1      	lsls	r1, r4, #31
 801a8da:	d508      	bpl.n	801a8ee <_dtoa_r+0x36e>
 801a8dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801a8e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a8e4:	f7e5 fe60 	bl	80005a8 <__aeabi_dmul>
 801a8e8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801a8ec:	3601      	adds	r6, #1
 801a8ee:	1064      	asrs	r4, r4, #1
 801a8f0:	3508      	adds	r5, #8
 801a8f2:	e7e5      	b.n	801a8c0 <_dtoa_r+0x340>
 801a8f4:	f000 80af 	beq.w	801aa56 <_dtoa_r+0x4d6>
 801a8f8:	427c      	negs	r4, r7
 801a8fa:	4b81      	ldr	r3, [pc, #516]	@ (801ab00 <_dtoa_r+0x580>)
 801a8fc:	4d81      	ldr	r5, [pc, #516]	@ (801ab04 <_dtoa_r+0x584>)
 801a8fe:	f004 020f 	and.w	r2, r4, #15
 801a902:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a90a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801a90e:	f7e5 fe4b 	bl	80005a8 <__aeabi_dmul>
 801a912:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a916:	1124      	asrs	r4, r4, #4
 801a918:	2300      	movs	r3, #0
 801a91a:	2602      	movs	r6, #2
 801a91c:	2c00      	cmp	r4, #0
 801a91e:	f040 808f 	bne.w	801aa40 <_dtoa_r+0x4c0>
 801a922:	2b00      	cmp	r3, #0
 801a924:	d1d3      	bne.n	801a8ce <_dtoa_r+0x34e>
 801a926:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a928:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801a92c:	2b00      	cmp	r3, #0
 801a92e:	f000 8094 	beq.w	801aa5a <_dtoa_r+0x4da>
 801a932:	4b75      	ldr	r3, [pc, #468]	@ (801ab08 <_dtoa_r+0x588>)
 801a934:	2200      	movs	r2, #0
 801a936:	4620      	mov	r0, r4
 801a938:	4629      	mov	r1, r5
 801a93a:	f7e6 f8a7 	bl	8000a8c <__aeabi_dcmplt>
 801a93e:	2800      	cmp	r0, #0
 801a940:	f000 808b 	beq.w	801aa5a <_dtoa_r+0x4da>
 801a944:	9b03      	ldr	r3, [sp, #12]
 801a946:	2b00      	cmp	r3, #0
 801a948:	f000 8087 	beq.w	801aa5a <_dtoa_r+0x4da>
 801a94c:	f1bb 0f00 	cmp.w	fp, #0
 801a950:	dd34      	ble.n	801a9bc <_dtoa_r+0x43c>
 801a952:	4620      	mov	r0, r4
 801a954:	4b6d      	ldr	r3, [pc, #436]	@ (801ab0c <_dtoa_r+0x58c>)
 801a956:	2200      	movs	r2, #0
 801a958:	4629      	mov	r1, r5
 801a95a:	f7e5 fe25 	bl	80005a8 <__aeabi_dmul>
 801a95e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a962:	f107 38ff 	add.w	r8, r7, #4294967295
 801a966:	3601      	adds	r6, #1
 801a968:	465c      	mov	r4, fp
 801a96a:	4630      	mov	r0, r6
 801a96c:	f7e5 fdb2 	bl	80004d4 <__aeabi_i2d>
 801a970:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a974:	f7e5 fe18 	bl	80005a8 <__aeabi_dmul>
 801a978:	4b65      	ldr	r3, [pc, #404]	@ (801ab10 <_dtoa_r+0x590>)
 801a97a:	2200      	movs	r2, #0
 801a97c:	f7e5 fc5e 	bl	800023c <__adddf3>
 801a980:	4605      	mov	r5, r0
 801a982:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801a986:	2c00      	cmp	r4, #0
 801a988:	d16a      	bne.n	801aa60 <_dtoa_r+0x4e0>
 801a98a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a98e:	4b61      	ldr	r3, [pc, #388]	@ (801ab14 <_dtoa_r+0x594>)
 801a990:	2200      	movs	r2, #0
 801a992:	f7e5 fc51 	bl	8000238 <__aeabi_dsub>
 801a996:	4602      	mov	r2, r0
 801a998:	460b      	mov	r3, r1
 801a99a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801a99e:	462a      	mov	r2, r5
 801a9a0:	4633      	mov	r3, r6
 801a9a2:	f7e6 f891 	bl	8000ac8 <__aeabi_dcmpgt>
 801a9a6:	2800      	cmp	r0, #0
 801a9a8:	f040 8298 	bne.w	801aedc <_dtoa_r+0x95c>
 801a9ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a9b0:	462a      	mov	r2, r5
 801a9b2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801a9b6:	f7e6 f869 	bl	8000a8c <__aeabi_dcmplt>
 801a9ba:	bb38      	cbnz	r0, 801aa0c <_dtoa_r+0x48c>
 801a9bc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 801a9c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801a9c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a9c6:	2b00      	cmp	r3, #0
 801a9c8:	f2c0 8157 	blt.w	801ac7a <_dtoa_r+0x6fa>
 801a9cc:	2f0e      	cmp	r7, #14
 801a9ce:	f300 8154 	bgt.w	801ac7a <_dtoa_r+0x6fa>
 801a9d2:	4b4b      	ldr	r3, [pc, #300]	@ (801ab00 <_dtoa_r+0x580>)
 801a9d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801a9d8:	ed93 7b00 	vldr	d7, [r3]
 801a9dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a9de:	2b00      	cmp	r3, #0
 801a9e0:	ed8d 7b00 	vstr	d7, [sp]
 801a9e4:	f280 80e5 	bge.w	801abb2 <_dtoa_r+0x632>
 801a9e8:	9b03      	ldr	r3, [sp, #12]
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	f300 80e1 	bgt.w	801abb2 <_dtoa_r+0x632>
 801a9f0:	d10c      	bne.n	801aa0c <_dtoa_r+0x48c>
 801a9f2:	4b48      	ldr	r3, [pc, #288]	@ (801ab14 <_dtoa_r+0x594>)
 801a9f4:	2200      	movs	r2, #0
 801a9f6:	ec51 0b17 	vmov	r0, r1, d7
 801a9fa:	f7e5 fdd5 	bl	80005a8 <__aeabi_dmul>
 801a9fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801aa02:	f7e6 f857 	bl	8000ab4 <__aeabi_dcmpge>
 801aa06:	2800      	cmp	r0, #0
 801aa08:	f000 8266 	beq.w	801aed8 <_dtoa_r+0x958>
 801aa0c:	2400      	movs	r4, #0
 801aa0e:	4625      	mov	r5, r4
 801aa10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aa12:	4656      	mov	r6, sl
 801aa14:	ea6f 0803 	mvn.w	r8, r3
 801aa18:	2700      	movs	r7, #0
 801aa1a:	4621      	mov	r1, r4
 801aa1c:	4648      	mov	r0, r9
 801aa1e:	f000 fc09 	bl	801b234 <_Bfree>
 801aa22:	2d00      	cmp	r5, #0
 801aa24:	f000 80bd 	beq.w	801aba2 <_dtoa_r+0x622>
 801aa28:	b12f      	cbz	r7, 801aa36 <_dtoa_r+0x4b6>
 801aa2a:	42af      	cmp	r7, r5
 801aa2c:	d003      	beq.n	801aa36 <_dtoa_r+0x4b6>
 801aa2e:	4639      	mov	r1, r7
 801aa30:	4648      	mov	r0, r9
 801aa32:	f000 fbff 	bl	801b234 <_Bfree>
 801aa36:	4629      	mov	r1, r5
 801aa38:	4648      	mov	r0, r9
 801aa3a:	f000 fbfb 	bl	801b234 <_Bfree>
 801aa3e:	e0b0      	b.n	801aba2 <_dtoa_r+0x622>
 801aa40:	07e2      	lsls	r2, r4, #31
 801aa42:	d505      	bpl.n	801aa50 <_dtoa_r+0x4d0>
 801aa44:	e9d5 2300 	ldrd	r2, r3, [r5]
 801aa48:	f7e5 fdae 	bl	80005a8 <__aeabi_dmul>
 801aa4c:	3601      	adds	r6, #1
 801aa4e:	2301      	movs	r3, #1
 801aa50:	1064      	asrs	r4, r4, #1
 801aa52:	3508      	adds	r5, #8
 801aa54:	e762      	b.n	801a91c <_dtoa_r+0x39c>
 801aa56:	2602      	movs	r6, #2
 801aa58:	e765      	b.n	801a926 <_dtoa_r+0x3a6>
 801aa5a:	9c03      	ldr	r4, [sp, #12]
 801aa5c:	46b8      	mov	r8, r7
 801aa5e:	e784      	b.n	801a96a <_dtoa_r+0x3ea>
 801aa60:	4b27      	ldr	r3, [pc, #156]	@ (801ab00 <_dtoa_r+0x580>)
 801aa62:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801aa64:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801aa68:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801aa6c:	4454      	add	r4, sl
 801aa6e:	2900      	cmp	r1, #0
 801aa70:	d054      	beq.n	801ab1c <_dtoa_r+0x59c>
 801aa72:	4929      	ldr	r1, [pc, #164]	@ (801ab18 <_dtoa_r+0x598>)
 801aa74:	2000      	movs	r0, #0
 801aa76:	f7e5 fec1 	bl	80007fc <__aeabi_ddiv>
 801aa7a:	4633      	mov	r3, r6
 801aa7c:	462a      	mov	r2, r5
 801aa7e:	f7e5 fbdb 	bl	8000238 <__aeabi_dsub>
 801aa82:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801aa86:	4656      	mov	r6, sl
 801aa88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801aa8c:	f7e6 f83c 	bl	8000b08 <__aeabi_d2iz>
 801aa90:	4605      	mov	r5, r0
 801aa92:	f7e5 fd1f 	bl	80004d4 <__aeabi_i2d>
 801aa96:	4602      	mov	r2, r0
 801aa98:	460b      	mov	r3, r1
 801aa9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801aa9e:	f7e5 fbcb 	bl	8000238 <__aeabi_dsub>
 801aaa2:	3530      	adds	r5, #48	@ 0x30
 801aaa4:	4602      	mov	r2, r0
 801aaa6:	460b      	mov	r3, r1
 801aaa8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801aaac:	f806 5b01 	strb.w	r5, [r6], #1
 801aab0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801aab4:	f7e5 ffea 	bl	8000a8c <__aeabi_dcmplt>
 801aab8:	2800      	cmp	r0, #0
 801aaba:	d172      	bne.n	801aba2 <_dtoa_r+0x622>
 801aabc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801aac0:	4911      	ldr	r1, [pc, #68]	@ (801ab08 <_dtoa_r+0x588>)
 801aac2:	2000      	movs	r0, #0
 801aac4:	f7e5 fbb8 	bl	8000238 <__aeabi_dsub>
 801aac8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801aacc:	f7e5 ffde 	bl	8000a8c <__aeabi_dcmplt>
 801aad0:	2800      	cmp	r0, #0
 801aad2:	f040 80b4 	bne.w	801ac3e <_dtoa_r+0x6be>
 801aad6:	42a6      	cmp	r6, r4
 801aad8:	f43f af70 	beq.w	801a9bc <_dtoa_r+0x43c>
 801aadc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801aae0:	4b0a      	ldr	r3, [pc, #40]	@ (801ab0c <_dtoa_r+0x58c>)
 801aae2:	2200      	movs	r2, #0
 801aae4:	f7e5 fd60 	bl	80005a8 <__aeabi_dmul>
 801aae8:	4b08      	ldr	r3, [pc, #32]	@ (801ab0c <_dtoa_r+0x58c>)
 801aaea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801aaee:	2200      	movs	r2, #0
 801aaf0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801aaf4:	f7e5 fd58 	bl	80005a8 <__aeabi_dmul>
 801aaf8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801aafc:	e7c4      	b.n	801aa88 <_dtoa_r+0x508>
 801aafe:	bf00      	nop
 801ab00:	0801d9c0 	.word	0x0801d9c0
 801ab04:	0801d998 	.word	0x0801d998
 801ab08:	3ff00000 	.word	0x3ff00000
 801ab0c:	40240000 	.word	0x40240000
 801ab10:	401c0000 	.word	0x401c0000
 801ab14:	40140000 	.word	0x40140000
 801ab18:	3fe00000 	.word	0x3fe00000
 801ab1c:	4631      	mov	r1, r6
 801ab1e:	4628      	mov	r0, r5
 801ab20:	f7e5 fd42 	bl	80005a8 <__aeabi_dmul>
 801ab24:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801ab28:	9413      	str	r4, [sp, #76]	@ 0x4c
 801ab2a:	4656      	mov	r6, sl
 801ab2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ab30:	f7e5 ffea 	bl	8000b08 <__aeabi_d2iz>
 801ab34:	4605      	mov	r5, r0
 801ab36:	f7e5 fccd 	bl	80004d4 <__aeabi_i2d>
 801ab3a:	4602      	mov	r2, r0
 801ab3c:	460b      	mov	r3, r1
 801ab3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ab42:	f7e5 fb79 	bl	8000238 <__aeabi_dsub>
 801ab46:	3530      	adds	r5, #48	@ 0x30
 801ab48:	f806 5b01 	strb.w	r5, [r6], #1
 801ab4c:	4602      	mov	r2, r0
 801ab4e:	460b      	mov	r3, r1
 801ab50:	42a6      	cmp	r6, r4
 801ab52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801ab56:	f04f 0200 	mov.w	r2, #0
 801ab5a:	d124      	bne.n	801aba6 <_dtoa_r+0x626>
 801ab5c:	4baf      	ldr	r3, [pc, #700]	@ (801ae1c <_dtoa_r+0x89c>)
 801ab5e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801ab62:	f7e5 fb6b 	bl	800023c <__adddf3>
 801ab66:	4602      	mov	r2, r0
 801ab68:	460b      	mov	r3, r1
 801ab6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ab6e:	f7e5 ffab 	bl	8000ac8 <__aeabi_dcmpgt>
 801ab72:	2800      	cmp	r0, #0
 801ab74:	d163      	bne.n	801ac3e <_dtoa_r+0x6be>
 801ab76:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801ab7a:	49a8      	ldr	r1, [pc, #672]	@ (801ae1c <_dtoa_r+0x89c>)
 801ab7c:	2000      	movs	r0, #0
 801ab7e:	f7e5 fb5b 	bl	8000238 <__aeabi_dsub>
 801ab82:	4602      	mov	r2, r0
 801ab84:	460b      	mov	r3, r1
 801ab86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ab8a:	f7e5 ff7f 	bl	8000a8c <__aeabi_dcmplt>
 801ab8e:	2800      	cmp	r0, #0
 801ab90:	f43f af14 	beq.w	801a9bc <_dtoa_r+0x43c>
 801ab94:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801ab96:	1e73      	subs	r3, r6, #1
 801ab98:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ab9a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801ab9e:	2b30      	cmp	r3, #48	@ 0x30
 801aba0:	d0f8      	beq.n	801ab94 <_dtoa_r+0x614>
 801aba2:	4647      	mov	r7, r8
 801aba4:	e03b      	b.n	801ac1e <_dtoa_r+0x69e>
 801aba6:	4b9e      	ldr	r3, [pc, #632]	@ (801ae20 <_dtoa_r+0x8a0>)
 801aba8:	f7e5 fcfe 	bl	80005a8 <__aeabi_dmul>
 801abac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801abb0:	e7bc      	b.n	801ab2c <_dtoa_r+0x5ac>
 801abb2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801abb6:	4656      	mov	r6, sl
 801abb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801abbc:	4620      	mov	r0, r4
 801abbe:	4629      	mov	r1, r5
 801abc0:	f7e5 fe1c 	bl	80007fc <__aeabi_ddiv>
 801abc4:	f7e5 ffa0 	bl	8000b08 <__aeabi_d2iz>
 801abc8:	4680      	mov	r8, r0
 801abca:	f7e5 fc83 	bl	80004d4 <__aeabi_i2d>
 801abce:	e9dd 2300 	ldrd	r2, r3, [sp]
 801abd2:	f7e5 fce9 	bl	80005a8 <__aeabi_dmul>
 801abd6:	4602      	mov	r2, r0
 801abd8:	460b      	mov	r3, r1
 801abda:	4620      	mov	r0, r4
 801abdc:	4629      	mov	r1, r5
 801abde:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801abe2:	f7e5 fb29 	bl	8000238 <__aeabi_dsub>
 801abe6:	f806 4b01 	strb.w	r4, [r6], #1
 801abea:	9d03      	ldr	r5, [sp, #12]
 801abec:	eba6 040a 	sub.w	r4, r6, sl
 801abf0:	42a5      	cmp	r5, r4
 801abf2:	4602      	mov	r2, r0
 801abf4:	460b      	mov	r3, r1
 801abf6:	d133      	bne.n	801ac60 <_dtoa_r+0x6e0>
 801abf8:	f7e5 fb20 	bl	800023c <__adddf3>
 801abfc:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ac00:	4604      	mov	r4, r0
 801ac02:	460d      	mov	r5, r1
 801ac04:	f7e5 ff60 	bl	8000ac8 <__aeabi_dcmpgt>
 801ac08:	b9c0      	cbnz	r0, 801ac3c <_dtoa_r+0x6bc>
 801ac0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ac0e:	4620      	mov	r0, r4
 801ac10:	4629      	mov	r1, r5
 801ac12:	f7e5 ff31 	bl	8000a78 <__aeabi_dcmpeq>
 801ac16:	b110      	cbz	r0, 801ac1e <_dtoa_r+0x69e>
 801ac18:	f018 0f01 	tst.w	r8, #1
 801ac1c:	d10e      	bne.n	801ac3c <_dtoa_r+0x6bc>
 801ac1e:	9902      	ldr	r1, [sp, #8]
 801ac20:	4648      	mov	r0, r9
 801ac22:	f000 fb07 	bl	801b234 <_Bfree>
 801ac26:	2300      	movs	r3, #0
 801ac28:	7033      	strb	r3, [r6, #0]
 801ac2a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ac2c:	3701      	adds	r7, #1
 801ac2e:	601f      	str	r7, [r3, #0]
 801ac30:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801ac32:	2b00      	cmp	r3, #0
 801ac34:	f000 824b 	beq.w	801b0ce <_dtoa_r+0xb4e>
 801ac38:	601e      	str	r6, [r3, #0]
 801ac3a:	e248      	b.n	801b0ce <_dtoa_r+0xb4e>
 801ac3c:	46b8      	mov	r8, r7
 801ac3e:	4633      	mov	r3, r6
 801ac40:	461e      	mov	r6, r3
 801ac42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ac46:	2a39      	cmp	r2, #57	@ 0x39
 801ac48:	d106      	bne.n	801ac58 <_dtoa_r+0x6d8>
 801ac4a:	459a      	cmp	sl, r3
 801ac4c:	d1f8      	bne.n	801ac40 <_dtoa_r+0x6c0>
 801ac4e:	2230      	movs	r2, #48	@ 0x30
 801ac50:	f108 0801 	add.w	r8, r8, #1
 801ac54:	f88a 2000 	strb.w	r2, [sl]
 801ac58:	781a      	ldrb	r2, [r3, #0]
 801ac5a:	3201      	adds	r2, #1
 801ac5c:	701a      	strb	r2, [r3, #0]
 801ac5e:	e7a0      	b.n	801aba2 <_dtoa_r+0x622>
 801ac60:	4b6f      	ldr	r3, [pc, #444]	@ (801ae20 <_dtoa_r+0x8a0>)
 801ac62:	2200      	movs	r2, #0
 801ac64:	f7e5 fca0 	bl	80005a8 <__aeabi_dmul>
 801ac68:	2200      	movs	r2, #0
 801ac6a:	2300      	movs	r3, #0
 801ac6c:	4604      	mov	r4, r0
 801ac6e:	460d      	mov	r5, r1
 801ac70:	f7e5 ff02 	bl	8000a78 <__aeabi_dcmpeq>
 801ac74:	2800      	cmp	r0, #0
 801ac76:	d09f      	beq.n	801abb8 <_dtoa_r+0x638>
 801ac78:	e7d1      	b.n	801ac1e <_dtoa_r+0x69e>
 801ac7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ac7c:	2a00      	cmp	r2, #0
 801ac7e:	f000 80ea 	beq.w	801ae56 <_dtoa_r+0x8d6>
 801ac82:	9a07      	ldr	r2, [sp, #28]
 801ac84:	2a01      	cmp	r2, #1
 801ac86:	f300 80cd 	bgt.w	801ae24 <_dtoa_r+0x8a4>
 801ac8a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ac8c:	2a00      	cmp	r2, #0
 801ac8e:	f000 80c1 	beq.w	801ae14 <_dtoa_r+0x894>
 801ac92:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801ac96:	9c08      	ldr	r4, [sp, #32]
 801ac98:	9e00      	ldr	r6, [sp, #0]
 801ac9a:	9a00      	ldr	r2, [sp, #0]
 801ac9c:	441a      	add	r2, r3
 801ac9e:	9200      	str	r2, [sp, #0]
 801aca0:	9a06      	ldr	r2, [sp, #24]
 801aca2:	2101      	movs	r1, #1
 801aca4:	441a      	add	r2, r3
 801aca6:	4648      	mov	r0, r9
 801aca8:	9206      	str	r2, [sp, #24]
 801acaa:	f000 fb77 	bl	801b39c <__i2b>
 801acae:	4605      	mov	r5, r0
 801acb0:	b166      	cbz	r6, 801accc <_dtoa_r+0x74c>
 801acb2:	9b06      	ldr	r3, [sp, #24]
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	dd09      	ble.n	801accc <_dtoa_r+0x74c>
 801acb8:	42b3      	cmp	r3, r6
 801acba:	9a00      	ldr	r2, [sp, #0]
 801acbc:	bfa8      	it	ge
 801acbe:	4633      	movge	r3, r6
 801acc0:	1ad2      	subs	r2, r2, r3
 801acc2:	9200      	str	r2, [sp, #0]
 801acc4:	9a06      	ldr	r2, [sp, #24]
 801acc6:	1af6      	subs	r6, r6, r3
 801acc8:	1ad3      	subs	r3, r2, r3
 801acca:	9306      	str	r3, [sp, #24]
 801accc:	9b08      	ldr	r3, [sp, #32]
 801acce:	b30b      	cbz	r3, 801ad14 <_dtoa_r+0x794>
 801acd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801acd2:	2b00      	cmp	r3, #0
 801acd4:	f000 80c6 	beq.w	801ae64 <_dtoa_r+0x8e4>
 801acd8:	2c00      	cmp	r4, #0
 801acda:	f000 80c0 	beq.w	801ae5e <_dtoa_r+0x8de>
 801acde:	4629      	mov	r1, r5
 801ace0:	4622      	mov	r2, r4
 801ace2:	4648      	mov	r0, r9
 801ace4:	f000 fc12 	bl	801b50c <__pow5mult>
 801ace8:	9a02      	ldr	r2, [sp, #8]
 801acea:	4601      	mov	r1, r0
 801acec:	4605      	mov	r5, r0
 801acee:	4648      	mov	r0, r9
 801acf0:	f000 fb6a 	bl	801b3c8 <__multiply>
 801acf4:	9902      	ldr	r1, [sp, #8]
 801acf6:	4680      	mov	r8, r0
 801acf8:	4648      	mov	r0, r9
 801acfa:	f000 fa9b 	bl	801b234 <_Bfree>
 801acfe:	9b08      	ldr	r3, [sp, #32]
 801ad00:	1b1b      	subs	r3, r3, r4
 801ad02:	9308      	str	r3, [sp, #32]
 801ad04:	f000 80b1 	beq.w	801ae6a <_dtoa_r+0x8ea>
 801ad08:	9a08      	ldr	r2, [sp, #32]
 801ad0a:	4641      	mov	r1, r8
 801ad0c:	4648      	mov	r0, r9
 801ad0e:	f000 fbfd 	bl	801b50c <__pow5mult>
 801ad12:	9002      	str	r0, [sp, #8]
 801ad14:	2101      	movs	r1, #1
 801ad16:	4648      	mov	r0, r9
 801ad18:	f000 fb40 	bl	801b39c <__i2b>
 801ad1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ad1e:	4604      	mov	r4, r0
 801ad20:	2b00      	cmp	r3, #0
 801ad22:	f000 81d8 	beq.w	801b0d6 <_dtoa_r+0xb56>
 801ad26:	461a      	mov	r2, r3
 801ad28:	4601      	mov	r1, r0
 801ad2a:	4648      	mov	r0, r9
 801ad2c:	f000 fbee 	bl	801b50c <__pow5mult>
 801ad30:	9b07      	ldr	r3, [sp, #28]
 801ad32:	2b01      	cmp	r3, #1
 801ad34:	4604      	mov	r4, r0
 801ad36:	f300 809f 	bgt.w	801ae78 <_dtoa_r+0x8f8>
 801ad3a:	9b04      	ldr	r3, [sp, #16]
 801ad3c:	2b00      	cmp	r3, #0
 801ad3e:	f040 8097 	bne.w	801ae70 <_dtoa_r+0x8f0>
 801ad42:	9b05      	ldr	r3, [sp, #20]
 801ad44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ad48:	2b00      	cmp	r3, #0
 801ad4a:	f040 8093 	bne.w	801ae74 <_dtoa_r+0x8f4>
 801ad4e:	9b05      	ldr	r3, [sp, #20]
 801ad50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801ad54:	0d1b      	lsrs	r3, r3, #20
 801ad56:	051b      	lsls	r3, r3, #20
 801ad58:	b133      	cbz	r3, 801ad68 <_dtoa_r+0x7e8>
 801ad5a:	9b00      	ldr	r3, [sp, #0]
 801ad5c:	3301      	adds	r3, #1
 801ad5e:	9300      	str	r3, [sp, #0]
 801ad60:	9b06      	ldr	r3, [sp, #24]
 801ad62:	3301      	adds	r3, #1
 801ad64:	9306      	str	r3, [sp, #24]
 801ad66:	2301      	movs	r3, #1
 801ad68:	9308      	str	r3, [sp, #32]
 801ad6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ad6c:	2b00      	cmp	r3, #0
 801ad6e:	f000 81b8 	beq.w	801b0e2 <_dtoa_r+0xb62>
 801ad72:	6923      	ldr	r3, [r4, #16]
 801ad74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801ad78:	6918      	ldr	r0, [r3, #16]
 801ad7a:	f000 fac3 	bl	801b304 <__hi0bits>
 801ad7e:	f1c0 0020 	rsb	r0, r0, #32
 801ad82:	9b06      	ldr	r3, [sp, #24]
 801ad84:	4418      	add	r0, r3
 801ad86:	f010 001f 	ands.w	r0, r0, #31
 801ad8a:	f000 8082 	beq.w	801ae92 <_dtoa_r+0x912>
 801ad8e:	f1c0 0320 	rsb	r3, r0, #32
 801ad92:	2b04      	cmp	r3, #4
 801ad94:	dd73      	ble.n	801ae7e <_dtoa_r+0x8fe>
 801ad96:	9b00      	ldr	r3, [sp, #0]
 801ad98:	f1c0 001c 	rsb	r0, r0, #28
 801ad9c:	4403      	add	r3, r0
 801ad9e:	9300      	str	r3, [sp, #0]
 801ada0:	9b06      	ldr	r3, [sp, #24]
 801ada2:	4403      	add	r3, r0
 801ada4:	4406      	add	r6, r0
 801ada6:	9306      	str	r3, [sp, #24]
 801ada8:	9b00      	ldr	r3, [sp, #0]
 801adaa:	2b00      	cmp	r3, #0
 801adac:	dd05      	ble.n	801adba <_dtoa_r+0x83a>
 801adae:	9902      	ldr	r1, [sp, #8]
 801adb0:	461a      	mov	r2, r3
 801adb2:	4648      	mov	r0, r9
 801adb4:	f000 fc04 	bl	801b5c0 <__lshift>
 801adb8:	9002      	str	r0, [sp, #8]
 801adba:	9b06      	ldr	r3, [sp, #24]
 801adbc:	2b00      	cmp	r3, #0
 801adbe:	dd05      	ble.n	801adcc <_dtoa_r+0x84c>
 801adc0:	4621      	mov	r1, r4
 801adc2:	461a      	mov	r2, r3
 801adc4:	4648      	mov	r0, r9
 801adc6:	f000 fbfb 	bl	801b5c0 <__lshift>
 801adca:	4604      	mov	r4, r0
 801adcc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801adce:	2b00      	cmp	r3, #0
 801add0:	d061      	beq.n	801ae96 <_dtoa_r+0x916>
 801add2:	9802      	ldr	r0, [sp, #8]
 801add4:	4621      	mov	r1, r4
 801add6:	f000 fc5f 	bl	801b698 <__mcmp>
 801adda:	2800      	cmp	r0, #0
 801addc:	da5b      	bge.n	801ae96 <_dtoa_r+0x916>
 801adde:	2300      	movs	r3, #0
 801ade0:	9902      	ldr	r1, [sp, #8]
 801ade2:	220a      	movs	r2, #10
 801ade4:	4648      	mov	r0, r9
 801ade6:	f000 fa47 	bl	801b278 <__multadd>
 801adea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801adec:	9002      	str	r0, [sp, #8]
 801adee:	f107 38ff 	add.w	r8, r7, #4294967295
 801adf2:	2b00      	cmp	r3, #0
 801adf4:	f000 8177 	beq.w	801b0e6 <_dtoa_r+0xb66>
 801adf8:	4629      	mov	r1, r5
 801adfa:	2300      	movs	r3, #0
 801adfc:	220a      	movs	r2, #10
 801adfe:	4648      	mov	r0, r9
 801ae00:	f000 fa3a 	bl	801b278 <__multadd>
 801ae04:	f1bb 0f00 	cmp.w	fp, #0
 801ae08:	4605      	mov	r5, r0
 801ae0a:	dc6f      	bgt.n	801aeec <_dtoa_r+0x96c>
 801ae0c:	9b07      	ldr	r3, [sp, #28]
 801ae0e:	2b02      	cmp	r3, #2
 801ae10:	dc49      	bgt.n	801aea6 <_dtoa_r+0x926>
 801ae12:	e06b      	b.n	801aeec <_dtoa_r+0x96c>
 801ae14:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ae16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801ae1a:	e73c      	b.n	801ac96 <_dtoa_r+0x716>
 801ae1c:	3fe00000 	.word	0x3fe00000
 801ae20:	40240000 	.word	0x40240000
 801ae24:	9b03      	ldr	r3, [sp, #12]
 801ae26:	1e5c      	subs	r4, r3, #1
 801ae28:	9b08      	ldr	r3, [sp, #32]
 801ae2a:	42a3      	cmp	r3, r4
 801ae2c:	db09      	blt.n	801ae42 <_dtoa_r+0x8c2>
 801ae2e:	1b1c      	subs	r4, r3, r4
 801ae30:	9b03      	ldr	r3, [sp, #12]
 801ae32:	2b00      	cmp	r3, #0
 801ae34:	f6bf af30 	bge.w	801ac98 <_dtoa_r+0x718>
 801ae38:	9b00      	ldr	r3, [sp, #0]
 801ae3a:	9a03      	ldr	r2, [sp, #12]
 801ae3c:	1a9e      	subs	r6, r3, r2
 801ae3e:	2300      	movs	r3, #0
 801ae40:	e72b      	b.n	801ac9a <_dtoa_r+0x71a>
 801ae42:	9b08      	ldr	r3, [sp, #32]
 801ae44:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ae46:	9408      	str	r4, [sp, #32]
 801ae48:	1ae3      	subs	r3, r4, r3
 801ae4a:	441a      	add	r2, r3
 801ae4c:	9e00      	ldr	r6, [sp, #0]
 801ae4e:	9b03      	ldr	r3, [sp, #12]
 801ae50:	920d      	str	r2, [sp, #52]	@ 0x34
 801ae52:	2400      	movs	r4, #0
 801ae54:	e721      	b.n	801ac9a <_dtoa_r+0x71a>
 801ae56:	9c08      	ldr	r4, [sp, #32]
 801ae58:	9e00      	ldr	r6, [sp, #0]
 801ae5a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801ae5c:	e728      	b.n	801acb0 <_dtoa_r+0x730>
 801ae5e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801ae62:	e751      	b.n	801ad08 <_dtoa_r+0x788>
 801ae64:	9a08      	ldr	r2, [sp, #32]
 801ae66:	9902      	ldr	r1, [sp, #8]
 801ae68:	e750      	b.n	801ad0c <_dtoa_r+0x78c>
 801ae6a:	f8cd 8008 	str.w	r8, [sp, #8]
 801ae6e:	e751      	b.n	801ad14 <_dtoa_r+0x794>
 801ae70:	2300      	movs	r3, #0
 801ae72:	e779      	b.n	801ad68 <_dtoa_r+0x7e8>
 801ae74:	9b04      	ldr	r3, [sp, #16]
 801ae76:	e777      	b.n	801ad68 <_dtoa_r+0x7e8>
 801ae78:	2300      	movs	r3, #0
 801ae7a:	9308      	str	r3, [sp, #32]
 801ae7c:	e779      	b.n	801ad72 <_dtoa_r+0x7f2>
 801ae7e:	d093      	beq.n	801ada8 <_dtoa_r+0x828>
 801ae80:	9a00      	ldr	r2, [sp, #0]
 801ae82:	331c      	adds	r3, #28
 801ae84:	441a      	add	r2, r3
 801ae86:	9200      	str	r2, [sp, #0]
 801ae88:	9a06      	ldr	r2, [sp, #24]
 801ae8a:	441a      	add	r2, r3
 801ae8c:	441e      	add	r6, r3
 801ae8e:	9206      	str	r2, [sp, #24]
 801ae90:	e78a      	b.n	801ada8 <_dtoa_r+0x828>
 801ae92:	4603      	mov	r3, r0
 801ae94:	e7f4      	b.n	801ae80 <_dtoa_r+0x900>
 801ae96:	9b03      	ldr	r3, [sp, #12]
 801ae98:	2b00      	cmp	r3, #0
 801ae9a:	46b8      	mov	r8, r7
 801ae9c:	dc20      	bgt.n	801aee0 <_dtoa_r+0x960>
 801ae9e:	469b      	mov	fp, r3
 801aea0:	9b07      	ldr	r3, [sp, #28]
 801aea2:	2b02      	cmp	r3, #2
 801aea4:	dd1e      	ble.n	801aee4 <_dtoa_r+0x964>
 801aea6:	f1bb 0f00 	cmp.w	fp, #0
 801aeaa:	f47f adb1 	bne.w	801aa10 <_dtoa_r+0x490>
 801aeae:	4621      	mov	r1, r4
 801aeb0:	465b      	mov	r3, fp
 801aeb2:	2205      	movs	r2, #5
 801aeb4:	4648      	mov	r0, r9
 801aeb6:	f000 f9df 	bl	801b278 <__multadd>
 801aeba:	4601      	mov	r1, r0
 801aebc:	4604      	mov	r4, r0
 801aebe:	9802      	ldr	r0, [sp, #8]
 801aec0:	f000 fbea 	bl	801b698 <__mcmp>
 801aec4:	2800      	cmp	r0, #0
 801aec6:	f77f ada3 	ble.w	801aa10 <_dtoa_r+0x490>
 801aeca:	4656      	mov	r6, sl
 801aecc:	2331      	movs	r3, #49	@ 0x31
 801aece:	f806 3b01 	strb.w	r3, [r6], #1
 801aed2:	f108 0801 	add.w	r8, r8, #1
 801aed6:	e59f      	b.n	801aa18 <_dtoa_r+0x498>
 801aed8:	9c03      	ldr	r4, [sp, #12]
 801aeda:	46b8      	mov	r8, r7
 801aedc:	4625      	mov	r5, r4
 801aede:	e7f4      	b.n	801aeca <_dtoa_r+0x94a>
 801aee0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801aee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aee6:	2b00      	cmp	r3, #0
 801aee8:	f000 8101 	beq.w	801b0ee <_dtoa_r+0xb6e>
 801aeec:	2e00      	cmp	r6, #0
 801aeee:	dd05      	ble.n	801aefc <_dtoa_r+0x97c>
 801aef0:	4629      	mov	r1, r5
 801aef2:	4632      	mov	r2, r6
 801aef4:	4648      	mov	r0, r9
 801aef6:	f000 fb63 	bl	801b5c0 <__lshift>
 801aefa:	4605      	mov	r5, r0
 801aefc:	9b08      	ldr	r3, [sp, #32]
 801aefe:	2b00      	cmp	r3, #0
 801af00:	d05c      	beq.n	801afbc <_dtoa_r+0xa3c>
 801af02:	6869      	ldr	r1, [r5, #4]
 801af04:	4648      	mov	r0, r9
 801af06:	f000 f955 	bl	801b1b4 <_Balloc>
 801af0a:	4606      	mov	r6, r0
 801af0c:	b928      	cbnz	r0, 801af1a <_dtoa_r+0x99a>
 801af0e:	4b82      	ldr	r3, [pc, #520]	@ (801b118 <_dtoa_r+0xb98>)
 801af10:	4602      	mov	r2, r0
 801af12:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801af16:	f7ff bb4a 	b.w	801a5ae <_dtoa_r+0x2e>
 801af1a:	692a      	ldr	r2, [r5, #16]
 801af1c:	3202      	adds	r2, #2
 801af1e:	0092      	lsls	r2, r2, #2
 801af20:	f105 010c 	add.w	r1, r5, #12
 801af24:	300c      	adds	r0, #12
 801af26:	f7ff fa94 	bl	801a452 <memcpy>
 801af2a:	2201      	movs	r2, #1
 801af2c:	4631      	mov	r1, r6
 801af2e:	4648      	mov	r0, r9
 801af30:	f000 fb46 	bl	801b5c0 <__lshift>
 801af34:	f10a 0301 	add.w	r3, sl, #1
 801af38:	9300      	str	r3, [sp, #0]
 801af3a:	eb0a 030b 	add.w	r3, sl, fp
 801af3e:	9308      	str	r3, [sp, #32]
 801af40:	9b04      	ldr	r3, [sp, #16]
 801af42:	f003 0301 	and.w	r3, r3, #1
 801af46:	462f      	mov	r7, r5
 801af48:	9306      	str	r3, [sp, #24]
 801af4a:	4605      	mov	r5, r0
 801af4c:	9b00      	ldr	r3, [sp, #0]
 801af4e:	9802      	ldr	r0, [sp, #8]
 801af50:	4621      	mov	r1, r4
 801af52:	f103 3bff 	add.w	fp, r3, #4294967295
 801af56:	f7ff fa8a 	bl	801a46e <quorem>
 801af5a:	4603      	mov	r3, r0
 801af5c:	3330      	adds	r3, #48	@ 0x30
 801af5e:	9003      	str	r0, [sp, #12]
 801af60:	4639      	mov	r1, r7
 801af62:	9802      	ldr	r0, [sp, #8]
 801af64:	9309      	str	r3, [sp, #36]	@ 0x24
 801af66:	f000 fb97 	bl	801b698 <__mcmp>
 801af6a:	462a      	mov	r2, r5
 801af6c:	9004      	str	r0, [sp, #16]
 801af6e:	4621      	mov	r1, r4
 801af70:	4648      	mov	r0, r9
 801af72:	f000 fbad 	bl	801b6d0 <__mdiff>
 801af76:	68c2      	ldr	r2, [r0, #12]
 801af78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801af7a:	4606      	mov	r6, r0
 801af7c:	bb02      	cbnz	r2, 801afc0 <_dtoa_r+0xa40>
 801af7e:	4601      	mov	r1, r0
 801af80:	9802      	ldr	r0, [sp, #8]
 801af82:	f000 fb89 	bl	801b698 <__mcmp>
 801af86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801af88:	4602      	mov	r2, r0
 801af8a:	4631      	mov	r1, r6
 801af8c:	4648      	mov	r0, r9
 801af8e:	920c      	str	r2, [sp, #48]	@ 0x30
 801af90:	9309      	str	r3, [sp, #36]	@ 0x24
 801af92:	f000 f94f 	bl	801b234 <_Bfree>
 801af96:	9b07      	ldr	r3, [sp, #28]
 801af98:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801af9a:	9e00      	ldr	r6, [sp, #0]
 801af9c:	ea42 0103 	orr.w	r1, r2, r3
 801afa0:	9b06      	ldr	r3, [sp, #24]
 801afa2:	4319      	orrs	r1, r3
 801afa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801afa6:	d10d      	bne.n	801afc4 <_dtoa_r+0xa44>
 801afa8:	2b39      	cmp	r3, #57	@ 0x39
 801afaa:	d027      	beq.n	801affc <_dtoa_r+0xa7c>
 801afac:	9a04      	ldr	r2, [sp, #16]
 801afae:	2a00      	cmp	r2, #0
 801afb0:	dd01      	ble.n	801afb6 <_dtoa_r+0xa36>
 801afb2:	9b03      	ldr	r3, [sp, #12]
 801afb4:	3331      	adds	r3, #49	@ 0x31
 801afb6:	f88b 3000 	strb.w	r3, [fp]
 801afba:	e52e      	b.n	801aa1a <_dtoa_r+0x49a>
 801afbc:	4628      	mov	r0, r5
 801afbe:	e7b9      	b.n	801af34 <_dtoa_r+0x9b4>
 801afc0:	2201      	movs	r2, #1
 801afc2:	e7e2      	b.n	801af8a <_dtoa_r+0xa0a>
 801afc4:	9904      	ldr	r1, [sp, #16]
 801afc6:	2900      	cmp	r1, #0
 801afc8:	db04      	blt.n	801afd4 <_dtoa_r+0xa54>
 801afca:	9807      	ldr	r0, [sp, #28]
 801afcc:	4301      	orrs	r1, r0
 801afce:	9806      	ldr	r0, [sp, #24]
 801afd0:	4301      	orrs	r1, r0
 801afd2:	d120      	bne.n	801b016 <_dtoa_r+0xa96>
 801afd4:	2a00      	cmp	r2, #0
 801afd6:	ddee      	ble.n	801afb6 <_dtoa_r+0xa36>
 801afd8:	9902      	ldr	r1, [sp, #8]
 801afda:	9300      	str	r3, [sp, #0]
 801afdc:	2201      	movs	r2, #1
 801afde:	4648      	mov	r0, r9
 801afe0:	f000 faee 	bl	801b5c0 <__lshift>
 801afe4:	4621      	mov	r1, r4
 801afe6:	9002      	str	r0, [sp, #8]
 801afe8:	f000 fb56 	bl	801b698 <__mcmp>
 801afec:	2800      	cmp	r0, #0
 801afee:	9b00      	ldr	r3, [sp, #0]
 801aff0:	dc02      	bgt.n	801aff8 <_dtoa_r+0xa78>
 801aff2:	d1e0      	bne.n	801afb6 <_dtoa_r+0xa36>
 801aff4:	07da      	lsls	r2, r3, #31
 801aff6:	d5de      	bpl.n	801afb6 <_dtoa_r+0xa36>
 801aff8:	2b39      	cmp	r3, #57	@ 0x39
 801affa:	d1da      	bne.n	801afb2 <_dtoa_r+0xa32>
 801affc:	2339      	movs	r3, #57	@ 0x39
 801affe:	f88b 3000 	strb.w	r3, [fp]
 801b002:	4633      	mov	r3, r6
 801b004:	461e      	mov	r6, r3
 801b006:	3b01      	subs	r3, #1
 801b008:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801b00c:	2a39      	cmp	r2, #57	@ 0x39
 801b00e:	d04e      	beq.n	801b0ae <_dtoa_r+0xb2e>
 801b010:	3201      	adds	r2, #1
 801b012:	701a      	strb	r2, [r3, #0]
 801b014:	e501      	b.n	801aa1a <_dtoa_r+0x49a>
 801b016:	2a00      	cmp	r2, #0
 801b018:	dd03      	ble.n	801b022 <_dtoa_r+0xaa2>
 801b01a:	2b39      	cmp	r3, #57	@ 0x39
 801b01c:	d0ee      	beq.n	801affc <_dtoa_r+0xa7c>
 801b01e:	3301      	adds	r3, #1
 801b020:	e7c9      	b.n	801afb6 <_dtoa_r+0xa36>
 801b022:	9a00      	ldr	r2, [sp, #0]
 801b024:	9908      	ldr	r1, [sp, #32]
 801b026:	f802 3c01 	strb.w	r3, [r2, #-1]
 801b02a:	428a      	cmp	r2, r1
 801b02c:	d028      	beq.n	801b080 <_dtoa_r+0xb00>
 801b02e:	9902      	ldr	r1, [sp, #8]
 801b030:	2300      	movs	r3, #0
 801b032:	220a      	movs	r2, #10
 801b034:	4648      	mov	r0, r9
 801b036:	f000 f91f 	bl	801b278 <__multadd>
 801b03a:	42af      	cmp	r7, r5
 801b03c:	9002      	str	r0, [sp, #8]
 801b03e:	f04f 0300 	mov.w	r3, #0
 801b042:	f04f 020a 	mov.w	r2, #10
 801b046:	4639      	mov	r1, r7
 801b048:	4648      	mov	r0, r9
 801b04a:	d107      	bne.n	801b05c <_dtoa_r+0xadc>
 801b04c:	f000 f914 	bl	801b278 <__multadd>
 801b050:	4607      	mov	r7, r0
 801b052:	4605      	mov	r5, r0
 801b054:	9b00      	ldr	r3, [sp, #0]
 801b056:	3301      	adds	r3, #1
 801b058:	9300      	str	r3, [sp, #0]
 801b05a:	e777      	b.n	801af4c <_dtoa_r+0x9cc>
 801b05c:	f000 f90c 	bl	801b278 <__multadd>
 801b060:	4629      	mov	r1, r5
 801b062:	4607      	mov	r7, r0
 801b064:	2300      	movs	r3, #0
 801b066:	220a      	movs	r2, #10
 801b068:	4648      	mov	r0, r9
 801b06a:	f000 f905 	bl	801b278 <__multadd>
 801b06e:	4605      	mov	r5, r0
 801b070:	e7f0      	b.n	801b054 <_dtoa_r+0xad4>
 801b072:	f1bb 0f00 	cmp.w	fp, #0
 801b076:	bfcc      	ite	gt
 801b078:	465e      	movgt	r6, fp
 801b07a:	2601      	movle	r6, #1
 801b07c:	4456      	add	r6, sl
 801b07e:	2700      	movs	r7, #0
 801b080:	9902      	ldr	r1, [sp, #8]
 801b082:	9300      	str	r3, [sp, #0]
 801b084:	2201      	movs	r2, #1
 801b086:	4648      	mov	r0, r9
 801b088:	f000 fa9a 	bl	801b5c0 <__lshift>
 801b08c:	4621      	mov	r1, r4
 801b08e:	9002      	str	r0, [sp, #8]
 801b090:	f000 fb02 	bl	801b698 <__mcmp>
 801b094:	2800      	cmp	r0, #0
 801b096:	dcb4      	bgt.n	801b002 <_dtoa_r+0xa82>
 801b098:	d102      	bne.n	801b0a0 <_dtoa_r+0xb20>
 801b09a:	9b00      	ldr	r3, [sp, #0]
 801b09c:	07db      	lsls	r3, r3, #31
 801b09e:	d4b0      	bmi.n	801b002 <_dtoa_r+0xa82>
 801b0a0:	4633      	mov	r3, r6
 801b0a2:	461e      	mov	r6, r3
 801b0a4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b0a8:	2a30      	cmp	r2, #48	@ 0x30
 801b0aa:	d0fa      	beq.n	801b0a2 <_dtoa_r+0xb22>
 801b0ac:	e4b5      	b.n	801aa1a <_dtoa_r+0x49a>
 801b0ae:	459a      	cmp	sl, r3
 801b0b0:	d1a8      	bne.n	801b004 <_dtoa_r+0xa84>
 801b0b2:	2331      	movs	r3, #49	@ 0x31
 801b0b4:	f108 0801 	add.w	r8, r8, #1
 801b0b8:	f88a 3000 	strb.w	r3, [sl]
 801b0bc:	e4ad      	b.n	801aa1a <_dtoa_r+0x49a>
 801b0be:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801b0c0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801b11c <_dtoa_r+0xb9c>
 801b0c4:	b11b      	cbz	r3, 801b0ce <_dtoa_r+0xb4e>
 801b0c6:	f10a 0308 	add.w	r3, sl, #8
 801b0ca:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801b0cc:	6013      	str	r3, [r2, #0]
 801b0ce:	4650      	mov	r0, sl
 801b0d0:	b017      	add	sp, #92	@ 0x5c
 801b0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0d6:	9b07      	ldr	r3, [sp, #28]
 801b0d8:	2b01      	cmp	r3, #1
 801b0da:	f77f ae2e 	ble.w	801ad3a <_dtoa_r+0x7ba>
 801b0de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b0e0:	9308      	str	r3, [sp, #32]
 801b0e2:	2001      	movs	r0, #1
 801b0e4:	e64d      	b.n	801ad82 <_dtoa_r+0x802>
 801b0e6:	f1bb 0f00 	cmp.w	fp, #0
 801b0ea:	f77f aed9 	ble.w	801aea0 <_dtoa_r+0x920>
 801b0ee:	4656      	mov	r6, sl
 801b0f0:	9802      	ldr	r0, [sp, #8]
 801b0f2:	4621      	mov	r1, r4
 801b0f4:	f7ff f9bb 	bl	801a46e <quorem>
 801b0f8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801b0fc:	f806 3b01 	strb.w	r3, [r6], #1
 801b100:	eba6 020a 	sub.w	r2, r6, sl
 801b104:	4593      	cmp	fp, r2
 801b106:	ddb4      	ble.n	801b072 <_dtoa_r+0xaf2>
 801b108:	9902      	ldr	r1, [sp, #8]
 801b10a:	2300      	movs	r3, #0
 801b10c:	220a      	movs	r2, #10
 801b10e:	4648      	mov	r0, r9
 801b110:	f000 f8b2 	bl	801b278 <__multadd>
 801b114:	9002      	str	r0, [sp, #8]
 801b116:	e7eb      	b.n	801b0f0 <_dtoa_r+0xb70>
 801b118:	0801d8c4 	.word	0x0801d8c4
 801b11c:	0801d848 	.word	0x0801d848

0801b120 <_free_r>:
 801b120:	b538      	push	{r3, r4, r5, lr}
 801b122:	4605      	mov	r5, r0
 801b124:	2900      	cmp	r1, #0
 801b126:	d041      	beq.n	801b1ac <_free_r+0x8c>
 801b128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b12c:	1f0c      	subs	r4, r1, #4
 801b12e:	2b00      	cmp	r3, #0
 801b130:	bfb8      	it	lt
 801b132:	18e4      	addlt	r4, r4, r3
 801b134:	f7fe fb02 	bl	801973c <__malloc_lock>
 801b138:	4a1d      	ldr	r2, [pc, #116]	@ (801b1b0 <_free_r+0x90>)
 801b13a:	6813      	ldr	r3, [r2, #0]
 801b13c:	b933      	cbnz	r3, 801b14c <_free_r+0x2c>
 801b13e:	6063      	str	r3, [r4, #4]
 801b140:	6014      	str	r4, [r2, #0]
 801b142:	4628      	mov	r0, r5
 801b144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b148:	f7fe bafe 	b.w	8019748 <__malloc_unlock>
 801b14c:	42a3      	cmp	r3, r4
 801b14e:	d908      	bls.n	801b162 <_free_r+0x42>
 801b150:	6820      	ldr	r0, [r4, #0]
 801b152:	1821      	adds	r1, r4, r0
 801b154:	428b      	cmp	r3, r1
 801b156:	bf01      	itttt	eq
 801b158:	6819      	ldreq	r1, [r3, #0]
 801b15a:	685b      	ldreq	r3, [r3, #4]
 801b15c:	1809      	addeq	r1, r1, r0
 801b15e:	6021      	streq	r1, [r4, #0]
 801b160:	e7ed      	b.n	801b13e <_free_r+0x1e>
 801b162:	461a      	mov	r2, r3
 801b164:	685b      	ldr	r3, [r3, #4]
 801b166:	b10b      	cbz	r3, 801b16c <_free_r+0x4c>
 801b168:	42a3      	cmp	r3, r4
 801b16a:	d9fa      	bls.n	801b162 <_free_r+0x42>
 801b16c:	6811      	ldr	r1, [r2, #0]
 801b16e:	1850      	adds	r0, r2, r1
 801b170:	42a0      	cmp	r0, r4
 801b172:	d10b      	bne.n	801b18c <_free_r+0x6c>
 801b174:	6820      	ldr	r0, [r4, #0]
 801b176:	4401      	add	r1, r0
 801b178:	1850      	adds	r0, r2, r1
 801b17a:	4283      	cmp	r3, r0
 801b17c:	6011      	str	r1, [r2, #0]
 801b17e:	d1e0      	bne.n	801b142 <_free_r+0x22>
 801b180:	6818      	ldr	r0, [r3, #0]
 801b182:	685b      	ldr	r3, [r3, #4]
 801b184:	6053      	str	r3, [r2, #4]
 801b186:	4408      	add	r0, r1
 801b188:	6010      	str	r0, [r2, #0]
 801b18a:	e7da      	b.n	801b142 <_free_r+0x22>
 801b18c:	d902      	bls.n	801b194 <_free_r+0x74>
 801b18e:	230c      	movs	r3, #12
 801b190:	602b      	str	r3, [r5, #0]
 801b192:	e7d6      	b.n	801b142 <_free_r+0x22>
 801b194:	6820      	ldr	r0, [r4, #0]
 801b196:	1821      	adds	r1, r4, r0
 801b198:	428b      	cmp	r3, r1
 801b19a:	bf04      	itt	eq
 801b19c:	6819      	ldreq	r1, [r3, #0]
 801b19e:	685b      	ldreq	r3, [r3, #4]
 801b1a0:	6063      	str	r3, [r4, #4]
 801b1a2:	bf04      	itt	eq
 801b1a4:	1809      	addeq	r1, r1, r0
 801b1a6:	6021      	streq	r1, [r4, #0]
 801b1a8:	6054      	str	r4, [r2, #4]
 801b1aa:	e7ca      	b.n	801b142 <_free_r+0x22>
 801b1ac:	bd38      	pop	{r3, r4, r5, pc}
 801b1ae:	bf00      	nop
 801b1b0:	20002668 	.word	0x20002668

0801b1b4 <_Balloc>:
 801b1b4:	b570      	push	{r4, r5, r6, lr}
 801b1b6:	69c6      	ldr	r6, [r0, #28]
 801b1b8:	4604      	mov	r4, r0
 801b1ba:	460d      	mov	r5, r1
 801b1bc:	b976      	cbnz	r6, 801b1dc <_Balloc+0x28>
 801b1be:	2010      	movs	r0, #16
 801b1c0:	f7fe fa0a 	bl	80195d8 <malloc>
 801b1c4:	4602      	mov	r2, r0
 801b1c6:	61e0      	str	r0, [r4, #28]
 801b1c8:	b920      	cbnz	r0, 801b1d4 <_Balloc+0x20>
 801b1ca:	4b18      	ldr	r3, [pc, #96]	@ (801b22c <_Balloc+0x78>)
 801b1cc:	4818      	ldr	r0, [pc, #96]	@ (801b230 <_Balloc+0x7c>)
 801b1ce:	216b      	movs	r1, #107	@ 0x6b
 801b1d0:	f000 ff44 	bl	801c05c <__assert_func>
 801b1d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b1d8:	6006      	str	r6, [r0, #0]
 801b1da:	60c6      	str	r6, [r0, #12]
 801b1dc:	69e6      	ldr	r6, [r4, #28]
 801b1de:	68f3      	ldr	r3, [r6, #12]
 801b1e0:	b183      	cbz	r3, 801b204 <_Balloc+0x50>
 801b1e2:	69e3      	ldr	r3, [r4, #28]
 801b1e4:	68db      	ldr	r3, [r3, #12]
 801b1e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b1ea:	b9b8      	cbnz	r0, 801b21c <_Balloc+0x68>
 801b1ec:	2101      	movs	r1, #1
 801b1ee:	fa01 f605 	lsl.w	r6, r1, r5
 801b1f2:	1d72      	adds	r2, r6, #5
 801b1f4:	0092      	lsls	r2, r2, #2
 801b1f6:	4620      	mov	r0, r4
 801b1f8:	f000 ff4e 	bl	801c098 <_calloc_r>
 801b1fc:	b160      	cbz	r0, 801b218 <_Balloc+0x64>
 801b1fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b202:	e00e      	b.n	801b222 <_Balloc+0x6e>
 801b204:	2221      	movs	r2, #33	@ 0x21
 801b206:	2104      	movs	r1, #4
 801b208:	4620      	mov	r0, r4
 801b20a:	f000 ff45 	bl	801c098 <_calloc_r>
 801b20e:	69e3      	ldr	r3, [r4, #28]
 801b210:	60f0      	str	r0, [r6, #12]
 801b212:	68db      	ldr	r3, [r3, #12]
 801b214:	2b00      	cmp	r3, #0
 801b216:	d1e4      	bne.n	801b1e2 <_Balloc+0x2e>
 801b218:	2000      	movs	r0, #0
 801b21a:	bd70      	pop	{r4, r5, r6, pc}
 801b21c:	6802      	ldr	r2, [r0, #0]
 801b21e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b222:	2300      	movs	r3, #0
 801b224:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b228:	e7f7      	b.n	801b21a <_Balloc+0x66>
 801b22a:	bf00      	nop
 801b22c:	0801d855 	.word	0x0801d855
 801b230:	0801d8d5 	.word	0x0801d8d5

0801b234 <_Bfree>:
 801b234:	b570      	push	{r4, r5, r6, lr}
 801b236:	69c6      	ldr	r6, [r0, #28]
 801b238:	4605      	mov	r5, r0
 801b23a:	460c      	mov	r4, r1
 801b23c:	b976      	cbnz	r6, 801b25c <_Bfree+0x28>
 801b23e:	2010      	movs	r0, #16
 801b240:	f7fe f9ca 	bl	80195d8 <malloc>
 801b244:	4602      	mov	r2, r0
 801b246:	61e8      	str	r0, [r5, #28]
 801b248:	b920      	cbnz	r0, 801b254 <_Bfree+0x20>
 801b24a:	4b09      	ldr	r3, [pc, #36]	@ (801b270 <_Bfree+0x3c>)
 801b24c:	4809      	ldr	r0, [pc, #36]	@ (801b274 <_Bfree+0x40>)
 801b24e:	218f      	movs	r1, #143	@ 0x8f
 801b250:	f000 ff04 	bl	801c05c <__assert_func>
 801b254:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b258:	6006      	str	r6, [r0, #0]
 801b25a:	60c6      	str	r6, [r0, #12]
 801b25c:	b13c      	cbz	r4, 801b26e <_Bfree+0x3a>
 801b25e:	69eb      	ldr	r3, [r5, #28]
 801b260:	6862      	ldr	r2, [r4, #4]
 801b262:	68db      	ldr	r3, [r3, #12]
 801b264:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b268:	6021      	str	r1, [r4, #0]
 801b26a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b26e:	bd70      	pop	{r4, r5, r6, pc}
 801b270:	0801d855 	.word	0x0801d855
 801b274:	0801d8d5 	.word	0x0801d8d5

0801b278 <__multadd>:
 801b278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b27c:	690d      	ldr	r5, [r1, #16]
 801b27e:	4607      	mov	r7, r0
 801b280:	460c      	mov	r4, r1
 801b282:	461e      	mov	r6, r3
 801b284:	f101 0c14 	add.w	ip, r1, #20
 801b288:	2000      	movs	r0, #0
 801b28a:	f8dc 3000 	ldr.w	r3, [ip]
 801b28e:	b299      	uxth	r1, r3
 801b290:	fb02 6101 	mla	r1, r2, r1, r6
 801b294:	0c1e      	lsrs	r6, r3, #16
 801b296:	0c0b      	lsrs	r3, r1, #16
 801b298:	fb02 3306 	mla	r3, r2, r6, r3
 801b29c:	b289      	uxth	r1, r1
 801b29e:	3001      	adds	r0, #1
 801b2a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b2a4:	4285      	cmp	r5, r0
 801b2a6:	f84c 1b04 	str.w	r1, [ip], #4
 801b2aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b2ae:	dcec      	bgt.n	801b28a <__multadd+0x12>
 801b2b0:	b30e      	cbz	r6, 801b2f6 <__multadd+0x7e>
 801b2b2:	68a3      	ldr	r3, [r4, #8]
 801b2b4:	42ab      	cmp	r3, r5
 801b2b6:	dc19      	bgt.n	801b2ec <__multadd+0x74>
 801b2b8:	6861      	ldr	r1, [r4, #4]
 801b2ba:	4638      	mov	r0, r7
 801b2bc:	3101      	adds	r1, #1
 801b2be:	f7ff ff79 	bl	801b1b4 <_Balloc>
 801b2c2:	4680      	mov	r8, r0
 801b2c4:	b928      	cbnz	r0, 801b2d2 <__multadd+0x5a>
 801b2c6:	4602      	mov	r2, r0
 801b2c8:	4b0c      	ldr	r3, [pc, #48]	@ (801b2fc <__multadd+0x84>)
 801b2ca:	480d      	ldr	r0, [pc, #52]	@ (801b300 <__multadd+0x88>)
 801b2cc:	21ba      	movs	r1, #186	@ 0xba
 801b2ce:	f000 fec5 	bl	801c05c <__assert_func>
 801b2d2:	6922      	ldr	r2, [r4, #16]
 801b2d4:	3202      	adds	r2, #2
 801b2d6:	f104 010c 	add.w	r1, r4, #12
 801b2da:	0092      	lsls	r2, r2, #2
 801b2dc:	300c      	adds	r0, #12
 801b2de:	f7ff f8b8 	bl	801a452 <memcpy>
 801b2e2:	4621      	mov	r1, r4
 801b2e4:	4638      	mov	r0, r7
 801b2e6:	f7ff ffa5 	bl	801b234 <_Bfree>
 801b2ea:	4644      	mov	r4, r8
 801b2ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b2f0:	3501      	adds	r5, #1
 801b2f2:	615e      	str	r6, [r3, #20]
 801b2f4:	6125      	str	r5, [r4, #16]
 801b2f6:	4620      	mov	r0, r4
 801b2f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b2fc:	0801d8c4 	.word	0x0801d8c4
 801b300:	0801d8d5 	.word	0x0801d8d5

0801b304 <__hi0bits>:
 801b304:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801b308:	4603      	mov	r3, r0
 801b30a:	bf36      	itet	cc
 801b30c:	0403      	lslcc	r3, r0, #16
 801b30e:	2000      	movcs	r0, #0
 801b310:	2010      	movcc	r0, #16
 801b312:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801b316:	bf3c      	itt	cc
 801b318:	021b      	lslcc	r3, r3, #8
 801b31a:	3008      	addcc	r0, #8
 801b31c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801b320:	bf3c      	itt	cc
 801b322:	011b      	lslcc	r3, r3, #4
 801b324:	3004      	addcc	r0, #4
 801b326:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b32a:	bf3c      	itt	cc
 801b32c:	009b      	lslcc	r3, r3, #2
 801b32e:	3002      	addcc	r0, #2
 801b330:	2b00      	cmp	r3, #0
 801b332:	db05      	blt.n	801b340 <__hi0bits+0x3c>
 801b334:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801b338:	f100 0001 	add.w	r0, r0, #1
 801b33c:	bf08      	it	eq
 801b33e:	2020      	moveq	r0, #32
 801b340:	4770      	bx	lr

0801b342 <__lo0bits>:
 801b342:	6803      	ldr	r3, [r0, #0]
 801b344:	4602      	mov	r2, r0
 801b346:	f013 0007 	ands.w	r0, r3, #7
 801b34a:	d00b      	beq.n	801b364 <__lo0bits+0x22>
 801b34c:	07d9      	lsls	r1, r3, #31
 801b34e:	d421      	bmi.n	801b394 <__lo0bits+0x52>
 801b350:	0798      	lsls	r0, r3, #30
 801b352:	bf49      	itett	mi
 801b354:	085b      	lsrmi	r3, r3, #1
 801b356:	089b      	lsrpl	r3, r3, #2
 801b358:	2001      	movmi	r0, #1
 801b35a:	6013      	strmi	r3, [r2, #0]
 801b35c:	bf5c      	itt	pl
 801b35e:	6013      	strpl	r3, [r2, #0]
 801b360:	2002      	movpl	r0, #2
 801b362:	4770      	bx	lr
 801b364:	b299      	uxth	r1, r3
 801b366:	b909      	cbnz	r1, 801b36c <__lo0bits+0x2a>
 801b368:	0c1b      	lsrs	r3, r3, #16
 801b36a:	2010      	movs	r0, #16
 801b36c:	b2d9      	uxtb	r1, r3
 801b36e:	b909      	cbnz	r1, 801b374 <__lo0bits+0x32>
 801b370:	3008      	adds	r0, #8
 801b372:	0a1b      	lsrs	r3, r3, #8
 801b374:	0719      	lsls	r1, r3, #28
 801b376:	bf04      	itt	eq
 801b378:	091b      	lsreq	r3, r3, #4
 801b37a:	3004      	addeq	r0, #4
 801b37c:	0799      	lsls	r1, r3, #30
 801b37e:	bf04      	itt	eq
 801b380:	089b      	lsreq	r3, r3, #2
 801b382:	3002      	addeq	r0, #2
 801b384:	07d9      	lsls	r1, r3, #31
 801b386:	d403      	bmi.n	801b390 <__lo0bits+0x4e>
 801b388:	085b      	lsrs	r3, r3, #1
 801b38a:	f100 0001 	add.w	r0, r0, #1
 801b38e:	d003      	beq.n	801b398 <__lo0bits+0x56>
 801b390:	6013      	str	r3, [r2, #0]
 801b392:	4770      	bx	lr
 801b394:	2000      	movs	r0, #0
 801b396:	4770      	bx	lr
 801b398:	2020      	movs	r0, #32
 801b39a:	4770      	bx	lr

0801b39c <__i2b>:
 801b39c:	b510      	push	{r4, lr}
 801b39e:	460c      	mov	r4, r1
 801b3a0:	2101      	movs	r1, #1
 801b3a2:	f7ff ff07 	bl	801b1b4 <_Balloc>
 801b3a6:	4602      	mov	r2, r0
 801b3a8:	b928      	cbnz	r0, 801b3b6 <__i2b+0x1a>
 801b3aa:	4b05      	ldr	r3, [pc, #20]	@ (801b3c0 <__i2b+0x24>)
 801b3ac:	4805      	ldr	r0, [pc, #20]	@ (801b3c4 <__i2b+0x28>)
 801b3ae:	f240 1145 	movw	r1, #325	@ 0x145
 801b3b2:	f000 fe53 	bl	801c05c <__assert_func>
 801b3b6:	2301      	movs	r3, #1
 801b3b8:	6144      	str	r4, [r0, #20]
 801b3ba:	6103      	str	r3, [r0, #16]
 801b3bc:	bd10      	pop	{r4, pc}
 801b3be:	bf00      	nop
 801b3c0:	0801d8c4 	.word	0x0801d8c4
 801b3c4:	0801d8d5 	.word	0x0801d8d5

0801b3c8 <__multiply>:
 801b3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3cc:	4617      	mov	r7, r2
 801b3ce:	690a      	ldr	r2, [r1, #16]
 801b3d0:	693b      	ldr	r3, [r7, #16]
 801b3d2:	429a      	cmp	r2, r3
 801b3d4:	bfa8      	it	ge
 801b3d6:	463b      	movge	r3, r7
 801b3d8:	4689      	mov	r9, r1
 801b3da:	bfa4      	itt	ge
 801b3dc:	460f      	movge	r7, r1
 801b3de:	4699      	movge	r9, r3
 801b3e0:	693d      	ldr	r5, [r7, #16]
 801b3e2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801b3e6:	68bb      	ldr	r3, [r7, #8]
 801b3e8:	6879      	ldr	r1, [r7, #4]
 801b3ea:	eb05 060a 	add.w	r6, r5, sl
 801b3ee:	42b3      	cmp	r3, r6
 801b3f0:	b085      	sub	sp, #20
 801b3f2:	bfb8      	it	lt
 801b3f4:	3101      	addlt	r1, #1
 801b3f6:	f7ff fedd 	bl	801b1b4 <_Balloc>
 801b3fa:	b930      	cbnz	r0, 801b40a <__multiply+0x42>
 801b3fc:	4602      	mov	r2, r0
 801b3fe:	4b41      	ldr	r3, [pc, #260]	@ (801b504 <__multiply+0x13c>)
 801b400:	4841      	ldr	r0, [pc, #260]	@ (801b508 <__multiply+0x140>)
 801b402:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801b406:	f000 fe29 	bl	801c05c <__assert_func>
 801b40a:	f100 0414 	add.w	r4, r0, #20
 801b40e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801b412:	4623      	mov	r3, r4
 801b414:	2200      	movs	r2, #0
 801b416:	4573      	cmp	r3, lr
 801b418:	d320      	bcc.n	801b45c <__multiply+0x94>
 801b41a:	f107 0814 	add.w	r8, r7, #20
 801b41e:	f109 0114 	add.w	r1, r9, #20
 801b422:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801b426:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801b42a:	9302      	str	r3, [sp, #8]
 801b42c:	1beb      	subs	r3, r5, r7
 801b42e:	3b15      	subs	r3, #21
 801b430:	f023 0303 	bic.w	r3, r3, #3
 801b434:	3304      	adds	r3, #4
 801b436:	3715      	adds	r7, #21
 801b438:	42bd      	cmp	r5, r7
 801b43a:	bf38      	it	cc
 801b43c:	2304      	movcc	r3, #4
 801b43e:	9301      	str	r3, [sp, #4]
 801b440:	9b02      	ldr	r3, [sp, #8]
 801b442:	9103      	str	r1, [sp, #12]
 801b444:	428b      	cmp	r3, r1
 801b446:	d80c      	bhi.n	801b462 <__multiply+0x9a>
 801b448:	2e00      	cmp	r6, #0
 801b44a:	dd03      	ble.n	801b454 <__multiply+0x8c>
 801b44c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801b450:	2b00      	cmp	r3, #0
 801b452:	d055      	beq.n	801b500 <__multiply+0x138>
 801b454:	6106      	str	r6, [r0, #16]
 801b456:	b005      	add	sp, #20
 801b458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b45c:	f843 2b04 	str.w	r2, [r3], #4
 801b460:	e7d9      	b.n	801b416 <__multiply+0x4e>
 801b462:	f8b1 a000 	ldrh.w	sl, [r1]
 801b466:	f1ba 0f00 	cmp.w	sl, #0
 801b46a:	d01f      	beq.n	801b4ac <__multiply+0xe4>
 801b46c:	46c4      	mov	ip, r8
 801b46e:	46a1      	mov	r9, r4
 801b470:	2700      	movs	r7, #0
 801b472:	f85c 2b04 	ldr.w	r2, [ip], #4
 801b476:	f8d9 3000 	ldr.w	r3, [r9]
 801b47a:	fa1f fb82 	uxth.w	fp, r2
 801b47e:	b29b      	uxth	r3, r3
 801b480:	fb0a 330b 	mla	r3, sl, fp, r3
 801b484:	443b      	add	r3, r7
 801b486:	f8d9 7000 	ldr.w	r7, [r9]
 801b48a:	0c12      	lsrs	r2, r2, #16
 801b48c:	0c3f      	lsrs	r7, r7, #16
 801b48e:	fb0a 7202 	mla	r2, sl, r2, r7
 801b492:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801b496:	b29b      	uxth	r3, r3
 801b498:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b49c:	4565      	cmp	r5, ip
 801b49e:	f849 3b04 	str.w	r3, [r9], #4
 801b4a2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801b4a6:	d8e4      	bhi.n	801b472 <__multiply+0xaa>
 801b4a8:	9b01      	ldr	r3, [sp, #4]
 801b4aa:	50e7      	str	r7, [r4, r3]
 801b4ac:	9b03      	ldr	r3, [sp, #12]
 801b4ae:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801b4b2:	3104      	adds	r1, #4
 801b4b4:	f1b9 0f00 	cmp.w	r9, #0
 801b4b8:	d020      	beq.n	801b4fc <__multiply+0x134>
 801b4ba:	6823      	ldr	r3, [r4, #0]
 801b4bc:	4647      	mov	r7, r8
 801b4be:	46a4      	mov	ip, r4
 801b4c0:	f04f 0a00 	mov.w	sl, #0
 801b4c4:	f8b7 b000 	ldrh.w	fp, [r7]
 801b4c8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801b4cc:	fb09 220b 	mla	r2, r9, fp, r2
 801b4d0:	4452      	add	r2, sl
 801b4d2:	b29b      	uxth	r3, r3
 801b4d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b4d8:	f84c 3b04 	str.w	r3, [ip], #4
 801b4dc:	f857 3b04 	ldr.w	r3, [r7], #4
 801b4e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b4e4:	f8bc 3000 	ldrh.w	r3, [ip]
 801b4e8:	fb09 330a 	mla	r3, r9, sl, r3
 801b4ec:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801b4f0:	42bd      	cmp	r5, r7
 801b4f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b4f6:	d8e5      	bhi.n	801b4c4 <__multiply+0xfc>
 801b4f8:	9a01      	ldr	r2, [sp, #4]
 801b4fa:	50a3      	str	r3, [r4, r2]
 801b4fc:	3404      	adds	r4, #4
 801b4fe:	e79f      	b.n	801b440 <__multiply+0x78>
 801b500:	3e01      	subs	r6, #1
 801b502:	e7a1      	b.n	801b448 <__multiply+0x80>
 801b504:	0801d8c4 	.word	0x0801d8c4
 801b508:	0801d8d5 	.word	0x0801d8d5

0801b50c <__pow5mult>:
 801b50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b510:	4615      	mov	r5, r2
 801b512:	f012 0203 	ands.w	r2, r2, #3
 801b516:	4607      	mov	r7, r0
 801b518:	460e      	mov	r6, r1
 801b51a:	d007      	beq.n	801b52c <__pow5mult+0x20>
 801b51c:	4c25      	ldr	r4, [pc, #148]	@ (801b5b4 <__pow5mult+0xa8>)
 801b51e:	3a01      	subs	r2, #1
 801b520:	2300      	movs	r3, #0
 801b522:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b526:	f7ff fea7 	bl	801b278 <__multadd>
 801b52a:	4606      	mov	r6, r0
 801b52c:	10ad      	asrs	r5, r5, #2
 801b52e:	d03d      	beq.n	801b5ac <__pow5mult+0xa0>
 801b530:	69fc      	ldr	r4, [r7, #28]
 801b532:	b97c      	cbnz	r4, 801b554 <__pow5mult+0x48>
 801b534:	2010      	movs	r0, #16
 801b536:	f7fe f84f 	bl	80195d8 <malloc>
 801b53a:	4602      	mov	r2, r0
 801b53c:	61f8      	str	r0, [r7, #28]
 801b53e:	b928      	cbnz	r0, 801b54c <__pow5mult+0x40>
 801b540:	4b1d      	ldr	r3, [pc, #116]	@ (801b5b8 <__pow5mult+0xac>)
 801b542:	481e      	ldr	r0, [pc, #120]	@ (801b5bc <__pow5mult+0xb0>)
 801b544:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801b548:	f000 fd88 	bl	801c05c <__assert_func>
 801b54c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b550:	6004      	str	r4, [r0, #0]
 801b552:	60c4      	str	r4, [r0, #12]
 801b554:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801b558:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b55c:	b94c      	cbnz	r4, 801b572 <__pow5mult+0x66>
 801b55e:	f240 2171 	movw	r1, #625	@ 0x271
 801b562:	4638      	mov	r0, r7
 801b564:	f7ff ff1a 	bl	801b39c <__i2b>
 801b568:	2300      	movs	r3, #0
 801b56a:	f8c8 0008 	str.w	r0, [r8, #8]
 801b56e:	4604      	mov	r4, r0
 801b570:	6003      	str	r3, [r0, #0]
 801b572:	f04f 0900 	mov.w	r9, #0
 801b576:	07eb      	lsls	r3, r5, #31
 801b578:	d50a      	bpl.n	801b590 <__pow5mult+0x84>
 801b57a:	4631      	mov	r1, r6
 801b57c:	4622      	mov	r2, r4
 801b57e:	4638      	mov	r0, r7
 801b580:	f7ff ff22 	bl	801b3c8 <__multiply>
 801b584:	4631      	mov	r1, r6
 801b586:	4680      	mov	r8, r0
 801b588:	4638      	mov	r0, r7
 801b58a:	f7ff fe53 	bl	801b234 <_Bfree>
 801b58e:	4646      	mov	r6, r8
 801b590:	106d      	asrs	r5, r5, #1
 801b592:	d00b      	beq.n	801b5ac <__pow5mult+0xa0>
 801b594:	6820      	ldr	r0, [r4, #0]
 801b596:	b938      	cbnz	r0, 801b5a8 <__pow5mult+0x9c>
 801b598:	4622      	mov	r2, r4
 801b59a:	4621      	mov	r1, r4
 801b59c:	4638      	mov	r0, r7
 801b59e:	f7ff ff13 	bl	801b3c8 <__multiply>
 801b5a2:	6020      	str	r0, [r4, #0]
 801b5a4:	f8c0 9000 	str.w	r9, [r0]
 801b5a8:	4604      	mov	r4, r0
 801b5aa:	e7e4      	b.n	801b576 <__pow5mult+0x6a>
 801b5ac:	4630      	mov	r0, r6
 801b5ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b5b2:	bf00      	nop
 801b5b4:	0801d988 	.word	0x0801d988
 801b5b8:	0801d855 	.word	0x0801d855
 801b5bc:	0801d8d5 	.word	0x0801d8d5

0801b5c0 <__lshift>:
 801b5c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b5c4:	460c      	mov	r4, r1
 801b5c6:	6849      	ldr	r1, [r1, #4]
 801b5c8:	6923      	ldr	r3, [r4, #16]
 801b5ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b5ce:	68a3      	ldr	r3, [r4, #8]
 801b5d0:	4607      	mov	r7, r0
 801b5d2:	4691      	mov	r9, r2
 801b5d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b5d8:	f108 0601 	add.w	r6, r8, #1
 801b5dc:	42b3      	cmp	r3, r6
 801b5de:	db0b      	blt.n	801b5f8 <__lshift+0x38>
 801b5e0:	4638      	mov	r0, r7
 801b5e2:	f7ff fde7 	bl	801b1b4 <_Balloc>
 801b5e6:	4605      	mov	r5, r0
 801b5e8:	b948      	cbnz	r0, 801b5fe <__lshift+0x3e>
 801b5ea:	4602      	mov	r2, r0
 801b5ec:	4b28      	ldr	r3, [pc, #160]	@ (801b690 <__lshift+0xd0>)
 801b5ee:	4829      	ldr	r0, [pc, #164]	@ (801b694 <__lshift+0xd4>)
 801b5f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801b5f4:	f000 fd32 	bl	801c05c <__assert_func>
 801b5f8:	3101      	adds	r1, #1
 801b5fa:	005b      	lsls	r3, r3, #1
 801b5fc:	e7ee      	b.n	801b5dc <__lshift+0x1c>
 801b5fe:	2300      	movs	r3, #0
 801b600:	f100 0114 	add.w	r1, r0, #20
 801b604:	f100 0210 	add.w	r2, r0, #16
 801b608:	4618      	mov	r0, r3
 801b60a:	4553      	cmp	r3, sl
 801b60c:	db33      	blt.n	801b676 <__lshift+0xb6>
 801b60e:	6920      	ldr	r0, [r4, #16]
 801b610:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b614:	f104 0314 	add.w	r3, r4, #20
 801b618:	f019 091f 	ands.w	r9, r9, #31
 801b61c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b620:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801b624:	d02b      	beq.n	801b67e <__lshift+0xbe>
 801b626:	f1c9 0e20 	rsb	lr, r9, #32
 801b62a:	468a      	mov	sl, r1
 801b62c:	2200      	movs	r2, #0
 801b62e:	6818      	ldr	r0, [r3, #0]
 801b630:	fa00 f009 	lsl.w	r0, r0, r9
 801b634:	4310      	orrs	r0, r2
 801b636:	f84a 0b04 	str.w	r0, [sl], #4
 801b63a:	f853 2b04 	ldr.w	r2, [r3], #4
 801b63e:	459c      	cmp	ip, r3
 801b640:	fa22 f20e 	lsr.w	r2, r2, lr
 801b644:	d8f3      	bhi.n	801b62e <__lshift+0x6e>
 801b646:	ebac 0304 	sub.w	r3, ip, r4
 801b64a:	3b15      	subs	r3, #21
 801b64c:	f023 0303 	bic.w	r3, r3, #3
 801b650:	3304      	adds	r3, #4
 801b652:	f104 0015 	add.w	r0, r4, #21
 801b656:	4560      	cmp	r0, ip
 801b658:	bf88      	it	hi
 801b65a:	2304      	movhi	r3, #4
 801b65c:	50ca      	str	r2, [r1, r3]
 801b65e:	b10a      	cbz	r2, 801b664 <__lshift+0xa4>
 801b660:	f108 0602 	add.w	r6, r8, #2
 801b664:	3e01      	subs	r6, #1
 801b666:	4638      	mov	r0, r7
 801b668:	612e      	str	r6, [r5, #16]
 801b66a:	4621      	mov	r1, r4
 801b66c:	f7ff fde2 	bl	801b234 <_Bfree>
 801b670:	4628      	mov	r0, r5
 801b672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b676:	f842 0f04 	str.w	r0, [r2, #4]!
 801b67a:	3301      	adds	r3, #1
 801b67c:	e7c5      	b.n	801b60a <__lshift+0x4a>
 801b67e:	3904      	subs	r1, #4
 801b680:	f853 2b04 	ldr.w	r2, [r3], #4
 801b684:	f841 2f04 	str.w	r2, [r1, #4]!
 801b688:	459c      	cmp	ip, r3
 801b68a:	d8f9      	bhi.n	801b680 <__lshift+0xc0>
 801b68c:	e7ea      	b.n	801b664 <__lshift+0xa4>
 801b68e:	bf00      	nop
 801b690:	0801d8c4 	.word	0x0801d8c4
 801b694:	0801d8d5 	.word	0x0801d8d5

0801b698 <__mcmp>:
 801b698:	690a      	ldr	r2, [r1, #16]
 801b69a:	4603      	mov	r3, r0
 801b69c:	6900      	ldr	r0, [r0, #16]
 801b69e:	1a80      	subs	r0, r0, r2
 801b6a0:	b530      	push	{r4, r5, lr}
 801b6a2:	d10e      	bne.n	801b6c2 <__mcmp+0x2a>
 801b6a4:	3314      	adds	r3, #20
 801b6a6:	3114      	adds	r1, #20
 801b6a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801b6ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801b6b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801b6b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801b6b8:	4295      	cmp	r5, r2
 801b6ba:	d003      	beq.n	801b6c4 <__mcmp+0x2c>
 801b6bc:	d205      	bcs.n	801b6ca <__mcmp+0x32>
 801b6be:	f04f 30ff 	mov.w	r0, #4294967295
 801b6c2:	bd30      	pop	{r4, r5, pc}
 801b6c4:	42a3      	cmp	r3, r4
 801b6c6:	d3f3      	bcc.n	801b6b0 <__mcmp+0x18>
 801b6c8:	e7fb      	b.n	801b6c2 <__mcmp+0x2a>
 801b6ca:	2001      	movs	r0, #1
 801b6cc:	e7f9      	b.n	801b6c2 <__mcmp+0x2a>
	...

0801b6d0 <__mdiff>:
 801b6d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6d4:	4689      	mov	r9, r1
 801b6d6:	4606      	mov	r6, r0
 801b6d8:	4611      	mov	r1, r2
 801b6da:	4648      	mov	r0, r9
 801b6dc:	4614      	mov	r4, r2
 801b6de:	f7ff ffdb 	bl	801b698 <__mcmp>
 801b6e2:	1e05      	subs	r5, r0, #0
 801b6e4:	d112      	bne.n	801b70c <__mdiff+0x3c>
 801b6e6:	4629      	mov	r1, r5
 801b6e8:	4630      	mov	r0, r6
 801b6ea:	f7ff fd63 	bl	801b1b4 <_Balloc>
 801b6ee:	4602      	mov	r2, r0
 801b6f0:	b928      	cbnz	r0, 801b6fe <__mdiff+0x2e>
 801b6f2:	4b3f      	ldr	r3, [pc, #252]	@ (801b7f0 <__mdiff+0x120>)
 801b6f4:	f240 2137 	movw	r1, #567	@ 0x237
 801b6f8:	483e      	ldr	r0, [pc, #248]	@ (801b7f4 <__mdiff+0x124>)
 801b6fa:	f000 fcaf 	bl	801c05c <__assert_func>
 801b6fe:	2301      	movs	r3, #1
 801b700:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801b704:	4610      	mov	r0, r2
 801b706:	b003      	add	sp, #12
 801b708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b70c:	bfbc      	itt	lt
 801b70e:	464b      	movlt	r3, r9
 801b710:	46a1      	movlt	r9, r4
 801b712:	4630      	mov	r0, r6
 801b714:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801b718:	bfba      	itte	lt
 801b71a:	461c      	movlt	r4, r3
 801b71c:	2501      	movlt	r5, #1
 801b71e:	2500      	movge	r5, #0
 801b720:	f7ff fd48 	bl	801b1b4 <_Balloc>
 801b724:	4602      	mov	r2, r0
 801b726:	b918      	cbnz	r0, 801b730 <__mdiff+0x60>
 801b728:	4b31      	ldr	r3, [pc, #196]	@ (801b7f0 <__mdiff+0x120>)
 801b72a:	f240 2145 	movw	r1, #581	@ 0x245
 801b72e:	e7e3      	b.n	801b6f8 <__mdiff+0x28>
 801b730:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801b734:	6926      	ldr	r6, [r4, #16]
 801b736:	60c5      	str	r5, [r0, #12]
 801b738:	f109 0310 	add.w	r3, r9, #16
 801b73c:	f109 0514 	add.w	r5, r9, #20
 801b740:	f104 0e14 	add.w	lr, r4, #20
 801b744:	f100 0b14 	add.w	fp, r0, #20
 801b748:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801b74c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801b750:	9301      	str	r3, [sp, #4]
 801b752:	46d9      	mov	r9, fp
 801b754:	f04f 0c00 	mov.w	ip, #0
 801b758:	9b01      	ldr	r3, [sp, #4]
 801b75a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801b75e:	f853 af04 	ldr.w	sl, [r3, #4]!
 801b762:	9301      	str	r3, [sp, #4]
 801b764:	fa1f f38a 	uxth.w	r3, sl
 801b768:	4619      	mov	r1, r3
 801b76a:	b283      	uxth	r3, r0
 801b76c:	1acb      	subs	r3, r1, r3
 801b76e:	0c00      	lsrs	r0, r0, #16
 801b770:	4463      	add	r3, ip
 801b772:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801b776:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801b77a:	b29b      	uxth	r3, r3
 801b77c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801b780:	4576      	cmp	r6, lr
 801b782:	f849 3b04 	str.w	r3, [r9], #4
 801b786:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801b78a:	d8e5      	bhi.n	801b758 <__mdiff+0x88>
 801b78c:	1b33      	subs	r3, r6, r4
 801b78e:	3b15      	subs	r3, #21
 801b790:	f023 0303 	bic.w	r3, r3, #3
 801b794:	3415      	adds	r4, #21
 801b796:	3304      	adds	r3, #4
 801b798:	42a6      	cmp	r6, r4
 801b79a:	bf38      	it	cc
 801b79c:	2304      	movcc	r3, #4
 801b79e:	441d      	add	r5, r3
 801b7a0:	445b      	add	r3, fp
 801b7a2:	461e      	mov	r6, r3
 801b7a4:	462c      	mov	r4, r5
 801b7a6:	4544      	cmp	r4, r8
 801b7a8:	d30e      	bcc.n	801b7c8 <__mdiff+0xf8>
 801b7aa:	f108 0103 	add.w	r1, r8, #3
 801b7ae:	1b49      	subs	r1, r1, r5
 801b7b0:	f021 0103 	bic.w	r1, r1, #3
 801b7b4:	3d03      	subs	r5, #3
 801b7b6:	45a8      	cmp	r8, r5
 801b7b8:	bf38      	it	cc
 801b7ba:	2100      	movcc	r1, #0
 801b7bc:	440b      	add	r3, r1
 801b7be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801b7c2:	b191      	cbz	r1, 801b7ea <__mdiff+0x11a>
 801b7c4:	6117      	str	r7, [r2, #16]
 801b7c6:	e79d      	b.n	801b704 <__mdiff+0x34>
 801b7c8:	f854 1b04 	ldr.w	r1, [r4], #4
 801b7cc:	46e6      	mov	lr, ip
 801b7ce:	0c08      	lsrs	r0, r1, #16
 801b7d0:	fa1c fc81 	uxtah	ip, ip, r1
 801b7d4:	4471      	add	r1, lr
 801b7d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801b7da:	b289      	uxth	r1, r1
 801b7dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801b7e0:	f846 1b04 	str.w	r1, [r6], #4
 801b7e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801b7e8:	e7dd      	b.n	801b7a6 <__mdiff+0xd6>
 801b7ea:	3f01      	subs	r7, #1
 801b7ec:	e7e7      	b.n	801b7be <__mdiff+0xee>
 801b7ee:	bf00      	nop
 801b7f0:	0801d8c4 	.word	0x0801d8c4
 801b7f4:	0801d8d5 	.word	0x0801d8d5

0801b7f8 <__d2b>:
 801b7f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b7fc:	460f      	mov	r7, r1
 801b7fe:	2101      	movs	r1, #1
 801b800:	ec59 8b10 	vmov	r8, r9, d0
 801b804:	4616      	mov	r6, r2
 801b806:	f7ff fcd5 	bl	801b1b4 <_Balloc>
 801b80a:	4604      	mov	r4, r0
 801b80c:	b930      	cbnz	r0, 801b81c <__d2b+0x24>
 801b80e:	4602      	mov	r2, r0
 801b810:	4b23      	ldr	r3, [pc, #140]	@ (801b8a0 <__d2b+0xa8>)
 801b812:	4824      	ldr	r0, [pc, #144]	@ (801b8a4 <__d2b+0xac>)
 801b814:	f240 310f 	movw	r1, #783	@ 0x30f
 801b818:	f000 fc20 	bl	801c05c <__assert_func>
 801b81c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801b820:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b824:	b10d      	cbz	r5, 801b82a <__d2b+0x32>
 801b826:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801b82a:	9301      	str	r3, [sp, #4]
 801b82c:	f1b8 0300 	subs.w	r3, r8, #0
 801b830:	d023      	beq.n	801b87a <__d2b+0x82>
 801b832:	4668      	mov	r0, sp
 801b834:	9300      	str	r3, [sp, #0]
 801b836:	f7ff fd84 	bl	801b342 <__lo0bits>
 801b83a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801b83e:	b1d0      	cbz	r0, 801b876 <__d2b+0x7e>
 801b840:	f1c0 0320 	rsb	r3, r0, #32
 801b844:	fa02 f303 	lsl.w	r3, r2, r3
 801b848:	430b      	orrs	r3, r1
 801b84a:	40c2      	lsrs	r2, r0
 801b84c:	6163      	str	r3, [r4, #20]
 801b84e:	9201      	str	r2, [sp, #4]
 801b850:	9b01      	ldr	r3, [sp, #4]
 801b852:	61a3      	str	r3, [r4, #24]
 801b854:	2b00      	cmp	r3, #0
 801b856:	bf0c      	ite	eq
 801b858:	2201      	moveq	r2, #1
 801b85a:	2202      	movne	r2, #2
 801b85c:	6122      	str	r2, [r4, #16]
 801b85e:	b1a5      	cbz	r5, 801b88a <__d2b+0x92>
 801b860:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801b864:	4405      	add	r5, r0
 801b866:	603d      	str	r5, [r7, #0]
 801b868:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801b86c:	6030      	str	r0, [r6, #0]
 801b86e:	4620      	mov	r0, r4
 801b870:	b003      	add	sp, #12
 801b872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b876:	6161      	str	r1, [r4, #20]
 801b878:	e7ea      	b.n	801b850 <__d2b+0x58>
 801b87a:	a801      	add	r0, sp, #4
 801b87c:	f7ff fd61 	bl	801b342 <__lo0bits>
 801b880:	9b01      	ldr	r3, [sp, #4]
 801b882:	6163      	str	r3, [r4, #20]
 801b884:	3020      	adds	r0, #32
 801b886:	2201      	movs	r2, #1
 801b888:	e7e8      	b.n	801b85c <__d2b+0x64>
 801b88a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801b88e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801b892:	6038      	str	r0, [r7, #0]
 801b894:	6918      	ldr	r0, [r3, #16]
 801b896:	f7ff fd35 	bl	801b304 <__hi0bits>
 801b89a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801b89e:	e7e5      	b.n	801b86c <__d2b+0x74>
 801b8a0:	0801d8c4 	.word	0x0801d8c4
 801b8a4:	0801d8d5 	.word	0x0801d8d5

0801b8a8 <__ssputs_r>:
 801b8a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b8ac:	688e      	ldr	r6, [r1, #8]
 801b8ae:	461f      	mov	r7, r3
 801b8b0:	42be      	cmp	r6, r7
 801b8b2:	680b      	ldr	r3, [r1, #0]
 801b8b4:	4682      	mov	sl, r0
 801b8b6:	460c      	mov	r4, r1
 801b8b8:	4690      	mov	r8, r2
 801b8ba:	d82d      	bhi.n	801b918 <__ssputs_r+0x70>
 801b8bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b8c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801b8c4:	d026      	beq.n	801b914 <__ssputs_r+0x6c>
 801b8c6:	6965      	ldr	r5, [r4, #20]
 801b8c8:	6909      	ldr	r1, [r1, #16]
 801b8ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b8ce:	eba3 0901 	sub.w	r9, r3, r1
 801b8d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b8d6:	1c7b      	adds	r3, r7, #1
 801b8d8:	444b      	add	r3, r9
 801b8da:	106d      	asrs	r5, r5, #1
 801b8dc:	429d      	cmp	r5, r3
 801b8de:	bf38      	it	cc
 801b8e0:	461d      	movcc	r5, r3
 801b8e2:	0553      	lsls	r3, r2, #21
 801b8e4:	d527      	bpl.n	801b936 <__ssputs_r+0x8e>
 801b8e6:	4629      	mov	r1, r5
 801b8e8:	f7fd fea8 	bl	801963c <_malloc_r>
 801b8ec:	4606      	mov	r6, r0
 801b8ee:	b360      	cbz	r0, 801b94a <__ssputs_r+0xa2>
 801b8f0:	6921      	ldr	r1, [r4, #16]
 801b8f2:	464a      	mov	r2, r9
 801b8f4:	f7fe fdad 	bl	801a452 <memcpy>
 801b8f8:	89a3      	ldrh	r3, [r4, #12]
 801b8fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801b8fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b902:	81a3      	strh	r3, [r4, #12]
 801b904:	6126      	str	r6, [r4, #16]
 801b906:	6165      	str	r5, [r4, #20]
 801b908:	444e      	add	r6, r9
 801b90a:	eba5 0509 	sub.w	r5, r5, r9
 801b90e:	6026      	str	r6, [r4, #0]
 801b910:	60a5      	str	r5, [r4, #8]
 801b912:	463e      	mov	r6, r7
 801b914:	42be      	cmp	r6, r7
 801b916:	d900      	bls.n	801b91a <__ssputs_r+0x72>
 801b918:	463e      	mov	r6, r7
 801b91a:	6820      	ldr	r0, [r4, #0]
 801b91c:	4632      	mov	r2, r6
 801b91e:	4641      	mov	r1, r8
 801b920:	f7fe fca9 	bl	801a276 <memmove>
 801b924:	68a3      	ldr	r3, [r4, #8]
 801b926:	1b9b      	subs	r3, r3, r6
 801b928:	60a3      	str	r3, [r4, #8]
 801b92a:	6823      	ldr	r3, [r4, #0]
 801b92c:	4433      	add	r3, r6
 801b92e:	6023      	str	r3, [r4, #0]
 801b930:	2000      	movs	r0, #0
 801b932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b936:	462a      	mov	r2, r5
 801b938:	f000 fbd4 	bl	801c0e4 <_realloc_r>
 801b93c:	4606      	mov	r6, r0
 801b93e:	2800      	cmp	r0, #0
 801b940:	d1e0      	bne.n	801b904 <__ssputs_r+0x5c>
 801b942:	6921      	ldr	r1, [r4, #16]
 801b944:	4650      	mov	r0, sl
 801b946:	f7ff fbeb 	bl	801b120 <_free_r>
 801b94a:	230c      	movs	r3, #12
 801b94c:	f8ca 3000 	str.w	r3, [sl]
 801b950:	89a3      	ldrh	r3, [r4, #12]
 801b952:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b956:	81a3      	strh	r3, [r4, #12]
 801b958:	f04f 30ff 	mov.w	r0, #4294967295
 801b95c:	e7e9      	b.n	801b932 <__ssputs_r+0x8a>
	...

0801b960 <_svfiprintf_r>:
 801b960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b964:	4698      	mov	r8, r3
 801b966:	898b      	ldrh	r3, [r1, #12]
 801b968:	061b      	lsls	r3, r3, #24
 801b96a:	b09d      	sub	sp, #116	@ 0x74
 801b96c:	4607      	mov	r7, r0
 801b96e:	460d      	mov	r5, r1
 801b970:	4614      	mov	r4, r2
 801b972:	d510      	bpl.n	801b996 <_svfiprintf_r+0x36>
 801b974:	690b      	ldr	r3, [r1, #16]
 801b976:	b973      	cbnz	r3, 801b996 <_svfiprintf_r+0x36>
 801b978:	2140      	movs	r1, #64	@ 0x40
 801b97a:	f7fd fe5f 	bl	801963c <_malloc_r>
 801b97e:	6028      	str	r0, [r5, #0]
 801b980:	6128      	str	r0, [r5, #16]
 801b982:	b930      	cbnz	r0, 801b992 <_svfiprintf_r+0x32>
 801b984:	230c      	movs	r3, #12
 801b986:	603b      	str	r3, [r7, #0]
 801b988:	f04f 30ff 	mov.w	r0, #4294967295
 801b98c:	b01d      	add	sp, #116	@ 0x74
 801b98e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b992:	2340      	movs	r3, #64	@ 0x40
 801b994:	616b      	str	r3, [r5, #20]
 801b996:	2300      	movs	r3, #0
 801b998:	9309      	str	r3, [sp, #36]	@ 0x24
 801b99a:	2320      	movs	r3, #32
 801b99c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b9a0:	f8cd 800c 	str.w	r8, [sp, #12]
 801b9a4:	2330      	movs	r3, #48	@ 0x30
 801b9a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801bb44 <_svfiprintf_r+0x1e4>
 801b9aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b9ae:	f04f 0901 	mov.w	r9, #1
 801b9b2:	4623      	mov	r3, r4
 801b9b4:	469a      	mov	sl, r3
 801b9b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b9ba:	b10a      	cbz	r2, 801b9c0 <_svfiprintf_r+0x60>
 801b9bc:	2a25      	cmp	r2, #37	@ 0x25
 801b9be:	d1f9      	bne.n	801b9b4 <_svfiprintf_r+0x54>
 801b9c0:	ebba 0b04 	subs.w	fp, sl, r4
 801b9c4:	d00b      	beq.n	801b9de <_svfiprintf_r+0x7e>
 801b9c6:	465b      	mov	r3, fp
 801b9c8:	4622      	mov	r2, r4
 801b9ca:	4629      	mov	r1, r5
 801b9cc:	4638      	mov	r0, r7
 801b9ce:	f7ff ff6b 	bl	801b8a8 <__ssputs_r>
 801b9d2:	3001      	adds	r0, #1
 801b9d4:	f000 80a7 	beq.w	801bb26 <_svfiprintf_r+0x1c6>
 801b9d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b9da:	445a      	add	r2, fp
 801b9dc:	9209      	str	r2, [sp, #36]	@ 0x24
 801b9de:	f89a 3000 	ldrb.w	r3, [sl]
 801b9e2:	2b00      	cmp	r3, #0
 801b9e4:	f000 809f 	beq.w	801bb26 <_svfiprintf_r+0x1c6>
 801b9e8:	2300      	movs	r3, #0
 801b9ea:	f04f 32ff 	mov.w	r2, #4294967295
 801b9ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b9f2:	f10a 0a01 	add.w	sl, sl, #1
 801b9f6:	9304      	str	r3, [sp, #16]
 801b9f8:	9307      	str	r3, [sp, #28]
 801b9fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b9fe:	931a      	str	r3, [sp, #104]	@ 0x68
 801ba00:	4654      	mov	r4, sl
 801ba02:	2205      	movs	r2, #5
 801ba04:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ba08:	484e      	ldr	r0, [pc, #312]	@ (801bb44 <_svfiprintf_r+0x1e4>)
 801ba0a:	f7e4 fbb9 	bl	8000180 <memchr>
 801ba0e:	9a04      	ldr	r2, [sp, #16]
 801ba10:	b9d8      	cbnz	r0, 801ba4a <_svfiprintf_r+0xea>
 801ba12:	06d0      	lsls	r0, r2, #27
 801ba14:	bf44      	itt	mi
 801ba16:	2320      	movmi	r3, #32
 801ba18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ba1c:	0711      	lsls	r1, r2, #28
 801ba1e:	bf44      	itt	mi
 801ba20:	232b      	movmi	r3, #43	@ 0x2b
 801ba22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ba26:	f89a 3000 	ldrb.w	r3, [sl]
 801ba2a:	2b2a      	cmp	r3, #42	@ 0x2a
 801ba2c:	d015      	beq.n	801ba5a <_svfiprintf_r+0xfa>
 801ba2e:	9a07      	ldr	r2, [sp, #28]
 801ba30:	4654      	mov	r4, sl
 801ba32:	2000      	movs	r0, #0
 801ba34:	f04f 0c0a 	mov.w	ip, #10
 801ba38:	4621      	mov	r1, r4
 801ba3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ba3e:	3b30      	subs	r3, #48	@ 0x30
 801ba40:	2b09      	cmp	r3, #9
 801ba42:	d94b      	bls.n	801badc <_svfiprintf_r+0x17c>
 801ba44:	b1b0      	cbz	r0, 801ba74 <_svfiprintf_r+0x114>
 801ba46:	9207      	str	r2, [sp, #28]
 801ba48:	e014      	b.n	801ba74 <_svfiprintf_r+0x114>
 801ba4a:	eba0 0308 	sub.w	r3, r0, r8
 801ba4e:	fa09 f303 	lsl.w	r3, r9, r3
 801ba52:	4313      	orrs	r3, r2
 801ba54:	9304      	str	r3, [sp, #16]
 801ba56:	46a2      	mov	sl, r4
 801ba58:	e7d2      	b.n	801ba00 <_svfiprintf_r+0xa0>
 801ba5a:	9b03      	ldr	r3, [sp, #12]
 801ba5c:	1d19      	adds	r1, r3, #4
 801ba5e:	681b      	ldr	r3, [r3, #0]
 801ba60:	9103      	str	r1, [sp, #12]
 801ba62:	2b00      	cmp	r3, #0
 801ba64:	bfbb      	ittet	lt
 801ba66:	425b      	neglt	r3, r3
 801ba68:	f042 0202 	orrlt.w	r2, r2, #2
 801ba6c:	9307      	strge	r3, [sp, #28]
 801ba6e:	9307      	strlt	r3, [sp, #28]
 801ba70:	bfb8      	it	lt
 801ba72:	9204      	strlt	r2, [sp, #16]
 801ba74:	7823      	ldrb	r3, [r4, #0]
 801ba76:	2b2e      	cmp	r3, #46	@ 0x2e
 801ba78:	d10a      	bne.n	801ba90 <_svfiprintf_r+0x130>
 801ba7a:	7863      	ldrb	r3, [r4, #1]
 801ba7c:	2b2a      	cmp	r3, #42	@ 0x2a
 801ba7e:	d132      	bne.n	801bae6 <_svfiprintf_r+0x186>
 801ba80:	9b03      	ldr	r3, [sp, #12]
 801ba82:	1d1a      	adds	r2, r3, #4
 801ba84:	681b      	ldr	r3, [r3, #0]
 801ba86:	9203      	str	r2, [sp, #12]
 801ba88:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ba8c:	3402      	adds	r4, #2
 801ba8e:	9305      	str	r3, [sp, #20]
 801ba90:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801bb54 <_svfiprintf_r+0x1f4>
 801ba94:	7821      	ldrb	r1, [r4, #0]
 801ba96:	2203      	movs	r2, #3
 801ba98:	4650      	mov	r0, sl
 801ba9a:	f7e4 fb71 	bl	8000180 <memchr>
 801ba9e:	b138      	cbz	r0, 801bab0 <_svfiprintf_r+0x150>
 801baa0:	9b04      	ldr	r3, [sp, #16]
 801baa2:	eba0 000a 	sub.w	r0, r0, sl
 801baa6:	2240      	movs	r2, #64	@ 0x40
 801baa8:	4082      	lsls	r2, r0
 801baaa:	4313      	orrs	r3, r2
 801baac:	3401      	adds	r4, #1
 801baae:	9304      	str	r3, [sp, #16]
 801bab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bab4:	4824      	ldr	r0, [pc, #144]	@ (801bb48 <_svfiprintf_r+0x1e8>)
 801bab6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801baba:	2206      	movs	r2, #6
 801babc:	f7e4 fb60 	bl	8000180 <memchr>
 801bac0:	2800      	cmp	r0, #0
 801bac2:	d036      	beq.n	801bb32 <_svfiprintf_r+0x1d2>
 801bac4:	4b21      	ldr	r3, [pc, #132]	@ (801bb4c <_svfiprintf_r+0x1ec>)
 801bac6:	bb1b      	cbnz	r3, 801bb10 <_svfiprintf_r+0x1b0>
 801bac8:	9b03      	ldr	r3, [sp, #12]
 801baca:	3307      	adds	r3, #7
 801bacc:	f023 0307 	bic.w	r3, r3, #7
 801bad0:	3308      	adds	r3, #8
 801bad2:	9303      	str	r3, [sp, #12]
 801bad4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bad6:	4433      	add	r3, r6
 801bad8:	9309      	str	r3, [sp, #36]	@ 0x24
 801bada:	e76a      	b.n	801b9b2 <_svfiprintf_r+0x52>
 801badc:	fb0c 3202 	mla	r2, ip, r2, r3
 801bae0:	460c      	mov	r4, r1
 801bae2:	2001      	movs	r0, #1
 801bae4:	e7a8      	b.n	801ba38 <_svfiprintf_r+0xd8>
 801bae6:	2300      	movs	r3, #0
 801bae8:	3401      	adds	r4, #1
 801baea:	9305      	str	r3, [sp, #20]
 801baec:	4619      	mov	r1, r3
 801baee:	f04f 0c0a 	mov.w	ip, #10
 801baf2:	4620      	mov	r0, r4
 801baf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801baf8:	3a30      	subs	r2, #48	@ 0x30
 801bafa:	2a09      	cmp	r2, #9
 801bafc:	d903      	bls.n	801bb06 <_svfiprintf_r+0x1a6>
 801bafe:	2b00      	cmp	r3, #0
 801bb00:	d0c6      	beq.n	801ba90 <_svfiprintf_r+0x130>
 801bb02:	9105      	str	r1, [sp, #20]
 801bb04:	e7c4      	b.n	801ba90 <_svfiprintf_r+0x130>
 801bb06:	fb0c 2101 	mla	r1, ip, r1, r2
 801bb0a:	4604      	mov	r4, r0
 801bb0c:	2301      	movs	r3, #1
 801bb0e:	e7f0      	b.n	801baf2 <_svfiprintf_r+0x192>
 801bb10:	ab03      	add	r3, sp, #12
 801bb12:	9300      	str	r3, [sp, #0]
 801bb14:	462a      	mov	r2, r5
 801bb16:	4b0e      	ldr	r3, [pc, #56]	@ (801bb50 <_svfiprintf_r+0x1f0>)
 801bb18:	a904      	add	r1, sp, #16
 801bb1a:	4638      	mov	r0, r7
 801bb1c:	f7fd feba 	bl	8019894 <_printf_float>
 801bb20:	1c42      	adds	r2, r0, #1
 801bb22:	4606      	mov	r6, r0
 801bb24:	d1d6      	bne.n	801bad4 <_svfiprintf_r+0x174>
 801bb26:	89ab      	ldrh	r3, [r5, #12]
 801bb28:	065b      	lsls	r3, r3, #25
 801bb2a:	f53f af2d 	bmi.w	801b988 <_svfiprintf_r+0x28>
 801bb2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bb30:	e72c      	b.n	801b98c <_svfiprintf_r+0x2c>
 801bb32:	ab03      	add	r3, sp, #12
 801bb34:	9300      	str	r3, [sp, #0]
 801bb36:	462a      	mov	r2, r5
 801bb38:	4b05      	ldr	r3, [pc, #20]	@ (801bb50 <_svfiprintf_r+0x1f0>)
 801bb3a:	a904      	add	r1, sp, #16
 801bb3c:	4638      	mov	r0, r7
 801bb3e:	f7fe f941 	bl	8019dc4 <_printf_i>
 801bb42:	e7ed      	b.n	801bb20 <_svfiprintf_r+0x1c0>
 801bb44:	0801d92e 	.word	0x0801d92e
 801bb48:	0801d938 	.word	0x0801d938
 801bb4c:	08019895 	.word	0x08019895
 801bb50:	0801b8a9 	.word	0x0801b8a9
 801bb54:	0801d934 	.word	0x0801d934

0801bb58 <__sfputc_r>:
 801bb58:	6893      	ldr	r3, [r2, #8]
 801bb5a:	3b01      	subs	r3, #1
 801bb5c:	2b00      	cmp	r3, #0
 801bb5e:	b410      	push	{r4}
 801bb60:	6093      	str	r3, [r2, #8]
 801bb62:	da08      	bge.n	801bb76 <__sfputc_r+0x1e>
 801bb64:	6994      	ldr	r4, [r2, #24]
 801bb66:	42a3      	cmp	r3, r4
 801bb68:	db01      	blt.n	801bb6e <__sfputc_r+0x16>
 801bb6a:	290a      	cmp	r1, #10
 801bb6c:	d103      	bne.n	801bb76 <__sfputc_r+0x1e>
 801bb6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bb72:	f000 b9df 	b.w	801bf34 <__swbuf_r>
 801bb76:	6813      	ldr	r3, [r2, #0]
 801bb78:	1c58      	adds	r0, r3, #1
 801bb7a:	6010      	str	r0, [r2, #0]
 801bb7c:	7019      	strb	r1, [r3, #0]
 801bb7e:	4608      	mov	r0, r1
 801bb80:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bb84:	4770      	bx	lr

0801bb86 <__sfputs_r>:
 801bb86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb88:	4606      	mov	r6, r0
 801bb8a:	460f      	mov	r7, r1
 801bb8c:	4614      	mov	r4, r2
 801bb8e:	18d5      	adds	r5, r2, r3
 801bb90:	42ac      	cmp	r4, r5
 801bb92:	d101      	bne.n	801bb98 <__sfputs_r+0x12>
 801bb94:	2000      	movs	r0, #0
 801bb96:	e007      	b.n	801bba8 <__sfputs_r+0x22>
 801bb98:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bb9c:	463a      	mov	r2, r7
 801bb9e:	4630      	mov	r0, r6
 801bba0:	f7ff ffda 	bl	801bb58 <__sfputc_r>
 801bba4:	1c43      	adds	r3, r0, #1
 801bba6:	d1f3      	bne.n	801bb90 <__sfputs_r+0xa>
 801bba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801bbac <_vfiprintf_r>:
 801bbac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbb0:	460d      	mov	r5, r1
 801bbb2:	b09d      	sub	sp, #116	@ 0x74
 801bbb4:	4614      	mov	r4, r2
 801bbb6:	4698      	mov	r8, r3
 801bbb8:	4606      	mov	r6, r0
 801bbba:	b118      	cbz	r0, 801bbc4 <_vfiprintf_r+0x18>
 801bbbc:	6a03      	ldr	r3, [r0, #32]
 801bbbe:	b90b      	cbnz	r3, 801bbc4 <_vfiprintf_r+0x18>
 801bbc0:	f7fe faaa 	bl	801a118 <__sinit>
 801bbc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bbc6:	07d9      	lsls	r1, r3, #31
 801bbc8:	d405      	bmi.n	801bbd6 <_vfiprintf_r+0x2a>
 801bbca:	89ab      	ldrh	r3, [r5, #12]
 801bbcc:	059a      	lsls	r2, r3, #22
 801bbce:	d402      	bmi.n	801bbd6 <_vfiprintf_r+0x2a>
 801bbd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bbd2:	f7fe fc3c 	bl	801a44e <__retarget_lock_acquire_recursive>
 801bbd6:	89ab      	ldrh	r3, [r5, #12]
 801bbd8:	071b      	lsls	r3, r3, #28
 801bbda:	d501      	bpl.n	801bbe0 <_vfiprintf_r+0x34>
 801bbdc:	692b      	ldr	r3, [r5, #16]
 801bbde:	b99b      	cbnz	r3, 801bc08 <_vfiprintf_r+0x5c>
 801bbe0:	4629      	mov	r1, r5
 801bbe2:	4630      	mov	r0, r6
 801bbe4:	f000 f9e4 	bl	801bfb0 <__swsetup_r>
 801bbe8:	b170      	cbz	r0, 801bc08 <_vfiprintf_r+0x5c>
 801bbea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bbec:	07dc      	lsls	r4, r3, #31
 801bbee:	d504      	bpl.n	801bbfa <_vfiprintf_r+0x4e>
 801bbf0:	f04f 30ff 	mov.w	r0, #4294967295
 801bbf4:	b01d      	add	sp, #116	@ 0x74
 801bbf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbfa:	89ab      	ldrh	r3, [r5, #12]
 801bbfc:	0598      	lsls	r0, r3, #22
 801bbfe:	d4f7      	bmi.n	801bbf0 <_vfiprintf_r+0x44>
 801bc00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bc02:	f7fe fc25 	bl	801a450 <__retarget_lock_release_recursive>
 801bc06:	e7f3      	b.n	801bbf0 <_vfiprintf_r+0x44>
 801bc08:	2300      	movs	r3, #0
 801bc0a:	9309      	str	r3, [sp, #36]	@ 0x24
 801bc0c:	2320      	movs	r3, #32
 801bc0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801bc12:	f8cd 800c 	str.w	r8, [sp, #12]
 801bc16:	2330      	movs	r3, #48	@ 0x30
 801bc18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801bdc8 <_vfiprintf_r+0x21c>
 801bc1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801bc20:	f04f 0901 	mov.w	r9, #1
 801bc24:	4623      	mov	r3, r4
 801bc26:	469a      	mov	sl, r3
 801bc28:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bc2c:	b10a      	cbz	r2, 801bc32 <_vfiprintf_r+0x86>
 801bc2e:	2a25      	cmp	r2, #37	@ 0x25
 801bc30:	d1f9      	bne.n	801bc26 <_vfiprintf_r+0x7a>
 801bc32:	ebba 0b04 	subs.w	fp, sl, r4
 801bc36:	d00b      	beq.n	801bc50 <_vfiprintf_r+0xa4>
 801bc38:	465b      	mov	r3, fp
 801bc3a:	4622      	mov	r2, r4
 801bc3c:	4629      	mov	r1, r5
 801bc3e:	4630      	mov	r0, r6
 801bc40:	f7ff ffa1 	bl	801bb86 <__sfputs_r>
 801bc44:	3001      	adds	r0, #1
 801bc46:	f000 80a7 	beq.w	801bd98 <_vfiprintf_r+0x1ec>
 801bc4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bc4c:	445a      	add	r2, fp
 801bc4e:	9209      	str	r2, [sp, #36]	@ 0x24
 801bc50:	f89a 3000 	ldrb.w	r3, [sl]
 801bc54:	2b00      	cmp	r3, #0
 801bc56:	f000 809f 	beq.w	801bd98 <_vfiprintf_r+0x1ec>
 801bc5a:	2300      	movs	r3, #0
 801bc5c:	f04f 32ff 	mov.w	r2, #4294967295
 801bc60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bc64:	f10a 0a01 	add.w	sl, sl, #1
 801bc68:	9304      	str	r3, [sp, #16]
 801bc6a:	9307      	str	r3, [sp, #28]
 801bc6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801bc70:	931a      	str	r3, [sp, #104]	@ 0x68
 801bc72:	4654      	mov	r4, sl
 801bc74:	2205      	movs	r2, #5
 801bc76:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bc7a:	4853      	ldr	r0, [pc, #332]	@ (801bdc8 <_vfiprintf_r+0x21c>)
 801bc7c:	f7e4 fa80 	bl	8000180 <memchr>
 801bc80:	9a04      	ldr	r2, [sp, #16]
 801bc82:	b9d8      	cbnz	r0, 801bcbc <_vfiprintf_r+0x110>
 801bc84:	06d1      	lsls	r1, r2, #27
 801bc86:	bf44      	itt	mi
 801bc88:	2320      	movmi	r3, #32
 801bc8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bc8e:	0713      	lsls	r3, r2, #28
 801bc90:	bf44      	itt	mi
 801bc92:	232b      	movmi	r3, #43	@ 0x2b
 801bc94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bc98:	f89a 3000 	ldrb.w	r3, [sl]
 801bc9c:	2b2a      	cmp	r3, #42	@ 0x2a
 801bc9e:	d015      	beq.n	801bccc <_vfiprintf_r+0x120>
 801bca0:	9a07      	ldr	r2, [sp, #28]
 801bca2:	4654      	mov	r4, sl
 801bca4:	2000      	movs	r0, #0
 801bca6:	f04f 0c0a 	mov.w	ip, #10
 801bcaa:	4621      	mov	r1, r4
 801bcac:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bcb0:	3b30      	subs	r3, #48	@ 0x30
 801bcb2:	2b09      	cmp	r3, #9
 801bcb4:	d94b      	bls.n	801bd4e <_vfiprintf_r+0x1a2>
 801bcb6:	b1b0      	cbz	r0, 801bce6 <_vfiprintf_r+0x13a>
 801bcb8:	9207      	str	r2, [sp, #28]
 801bcba:	e014      	b.n	801bce6 <_vfiprintf_r+0x13a>
 801bcbc:	eba0 0308 	sub.w	r3, r0, r8
 801bcc0:	fa09 f303 	lsl.w	r3, r9, r3
 801bcc4:	4313      	orrs	r3, r2
 801bcc6:	9304      	str	r3, [sp, #16]
 801bcc8:	46a2      	mov	sl, r4
 801bcca:	e7d2      	b.n	801bc72 <_vfiprintf_r+0xc6>
 801bccc:	9b03      	ldr	r3, [sp, #12]
 801bcce:	1d19      	adds	r1, r3, #4
 801bcd0:	681b      	ldr	r3, [r3, #0]
 801bcd2:	9103      	str	r1, [sp, #12]
 801bcd4:	2b00      	cmp	r3, #0
 801bcd6:	bfbb      	ittet	lt
 801bcd8:	425b      	neglt	r3, r3
 801bcda:	f042 0202 	orrlt.w	r2, r2, #2
 801bcde:	9307      	strge	r3, [sp, #28]
 801bce0:	9307      	strlt	r3, [sp, #28]
 801bce2:	bfb8      	it	lt
 801bce4:	9204      	strlt	r2, [sp, #16]
 801bce6:	7823      	ldrb	r3, [r4, #0]
 801bce8:	2b2e      	cmp	r3, #46	@ 0x2e
 801bcea:	d10a      	bne.n	801bd02 <_vfiprintf_r+0x156>
 801bcec:	7863      	ldrb	r3, [r4, #1]
 801bcee:	2b2a      	cmp	r3, #42	@ 0x2a
 801bcf0:	d132      	bne.n	801bd58 <_vfiprintf_r+0x1ac>
 801bcf2:	9b03      	ldr	r3, [sp, #12]
 801bcf4:	1d1a      	adds	r2, r3, #4
 801bcf6:	681b      	ldr	r3, [r3, #0]
 801bcf8:	9203      	str	r2, [sp, #12]
 801bcfa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801bcfe:	3402      	adds	r4, #2
 801bd00:	9305      	str	r3, [sp, #20]
 801bd02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801bdd8 <_vfiprintf_r+0x22c>
 801bd06:	7821      	ldrb	r1, [r4, #0]
 801bd08:	2203      	movs	r2, #3
 801bd0a:	4650      	mov	r0, sl
 801bd0c:	f7e4 fa38 	bl	8000180 <memchr>
 801bd10:	b138      	cbz	r0, 801bd22 <_vfiprintf_r+0x176>
 801bd12:	9b04      	ldr	r3, [sp, #16]
 801bd14:	eba0 000a 	sub.w	r0, r0, sl
 801bd18:	2240      	movs	r2, #64	@ 0x40
 801bd1a:	4082      	lsls	r2, r0
 801bd1c:	4313      	orrs	r3, r2
 801bd1e:	3401      	adds	r4, #1
 801bd20:	9304      	str	r3, [sp, #16]
 801bd22:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bd26:	4829      	ldr	r0, [pc, #164]	@ (801bdcc <_vfiprintf_r+0x220>)
 801bd28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801bd2c:	2206      	movs	r2, #6
 801bd2e:	f7e4 fa27 	bl	8000180 <memchr>
 801bd32:	2800      	cmp	r0, #0
 801bd34:	d03f      	beq.n	801bdb6 <_vfiprintf_r+0x20a>
 801bd36:	4b26      	ldr	r3, [pc, #152]	@ (801bdd0 <_vfiprintf_r+0x224>)
 801bd38:	bb1b      	cbnz	r3, 801bd82 <_vfiprintf_r+0x1d6>
 801bd3a:	9b03      	ldr	r3, [sp, #12]
 801bd3c:	3307      	adds	r3, #7
 801bd3e:	f023 0307 	bic.w	r3, r3, #7
 801bd42:	3308      	adds	r3, #8
 801bd44:	9303      	str	r3, [sp, #12]
 801bd46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bd48:	443b      	add	r3, r7
 801bd4a:	9309      	str	r3, [sp, #36]	@ 0x24
 801bd4c:	e76a      	b.n	801bc24 <_vfiprintf_r+0x78>
 801bd4e:	fb0c 3202 	mla	r2, ip, r2, r3
 801bd52:	460c      	mov	r4, r1
 801bd54:	2001      	movs	r0, #1
 801bd56:	e7a8      	b.n	801bcaa <_vfiprintf_r+0xfe>
 801bd58:	2300      	movs	r3, #0
 801bd5a:	3401      	adds	r4, #1
 801bd5c:	9305      	str	r3, [sp, #20]
 801bd5e:	4619      	mov	r1, r3
 801bd60:	f04f 0c0a 	mov.w	ip, #10
 801bd64:	4620      	mov	r0, r4
 801bd66:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bd6a:	3a30      	subs	r2, #48	@ 0x30
 801bd6c:	2a09      	cmp	r2, #9
 801bd6e:	d903      	bls.n	801bd78 <_vfiprintf_r+0x1cc>
 801bd70:	2b00      	cmp	r3, #0
 801bd72:	d0c6      	beq.n	801bd02 <_vfiprintf_r+0x156>
 801bd74:	9105      	str	r1, [sp, #20]
 801bd76:	e7c4      	b.n	801bd02 <_vfiprintf_r+0x156>
 801bd78:	fb0c 2101 	mla	r1, ip, r1, r2
 801bd7c:	4604      	mov	r4, r0
 801bd7e:	2301      	movs	r3, #1
 801bd80:	e7f0      	b.n	801bd64 <_vfiprintf_r+0x1b8>
 801bd82:	ab03      	add	r3, sp, #12
 801bd84:	9300      	str	r3, [sp, #0]
 801bd86:	462a      	mov	r2, r5
 801bd88:	4b12      	ldr	r3, [pc, #72]	@ (801bdd4 <_vfiprintf_r+0x228>)
 801bd8a:	a904      	add	r1, sp, #16
 801bd8c:	4630      	mov	r0, r6
 801bd8e:	f7fd fd81 	bl	8019894 <_printf_float>
 801bd92:	4607      	mov	r7, r0
 801bd94:	1c78      	adds	r0, r7, #1
 801bd96:	d1d6      	bne.n	801bd46 <_vfiprintf_r+0x19a>
 801bd98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bd9a:	07d9      	lsls	r1, r3, #31
 801bd9c:	d405      	bmi.n	801bdaa <_vfiprintf_r+0x1fe>
 801bd9e:	89ab      	ldrh	r3, [r5, #12]
 801bda0:	059a      	lsls	r2, r3, #22
 801bda2:	d402      	bmi.n	801bdaa <_vfiprintf_r+0x1fe>
 801bda4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bda6:	f7fe fb53 	bl	801a450 <__retarget_lock_release_recursive>
 801bdaa:	89ab      	ldrh	r3, [r5, #12]
 801bdac:	065b      	lsls	r3, r3, #25
 801bdae:	f53f af1f 	bmi.w	801bbf0 <_vfiprintf_r+0x44>
 801bdb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bdb4:	e71e      	b.n	801bbf4 <_vfiprintf_r+0x48>
 801bdb6:	ab03      	add	r3, sp, #12
 801bdb8:	9300      	str	r3, [sp, #0]
 801bdba:	462a      	mov	r2, r5
 801bdbc:	4b05      	ldr	r3, [pc, #20]	@ (801bdd4 <_vfiprintf_r+0x228>)
 801bdbe:	a904      	add	r1, sp, #16
 801bdc0:	4630      	mov	r0, r6
 801bdc2:	f7fd ffff 	bl	8019dc4 <_printf_i>
 801bdc6:	e7e4      	b.n	801bd92 <_vfiprintf_r+0x1e6>
 801bdc8:	0801d92e 	.word	0x0801d92e
 801bdcc:	0801d938 	.word	0x0801d938
 801bdd0:	08019895 	.word	0x08019895
 801bdd4:	0801bb87 	.word	0x0801bb87
 801bdd8:	0801d934 	.word	0x0801d934

0801bddc <__sflush_r>:
 801bddc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801bde0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bde4:	0716      	lsls	r6, r2, #28
 801bde6:	4605      	mov	r5, r0
 801bde8:	460c      	mov	r4, r1
 801bdea:	d454      	bmi.n	801be96 <__sflush_r+0xba>
 801bdec:	684b      	ldr	r3, [r1, #4]
 801bdee:	2b00      	cmp	r3, #0
 801bdf0:	dc02      	bgt.n	801bdf8 <__sflush_r+0x1c>
 801bdf2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801bdf4:	2b00      	cmp	r3, #0
 801bdf6:	dd48      	ble.n	801be8a <__sflush_r+0xae>
 801bdf8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801bdfa:	2e00      	cmp	r6, #0
 801bdfc:	d045      	beq.n	801be8a <__sflush_r+0xae>
 801bdfe:	2300      	movs	r3, #0
 801be00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801be04:	682f      	ldr	r7, [r5, #0]
 801be06:	6a21      	ldr	r1, [r4, #32]
 801be08:	602b      	str	r3, [r5, #0]
 801be0a:	d030      	beq.n	801be6e <__sflush_r+0x92>
 801be0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801be0e:	89a3      	ldrh	r3, [r4, #12]
 801be10:	0759      	lsls	r1, r3, #29
 801be12:	d505      	bpl.n	801be20 <__sflush_r+0x44>
 801be14:	6863      	ldr	r3, [r4, #4]
 801be16:	1ad2      	subs	r2, r2, r3
 801be18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801be1a:	b10b      	cbz	r3, 801be20 <__sflush_r+0x44>
 801be1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801be1e:	1ad2      	subs	r2, r2, r3
 801be20:	2300      	movs	r3, #0
 801be22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801be24:	6a21      	ldr	r1, [r4, #32]
 801be26:	4628      	mov	r0, r5
 801be28:	47b0      	blx	r6
 801be2a:	1c43      	adds	r3, r0, #1
 801be2c:	89a3      	ldrh	r3, [r4, #12]
 801be2e:	d106      	bne.n	801be3e <__sflush_r+0x62>
 801be30:	6829      	ldr	r1, [r5, #0]
 801be32:	291d      	cmp	r1, #29
 801be34:	d82b      	bhi.n	801be8e <__sflush_r+0xb2>
 801be36:	4a2a      	ldr	r2, [pc, #168]	@ (801bee0 <__sflush_r+0x104>)
 801be38:	40ca      	lsrs	r2, r1
 801be3a:	07d6      	lsls	r6, r2, #31
 801be3c:	d527      	bpl.n	801be8e <__sflush_r+0xb2>
 801be3e:	2200      	movs	r2, #0
 801be40:	6062      	str	r2, [r4, #4]
 801be42:	04d9      	lsls	r1, r3, #19
 801be44:	6922      	ldr	r2, [r4, #16]
 801be46:	6022      	str	r2, [r4, #0]
 801be48:	d504      	bpl.n	801be54 <__sflush_r+0x78>
 801be4a:	1c42      	adds	r2, r0, #1
 801be4c:	d101      	bne.n	801be52 <__sflush_r+0x76>
 801be4e:	682b      	ldr	r3, [r5, #0]
 801be50:	b903      	cbnz	r3, 801be54 <__sflush_r+0x78>
 801be52:	6560      	str	r0, [r4, #84]	@ 0x54
 801be54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801be56:	602f      	str	r7, [r5, #0]
 801be58:	b1b9      	cbz	r1, 801be8a <__sflush_r+0xae>
 801be5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801be5e:	4299      	cmp	r1, r3
 801be60:	d002      	beq.n	801be68 <__sflush_r+0x8c>
 801be62:	4628      	mov	r0, r5
 801be64:	f7ff f95c 	bl	801b120 <_free_r>
 801be68:	2300      	movs	r3, #0
 801be6a:	6363      	str	r3, [r4, #52]	@ 0x34
 801be6c:	e00d      	b.n	801be8a <__sflush_r+0xae>
 801be6e:	2301      	movs	r3, #1
 801be70:	4628      	mov	r0, r5
 801be72:	47b0      	blx	r6
 801be74:	4602      	mov	r2, r0
 801be76:	1c50      	adds	r0, r2, #1
 801be78:	d1c9      	bne.n	801be0e <__sflush_r+0x32>
 801be7a:	682b      	ldr	r3, [r5, #0]
 801be7c:	2b00      	cmp	r3, #0
 801be7e:	d0c6      	beq.n	801be0e <__sflush_r+0x32>
 801be80:	2b1d      	cmp	r3, #29
 801be82:	d001      	beq.n	801be88 <__sflush_r+0xac>
 801be84:	2b16      	cmp	r3, #22
 801be86:	d11e      	bne.n	801bec6 <__sflush_r+0xea>
 801be88:	602f      	str	r7, [r5, #0]
 801be8a:	2000      	movs	r0, #0
 801be8c:	e022      	b.n	801bed4 <__sflush_r+0xf8>
 801be8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801be92:	b21b      	sxth	r3, r3
 801be94:	e01b      	b.n	801bece <__sflush_r+0xf2>
 801be96:	690f      	ldr	r7, [r1, #16]
 801be98:	2f00      	cmp	r7, #0
 801be9a:	d0f6      	beq.n	801be8a <__sflush_r+0xae>
 801be9c:	0793      	lsls	r3, r2, #30
 801be9e:	680e      	ldr	r6, [r1, #0]
 801bea0:	bf08      	it	eq
 801bea2:	694b      	ldreq	r3, [r1, #20]
 801bea4:	600f      	str	r7, [r1, #0]
 801bea6:	bf18      	it	ne
 801bea8:	2300      	movne	r3, #0
 801beaa:	eba6 0807 	sub.w	r8, r6, r7
 801beae:	608b      	str	r3, [r1, #8]
 801beb0:	f1b8 0f00 	cmp.w	r8, #0
 801beb4:	dde9      	ble.n	801be8a <__sflush_r+0xae>
 801beb6:	6a21      	ldr	r1, [r4, #32]
 801beb8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801beba:	4643      	mov	r3, r8
 801bebc:	463a      	mov	r2, r7
 801bebe:	4628      	mov	r0, r5
 801bec0:	47b0      	blx	r6
 801bec2:	2800      	cmp	r0, #0
 801bec4:	dc08      	bgt.n	801bed8 <__sflush_r+0xfc>
 801bec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801beca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bece:	81a3      	strh	r3, [r4, #12]
 801bed0:	f04f 30ff 	mov.w	r0, #4294967295
 801bed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bed8:	4407      	add	r7, r0
 801beda:	eba8 0800 	sub.w	r8, r8, r0
 801bede:	e7e7      	b.n	801beb0 <__sflush_r+0xd4>
 801bee0:	20400001 	.word	0x20400001

0801bee4 <_fflush_r>:
 801bee4:	b538      	push	{r3, r4, r5, lr}
 801bee6:	690b      	ldr	r3, [r1, #16]
 801bee8:	4605      	mov	r5, r0
 801beea:	460c      	mov	r4, r1
 801beec:	b913      	cbnz	r3, 801bef4 <_fflush_r+0x10>
 801beee:	2500      	movs	r5, #0
 801bef0:	4628      	mov	r0, r5
 801bef2:	bd38      	pop	{r3, r4, r5, pc}
 801bef4:	b118      	cbz	r0, 801befe <_fflush_r+0x1a>
 801bef6:	6a03      	ldr	r3, [r0, #32]
 801bef8:	b90b      	cbnz	r3, 801befe <_fflush_r+0x1a>
 801befa:	f7fe f90d 	bl	801a118 <__sinit>
 801befe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bf02:	2b00      	cmp	r3, #0
 801bf04:	d0f3      	beq.n	801beee <_fflush_r+0xa>
 801bf06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801bf08:	07d0      	lsls	r0, r2, #31
 801bf0a:	d404      	bmi.n	801bf16 <_fflush_r+0x32>
 801bf0c:	0599      	lsls	r1, r3, #22
 801bf0e:	d402      	bmi.n	801bf16 <_fflush_r+0x32>
 801bf10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bf12:	f7fe fa9c 	bl	801a44e <__retarget_lock_acquire_recursive>
 801bf16:	4628      	mov	r0, r5
 801bf18:	4621      	mov	r1, r4
 801bf1a:	f7ff ff5f 	bl	801bddc <__sflush_r>
 801bf1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801bf20:	07da      	lsls	r2, r3, #31
 801bf22:	4605      	mov	r5, r0
 801bf24:	d4e4      	bmi.n	801bef0 <_fflush_r+0xc>
 801bf26:	89a3      	ldrh	r3, [r4, #12]
 801bf28:	059b      	lsls	r3, r3, #22
 801bf2a:	d4e1      	bmi.n	801bef0 <_fflush_r+0xc>
 801bf2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bf2e:	f7fe fa8f 	bl	801a450 <__retarget_lock_release_recursive>
 801bf32:	e7dd      	b.n	801bef0 <_fflush_r+0xc>

0801bf34 <__swbuf_r>:
 801bf34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf36:	460e      	mov	r6, r1
 801bf38:	4614      	mov	r4, r2
 801bf3a:	4605      	mov	r5, r0
 801bf3c:	b118      	cbz	r0, 801bf46 <__swbuf_r+0x12>
 801bf3e:	6a03      	ldr	r3, [r0, #32]
 801bf40:	b90b      	cbnz	r3, 801bf46 <__swbuf_r+0x12>
 801bf42:	f7fe f8e9 	bl	801a118 <__sinit>
 801bf46:	69a3      	ldr	r3, [r4, #24]
 801bf48:	60a3      	str	r3, [r4, #8]
 801bf4a:	89a3      	ldrh	r3, [r4, #12]
 801bf4c:	071a      	lsls	r2, r3, #28
 801bf4e:	d501      	bpl.n	801bf54 <__swbuf_r+0x20>
 801bf50:	6923      	ldr	r3, [r4, #16]
 801bf52:	b943      	cbnz	r3, 801bf66 <__swbuf_r+0x32>
 801bf54:	4621      	mov	r1, r4
 801bf56:	4628      	mov	r0, r5
 801bf58:	f000 f82a 	bl	801bfb0 <__swsetup_r>
 801bf5c:	b118      	cbz	r0, 801bf66 <__swbuf_r+0x32>
 801bf5e:	f04f 37ff 	mov.w	r7, #4294967295
 801bf62:	4638      	mov	r0, r7
 801bf64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bf66:	6823      	ldr	r3, [r4, #0]
 801bf68:	6922      	ldr	r2, [r4, #16]
 801bf6a:	1a98      	subs	r0, r3, r2
 801bf6c:	6963      	ldr	r3, [r4, #20]
 801bf6e:	b2f6      	uxtb	r6, r6
 801bf70:	4283      	cmp	r3, r0
 801bf72:	4637      	mov	r7, r6
 801bf74:	dc05      	bgt.n	801bf82 <__swbuf_r+0x4e>
 801bf76:	4621      	mov	r1, r4
 801bf78:	4628      	mov	r0, r5
 801bf7a:	f7ff ffb3 	bl	801bee4 <_fflush_r>
 801bf7e:	2800      	cmp	r0, #0
 801bf80:	d1ed      	bne.n	801bf5e <__swbuf_r+0x2a>
 801bf82:	68a3      	ldr	r3, [r4, #8]
 801bf84:	3b01      	subs	r3, #1
 801bf86:	60a3      	str	r3, [r4, #8]
 801bf88:	6823      	ldr	r3, [r4, #0]
 801bf8a:	1c5a      	adds	r2, r3, #1
 801bf8c:	6022      	str	r2, [r4, #0]
 801bf8e:	701e      	strb	r6, [r3, #0]
 801bf90:	6962      	ldr	r2, [r4, #20]
 801bf92:	1c43      	adds	r3, r0, #1
 801bf94:	429a      	cmp	r2, r3
 801bf96:	d004      	beq.n	801bfa2 <__swbuf_r+0x6e>
 801bf98:	89a3      	ldrh	r3, [r4, #12]
 801bf9a:	07db      	lsls	r3, r3, #31
 801bf9c:	d5e1      	bpl.n	801bf62 <__swbuf_r+0x2e>
 801bf9e:	2e0a      	cmp	r6, #10
 801bfa0:	d1df      	bne.n	801bf62 <__swbuf_r+0x2e>
 801bfa2:	4621      	mov	r1, r4
 801bfa4:	4628      	mov	r0, r5
 801bfa6:	f7ff ff9d 	bl	801bee4 <_fflush_r>
 801bfaa:	2800      	cmp	r0, #0
 801bfac:	d0d9      	beq.n	801bf62 <__swbuf_r+0x2e>
 801bfae:	e7d6      	b.n	801bf5e <__swbuf_r+0x2a>

0801bfb0 <__swsetup_r>:
 801bfb0:	b538      	push	{r3, r4, r5, lr}
 801bfb2:	4b29      	ldr	r3, [pc, #164]	@ (801c058 <__swsetup_r+0xa8>)
 801bfb4:	4605      	mov	r5, r0
 801bfb6:	6818      	ldr	r0, [r3, #0]
 801bfb8:	460c      	mov	r4, r1
 801bfba:	b118      	cbz	r0, 801bfc4 <__swsetup_r+0x14>
 801bfbc:	6a03      	ldr	r3, [r0, #32]
 801bfbe:	b90b      	cbnz	r3, 801bfc4 <__swsetup_r+0x14>
 801bfc0:	f7fe f8aa 	bl	801a118 <__sinit>
 801bfc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bfc8:	0719      	lsls	r1, r3, #28
 801bfca:	d422      	bmi.n	801c012 <__swsetup_r+0x62>
 801bfcc:	06da      	lsls	r2, r3, #27
 801bfce:	d407      	bmi.n	801bfe0 <__swsetup_r+0x30>
 801bfd0:	2209      	movs	r2, #9
 801bfd2:	602a      	str	r2, [r5, #0]
 801bfd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bfd8:	81a3      	strh	r3, [r4, #12]
 801bfda:	f04f 30ff 	mov.w	r0, #4294967295
 801bfde:	e033      	b.n	801c048 <__swsetup_r+0x98>
 801bfe0:	0758      	lsls	r0, r3, #29
 801bfe2:	d512      	bpl.n	801c00a <__swsetup_r+0x5a>
 801bfe4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801bfe6:	b141      	cbz	r1, 801bffa <__swsetup_r+0x4a>
 801bfe8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801bfec:	4299      	cmp	r1, r3
 801bfee:	d002      	beq.n	801bff6 <__swsetup_r+0x46>
 801bff0:	4628      	mov	r0, r5
 801bff2:	f7ff f895 	bl	801b120 <_free_r>
 801bff6:	2300      	movs	r3, #0
 801bff8:	6363      	str	r3, [r4, #52]	@ 0x34
 801bffa:	89a3      	ldrh	r3, [r4, #12]
 801bffc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801c000:	81a3      	strh	r3, [r4, #12]
 801c002:	2300      	movs	r3, #0
 801c004:	6063      	str	r3, [r4, #4]
 801c006:	6923      	ldr	r3, [r4, #16]
 801c008:	6023      	str	r3, [r4, #0]
 801c00a:	89a3      	ldrh	r3, [r4, #12]
 801c00c:	f043 0308 	orr.w	r3, r3, #8
 801c010:	81a3      	strh	r3, [r4, #12]
 801c012:	6923      	ldr	r3, [r4, #16]
 801c014:	b94b      	cbnz	r3, 801c02a <__swsetup_r+0x7a>
 801c016:	89a3      	ldrh	r3, [r4, #12]
 801c018:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801c01c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c020:	d003      	beq.n	801c02a <__swsetup_r+0x7a>
 801c022:	4621      	mov	r1, r4
 801c024:	4628      	mov	r0, r5
 801c026:	f000 f8d1 	bl	801c1cc <__smakebuf_r>
 801c02a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c02e:	f013 0201 	ands.w	r2, r3, #1
 801c032:	d00a      	beq.n	801c04a <__swsetup_r+0x9a>
 801c034:	2200      	movs	r2, #0
 801c036:	60a2      	str	r2, [r4, #8]
 801c038:	6962      	ldr	r2, [r4, #20]
 801c03a:	4252      	negs	r2, r2
 801c03c:	61a2      	str	r2, [r4, #24]
 801c03e:	6922      	ldr	r2, [r4, #16]
 801c040:	b942      	cbnz	r2, 801c054 <__swsetup_r+0xa4>
 801c042:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801c046:	d1c5      	bne.n	801bfd4 <__swsetup_r+0x24>
 801c048:	bd38      	pop	{r3, r4, r5, pc}
 801c04a:	0799      	lsls	r1, r3, #30
 801c04c:	bf58      	it	pl
 801c04e:	6962      	ldrpl	r2, [r4, #20]
 801c050:	60a2      	str	r2, [r4, #8]
 801c052:	e7f4      	b.n	801c03e <__swsetup_r+0x8e>
 801c054:	2000      	movs	r0, #0
 801c056:	e7f7      	b.n	801c048 <__swsetup_r+0x98>
 801c058:	20000150 	.word	0x20000150

0801c05c <__assert_func>:
 801c05c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c05e:	4614      	mov	r4, r2
 801c060:	461a      	mov	r2, r3
 801c062:	4b09      	ldr	r3, [pc, #36]	@ (801c088 <__assert_func+0x2c>)
 801c064:	681b      	ldr	r3, [r3, #0]
 801c066:	4605      	mov	r5, r0
 801c068:	68d8      	ldr	r0, [r3, #12]
 801c06a:	b14c      	cbz	r4, 801c080 <__assert_func+0x24>
 801c06c:	4b07      	ldr	r3, [pc, #28]	@ (801c08c <__assert_func+0x30>)
 801c06e:	9100      	str	r1, [sp, #0]
 801c070:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c074:	4906      	ldr	r1, [pc, #24]	@ (801c090 <__assert_func+0x34>)
 801c076:	462b      	mov	r3, r5
 801c078:	f000 f870 	bl	801c15c <fiprintf>
 801c07c:	f7fd faa4 	bl	80195c8 <abort>
 801c080:	4b04      	ldr	r3, [pc, #16]	@ (801c094 <__assert_func+0x38>)
 801c082:	461c      	mov	r4, r3
 801c084:	e7f3      	b.n	801c06e <__assert_func+0x12>
 801c086:	bf00      	nop
 801c088:	20000150 	.word	0x20000150
 801c08c:	0801d949 	.word	0x0801d949
 801c090:	0801d956 	.word	0x0801d956
 801c094:	0801d984 	.word	0x0801d984

0801c098 <_calloc_r>:
 801c098:	b570      	push	{r4, r5, r6, lr}
 801c09a:	fba1 5402 	umull	r5, r4, r1, r2
 801c09e:	b934      	cbnz	r4, 801c0ae <_calloc_r+0x16>
 801c0a0:	4629      	mov	r1, r5
 801c0a2:	f7fd facb 	bl	801963c <_malloc_r>
 801c0a6:	4606      	mov	r6, r0
 801c0a8:	b928      	cbnz	r0, 801c0b6 <_calloc_r+0x1e>
 801c0aa:	4630      	mov	r0, r6
 801c0ac:	bd70      	pop	{r4, r5, r6, pc}
 801c0ae:	220c      	movs	r2, #12
 801c0b0:	6002      	str	r2, [r0, #0]
 801c0b2:	2600      	movs	r6, #0
 801c0b4:	e7f9      	b.n	801c0aa <_calloc_r+0x12>
 801c0b6:	462a      	mov	r2, r5
 801c0b8:	4621      	mov	r1, r4
 801c0ba:	f7fe f8f6 	bl	801a2aa <memset>
 801c0be:	e7f4      	b.n	801c0aa <_calloc_r+0x12>

0801c0c0 <__ascii_mbtowc>:
 801c0c0:	b082      	sub	sp, #8
 801c0c2:	b901      	cbnz	r1, 801c0c6 <__ascii_mbtowc+0x6>
 801c0c4:	a901      	add	r1, sp, #4
 801c0c6:	b142      	cbz	r2, 801c0da <__ascii_mbtowc+0x1a>
 801c0c8:	b14b      	cbz	r3, 801c0de <__ascii_mbtowc+0x1e>
 801c0ca:	7813      	ldrb	r3, [r2, #0]
 801c0cc:	600b      	str	r3, [r1, #0]
 801c0ce:	7812      	ldrb	r2, [r2, #0]
 801c0d0:	1e10      	subs	r0, r2, #0
 801c0d2:	bf18      	it	ne
 801c0d4:	2001      	movne	r0, #1
 801c0d6:	b002      	add	sp, #8
 801c0d8:	4770      	bx	lr
 801c0da:	4610      	mov	r0, r2
 801c0dc:	e7fb      	b.n	801c0d6 <__ascii_mbtowc+0x16>
 801c0de:	f06f 0001 	mvn.w	r0, #1
 801c0e2:	e7f8      	b.n	801c0d6 <__ascii_mbtowc+0x16>

0801c0e4 <_realloc_r>:
 801c0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c0e8:	4607      	mov	r7, r0
 801c0ea:	4614      	mov	r4, r2
 801c0ec:	460d      	mov	r5, r1
 801c0ee:	b921      	cbnz	r1, 801c0fa <_realloc_r+0x16>
 801c0f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c0f4:	4611      	mov	r1, r2
 801c0f6:	f7fd baa1 	b.w	801963c <_malloc_r>
 801c0fa:	b92a      	cbnz	r2, 801c108 <_realloc_r+0x24>
 801c0fc:	f7ff f810 	bl	801b120 <_free_r>
 801c100:	4625      	mov	r5, r4
 801c102:	4628      	mov	r0, r5
 801c104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c108:	f000 f8be 	bl	801c288 <_malloc_usable_size_r>
 801c10c:	4284      	cmp	r4, r0
 801c10e:	4606      	mov	r6, r0
 801c110:	d802      	bhi.n	801c118 <_realloc_r+0x34>
 801c112:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801c116:	d8f4      	bhi.n	801c102 <_realloc_r+0x1e>
 801c118:	4621      	mov	r1, r4
 801c11a:	4638      	mov	r0, r7
 801c11c:	f7fd fa8e 	bl	801963c <_malloc_r>
 801c120:	4680      	mov	r8, r0
 801c122:	b908      	cbnz	r0, 801c128 <_realloc_r+0x44>
 801c124:	4645      	mov	r5, r8
 801c126:	e7ec      	b.n	801c102 <_realloc_r+0x1e>
 801c128:	42b4      	cmp	r4, r6
 801c12a:	4622      	mov	r2, r4
 801c12c:	4629      	mov	r1, r5
 801c12e:	bf28      	it	cs
 801c130:	4632      	movcs	r2, r6
 801c132:	f7fe f98e 	bl	801a452 <memcpy>
 801c136:	4629      	mov	r1, r5
 801c138:	4638      	mov	r0, r7
 801c13a:	f7fe fff1 	bl	801b120 <_free_r>
 801c13e:	e7f1      	b.n	801c124 <_realloc_r+0x40>

0801c140 <__ascii_wctomb>:
 801c140:	4603      	mov	r3, r0
 801c142:	4608      	mov	r0, r1
 801c144:	b141      	cbz	r1, 801c158 <__ascii_wctomb+0x18>
 801c146:	2aff      	cmp	r2, #255	@ 0xff
 801c148:	d904      	bls.n	801c154 <__ascii_wctomb+0x14>
 801c14a:	228a      	movs	r2, #138	@ 0x8a
 801c14c:	601a      	str	r2, [r3, #0]
 801c14e:	f04f 30ff 	mov.w	r0, #4294967295
 801c152:	4770      	bx	lr
 801c154:	700a      	strb	r2, [r1, #0]
 801c156:	2001      	movs	r0, #1
 801c158:	4770      	bx	lr
	...

0801c15c <fiprintf>:
 801c15c:	b40e      	push	{r1, r2, r3}
 801c15e:	b503      	push	{r0, r1, lr}
 801c160:	4601      	mov	r1, r0
 801c162:	ab03      	add	r3, sp, #12
 801c164:	4805      	ldr	r0, [pc, #20]	@ (801c17c <fiprintf+0x20>)
 801c166:	f853 2b04 	ldr.w	r2, [r3], #4
 801c16a:	6800      	ldr	r0, [r0, #0]
 801c16c:	9301      	str	r3, [sp, #4]
 801c16e:	f7ff fd1d 	bl	801bbac <_vfiprintf_r>
 801c172:	b002      	add	sp, #8
 801c174:	f85d eb04 	ldr.w	lr, [sp], #4
 801c178:	b003      	add	sp, #12
 801c17a:	4770      	bx	lr
 801c17c:	20000150 	.word	0x20000150

0801c180 <__swhatbuf_r>:
 801c180:	b570      	push	{r4, r5, r6, lr}
 801c182:	460c      	mov	r4, r1
 801c184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c188:	2900      	cmp	r1, #0
 801c18a:	b096      	sub	sp, #88	@ 0x58
 801c18c:	4615      	mov	r5, r2
 801c18e:	461e      	mov	r6, r3
 801c190:	da0d      	bge.n	801c1ae <__swhatbuf_r+0x2e>
 801c192:	89a3      	ldrh	r3, [r4, #12]
 801c194:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801c198:	f04f 0100 	mov.w	r1, #0
 801c19c:	bf14      	ite	ne
 801c19e:	2340      	movne	r3, #64	@ 0x40
 801c1a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801c1a4:	2000      	movs	r0, #0
 801c1a6:	6031      	str	r1, [r6, #0]
 801c1a8:	602b      	str	r3, [r5, #0]
 801c1aa:	b016      	add	sp, #88	@ 0x58
 801c1ac:	bd70      	pop	{r4, r5, r6, pc}
 801c1ae:	466a      	mov	r2, sp
 801c1b0:	f000 f848 	bl	801c244 <_fstat_r>
 801c1b4:	2800      	cmp	r0, #0
 801c1b6:	dbec      	blt.n	801c192 <__swhatbuf_r+0x12>
 801c1b8:	9901      	ldr	r1, [sp, #4]
 801c1ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801c1be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801c1c2:	4259      	negs	r1, r3
 801c1c4:	4159      	adcs	r1, r3
 801c1c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c1ca:	e7eb      	b.n	801c1a4 <__swhatbuf_r+0x24>

0801c1cc <__smakebuf_r>:
 801c1cc:	898b      	ldrh	r3, [r1, #12]
 801c1ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c1d0:	079d      	lsls	r5, r3, #30
 801c1d2:	4606      	mov	r6, r0
 801c1d4:	460c      	mov	r4, r1
 801c1d6:	d507      	bpl.n	801c1e8 <__smakebuf_r+0x1c>
 801c1d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801c1dc:	6023      	str	r3, [r4, #0]
 801c1de:	6123      	str	r3, [r4, #16]
 801c1e0:	2301      	movs	r3, #1
 801c1e2:	6163      	str	r3, [r4, #20]
 801c1e4:	b003      	add	sp, #12
 801c1e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c1e8:	ab01      	add	r3, sp, #4
 801c1ea:	466a      	mov	r2, sp
 801c1ec:	f7ff ffc8 	bl	801c180 <__swhatbuf_r>
 801c1f0:	9f00      	ldr	r7, [sp, #0]
 801c1f2:	4605      	mov	r5, r0
 801c1f4:	4639      	mov	r1, r7
 801c1f6:	4630      	mov	r0, r6
 801c1f8:	f7fd fa20 	bl	801963c <_malloc_r>
 801c1fc:	b948      	cbnz	r0, 801c212 <__smakebuf_r+0x46>
 801c1fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c202:	059a      	lsls	r2, r3, #22
 801c204:	d4ee      	bmi.n	801c1e4 <__smakebuf_r+0x18>
 801c206:	f023 0303 	bic.w	r3, r3, #3
 801c20a:	f043 0302 	orr.w	r3, r3, #2
 801c20e:	81a3      	strh	r3, [r4, #12]
 801c210:	e7e2      	b.n	801c1d8 <__smakebuf_r+0xc>
 801c212:	89a3      	ldrh	r3, [r4, #12]
 801c214:	6020      	str	r0, [r4, #0]
 801c216:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c21a:	81a3      	strh	r3, [r4, #12]
 801c21c:	9b01      	ldr	r3, [sp, #4]
 801c21e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801c222:	b15b      	cbz	r3, 801c23c <__smakebuf_r+0x70>
 801c224:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c228:	4630      	mov	r0, r6
 801c22a:	f000 f81d 	bl	801c268 <_isatty_r>
 801c22e:	b128      	cbz	r0, 801c23c <__smakebuf_r+0x70>
 801c230:	89a3      	ldrh	r3, [r4, #12]
 801c232:	f023 0303 	bic.w	r3, r3, #3
 801c236:	f043 0301 	orr.w	r3, r3, #1
 801c23a:	81a3      	strh	r3, [r4, #12]
 801c23c:	89a3      	ldrh	r3, [r4, #12]
 801c23e:	431d      	orrs	r5, r3
 801c240:	81a5      	strh	r5, [r4, #12]
 801c242:	e7cf      	b.n	801c1e4 <__smakebuf_r+0x18>

0801c244 <_fstat_r>:
 801c244:	b538      	push	{r3, r4, r5, lr}
 801c246:	4d07      	ldr	r5, [pc, #28]	@ (801c264 <_fstat_r+0x20>)
 801c248:	2300      	movs	r3, #0
 801c24a:	4604      	mov	r4, r0
 801c24c:	4608      	mov	r0, r1
 801c24e:	4611      	mov	r1, r2
 801c250:	602b      	str	r3, [r5, #0]
 801c252:	f7ea fe39 	bl	8006ec8 <_fstat>
 801c256:	1c43      	adds	r3, r0, #1
 801c258:	d102      	bne.n	801c260 <_fstat_r+0x1c>
 801c25a:	682b      	ldr	r3, [r5, #0]
 801c25c:	b103      	cbz	r3, 801c260 <_fstat_r+0x1c>
 801c25e:	6023      	str	r3, [r4, #0]
 801c260:	bd38      	pop	{r3, r4, r5, pc}
 801c262:	bf00      	nop
 801c264:	200027a8 	.word	0x200027a8

0801c268 <_isatty_r>:
 801c268:	b538      	push	{r3, r4, r5, lr}
 801c26a:	4d06      	ldr	r5, [pc, #24]	@ (801c284 <_isatty_r+0x1c>)
 801c26c:	2300      	movs	r3, #0
 801c26e:	4604      	mov	r4, r0
 801c270:	4608      	mov	r0, r1
 801c272:	602b      	str	r3, [r5, #0]
 801c274:	f7ea fe38 	bl	8006ee8 <_isatty>
 801c278:	1c43      	adds	r3, r0, #1
 801c27a:	d102      	bne.n	801c282 <_isatty_r+0x1a>
 801c27c:	682b      	ldr	r3, [r5, #0]
 801c27e:	b103      	cbz	r3, 801c282 <_isatty_r+0x1a>
 801c280:	6023      	str	r3, [r4, #0]
 801c282:	bd38      	pop	{r3, r4, r5, pc}
 801c284:	200027a8 	.word	0x200027a8

0801c288 <_malloc_usable_size_r>:
 801c288:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c28c:	1f18      	subs	r0, r3, #4
 801c28e:	2b00      	cmp	r3, #0
 801c290:	bfbc      	itt	lt
 801c292:	580b      	ldrlt	r3, [r1, r0]
 801c294:	18c0      	addlt	r0, r0, r3
 801c296:	4770      	bx	lr

0801c298 <_init>:
 801c298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c29a:	bf00      	nop
 801c29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c29e:	bc08      	pop	{r3}
 801c2a0:	469e      	mov	lr, r3
 801c2a2:	4770      	bx	lr

0801c2a4 <_fini>:
 801c2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c2a6:	bf00      	nop
 801c2a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c2aa:	bc08      	pop	{r3}
 801c2ac:	469e      	mov	lr, r3
 801c2ae:	4770      	bx	lr
