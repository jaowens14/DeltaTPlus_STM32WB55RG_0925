
DeltaTPlus_STM32WB55RG_090525.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b5e0  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000189c  0801b720  0801b720  0001c720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801cfbc  0801cfbc  0001dfbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0801cfc4  0801cfc4  0001dfc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000008  0801cfcc  0801cfcc  0001dfcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000304  20000008  0801cfd4  0001e008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  2000030c  0801d2d8  0001e30c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000344  0801d30d  0001e344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023c8  20000358  0801d31e  0001e358  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  20002720  0801d31e  0001e720  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001fa67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00020000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00020000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0801d31e  0001f1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0007dd68  00000000  00000000  0001fa97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000dc60  00000000  00000000  0009d7ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00004308  00000000  00000000  000ab460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000033c0  00000000  00000000  000af768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003bc69  00000000  00000000  000b2b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0005e45d  00000000  00000000  000ee791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00121d4e  00000000  00000000  0014cbee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0026e93c  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00012cc8  00000000  00000000  0026e980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000008f  00000000  00000000  00281648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000358 	.word	0x20000358
 800015c:	00000000 	.word	0x00000000
 8000160:	0801b708 	.word	0x0801b708

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000035c 	.word	0x2000035c
 800017c:	0801b708 	.word	0x0801b708

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <_ZN23Adafruit_MAX17048_STM32C1Ev>:

#include "Adafruit_MAX1704X.h"

#include <math.h>

Adafruit_MAX17048_STM32::Adafruit_MAX17048_STM32()
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
{
  _hi2c = nullptr;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
  _i2c_addr = MAX17048_I2CADDR_DEFAULT << 1; // STM32 HAL uses 8-bit address
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	226c      	movs	r2, #108	@ 0x6c
 8000f36:	809a      	strh	r2, [r3, #4]
  _timeout = 1000;                           // 1 second timeout
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f3e:	609a      	str	r2, [r3, #8]
}
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4618      	mov	r0, r3
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <_ZN23Adafruit_MAX17048_STM325beginEP19__I2C_HandleTypeDeft>:

bool Adafruit_MAX17048_STM32::begin(I2C_HandleTypeDef *hi2c, uint16_t i2c_addr)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b084      	sub	sp, #16
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	60f8      	str	r0, [r7, #12]
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	80fb      	strh	r3, [r7, #6]
  _hi2c = hi2c;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	601a      	str	r2, [r3, #0]
  _i2c_addr = i2c_addr << 1; // Convert to 8-bit address for HAL
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	809a      	strh	r2, [r3, #4]

  if (!isDeviceReady())
 8000f6c:	68f8      	ldr	r0, [r7, #12]
 8000f6e:	f000 f92d 	bl	80011cc <_ZN23Adafruit_MAX17048_STM3213isDeviceReadyEv>
 8000f72:	4603      	mov	r3, r0
 8000f74:	f083 0301 	eor.w	r3, r3, #1
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <_ZN23Adafruit_MAX17048_STM325beginEP19__I2C_HandleTypeDeft+0x34>
  {
    return false;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e013      	b.n	8000faa <_ZN23Adafruit_MAX17048_STM325beginEP19__I2C_HandleTypeDeft+0x5c>
  }

  if (!reset())
 8000f82:	68f8      	ldr	r0, [r7, #12]
 8000f84:	f000 f937 	bl	80011f6 <_ZN23Adafruit_MAX17048_STM325resetEv>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	f083 0301 	eor.w	r3, r3, #1
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <_ZN23Adafruit_MAX17048_STM325beginEP19__I2C_HandleTypeDeft+0x4a>
  {
    return false;
 8000f94:	2300      	movs	r3, #0
 8000f96:	e008      	b.n	8000faa <_ZN23Adafruit_MAX17048_STM325beginEP19__I2C_HandleTypeDeft+0x5c>
  }

  enableSleep(false);
 8000f98:	2100      	movs	r1, #0
 8000f9a:	68f8      	ldr	r0, [r7, #12]
 8000f9c:	f000 f9c1 	bl	8001322 <_ZN23Adafruit_MAX17048_STM3211enableSleepEb>
  sleep(false);
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	68f8      	ldr	r0, [r7, #12]
 8000fa4:	f000 f9a6 	bl	80012f4 <_ZN23Adafruit_MAX17048_STM325sleepEb>

  return true;
 8000fa8:	2301      	movs	r3, #1
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <_ZN23Adafruit_MAX17048_STM3214writeRegister8Ehh>:

bool Adafruit_MAX17048_STM32::writeRegister8(uint8_t reg, uint8_t value)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b086      	sub	sp, #24
 8000fb6:	af02      	add	r7, sp, #8
 8000fb8:	6078      	str	r0, [r7, #4]
 8000fba:	460b      	mov	r3, r1
 8000fbc:	70fb      	strb	r3, [r7, #3]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	70bb      	strb	r3, [r7, #2]
  uint8_t data[2] = {reg, value};
 8000fc2:	78fb      	ldrb	r3, [r7, #3]
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	78bb      	ldrb	r3, [r7, #2]
 8000fc8:	737b      	strb	r3, [r7, #13]
  HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(_hi2c, _i2c_addr, data, 2, _timeout);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6818      	ldr	r0, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	8899      	ldrh	r1, [r3, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	f107 020c 	add.w	r2, r7, #12
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2302      	movs	r3, #2
 8000fde:	f006 fd2f 	bl	8007a40 <HAL_I2C_Master_Transmit>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	73fb      	strb	r3, [r7, #15]
  return (status == HAL_OK);
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	bf0c      	ite	eq
 8000fec:	2301      	moveq	r3, #1
 8000fee:	2300      	movne	r3, #0
 8000ff0:	b2db      	uxtb	r3, r3
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <_ZN23Adafruit_MAX17048_STM3215writeRegister16Eht>:

bool Adafruit_MAX17048_STM32::writeRegister16(uint8_t reg, uint16_t value)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b086      	sub	sp, #24
 8000ffe:	af02      	add	r7, sp, #8
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	460b      	mov	r3, r1
 8001004:	70fb      	strb	r3, [r7, #3]
 8001006:	4613      	mov	r3, r2
 8001008:	803b      	strh	r3, [r7, #0]
  uint8_t data[3] = {reg, (uint8_t)(value >> 8), (uint8_t)(value & 0xFF)};
 800100a:	78fb      	ldrb	r3, [r7, #3]
 800100c:	733b      	strb	r3, [r7, #12]
 800100e:	883b      	ldrh	r3, [r7, #0]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	b29b      	uxth	r3, r3
 8001014:	b2db      	uxtb	r3, r3
 8001016:	737b      	strb	r3, [r7, #13]
 8001018:	883b      	ldrh	r3, [r7, #0]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	73bb      	strb	r3, [r7, #14]
  HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(_hi2c, _i2c_addr, data, 3, _timeout);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6818      	ldr	r0, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	8899      	ldrh	r1, [r3, #4]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f107 020c 	add.w	r2, r7, #12
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2303      	movs	r3, #3
 8001032:	f006 fd05 	bl	8007a40 <HAL_I2C_Master_Transmit>
 8001036:	4603      	mov	r3, r0
 8001038:	73fb      	strb	r3, [r7, #15]
  return (status == HAL_OK);
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	2b00      	cmp	r3, #0
 800103e:	bf0c      	ite	eq
 8001040:	2301      	moveq	r3, #1
 8001042:	2300      	movne	r3, #0
 8001044:	b2db      	uxtb	r3, r3
}
 8001046:	4618      	mov	r0, r3
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <_ZN23Adafruit_MAX17048_STM3213readRegister8Eh>:

uint8_t Adafruit_MAX17048_STM32::readRegister8(uint8_t reg)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b086      	sub	sp, #24
 8001052:	af02      	add	r7, sp, #8
 8001054:	6078      	str	r0, [r7, #4]
 8001056:	460b      	mov	r3, r1
 8001058:	70fb      	strb	r3, [r7, #3]
  uint8_t data = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	73fb      	strb	r3, [r7, #15]

  // Write register address
  if (HAL_I2C_Master_Transmit(_hi2c, _i2c_addr, &reg, 1, _timeout) != HAL_OK)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6818      	ldr	r0, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	8899      	ldrh	r1, [r3, #4]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	1cfa      	adds	r2, r7, #3
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2301      	movs	r3, #1
 8001070:	f006 fce6 	bl	8007a40 <HAL_I2C_Master_Transmit>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	bf14      	ite	ne
 800107a:	2301      	movne	r3, #1
 800107c:	2300      	moveq	r3, #0
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <_ZN23Adafruit_MAX17048_STM3213readRegister8Eh+0x3a>
  {
    return 0;
 8001084:	2300      	movs	r3, #0
 8001086:	e00c      	b.n	80010a2 <_ZN23Adafruit_MAX17048_STM3213readRegister8Eh+0x54>
  }

  // Read data
  HAL_I2C_Master_Receive(_hi2c, _i2c_addr, &data, 1, _timeout);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6818      	ldr	r0, [r3, #0]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	8899      	ldrh	r1, [r3, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	f107 020f 	add.w	r2, r7, #15
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2301      	movs	r3, #1
 800109c:	f006 fde8 	bl	8007c70 <HAL_I2C_Master_Receive>

  return data;
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <_ZN23Adafruit_MAX17048_STM3214readRegister16Eh>:

uint16_t Adafruit_MAX17048_STM32::readRegister16(uint8_t reg)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b086      	sub	sp, #24
 80010ae:	af02      	add	r7, sp, #8
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	460b      	mov	r3, r1
 80010b4:	70fb      	strb	r3, [r7, #3]
  uint8_t data[2] = {0, 0};
 80010b6:	2300      	movs	r3, #0
 80010b8:	81bb      	strh	r3, [r7, #12]

  // Write register address
  if (HAL_I2C_Master_Transmit(_hi2c, _i2c_addr, &reg, 1, _timeout) != HAL_OK)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6818      	ldr	r0, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	8899      	ldrh	r1, [r3, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	1cfa      	adds	r2, r7, #3
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2301      	movs	r3, #1
 80010cc:	f006 fcb8 	bl	8007a40 <HAL_I2C_Master_Transmit>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	bf14      	ite	ne
 80010d6:	2301      	movne	r3, #1
 80010d8:	2300      	moveq	r3, #0
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <_ZN23Adafruit_MAX17048_STM3214readRegister16Eh+0x3a>
  {
    return 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	e01e      	b.n	8001122 <_ZN23Adafruit_MAX17048_STM3214readRegister16Eh+0x78>
  }

  // Read data
  if (HAL_I2C_Master_Receive(_hi2c, _i2c_addr, data, 2, _timeout) != HAL_OK)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6818      	ldr	r0, [r3, #0]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	8899      	ldrh	r1, [r3, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f107 020c 	add.w	r2, r7, #12
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2302      	movs	r3, #2
 80010f8:	f006 fdba 	bl	8007c70 <HAL_I2C_Master_Receive>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	bf14      	ite	ne
 8001102:	2301      	movne	r3, #1
 8001104:	2300      	moveq	r3, #0
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <_ZN23Adafruit_MAX17048_STM3214readRegister16Eh+0x66>
  {
    return 0;
 800110c:	2300      	movs	r3, #0
 800110e:	e008      	b.n	8001122 <_ZN23Adafruit_MAX17048_STM3214readRegister16Eh+0x78>
  }

  return (data[0] << 8) | data[1]; // MSB first
 8001110:	7b3b      	ldrb	r3, [r7, #12]
 8001112:	b21b      	sxth	r3, r3
 8001114:	021b      	lsls	r3, r3, #8
 8001116:	b21a      	sxth	r2, r3
 8001118:	7b7b      	ldrb	r3, [r7, #13]
 800111a:	b21b      	sxth	r3, r3
 800111c:	4313      	orrs	r3, r2
 800111e:	b21b      	sxth	r3, r3
 8001120:	b29b      	uxth	r3, r3
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <_ZN23Adafruit_MAX17048_STM329writeBitsEhhhh>:

bool Adafruit_MAX17048_STM32::writeBits(uint8_t reg, uint8_t bitStart, uint8_t length, uint8_t data)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b084      	sub	sp, #16
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	4608      	mov	r0, r1
 8001134:	4611      	mov	r1, r2
 8001136:	461a      	mov	r2, r3
 8001138:	4603      	mov	r3, r0
 800113a:	70fb      	strb	r3, [r7, #3]
 800113c:	460b      	mov	r3, r1
 800113e:	70bb      	strb	r3, [r7, #2]
 8001140:	4613      	mov	r3, r2
 8001142:	707b      	strb	r3, [r7, #1]
  uint8_t regValue = readRegister8(reg);
 8001144:	78fb      	ldrb	r3, [r7, #3]
 8001146:	4619      	mov	r1, r3
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff80 	bl	800104e <_ZN23Adafruit_MAX17048_STM3213readRegister8Eh>
 800114e:	4603      	mov	r3, r0
 8001150:	73fb      	strb	r3, [r7, #15]
  uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 8001152:	787b      	ldrb	r3, [r7, #1]
 8001154:	2201      	movs	r2, #1
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	1e5a      	subs	r2, r3, #1
 800115c:	78b9      	ldrb	r1, [r7, #2]
 800115e:	787b      	ldrb	r3, [r7, #1]
 8001160:	1acb      	subs	r3, r1, r3
 8001162:	3301      	adds	r3, #1
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	73bb      	strb	r3, [r7, #14]
  data <<= (bitStart - length + 1);
 800116a:	7e3a      	ldrb	r2, [r7, #24]
 800116c:	78b9      	ldrb	r1, [r7, #2]
 800116e:	787b      	ldrb	r3, [r7, #1]
 8001170:	1acb      	subs	r3, r1, r3
 8001172:	3301      	adds	r3, #1
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	763b      	strb	r3, [r7, #24]
  data &= mask;
 800117a:	7e3a      	ldrb	r2, [r7, #24]
 800117c:	7bbb      	ldrb	r3, [r7, #14]
 800117e:	4013      	ands	r3, r2
 8001180:	763b      	strb	r3, [r7, #24]
  regValue &= ~mask;
 8001182:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001186:	43db      	mvns	r3, r3
 8001188:	b25a      	sxtb	r2, r3
 800118a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118e:	4013      	ands	r3, r2
 8001190:	b25b      	sxtb	r3, r3
 8001192:	73fb      	strb	r3, [r7, #15]
  regValue |= data;
 8001194:	7bfa      	ldrb	r2, [r7, #15]
 8001196:	7e3b      	ldrb	r3, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	73fb      	strb	r3, [r7, #15]
  return writeRegister8(reg, regValue);
 800119c:	7bfa      	ldrb	r2, [r7, #15]
 800119e:	78fb      	ldrb	r3, [r7, #3]
 80011a0:	4619      	mov	r1, r3
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ff05 	bl	8000fb2 <_ZN23Adafruit_MAX17048_STM3214writeRegister8Ehh>
 80011a8:	4603      	mov	r3, r0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <_ZN23Adafruit_MAX17048_STM3212getICversionEv>:
  regValue >>= (bitStart - length + 1);
  return regValue;
}

uint16_t Adafruit_MAX17048_STM32::getICversion(void)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
  return readRegister16(MAX1704X_VERSION_REG);
 80011ba:	2108      	movs	r1, #8
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff ff74 	bl	80010aa <_ZN23Adafruit_MAX17048_STM3214readRegister16Eh>
 80011c2:	4603      	mov	r3, r0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <_ZN23Adafruit_MAX17048_STM3213isDeviceReadyEv>:
{
  return readRegister8(MAX1704X_CHIPID_REG);
}

bool Adafruit_MAX17048_STM32::isDeviceReady(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  return (getICversion() & 0xFFF0) == 0x0010;
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ffec 	bl	80011b2 <_ZN23Adafruit_MAX17048_STM3212getICversionEv>
 80011da:	4603      	mov	r3, r0
 80011dc:	461a      	mov	r2, r3
 80011de:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80011e2:	4013      	ands	r3, r2
 80011e4:	2b10      	cmp	r3, #16
 80011e6:	bf0c      	ite	eq
 80011e8:	2301      	moveq	r3, #1
 80011ea:	2300      	movne	r3, #0
 80011ec:	b2db      	uxtb	r3, r3
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <_ZN23Adafruit_MAX17048_STM325resetEv>:

bool Adafruit_MAX17048_STM32::reset(void)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b084      	sub	sp, #16
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
  // Send reset command - expect this to fail with NACK as chip resets
  writeRegister16(MAX1704X_CMD_REG, 0x5400);
 80011fe:	f44f 42a8 	mov.w	r2, #21504	@ 0x5400
 8001202:	21fe      	movs	r1, #254	@ 0xfe
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff fef8 	bl	8000ffa <_ZN23Adafruit_MAX17048_STM3215writeRegister16Eht>

  // Wait for reset to complete
  HAL_Delay(100);
 800120a:	2064      	movs	r0, #100	@ 0x64
 800120c:	f003 fd9b 	bl	8004d46 <HAL_Delay>

  // Try to clear reset flag
  for (uint8_t retries = 0; retries < 3; retries++)
 8001210:	2300      	movs	r3, #0
 8001212:	73fb      	strb	r3, [r7, #15]
 8001214:	e00e      	b.n	8001234 <_ZN23Adafruit_MAX17048_STM325resetEv+0x3e>
  {
    if (clearAlertFlag(MAX1704X_ALERTFLAG_RESET_INDICATOR))
 8001216:	2101      	movs	r1, #1
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f000 f813 	bl	8001244 <_ZN23Adafruit_MAX17048_STM3214clearAlertFlagEh>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <_ZN23Adafruit_MAX17048_STM325resetEv+0x32>
    {
      return true;
 8001224:	2301      	movs	r3, #1
 8001226:	e009      	b.n	800123c <_ZN23Adafruit_MAX17048_STM325resetEv+0x46>
    }
    HAL_Delay(50);
 8001228:	2032      	movs	r0, #50	@ 0x32
 800122a:	f003 fd8c 	bl	8004d46 <HAL_Delay>
  for (uint8_t retries = 0; retries < 3; retries++)
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	3301      	adds	r3, #1
 8001232:	73fb      	strb	r3, [r7, #15]
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	2b02      	cmp	r3, #2
 8001238:	d9ed      	bls.n	8001216 <_ZN23Adafruit_MAX17048_STM325resetEv+0x20>
  }

  return false;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <_ZN23Adafruit_MAX17048_STM3214clearAlertFlagEh>:

bool Adafruit_MAX17048_STM32::clearAlertFlag(uint8_t flags)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	70fb      	strb	r3, [r7, #3]
  uint8_t status = readRegister8(MAX1704X_STATUS_REG);
 8001250:	211a      	movs	r1, #26
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff fefb 	bl	800104e <_ZN23Adafruit_MAX17048_STM3213readRegister8Eh>
 8001258:	4603      	mov	r3, r0
 800125a:	73fb      	strb	r3, [r7, #15]
  status &= ~flags;
 800125c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001260:	43db      	mvns	r3, r3
 8001262:	b25a      	sxtb	r2, r3
 8001264:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001268:	4013      	ands	r3, r2
 800126a:	b25b      	sxtb	r3, r3
 800126c:	73fb      	strb	r3, [r7, #15]
  return writeRegister8(MAX1704X_STATUS_REG, status);
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	461a      	mov	r2, r3
 8001272:	211a      	movs	r1, #26
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff fe9c 	bl	8000fb2 <_ZN23Adafruit_MAX17048_STM3214writeRegister8Ehh>
 800127a:	4603      	mov	r3, r0
}
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	0000      	movs	r0, r0
	...

08001288 <_ZN23Adafruit_MAX17048_STM3210chargeRateEv>:
  uint16_t percent = readRegister16(MAX1704X_SOC_REG);
  return percent / 256.0; // Convert to percentage
}

float Adafruit_MAX17048_STM32::chargeRate(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  if (!isDeviceReady())
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ff9b 	bl	80011cc <_ZN23Adafruit_MAX17048_STM3213isDeviceReadyEv>
 8001296:	4603      	mov	r3, r0
 8001298:	f083 0301 	eor.w	r3, r3, #1
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <_ZN23Adafruit_MAX17048_STM3210chargeRateEv+0x1e>
  {
    return NAN;
 80012a2:	4b13      	ldr	r3, [pc, #76]	@ (80012f0 <_ZN23Adafruit_MAX17048_STM3210chargeRateEv+0x68>)
 80012a4:	e016      	b.n	80012d4 <_ZN23Adafruit_MAX17048_STM3210chargeRateEv+0x4c>
  }

  int16_t rate = (int16_t)readRegister16(MAX1704X_CRATE_REG);
 80012a6:	2116      	movs	r1, #22
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff fefe 	bl	80010aa <_ZN23Adafruit_MAX17048_STM3214readRegister16Eh>
 80012ae:	4603      	mov	r3, r0
 80012b0:	81fb      	strh	r3, [r7, #14]
  return rate * 0.208; // Convert to %/hour
 80012b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f90c 	bl	80004d4 <__aeabi_i2d>
 80012bc:	a30a      	add	r3, pc, #40	@ (adr r3, 80012e8 <_ZN23Adafruit_MAX17048_STM3210chargeRateEv+0x60>)
 80012be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c2:	f7ff f971 	bl	80005a8 <__aeabi_dmul>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	f7ff fc43 	bl	8000b58 <__aeabi_d2f>
 80012d2:	4603      	mov	r3, r0
}
 80012d4:	ee07 3a90 	vmov	s15, r3
 80012d8:	eeb0 0a67 	vmov.f32	s0, s15
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	f3af 8000 	nop.w
 80012e8:	76c8b439 	.word	0x76c8b439
 80012ec:	3fca9fbe 	.word	0x3fca9fbe
 80012f0:	7fc00000 	.word	0x7fc00000

080012f4 <_ZN23Adafruit_MAX17048_STM325sleepEb>:
  writeRegister8(MAX1704X_HIBRT_REG, 0x00);
  writeRegister8(MAX1704X_HIBRT_REG + 1, 0x00);
}

void Adafruit_MAX17048_STM32::sleep(bool s)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	70fb      	strb	r3, [r7, #3]
  writeBits(MAX1704X_CONFIG_REG, 7, 1, s ? 1 : 0);
 8001300:	78fb      	ldrb	r3, [r7, #3]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <_ZN23Adafruit_MAX17048_STM325sleepEb+0x16>
 8001306:	2301      	movs	r3, #1
 8001308:	e000      	b.n	800130c <_ZN23Adafruit_MAX17048_STM325sleepEb+0x18>
 800130a:	2300      	movs	r3, #0
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	2301      	movs	r3, #1
 8001310:	2207      	movs	r2, #7
 8001312:	210c      	movs	r1, #12
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff ff08 	bl	800112a <_ZN23Adafruit_MAX17048_STM329writeBitsEhhhh>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <_ZN23Adafruit_MAX17048_STM3211enableSleepEb>:

void Adafruit_MAX17048_STM32::enableSleep(bool en)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b084      	sub	sp, #16
 8001326:	af02      	add	r7, sp, #8
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	460b      	mov	r3, r1
 800132c:	70fb      	strb	r3, [r7, #3]
  writeBits(MAX1704X_MODE_REG, 5, 1, en ? 1 : 0);
 800132e:	78fb      	ldrb	r3, [r7, #3]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <_ZN23Adafruit_MAX17048_STM3211enableSleepEb+0x16>
 8001334:	2301      	movs	r3, #1
 8001336:	e000      	b.n	800133a <_ZN23Adafruit_MAX17048_STM3211enableSleepEb+0x18>
 8001338:	2300      	movs	r3, #0
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2301      	movs	r3, #1
 800133e:	2205      	movs	r2, #5
 8001340:	2106      	movs	r1, #6
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff fef1 	bl	800112a <_ZN23Adafruit_MAX17048_STM329writeBitsEhhhh>
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <_ZN23Adafruit_MAX17048_STM3210quickStartEv>:

void Adafruit_MAX17048_STM32::quickStart(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af02      	add	r7, sp, #8
 8001356:	6078      	str	r0, [r7, #4]
  writeBits(MAX1704X_MODE_REG, 6, 1, 1);
 8001358:	2301      	movs	r3, #1
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2301      	movs	r3, #1
 800135e:	2206      	movs	r2, #6
 8001360:	2106      	movs	r1, #6
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff fee1 	bl	800112a <_ZN23Adafruit_MAX17048_STM329writeBitsEhhhh>
  // Bit is automatically cleared by the chip
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	4a06      	ldr	r2, [pc, #24]	@ (8001394 <_ZN5PrintC1Ev+0x24>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4618      	mov	r0, r3
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	0801be64 	.word	0x0801be64

08001398 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overridden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	2300      	movs	r3, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <_ZN12Adafruit_GFX9setCursorEss>:
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
 80013ca:	460b      	mov	r3, r1
 80013cc:	807b      	strh	r3, [r7, #2]
 80013ce:	4613      	mov	r3, r2
 80013d0:	803b      	strh	r3, [r7, #0]
    cursor_x = x;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	887a      	ldrh	r2, [r7, #2]
 80013d6:	821a      	strh	r2, [r3, #16]
    cursor_y = y;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	883a      	ldrh	r2, [r7, #0]
 80013dc:	825a      	strh	r2, [r3, #18]
  }
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <_ZN12Adafruit_GFX12setTextColorEt>:
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	460b      	mov	r3, r1
 80013f4:	807b      	strh	r3, [r7, #2]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	887a      	ldrh	r2, [r7, #2]
 80013fa:	82da      	strh	r2, [r3, #22]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	8ada      	ldrh	r2, [r3, #22]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	829a      	strh	r2, [r3, #20]
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <_ZNK12Adafruit_GFX5widthEv>:
  /*!
    @brief      Get width of the display, accounting for current rotation
    @returns    Width in pixels
  */
  /************************************************************************/
  int16_t width(void) const { return _width; };
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <_ZNK12Adafruit_GFX6heightEv>:
  /*!
    @brief      Get height of the display, accounting for current rotation
    @returns    Height in pixels
  */
  /************************************************************************/
  int16_t height(void) const { return _height; }
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <_ZNK12Adafruit_GFX11getRotationEv>:
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	7e9b      	ldrb	r3, [r3, #26]
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <_Z18pgm_read_glyph_ptrPK7GFXfonth>:
#define pgm_read_pointer(addr) ((void *)pgm_read_dword(addr))
#else
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	70fb      	strb	r3, [r7, #3]
#else
  // expression in __AVR__ section may generate "dereferencing type-punned
  // pointer will break strict-aliasing rules" warning In fact, on other
  // platforms (such as STM32) there is no need to do this pointer magic as
  // program memory may be read in a usual way So expression may be simplified
  return gfxFont->glyph + c;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	78fb      	ldrb	r3, [r7, #3]
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	4413      	add	r3, r2
#endif //__AVR__
}
 8001472:	4618      	mov	r0, r3
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <_Z19pgm_read_bitmap_ptrPK7GFXfont>:

inline uint8_t *pgm_read_bitmap_ptr(const GFXfont *gfxFont) {
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
#else
  // expression in __AVR__ section generates "dereferencing type-punned pointer
  // will break strict-aliasing rules" warning In fact, on other platforms (such
  // as STM32) there is no need to do this pointer magic as program memory may
  // be read in a usual way So expression may be simplified
  return gfxFont->bitmap;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
#endif //__AVR__
}
 800148a:	4618      	mov	r0, r3
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
	...

08001498 <_ZN12Adafruit_GFXC1Ess>:
   superclass
   @param    w   Display width, in pixels
   @param    h   Display height, in pixels
*/
/**************************************************************************/
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	807b      	strh	r3, [r7, #2]
 80014a4:	4613      	mov	r3, r2
 80014a6:	803b      	strh	r3, [r7, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff ff60 	bl	8001370 <_ZN5PrintC1Ev>
 80014b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001528 <_ZN12Adafruit_GFXC1Ess+0x90>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	887a      	ldrh	r2, [r7, #2]
 80014ba:	811a      	strh	r2, [r3, #8]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	883a      	ldrh	r2, [r7, #0]
 80014c0:	815a      	strh	r2, [r3, #10]
  _width = WIDTH;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	819a      	strh	r2, [r3, #12]
  _height = HEIGHT;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	81da      	strh	r2, [r3, #14]
  rotation = 0;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	769a      	strb	r2, [r3, #26]
  cursor_y = cursor_x = 0;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	821a      	strh	r2, [r3, #16]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	825a      	strh	r2, [r3, #18]
  textsize_x = textsize_y = 1;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	765a      	strb	r2, [r3, #25]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	7e5a      	ldrb	r2, [r3, #25]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	761a      	strb	r2, [r3, #24]
  textcolor = textbgcolor = 0xFFFF;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001500:	82da      	strh	r2, [r3, #22]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	8ada      	ldrh	r2, [r3, #22]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	829a      	strh	r2, [r3, #20]
  wrap = true;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	76da      	strb	r2, [r3, #27]
  _cp437 = false;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	771a      	strb	r2, [r3, #28]
  gfxFont = NULL;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	621a      	str	r2, [r3, #32]
}
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	0801be0c 	.word	0x0801be0c

0800152c <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                             uint16_t color) {
 800152c:	b590      	push	{r4, r7, lr}
 800152e:	b08b      	sub	sp, #44	@ 0x2c
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	4608      	mov	r0, r1
 8001536:	4611      	mov	r1, r2
 8001538:	461a      	mov	r2, r3
 800153a:	4603      	mov	r3, r0
 800153c:	817b      	strh	r3, [r7, #10]
 800153e:	460b      	mov	r3, r1
 8001540:	813b      	strh	r3, [r7, #8]
 8001542:	4613      	mov	r3, r2
 8001544:	80fb      	strh	r3, [r7, #6]
#if defined(ESP8266)
  yield();
#endif
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8001546:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	@ 0x38
 800154a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001554:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001558:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800155c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001560:	1acb      	subs	r3, r1, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	bfb8      	it	lt
 8001566:	425b      	neglt	r3, r3
 8001568:	429a      	cmp	r2, r3
 800156a:	bfcc      	ite	gt
 800156c:	2301      	movgt	r3, #1
 800156e:	2300      	movle	r3, #0
 8001570:	b2db      	uxtb	r3, r3
 8001572:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (steep) {
 8001574:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001578:	2b00      	cmp	r3, #0
 800157a:	d00b      	beq.n	8001594 <_ZN12Adafruit_GFX9writeLineEsssst+0x68>
    _swap_int16_t(x0, y0);
 800157c:	897b      	ldrh	r3, [r7, #10]
 800157e:	843b      	strh	r3, [r7, #32]
 8001580:	893b      	ldrh	r3, [r7, #8]
 8001582:	817b      	strh	r3, [r7, #10]
 8001584:	8c3b      	ldrh	r3, [r7, #32]
 8001586:	813b      	strh	r3, [r7, #8]
    _swap_int16_t(x1, y1);
 8001588:	88fb      	ldrh	r3, [r7, #6]
 800158a:	83fb      	strh	r3, [r7, #30]
 800158c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800158e:	80fb      	strh	r3, [r7, #6]
 8001590:	8bfb      	ldrh	r3, [r7, #30]
 8001592:	873b      	strh	r3, [r7, #56]	@ 0x38
  }

  if (x0 > x1) {
 8001594:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001598:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800159c:	429a      	cmp	r2, r3
 800159e:	dd0b      	ble.n	80015b8 <_ZN12Adafruit_GFX9writeLineEsssst+0x8c>
    _swap_int16_t(x0, x1);
 80015a0:	897b      	ldrh	r3, [r7, #10]
 80015a2:	83bb      	strh	r3, [r7, #28]
 80015a4:	88fb      	ldrh	r3, [r7, #6]
 80015a6:	817b      	strh	r3, [r7, #10]
 80015a8:	8bbb      	ldrh	r3, [r7, #28]
 80015aa:	80fb      	strh	r3, [r7, #6]
    _swap_int16_t(y0, y1);
 80015ac:	893b      	ldrh	r3, [r7, #8]
 80015ae:	837b      	strh	r3, [r7, #26]
 80015b0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80015b2:	813b      	strh	r3, [r7, #8]
 80015b4:	8b7b      	ldrh	r3, [r7, #26]
 80015b6:	873b      	strh	r3, [r7, #56]	@ 0x38
  }

  int16_t dx, dy;
  dx = x1 - x0;
 80015b8:	88fa      	ldrh	r2, [r7, #6]
 80015ba:	897b      	ldrh	r3, [r7, #10]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	b29b      	uxth	r3, r3
 80015c0:	833b      	strh	r3, [r7, #24]
  dy = abs(y1 - y0);
 80015c2:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	@ 0x38
 80015c6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	bfb8      	it	lt
 80015d0:	425b      	neglt	r3, r3
 80015d2:	82fb      	strh	r3, [r7, #22]

  int16_t err = dx / 2;
 80015d4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80015d8:	0fda      	lsrs	r2, r3, #31
 80015da:	4413      	add	r3, r2
 80015dc:	105b      	asrs	r3, r3, #1
 80015de:	84fb      	strh	r3, [r7, #38]	@ 0x26
  int16_t ystep;

  if (y0 < y1) {
 80015e0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80015e4:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 80015e8:	429a      	cmp	r2, r3
 80015ea:	da02      	bge.n	80015f2 <_ZN12Adafruit_GFX9writeLineEsssst+0xc6>
    ystep = 1;
 80015ec:	2301      	movs	r3, #1
 80015ee:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80015f0:	e037      	b.n	8001662 <_ZN12Adafruit_GFX9writeLineEsssst+0x136>
  } else {
    ystep = -1;
 80015f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015f6:	84bb      	strh	r3, [r7, #36]	@ 0x24
  }

  for (; x0 <= x1; x0++) {
 80015f8:	e033      	b.n	8001662 <_ZN12Adafruit_GFX9writeLineEsssst+0x136>
    if (steep) {
 80015fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00b      	beq.n	800161a <_ZN12Adafruit_GFX9writeLineEsssst+0xee>
      writePixel(y0, x0, color);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	3318      	adds	r3, #24
 8001608:	681c      	ldr	r4, [r3, #0]
 800160a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800160c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001610:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	47a0      	blx	r4
 8001618:	e00a      	b.n	8001630 <_ZN12Adafruit_GFX9writeLineEsssst+0x104>
    } else {
      writePixel(x0, y0, color);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	3318      	adds	r3, #24
 8001620:	681c      	ldr	r4, [r3, #0]
 8001622:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001624:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001628:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	47a0      	blx	r4
    }
    err -= dy;
 8001630:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001632:	8afb      	ldrh	r3, [r7, #22]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	b29b      	uxth	r3, r3
 8001638:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (err < 0) {
 800163a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800163e:	2b00      	cmp	r3, #0
 8001640:	da09      	bge.n	8001656 <_ZN12Adafruit_GFX9writeLineEsssst+0x12a>
      y0 += ystep;
 8001642:	893a      	ldrh	r2, [r7, #8]
 8001644:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001646:	4413      	add	r3, r2
 8001648:	b29b      	uxth	r3, r3
 800164a:	813b      	strh	r3, [r7, #8]
      err += dx;
 800164c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800164e:	8b3b      	ldrh	r3, [r7, #24]
 8001650:	4413      	add	r3, r2
 8001652:	b29b      	uxth	r3, r3
 8001654:	84fb      	strh	r3, [r7, #38]	@ 0x26
  for (; x0 <= x1; x0++) {
 8001656:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800165a:	b29b      	uxth	r3, r3
 800165c:	3301      	adds	r3, #1
 800165e:	b29b      	uxth	r3, r3
 8001660:	817b      	strh	r3, [r7, #10]
 8001662:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001666:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800166a:	429a      	cmp	r2, r3
 800166c:	ddc5      	ble.n	80015fa <_ZN12Adafruit_GFX9writeLineEsssst+0xce>
    }
  }
}
 800166e:	bf00      	nop
 8001670:	bf00      	nop
 8001672:	372c      	adds	r7, #44	@ 0x2c
 8001674:	46bd      	mov	sp, r7
 8001676:	bd90      	pop	{r4, r7, pc}

08001678 <_ZN12Adafruit_GFX10startWriteEv>:
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite() {}
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
 800168c:	b590      	push	{r4, r7, lr}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	4608      	mov	r0, r1
 8001696:	4611      	mov	r1, r2
 8001698:	461a      	mov	r2, r3
 800169a:	4603      	mov	r3, r0
 800169c:	817b      	strh	r3, [r7, #10]
 800169e:	460b      	mov	r3, r1
 80016a0:	813b      	strh	r3, [r7, #8]
 80016a2:	4613      	mov	r3, r2
 80016a4:	80fb      	strh	r3, [r7, #6]
  drawPixel(x, y, color);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	3310      	adds	r3, #16
 80016ac:	681c      	ldr	r4, [r3, #0]
 80016ae:	88fb      	ldrh	r3, [r7, #6]
 80016b0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80016b4:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80016b8:	68f8      	ldr	r0, [r7, #12]
 80016ba:	47a0      	blx	r4
}
 80016bc:	bf00      	nop
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd90      	pop	{r4, r7, pc}

080016c4 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                  uint16_t color) {
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b087      	sub	sp, #28
 80016c8:	af02      	add	r7, sp, #8
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	4608      	mov	r0, r1
 80016ce:	4611      	mov	r1, r2
 80016d0:	461a      	mov	r2, r3
 80016d2:	4603      	mov	r3, r0
 80016d4:	817b      	strh	r3, [r7, #10]
 80016d6:	460b      	mov	r3, r1
 80016d8:	813b      	strh	r3, [r7, #8]
 80016da:	4613      	mov	r3, r2
 80016dc:	80fb      	strh	r3, [r7, #6]
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
  drawFastVLine(x, y, h, color);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	3338      	adds	r3, #56	@ 0x38
 80016e4:	681c      	ldr	r4, [r3, #0]
 80016e6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80016ea:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80016ee:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80016f2:	8c3b      	ldrh	r3, [r7, #32]
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	4603      	mov	r3, r0
 80016f8:	68f8      	ldr	r0, [r7, #12]
 80016fa:	47a0      	blx	r4
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	bd90      	pop	{r4, r7, pc}

08001704 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                  uint16_t color) {
 8001704:	b590      	push	{r4, r7, lr}
 8001706:	b087      	sub	sp, #28
 8001708:	af02      	add	r7, sp, #8
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	4608      	mov	r0, r1
 800170e:	4611      	mov	r1, r2
 8001710:	461a      	mov	r2, r3
 8001712:	4603      	mov	r3, r0
 8001714:	817b      	strh	r3, [r7, #10]
 8001716:	460b      	mov	r3, r1
 8001718:	813b      	strh	r3, [r7, #8]
 800171a:	4613      	mov	r3, r2
 800171c:	80fb      	strh	r3, [r7, #6]
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
  drawFastHLine(x, y, w, color);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	333c      	adds	r3, #60	@ 0x3c
 8001724:	681c      	ldr	r4, [r3, #0]
 8001726:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800172a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800172e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001732:	8c3b      	ldrh	r3, [r7, #32]
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	4603      	mov	r3, r0
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	47a0      	blx	r4
}
 800173c:	bf00      	nop
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	bd90      	pop	{r4, r7, pc}

08001744 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 uint16_t color) {
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b087      	sub	sp, #28
 8001748:	af02      	add	r7, sp, #8
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	4608      	mov	r0, r1
 800174e:	4611      	mov	r1, r2
 8001750:	461a      	mov	r2, r3
 8001752:	4603      	mov	r3, r0
 8001754:	817b      	strh	r3, [r7, #10]
 8001756:	460b      	mov	r3, r1
 8001758:	813b      	strh	r3, [r7, #8]
 800175a:	4613      	mov	r3, r2
 800175c:	80fb      	strh	r3, [r7, #6]
  // Overwrite in subclasses if desired!
  fillRect(x, y, w, h, color);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	3340      	adds	r3, #64	@ 0x40
 8001764:	681c      	ldr	r4, [r3, #0]
 8001766:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800176a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800176e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001772:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001774:	9301      	str	r3, [sp, #4]
 8001776:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	4603      	mov	r3, r0
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	47a0      	blx	r4
}
 8001782:	bf00      	nop
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	bd90      	pop	{r4, r7, pc}

0800178a <_ZN12Adafruit_GFX8endWriteEv>:
/*!
   @brief    End a display-writing routine, overwrite in subclasses if
   startWrite is defined!
*/
/**************************************************************************/
void Adafruit_GFX::endWrite() {}
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                 uint16_t color) {
 800179e:	b5b0      	push	{r4, r5, r7, lr}
 80017a0:	b086      	sub	sp, #24
 80017a2:	af02      	add	r7, sp, #8
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	4608      	mov	r0, r1
 80017a8:	4611      	mov	r1, r2
 80017aa:	461a      	mov	r2, r3
 80017ac:	4603      	mov	r3, r0
 80017ae:	817b      	strh	r3, [r7, #10]
 80017b0:	460b      	mov	r3, r1
 80017b2:	813b      	strh	r3, [r7, #8]
 80017b4:	4613      	mov	r3, r2
 80017b6:	80fb      	strh	r3, [r7, #6]
  startWrite();
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	3314      	adds	r3, #20
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	4798      	blx	r3
  writeLine(x, y, x, y + h - 1, color);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	3328      	adds	r3, #40	@ 0x28
 80017ca:	681c      	ldr	r4, [r3, #0]
 80017cc:	893a      	ldrh	r2, [r7, #8]
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	4413      	add	r3, r2
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	3b01      	subs	r3, #1
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	b21b      	sxth	r3, r3
 80017da:	f9b7 500a 	ldrsh.w	r5, [r7, #10]
 80017de:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 80017e2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80017e6:	8c3a      	ldrh	r2, [r7, #32]
 80017e8:	9201      	str	r2, [sp, #4]
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	462b      	mov	r3, r5
 80017ee:	4602      	mov	r2, r0
 80017f0:	68f8      	ldr	r0, [r7, #12]
 80017f2:	47a0      	blx	r4
  endWrite();
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	332c      	adds	r3, #44	@ 0x2c
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68f8      	ldr	r0, [r7, #12]
 80017fe:	4798      	blx	r3
}
 8001800:	bf00      	nop
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bdb0      	pop	{r4, r5, r7, pc}

08001808 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                 uint16_t color) {
 8001808:	b590      	push	{r4, r7, lr}
 800180a:	b087      	sub	sp, #28
 800180c:	af02      	add	r7, sp, #8
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	4608      	mov	r0, r1
 8001812:	4611      	mov	r1, r2
 8001814:	461a      	mov	r2, r3
 8001816:	4603      	mov	r3, r0
 8001818:	817b      	strh	r3, [r7, #10]
 800181a:	460b      	mov	r3, r1
 800181c:	813b      	strh	r3, [r7, #8]
 800181e:	4613      	mov	r3, r2
 8001820:	80fb      	strh	r3, [r7, #6]
  startWrite();
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	3314      	adds	r3, #20
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	4798      	blx	r3
  writeLine(x, y, x + w - 1, y, color);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	3328      	adds	r3, #40	@ 0x28
 8001834:	681c      	ldr	r4, [r3, #0]
 8001836:	897a      	ldrh	r2, [r7, #10]
 8001838:	88fb      	ldrh	r3, [r7, #6]
 800183a:	4413      	add	r3, r2
 800183c:	b29b      	uxth	r3, r3
 800183e:	3b01      	subs	r3, #1
 8001840:	b29b      	uxth	r3, r3
 8001842:	b218      	sxth	r0, r3
 8001844:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001848:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800184c:	8c3b      	ldrh	r3, [r7, #32]
 800184e:	9301      	str	r3, [sp, #4]
 8001850:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	4603      	mov	r3, r0
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	47a0      	blx	r4
  endWrite();
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	332c      	adds	r3, #44	@ 0x2c
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	4798      	blx	r3
}
 8001868:	bf00      	nop
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	bd90      	pop	{r4, r7, pc}

08001870 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
 8001870:	b590      	push	{r4, r7, lr}
 8001872:	b089      	sub	sp, #36	@ 0x24
 8001874:	af02      	add	r7, sp, #8
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	4608      	mov	r0, r1
 800187a:	4611      	mov	r1, r2
 800187c:	461a      	mov	r2, r3
 800187e:	4603      	mov	r3, r0
 8001880:	817b      	strh	r3, [r7, #10]
 8001882:	460b      	mov	r3, r1
 8001884:	813b      	strh	r3, [r7, #8]
 8001886:	4613      	mov	r3, r2
 8001888:	80fb      	strh	r3, [r7, #6]
  startWrite();
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	3314      	adds	r3, #20
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	4798      	blx	r3
  for (int16_t i = x; i < x + w; i++) {
 8001896:	897b      	ldrh	r3, [r7, #10]
 8001898:	82fb      	strh	r3, [r7, #22]
 800189a:	e014      	b.n	80018c6 <_ZN12Adafruit_GFX8fillRectEsssst+0x56>
    writeFastVLine(i, y, h, color);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	3320      	adds	r3, #32
 80018a2:	681c      	ldr	r4, [r3, #0]
 80018a4:	f9b7 0028 	ldrsh.w	r0, [r7, #40]	@ 0x28
 80018a8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80018ac:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80018b0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	4603      	mov	r3, r0
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	47a0      	blx	r4
  for (int16_t i = x; i < x + w; i++) {
 80018ba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	3301      	adds	r3, #1
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	82fb      	strh	r3, [r7, #22]
 80018c6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80018ca:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80018ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d2:	440b      	add	r3, r1
 80018d4:	429a      	cmp	r2, r3
 80018d6:	dbe1      	blt.n	800189c <_ZN12Adafruit_GFX8fillRectEsssst+0x2c>
  }
  endWrite();
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	332c      	adds	r3, #44	@ 0x2c
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68f8      	ldr	r0, [r7, #12]
 80018e2:	4798      	blx	r3
}
 80018e4:	bf00      	nop
 80018e6:	371c      	adds	r7, #28
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd90      	pop	{r4, r7, pc}

080018ec <_ZN12Adafruit_GFX10fillScreenEt>:
   @brief    Fill the screen completely with one color. Update in subclasses if
   desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
 80018ec:	b590      	push	{r4, r7, lr}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af02      	add	r7, sp, #8
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	460b      	mov	r3, r1
 80018f6:	807b      	strh	r3, [r7, #2]
  fillRect(0, 0, _width, _height, color);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	3340      	adds	r3, #64	@ 0x40
 80018fe:	681c      	ldr	r4, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800190c:	887a      	ldrh	r2, [r7, #2]
 800190e:	9201      	str	r2, [sp, #4]
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	460b      	mov	r3, r1
 8001914:	2200      	movs	r2, #0
 8001916:	2100      	movs	r1, #0
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	47a0      	blx	r4
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	bd90      	pop	{r4, r7, pc}

08001924 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                            uint16_t color) {
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	b089      	sub	sp, #36	@ 0x24
 8001928:	af02      	add	r7, sp, #8
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	4608      	mov	r0, r1
 800192e:	4611      	mov	r1, r2
 8001930:	461a      	mov	r2, r3
 8001932:	4603      	mov	r3, r0
 8001934:	817b      	strh	r3, [r7, #10]
 8001936:	460b      	mov	r3, r1
 8001938:	813b      	strh	r3, [r7, #8]
 800193a:	4613      	mov	r3, r2
 800193c:	80fb      	strh	r3, [r7, #6]
  // Update in subclasses if desired!
  if (x0 == x1) {
 800193e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001942:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001946:	429a      	cmp	r2, r3
 8001948:	d120      	bne.n	800198c <_ZN12Adafruit_GFX8drawLineEsssst+0x68>
    if (y0 > y1)
 800194a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800194e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001952:	429a      	cmp	r2, r3
 8001954:	dd05      	ble.n	8001962 <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
      _swap_int16_t(y0, y1);
 8001956:	893b      	ldrh	r3, [r7, #8]
 8001958:	82bb      	strh	r3, [r7, #20]
 800195a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800195c:	813b      	strh	r3, [r7, #8]
 800195e:	8abb      	ldrh	r3, [r7, #20]
 8001960:	853b      	strh	r3, [r7, #40]	@ 0x28
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	3338      	adds	r3, #56	@ 0x38
 8001968:	681c      	ldr	r4, [r3, #0]
 800196a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800196c:	893b      	ldrh	r3, [r7, #8]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	b29b      	uxth	r3, r3
 8001972:	3301      	adds	r3, #1
 8001974:	b29b      	uxth	r3, r3
 8001976:	b218      	sxth	r0, r3
 8001978:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800197c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001980:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	4603      	mov	r3, r0
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	47a0      	blx	r4
  } else {
    startWrite();
    writeLine(x0, y0, x1, y1, color);
    endWrite();
  }
}
 800198a:	e044      	b.n	8001a16 <_ZN12Adafruit_GFX8drawLineEsssst+0xf2>
  } else if (y0 == y1) {
 800198c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001990:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001994:	429a      	cmp	r2, r3
 8001996:	d120      	bne.n	80019da <_ZN12Adafruit_GFX8drawLineEsssst+0xb6>
    if (x0 > x1)
 8001998:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800199c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	dd05      	ble.n	80019b0 <_ZN12Adafruit_GFX8drawLineEsssst+0x8c>
      _swap_int16_t(x0, x1);
 80019a4:	897b      	ldrh	r3, [r7, #10]
 80019a6:	82fb      	strh	r3, [r7, #22]
 80019a8:	88fb      	ldrh	r3, [r7, #6]
 80019aa:	817b      	strh	r3, [r7, #10]
 80019ac:	8afb      	ldrh	r3, [r7, #22]
 80019ae:	80fb      	strh	r3, [r7, #6]
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	333c      	adds	r3, #60	@ 0x3c
 80019b6:	681c      	ldr	r4, [r3, #0]
 80019b8:	88fa      	ldrh	r2, [r7, #6]
 80019ba:	897b      	ldrh	r3, [r7, #10]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	b29b      	uxth	r3, r3
 80019c0:	3301      	adds	r3, #1
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	b218      	sxth	r0, r3
 80019c6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80019ca:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80019ce:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	4603      	mov	r3, r0
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	47a0      	blx	r4
}
 80019d8:	e01d      	b.n	8001a16 <_ZN12Adafruit_GFX8drawLineEsssst+0xf2>
    startWrite();
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	3314      	adds	r3, #20
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	4798      	blx	r3
    writeLine(x0, y0, x1, y1, color);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	3328      	adds	r3, #40	@ 0x28
 80019ec:	681c      	ldr	r4, [r3, #0]
 80019ee:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80019f2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80019f6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80019fa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80019fc:	9301      	str	r3, [sp, #4]
 80019fe:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	4603      	mov	r3, r0
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	47a0      	blx	r4
    endWrite();
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	332c      	adds	r3, #44	@ 0x2c
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	4798      	blx	r3
}
 8001a16:	bf00      	nop
 8001a18:	371c      	adds	r7, #28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd90      	pop	{r4, r7, pc}

08001a1e <_ZN12Adafruit_GFX10fillCircleEssst>:
    @param    r   Radius of circle
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillCircle(int16_t x0, int16_t y0, int16_t r,
                              uint16_t color) {
 8001a1e:	b590      	push	{r4, r7, lr}
 8001a20:	b089      	sub	sp, #36	@ 0x24
 8001a22:	af04      	add	r7, sp, #16
 8001a24:	60f8      	str	r0, [r7, #12]
 8001a26:	4608      	mov	r0, r1
 8001a28:	4611      	mov	r1, r2
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	817b      	strh	r3, [r7, #10]
 8001a30:	460b      	mov	r3, r1
 8001a32:	813b      	strh	r3, [r7, #8]
 8001a34:	4613      	mov	r3, r2
 8001a36:	80fb      	strh	r3, [r7, #6]
  startWrite();
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	3314      	adds	r3, #20
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	4798      	blx	r3
  writeFastVLine(x0, y0 - r, 2 * r + 1, color);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	3320      	adds	r3, #32
 8001a4a:	681c      	ldr	r4, [r3, #0]
 8001a4c:	893a      	ldrh	r2, [r7, #8]
 8001a4e:	88fb      	ldrh	r3, [r7, #6]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	b21a      	sxth	r2, r3
 8001a56:	88fb      	ldrh	r3, [r7, #6]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	b218      	sxth	r0, r3
 8001a62:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001a66:	8c3b      	ldrh	r3, [r7, #32]
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	47a0      	blx	r4
  fillCircleHelper(x0, y0, r, 3, 0, color);
 8001a70:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001a74:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001a78:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001a7c:	8c3b      	ldrh	r3, [r7, #32]
 8001a7e:	9302      	str	r3, [sp, #8]
 8001a80:	2300      	movs	r3, #0
 8001a82:	9301      	str	r3, [sp, #4]
 8001a84:	2303      	movs	r3, #3
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	4603      	mov	r3, r0
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f000 f80a 	bl	8001aa4 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
  endWrite();
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	332c      	adds	r3, #44	@ 0x2c
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	4798      	blx	r3
}
 8001a9c:	bf00      	nop
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd90      	pop	{r4, r7, pc}

08001aa4 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>:
    @param  color    16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillCircleHelper(int16_t x0, int16_t y0, int16_t r,
                                    uint8_t corners, int16_t delta,
                                    uint16_t color) {
 8001aa4:	b590      	push	{r4, r7, lr}
 8001aa6:	b08b      	sub	sp, #44	@ 0x2c
 8001aa8:	af02      	add	r7, sp, #8
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	4608      	mov	r0, r1
 8001aae:	4611      	mov	r1, r2
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	817b      	strh	r3, [r7, #10]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	813b      	strh	r3, [r7, #8]
 8001aba:	4613      	mov	r3, r2
 8001abc:	80fb      	strh	r3, [r7, #6]

  int16_t f = 1 - r;
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	f1c3 0301 	rsb	r3, r3, #1
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	83fb      	strh	r3, [r7, #30]
  int16_t ddF_x = 1;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	83bb      	strh	r3, [r7, #28]
  int16_t ddF_y = -2 * r;
 8001acc:	88fb      	ldrh	r3, [r7, #6]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	03d2      	lsls	r2, r2, #15
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	837b      	strh	r3, [r7, #26]
  int16_t x = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	833b      	strh	r3, [r7, #24]
  int16_t y = r;
 8001ade:	88fb      	ldrh	r3, [r7, #6]
 8001ae0:	82fb      	strh	r3, [r7, #22]
  int16_t px = x;
 8001ae2:	8b3b      	ldrh	r3, [r7, #24]
 8001ae4:	82bb      	strh	r3, [r7, #20]
  int16_t py = y;
 8001ae6:	8afb      	ldrh	r3, [r7, #22]
 8001ae8:	827b      	strh	r3, [r7, #18]

  delta++; // Avoid some +1's in the loop
 8001aea:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	3301      	adds	r3, #1
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	86bb      	strh	r3, [r7, #52]	@ 0x34

  while (x < y) {
 8001af6:	e0b5      	b.n	8001c64 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x1c0>
    if (f >= 0) {
 8001af8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	db0e      	blt.n	8001b1e <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x7a>
      y--;
 8001b00:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	3b01      	subs	r3, #1
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	82fb      	strh	r3, [r7, #22]
      ddF_y += 2;
 8001b0c:	8b7b      	ldrh	r3, [r7, #26]
 8001b0e:	3302      	adds	r3, #2
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	837b      	strh	r3, [r7, #26]
      f += ddF_y;
 8001b14:	8bfa      	ldrh	r2, [r7, #30]
 8001b16:	8b7b      	ldrh	r3, [r7, #26]
 8001b18:	4413      	add	r3, r2
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	83fb      	strh	r3, [r7, #30]
    }
    x++;
 8001b1e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	3301      	adds	r3, #1
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	833b      	strh	r3, [r7, #24]
    ddF_x += 2;
 8001b2a:	8bbb      	ldrh	r3, [r7, #28]
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	83bb      	strh	r3, [r7, #28]
    f += ddF_x;
 8001b32:	8bfa      	ldrh	r2, [r7, #30]
 8001b34:	8bbb      	ldrh	r3, [r7, #28]
 8001b36:	4413      	add	r3, r2
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	83fb      	strh	r3, [r7, #30]
    // These checks avoid double-drawing certain lines, important
    // for the SSD1306 library which has an INVERT drawing mode.
    if (x < (y + 1)) {
 8001b3c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001b40:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	db41      	blt.n	8001bcc <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x128>
      if (corners & 1)
 8001b48:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d01a      	beq.n	8001b8a <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xe6>
        writeFastVLine(x0 + x, y0 - y, 2 * y + delta, color);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	3320      	adds	r3, #32
 8001b5a:	681c      	ldr	r4, [r3, #0]
 8001b5c:	897a      	ldrh	r2, [r7, #10]
 8001b5e:	8b3b      	ldrh	r3, [r7, #24]
 8001b60:	4413      	add	r3, r2
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	b219      	sxth	r1, r3
 8001b66:	893a      	ldrh	r2, [r7, #8]
 8001b68:	8afb      	ldrh	r3, [r7, #22]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	b218      	sxth	r0, r3
 8001b70:	8afb      	ldrh	r3, [r7, #22]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001b78:	4413      	add	r3, r2
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	b21a      	sxth	r2, r3
 8001b7e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001b80:	9300      	str	r3, [sp, #0]
 8001b82:	4613      	mov	r3, r2
 8001b84:	4602      	mov	r2, r0
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	47a0      	blx	r4
      if (corners & 2)
 8001b8a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d01a      	beq.n	8001bcc <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x128>
        writeFastVLine(x0 - x, y0 - y, 2 * y + delta, color);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	3320      	adds	r3, #32
 8001b9c:	681c      	ldr	r4, [r3, #0]
 8001b9e:	897a      	ldrh	r2, [r7, #10]
 8001ba0:	8b3b      	ldrh	r3, [r7, #24]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	b219      	sxth	r1, r3
 8001ba8:	893a      	ldrh	r2, [r7, #8]
 8001baa:	8afb      	ldrh	r3, [r7, #22]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	b218      	sxth	r0, r3
 8001bb2:	8afb      	ldrh	r3, [r7, #22]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001bba:	4413      	add	r3, r2
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	b21a      	sxth	r2, r3
 8001bc0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	47a0      	blx	r4
    }
    if (y != py) {
 8001bcc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001bd0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d043      	beq.n	8001c60 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x1bc>
      if (corners & 1)
 8001bd8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d01a      	beq.n	8001c1a <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x176>
        writeFastVLine(x0 + py, y0 - px, 2 * px + delta, color);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	3320      	adds	r3, #32
 8001bea:	681c      	ldr	r4, [r3, #0]
 8001bec:	897a      	ldrh	r2, [r7, #10]
 8001bee:	8a7b      	ldrh	r3, [r7, #18]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	b219      	sxth	r1, r3
 8001bf6:	893a      	ldrh	r2, [r7, #8]
 8001bf8:	8abb      	ldrh	r3, [r7, #20]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	b218      	sxth	r0, r3
 8001c00:	8abb      	ldrh	r3, [r7, #20]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001c08:	4413      	add	r3, r2
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	b21a      	sxth	r2, r3
 8001c0e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	4613      	mov	r3, r2
 8001c14:	4602      	mov	r2, r0
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	47a0      	blx	r4
      if (corners & 2)
 8001c1a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d01a      	beq.n	8001c5c <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x1b8>
        writeFastVLine(x0 - py, y0 - px, 2 * px + delta, color);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	3320      	adds	r3, #32
 8001c2c:	681c      	ldr	r4, [r3, #0]
 8001c2e:	897a      	ldrh	r2, [r7, #10]
 8001c30:	8a7b      	ldrh	r3, [r7, #18]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	b219      	sxth	r1, r3
 8001c38:	893a      	ldrh	r2, [r7, #8]
 8001c3a:	8abb      	ldrh	r3, [r7, #20]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	b218      	sxth	r0, r3
 8001c42:	8abb      	ldrh	r3, [r7, #20]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001c4a:	4413      	add	r3, r2
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	b21a      	sxth	r2, r3
 8001c50:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	4613      	mov	r3, r2
 8001c56:	4602      	mov	r2, r0
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	47a0      	blx	r4
      py = y;
 8001c5c:	8afb      	ldrh	r3, [r7, #22]
 8001c5e:	827b      	strh	r3, [r7, #18]
    }
    px = x;
 8001c60:	8b3b      	ldrh	r3, [r7, #24]
 8001c62:	82bb      	strh	r3, [r7, #20]
  while (x < y) {
 8001c64:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001c68:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	f6ff af43 	blt.w	8001af8 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x54>
  }
}
 8001c72:	bf00      	nop
 8001c74:	bf00      	nop
 8001c76:	3724      	adds	r7, #36	@ 0x24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd90      	pop	{r4, r7, pc}

08001c7c <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
 8001c7c:	b590      	push	{r4, r7, lr}
 8001c7e:	b087      	sub	sp, #28
 8001c80:	af02      	add	r7, sp, #8
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	4608      	mov	r0, r1
 8001c86:	4611      	mov	r1, r2
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	817b      	strh	r3, [r7, #10]
 8001c8e:	460b      	mov	r3, r1
 8001c90:	813b      	strh	r3, [r7, #8]
 8001c92:	4613      	mov	r3, r2
 8001c94:	80fb      	strh	r3, [r7, #6]
  startWrite();
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	3314      	adds	r3, #20
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	4798      	blx	r3
  writeFastHLine(x, y, w, color);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	3324      	adds	r3, #36	@ 0x24
 8001ca8:	681c      	ldr	r4, [r3, #0]
 8001caa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001cae:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001cb2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001cb6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	4603      	mov	r3, r0
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	47a0      	blx	r4
  writeFastHLine(x, y + h - 1, w, color);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	3324      	adds	r3, #36	@ 0x24
 8001cc6:	681c      	ldr	r4, [r3, #0]
 8001cc8:	893a      	ldrh	r2, [r7, #8]
 8001cca:	8c3b      	ldrh	r3, [r7, #32]
 8001ccc:	4413      	add	r3, r2
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	b21a      	sxth	r2, r3
 8001cd6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001cda:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001cde:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	47a0      	blx	r4
  writeFastVLine(x, y, h, color);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	3320      	adds	r3, #32
 8001cee:	681c      	ldr	r4, [r3, #0]
 8001cf0:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8001cf4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001cf8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001cfc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	4603      	mov	r3, r0
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	47a0      	blx	r4
  writeFastVLine(x + w - 1, y, h, color);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	3320      	adds	r3, #32
 8001d0c:	681c      	ldr	r4, [r3, #0]
 8001d0e:	897a      	ldrh	r2, [r7, #10]
 8001d10:	88fb      	ldrh	r3, [r7, #6]
 8001d12:	4413      	add	r3, r2
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	3b01      	subs	r3, #1
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	b219      	sxth	r1, r3
 8001d1c:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8001d20:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001d24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	4603      	mov	r3, r0
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	47a0      	blx	r4
  endWrite();
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	332c      	adds	r3, #44	@ 0x2c
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	4798      	blx	r3
}
 8001d3a:	bf00      	nop
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd90      	pop	{r4, r7, pc}

08001d42 <_ZN12Adafruit_GFX13fillRoundRectEssssst>:
    @param    r   Radius of corner rounding
    @param    color 16-bit 5-6-5 Color to draw/fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 int16_t r, uint16_t color) {
 8001d42:	b590      	push	{r4, r7, lr}
 8001d44:	b08b      	sub	sp, #44	@ 0x2c
 8001d46:	af04      	add	r7, sp, #16
 8001d48:	60f8      	str	r0, [r7, #12]
 8001d4a:	4608      	mov	r0, r1
 8001d4c:	4611      	mov	r1, r2
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4603      	mov	r3, r0
 8001d52:	817b      	strh	r3, [r7, #10]
 8001d54:	460b      	mov	r3, r1
 8001d56:	813b      	strh	r3, [r7, #8]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	80fb      	strh	r3, [r7, #6]
  int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8001d5c:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 8001d60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d64:	4293      	cmp	r3, r2
 8001d66:	bfa8      	it	ge
 8001d68:	4613      	movge	r3, r2
 8001d6a:	b21b      	sxth	r3, r3
 8001d6c:	0fda      	lsrs	r2, r3, #31
 8001d6e:	4413      	add	r3, r2
 8001d70:	105b      	asrs	r3, r3, #1
 8001d72:	82fb      	strh	r3, [r7, #22]
  if (r > max_radius)
 8001d74:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 8001d78:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	dd01      	ble.n	8001d84 <_ZN12Adafruit_GFX13fillRoundRectEssssst+0x42>
    r = max_radius;
 8001d80:	8afb      	ldrh	r3, [r7, #22]
 8001d82:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  // smarter version
  startWrite();
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	3314      	adds	r3, #20
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	4798      	blx	r3
  writeFillRect(x + r, y, w - 2 * r, h, color);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	331c      	adds	r3, #28
 8001d96:	681c      	ldr	r4, [r3, #0]
 8001d98:	897a      	ldrh	r2, [r7, #10]
 8001d9a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001d9c:	4413      	add	r3, r2
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	b219      	sxth	r1, r3
 8001da2:	88fa      	ldrh	r2, [r7, #6]
 8001da4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	b218      	sxth	r0, r3
 8001db0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001db4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001db6:	9301      	str	r3, [sp, #4]
 8001db8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	47a0      	blx	r4
  // draw four corners
  fillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
 8001dc4:	897a      	ldrh	r2, [r7, #10]
 8001dc6:	88fb      	ldrh	r3, [r7, #6]
 8001dc8:	4413      	add	r3, r2
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	b219      	sxth	r1, r3
 8001dd8:	893a      	ldrh	r2, [r7, #8]
 8001dda:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001ddc:	4413      	add	r3, r2
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	b218      	sxth	r0, r3
 8001de2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001de4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	3b01      	subs	r3, #1
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	b21b      	sxth	r3, r3
 8001df4:	f9b7 402c 	ldrsh.w	r4, [r7, #44]	@ 0x2c
 8001df8:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001dfa:	9202      	str	r2, [sp, #8]
 8001dfc:	9301      	str	r3, [sp, #4]
 8001dfe:	2301      	movs	r3, #1
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	4623      	mov	r3, r4
 8001e04:	4602      	mov	r2, r0
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f7ff fe4c 	bl	8001aa4 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
  fillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
 8001e0c:	897a      	ldrh	r2, [r7, #10]
 8001e0e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001e10:	4413      	add	r3, r2
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	b219      	sxth	r1, r3
 8001e16:	893a      	ldrh	r2, [r7, #8]
 8001e18:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001e1a:	4413      	add	r3, r2
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	b218      	sxth	r0, r3
 8001e20:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001e22:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	b21b      	sxth	r3, r3
 8001e32:	f9b7 402c 	ldrsh.w	r4, [r7, #44]	@ 0x2c
 8001e36:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001e38:	9202      	str	r2, [sp, #8]
 8001e3a:	9301      	str	r3, [sp, #4]
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	4623      	mov	r3, r4
 8001e42:	4602      	mov	r2, r0
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f7ff fe2d 	bl	8001aa4 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
  endWrite();
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	332c      	adds	r3, #44	@ 0x2c
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	4798      	blx	r3
}
 8001e56:	bf00      	nop
 8001e58:	371c      	adds	r7, #28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd90      	pop	{r4, r7, pc}
	...

08001e60 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
                            uint16_t color, uint16_t bg, uint8_t size_x,
                            uint8_t size_y) {
 8001e60:	b5b0      	push	{r4, r5, r7, lr}
 8001e62:	b08e      	sub	sp, #56	@ 0x38
 8001e64:	af02      	add	r7, sp, #8
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	4608      	mov	r0, r1
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4603      	mov	r3, r0
 8001e70:	817b      	strh	r3, [r7, #10]
 8001e72:	460b      	mov	r3, r1
 8001e74:	813b      	strh	r3, [r7, #8]
 8001e76:	4613      	mov	r3, r2
 8001e78:	71fb      	strb	r3, [r7, #7]

  if (!gfxFont) { // 'Classic' built-in font
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f040 8153 	bne.w	800212a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ca>

    if ((x >= _width) ||              // Clip right
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001e8a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	f280 8234 	bge.w	80022fc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x49c>
        (y >= _height) ||             // Clip bottom
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
    if ((x >= _width) ||              // Clip right
 8001e9a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	f280 822c 	bge.w	80022fc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x49c>
        ((x + 6 * size_x - 1) < 0) || // Clip left
 8001ea4:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001ea8:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8001eac:	4613      	mov	r3, r2
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	4413      	add	r3, r2
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	440b      	add	r3, r1
        (y >= _height) ||             // Clip bottom
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f340 8220 	ble.w	80022fc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x49c>
        ((y + 8 * size_y - 1) < 0))   // Clip top
 8001ebc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001ec0:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	4413      	add	r3, r2
        ((x + 6 * size_x - 1) < 0) || // Clip left
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f340 8217 	ble.w	80022fc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x49c>
      return;

    if (!_cp437 && (c >= 176))
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	7f1b      	ldrb	r3, [r3, #28]
 8001ed2:	f083 0301 	eor.w	r3, r3, #1
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x88>
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	2baf      	cmp	r3, #175	@ 0xaf
 8001ee0:	d902      	bls.n	8001ee8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x88>
      c++; // Handle 'classic' charset behavior
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	71fb      	strb	r3, [r7, #7]

    startWrite();
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	3314      	adds	r3, #20
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	4798      	blx	r3
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001efa:	e0c9      	b.n	8002090 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x230>
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 8001efc:	79fa      	ldrb	r2, [r7, #7]
 8001efe:	4613      	mov	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	441a      	add	r2, r3
 8001f04:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001f08:	4413      	add	r3, r2
 8001f0a:	4aad      	ldr	r2, [pc, #692]	@ (80021c0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x360>)
 8001f0c:	5cd3      	ldrb	r3, [r2, r3]
 8001f0e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8001f12:	2300      	movs	r3, #0
 8001f14:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8001f18:	e0ae      	b.n	8002078 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x218>
        if (line & 1) {
 8001f1a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d04b      	beq.n	8001fbe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x15e>
          if (size_x == 1 && size_y == 1)
 8001f26:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d11a      	bne.n	8001f64 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x104>
 8001f2e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d116      	bne.n	8001f64 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x104>
            writePixel(x + i, y + j, color);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	3318      	adds	r3, #24
 8001f3c:	681c      	ldr	r4, [r3, #0]
 8001f3e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	897b      	ldrh	r3, [r7, #10]
 8001f46:	4413      	add	r3, r2
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	b219      	sxth	r1, r3
 8001f4c:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	893b      	ldrh	r3, [r7, #8]
 8001f54:	4413      	add	r3, r2
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	b21a      	sxth	r2, r3
 8001f5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	47a0      	blx	r4
 8001f62:	e07d      	b.n	8002060 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x200>
          else
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	331c      	adds	r3, #28
 8001f6a:	681c      	ldr	r4, [r3, #0]
 8001f6c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	fb12 f303 	smulbb	r3, r2, r3
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	897b      	ldrh	r3, [r7, #10]
 8001f80:	4413      	add	r3, r2
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	b219      	sxth	r1, r3
 8001f86:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	fb12 f303 	smulbb	r3, r2, r3
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	893b      	ldrh	r3, [r7, #8]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	b218      	sxth	r0, r3
 8001fa0:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001fa4:	b21d      	sxth	r5, r3
 8001fa6:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001faa:	b21b      	sxth	r3, r3
 8001fac:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8001fb0:	9201      	str	r2, [sp, #4]
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	462b      	mov	r3, r5
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	47a0      	blx	r4
 8001fbc:	e050      	b.n	8002060 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x200>
                          color);
        } else if (bg != color) {
 8001fbe:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8001fc2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d04a      	beq.n	8002060 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x200>
          if (size_x == 1 && size_y == 1)
 8001fca:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d11a      	bne.n	8002008 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1a8>
 8001fd2:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d116      	bne.n	8002008 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1a8>
            writePixel(x + i, y + j, bg);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	3318      	adds	r3, #24
 8001fe0:	681c      	ldr	r4, [r3, #0]
 8001fe2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	897b      	ldrh	r3, [r7, #10]
 8001fea:	4413      	add	r3, r2
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	b219      	sxth	r1, r3
 8001ff0:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	893b      	ldrh	r3, [r7, #8]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	b21a      	sxth	r2, r3
 8001ffe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	47a0      	blx	r4
 8002006:	e02b      	b.n	8002060 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x200>
          else
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	331c      	adds	r3, #28
 800200e:	681c      	ldr	r4, [r3, #0]
 8002010:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8002014:	b29a      	uxth	r2, r3
 8002016:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800201a:	b29b      	uxth	r3, r3
 800201c:	fb12 f303 	smulbb	r3, r2, r3
 8002020:	b29a      	uxth	r2, r3
 8002022:	897b      	ldrh	r3, [r7, #10]
 8002024:	4413      	add	r3, r2
 8002026:	b29b      	uxth	r3, r3
 8002028:	b219      	sxth	r1, r3
 800202a:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 800202e:	b29a      	uxth	r2, r3
 8002030:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002034:	b29b      	uxth	r3, r3
 8002036:	fb12 f303 	smulbb	r3, r2, r3
 800203a:	b29a      	uxth	r2, r3
 800203c:	893b      	ldrh	r3, [r7, #8]
 800203e:	4413      	add	r3, r2
 8002040:	b29b      	uxth	r3, r3
 8002042:	b218      	sxth	r0, r3
 8002044:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002048:	b21d      	sxth	r5, r3
 800204a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800204e:	b21b      	sxth	r3, r3
 8002050:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8002054:	9201      	str	r2, [sp, #4]
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	462b      	mov	r3, r5
 800205a:	4602      	mov	r2, r0
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	47a0      	blx	r4
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8002060:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8002064:	b2db      	uxtb	r3, r3
 8002066:	3301      	adds	r3, #1
 8002068:	b2db      	uxtb	r3, r3
 800206a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800206e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002072:	085b      	lsrs	r3, r3, #1
 8002074:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8002078:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 800207c:	2b07      	cmp	r3, #7
 800207e:	f77f af4c 	ble.w	8001f1a <_ZN12Adafruit_GFX8drawCharEsshtthh+0xba>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 8002082:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8002086:	b2db      	uxtb	r3, r3
 8002088:	3301      	adds	r3, #1
 800208a:	b2db      	uxtb	r3, r3
 800208c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002090:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8002094:	2b04      	cmp	r3, #4
 8002096:	f77f af31 	ble.w	8001efc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x9c>
        }
      }
    }
    if (bg != color) { // If opaque, draw vertical line for last column
 800209a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800209e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d03a      	beq.n	800211c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2bc>
      if (size_x == 1 && size_y == 1)
 80020a6:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d114      	bne.n	80020d8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x278>
 80020ae:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d110      	bne.n	80020d8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x278>
        writeFastVLine(x + 5, y, 8, bg);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	3320      	adds	r3, #32
 80020bc:	681c      	ldr	r4, [r3, #0]
 80020be:	897b      	ldrh	r3, [r7, #10]
 80020c0:	3305      	adds	r3, #5
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	b219      	sxth	r1, r3
 80020c6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80020ca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	2308      	movs	r3, #8
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	47a0      	blx	r4
 80020d6:	e021      	b.n	800211c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2bc>
      else
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	331c      	adds	r3, #28
 80020de:	681c      	ldr	r4, [r3, #0]
 80020e0:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	461a      	mov	r2, r3
 80020e8:	0092      	lsls	r2, r2, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	897b      	ldrh	r3, [r7, #10]
 80020f0:	4413      	add	r3, r2
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	b219      	sxth	r1, r3
 80020f6:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80020fa:	b21d      	sxth	r5, r3
 80020fc:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002100:	b29b      	uxth	r3, r3
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	b29b      	uxth	r3, r3
 8002106:	b21b      	sxth	r3, r3
 8002108:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 800210c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8002110:	9201      	str	r2, [sp, #4]
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	462b      	mov	r3, r5
 8002116:	4602      	mov	r2, r0
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	47a0      	blx	r4
    }
    endWrite();
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	332c      	adds	r3, #44	@ 0x2c
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	4798      	blx	r3
 8002128:	e0e9      	b.n	80022fe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x49e>

    // Character is assumed previously filtered by write() to eliminate
    // newlines, returns, non-printable characters, etc.  Calling
    // drawChar() directly with 'bad' characters of font may cause mayhem!

    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	3308      	adds	r3, #8
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	79fa      	ldrb	r2, [r7, #7]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	71fb      	strb	r3, [r7, #7]
    GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	79fa      	ldrb	r2, [r7, #7]
 800213e:	4611      	mov	r1, r2
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff f98b 	bl	800145c <_Z18pgm_read_glyph_ptrPK7GFXfonth>
 8002146:	61f8      	str	r0, [r7, #28]
    uint8_t *bitmap = pgm_read_bitmap_ptr(gfxFont);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff f996 	bl	800147e <_Z19pgm_read_bitmap_ptrPK7GFXfont>
 8002152:	61b8      	str	r0, [r7, #24]

    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3302      	adds	r3, #2
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	75fb      	strb	r3, [r7, #23]
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3303      	adds	r3, #3
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	75bb      	strb	r3, [r7, #22]
    int8_t xo = pgm_read_byte(&glyph->xOffset),
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	3305      	adds	r3, #5
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	757b      	strb	r3, [r7, #21]
           yo = pgm_read_byte(&glyph->yOffset);
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	3306      	adds	r3, #6
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	753b      	strb	r3, [r7, #20]
    uint8_t xx, yy, bits = 0, bit = 0;
 800217a:	2300      	movs	r3, #0
 800217c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002180:	2300      	movs	r3, #0
 8002182:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int16_t xo16 = 0, yo16 = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800218a:	2300      	movs	r3, #0
 800218c:	847b      	strh	r3, [r7, #34]	@ 0x22

    if (size_x > 1 || size_y > 1) {
 800218e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002192:	2b01      	cmp	r3, #1
 8002194:	d803      	bhi.n	800219e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x33e>
 8002196:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800219a:	2b01      	cmp	r3, #1
 800219c:	d905      	bls.n	80021aa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x34a>
      xo16 = xo;
 800219e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80021a2:	84bb      	strh	r3, [r7, #36]	@ 0x24
      yo16 = yo;
 80021a4:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80021a8:	847b      	strh	r3, [r7, #34]	@ 0x22
    // only creates a new set of problems.  Have an idea to work around
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    startWrite();
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	3314      	adds	r3, #20
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	4798      	blx	r3
    for (yy = 0; yy < h; yy++) {
 80021b6:	2300      	movs	r3, #0
 80021b8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80021bc:	e091      	b.n	80022e2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x482>
 80021be:	bf00      	nop
 80021c0:	0801b8ac 	.word	0x0801b8ac
      for (xx = 0; xx < w; xx++) {
 80021c4:	2300      	movs	r3, #0
 80021c6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80021ca:	e07f      	b.n	80022cc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x46c>
        if (!(bit++ & 7)) {
 80021cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80021d0:	1c5a      	adds	r2, r3, #1
 80021d2:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	2b00      	cmp	r3, #0
 80021dc:	bf0c      	ite	eq
 80021de:	2301      	moveq	r3, #1
 80021e0:	2300      	movne	r3, #0
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d008      	beq.n	80021fa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x39a>
          bits = pgm_read_byte(&bitmap[bo++]);
 80021e8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80021ea:	1c5a      	adds	r2, r3, #1
 80021ec:	857a      	strh	r2, [r7, #42]	@ 0x2a
 80021ee:	461a      	mov	r2, r3
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	4413      	add	r3, r2
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
        if (bits & 0x80) {
 80021fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80021fe:	2b00      	cmp	r3, #0
 8002200:	da5a      	bge.n	80022b8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x458>
          if (size_x == 1 && size_y == 1) {
 8002202:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002206:	2b01      	cmp	r3, #1
 8002208:	d124      	bne.n	8002254 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x3f4>
 800220a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800220e:	2b01      	cmp	r3, #1
 8002210:	d120      	bne.n	8002254 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x3f4>
            writePixel(x + xo + xx, y + yo + yy, color);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	3318      	adds	r3, #24
 8002218:	681c      	ldr	r4, [r3, #0]
 800221a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800221e:	b29a      	uxth	r2, r3
 8002220:	897b      	ldrh	r3, [r7, #10]
 8002222:	4413      	add	r3, r2
 8002224:	b29a      	uxth	r2, r3
 8002226:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800222a:	b29b      	uxth	r3, r3
 800222c:	4413      	add	r3, r2
 800222e:	b29b      	uxth	r3, r3
 8002230:	b219      	sxth	r1, r3
 8002232:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002236:	b29a      	uxth	r2, r3
 8002238:	893b      	ldrh	r3, [r7, #8]
 800223a:	4413      	add	r3, r2
 800223c:	b29a      	uxth	r2, r3
 800223e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002242:	b29b      	uxth	r3, r3
 8002244:	4413      	add	r3, r2
 8002246:	b29b      	uxth	r3, r3
 8002248:	b21a      	sxth	r2, r3
 800224a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	47a0      	blx	r4
 8002252:	e031      	b.n	80022b8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x458>
          } else {
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	331c      	adds	r3, #28
 800225a:	681c      	ldr	r4, [r3, #0]
 800225c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8002260:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002264:	4413      	add	r3, r2
 8002266:	b29a      	uxth	r2, r3
 8002268:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800226c:	b29b      	uxth	r3, r3
 800226e:	fb12 f303 	smulbb	r3, r2, r3
 8002272:	b29a      	uxth	r2, r3
 8002274:	897b      	ldrh	r3, [r7, #10]
 8002276:	4413      	add	r3, r2
 8002278:	b29b      	uxth	r3, r3
 800227a:	b219      	sxth	r1, r3
 800227c:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8002280:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002284:	4413      	add	r3, r2
 8002286:	b29a      	uxth	r2, r3
 8002288:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800228c:	b29b      	uxth	r3, r3
 800228e:	fb12 f303 	smulbb	r3, r2, r3
 8002292:	b29a      	uxth	r2, r3
 8002294:	893b      	ldrh	r3, [r7, #8]
 8002296:	4413      	add	r3, r2
 8002298:	b29b      	uxth	r3, r3
 800229a:	b218      	sxth	r0, r3
 800229c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80022a0:	b21d      	sxth	r5, r3
 80022a2:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80022a6:	b21b      	sxth	r3, r3
 80022a8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80022ac:	9201      	str	r2, [sp, #4]
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	462b      	mov	r3, r5
 80022b2:	4602      	mov	r2, r0
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	47a0      	blx	r4
                          size_x, size_y, color);
          }
        }
        bits <<= 1;
 80022b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      for (xx = 0; xx < w; xx++) {
 80022c2:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80022c6:	3301      	adds	r3, #1
 80022c8:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80022cc:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 80022d0:	7dfb      	ldrb	r3, [r7, #23]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	f4ff af7a 	bcc.w	80021cc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x36c>
    for (yy = 0; yy < h; yy++) {
 80022d8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80022dc:	3301      	adds	r3, #1
 80022de:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80022e2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80022e6:	7dbb      	ldrb	r3, [r7, #22]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	f4ff af6b 	bcc.w	80021c4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x364>
      }
    }
    endWrite();
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	332c      	adds	r3, #44	@ 0x2c
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	4798      	blx	r3
 80022fa:	e000      	b.n	80022fe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x49e>
      return;
 80022fc:	bf00      	nop

  } // End classic vs custom font
}
 80022fe:	3730      	adds	r7, #48	@ 0x30
 8002300:	46bd      	mov	sp, r7
 8002302:	bdb0      	pop	{r4, r5, r7, pc}

08002304 <_ZN12Adafruit_GFX5writeEh>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
 8002304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002306:	b08b      	sub	sp, #44	@ 0x2c
 8002308:	af04      	add	r7, sp, #16
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	70fb      	strb	r3, [r7, #3]
  if (!gfxFont) { // 'Classic' built-in font
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d166      	bne.n	80023e6 <_ZN12Adafruit_GFX5writeEh+0xe2>

    if (c == '\n') {              // Newline?
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	2b0a      	cmp	r3, #10
 800231c:	d110      	bne.n	8002340 <_ZN12Adafruit_GFX5writeEh+0x3c>
      cursor_x = 0;               // Reset x to zero,
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	821a      	strh	r2, [r3, #16]
      cursor_y += textsize_y * 8; // advance y one line
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800232a:	b29a      	uxth	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	7e5b      	ldrb	r3, [r3, #25]
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	b29b      	uxth	r3, r3
 8002334:	4413      	add	r3, r2
 8002336:	b29b      	uxth	r3, r3
 8002338:	b21a      	sxth	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	825a      	strh	r2, [r3, #18]
 800233e:	e0f5      	b.n	800252c <_ZN12Adafruit_GFX5writeEh+0x228>
    } else if (c != '\r') {       // Ignore carriage returns
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	2b0d      	cmp	r3, #13
 8002344:	f000 80f2 	beq.w	800252c <_ZN12Adafruit_GFX5writeEh+0x228>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	7edb      	ldrb	r3, [r3, #27]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d020      	beq.n	8002392 <_ZN12Adafruit_GFX5writeEh+0x8e>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002356:	4619      	mov	r1, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	7e1b      	ldrb	r3, [r3, #24]
 800235c:	461a      	mov	r2, r3
 800235e:	4613      	mov	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	4413      	add	r3, r2
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	440b      	add	r3, r1
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800236e:	4293      	cmp	r3, r2
 8002370:	dd0f      	ble.n	8002392 <_ZN12Adafruit_GFX5writeEh+0x8e>
        cursor_x = 0;                                       // Reset x to zero,
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	821a      	strh	r2, [r3, #16]
        cursor_y += textsize_y * 8; // advance y one line
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800237e:	b29a      	uxth	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	7e5b      	ldrb	r3, [r3, #25]
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	b29b      	uxth	r3, r3
 8002388:	4413      	add	r3, r2
 800238a:	b29b      	uxth	r3, r3
 800238c:	b21a      	sxth	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	825a      	strh	r2, [r3, #18]
      }
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f9b3 4010 	ldrsh.w	r4, [r3, #16]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f9b3 5012 	ldrsh.w	r5, [r3, #18]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	8a9b      	ldrh	r3, [r3, #20]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	8ad2      	ldrh	r2, [r2, #22]
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	7e09      	ldrb	r1, [r1, #24]
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	7e40      	ldrb	r0, [r0, #25]
 80023ae:	78fe      	ldrb	r6, [r7, #3]
 80023b0:	9003      	str	r0, [sp, #12]
 80023b2:	9102      	str	r1, [sp, #8]
 80023b4:	9201      	str	r2, [sp, #4]
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	4633      	mov	r3, r6
 80023ba:	462a      	mov	r2, r5
 80023bc:	4621      	mov	r1, r4
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff fd4e 	bl	8001e60 <_ZN12Adafruit_GFX8drawCharEsshtthh>
               textsize_y);
      cursor_x += textsize_x * 6; // Advance x one char
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	7e1b      	ldrb	r3, [r3, #24]
 80023d0:	4619      	mov	r1, r3
 80023d2:	0049      	lsls	r1, r1, #1
 80023d4:	440b      	add	r3, r1
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	b29b      	uxth	r3, r3
 80023da:	4413      	add	r3, r2
 80023dc:	b29b      	uxth	r3, r3
 80023de:	b21a      	sxth	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	821a      	strh	r2, [r3, #16]
 80023e4:	e0a2      	b.n	800252c <_ZN12Adafruit_GFX5writeEh+0x228>
    }

  } else { // Custom font

    if (c == '\n') {
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	2b0a      	cmp	r3, #10
 80023ea:	d116      	bne.n	800241a <_ZN12Adafruit_GFX5writeEh+0x116>
      cursor_x = 0;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	821a      	strh	r2, [r3, #16]
      cursor_y +=
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80023f8:	b29a      	uxth	r2, r3
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	7e5b      	ldrb	r3, [r3, #25]
 80023fe:	4619      	mov	r1, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	330c      	adds	r3, #12
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	fb11 f303 	smulbb	r3, r1, r3
 800240c:	b29b      	uxth	r3, r3
      cursor_y +=
 800240e:	4413      	add	r3, r2
 8002410:	b29b      	uxth	r3, r3
 8002412:	b21a      	sxth	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	825a      	strh	r2, [r3, #18]
 8002418:	e088      	b.n	800252c <_ZN12Adafruit_GFX5writeEh+0x228>
    } else if (c != '\r') {
 800241a:	78fb      	ldrb	r3, [r7, #3]
 800241c:	2b0d      	cmp	r3, #13
 800241e:	f000 8085 	beq.w	800252c <_ZN12Adafruit_GFX5writeEh+0x228>
      uint8_t first = pgm_read_byte(&gfxFont->first);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	3308      	adds	r3, #8
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	75fb      	strb	r3, [r7, #23]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 800242c:	78fa      	ldrb	r2, [r7, #3]
 800242e:	7dfb      	ldrb	r3, [r7, #23]
 8002430:	429a      	cmp	r2, r3
 8002432:	d37b      	bcc.n	800252c <_ZN12Adafruit_GFX5writeEh+0x228>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	330a      	adds	r3, #10
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	78fa      	ldrb	r2, [r7, #3]
 800243e:	429a      	cmp	r2, r3
 8002440:	d874      	bhi.n	800252c <_ZN12Adafruit_GFX5writeEh+0x228>
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a18      	ldr	r0, [r3, #32]
 8002446:	78fa      	ldrb	r2, [r7, #3]
 8002448:	7dfb      	ldrb	r3, [r7, #23]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	b2db      	uxtb	r3, r3
 800244e:	4619      	mov	r1, r3
 8002450:	f7ff f804 	bl	800145c <_Z18pgm_read_glyph_ptrPK7GFXfonth>
 8002454:	6138      	str	r0, [r7, #16]
        uint8_t w = pgm_read_byte(&glyph->width),
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	3302      	adds	r3, #2
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	73fb      	strb	r3, [r7, #15]
                h = pgm_read_byte(&glyph->height);
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	3303      	adds	r3, #3
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	73bb      	strb	r3, [r7, #14]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d04d      	beq.n	8002508 <_ZN12Adafruit_GFX5writeEh+0x204>
 800246c:	7bbb      	ldrb	r3, [r7, #14]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d04a      	beq.n	8002508 <_ZN12Adafruit_GFX5writeEh+0x204>
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	3305      	adds	r3, #5
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	b25b      	sxtb	r3, r3
 800247a:	81bb      	strh	r3, [r7, #12]
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	7edb      	ldrb	r3, [r3, #27]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d028      	beq.n	80024d6 <_ZN12Adafruit_GFX5writeEh+0x1d2>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800248a:	4619      	mov	r1, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	7e1b      	ldrb	r3, [r3, #24]
 8002490:	4618      	mov	r0, r3
 8002492:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002496:	7bfb      	ldrb	r3, [r7, #15]
 8002498:	4413      	add	r3, r2
 800249a:	fb00 f303 	mul.w	r3, r0, r3
 800249e:	440b      	add	r3, r1
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80024a6:	4293      	cmp	r3, r2
 80024a8:	dd15      	ble.n	80024d6 <_ZN12Adafruit_GFX5writeEh+0x1d2>
            cursor_x = 0;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	821a      	strh	r2, [r3, #16]
            cursor_y += (int16_t)textsize_y *
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	7e5b      	ldrb	r3, [r3, #25]
 80024bc:	4619      	mov	r1, r3
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	330c      	adds	r3, #12
 80024c4:	781b      	ldrb	r3, [r3, #0]
            cursor_y += (int16_t)textsize_y *
 80024c6:	fb11 f303 	smulbb	r3, r1, r3
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	4413      	add	r3, r2
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	b21a      	sxth	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	825a      	strh	r2, [r3, #18]
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f9b3 4010 	ldrsh.w	r4, [r3, #16]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f9b3 5012 	ldrsh.w	r5, [r3, #18]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	8a9b      	ldrh	r3, [r3, #20]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	8ad2      	ldrh	r2, [r2, #22]
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	7e09      	ldrb	r1, [r1, #24]
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	7e40      	ldrb	r0, [r0, #25]
 80024f2:	78fe      	ldrb	r6, [r7, #3]
 80024f4:	9003      	str	r0, [sp, #12]
 80024f6:	9102      	str	r1, [sp, #8]
 80024f8:	9201      	str	r2, [sp, #4]
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	4633      	mov	r3, r6
 80024fe:	462a      	mov	r2, r5
 8002500:	4621      	mov	r1, r4
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff fcac 	bl	8001e60 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                   textsize_y);
        }
        cursor_x +=
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800250e:	b29a      	uxth	r2, r3
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	3304      	adds	r3, #4
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	4619      	mov	r1, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	7e1b      	ldrb	r3, [r3, #24]
 800251c:	fb11 f303 	smulbb	r3, r1, r3
 8002520:	b29b      	uxth	r3, r3
        cursor_x +=
 8002522:	4413      	add	r3, r2
 8002524:	b29b      	uxth	r3, r3
 8002526:	b21a      	sxth	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	821a      	strh	r2, [r3, #16]
      }
    }
  }
  return 1;
 800252c:	2301      	movs	r3, #1
}
 800252e:	4618      	mov	r0, r3
 8002530:	371c      	adds	r7, #28
 8002532:	46bd      	mov	sp, r7
 8002534:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002536 <_ZN12Adafruit_GFX11setTextSizeEh>:
    @brief   Set text 'magnification' size. Each increase in s makes 1 pixel
   that much bigger.
    @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	460b      	mov	r3, r1
 8002540:	70fb      	strb	r3, [r7, #3]
 8002542:	78fa      	ldrb	r2, [r7, #3]
 8002544:	78fb      	ldrb	r3, [r7, #3]
 8002546:	4619      	mov	r1, r3
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f804 	bl	8002556 <_ZN12Adafruit_GFX11setTextSizeEhh>
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <_ZN12Adafruit_GFX11setTextSizeEhh>:
   that much bigger.
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	460b      	mov	r3, r1
 8002560:	70fb      	strb	r3, [r7, #3]
 8002562:	4613      	mov	r3, r2
 8002564:	70bb      	strb	r3, [r7, #2]
  textsize_x = (s_x > 0) ? s_x : 1;
 8002566:	78fb      	ldrb	r3, [r7, #3]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <_ZN12Adafruit_GFX11setTextSizeEhh+0x1a>
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	e000      	b.n	8002572 <_ZN12Adafruit_GFX11setTextSizeEhh+0x1c>
 8002570:	2201      	movs	r2, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	761a      	strb	r2, [r3, #24]
  textsize_y = (s_y > 0) ? s_y : 1;
 8002576:	78bb      	ldrb	r3, [r7, #2]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <_ZN12Adafruit_GFX11setTextSizeEhh+0x2a>
 800257c:	78ba      	ldrb	r2, [r7, #2]
 800257e:	e000      	b.n	8002582 <_ZN12Adafruit_GFX11setTextSizeEhh+0x2c>
 8002580:	2201      	movs	r2, #1
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	765a      	strb	r2, [r3, #25]
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
	...

08002594 <_ZN12Adafruit_GFX11setRotationEh>:
/*!
    @brief      Set rotation setting for display
    @param  x   0 thru 3 corresponding to 4 cardinal rotations
*/
/**************************************************************************/
void Adafruit_GFX::setRotation(uint8_t x) {
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	70fb      	strb	r3, [r7, #3]
  rotation = (x & 3);
 80025a0:	78fb      	ldrb	r3, [r7, #3]
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	769a      	strb	r2, [r3, #26]
  switch (rotation) {
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	7e9b      	ldrb	r3, [r3, #26]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d821      	bhi.n	80025f8 <_ZN12Adafruit_GFX11setRotationEh+0x64>
 80025b4:	a201      	add	r2, pc, #4	@ (adr r2, 80025bc <_ZN12Adafruit_GFX11setRotationEh+0x28>)
 80025b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ba:	bf00      	nop
 80025bc:	080025cd 	.word	0x080025cd
 80025c0:	080025e3 	.word	0x080025e3
 80025c4:	080025cd 	.word	0x080025cd
 80025c8:	080025e3 	.word	0x080025e3
  case 0:
  case 2:
    _width = WIDTH;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	819a      	strh	r2, [r3, #12]
    _height = HEIGHT;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	81da      	strh	r2, [r3, #14]
    break;
 80025e0:	e00a      	b.n	80025f8 <_ZN12Adafruit_GFX11setRotationEh+0x64>
  case 1:
  case 3:
    _width = HEIGHT;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	819a      	strh	r2, [r3, #12]
    _height = WIDTH;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	81da      	strh	r2, [r3, #14]
    break;
 80025f6:	bf00      	nop
  }
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <_ZN12Adafruit_GFX7setFontEPK7GFXfont>:
/*!
    @brief Set the font to display when print()ing, either custom or default
    @param  f  The GFXfont object, if NULL use built in 6x8 font
*/
/**************************************************************************/
void Adafruit_GFX::setFont(const GFXfont *f) {
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  if (f) {          // Font struct pointer passed in?
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00d      	beq.n	8002630 <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0x2c>
    if (!gfxFont) { // And no current font struct?
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d116      	bne.n	800264a <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0x46>
      // Switching from classic to new font behavior.
      // Move cursor pos down 6 pixels so it's on baseline.
      cursor_y += 6;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002622:	b29b      	uxth	r3, r3
 8002624:	3306      	adds	r3, #6
 8002626:	b29b      	uxth	r3, r3
 8002628:	b21a      	sxth	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	825a      	strh	r2, [r3, #18]
 800262e:	e00c      	b.n	800264a <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0x46>
    }
  } else if (gfxFont) { // NULL passed.  Current font struct defined?
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d008      	beq.n	800264a <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0x46>
    // Switching from new to classic font behavior.
    // Move cursor pos up 6 pixels so it's at top-left of char.
    cursor_y -= 6;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800263e:	b29b      	uxth	r3, r3
 8002640:	3b06      	subs	r3, #6
 8002642:	b29b      	uxth	r3, r3
 8002644:	b21a      	sxth	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	825a      	strh	r2, [r3, #18]
  }
  gfxFont = (GFXfont *)f;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	621a      	str	r2, [r3, #32]
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_>:
    @param  maxy  Pointer to maximum Y coord, passed in AND returned.
*/
/**************************************************************************/
void Adafruit_GFX::charBounds(unsigned char c, int16_t *x, int16_t *y,
                              int16_t *minx, int16_t *miny, int16_t *maxx,
                              int16_t *maxy) {
 800265c:	b580      	push	{r7, lr}
 800265e:	b08e      	sub	sp, #56	@ 0x38
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	607a      	str	r2, [r7, #4]
 8002666:	603b      	str	r3, [r7, #0]
 8002668:	460b      	mov	r3, r1
 800266a:	72fb      	strb	r3, [r7, #11]

  if (gfxFont) {
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 80fc 	beq.w	800286e <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x212>

    if (c == '\n') { // Newline?
 8002676:	7afb      	ldrb	r3, [r7, #11]
 8002678:	2b0a      	cmp	r3, #10
 800267a:	d116      	bne.n	80026aa <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x4e>
      *x = 0;        // Reset x to zero, advance y by one line
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	801a      	strh	r2, [r3, #0]
      *y += textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002688:	b29a      	uxth	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	7e5b      	ldrb	r3, [r3, #25]
 800268e:	4619      	mov	r1, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	330c      	adds	r3, #12
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	fb11 f303 	smulbb	r3, r1, r3
 800269c:	b29b      	uxth	r3, r3
 800269e:	4413      	add	r3, r2
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	b21a      	sxth	r2, r3
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	801a      	strh	r2, [r3, #0]
      if (*y < *miny)
        *miny = *y;
      *x += textsize_x * 6; // Advance x one char
    }
  }
}
 80026a8:	e175      	b.n	8002996 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x33a>
    } else if (c != '\r') { // Not a carriage return; is normal char
 80026aa:	7afb      	ldrb	r3, [r7, #11]
 80026ac:	2b0d      	cmp	r3, #13
 80026ae:	f000 8172 	beq.w	8002996 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x33a>
      uint8_t first = pgm_read_byte(&gfxFont->first),
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	3308      	adds	r3, #8
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
              last = pgm_read_byte(&gfxFont->last);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	330a      	adds	r3, #10
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
      if ((c >= first) && (c <= last)) { // Char present in this font?
 80026ca:	7afa      	ldrb	r2, [r7, #11]
 80026cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80026d0:	429a      	cmp	r2, r3
 80026d2:	f0c0 8160 	bcc.w	8002996 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x33a>
 80026d6:	7afa      	ldrb	r2, [r7, #11]
 80026d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80026dc:	429a      	cmp	r2, r3
 80026de:	f200 815a 	bhi.w	8002996 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x33a>
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6a18      	ldr	r0, [r3, #32]
 80026e6:	7afa      	ldrb	r2, [r7, #11]
 80026e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	4619      	mov	r1, r3
 80026f2:	f7fe feb3 	bl	800145c <_Z18pgm_read_glyph_ptrPK7GFXfonth>
 80026f6:	62b8      	str	r0, [r7, #40]	@ 0x28
        uint8_t gw = pgm_read_byte(&glyph->width),
 80026f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026fa:	3302      	adds	r3, #2
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                gh = pgm_read_byte(&glyph->height),
 8002702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002704:	3303      	adds	r3, #3
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                xa = pgm_read_byte(&glyph->xAdvance);
 800270c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800270e:	3304      	adds	r3, #4
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        int8_t xo = pgm_read_byte(&glyph->xOffset),
 8002716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002718:	3305      	adds	r3, #5
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
               yo = pgm_read_byte(&glyph->yOffset);
 8002720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002722:	3306      	adds	r3, #6
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        if (wrap && ((*x + (((int16_t)xo + gw) * textsize_x)) > _width)) {
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	7edb      	ldrb	r3, [r3, #27]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d028      	beq.n	8002784 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x128>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002738:	4619      	mov	r1, r3
 800273a:	f997 2024 	ldrsb.w	r2, [r7, #36]	@ 0x24
 800273e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002742:	4413      	add	r3, r2
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	7e12      	ldrb	r2, [r2, #24]
 8002748:	fb02 f303 	mul.w	r3, r2, r3
 800274c:	440b      	add	r3, r1
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8002754:	4293      	cmp	r3, r2
 8002756:	dd15      	ble.n	8002784 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x128>
          *x = 0; // Reset x to zero, advance y by one line
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	801a      	strh	r2, [r3, #0]
          *y += textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002764:	b29a      	uxth	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	7e5b      	ldrb	r3, [r3, #25]
 800276a:	4619      	mov	r1, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	330c      	adds	r3, #12
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	fb11 f303 	smulbb	r3, r1, r3
 8002778:	b29b      	uxth	r3, r3
 800277a:	4413      	add	r3, r2
 800277c:	b29b      	uxth	r3, r3
 800277e:	b21a      	sxth	r2, r3
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	801a      	strh	r2, [r3, #0]
        int16_t tsx = (int16_t)textsize_x, tsy = (int16_t)textsize_y,
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	7e1b      	ldrb	r3, [r3, #24]
 8002788:	843b      	strh	r3, [r7, #32]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	7e5b      	ldrb	r3, [r3, #25]
 800278e:	83fb      	strh	r3, [r7, #30]
                x1 = *x + xo * tsx, y1 = *y + yo * tsy, x2 = x1 + gw * tsx - 1,
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002796:	b29a      	uxth	r2, r3
 8002798:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 800279c:	b299      	uxth	r1, r3
 800279e:	8c3b      	ldrh	r3, [r7, #32]
 80027a0:	fb11 f303 	smulbb	r3, r1, r3
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	4413      	add	r3, r2
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	83bb      	strh	r3, [r7, #28]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80027b8:	b299      	uxth	r1, r3
 80027ba:	8bfb      	ldrh	r3, [r7, #30]
 80027bc:	fb11 f303 	smulbb	r3, r1, r3
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	4413      	add	r3, r2
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	837b      	strh	r3, [r7, #26]
 80027c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	8c3b      	ldrh	r3, [r7, #32]
 80027d0:	fb12 f303 	smulbb	r3, r2, r3
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	8bbb      	ldrh	r3, [r7, #28]
 80027d8:	4413      	add	r3, r2
 80027da:	b29b      	uxth	r3, r3
 80027dc:	3b01      	subs	r3, #1
 80027de:	b29b      	uxth	r3, r3
 80027e0:	833b      	strh	r3, [r7, #24]
                y2 = y1 + gh * tsy - 1;
 80027e2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	8bfb      	ldrh	r3, [r7, #30]
 80027ea:	fb12 f303 	smulbb	r3, r2, r3
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	8b7b      	ldrh	r3, [r7, #26]
 80027f2:	4413      	add	r3, r2
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	82fb      	strh	r3, [r7, #22]
        if (x1 < *minx)
 80027fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002802:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002806:	429a      	cmp	r2, r3
 8002808:	da02      	bge.n	8002810 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x1b4>
          *minx = x1;
 800280a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800280c:	8bba      	ldrh	r2, [r7, #28]
 800280e:	801a      	strh	r2, [r3, #0]
        if (y1 < *miny)
 8002810:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002812:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002816:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800281a:	429a      	cmp	r2, r3
 800281c:	da02      	bge.n	8002824 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x1c8>
          *miny = y1;
 800281e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002820:	8b7a      	ldrh	r2, [r7, #26]
 8002822:	801a      	strh	r2, [r3, #0]
        if (x2 > *maxx)
 8002824:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002826:	f9b3 3000 	ldrsh.w	r3, [r3]
 800282a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800282e:	429a      	cmp	r2, r3
 8002830:	dd02      	ble.n	8002838 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x1dc>
          *maxx = x2;
 8002832:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002834:	8b3a      	ldrh	r2, [r7, #24]
 8002836:	801a      	strh	r2, [r3, #0]
        if (y2 > *maxy)
 8002838:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800283a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800283e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002842:	429a      	cmp	r2, r3
 8002844:	dd02      	ble.n	800284c <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x1f0>
          *maxy = y2;
 8002846:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002848:	8afa      	ldrh	r2, [r7, #22]
 800284a:	801a      	strh	r2, [r3, #0]
        *x += xa * tsx;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002852:	b29a      	uxth	r2, r3
 8002854:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002858:	b299      	uxth	r1, r3
 800285a:	8c3b      	ldrh	r3, [r7, #32]
 800285c:	fb11 f303 	smulbb	r3, r1, r3
 8002860:	b29b      	uxth	r3, r3
 8002862:	4413      	add	r3, r2
 8002864:	b29b      	uxth	r3, r3
 8002866:	b21a      	sxth	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	801a      	strh	r2, [r3, #0]
}
 800286c:	e093      	b.n	8002996 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x33a>
    if (c == '\n') {        // Newline?
 800286e:	7afb      	ldrb	r3, [r7, #11]
 8002870:	2b0a      	cmp	r3, #10
 8002872:	d110      	bne.n	8002896 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x23a>
      *x = 0;               // Reset x to zero,
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	801a      	strh	r2, [r3, #0]
      *y += textsize_y * 8; // advance y one line
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002880:	b29a      	uxth	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	7e5b      	ldrb	r3, [r3, #25]
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	b29b      	uxth	r3, r3
 800288a:	4413      	add	r3, r2
 800288c:	b29b      	uxth	r3, r3
 800288e:	b21a      	sxth	r2, r3
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	801a      	strh	r2, [r3, #0]
}
 8002894:	e07f      	b.n	8002996 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x33a>
    } else if (c != '\r') { // Normal char; ignore carriage returns
 8002896:	7afb      	ldrb	r3, [r7, #11]
 8002898:	2b0d      	cmp	r3, #13
 800289a:	d07c      	beq.n	8002996 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x33a>
      if (wrap && ((*x + textsize_x * 6) > _width)) { // Off right?
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	7edb      	ldrb	r3, [r3, #27]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d020      	beq.n	80028e6 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x28a>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028aa:	4619      	mov	r1, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	7e1b      	ldrb	r3, [r3, #24]
 80028b0:	461a      	mov	r2, r3
 80028b2:	4613      	mov	r3, r2
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	4413      	add	r3, r2
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	440b      	add	r3, r1
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80028c2:	4293      	cmp	r3, r2
 80028c4:	dd0f      	ble.n	80028e6 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x28a>
        *x = 0;                                       // Reset x to zero,
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	801a      	strh	r2, [r3, #0]
        *y += textsize_y * 8;                         // advance y one line
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	7e5b      	ldrb	r3, [r3, #25]
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	b29b      	uxth	r3, r3
 80028dc:	4413      	add	r3, r2
 80028de:	b29b      	uxth	r3, r3
 80028e0:	b21a      	sxth	r2, r3
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	801a      	strh	r2, [r3, #0]
      int x2 = *x + textsize_x * 6 - 1, // Lower-right pixel of char
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028ec:	4619      	mov	r1, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	7e1b      	ldrb	r3, [r3, #24]
 80028f2:	461a      	mov	r2, r3
 80028f4:	4613      	mov	r3, r2
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	4413      	add	r3, r2
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	440b      	add	r3, r1
 80028fe:	3b01      	subs	r3, #1
 8002900:	637b      	str	r3, [r7, #52]	@ 0x34
          y2 = *y + textsize_y * 8 - 1;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002908:	461a      	mov	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	7e5b      	ldrb	r3, [r3, #25]
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	4413      	add	r3, r2
 8002912:	3b01      	subs	r3, #1
 8002914:	633b      	str	r3, [r7, #48]	@ 0x30
      if (x2 > *maxx)
 8002916:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002918:	f9b3 3000 	ldrsh.w	r3, [r3]
 800291c:	461a      	mov	r2, r3
 800291e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002920:	4293      	cmp	r3, r2
 8002922:	dd03      	ble.n	800292c <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x2d0>
        *maxx = x2; // Track max x, y
 8002924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002926:	b21a      	sxth	r2, r3
 8002928:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800292a:	801a      	strh	r2, [r3, #0]
      if (y2 > *maxy)
 800292c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800292e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002932:	461a      	mov	r2, r3
 8002934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002936:	4293      	cmp	r3, r2
 8002938:	dd03      	ble.n	8002942 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x2e6>
        *maxy = y2;
 800293a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800293c:	b21a      	sxth	r2, r3
 800293e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002940:	801a      	strh	r2, [r3, #0]
      if (*x < *minx)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002948:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800294a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800294e:	429a      	cmp	r2, r3
 8002950:	da04      	bge.n	800295c <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x300>
        *minx = *x; // Track min x, y
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002958:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800295a:	801a      	strh	r2, [r3, #0]
      if (*y < *miny)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002962:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002968:	429a      	cmp	r2, r3
 800296a:	da04      	bge.n	8002976 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x31a>
        *miny = *y;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002972:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002974:	801a      	strh	r2, [r3, #0]
      *x += textsize_x * 6; // Advance x one char
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f9b3 3000 	ldrsh.w	r3, [r3]
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	7e1b      	ldrb	r3, [r3, #24]
 8002982:	4619      	mov	r1, r3
 8002984:	0049      	lsls	r1, r1, #1
 8002986:	440b      	add	r3, r1
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	b29b      	uxth	r3, r3
 800298c:	4413      	add	r3, r2
 800298e:	b29b      	uxth	r3, r3
 8002990:	b21a      	sxth	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	801a      	strh	r2, [r3, #0]
}
 8002996:	bf00      	nop
 8002998:	3738      	adds	r7, #56	@ 0x38
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>:
    @param  h    The boundary height, returned by function
*/
/**************************************************************************/
void Adafruit_GFX::getTextBounds(const char *str, int16_t x, int16_t y,
                                 int16_t *x1, int16_t *y1, uint16_t *w,
                                 uint16_t *h) {
 800299e:	b580      	push	{r7, lr}
 80029a0:	b08c      	sub	sp, #48	@ 0x30
 80029a2:	af04      	add	r7, sp, #16
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	4611      	mov	r1, r2
 80029aa:	461a      	mov	r2, r3
 80029ac:	460b      	mov	r3, r1
 80029ae:	80fb      	strh	r3, [r7, #6]
 80029b0:	4613      	mov	r3, r2
 80029b2:	80bb      	strh	r3, [r7, #4]

  uint8_t c; // Current character
  int16_t minx = 0x7FFF, miny = 0x7FFF, maxx = -1, maxy = -1; // Bound rect
 80029b4:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80029b8:	83bb      	strh	r3, [r7, #28]
 80029ba:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80029be:	837b      	strh	r3, [r7, #26]
 80029c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80029c4:	833b      	strh	r3, [r7, #24]
 80029c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80029ca:	82fb      	strh	r3, [r7, #22]
  // Bound rect is intentionally initialized inverted, so 1st char sets it

  *x1 = x; // Initial position is value passed in
 80029cc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80029d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d2:	801a      	strh	r2, [r3, #0]
  *y1 = y;
 80029d4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80029d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029da:	801a      	strh	r2, [r3, #0]
  *w = *h = 0; // Initial size is zero
 80029dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029de:	2200      	movs	r2, #0
 80029e0:	801a      	strh	r2, [r3, #0]
 80029e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029e4:	881a      	ldrh	r2, [r3, #0]
 80029e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e8:	801a      	strh	r2, [r3, #0]

  while ((c = *str++)) {
 80029ea:	e012      	b.n	8002a12 <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_+0x74>
    // charBounds() modifies x/y to advance for each character,
    // and min/max x/y are updated to incrementally build bounding rect.
    charBounds(c, &x, &y, &minx, &miny, &maxx, &maxy);
 80029ec:	1d38      	adds	r0, r7, #4
 80029ee:	1dba      	adds	r2, r7, #6
 80029f0:	7ff9      	ldrb	r1, [r7, #31]
 80029f2:	f107 0316 	add.w	r3, r7, #22
 80029f6:	9303      	str	r3, [sp, #12]
 80029f8:	f107 0318 	add.w	r3, r7, #24
 80029fc:	9302      	str	r3, [sp, #8]
 80029fe:	f107 031a 	add.w	r3, r7, #26
 8002a02:	9301      	str	r3, [sp, #4]
 8002a04:	f107 031c 	add.w	r3, r7, #28
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f7ff fe25 	bl	800265c <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_>
  while ((c = *str++)) {
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	60ba      	str	r2, [r7, #8]
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	77fb      	strb	r3, [r7, #31]
 8002a1c:	7ffb      	ldrb	r3, [r7, #31]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	bf14      	ite	ne
 8002a22:	2301      	movne	r3, #1
 8002a24:	2300      	moveq	r3, #0
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1df      	bne.n	80029ec <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_+0x4e>
  }

  if (maxx >= minx) {     // If legit string bounds were found...
 8002a2c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002a30:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	db0f      	blt.n	8002a58 <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_+0xba>
    *x1 = minx;           // Update x1 to least X coord,
 8002a38:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a3e:	801a      	strh	r2, [r3, #0]
    *w = maxx - minx + 1; // And w to bound rect width
 8002a40:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	3301      	adds	r3, #1
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a56:	801a      	strh	r2, [r3, #0]
  }
  if (maxy >= miny) { // Same for height
 8002a58:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002a5c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	db0f      	blt.n	8002a84 <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_+0xe6>
    *y1 = miny;
 8002a64:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8002a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a6a:	801a      	strh	r2, [r3, #0]
    *h = maxy - miny + 1;
 8002a6c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a82:	801a      	strh	r2, [r3, #0]
  }
}
 8002a84:	bf00      	nop
 8002a86:	3720      	adds	r7, #32
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <_ZN12Adafruit_GFX13invertDisplayEb>:
/*!
    @brief      Invert the display (ideally using built-in hardware command)
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	70fb      	strb	r3, [r7, #3]
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <_ZN11GFXcanvas16C1Ettb>:
   false, the subclass must initialize the buffer before any drawing operation,
   and free it in the destructor. If false (the default), the buffer is
   allocated and freed by the library.
*/
/**************************************************************************/
GFXcanvas16::GFXcanvas16(uint16_t w, uint16_t h, bool allocate_buffer)
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	4608      	mov	r0, r1
 8002aae:	4611      	mov	r1, r2
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	817b      	strh	r3, [r7, #10]
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	813b      	strh	r3, [r7, #8]
 8002aba:	4613      	mov	r3, r2
 8002abc:	71fb      	strb	r3, [r7, #7]
    : Adafruit_GFX(w, h), buffer_owned(allocate_buffer) {
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002ac4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7fe fce5 	bl	8001498 <_ZN12Adafruit_GFXC1Ess>
 8002ace:	4a18      	ldr	r2, [pc, #96]	@ (8002b30 <_ZN11GFXcanvas16C1Ettb+0x8c>)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	79fa      	ldrb	r2, [r7, #7]
 8002ad8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  if (allocate_buffer) {
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d01d      	beq.n	8002b1e <_ZN11GFXcanvas16C1Ettb+0x7a>
    uint32_t bytes = w * h * 2;
 8002ae2:	897b      	ldrh	r3, [r7, #10]
 8002ae4:	893a      	ldrh	r2, [r7, #8]
 8002ae6:	fb02 f303 	mul.w	r3, r2, r3
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	617b      	str	r3, [r7, #20]
    if ((buffer = (uint16_t *)malloc(bytes))) {
 8002aee:	6978      	ldr	r0, [r7, #20]
 8002af0:	f015 ffaa 	bl	8018a48 <malloc>
 8002af4:	4603      	mov	r3, r0
 8002af6:	461a      	mov	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	625a      	str	r2, [r3, #36]	@ 0x24
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	bf14      	ite	ne
 8002b04:	2301      	movne	r3, #1
 8002b06:	2300      	moveq	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <_ZN11GFXcanvas16C1Ettb+0x80>
      memset(buffer, 0, bytes);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	2100      	movs	r1, #0
 8002b16:	4618      	mov	r0, r3
 8002b18:	f016 fdff 	bl	801971a <memset>
 8002b1c:	e002      	b.n	8002b24 <_ZN11GFXcanvas16C1Ettb+0x80>
    }
  } else {
    buffer = nullptr;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4618      	mov	r0, r3
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	0801bdb4 	.word	0x0801bdb4

08002b34 <_ZN11GFXcanvas16D1Ev>:
/**************************************************************************/
/*!
   @brief    Delete the canvas, free memory
*/
/**************************************************************************/
GFXcanvas16::~GFXcanvas16(void) {
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	4a0a      	ldr	r2, [pc, #40]	@ (8002b68 <_ZN11GFXcanvas16D1Ev+0x34>)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	601a      	str	r2, [r3, #0]
  if (buffer && buffer_owned)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d009      	beq.n	8002b5e <_ZN11GFXcanvas16D1Ev+0x2a>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d004      	beq.n	8002b5e <_ZN11GFXcanvas16D1Ev+0x2a>
    free(buffer);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f015 ff7d 	bl	8018a58 <free>
}
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4618      	mov	r0, r3
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	0801bdb4 	.word	0x0801bdb4

08002b6c <_ZN11GFXcanvas169drawPixelEsst>:
    @param  x   x coordinate
    @param  y   y coordinate
    @param  color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void GFXcanvas16::drawPixel(int16_t x, int16_t y, uint16_t color) {
 8002b6c:	b480      	push	{r7}
 8002b6e:	b087      	sub	sp, #28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	4608      	mov	r0, r1
 8002b76:	4611      	mov	r1, r2
 8002b78:	461a      	mov	r2, r3
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	817b      	strh	r3, [r7, #10]
 8002b7e:	460b      	mov	r3, r1
 8002b80:	813b      	strh	r3, [r7, #8]
 8002b82:	4613      	mov	r3, r2
 8002b84:	80fb      	strh	r3, [r7, #6]
  if (buffer) {
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d065      	beq.n	8002c5a <_ZN11GFXcanvas169drawPixelEsst+0xee>
    if ((x < 0) || (y < 0) || (x >= _width) || (y >= _height))
 8002b8e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	db60      	blt.n	8002c58 <_ZN11GFXcanvas169drawPixelEsst+0xec>
 8002b96:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	db5c      	blt.n	8002c58 <_ZN11GFXcanvas169drawPixelEsst+0xec>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002ba4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	da55      	bge.n	8002c58 <_ZN11GFXcanvas169drawPixelEsst+0xec>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002bb2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	da4e      	bge.n	8002c58 <_ZN11GFXcanvas169drawPixelEsst+0xec>
      return;

    int16_t t;
    switch (rotation) {
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	7e9b      	ldrb	r3, [r3, #26]
 8002bbe:	2b03      	cmp	r3, #3
 8002bc0:	d02a      	beq.n	8002c18 <_ZN11GFXcanvas169drawPixelEsst+0xac>
 8002bc2:	2b03      	cmp	r3, #3
 8002bc4:	dc37      	bgt.n	8002c36 <_ZN11GFXcanvas169drawPixelEsst+0xca>
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d002      	beq.n	8002bd0 <_ZN11GFXcanvas169drawPixelEsst+0x64>
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d00f      	beq.n	8002bee <_ZN11GFXcanvas169drawPixelEsst+0x82>
 8002bce:	e032      	b.n	8002c36 <_ZN11GFXcanvas169drawPixelEsst+0xca>
    case 1:
      t = x;
 8002bd0:	897b      	ldrh	r3, [r7, #10]
 8002bd2:	82fb      	strh	r3, [r7, #22]
      x = WIDTH - 1 - y;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	893b      	ldrh	r3, [r7, #8]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	3b01      	subs	r3, #1
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	817b      	strh	r3, [r7, #10]
      y = t;
 8002be8:	8afb      	ldrh	r3, [r7, #22]
 8002bea:	813b      	strh	r3, [r7, #8]
      break;
 8002bec:	e023      	b.n	8002c36 <_ZN11GFXcanvas169drawPixelEsst+0xca>
    case 2:
      x = WIDTH - 1 - x;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	897b      	ldrh	r3, [r7, #10]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	817b      	strh	r3, [r7, #10]
      y = HEIGHT - 1 - y;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	893b      	ldrh	r3, [r7, #8]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	813b      	strh	r3, [r7, #8]
      break;
 8002c16:	e00e      	b.n	8002c36 <_ZN11GFXcanvas169drawPixelEsst+0xca>
    case 3:
      t = x;
 8002c18:	897b      	ldrh	r3, [r7, #10]
 8002c1a:	82fb      	strh	r3, [r7, #22]
      x = y;
 8002c1c:	893b      	ldrh	r3, [r7, #8]
 8002c1e:	817b      	strh	r3, [r7, #10]
      y = HEIGHT - 1 - t;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	8afb      	ldrh	r3, [r7, #22]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	813b      	strh	r3, [r7, #8]
      break;
 8002c34:	bf00      	nop
    }

    buffer[x + y * WIDTH] = color;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c3a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002c3e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8002c48:	fb00 f303 	mul.w	r3, r0, r3
 8002c4c:	440b      	add	r3, r1
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	4413      	add	r3, r2
 8002c52:	88fa      	ldrh	r2, [r7, #6]
 8002c54:	801a      	strh	r2, [r3, #0]
 8002c56:	e000      	b.n	8002c5a <_ZN11GFXcanvas169drawPixelEsst+0xee>
      return;
 8002c58:	bf00      	nop
  }
}
 8002c5a:	371c      	adds	r7, #28
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <_ZN11GFXcanvas1610fillScreenEt>:
/*!
    @brief  Fill the framebuffer completely with one color
    @param  color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void GFXcanvas16::fillScreen(uint16_t color) {
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	807b      	strh	r3, [r7, #2]
  if (buffer) {
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d035      	beq.n	8002ce4 <_ZN11GFXcanvas1610fillScreenEt+0x80>
    uint8_t hi = color >> 8, lo = color & 0xFF;
 8002c78:	887b      	ldrh	r3, [r7, #2]
 8002c7a:	0a1b      	lsrs	r3, r3, #8
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	74fb      	strb	r3, [r7, #19]
 8002c80:	887b      	ldrh	r3, [r7, #2]
 8002c82:	74bb      	strb	r3, [r7, #18]
    if (hi == lo) {
 8002c84:	7cfa      	ldrb	r2, [r7, #19]
 8002c86:	7cbb      	ldrb	r3, [r7, #18]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d110      	bne.n	8002cae <_ZN11GFXcanvas1610fillScreenEt+0x4a>
      memset(buffer, lo, WIDTH * HEIGHT * 2);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002c90:	7cb9      	ldrb	r1, [r7, #18]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002ca0:	fb02 f303 	mul.w	r3, r2, r3
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	f016 fd37 	bl	801971a <memset>
      uint32_t i, pixels = WIDTH * HEIGHT;
      for (i = 0; i < pixels; i++)
        buffer[i] = color;
    }
  }
}
 8002cac:	e01a      	b.n	8002ce4 <_ZN11GFXcanvas1610fillScreenEt+0x80>
      uint32_t i, pixels = WIDTH * HEIGHT;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002cbc:	fb02 f303 	mul.w	r3, r2, r3
 8002cc0:	60fb      	str	r3, [r7, #12]
      for (i = 0; i < pixels; i++)
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	617b      	str	r3, [r7, #20]
 8002cc6:	e009      	b.n	8002cdc <_ZN11GFXcanvas1610fillScreenEt+0x78>
        buffer[i] = color;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	4413      	add	r3, r2
 8002cd2:	887a      	ldrh	r2, [r7, #2]
 8002cd4:	801a      	strh	r2, [r3, #0]
      for (i = 0; i < pixels; i++)
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d3f1      	bcc.n	8002cc8 <_ZN11GFXcanvas1610fillScreenEt+0x64>
}
 8002ce4:	bf00      	nop
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <_ZN11GFXcanvas1613drawFastVLineEssst>:
   @param    h   length of vertical line to be drawn, including first point
   @param    color   color 16-bit 5-6-5 Color to draw line with
*/
/**************************************************************************/
void GFXcanvas16::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                uint16_t color) {
 8002cec:	b590      	push	{r4, r7, lr}
 8002cee:	b089      	sub	sp, #36	@ 0x24
 8002cf0:	af02      	add	r7, sp, #8
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	4608      	mov	r0, r1
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	817b      	strh	r3, [r7, #10]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	813b      	strh	r3, [r7, #8]
 8002d02:	4613      	mov	r3, r2
 8002d04:	80fb      	strh	r3, [r7, #6]
  if (h < 0) { // Convert negative heights to positive equivalent
 8002d06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	da15      	bge.n	8002d3a <_ZN11GFXcanvas1613drawFastVLineEssst+0x4e>
    h *= -1;
 8002d0e:	88fb      	ldrh	r3, [r7, #6]
 8002d10:	425b      	negs	r3, r3
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	80fb      	strh	r3, [r7, #6]
    y -= h - 1;
 8002d16:	893a      	ldrh	r2, [r7, #8]
 8002d18:	88fb      	ldrh	r3, [r7, #6]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	3301      	adds	r3, #1
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	813b      	strh	r3, [r7, #8]
    if (y < 0) {
 8002d24:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	da06      	bge.n	8002d3a <_ZN11GFXcanvas1613drawFastVLineEssst+0x4e>
      h += y;
 8002d2c:	88fa      	ldrh	r2, [r7, #6]
 8002d2e:	893b      	ldrh	r3, [r7, #8]
 8002d30:	4413      	add	r3, r2
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	80fb      	strh	r3, [r7, #6]
      y = 0;
 8002d36:	2300      	movs	r3, #0
 8002d38:	813b      	strh	r3, [r7, #8]
    }
  }

  // Edge rejection (no-draw if totally off canvas)
  if ((x < 0) || (x >= width()) || (y >= height()) || ((y + h - 1) < 0)) {
 8002d3a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	db1a      	blt.n	8002d78 <_ZN11GFXcanvas1613drawFastVLineEssst+0x8c>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7fe fb63 	bl	8001410 <_ZNK12Adafruit_GFX5widthEv>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d52:	4293      	cmp	r3, r2
 8002d54:	da10      	bge.n	8002d78 <_ZN11GFXcanvas1613drawFastVLineEssst+0x8c>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fe fb66 	bl	800142a <_ZNK12Adafruit_GFX6heightEv>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	461a      	mov	r2, r3
 8002d62:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002d66:	4293      	cmp	r3, r2
 8002d68:	da06      	bge.n	8002d78 <_ZN11GFXcanvas1613drawFastVLineEssst+0x8c>
 8002d6a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002d6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d72:	4413      	add	r3, r2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	dc01      	bgt.n	8002d7c <_ZN11GFXcanvas1613drawFastVLineEssst+0x90>
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e000      	b.n	8002d7e <_ZN11GFXcanvas1613drawFastVLineEssst+0x92>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f040 80c8 	bne.w	8002f14 <_ZN11GFXcanvas1613drawFastVLineEssst+0x228>
    return;
  }

  if (y < 0) { // Clip top
 8002d84:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	da06      	bge.n	8002d9a <_ZN11GFXcanvas1613drawFastVLineEssst+0xae>
    h += y;
 8002d8c:	88fa      	ldrh	r2, [r7, #6]
 8002d8e:	893b      	ldrh	r3, [r7, #8]
 8002d90:	4413      	add	r3, r2
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	80fb      	strh	r3, [r7, #6]
    y = 0;
 8002d96:	2300      	movs	r3, #0
 8002d98:	813b      	strh	r3, [r7, #8]
  }
  if (y + h > height()) { // Clip bottom
 8002d9a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002d9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002da2:	18d4      	adds	r4, r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fe fb3f 	bl	800142a <_ZNK12Adafruit_GFX6heightEv>
 8002dac:	4603      	mov	r3, r0
 8002dae:	429c      	cmp	r4, r3
 8002db0:	bfcc      	ite	gt
 8002db2:	2301      	movgt	r3, #1
 8002db4:	2300      	movle	r3, #0
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d009      	beq.n	8002dd0 <_ZN11GFXcanvas1613drawFastVLineEssst+0xe4>
    h = height() - y;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fe fb33 	bl	800142a <_ZNK12Adafruit_GFX6heightEv>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	893b      	ldrh	r3, [r7, #8]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	80fb      	strh	r3, [r7, #6]
  }

  if (getRotation() == 0) {
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fe fb36 	bl	8001444 <_ZNK12Adafruit_GFX11getRotationEv>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	bf0c      	ite	eq
 8002dde:	2301      	moveq	r3, #1
 8002de0:	2300      	movne	r3, #0
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00c      	beq.n	8002e02 <_ZN11GFXcanvas1613drawFastVLineEssst+0x116>
    drawFastRawVLine(x, y, h, color);
 8002de8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002dec:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002df0:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002df4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	4603      	mov	r3, r0
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 f9a6 	bl	800314c <_ZN11GFXcanvas1616drawFastRawVLineEssst>
 8002e00:	e089      	b.n	8002f16 <_ZN11GFXcanvas1613drawFastVLineEssst+0x22a>
  } else if (getRotation() == 1) {
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fe fb1d 	bl	8001444 <_ZNK12Adafruit_GFX11getRotationEv>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	bf0c      	ite	eq
 8002e10:	2301      	moveq	r3, #1
 8002e12:	2300      	movne	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d021      	beq.n	8002e5e <_ZN11GFXcanvas1613drawFastVLineEssst+0x172>
    int16_t t = x;
 8002e1a:	897b      	ldrh	r3, [r7, #10]
 8002e1c:	82bb      	strh	r3, [r7, #20]
    x = WIDTH - 1 - y;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	893b      	ldrh	r3, [r7, #8]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	817b      	strh	r3, [r7, #10]
    y = t;
 8002e32:	8abb      	ldrh	r3, [r7, #20]
 8002e34:	813b      	strh	r3, [r7, #8]
    x -= h - 1;
 8002e36:	897a      	ldrh	r2, [r7, #10]
 8002e38:	88fb      	ldrh	r3, [r7, #6]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	3301      	adds	r3, #1
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	817b      	strh	r3, [r7, #10]
    drawFastRawHLine(x, y, h, color);
 8002e44:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002e48:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002e4c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002e50:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	4603      	mov	r3, r0
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 f9b5 	bl	80031c6 <_ZN11GFXcanvas1616drawFastRawHLineEssst>
 8002e5c:	e05b      	b.n	8002f16 <_ZN11GFXcanvas1613drawFastVLineEssst+0x22a>
  } else if (getRotation() == 2) {
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fe faef 	bl	8001444 <_ZNK12Adafruit_GFX11getRotationEv>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	bf0c      	ite	eq
 8002e6c:	2301      	moveq	r3, #1
 8002e6e:	2300      	movne	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d027      	beq.n	8002ec6 <_ZN11GFXcanvas1613drawFastVLineEssst+0x1da>
    x = WIDTH - 1 - x;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	897b      	ldrh	r3, [r7, #10]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	3b01      	subs	r3, #1
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	817b      	strh	r3, [r7, #10]
    y = HEIGHT - 1 - y;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	893b      	ldrh	r3, [r7, #8]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	813b      	strh	r3, [r7, #8]

    y -= h - 1;
 8002e9e:	893a      	ldrh	r2, [r7, #8]
 8002ea0:	88fb      	ldrh	r3, [r7, #6]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	813b      	strh	r3, [r7, #8]
    drawFastRawVLine(x, y, h, color);
 8002eac:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002eb0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002eb4:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002eb8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 f944 	bl	800314c <_ZN11GFXcanvas1616drawFastRawVLineEssst>
 8002ec4:	e027      	b.n	8002f16 <_ZN11GFXcanvas1613drawFastVLineEssst+0x22a>
  } else if (getRotation() == 3) {
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fe fabb 	bl	8001444 <_ZNK12Adafruit_GFX11getRotationEv>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	bf0c      	ite	eq
 8002ed4:	2301      	moveq	r3, #1
 8002ed6:	2300      	movne	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d01b      	beq.n	8002f16 <_ZN11GFXcanvas1613drawFastVLineEssst+0x22a>
    int16_t t = x;
 8002ede:	897b      	ldrh	r3, [r7, #10]
 8002ee0:	82fb      	strh	r3, [r7, #22]
    x = y;
 8002ee2:	893b      	ldrh	r3, [r7, #8]
 8002ee4:	817b      	strh	r3, [r7, #10]
    y = HEIGHT - 1 - t;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	8afb      	ldrh	r3, [r7, #22]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	813b      	strh	r3, [r7, #8]
    drawFastRawHLine(x, y, h, color);
 8002efa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002efe:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002f02:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002f06:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 f95a 	bl	80031c6 <_ZN11GFXcanvas1616drawFastRawHLineEssst>
 8002f12:	e000      	b.n	8002f16 <_ZN11GFXcanvas1613drawFastVLineEssst+0x22a>
    return;
 8002f14:	bf00      	nop
  }
}
 8002f16:	371c      	adds	r7, #28
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd90      	pop	{r4, r7, pc}

08002f1c <_ZN11GFXcanvas1613drawFastHLineEssst>:
   @param  w      Length of horizontal line to be drawn, including 1st point
   @param  color  Color 16-bit 5-6-5 Color to draw line with
*/
/**************************************************************************/
void GFXcanvas16::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                uint16_t color) {
 8002f1c:	b590      	push	{r4, r7, lr}
 8002f1e:	b089      	sub	sp, #36	@ 0x24
 8002f20:	af02      	add	r7, sp, #8
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	4608      	mov	r0, r1
 8002f26:	4611      	mov	r1, r2
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	817b      	strh	r3, [r7, #10]
 8002f2e:	460b      	mov	r3, r1
 8002f30:	813b      	strh	r3, [r7, #8]
 8002f32:	4613      	mov	r3, r2
 8002f34:	80fb      	strh	r3, [r7, #6]
  if (w < 0) { // Convert negative widths to positive equivalent
 8002f36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	da15      	bge.n	8002f6a <_ZN11GFXcanvas1613drawFastHLineEssst+0x4e>
    w *= -1;
 8002f3e:	88fb      	ldrh	r3, [r7, #6]
 8002f40:	425b      	negs	r3, r3
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	80fb      	strh	r3, [r7, #6]
    x -= w - 1;
 8002f46:	897a      	ldrh	r2, [r7, #10]
 8002f48:	88fb      	ldrh	r3, [r7, #6]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	3301      	adds	r3, #1
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	817b      	strh	r3, [r7, #10]
    if (x < 0) {
 8002f54:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	da06      	bge.n	8002f6a <_ZN11GFXcanvas1613drawFastHLineEssst+0x4e>
      w += x;
 8002f5c:	88fa      	ldrh	r2, [r7, #6]
 8002f5e:	897b      	ldrh	r3, [r7, #10]
 8002f60:	4413      	add	r3, r2
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	80fb      	strh	r3, [r7, #6]
      x = 0;
 8002f66:	2300      	movs	r3, #0
 8002f68:	817b      	strh	r3, [r7, #10]
    }
  }

  // Edge rejection (no-draw if totally off canvas)
  if ((y < 0) || (y >= height()) || (x >= width()) || ((x + w - 1) < 0)) {
 8002f6a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	db1a      	blt.n	8002fa8 <_ZN11GFXcanvas1613drawFastHLineEssst+0x8c>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fe fa58 	bl	800142a <_ZNK12Adafruit_GFX6heightEv>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002f82:	4293      	cmp	r3, r2
 8002f84:	da10      	bge.n	8002fa8 <_ZN11GFXcanvas1613drawFastHLineEssst+0x8c>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fe fa41 	bl	8001410 <_ZNK12Adafruit_GFX5widthEv>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	461a      	mov	r2, r3
 8002f92:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002f96:	4293      	cmp	r3, r2
 8002f98:	da06      	bge.n	8002fa8 <_ZN11GFXcanvas1613drawFastHLineEssst+0x8c>
 8002f9a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002f9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	dc01      	bgt.n	8002fac <_ZN11GFXcanvas1613drawFastHLineEssst+0x90>
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e000      	b.n	8002fae <_ZN11GFXcanvas1613drawFastHLineEssst+0x92>
 8002fac:	2300      	movs	r3, #0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f040 80c8 	bne.w	8003144 <_ZN11GFXcanvas1613drawFastHLineEssst+0x228>
    return;
  }

  if (x < 0) { // Clip left
 8002fb4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	da06      	bge.n	8002fca <_ZN11GFXcanvas1613drawFastHLineEssst+0xae>
    w += x;
 8002fbc:	88fa      	ldrh	r2, [r7, #6]
 8002fbe:	897b      	ldrh	r3, [r7, #10]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	80fb      	strh	r3, [r7, #6]
    x = 0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	817b      	strh	r3, [r7, #10]
  }
  if (x + w >= width()) { // Clip right
 8002fca:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002fce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fd2:	18d4      	adds	r4, r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fe fa1a 	bl	8001410 <_ZNK12Adafruit_GFX5widthEv>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	429c      	cmp	r4, r3
 8002fe0:	bfac      	ite	ge
 8002fe2:	2301      	movge	r3, #1
 8002fe4:	2300      	movlt	r3, #0
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d009      	beq.n	8003000 <_ZN11GFXcanvas1613drawFastHLineEssst+0xe4>
    w = width() - x;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fe fa0e 	bl	8001410 <_ZNK12Adafruit_GFX5widthEv>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	897b      	ldrh	r3, [r7, #10]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	80fb      	strh	r3, [r7, #6]
  }

  if (getRotation() == 0) {
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4618      	mov	r0, r3
 8003004:	f7fe fa1e 	bl	8001444 <_ZNK12Adafruit_GFX11getRotationEv>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	bf0c      	ite	eq
 800300e:	2301      	moveq	r3, #1
 8003010:	2300      	movne	r3, #0
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00c      	beq.n	8003032 <_ZN11GFXcanvas1613drawFastHLineEssst+0x116>
    drawFastRawHLine(x, y, w, color);
 8003018:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800301c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003020:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003024:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	4603      	mov	r3, r0
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 f8cb 	bl	80031c6 <_ZN11GFXcanvas1616drawFastRawHLineEssst>
 8003030:	e089      	b.n	8003146 <_ZN11GFXcanvas1613drawFastHLineEssst+0x22a>
  } else if (getRotation() == 1) {
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	4618      	mov	r0, r3
 8003036:	f7fe fa05 	bl	8001444 <_ZNK12Adafruit_GFX11getRotationEv>
 800303a:	4603      	mov	r3, r0
 800303c:	2b01      	cmp	r3, #1
 800303e:	bf0c      	ite	eq
 8003040:	2301      	moveq	r3, #1
 8003042:	2300      	movne	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d01a      	beq.n	8003080 <_ZN11GFXcanvas1613drawFastHLineEssst+0x164>
    int16_t t = x;
 800304a:	897b      	ldrh	r3, [r7, #10]
 800304c:	82bb      	strh	r3, [r7, #20]
    x = WIDTH - 1 - y;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003054:	b29a      	uxth	r2, r3
 8003056:	893b      	ldrh	r3, [r7, #8]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	b29b      	uxth	r3, r3
 800305c:	3b01      	subs	r3, #1
 800305e:	b29b      	uxth	r3, r3
 8003060:	817b      	strh	r3, [r7, #10]
    y = t;
 8003062:	8abb      	ldrh	r3, [r7, #20]
 8003064:	813b      	strh	r3, [r7, #8]
    drawFastRawVLine(x, y, w, color);
 8003066:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800306a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800306e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003072:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	4603      	mov	r3, r0
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f000 f867 	bl	800314c <_ZN11GFXcanvas1616drawFastRawVLineEssst>
 800307e:	e062      	b.n	8003146 <_ZN11GFXcanvas1613drawFastHLineEssst+0x22a>
  } else if (getRotation() == 2) {
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4618      	mov	r0, r3
 8003084:	f7fe f9de 	bl	8001444 <_ZNK12Adafruit_GFX11getRotationEv>
 8003088:	4603      	mov	r3, r0
 800308a:	2b02      	cmp	r3, #2
 800308c:	bf0c      	ite	eq
 800308e:	2301      	moveq	r3, #1
 8003090:	2300      	movne	r3, #0
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d027      	beq.n	80030e8 <_ZN11GFXcanvas1613drawFastHLineEssst+0x1cc>
    x = WIDTH - 1 - x;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800309e:	b29a      	uxth	r2, r3
 80030a0:	897b      	ldrh	r3, [r7, #10]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	3b01      	subs	r3, #1
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	817b      	strh	r3, [r7, #10]
    y = HEIGHT - 1 - y;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	893b      	ldrh	r3, [r7, #8]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b29b      	uxth	r3, r3
 80030be:	813b      	strh	r3, [r7, #8]

    x -= w - 1;
 80030c0:	897a      	ldrh	r2, [r7, #10]
 80030c2:	88fb      	ldrh	r3, [r7, #6]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	3301      	adds	r3, #1
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	817b      	strh	r3, [r7, #10]
    drawFastRawHLine(x, y, w, color);
 80030ce:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80030d2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80030d6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80030da:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	4603      	mov	r3, r0
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 f870 	bl	80031c6 <_ZN11GFXcanvas1616drawFastRawHLineEssst>
 80030e6:	e02e      	b.n	8003146 <_ZN11GFXcanvas1613drawFastHLineEssst+0x22a>
  } else if (getRotation() == 3) {
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fe f9aa 	bl	8001444 <_ZNK12Adafruit_GFX11getRotationEv>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b03      	cmp	r3, #3
 80030f4:	bf0c      	ite	eq
 80030f6:	2301      	moveq	r3, #1
 80030f8:	2300      	movne	r3, #0
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d022      	beq.n	8003146 <_ZN11GFXcanvas1613drawFastHLineEssst+0x22a>
    int16_t t = x;
 8003100:	897b      	ldrh	r3, [r7, #10]
 8003102:	82fb      	strh	r3, [r7, #22]
    x = y;
 8003104:	893b      	ldrh	r3, [r7, #8]
 8003106:	817b      	strh	r3, [r7, #10]
    y = HEIGHT - 1 - t;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800310e:	b29a      	uxth	r2, r3
 8003110:	8afb      	ldrh	r3, [r7, #22]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	b29b      	uxth	r3, r3
 8003116:	3b01      	subs	r3, #1
 8003118:	b29b      	uxth	r3, r3
 800311a:	813b      	strh	r3, [r7, #8]
    y -= w - 1;
 800311c:	893a      	ldrh	r2, [r7, #8]
 800311e:	88fb      	ldrh	r3, [r7, #6]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	b29b      	uxth	r3, r3
 8003124:	3301      	adds	r3, #1
 8003126:	b29b      	uxth	r3, r3
 8003128:	813b      	strh	r3, [r7, #8]
    drawFastRawVLine(x, y, w, color);
 800312a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800312e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003132:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003136:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	4603      	mov	r3, r0
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f000 f805 	bl	800314c <_ZN11GFXcanvas1616drawFastRawVLineEssst>
 8003142:	e000      	b.n	8003146 <_ZN11GFXcanvas1613drawFastHLineEssst+0x22a>
    return;
 8003144:	bf00      	nop
  }
}
 8003146:	371c      	adds	r7, #28
 8003148:	46bd      	mov	sp, r7
 800314a:	bd90      	pop	{r4, r7, pc}

0800314c <_ZN11GFXcanvas1616drawFastRawVLineEssst>:
   @param    h   length of vertical line to be drawn, including first point
   @param    color   color 16-bit 5-6-5 Color to draw line with
*/
/**************************************************************************/
void GFXcanvas16::drawFastRawVLine(int16_t x, int16_t y, int16_t h,
                                   uint16_t color) {
 800314c:	b480      	push	{r7}
 800314e:	b087      	sub	sp, #28
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	4608      	mov	r0, r1
 8003156:	4611      	mov	r1, r2
 8003158:	461a      	mov	r2, r3
 800315a:	4603      	mov	r3, r0
 800315c:	817b      	strh	r3, [r7, #10]
 800315e:	460b      	mov	r3, r1
 8003160:	813b      	strh	r3, [r7, #8]
 8003162:	4613      	mov	r3, r2
 8003164:	80fb      	strh	r3, [r7, #6]
  // x & y already in raw (rotation 0) coordinates, no need to transform.
  uint16_t *buffer_ptr = buffer + y * WIDTH + x;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800316a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800316e:	68f9      	ldr	r1, [r7, #12]
 8003170:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8003174:	fb01 f303 	mul.w	r3, r1, r3
 8003178:	4619      	mov	r1, r3
 800317a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800317e:	440b      	add	r3, r1
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	4413      	add	r3, r2
 8003184:	617b      	str	r3, [r7, #20]
  for (int16_t i = 0; i < h; i++) {
 8003186:	2300      	movs	r3, #0
 8003188:	827b      	strh	r3, [r7, #18]
 800318a:	e00f      	b.n	80031ac <_ZN11GFXcanvas1616drawFastRawVLineEssst+0x60>
    (*buffer_ptr) = color;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	8c3a      	ldrh	r2, [r7, #32]
 8003190:	801a      	strh	r2, [r3, #0]
    buffer_ptr += WIDTH;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	4413      	add	r3, r2
 800319e:	617b      	str	r3, [r7, #20]
  for (int16_t i = 0; i < h; i++) {
 80031a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	3301      	adds	r3, #1
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	827b      	strh	r3, [r7, #18]
 80031ac:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80031b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	dbe9      	blt.n	800318c <_ZN11GFXcanvas1616drawFastRawVLineEssst+0x40>
  }
}
 80031b8:	bf00      	nop
 80031ba:	bf00      	nop
 80031bc:	371c      	adds	r7, #28
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <_ZN11GFXcanvas1616drawFastRawHLineEssst>:
   @param    w   length of horizontal line to be drawn, including first point
   @param    color   color 16-bit 5-6-5 Color to draw line with
*/
/**************************************************************************/
void GFXcanvas16::drawFastRawHLine(int16_t x, int16_t y, int16_t w,
                                   uint16_t color) {
 80031c6:	b480      	push	{r7}
 80031c8:	b087      	sub	sp, #28
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	4608      	mov	r0, r1
 80031d0:	4611      	mov	r1, r2
 80031d2:	461a      	mov	r2, r3
 80031d4:	4603      	mov	r3, r0
 80031d6:	817b      	strh	r3, [r7, #10]
 80031d8:	460b      	mov	r3, r1
 80031da:	813b      	strh	r3, [r7, #8]
 80031dc:	4613      	mov	r3, r2
 80031de:	80fb      	strh	r3, [r7, #6]
  // x & y already in raw (rotation 0) coordinates, no need to transform.
  uint32_t buffer_index = y * WIDTH + x;
 80031e0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80031ea:	fb03 f202 	mul.w	r2, r3, r2
 80031ee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80031f2:	4413      	add	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
  for (uint32_t i = buffer_index; i < buffer_index + w; i++) {
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	617b      	str	r3, [r7, #20]
 80031fa:	e009      	b.n	8003210 <_ZN11GFXcanvas1616drawFastRawHLineEssst+0x4a>
    buffer[i] = color;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	4413      	add	r3, r2
 8003206:	8c3a      	ldrh	r2, [r7, #32]
 8003208:	801a      	strh	r2, [r3, #0]
  for (uint32_t i = buffer_index; i < buffer_index + w; i++) {
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	3301      	adds	r3, #1
 800320e:	617b      	str	r3, [r7, #20]
 8003210:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	4413      	add	r3, r2
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	429a      	cmp	r2, r3
 800321c:	d3ee      	bcc.n	80031fc <_ZN11GFXcanvas1616drawFastRawHLineEssst+0x36>
  }
}
 800321e:	bf00      	nop
 8003220:	bf00      	nop
 8003222:	371c      	adds	r7, #28
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 800322c:	b590      	push	{r4, r7, lr}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <_ZN5Print5writeEPKc+0x14>
 800323c:	2300      	movs	r3, #0
 800323e:	e00d      	b.n	800325c <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	3304      	adds	r3, #4
 8003246:	681c      	ldr	r4, [r3, #0]
 8003248:	6838      	ldr	r0, [r7, #0]
 800324a:	f7fc ffe9 	bl	8000220 <strlen>
 800324e:	4603      	mov	r3, r0
 8003250:	461a      	mov	r2, r3
 8003252:	6839      	ldr	r1, [r7, #0]
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	47a0      	blx	r4
 8003258:	4603      	mov	r3, r0
 800325a:	bf00      	nop
    }
 800325c:	4618      	mov	r0, r3
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	bd90      	pop	{r4, r7, pc}

08003264 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]
  while (size--) {
 8003274:	e014      	b.n	80032a0 <_ZN5Print5writeEPKhj+0x3c>
    if (write(*buffer++)) n++;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	1c59      	adds	r1, r3, #1
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	4619      	mov	r1, r3
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	4790      	blx	r2
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	bf14      	ite	ne
 8003290:	2301      	movne	r3, #1
 8003292:	2300      	moveq	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00d      	beq.n	80032b6 <_ZN5Print5writeEPKhj+0x52>
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	3301      	adds	r3, #1
 800329e:	617b      	str	r3, [r7, #20]
  while (size--) {
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	1e5a      	subs	r2, r3, #1
 80032a4:	607a      	str	r2, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	bf14      	ite	ne
 80032aa:	2301      	movne	r3, #1
 80032ac:	2300      	moveq	r3, #0
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1e0      	bne.n	8003276 <_ZN5Print5writeEPKhj+0x12>
 80032b4:	e000      	b.n	80032b8 <_ZN5Print5writeEPKhj+0x54>
    else break;
 80032b6:	bf00      	nop
  }
  return n;
 80032b8:	697b      	ldr	r3, [r7, #20]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b082      	sub	sp, #8
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
 80032ca:	6039      	str	r1, [r7, #0]
  return write(str);
 80032cc:	6839      	ldr	r1, [r7, #0]
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff ffac 	bl	800322c <_ZN5Print5writeEPKc>
 80032d4:	4603      	mov	r3, r0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
	...

080032e0 <_ZN13ST7789V_STM32C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_t>:
#include "ST7789V_STM32.h"
#include "spi.h"

ST7789V_STM32::DmaStates ST7789V_STM32::dmaState;

ST7789V_STM32::ST7789V_STM32(SPI_HandleTypeDef *hspi, GPIO_TypeDef *cs_port, uint16_t cs_pin,
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
 80032ec:	807b      	strh	r3, [r7, #2]
                             GPIO_TypeDef *dc_port, uint16_t dc_pin, GPIO_TypeDef *rst_port, uint16_t rst_pin)
    : Adafruit_GFX(ST7789V_TFTWIDTH, ST7789V_TFTHEIGHT),
      _hspi(hspi), _cs_port(cs_port), _cs_pin(cs_pin),
      _dc_port(dc_port), _dc_pin(dc_pin), _rst_port(rst_port), _rst_pin(rst_pin),
      _inTransaction(false)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80032f4:	21f0      	movs	r1, #240	@ 0xf0
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7fe f8ce 	bl	8001498 <_ZN12Adafruit_GFXC1Ess>
 80032fc:	4a17      	ldr	r2, [pc, #92]	@ (800335c <_ZN13ST7789V_STM32C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_t+0x7c>)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	625a      	str	r2, [r3, #36]	@ 0x24
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	629a      	str	r2, [r3, #40]	@ 0x28
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	631a      	str	r2, [r3, #48]	@ 0x30
      _hspi(hspi), _cs_port(cs_port), _cs_pin(cs_pin),
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	68ba      	ldr	r2, [r7, #8]
 800331e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	639a      	str	r2, [r3, #56]	@ 0x38
      _dc_port(dc_port), _dc_pin(dc_pin), _rst_port(rst_port), _rst_pin(rst_pin),
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a3a      	ldr	r2, [r7, #32]
 8003330:	641a      	str	r2, [r3, #64]	@ 0x40
      _hspi(hspi), _cs_port(cs_port), _cs_pin(cs_pin),
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	887a      	ldrh	r2, [r7, #2]
 8003336:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      _dc_port(dc_port), _dc_pin(dc_pin), _rst_port(rst_port), _rst_pin(rst_pin),
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8bba      	ldrh	r2, [r7, #28]
 800333e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003346:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      _inTransaction(false)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
{
}
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	0801be7c 	.word	0x0801be7c

08003360 <_ZN13ST7789V_STM325beginEv>:

void ST7789V_STM32::begin(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  // dmaState = INIT;

  dmaState = INIT;
 8003368:	4bab      	ldr	r3, [pc, #684]	@ (8003618 <_ZN13ST7789V_STM325beginEv+0x2b8>)
 800336a:	2200      	movs	r2, #0
 800336c:	701a      	strb	r2, [r3, #0]

  // Hardware reset sequence
  rstHigh();
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fd12 	bl	8003d98 <_ZN13ST7789V_STM327rstHighEv>
  HAL_Delay(1);
 8003374:	2001      	movs	r0, #1
 8003376:	f001 fce6 	bl	8004d46 <HAL_Delay>
  rstLow();
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 fcfb 	bl	8003d76 <_ZN13ST7789V_STM326rstLowEv>
  HAL_Delay(10);
 8003380:	200a      	movs	r0, #10
 8003382:	f001 fce0 	bl	8004d46 <HAL_Delay>
  rstHigh();
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 fd06 	bl	8003d98 <_ZN13ST7789V_STM327rstHighEv>
  HAL_Delay(120);
 800338c:	2078      	movs	r0, #120	@ 0x78
 800338e:	f001 fcda 	bl	8004d46 <HAL_Delay>

  csHigh();
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 fcbc 	bl	8003d10 <_ZN13ST7789V_STM326csHighEv>

  // ST7789V initialization sequence (based on your vendor code)
  writeCommand(ST7789V_COLMOD); // 0x3A - Pixel format
 8003398:	213a      	movs	r1, #58	@ 0x3a
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 fbaa 	bl	8003af4 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x05);              // 16-bit color
 80033a0:	2105      	movs	r1, #5
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 fbd1 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(ST7789V_MADCTL); // 0x36 - Memory access control
 80033a8:	2136      	movs	r1, #54	@ 0x36
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 fba2 	bl	8003af4 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x00);              // Default orientation
 80033b0:	2100      	movs	r1, #0
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 fbc9 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>

  // Frame rate control
  writeCommand(0xB2);
 80033b8:	21b2      	movs	r1, #178	@ 0xb2
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 fb9a 	bl	8003af4 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x05);
 80033c0:	2105      	movs	r1, #5
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 fbc1 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x05);
 80033c8:	2105      	movs	r1, #5
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 fbbd 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x00);
 80033d0:	2100      	movs	r1, #0
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 fbb9 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x33);
 80033d8:	2133      	movs	r1, #51	@ 0x33
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 fbb5 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x33);
 80033e0:	2133      	movs	r1, #51	@ 0x33
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 fbb1 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xB7);
 80033e8:	21b7      	movs	r1, #183	@ 0xb7
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 fb82 	bl	8003af4 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x35);
 80033f0:	2135      	movs	r1, #53	@ 0x35
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 fba9 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>

  // Power settings
  writeCommand(0xBB); // VCOM
 80033f8:	21bb      	movs	r1, #187	@ 0xbb
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 fb7a 	bl	8003af4 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x3F);
 8003400:	213f      	movs	r1, #63	@ 0x3f
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fba1 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xC0);
 8003408:	21c0      	movs	r1, #192	@ 0xc0
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 fb72 	bl	8003af4 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x2C);
 8003410:	212c      	movs	r1, #44	@ 0x2c
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 fb99 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xC2);
 8003418:	21c2      	movs	r1, #194	@ 0xc2
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 fb6a 	bl	8003af4 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x01);
 8003420:	2101      	movs	r1, #1
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 fb91 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xC3);
 8003428:	21c3      	movs	r1, #195	@ 0xc3
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 fb62 	bl	8003af4 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x0F);
 8003430:	210f      	movs	r1, #15
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 fb89 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xC4);
 8003438:	21c4      	movs	r1, #196	@ 0xc4
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fb5a 	bl	8003af4 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x20);
 8003440:	2120      	movs	r1, #32
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 fb81 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xC6);
 8003448:	21c6      	movs	r1, #198	@ 0xc6
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fb52 	bl	8003af4 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x11);
 8003450:	2111      	movs	r1, #17
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 fb79 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xD0);
 8003458:	21d0      	movs	r1, #208	@ 0xd0
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 fb4a 	bl	8003af4 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0xA4);
 8003460:	21a4      	movs	r1, #164	@ 0xa4
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 fb71 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0xA1);
 8003468:	21a1      	movs	r1, #161	@ 0xa1
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fb6d 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xE8);
 8003470:	21e8      	movs	r1, #232	@ 0xe8
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 fb3e 	bl	8003af4 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x03);
 8003478:	2103      	movs	r1, #3
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 fb65 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xE9);
 8003480:	21e9      	movs	r1, #233	@ 0xe9
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 fb36 	bl	8003af4 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x09);
 8003488:	2109      	movs	r1, #9
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 fb5d 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x09);
 8003490:	2109      	movs	r1, #9
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fb59 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x08);
 8003498:	2108      	movs	r1, #8
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 fb55 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>

  // Gamma settings
  writeCommand(0xE0);
 80034a0:	21e0      	movs	r1, #224	@ 0xe0
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fb26 	bl	8003af4 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0xD0);
 80034a8:	21d0      	movs	r1, #208	@ 0xd0
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 fb4d 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x05);
 80034b0:	2105      	movs	r1, #5
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 fb49 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x09);
 80034b8:	2109      	movs	r1, #9
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 fb45 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x09);
 80034c0:	2109      	movs	r1, #9
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fb41 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x08);
 80034c8:	2108      	movs	r1, #8
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 fb3d 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x14);
 80034d0:	2114      	movs	r1, #20
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 fb39 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x28);
 80034d8:	2128      	movs	r1, #40	@ 0x28
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 fb35 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x33);
 80034e0:	2133      	movs	r1, #51	@ 0x33
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fb31 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x3F);
 80034e8:	213f      	movs	r1, #63	@ 0x3f
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 fb2d 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x07);
 80034f0:	2107      	movs	r1, #7
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fb29 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x13);
 80034f8:	2113      	movs	r1, #19
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 fb25 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x14);
 8003500:	2114      	movs	r1, #20
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 fb21 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x28);
 8003508:	2128      	movs	r1, #40	@ 0x28
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fb1d 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x30);
 8003510:	2130      	movs	r1, #48	@ 0x30
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fb19 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xE1);
 8003518:	21e1      	movs	r1, #225	@ 0xe1
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 faea 	bl	8003af4 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0xD0);
 8003520:	21d0      	movs	r1, #208	@ 0xd0
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 fb11 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x05);
 8003528:	2105      	movs	r1, #5
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fb0d 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x09);
 8003530:	2109      	movs	r1, #9
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 fb09 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x09);
 8003538:	2109      	movs	r1, #9
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 fb05 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x08);
 8003540:	2108      	movs	r1, #8
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 fb01 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x03);
 8003548:	2103      	movs	r1, #3
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fafd 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x24);
 8003550:	2124      	movs	r1, #36	@ 0x24
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 faf9 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x32);
 8003558:	2132      	movs	r1, #50	@ 0x32
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 faf5 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x32);
 8003560:	2132      	movs	r1, #50	@ 0x32
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 faf1 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x3B);
 8003568:	213b      	movs	r1, #59	@ 0x3b
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 faed 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x38);
 8003570:	2138      	movs	r1, #56	@ 0x38
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 fae9 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x14);
 8003578:	2114      	movs	r1, #20
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fae5 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x13);
 8003580:	2113      	movs	r1, #19
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 fae1 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x28);
 8003588:	2128      	movs	r1, #40	@ 0x28
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 fadd 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x2F);
 8003590:	212f      	movs	r1, #47	@ 0x2f
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 fad9 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(ST7789V_INVON); // 0x21 - Inversion on
 8003598:	2121      	movs	r1, #33	@ 0x21
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 faaa 	bl	8003af4 <_ZN13ST7789V_STM3212writeCommandEh>

  // Set display window
  writeCommand(ST7789V_CASET); // 0x2A - Column address set
 80035a0:	212a      	movs	r1, #42	@ 0x2a
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 faa6 	bl	8003af4 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x00);
 80035a8:	2100      	movs	r1, #0
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 facd 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x00);
 80035b0:	2100      	movs	r1, #0
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 fac9 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x00);
 80035b8:	2100      	movs	r1, #0
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 fac5 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0xEF); // 239 (240-1)
 80035c0:	21ef      	movs	r1, #239	@ 0xef
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 fac1 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(ST7789V_RASET); // 0x2B - Row address set
 80035c8:	212b      	movs	r1, #43	@ 0x2b
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 fa92 	bl	8003af4 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x00);
 80035d0:	2100      	movs	r1, #0
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 fab9 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x00);
 80035d8:	2100      	movs	r1, #0
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 fab5 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x01);
 80035e0:	2101      	movs	r1, #1
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 fab1 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x3F); // 319 (320-1)
 80035e8:	213f      	movs	r1, #63	@ 0x3f
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 faad 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(ST7789V_SLPOUT); // 0x11 - Exit sleep mode
 80035f0:	2111      	movs	r1, #17
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 fa7e 	bl	8003af4 <_ZN13ST7789V_STM3212writeCommandEh>
  HAL_Delay(120);
 80035f8:	2078      	movs	r0, #120	@ 0x78
 80035fa:	f001 fba4 	bl	8004d46 <HAL_Delay>

  writeCommand(ST7789V_DISPON); // 0x29 - Display on
 80035fe:	2129      	movs	r1, #41	@ 0x29
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 fa77 	bl	8003af4 <_ZN13ST7789V_STM3212writeCommandEh>
  writeCommand(ST7789V_RAMWR);  // 0x2C - Memory write
 8003606:	212c      	movs	r1, #44	@ 0x2c
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 fa73 	bl	8003af4 <_ZN13ST7789V_STM3212writeCommandEh>
}
 800360e:	bf00      	nop
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	20000374 	.word	0x20000374

0800361c <_ZN13ST7789V_STM329drawPixelEsst>:

void ST7789V_STM32::drawPixel(int16_t x, int16_t y, uint16_t color)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af02      	add	r7, sp, #8
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	4608      	mov	r0, r1
 8003626:	4611      	mov	r1, r2
 8003628:	461a      	mov	r2, r3
 800362a:	4603      	mov	r3, r0
 800362c:	817b      	strh	r3, [r7, #10]
 800362e:	460b      	mov	r3, r1
 8003630:	813b      	strh	r3, [r7, #8]
 8003632:	4613      	mov	r3, r2
 8003634:	80fb      	strh	r3, [r7, #6]
  if ((x < 0) || (x >= _width) || (y < 0) || (y >= _height))
 8003636:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800363a:	2b00      	cmp	r3, #0
 800363c:	db20      	blt.n	8003680 <_ZN13ST7789V_STM329drawPixelEsst+0x64>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003644:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003648:	429a      	cmp	r2, r3
 800364a:	da19      	bge.n	8003680 <_ZN13ST7789V_STM329drawPixelEsst+0x64>
 800364c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003650:	2b00      	cmp	r3, #0
 8003652:	db15      	blt.n	8003680 <_ZN13ST7789V_STM329drawPixelEsst+0x64>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800365a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800365e:	429a      	cmp	r2, r3
 8003660:	da0e      	bge.n	8003680 <_ZN13ST7789V_STM329drawPixelEsst+0x64>
    return;

  setWindow(x, y, x, y);
 8003662:	8979      	ldrh	r1, [r7, #10]
 8003664:	893a      	ldrh	r2, [r7, #8]
 8003666:	8978      	ldrh	r0, [r7, #10]
 8003668:	893b      	ldrh	r3, [r7, #8]
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	4603      	mov	r3, r0
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 fabb 	bl	8003bea <_ZN13ST7789V_STM329setWindowEtttt>
  writeData16(color);
 8003674:	88fb      	ldrh	r3, [r7, #6]
 8003676:	4619      	mov	r1, r3
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f000 fa8e 	bl	8003b9a <_ZN13ST7789V_STM3211writeData16Et>
 800367e:	e000      	b.n	8003682 <_ZN13ST7789V_STM329drawPixelEsst+0x66>
    return;
 8003680:	bf00      	nop
}
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <_ZN13ST7789V_STM3210startWriteEv>:

void ST7789V_STM32::startWrite(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  if (!_inTransaction)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8003696:	f083 0301 	eor.w	r3, r3, #1
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d006      	beq.n	80036ae <_ZN13ST7789V_STM3210startWriteEv+0x26>
  {
    csLow();
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 fb24 	bl	8003cee <_ZN13ST7789V_STM325csLowEv>
    _inTransaction = true;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
  }
}
 80036ae:	bf00      	nop
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <_ZN13ST7789V_STM328endWriteEv>:

void ST7789V_STM32::endWrite(void)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b082      	sub	sp, #8
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  if (_inTransaction)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d006      	beq.n	80036d6 <_ZN13ST7789V_STM328endWriteEv+0x20>
  {
    csHigh();
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 fb21 	bl	8003d10 <_ZN13ST7789V_STM326csHighEv>
    _inTransaction = false;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
  }
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <_ZN13ST7789V_STM3210writePixelEsst>:

void ST7789V_STM32::writePixel(int16_t x, int16_t y, uint16_t color)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b086      	sub	sp, #24
 80036e2:	af02      	add	r7, sp, #8
 80036e4:	60f8      	str	r0, [r7, #12]
 80036e6:	4608      	mov	r0, r1
 80036e8:	4611      	mov	r1, r2
 80036ea:	461a      	mov	r2, r3
 80036ec:	4603      	mov	r3, r0
 80036ee:	817b      	strh	r3, [r7, #10]
 80036f0:	460b      	mov	r3, r1
 80036f2:	813b      	strh	r3, [r7, #8]
 80036f4:	4613      	mov	r3, r2
 80036f6:	80fb      	strh	r3, [r7, #6]
  if ((x < 0) || (x >= _width) || (y < 0) || (y >= _height))
 80036f8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	db20      	blt.n	8003742 <_ZN13ST7789V_STM3210writePixelEsst+0x64>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003706:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800370a:	429a      	cmp	r2, r3
 800370c:	da19      	bge.n	8003742 <_ZN13ST7789V_STM3210writePixelEsst+0x64>
 800370e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	db15      	blt.n	8003742 <_ZN13ST7789V_STM3210writePixelEsst+0x64>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800371c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003720:	429a      	cmp	r2, r3
 8003722:	da0e      	bge.n	8003742 <_ZN13ST7789V_STM3210writePixelEsst+0x64>
    return;

  setWindow(x, y, x, y);
 8003724:	8979      	ldrh	r1, [r7, #10]
 8003726:	893a      	ldrh	r2, [r7, #8]
 8003728:	8978      	ldrh	r0, [r7, #10]
 800372a:	893b      	ldrh	r3, [r7, #8]
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	4603      	mov	r3, r0
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 fa5a 	bl	8003bea <_ZN13ST7789V_STM329setWindowEtttt>
  writeData16(color);
 8003736:	88fb      	ldrh	r3, [r7, #6]
 8003738:	4619      	mov	r1, r3
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 fa2d 	bl	8003b9a <_ZN13ST7789V_STM3211writeData16Et>
 8003740:	e000      	b.n	8003744 <_ZN13ST7789V_STM3210writePixelEsst+0x66>
    return;
 8003742:	bf00      	nop
}
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <_ZN13ST7789V_STM3213writeFillRectEsssst>:

void ST7789V_STM32::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b08a      	sub	sp, #40	@ 0x28
 800374e:	af02      	add	r7, sp, #8
 8003750:	60f8      	str	r0, [r7, #12]
 8003752:	4608      	mov	r0, r1
 8003754:	4611      	mov	r1, r2
 8003756:	461a      	mov	r2, r3
 8003758:	4603      	mov	r3, r0
 800375a:	817b      	strh	r3, [r7, #10]
 800375c:	460b      	mov	r3, r1
 800375e:	813b      	strh	r3, [r7, #8]
 8003760:	4613      	mov	r3, r2
 8003762:	80fb      	strh	r3, [r7, #6]
  if ((x >= _width) || (y >= _height))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800376a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800376e:	429a      	cmp	r2, r3
 8003770:	da6c      	bge.n	800384c <_ZN13ST7789V_STM3213writeFillRectEsssst+0x102>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003778:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800377c:	429a      	cmp	r2, r3
 800377e:	da65      	bge.n	800384c <_ZN13ST7789V_STM3213writeFillRectEsssst+0x102>
    return;
  int16_t x2 = x + w - 1, y2 = y + h - 1;
 8003780:	897a      	ldrh	r2, [r7, #10]
 8003782:	88fb      	ldrh	r3, [r7, #6]
 8003784:	4413      	add	r3, r2
 8003786:	b29b      	uxth	r3, r3
 8003788:	3b01      	subs	r3, #1
 800378a:	b29b      	uxth	r3, r3
 800378c:	83fb      	strh	r3, [r7, #30]
 800378e:	893a      	ldrh	r2, [r7, #8]
 8003790:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003792:	4413      	add	r3, r2
 8003794:	b29b      	uxth	r3, r3
 8003796:	3b01      	subs	r3, #1
 8003798:	b29b      	uxth	r3, r3
 800379a:	83bb      	strh	r3, [r7, #28]
  if ((x2 < 0) || (y2 < 0))
 800379c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	db55      	blt.n	8003850 <_ZN13ST7789V_STM3213writeFillRectEsssst+0x106>
 80037a4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	db51      	blt.n	8003850 <_ZN13ST7789V_STM3213writeFillRectEsssst+0x106>
    return;

  // Clip to screen bounds
  if (x < 0)
 80037ac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	da01      	bge.n	80037b8 <_ZN13ST7789V_STM3213writeFillRectEsssst+0x6e>
  {
    x = 0;
 80037b4:	2300      	movs	r3, #0
 80037b6:	817b      	strh	r3, [r7, #10]
  }
  if (y < 0)
 80037b8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	da01      	bge.n	80037c4 <_ZN13ST7789V_STM3213writeFillRectEsssst+0x7a>
  {
    y = 0;
 80037c0:	2300      	movs	r3, #0
 80037c2:	813b      	strh	r3, [r7, #8]
  }
  if (x2 >= _width)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80037ca:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	db06      	blt.n	80037e0 <_ZN13ST7789V_STM3213writeFillRectEsssst+0x96>
  {
    x2 = _width - 1;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80037d8:	b29b      	uxth	r3, r3
 80037da:	3b01      	subs	r3, #1
 80037dc:	b29b      	uxth	r3, r3
 80037de:	83fb      	strh	r3, [r7, #30]
  }
  if (y2 >= _height)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80037e6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	db06      	blt.n	80037fc <_ZN13ST7789V_STM3213writeFillRectEsssst+0xb2>
  {
    y2 = _height - 1;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	3b01      	subs	r3, #1
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	83bb      	strh	r3, [r7, #28]
  }

  setWindow(x, y, x2, y2);
 80037fc:	8979      	ldrh	r1, [r7, #10]
 80037fe:	893a      	ldrh	r2, [r7, #8]
 8003800:	8bf8      	ldrh	r0, [r7, #30]
 8003802:	8bbb      	ldrh	r3, [r7, #28]
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	4603      	mov	r3, r0
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 f9ee 	bl	8003bea <_ZN13ST7789V_STM329setWindowEtttt>
  uint32_t pixels = (x2 - x + 1) * (y2 - y + 1);
 800380e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8003812:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	3301      	adds	r3, #1
 800381a:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 800381e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003822:	1a8a      	subs	r2, r1, r2
 8003824:	3201      	adds	r2, #1
 8003826:	fb02 f303 	mul.w	r3, r2, r3
 800382a:	617b      	str	r3, [r7, #20]

  for (uint32_t i = 0; i < pixels; i++)
 800382c:	2300      	movs	r3, #0
 800382e:	61bb      	str	r3, [r7, #24]
 8003830:	e007      	b.n	8003842 <_ZN13ST7789V_STM3213writeFillRectEsssst+0xf8>
  {
    writeData16(color);
 8003832:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003834:	4619      	mov	r1, r3
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 f9af 	bl	8003b9a <_ZN13ST7789V_STM3211writeData16Et>
  for (uint32_t i = 0; i < pixels; i++)
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	3301      	adds	r3, #1
 8003840:	61bb      	str	r3, [r7, #24]
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	429a      	cmp	r2, r3
 8003848:	d3f3      	bcc.n	8003832 <_ZN13ST7789V_STM3213writeFillRectEsssst+0xe8>
 800384a:	e002      	b.n	8003852 <_ZN13ST7789V_STM3213writeFillRectEsssst+0x108>
    return;
 800384c:	bf00      	nop
 800384e:	e000      	b.n	8003852 <_ZN13ST7789V_STM3213writeFillRectEsssst+0x108>
    return;
 8003850:	bf00      	nop
  }
}
 8003852:	3720      	adds	r7, #32
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <_ZN13ST7789V_STM3210fillScreenEt>:

void ST7789V_STM32::fillScreen(uint16_t color)
{
 8003858:	b590      	push	{r4, r7, lr}
 800385a:	b085      	sub	sp, #20
 800385c:	af02      	add	r7, sp, #8
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	460b      	mov	r3, r1
 8003862:	807b      	strh	r3, [r7, #2]
  writeFillRect(0, 0, _width, _height, color);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	331c      	adds	r3, #28
 800386a:	681c      	ldr	r4, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003878:	887a      	ldrh	r2, [r7, #2]
 800387a:	9201      	str	r2, [sp, #4]
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	460b      	mov	r3, r1
 8003880:	2200      	movs	r2, #0
 8003882:	2100      	movs	r1, #0
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	47a0      	blx	r4
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	bd90      	pop	{r4, r7, pc}

08003890 <_ZN13ST7789V_STM328fillRectEsssst>:

void ST7789V_STM32::fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8003890:	b590      	push	{r4, r7, lr}
 8003892:	b087      	sub	sp, #28
 8003894:	af02      	add	r7, sp, #8
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	4608      	mov	r0, r1
 800389a:	4611      	mov	r1, r2
 800389c:	461a      	mov	r2, r3
 800389e:	4603      	mov	r3, r0
 80038a0:	817b      	strh	r3, [r7, #10]
 80038a2:	460b      	mov	r3, r1
 80038a4:	813b      	strh	r3, [r7, #8]
 80038a6:	4613      	mov	r3, r2
 80038a8:	80fb      	strh	r3, [r7, #6]
  startWrite();
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	3314      	adds	r3, #20
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	4798      	blx	r3
  writeFillRect(x, y, w, h, color);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	331c      	adds	r3, #28
 80038bc:	681c      	ldr	r4, [r3, #0]
 80038be:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80038c2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80038c6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80038ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80038cc:	9301      	str	r3, [sp, #4]
 80038ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	4603      	mov	r3, r0
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	47a0      	blx	r4
  endWrite();
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	332c      	adds	r3, #44	@ 0x2c
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	4798      	blx	r3
}
 80038e6:	bf00      	nop
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd90      	pop	{r4, r7, pc}

080038ee <_ZN13ST7789V_STM3213drawFastVLineEssst>:

void ST7789V_STM32::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 80038ee:	b590      	push	{r4, r7, lr}
 80038f0:	b087      	sub	sp, #28
 80038f2:	af02      	add	r7, sp, #8
 80038f4:	60f8      	str	r0, [r7, #12]
 80038f6:	4608      	mov	r0, r1
 80038f8:	4611      	mov	r1, r2
 80038fa:	461a      	mov	r2, r3
 80038fc:	4603      	mov	r3, r0
 80038fe:	817b      	strh	r3, [r7, #10]
 8003900:	460b      	mov	r3, r1
 8003902:	813b      	strh	r3, [r7, #8]
 8003904:	4613      	mov	r3, r2
 8003906:	80fb      	strh	r3, [r7, #6]
  startWrite();
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3314      	adds	r3, #20
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	4798      	blx	r3
  writeFillRect(x, y, 1, h, color);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	331c      	adds	r3, #28
 800391a:	681c      	ldr	r4, [r3, #0]
 800391c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003920:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003924:	8c3b      	ldrh	r3, [r7, #32]
 8003926:	9301      	str	r3, [sp, #4]
 8003928:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	2301      	movs	r3, #1
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	47a0      	blx	r4
  endWrite();
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	332c      	adds	r3, #44	@ 0x2c
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	4798      	blx	r3
}
 8003940:	bf00      	nop
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	bd90      	pop	{r4, r7, pc}

08003948 <_ZN13ST7789V_STM3214writeFastVLineEssst>:

void ST7789V_STM32::writeFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8003948:	b590      	push	{r4, r7, lr}
 800394a:	b087      	sub	sp, #28
 800394c:	af02      	add	r7, sp, #8
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	4608      	mov	r0, r1
 8003952:	4611      	mov	r1, r2
 8003954:	461a      	mov	r2, r3
 8003956:	4603      	mov	r3, r0
 8003958:	817b      	strh	r3, [r7, #10]
 800395a:	460b      	mov	r3, r1
 800395c:	813b      	strh	r3, [r7, #8]
 800395e:	4613      	mov	r3, r2
 8003960:	80fb      	strh	r3, [r7, #6]
  writeFillRect(x, y, 1, h, color);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	331c      	adds	r3, #28
 8003968:	681c      	ldr	r4, [r3, #0]
 800396a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800396e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003972:	8c3b      	ldrh	r3, [r7, #32]
 8003974:	9301      	str	r3, [sp, #4]
 8003976:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	2301      	movs	r3, #1
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	47a0      	blx	r4
}
 8003982:	bf00      	nop
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	bd90      	pop	{r4, r7, pc}

0800398a <_ZN13ST7789V_STM3213drawFastHLineEssst>:

void ST7789V_STM32::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 800398a:	b590      	push	{r4, r7, lr}
 800398c:	b087      	sub	sp, #28
 800398e:	af02      	add	r7, sp, #8
 8003990:	60f8      	str	r0, [r7, #12]
 8003992:	4608      	mov	r0, r1
 8003994:	4611      	mov	r1, r2
 8003996:	461a      	mov	r2, r3
 8003998:	4603      	mov	r3, r0
 800399a:	817b      	strh	r3, [r7, #10]
 800399c:	460b      	mov	r3, r1
 800399e:	813b      	strh	r3, [r7, #8]
 80039a0:	4613      	mov	r3, r2
 80039a2:	80fb      	strh	r3, [r7, #6]
  startWrite();
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	3314      	adds	r3, #20
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	4798      	blx	r3
  writeFillRect(x, y, w, 1, color);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	331c      	adds	r3, #28
 80039b6:	681c      	ldr	r4, [r3, #0]
 80039b8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80039bc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80039c0:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80039c4:	8c3b      	ldrh	r3, [r7, #32]
 80039c6:	9301      	str	r3, [sp, #4]
 80039c8:	2301      	movs	r3, #1
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	4603      	mov	r3, r0
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	47a0      	blx	r4
  endWrite();
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	332c      	adds	r3, #44	@ 0x2c
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	4798      	blx	r3
}
 80039de:	bf00      	nop
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd90      	pop	{r4, r7, pc}

080039e6 <_ZN13ST7789V_STM3214writeFastHLineEssst>:

void ST7789V_STM32::writeFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 80039e6:	b590      	push	{r4, r7, lr}
 80039e8:	b087      	sub	sp, #28
 80039ea:	af02      	add	r7, sp, #8
 80039ec:	60f8      	str	r0, [r7, #12]
 80039ee:	4608      	mov	r0, r1
 80039f0:	4611      	mov	r1, r2
 80039f2:	461a      	mov	r2, r3
 80039f4:	4603      	mov	r3, r0
 80039f6:	817b      	strh	r3, [r7, #10]
 80039f8:	460b      	mov	r3, r1
 80039fa:	813b      	strh	r3, [r7, #8]
 80039fc:	4613      	mov	r3, r2
 80039fe:	80fb      	strh	r3, [r7, #6]
  writeFillRect(x, y, w, 1, color);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	331c      	adds	r3, #28
 8003a06:	681c      	ldr	r4, [r3, #0]
 8003a08:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003a0c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003a10:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003a14:	8c3b      	ldrh	r3, [r7, #32]
 8003a16:	9301      	str	r3, [sp, #4]
 8003a18:	2301      	movs	r3, #1
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	47a0      	blx	r4
}
 8003a22:	bf00      	nop
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd90      	pop	{r4, r7, pc}
	...

08003a2c <_ZN13ST7789V_STM3211setRotationEh>:

void ST7789V_STM32::setRotation(uint8_t rotation)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	70fb      	strb	r3, [r7, #3]
  writeCommand(ST7789V_MADCTL);
 8003a38:	2136      	movs	r1, #54	@ 0x36
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f85a 	bl	8003af4 <_ZN13ST7789V_STM3212writeCommandEh>
  rotation = rotation % 4;
 8003a40:	78fb      	ldrb	r3, [r7, #3]
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	70fb      	strb	r3, [r7, #3]

  switch (rotation)
 8003a48:	78fb      	ldrb	r3, [r7, #3]
 8003a4a:	2b03      	cmp	r3, #3
 8003a4c:	d83a      	bhi.n	8003ac4 <_ZN13ST7789V_STM3211setRotationEh+0x98>
 8003a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a54 <_ZN13ST7789V_STM3211setRotationEh+0x28>)
 8003a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a54:	08003a65 	.word	0x08003a65
 8003a58:	08003a7d 	.word	0x08003a7d
 8003a5c:	08003a95 	.word	0x08003a95
 8003a60:	08003aad 	.word	0x08003aad
  {
  case 0:
    writeData(0x00);
 8003a64:	2100      	movs	r1, #0
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f86f 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
    _width = ST7789V_TFTWIDTH;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	22f0      	movs	r2, #240	@ 0xf0
 8003a70:	819a      	strh	r2, [r3, #12]
    _height = ST7789V_TFTHEIGHT;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003a78:	81da      	strh	r2, [r3, #14]
    break;
 8003a7a:	e023      	b.n	8003ac4 <_ZN13ST7789V_STM3211setRotationEh+0x98>
  case 1:
    writeData(0x60);
 8003a7c:	2160      	movs	r1, #96	@ 0x60
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f863 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
    _width = ST7789V_TFTHEIGHT;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003a8a:	819a      	strh	r2, [r3, #12]
    _height = ST7789V_TFTWIDTH;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	22f0      	movs	r2, #240	@ 0xf0
 8003a90:	81da      	strh	r2, [r3, #14]
    break;
 8003a92:	e017      	b.n	8003ac4 <_ZN13ST7789V_STM3211setRotationEh+0x98>
  case 2:
    writeData(0xC0);
 8003a94:	21c0      	movs	r1, #192	@ 0xc0
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f857 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
    _width = ST7789V_TFTWIDTH;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	22f0      	movs	r2, #240	@ 0xf0
 8003aa0:	819a      	strh	r2, [r3, #12]
    _height = ST7789V_TFTHEIGHT;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003aa8:	81da      	strh	r2, [r3, #14]
    break;
 8003aaa:	e00b      	b.n	8003ac4 <_ZN13ST7789V_STM3211setRotationEh+0x98>
  case 3:
    writeData(0xA0);
 8003aac:	21a0      	movs	r1, #160	@ 0xa0
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f84b 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
    _width = ST7789V_TFTHEIGHT;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003aba:	819a      	strh	r2, [r3, #12]
    _height = ST7789V_TFTWIDTH;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	22f0      	movs	r2, #240	@ 0xf0
 8003ac0:	81da      	strh	r2, [r3, #14]
    break;
 8003ac2:	bf00      	nop
  }
}
 8003ac4:	bf00      	nop
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <_ZN13ST7789V_STM3213invertDisplayEb>:

void ST7789V_STM32::invertDisplay(bool invert)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	70fb      	strb	r3, [r7, #3]
  writeCommand(invert ? ST7789V_INVON : ST7789V_INVOFF);
 8003ad8:	78fb      	ldrb	r3, [r7, #3]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <_ZN13ST7789V_STM3213invertDisplayEb+0x16>
 8003ade:	2321      	movs	r3, #33	@ 0x21
 8003ae0:	e000      	b.n	8003ae4 <_ZN13ST7789V_STM3213invertDisplayEb+0x18>
 8003ae2:	2320      	movs	r3, #32
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f804 	bl	8003af4 <_ZN13ST7789V_STM3212writeCommandEh>
}
 8003aec:	bf00      	nop
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <_ZN13ST7789V_STM3212writeCommandEh>:
  writeCommand(ST7789V_DISPON);
}

// Private methods
void ST7789V_STM32::writeCommand(uint8_t cmd)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	460b      	mov	r3, r1
 8003afe:	70fb      	strb	r3, [r7, #3]
  if (!_inTransaction)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8003b06:	f083 0301 	eor.w	r3, r3, #1
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <_ZN13ST7789V_STM3212writeCommandEh+0x22>
    csLow();
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f8ec 	bl	8003cee <_ZN13ST7789V_STM325csLowEv>
  dcLow();
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f90b 	bl	8003d32 <_ZN13ST7789V_STM325dcLowEv>
  spiWrite(cmd);
 8003b1c:	78fb      	ldrb	r3, [r7, #3]
 8003b1e:	4619      	mov	r1, r3
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f8b7 	bl	8003c94 <_ZN13ST7789V_STM328spiWriteEh>
  dcHigh();
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f914 	bl	8003d54 <_ZN13ST7789V_STM326dcHighEv>
  if (!_inTransaction)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8003b32:	f083 0301 	eor.w	r3, r3, #1
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d002      	beq.n	8003b42 <_ZN13ST7789V_STM3212writeCommandEh+0x4e>
    csHigh();
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f8e7 	bl	8003d10 <_ZN13ST7789V_STM326csHighEv>
}
 8003b42:	bf00      	nop
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <_ZN13ST7789V_STM329writeDataEh>:

void ST7789V_STM32::writeData(uint8_t data)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b082      	sub	sp, #8
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	460b      	mov	r3, r1
 8003b54:	70fb      	strb	r3, [r7, #3]
  if (!_inTransaction)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8003b5c:	f083 0301 	eor.w	r3, r3, #1
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d002      	beq.n	8003b6c <_ZN13ST7789V_STM329writeDataEh+0x22>
    csLow();
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f8c1 	bl	8003cee <_ZN13ST7789V_STM325csLowEv>
  dcHigh();
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f8f1 	bl	8003d54 <_ZN13ST7789V_STM326dcHighEv>
  spiWrite(data);
 8003b72:	78fb      	ldrb	r3, [r7, #3]
 8003b74:	4619      	mov	r1, r3
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f88c 	bl	8003c94 <_ZN13ST7789V_STM328spiWriteEh>
  if (!_inTransaction)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8003b82:	f083 0301 	eor.w	r3, r3, #1
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <_ZN13ST7789V_STM329writeDataEh+0x48>
    csHigh();
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f8bf 	bl	8003d10 <_ZN13ST7789V_STM326csHighEv>
}
 8003b92:	bf00      	nop
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <_ZN13ST7789V_STM3211writeData16Et>:

void ST7789V_STM32::writeData16(uint16_t data)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b082      	sub	sp, #8
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	807b      	strh	r3, [r7, #2]
  if (!_inTransaction)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8003bac:	f083 0301 	eor.w	r3, r3, #1
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <_ZN13ST7789V_STM3211writeData16Et+0x22>
    csLow();
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f899 	bl	8003cee <_ZN13ST7789V_STM325csLowEv>
  dcHigh();
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f8c9 	bl	8003d54 <_ZN13ST7789V_STM326dcHighEv>
  spiWrite16(data);
 8003bc2:	887b      	ldrh	r3, [r7, #2]
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f876 	bl	8003cb8 <_ZN13ST7789V_STM3210spiWrite16Et>
  if (!_inTransaction)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8003bd2:	f083 0301 	eor.w	r3, r3, #1
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d002      	beq.n	8003be2 <_ZN13ST7789V_STM3211writeData16Et+0x48>
    csHigh();
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f897 	bl	8003d10 <_ZN13ST7789V_STM326csHighEv>
}
 8003be2:	bf00      	nop
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <_ZN13ST7789V_STM329setWindowEtttt>:

void ST7789V_STM32::setWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b084      	sub	sp, #16
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	60f8      	str	r0, [r7, #12]
 8003bf2:	4608      	mov	r0, r1
 8003bf4:	4611      	mov	r1, r2
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	817b      	strh	r3, [r7, #10]
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	813b      	strh	r3, [r7, #8]
 8003c00:	4613      	mov	r3, r2
 8003c02:	80fb      	strh	r3, [r7, #6]
  writeCommand(ST7789V_CASET);
 8003c04:	212a      	movs	r1, #42	@ 0x2a
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f7ff ff74 	bl	8003af4 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(x0 >> 8);
 8003c0c:	897b      	ldrh	r3, [r7, #10]
 8003c0e:	0a1b      	lsrs	r3, r3, #8
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	4619      	mov	r1, r3
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f7ff ff97 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(x0 & 0xFF);
 8003c1c:	897b      	ldrh	r3, [r7, #10]
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	4619      	mov	r1, r3
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f7ff ff91 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(x1 >> 8);
 8003c28:	88fb      	ldrh	r3, [r7, #6]
 8003c2a:	0a1b      	lsrs	r3, r3, #8
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	4619      	mov	r1, r3
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f7ff ff89 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(x1 & 0xFF);
 8003c38:	88fb      	ldrh	r3, [r7, #6]
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f7ff ff83 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeCommand(ST7789V_RASET);
 8003c44:	212b      	movs	r1, #43	@ 0x2b
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f7ff ff54 	bl	8003af4 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(y0 >> 8);
 8003c4c:	893b      	ldrh	r3, [r7, #8]
 8003c4e:	0a1b      	lsrs	r3, r3, #8
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	4619      	mov	r1, r3
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f7ff ff77 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(y0 & 0xFF);
 8003c5c:	893b      	ldrh	r3, [r7, #8]
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	4619      	mov	r1, r3
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f7ff ff71 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(y1 >> 8);
 8003c68:	8b3b      	ldrh	r3, [r7, #24]
 8003c6a:	0a1b      	lsrs	r3, r3, #8
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	4619      	mov	r1, r3
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f7ff ff69 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeData(y1 & 0xFF);
 8003c78:	8b3b      	ldrh	r3, [r7, #24]
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f7ff ff63 	bl	8003b4a <_ZN13ST7789V_STM329writeDataEh>
  writeCommand(ST7789V_RAMWR);
 8003c84:	212c      	movs	r1, #44	@ 0x2c
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f7ff ff34 	bl	8003af4 <_ZN13ST7789V_STM3212writeCommandEh>
}
 8003c8c:	bf00      	nop
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <_ZN13ST7789V_STM328spiWriteEh>:

void ST7789V_STM32::spiWrite(uint8_t data)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(_hspi, &data, 1, HAL_MAX_DELAY);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003ca4:	1cf9      	adds	r1, r7, #3
 8003ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8003caa:	2201      	movs	r2, #1
 8003cac:	f008 fce1 	bl	800c672 <HAL_SPI_Transmit>
}
 8003cb0:	bf00      	nop
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <_ZN13ST7789V_STM3210spiWrite16Et>:

void ST7789V_STM32::spiWrite16(uint16_t data)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	807b      	strh	r3, [r7, #2]
  uint8_t buffer[2];
  buffer[0] = data >> 8;   // MSB first
 8003cc4:	887b      	ldrh	r3, [r7, #2]
 8003cc6:	0a1b      	lsrs	r3, r3, #8
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	733b      	strb	r3, [r7, #12]
  buffer[1] = data & 0xFF; // LSB second
 8003cce:	887b      	ldrh	r3, [r7, #2]
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	737b      	strb	r3, [r7, #13]
  HAL_SPI_Transmit(_hspi, buffer, 2, HAL_MAX_DELAY);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003cd8:	f107 010c 	add.w	r1, r7, #12
 8003cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	f008 fcc6 	bl	800c672 <HAL_SPI_Transmit>
}
 8003ce6:	bf00      	nop
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <_ZN13ST7789V_STM325csLowEv>:

// GPIO control functions
void ST7789V_STM32::csLow(void)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b082      	sub	sp, #8
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(_cs_port, _cs_pin, GPIO_PIN_RESET);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d00:	2200      	movs	r2, #0
 8003d02:	4619      	mov	r1, r3
 8003d04:	f003 fdc4 	bl	8007890 <HAL_GPIO_WritePin>
}
 8003d08:	bf00      	nop
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <_ZN13ST7789V_STM326csHighEv>:

void ST7789V_STM32::csHigh(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(_cs_port, _cs_pin, GPIO_PIN_SET);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d22:	2201      	movs	r2, #1
 8003d24:	4619      	mov	r1, r3
 8003d26:	f003 fdb3 	bl	8007890 <HAL_GPIO_WritePin>
}
 8003d2a:	bf00      	nop
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <_ZN13ST7789V_STM325dcLowEv>:

void ST7789V_STM32::dcLow(void)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(_dc_port, _dc_pin, GPIO_PIN_RESET);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d44:	2200      	movs	r2, #0
 8003d46:	4619      	mov	r1, r3
 8003d48:	f003 fda2 	bl	8007890 <HAL_GPIO_WritePin>
}
 8003d4c:	bf00      	nop
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <_ZN13ST7789V_STM326dcHighEv>:

void ST7789V_STM32::dcHigh(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(_dc_port, _dc_pin, GPIO_PIN_SET);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d66:	2201      	movs	r2, #1
 8003d68:	4619      	mov	r1, r3
 8003d6a:	f003 fd91 	bl	8007890 <HAL_GPIO_WritePin>
}
 8003d6e:	bf00      	nop
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <_ZN13ST7789V_STM326rstLowEv>:

void ST7789V_STM32::rstLow(void)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b082      	sub	sp, #8
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(_rst_port, _rst_pin, GPIO_PIN_RESET);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8003d88:	2200      	movs	r2, #0
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	f003 fd80 	bl	8007890 <HAL_GPIO_WritePin>
}
 8003d90:	bf00      	nop
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <_ZN13ST7789V_STM327rstHighEv>:

void ST7789V_STM32::rstHigh(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(_rst_port, _rst_pin, GPIO_PIN_SET);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8003daa:	2201      	movs	r2, #1
 8003dac:	4619      	mov	r1, r3
 8003dae:	f003 fd6f 	bl	8007890 <HAL_GPIO_WritePin>
}
 8003db2:	bf00      	nop
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <_ZN13ST7789V_STM3211writeBufferEPtm>:

void ST7789V_STM32::writeBuffer(uint16_t *buffer, uint32_t len)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b08a      	sub	sp, #40	@ 0x28
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	60f8      	str	r0, [r7, #12]
 8003dc2:	60b9      	str	r1, [r7, #8]
 8003dc4:	607a      	str	r2, [r7, #4]
  if (!_inTransaction)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8003dcc:	f083 0301 	eor.w	r3, r3, #1
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <_ZN13ST7789V_STM3211writeBufferEPtm+0x22>
    csLow();
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f7ff ff89 	bl	8003cee <_ZN13ST7789V_STM325csLowEv>
  dcHigh();
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f7ff ffb9 	bl	8003d54 <_ZN13ST7789V_STM326dcHighEv>

  uint8_t *byteBuffer = (uint8_t *)buffer;
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	623b      	str	r3, [r7, #32]
  const uint32_t MAX_CHUNK = 32766; // max safe size in bytes (even number)
 8003de6:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
 8003dea:	61fb      	str	r3, [r7, #28]

  uint32_t remaining = len * 2;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	617b      	str	r3, [r7, #20]
  uint32_t offset = 0;
 8003df2:	2300      	movs	r3, #0
 8003df4:	627b      	str	r3, [r7, #36]	@ 0x24

  while (remaining > 0)
 8003df6:	e01e      	b.n	8003e36 <_ZN13ST7789V_STM3211writeBufferEPtm+0x7c>
  {
    uint32_t chunk = (remaining > MAX_CHUNK) ? MAX_CHUNK : remaining;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d803      	bhi.n	8003e0a <_ZN13ST7789V_STM3211writeBufferEPtm+0x50>
 8003e02:	f107 0314 	add.w	r3, r7, #20
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	e001      	b.n	8003e0e <_ZN13ST7789V_STM3211writeBufferEPtm+0x54>
 8003e0a:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
 8003e0e:	61bb      	str	r3, [r7, #24]

    HAL_SPI_Transmit(_hspi, byteBuffer + offset, chunk, HAL_MAX_DELAY);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003e14:	6a3a      	ldr	r2, [r7, #32]
 8003e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e18:	18d1      	adds	r1, r2, r3
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e22:	f008 fc26 	bl	800c672 <HAL_SPI_Transmit>

    offset += chunk;
 8003e26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    remaining -= chunk;
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	617b      	str	r3, [r7, #20]
  while (remaining > 0)
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1dd      	bne.n	8003df8 <_ZN13ST7789V_STM3211writeBufferEPtm+0x3e>
  }

  if (!_inTransaction)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8003e42:	f083 0301 	eor.w	r3, r3, #1
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <_ZN13ST7789V_STM3211writeBufferEPtm+0x98>
    csHigh();
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f7ff ff5f 	bl	8003d10 <_ZN13ST7789V_STM326csHighEv>
}
 8003e52:	bf00      	nop
 8003e54:	3728      	adds	r7, #40	@ 0x28
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <_ZN17Adafruit_MAX31856C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:
    @param  hspi Pointer to SPI handle
    @param  cs_port GPIO port for chip select
    @param  cs_pin GPIO pin for chip select
*/
/**************************************************************************/
Adafruit_MAX31856::Adafruit_MAX31856(SPI_HandleTypeDef *hspi, GPIO_TypeDef *cs_port, uint16_t cs_pin)
 8003e5a:	b480      	push	{r7}
 8003e5c:	b085      	sub	sp, #20
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	60f8      	str	r0, [r7, #12]
 8003e62:	60b9      	str	r1, [r7, #8]
 8003e64:	607a      	str	r2, [r7, #4]
 8003e66:	807b      	strh	r3, [r7, #2]
{
  _hspi = hspi;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	601a      	str	r2, [r3, #0]
  _cs_port = cs_port;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	605a      	str	r2, [r3, #4]
  _cs_pin = cs_pin;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	887a      	ldrh	r2, [r7, #2]
 8003e78:	811a      	strh	r2, [r3, #8]
}
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <_ZN17Adafruit_MAX31856C1Ev>:

Adafruit_MAX31856::Adafruit_MAX31856()
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
{
  _hspi = nullptr;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	601a      	str	r2, [r3, #0]
  _cs_port = nullptr;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	605a      	str	r2, [r3, #4]
  _cs_pin = 0;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	811a      	strh	r2, [r3, #8]
}
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <_ZN17Adafruit_MAX318565beginEv>:
    @brief  Initialize MAX31856 with STM32 HAL
    @returns Always returns true at this time
*/
/**************************************************************************/
bool Adafruit_MAX31856::begin(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  // Set CS pin high initially
  csHigh();
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f8f9 	bl	80040b0 <_ZN17Adafruit_MAX318566csHighEv>

  // Small delay for chip to stabilize
  HAL_Delay(100);
 8003ebe:	2064      	movs	r0, #100	@ 0x64
 8003ec0:	f000 ff41 	bl	8004d46 <HAL_Delay>

  // assert on any fault
  writeRegister8(MAX31856_MASK_REG, 0x0);
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	2102      	movs	r1, #2
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 f9d5 	bl	8004278 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>

  // enable open circuit fault detection
  writeRegister8(MAX31856_CR0_REG, MAX31856_CR0_OCFAULT0);
 8003ece:	2210      	movs	r2, #16
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f9d0 	bl	8004278 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>

  // set cold junction temperature offset to zero
  writeRegister8(MAX31856_CJTO_REG, 0x0);
 8003ed8:	2200      	movs	r2, #0
 8003eda:	2109      	movs	r1, #9
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f9cb 	bl	8004278 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>

  // set Type K by default
  setThermocoupleType(MAX31856_TCTYPE_K);
 8003ee2:	2103      	movs	r1, #3
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 f837 	bl	8003f58 <_ZN17Adafruit_MAX3185619setThermocoupleTypeE27max31856_thermocoupletype_t>

  // set One-Shot conversion mode
  setConversionMode(MAX31856_CONTINUOUS);
 8003eea:	2101      	movs	r1, #1
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f805 	bl	8003efc <_ZN17Adafruit_MAX3185617setConversionModeE26max31856_conversion_mode_t>

  return true;
 8003ef2:	2301      	movs	r3, #1
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <_ZN17Adafruit_MAX3185617setConversionModeE26max31856_conversion_mode_t>:
    @brief  Set temperature conversion mode
    @param mode The conversion mode
*/
/**************************************************************************/
void Adafruit_MAX31856::setConversionMode(max31856_conversion_mode_t mode)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	460b      	mov	r3, r1
 8003f06:	70fb      	strb	r3, [r7, #3]
  conversionMode = mode;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	78fa      	ldrb	r2, [r7, #3]
 8003f0c:	729a      	strb	r2, [r3, #10]
  uint8_t t = readRegister8(MAX31856_CR0_REG); // get current register value
 8003f0e:	2100      	movs	r1, #0
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f8dd 	bl	80040d0 <_ZN17Adafruit_MAX3185613readRegister8Eh>
 8003f16:	4603      	mov	r3, r0
 8003f18:	73fb      	strb	r3, [r7, #15]
  if (conversionMode == MAX31856_CONTINUOUS)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	7a9b      	ldrb	r3, [r3, #10]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d108      	bne.n	8003f34 <_ZN17Adafruit_MAX3185617setConversionModeE26max31856_conversion_mode_t+0x38>
  {
    t |= MAX31856_CR0_AUTOCONVERT; // turn on automatic
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003f28:	73fb      	strb	r3, [r7, #15]
    t &= ~MAX31856_CR0_1SHOT;      // turn off one-shot
 8003f2a:	7bfb      	ldrb	r3, [r7, #15]
 8003f2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f30:	73fb      	strb	r3, [r7, #15]
 8003f32:	e007      	b.n	8003f44 <_ZN17Adafruit_MAX3185617setConversionModeE26max31856_conversion_mode_t+0x48>
  }
  else
  {
    t &= ~MAX31856_CR0_AUTOCONVERT; // turn off automatic
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
 8003f36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f3a:	73fb      	strb	r3, [r7, #15]
    t |= MAX31856_CR0_1SHOT;        // turn on one-shot
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
 8003f3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f42:	73fb      	strb	r3, [r7, #15]
  }
  writeRegister8(MAX31856_CR0_REG, t); // write value back to register
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
 8003f46:	461a      	mov	r2, r3
 8003f48:	2100      	movs	r1, #0
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f994 	bl	8004278 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>
}
 8003f50:	bf00      	nop
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <_ZN17Adafruit_MAX3185619setThermocoupleTypeE27max31856_thermocoupletype_t>:
    @brief  Set which kind of Thermocouple (K, J, T, etc) to detect & decode
    @param type The enumeration type of the thermocouple
*/
/**************************************************************************/
void Adafruit_MAX31856::setThermocoupleType(max31856_thermocoupletype_t type)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	460b      	mov	r3, r1
 8003f62:	70fb      	strb	r3, [r7, #3]
  uint8_t t = readRegister8(MAX31856_CR1_REG);
 8003f64:	2101      	movs	r1, #1
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f8b2 	bl	80040d0 <_ZN17Adafruit_MAX3185613readRegister8Eh>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	73fb      	strb	r3, [r7, #15]
  t &= 0xF0; // mask off bottom 4 bits
 8003f70:	7bfb      	ldrb	r3, [r7, #15]
 8003f72:	f023 030f 	bic.w	r3, r3, #15
 8003f76:	73fb      	strb	r3, [r7, #15]
  t |= (uint8_t)type & 0x0F;
 8003f78:	78fb      	ldrb	r3, [r7, #3]
 8003f7a:	f003 030f 	and.w	r3, r3, #15
 8003f7e:	b2da      	uxtb	r2, r3
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	73fb      	strb	r3, [r7, #15]
  writeRegister8(MAX31856_CR1_REG, t);
 8003f86:	7bfb      	ldrb	r3, [r7, #15]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f973 	bl	8004278 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>
}
 8003f92:	bf00      	nop
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <_ZN17Adafruit_MAX3185614triggerOneShotEv>:
    @brief  Begin a one-shot (read temperature only upon request) measurement.
    Value must be read later, not returned here!
*/
/**************************************************************************/
void Adafruit_MAX31856::triggerOneShot(void)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  if (conversionMode == MAX31856_CONTINUOUS)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	7a9b      	ldrb	r3, [r3, #10]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d014      	beq.n	8003fd4 <_ZN17Adafruit_MAX3185614triggerOneShotEv+0x3a>
    return;

  uint8_t t = readRegister8(MAX31856_CR0_REG); // get current register value
 8003faa:	2100      	movs	r1, #0
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f88f 	bl	80040d0 <_ZN17Adafruit_MAX3185613readRegister8Eh>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	73fb      	strb	r3, [r7, #15]
  t &= ~MAX31856_CR0_AUTOCONVERT;              // turn off autoconvert
 8003fb6:	7bfb      	ldrb	r3, [r7, #15]
 8003fb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fbc:	73fb      	strb	r3, [r7, #15]
  t |= MAX31856_CR0_1SHOT;                     // turn on one-shot
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
 8003fc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fc4:	73fb      	strb	r3, [r7, #15]
  writeRegister8(MAX31856_CR0_REG, t);         // write value back to register
 8003fc6:	7bfb      	ldrb	r3, [r7, #15]
 8003fc8:	461a      	mov	r2, r3
 8003fca:	2100      	movs	r1, #0
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 f953 	bl	8004278 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>
 8003fd2:	e000      	b.n	8003fd6 <_ZN17Adafruit_MAX3185614triggerOneShotEv+0x3c>
    return;
 8003fd4:	bf00      	nop
                                               // conversion starts when CS goes high
}
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <_ZN17Adafruit_MAX3185618conversionCompleteEv>:
    @brief  Return status of temperature conversion.
    @returns true if conversion complete, otherwise false
*/
/**************************************************************************/
bool Adafruit_MAX31856::conversionComplete(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  if (conversionMode == MAX31856_CONTINUOUS)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	7a9b      	ldrb	r3, [r3, #10]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d101      	bne.n	8003ff0 <_ZN17Adafruit_MAX3185618conversionCompleteEv+0x14>
    return true;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e00b      	b.n	8004008 <_ZN17Adafruit_MAX3185618conversionCompleteEv+0x2c>
  return !(readRegister8(MAX31856_CR0_REG) & MAX31856_CR0_1SHOT);
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f86c 	bl	80040d0 <_ZN17Adafruit_MAX3185613readRegister8Eh>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	bf0c      	ite	eq
 8004002:	2301      	moveq	r3, #1
 8004004:	2300      	movne	r3, #0
 8004006:	b2db      	uxtb	r3, r3
}
 8004008:	4618      	mov	r0, r3
 800400a:	3708      	adds	r7, #8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv>:
    @brief  Return hot-junction (thermocouple) temperature
    @returns Floating point temperature in Celsius
*/
/**************************************************************************/
uint32_t Adafruit_MAX31856::readThermocoupleTemperature(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  // for one-shot, make it happen
  if (conversionMode == MAX31856_ONESHOT)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	7a9b      	ldrb	r3, [r3, #10]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d120      	bne.n	8004062 <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv+0x52>
  {
    triggerOneShot();
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7ff ffba 	bl	8003f9a <_ZN17Adafruit_MAX3185614triggerOneShotEv>
    uint32_t start = HAL_GetTick();
 8004026:	f003 f8a7 	bl	8007178 <HAL_GetTick>
 800402a:	60b8      	str	r0, [r7, #8]
    while (!conversionComplete())
 800402c:	e010      	b.n	8004050 <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv+0x40>
    {
      if (HAL_GetTick() - start > 250)
 800402e:	f003 f8a3 	bl	8007178 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2bfa      	cmp	r3, #250	@ 0xfa
 800403a:	bf8c      	ite	hi
 800403c:	2301      	movhi	r3, #1
 800403e:	2300      	movls	r3, #0
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv+0x3a>
        return 0;
 8004046:	2300      	movs	r3, #0
 8004048:	e01e      	b.n	8004088 <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv+0x78>
      HAL_Delay(10);
 800404a:	200a      	movs	r0, #10
 800404c:	f000 fe7b 	bl	8004d46 <HAL_Delay>
    while (!conversionComplete())
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7ff ffc3 	bl	8003fdc <_ZN17Adafruit_MAX3185618conversionCompleteEv>
 8004056:	4603      	mov	r3, r0
 8004058:	f083 0301 	eor.w	r3, r3, #1
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1e5      	bne.n	800402e <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv+0x1e>
    }
  }

  // read the thermocouple temperature registers (3 bytes)
  int32_t temp24 = readRegister24(MAX31856_LTCBH_REG);
 8004062:	210c      	movs	r1, #12
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f847 	bl	80040f8 <_ZN17Adafruit_MAX3185614readRegister24Eh>
 800406a:	4603      	mov	r3, r0
 800406c:	60fb      	str	r3, [r7, #12]
  // and compute temperature
  if (temp24 & 0x800000)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d003      	beq.n	8004080 <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv+0x70>
  {
    temp24 |= 0xFF000000; // fix sign
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800407e:	60fb      	str	r3, [r7, #12]
  }

  temp24 >>= 5; // bottom 5 bits are unused
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	115b      	asrs	r3, r3, #5
 8004084:	60fb      	str	r3, [r7, #12]

  return temp24;
 8004086:	68fb      	ldr	r3, [r7, #12]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <_ZN17Adafruit_MAX318565csLowEv>:
/*!
    @brief  Set chip select low
*/
/**************************************************************************/
void Adafruit_MAX31856::csLow(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(_cs_port, _cs_pin, GPIO_PIN_RESET);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6858      	ldr	r0, [r3, #4]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	891b      	ldrh	r3, [r3, #8]
 80040a0:	2200      	movs	r2, #0
 80040a2:	4619      	mov	r1, r3
 80040a4:	f003 fbf4 	bl	8007890 <HAL_GPIO_WritePin>
}
 80040a8:	bf00      	nop
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <_ZN17Adafruit_MAX318566csHighEv>:
/*!
    @brief  Set chip select high
*/
/**************************************************************************/
void Adafruit_MAX31856::csHigh(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(_cs_port, _cs_pin, GPIO_PIN_SET);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6858      	ldr	r0, [r3, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	891b      	ldrh	r3, [r3, #8]
 80040c0:	2201      	movs	r2, #1
 80040c2:	4619      	mov	r1, r3
 80040c4:	f003 fbe4 	bl	8007890 <HAL_GPIO_WritePin>
}
 80040c8:	bf00      	nop
 80040ca:	3708      	adds	r7, #8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <_ZN17Adafruit_MAX3185613readRegister8Eh>:
    @param  addr Register address
    @returns Register value
*/
/**************************************************************************/
uint8_t Adafruit_MAX31856::readRegister8(uint8_t addr)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 80040dc:	2300      	movs	r3, #0
 80040de:	73fb      	strb	r3, [r7, #15]
  readRegisterN(addr, &ret, 1);
 80040e0:	f107 020f 	add.w	r2, r7, #15
 80040e4:	78f9      	ldrb	r1, [r7, #3]
 80040e6:	2301      	movs	r3, #1
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f81d 	bl	8004128 <_ZN17Adafruit_MAX3185613readRegisterNEhPhh>
  return ret;
 80040ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <_ZN17Adafruit_MAX3185614readRegister24Eh>:
    @param  addr Register address
    @returns Register value
*/
/**************************************************************************/
uint32_t Adafruit_MAX31856::readRegister24(uint8_t addr)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	460b      	mov	r3, r1
 8004102:	70fb      	strb	r3, [r7, #3]
  uint8_t buffer[3];
  readRegisterN(addr, buffer, 3);
 8004104:	f107 020c 	add.w	r2, r7, #12
 8004108:	78f9      	ldrb	r1, [r7, #3]
 800410a:	2303      	movs	r3, #3
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f80b 	bl	8004128 <_ZN17Adafruit_MAX3185613readRegisterNEhPhh>
  return ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | buffer[2];
 8004112:	7b3b      	ldrb	r3, [r7, #12]
 8004114:	041a      	lsls	r2, r3, #16
 8004116:	7b7b      	ldrb	r3, [r7, #13]
 8004118:	021b      	lsls	r3, r3, #8
 800411a:	4313      	orrs	r3, r2
 800411c:	7bba      	ldrb	r2, [r7, #14]
 800411e:	4313      	orrs	r3, r2
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <_ZN17Adafruit_MAX3185613readRegisterNEhPhh>:
    @param  buffer Buffer to store data
    @param  n Number of bytes to read
*/
/**************************************************************************/
void Adafruit_MAX31856::readRegisterN(uint8_t addr, uint8_t buffer[], uint8_t n)
{
 8004128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800412c:	b08f      	sub	sp, #60	@ 0x3c
 800412e:	af02      	add	r7, sp, #8
 8004130:	6178      	str	r0, [r7, #20]
 8004132:	60fa      	str	r2, [r7, #12]
 8004134:	461a      	mov	r2, r3
 8004136:	460b      	mov	r3, r1
 8004138:	74fb      	strb	r3, [r7, #19]
 800413a:	4613      	mov	r3, r2
 800413c:	74bb      	strb	r3, [r7, #18]
  HAL_SPI_TransmitReceive(_hspi, tx, rx, 1 + n, 100);
  csHigh();

  for (uint8_t i = 0; i < n; i++)
    buffer[i] = rx[i + 1];
}
 800413e:	466b      	mov	r3, sp
 8004140:	461e      	mov	r6, r3
  addr &= 0x7F; // Read operation
 8004142:	7cfb      	ldrb	r3, [r7, #19]
 8004144:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004148:	74fb      	strb	r3, [r7, #19]
  uint8_t tx[1 + n];
 800414a:	7cbb      	ldrb	r3, [r7, #18]
 800414c:	1c59      	adds	r1, r3, #1
 800414e:	1e4b      	subs	r3, r1, #1
 8004150:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004152:	460a      	mov	r2, r1
 8004154:	2300      	movs	r3, #0
 8004156:	603a      	str	r2, [r7, #0]
 8004158:	607b      	str	r3, [r7, #4]
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	00c3      	lsls	r3, r0, #3
 8004166:	6838      	ldr	r0, [r7, #0]
 8004168:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800416c:	6838      	ldr	r0, [r7, #0]
 800416e:	00c2      	lsls	r2, r0, #3
 8004170:	460a      	mov	r2, r1
 8004172:	2300      	movs	r3, #0
 8004174:	4692      	mov	sl, r2
 8004176:	469b      	mov	fp, r3
 8004178:	f04f 0200 	mov.w	r2, #0
 800417c:	f04f 0300 	mov.w	r3, #0
 8004180:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004184:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004188:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800418c:	460b      	mov	r3, r1
 800418e:	3307      	adds	r3, #7
 8004190:	08db      	lsrs	r3, r3, #3
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	ebad 0d03 	sub.w	sp, sp, r3
 8004198:	ab02      	add	r3, sp, #8
 800419a:	3300      	adds	r3, #0
 800419c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t rx[1 + n];
 800419e:	7cbb      	ldrb	r3, [r7, #18]
 80041a0:	1c59      	adds	r1, r3, #1
 80041a2:	1e4b      	subs	r3, r1, #1
 80041a4:	623b      	str	r3, [r7, #32]
 80041a6:	460a      	mov	r2, r1
 80041a8:	2300      	movs	r3, #0
 80041aa:	4690      	mov	r8, r2
 80041ac:	4699      	mov	r9, r3
 80041ae:	f04f 0200 	mov.w	r2, #0
 80041b2:	f04f 0300 	mov.w	r3, #0
 80041b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041c2:	460a      	mov	r2, r1
 80041c4:	2300      	movs	r3, #0
 80041c6:	4614      	mov	r4, r2
 80041c8:	461d      	mov	r5, r3
 80041ca:	f04f 0200 	mov.w	r2, #0
 80041ce:	f04f 0300 	mov.w	r3, #0
 80041d2:	00eb      	lsls	r3, r5, #3
 80041d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041d8:	00e2      	lsls	r2, r4, #3
 80041da:	460b      	mov	r3, r1
 80041dc:	3307      	adds	r3, #7
 80041de:	08db      	lsrs	r3, r3, #3
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	ebad 0d03 	sub.w	sp, sp, r3
 80041e6:	ab02      	add	r3, sp, #8
 80041e8:	3300      	adds	r3, #0
 80041ea:	61fb      	str	r3, [r7, #28]
  tx[0] = addr;
 80041ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ee:	7cfa      	ldrb	r2, [r7, #19]
 80041f0:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 1; i < 1 + n; i++)
 80041f2:	2301      	movs	r3, #1
 80041f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80041f8:	e009      	b.n	800420e <_ZN17Adafruit_MAX3185613readRegisterNEhPhh+0xe6>
    tx[i] = 0x00;
 80041fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80041fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004200:	2100      	movs	r1, #0
 8004202:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 1; i < 1 + n; i++)
 8004204:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004208:	3301      	adds	r3, #1
 800420a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800420e:	7cba      	ldrb	r2, [r7, #18]
 8004210:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004214:	429a      	cmp	r2, r3
 8004216:	d2f0      	bcs.n	80041fa <_ZN17Adafruit_MAX3185613readRegisterNEhPhh+0xd2>
  csLow();
 8004218:	6978      	ldr	r0, [r7, #20]
 800421a:	f7ff ff39 	bl	8004090 <_ZN17Adafruit_MAX318565csLowEv>
  HAL_SPI_TransmitReceive(_hspi, tx, rx, 1 + n, 100);
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	6818      	ldr	r0, [r3, #0]
 8004222:	7cbb      	ldrb	r3, [r7, #18]
 8004224:	b29b      	uxth	r3, r3
 8004226:	3301      	adds	r3, #1
 8004228:	b29b      	uxth	r3, r3
 800422a:	2264      	movs	r2, #100	@ 0x64
 800422c:	9200      	str	r2, [sp, #0]
 800422e:	69fa      	ldr	r2, [r7, #28]
 8004230:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004232:	f008 fb94 	bl	800c95e <HAL_SPI_TransmitReceive>
  csHigh();
 8004236:	6978      	ldr	r0, [r7, #20]
 8004238:	f7ff ff3a 	bl	80040b0 <_ZN17Adafruit_MAX318566csHighEv>
  for (uint8_t i = 0; i < n; i++)
 800423c:	2300      	movs	r3, #0
 800423e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8004242:	e00e      	b.n	8004262 <_ZN17Adafruit_MAX3185613readRegisterNEhPhh+0x13a>
    buffer[i] = rx[i + 1];
 8004244:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004248:	1c5a      	adds	r2, r3, #1
 800424a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800424e:	68f9      	ldr	r1, [r7, #12]
 8004250:	440b      	add	r3, r1
 8004252:	69f9      	ldr	r1, [r7, #28]
 8004254:	5c8a      	ldrb	r2, [r1, r2]
 8004256:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < n; i++)
 8004258:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800425c:	3301      	adds	r3, #1
 800425e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8004262:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8004266:	7cbb      	ldrb	r3, [r7, #18]
 8004268:	429a      	cmp	r2, r3
 800426a:	d3eb      	bcc.n	8004244 <_ZN17Adafruit_MAX3185613readRegisterNEhPhh+0x11c>
 800426c:	46b5      	mov	sp, r6
}
 800426e:	bf00      	nop
 8004270:	3734      	adds	r7, #52	@ 0x34
 8004272:	46bd      	mov	sp, r7
 8004274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004278 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>:
    @param  addr Register address
    @param  data Data to write
*/
/**************************************************************************/
void Adafruit_MAX31856::writeRegister8(uint8_t addr, uint8_t data)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	460b      	mov	r3, r1
 8004282:	70fb      	strb	r3, [r7, #3]
 8004284:	4613      	mov	r3, r2
 8004286:	70bb      	strb	r3, [r7, #2]
  addr |= 0x80; // MSB=1 for write, make sure top bit is set
 8004288:	78fb      	ldrb	r3, [r7, #3]
 800428a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800428e:	70fb      	strb	r3, [r7, #3]

  uint8_t buffer[2] = {addr, data};
 8004290:	78fb      	ldrb	r3, [r7, #3]
 8004292:	733b      	strb	r3, [r7, #12]
 8004294:	78bb      	ldrb	r3, [r7, #2]
 8004296:	737b      	strb	r3, [r7, #13]

  csLow();
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f7ff fef9 	bl	8004090 <_ZN17Adafruit_MAX318565csLowEv>
  HAL_SPI_Transmit(_hspi, buffer, 2, HAL_MAX_DELAY);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6818      	ldr	r0, [r3, #0]
 80042a2:	f107 010c 	add.w	r1, r7, #12
 80042a6:	f04f 33ff 	mov.w	r3, #4294967295
 80042aa:	2202      	movs	r2, #2
 80042ac:	f008 f9e1 	bl	800c672 <HAL_SPI_Transmit>
  csHigh();
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f7ff fefd 	bl	80040b0 <_ZN17Adafruit_MAX318566csHighEv>
}
 80042b6:	bf00      	nop
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
	...

080042c0 <_ZN13Accelerometer5setupEv>:
#include "main.h"

Accelerometer::States Accelerometer::state;

void Accelerometer::setup(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
    // pinMode(0, OUTPUT);
    state = AWAKE;
 80042c8:	4b06      	ldr	r3, [pc, #24]	@ (80042e4 <_ZN13Accelerometer5setupEv+0x24>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	701a      	strb	r2, [r3, #0]
    delay = 1;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	601a      	str	r2, [r3, #0]
    readAccelerometer();
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 f895 	bl	8004404 <_ZN13Accelerometer17readAccelerometerEv>
}
 80042da:	bf00      	nop
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20000375 	.word	0x20000375

080042e8 <_ZN13Accelerometer12stateMachineEv>:

void Accelerometer::stateMachine(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
    if (!readDelay)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	bf0c      	ite	eq
 80042f8:	2301      	moveq	r3, #1
 80042fa:	2300      	movne	r3, #0
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d005      	beq.n	800430e <_ZN13Accelerometer12stateMachineEv+0x26>
    {
        readAccelerometer();
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f87e 	bl	8004404 <_ZN13Accelerometer17readAccelerometerEv>

        //        snprintf(usbBuffer, sizeof(usbBuffer), "Acceleration: %ld, %d\r\n", acceleration, delay);
        //        CDC_Transmit_FS((uint8_t *)usbBuffer, strlen(usbBuffer));
        //        snprintf(usbBuffer, sizeof(usbBuffer), "State: %d \r\n", state);
        //        CDC_Transmit_FS((uint8_t *)usbBuffer, strlen(usbBuffer));
        readDelay = 2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2202      	movs	r2, #2
 800430c:	605a      	str	r2, [r3, #4]
    }

    switch (state)
 800430e:	4b3b      	ldr	r3, [pc, #236]	@ (80043fc <_ZN13Accelerometer12stateMachineEv+0x114>)
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	2b02      	cmp	r3, #2
 8004314:	d050      	beq.n	80043b8 <_ZN13Accelerometer12stateMachineEv+0xd0>
 8004316:	2b02      	cmp	r3, #2
 8004318:	dc64      	bgt.n	80043e4 <_ZN13Accelerometer12stateMachineEv+0xfc>
 800431a:	2b00      	cmp	r3, #0
 800431c:	d002      	beq.n	8004324 <_ZN13Accelerometer12stateMachineEv+0x3c>
 800431e:	2b01      	cmp	r3, #1
 8004320:	d019      	beq.n	8004356 <_ZN13Accelerometer12stateMachineEv+0x6e>
            // CDC_Transmit_FS((uint8_t *)usbBuffer, strlen(usbBuffer));
        }

        break;
    default:
        break;
 8004322:	e05f      	b.n	80043e4 <_ZN13Accelerometer12stateMachineEv+0xfc>
        if (acceleration < activityThreshold && !delay)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691a      	ldr	r2, [r3, #16]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	429a      	cmp	r2, r3
 800432e:	d205      	bcs.n	800433c <_ZN13Accelerometer12stateMachineEv+0x54>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d101      	bne.n	800433c <_ZN13Accelerometer12stateMachineEv+0x54>
 8004338:	2301      	movs	r3, #1
 800433a:	e000      	b.n	800433e <_ZN13Accelerometer12stateMachineEv+0x56>
 800433c:	2300      	movs	r3, #0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d052      	beq.n	80043e8 <_ZN13Accelerometer12stateMachineEv+0x100>
            delay = 1; // seconds
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	601a      	str	r2, [r3, #0]
            state = IDLE;
 8004348:	4b2c      	ldr	r3, [pc, #176]	@ (80043fc <_ZN13Accelerometer12stateMachineEv+0x114>)
 800434a:	2201      	movs	r2, #1
 800434c:	701a      	strb	r2, [r3, #0]
            Backlight::state = Backlight::States::LOW;
 800434e:	4b2c      	ldr	r3, [pc, #176]	@ (8004400 <_ZN13Accelerometer12stateMachineEv+0x118>)
 8004350:	2200      	movs	r2, #0
 8004352:	701a      	strb	r2, [r3, #0]
        break;
 8004354:	e048      	b.n	80043e8 <_ZN13Accelerometer12stateMachineEv+0x100>
        if (acceleration > activityThreshold && !delay)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691a      	ldr	r2, [r3, #16]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	429a      	cmp	r2, r3
 8004360:	d905      	bls.n	800436e <_ZN13Accelerometer12stateMachineEv+0x86>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <_ZN13Accelerometer12stateMachineEv+0x86>
 800436a:	2301      	movs	r3, #1
 800436c:	e000      	b.n	8004370 <_ZN13Accelerometer12stateMachineEv+0x88>
 800436e:	2300      	movs	r3, #0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d008      	beq.n	8004386 <_ZN13Accelerometer12stateMachineEv+0x9e>
            delay = 1; // seconds
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	601a      	str	r2, [r3, #0]
            state = AWAKE;
 800437a:	4b20      	ldr	r3, [pc, #128]	@ (80043fc <_ZN13Accelerometer12stateMachineEv+0x114>)
 800437c:	2200      	movs	r2, #0
 800437e:	701a      	strb	r2, [r3, #0]
            Backlight::state = Backlight::States::HIGH;
 8004380:	4b1f      	ldr	r3, [pc, #124]	@ (8004400 <_ZN13Accelerometer12stateMachineEv+0x118>)
 8004382:	2202      	movs	r2, #2
 8004384:	701a      	strb	r2, [r3, #0]
        if (acceleration < activityThreshold && !delay)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691a      	ldr	r2, [r3, #16]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	429a      	cmp	r2, r3
 8004390:	d205      	bcs.n	800439e <_ZN13Accelerometer12stateMachineEv+0xb6>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <_ZN13Accelerometer12stateMachineEv+0xb6>
 800439a:	2301      	movs	r3, #1
 800439c:	e000      	b.n	80043a0 <_ZN13Accelerometer12stateMachineEv+0xb8>
 800439e:	2300      	movs	r3, #0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d023      	beq.n	80043ec <_ZN13Accelerometer12stateMachineEv+0x104>
            delay = 1; // seconds
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	601a      	str	r2, [r3, #0]
            state = SLEEP;
 80043aa:	4b14      	ldr	r3, [pc, #80]	@ (80043fc <_ZN13Accelerometer12stateMachineEv+0x114>)
 80043ac:	2202      	movs	r2, #2
 80043ae:	701a      	strb	r2, [r3, #0]
            Backlight::state = Backlight::States::OFF;
 80043b0:	4b13      	ldr	r3, [pc, #76]	@ (8004400 <_ZN13Accelerometer12stateMachineEv+0x118>)
 80043b2:	2203      	movs	r2, #3
 80043b4:	701a      	strb	r2, [r3, #0]
        break;
 80043b6:	e019      	b.n	80043ec <_ZN13Accelerometer12stateMachineEv+0x104>
        if (acceleration > activityThreshold && !delay)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	691a      	ldr	r2, [r3, #16]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d905      	bls.n	80043d0 <_ZN13Accelerometer12stateMachineEv+0xe8>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <_ZN13Accelerometer12stateMachineEv+0xe8>
 80043cc:	2301      	movs	r3, #1
 80043ce:	e000      	b.n	80043d2 <_ZN13Accelerometer12stateMachineEv+0xea>
 80043d0:	2300      	movs	r3, #0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00c      	beq.n	80043f0 <_ZN13Accelerometer12stateMachineEv+0x108>
            delay = 1; // seconds
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	601a      	str	r2, [r3, #0]
            state = AWAKE;
 80043dc:	4b07      	ldr	r3, [pc, #28]	@ (80043fc <_ZN13Accelerometer12stateMachineEv+0x114>)
 80043de:	2200      	movs	r2, #0
 80043e0:	701a      	strb	r2, [r3, #0]
        break;
 80043e2:	e005      	b.n	80043f0 <_ZN13Accelerometer12stateMachineEv+0x108>
        break;
 80043e4:	bf00      	nop
 80043e6:	e004      	b.n	80043f2 <_ZN13Accelerometer12stateMachineEv+0x10a>
        break;
 80043e8:	bf00      	nop
 80043ea:	e002      	b.n	80043f2 <_ZN13Accelerometer12stateMachineEv+0x10a>
        break;
 80043ec:	bf00      	nop
 80043ee:	e000      	b.n	80043f2 <_ZN13Accelerometer12stateMachineEv+0x10a>
        break;
 80043f0:	bf00      	nop
    }
}
 80043f2:	bf00      	nop
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	20000375 	.word	0x20000375
 8004400:	20000376 	.word	0x20000376

08004404 <_ZN13Accelerometer17readAccelerometerEv>:

void Accelerometer::readAccelerometer(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b088      	sub	sp, #32
 8004408:	af04      	add	r7, sp, #16
 800440a:	6078      	str	r0, [r7, #4]
    // Set MEASURE bit (Bit 3) to enable measurement mode
    HAL_I2C_Mem_Write(&hi2c1, ADXL343_ADDR, 0x2D, I2C_MEMADD_SIZE_8BIT, &powerCtl, 1, 1000);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3314      	adds	r3, #20
 8004410:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004414:	9202      	str	r2, [sp, #8]
 8004416:	2201      	movs	r2, #1
 8004418:	9201      	str	r2, [sp, #4]
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	2301      	movs	r3, #1
 800441e:	222d      	movs	r2, #45	@ 0x2d
 8004420:	21a6      	movs	r1, #166	@ 0xa6
 8004422:	481e      	ldr	r0, [pc, #120]	@ (800449c <_ZN13Accelerometer17readAccelerometerEv+0x98>)
 8004424:	f003 fd1a 	bl	8007e5c <HAL_I2C_Mem_Write>

    // Read with error handling
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, ADXL343_ADDR, accreg, I2C_MEMADD_SIZE_8BIT, accdata, 6, 1000);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	7d5b      	ldrb	r3, [r3, #21]
 800442c:	4619      	mov	r1, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	3316      	adds	r3, #22
 8004432:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004436:	9202      	str	r2, [sp, #8]
 8004438:	2206      	movs	r2, #6
 800443a:	9201      	str	r2, [sp, #4]
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	2301      	movs	r3, #1
 8004440:	460a      	mov	r2, r1
 8004442:	21a6      	movs	r1, #166	@ 0xa6
 8004444:	4815      	ldr	r0, [pc, #84]	@ (800449c <_ZN13Accelerometer17readAccelerometerEv+0x98>)
 8004446:	f003 fe1d 	bl	8008084 <HAL_I2C_Mem_Read>
 800444a:	4603      	mov	r3, r0
 800444c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d11e      	bne.n	8004492 <_ZN13Accelerometer17readAccelerometerEv+0x8e>
    {
        // Convert raw data to signed values
        int16_t x = (int16_t)((accdata[1] << 8) | accdata[0]);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	7ddb      	ldrb	r3, [r3, #23]
 8004458:	b21b      	sxth	r3, r3
 800445a:	021b      	lsls	r3, r3, #8
 800445c:	b21a      	sxth	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	7d9b      	ldrb	r3, [r3, #22]
 8004462:	b21b      	sxth	r3, r3
 8004464:	4313      	orrs	r3, r2
 8004466:	81bb      	strh	r3, [r7, #12]
        int16_t y = (int16_t)((accdata[3] << 8) | accdata[2]);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	7e5b      	ldrb	r3, [r3, #25]
 800446c:	b21b      	sxth	r3, r3
 800446e:	021b      	lsls	r3, r3, #8
 8004470:	b21a      	sxth	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	7e1b      	ldrb	r3, [r3, #24]
 8004476:	b21b      	sxth	r3, r3
 8004478:	4313      	orrs	r3, r2
 800447a:	817b      	strh	r3, [r7, #10]
        // int8_t z = ((accdata[5] << 8) | accdata[4]);

        // use mean of x and y
        acceleration = (x + y) / 2;
 800447c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004480:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004484:	4413      	add	r3, r2
 8004486:	0fda      	lsrs	r2, r3, #31
 8004488:	4413      	add	r3, r2
 800448a:	105b      	asrs	r3, r3, #1
 800448c:	461a      	mov	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	611a      	str	r2, [r3, #16]
        // float y_g = y * 0.0039f;
        // float z_g = z * 0.0039f;

        // snprintf(accmsg, sizeof(accmsg), "X: %.2fg, Y: %.2fg, Z: %.2fg\r\n", x_g, y_g, z_g);
    }
}
 8004492:	bf00      	nop
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	2000041c 	.word	0x2000041c

080044a0 <_ZN9Backlight5setupEv>:

Backlight::States Backlight::state;

void Backlight::setup(void)

{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80044a8:	2100      	movs	r1, #0
 80044aa:	4808      	ldr	r0, [pc, #32]	@ (80044cc <_ZN9Backlight5setupEv+0x2c>)
 80044ac:	f008 fff8 	bl	800d4a0 <HAL_TIM_PWM_Start>

    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0); // turn off screen to start
 80044b0:	4b06      	ldr	r3, [pc, #24]	@ (80044cc <_ZN9Backlight5setupEv+0x2c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2200      	movs	r2, #0
 80044b6:	635a      	str	r2, [r3, #52]	@ 0x34

    state = HIGH;
 80044b8:	4b05      	ldr	r3, [pc, #20]	@ (80044d0 <_ZN9Backlight5setupEv+0x30>)
 80044ba:	2202      	movs	r2, #2
 80044bc:	701a      	strb	r2, [r3, #0]
    // pinMode(0, OUTPUT);
    // state = AWAKE;
    delay = 0;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	601a      	str	r2, [r3, #0]
    // readAccelerometer();
}
 80044c4:	bf00      	nop
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	200008dc 	.word	0x200008dc
 80044d0:	20000376 	.word	0x20000376

080044d4 <_ZN9Backlight12stateMachineEv>:

void Backlight::stateMachine(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]

    switch (state)
 80044dc:	4b2d      	ldr	r3, [pc, #180]	@ (8004594 <_ZN9Backlight12stateMachineEv+0xc0>)
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	2b03      	cmp	r3, #3
 80044e2:	d843      	bhi.n	800456c <_ZN9Backlight12stateMachineEv+0x98>
 80044e4:	a201      	add	r2, pc, #4	@ (adr r2, 80044ec <_ZN9Backlight12stateMachineEv+0x18>)
 80044e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ea:	bf00      	nop
 80044ec:	080044fd 	.word	0x080044fd
 80044f0:	08004519 	.word	0x08004519
 80044f4:	08004535 	.word	0x08004535
 80044f8:	08004551 	.word	0x08004551
    {

    case LOW:
        if (!delay)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	bf0c      	ite	eq
 8004504:	2301      	moveq	r3, #1
 8004506:	2300      	movne	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d030      	beq.n	8004570 <_ZN9Backlight12stateMachineEv+0x9c>
        {
            desired_brightness = low_brightness;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	609a      	str	r2, [r3, #8]
        }
        break;
 8004516:	e02b      	b.n	8004570 <_ZN9Backlight12stateMachineEv+0x9c>
    case MID:
        if (!delay)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	bf0c      	ite	eq
 8004520:	2301      	moveq	r3, #1
 8004522:	2300      	movne	r3, #0
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d024      	beq.n	8004574 <_ZN9Backlight12stateMachineEv+0xa0>
        {
            desired_brightness = mid_brightness;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	691a      	ldr	r2, [r3, #16]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	609a      	str	r2, [r3, #8]
        }
        break;
 8004532:	e01f      	b.n	8004574 <_ZN9Backlight12stateMachineEv+0xa0>
    case HIGH:
        if (!delay)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	bf0c      	ite	eq
 800453c:	2301      	moveq	r3, #1
 800453e:	2300      	movne	r3, #0
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d018      	beq.n	8004578 <_ZN9Backlight12stateMachineEv+0xa4>
        {
            desired_brightness = hi_brightness;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	695a      	ldr	r2, [r3, #20]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	609a      	str	r2, [r3, #8]
        }
        break;
 800454e:	e013      	b.n	8004578 <_ZN9Backlight12stateMachineEv+0xa4>
    case OFF:
        if (!delay)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	bf0c      	ite	eq
 8004558:	2301      	moveq	r3, #1
 800455a:	2300      	movne	r3, #0
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00c      	beq.n	800457c <_ZN9Backlight12stateMachineEv+0xa8>
        {
            desired_brightness = off;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699a      	ldr	r2, [r3, #24]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	609a      	str	r2, [r3, #8]
        }
        break;
 800456a:	e007      	b.n	800457c <_ZN9Backlight12stateMachineEv+0xa8>
    default:
        break;
 800456c:	bf00      	nop
 800456e:	e006      	b.n	800457e <_ZN9Backlight12stateMachineEv+0xaa>
        break;
 8004570:	bf00      	nop
 8004572:	e004      	b.n	800457e <_ZN9Backlight12stateMachineEv+0xaa>
        break;
 8004574:	bf00      	nop
 8004576:	e002      	b.n	800457e <_ZN9Backlight12stateMachineEv+0xaa>
        break;
 8004578:	bf00      	nop
 800457a:	e000      	b.n	800457e <_ZN9Backlight12stateMachineEv+0xaa>
        break;
 800457c:	bf00      	nop
    }

    fadeScreen(desired_brightness);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	4619      	mov	r1, r3
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f807 	bl	8004598 <_ZN9Backlight10fadeScreenEi>
}
 800458a:	bf00      	nop
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	20000376 	.word	0x20000376

08004598 <_ZN9Backlight10fadeScreenEi>:

void Backlight::fadeScreen(int target_brightness)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]

    if (current_brightness < target_brightness)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	dd0d      	ble.n	80045c8 <_ZN9Backlight10fadeScreenEi+0x30>
    {
        current_brightness += 1; // Adjust step size for fade speed
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	1c5a      	adds	r2, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	605a      	str	r2, [r3, #4]
        if (current_brightness > target_brightness)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	429a      	cmp	r2, r3
 80045be:	da15      	bge.n	80045ec <_ZN9Backlight10fadeScreenEi+0x54>
            current_brightness = target_brightness;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	605a      	str	r2, [r3, #4]
 80045c6:	e011      	b.n	80045ec <_ZN9Backlight10fadeScreenEi+0x54>
    }
    else if (current_brightness > target_brightness)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	da0c      	bge.n	80045ec <_ZN9Backlight10fadeScreenEi+0x54>
    {
        current_brightness -= 1;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	1e5a      	subs	r2, r3, #1
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	605a      	str	r2, [r3, #4]
        if (current_brightness < target_brightness)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	dd02      	ble.n	80045ec <_ZN9Backlight10fadeScreenEi+0x54>
            current_brightness = target_brightness;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	605a      	str	r2, [r3, #4]
    }

    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, current_brightness);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	4b04      	ldr	r3, [pc, #16]	@ (8004604 <_ZN9Backlight10fadeScreenEi+0x6c>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	200008dc 	.word	0x200008dc

08004608 <_ZN14BatteryMonitor5setupEv>:
// char *BatteryMonitor::percent = "000.00%";
// char *BatteryMonitor::lastPercent = "000.00%";
// bool BatteryMonitor::newData = false;
bool BatteryMonitor::charging = false;
void BatteryMonitor::setup()
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
    // Wire1.setPins(PERIPHERAL_SDA, PERIPHERAL_SCL);

    while (!max17048.begin(&hi2c1, MAX17048_I2CADDR_DEFAULT))
 8004610:	e002      	b.n	8004618 <_ZN14BatteryMonitor5setupEv+0x10>
    {
        // Serial.println(F("Couldnt find Adafruit MAX17048?\nMake sure a battery is plugged in!"));
        HAL_Delay(200);
 8004612:	20c8      	movs	r0, #200	@ 0xc8
 8004614:	f000 fb97 	bl	8004d46 <HAL_Delay>
    while (!max17048.begin(&hi2c1, MAX17048_I2CADDR_DEFAULT))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2236      	movs	r2, #54	@ 0x36
 800461c:	4908      	ldr	r1, [pc, #32]	@ (8004640 <_ZN14BatteryMonitor5setupEv+0x38>)
 800461e:	4618      	mov	r0, r3
 8004620:	f7fc fc95 	bl	8000f4e <_ZN23Adafruit_MAX17048_STM325beginEP19__I2C_HandleTypeDeft>
 8004624:	4603      	mov	r3, r0
 8004626:	f083 0301 	eor.w	r3, r3, #1
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1f0      	bne.n	8004612 <_ZN14BatteryMonitor5setupEv+0xa>
    }
    // Serial.print(F("Found MAX17048"));
    // Serial.print(F(" with Chip ID: 0x"));
    // Serial.println(max17048.getChipID(), HEX);
    max17048.quickStart();
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4618      	mov	r0, r3
 8004634:	f7fc fe8c 	bl	8001350 <_ZN23Adafruit_MAX17048_STM3210quickStartEv>
    // percent = String(int()) + '%';

    // sprintf(percent, "%f", max17048.cellPercent());

    // newData = true;
}
 8004638:	bf00      	nop
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	2000041c 	.word	0x2000041c

08004644 <_ZN14BatteryMonitor12stateMachineEv>:

void BatteryMonitor::stateMachine(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]

    if (!delay)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	2b00      	cmp	r3, #0
 8004652:	bf0c      	ite	eq
 8004654:	2301      	moveq	r3, #1
 8004656:	2300      	movne	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d012      	beq.n	8004684 <_ZN14BatteryMonitor12stateMachineEv+0x40>
    {
        delay = 3; // seconds // ms
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2203      	movs	r2, #3
 8004662:	60da      	str	r2, [r3, #12]
        // lastPercent = percent;
        // snprintf(percent, sizeof(usbBuffer), "%f", max17048.cellPercent());
        // newData = (percent != lastPercent);
        charging = (max17048.chargeRate() > 0.0);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4618      	mov	r0, r3
 8004668:	f7fc fe0e 	bl	8001288 <_ZN23Adafruit_MAX17048_STM3210chargeRateEv>
 800466c:	eef0 7a40 	vmov.f32	s15, s0
 8004670:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004678:	bfcc      	ite	gt
 800467a:	2301      	movgt	r3, #1
 800467c:	2300      	movle	r3, #0
 800467e:	b2da      	uxtb	r2, r3
 8004680:	4b02      	ldr	r3, [pc, #8]	@ (800468c <_ZN14BatteryMonitor12stateMachineEv+0x48>)
 8004682:	701a      	strb	r2, [r3, #0]
        // Serial.println(max17048.chargeRate());

        // snprintf(usbBuffer, sizeof(usbBuffer), "Battery: %f\r\n", max17048.cellPercent());
        // CDC_Transmit_FS((uint8_t *)usbBuffer, strlen(usbBuffer));
    }
}
 8004684:	bf00      	nop
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	20000377 	.word	0x20000377

08004690 <_ZN13Thermocouples5setupEv>:
float Thermocouples::deltaTemp = 0.0;

// Static member definitions for MAX31856 objects

void Thermocouples::setup()
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b088      	sub	sp, #32
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
    // SPI_Set_Mode(1);

    // Re-initialize the SPI handle pointers
    left = Adafruit_MAX31856(&hspi1, GPIOA, GPIO_PIN_8);
 8004698:	f107 0008 	add.w	r0, r7, #8
 800469c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80046a0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80046a4:	493c      	ldr	r1, [pc, #240]	@ (8004798 <_ZN13Thermocouples5setupEv+0x108>)
 80046a6:	f7ff fbd8 	bl	8003e5a <_ZN17Adafruit_MAX31856C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	461a      	mov	r2, r3
 80046ae:	f107 0308 	add.w	r3, r7, #8
 80046b2:	cb03      	ldmia	r3!, {r0, r1}
 80046b4:	6010      	str	r0, [r2, #0]
 80046b6:	6051      	str	r1, [r2, #4]
 80046b8:	8819      	ldrh	r1, [r3, #0]
 80046ba:	789b      	ldrb	r3, [r3, #2]
 80046bc:	8111      	strh	r1, [r2, #8]
 80046be:	7293      	strb	r3, [r2, #10]
    right = Adafruit_MAX31856(&hspi1, GPIOA, GPIO_PIN_9);
 80046c0:	f107 0014 	add.w	r0, r7, #20
 80046c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80046c8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80046cc:	4932      	ldr	r1, [pc, #200]	@ (8004798 <_ZN13Thermocouples5setupEv+0x108>)
 80046ce:	f7ff fbc4 	bl	8003e5a <_ZN17Adafruit_MAX31856C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f103 020c 	add.w	r2, r3, #12
 80046d8:	f107 0314 	add.w	r3, r7, #20
 80046dc:	cb03      	ldmia	r3!, {r0, r1}
 80046de:	6010      	str	r0, [r2, #0]
 80046e0:	6051      	str	r1, [r2, #4]
 80046e2:	8819      	ldrh	r1, [r3, #0]
 80046e4:	789b      	ldrb	r3, [r3, #2]
 80046e6:	8111      	strh	r1, [r2, #8]
 80046e8:	7293      	strb	r3, [r2, #10]

    error = 0;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f04f 0200 	mov.w	r2, #0
 80046f0:	625a      	str	r2, [r3, #36]	@ 0x24
    estimate = 20.0f; // deg C
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a29      	ldr	r2, [pc, #164]	@ (800479c <_ZN13Thermocouples5setupEv+0x10c>)
 80046f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    process_variance = 0.1f;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a29      	ldr	r2, [pc, #164]	@ (80047a0 <_ZN13Thermocouples5setupEv+0x110>)
 80046fc:	631a      	str	r2, [r3, #48]	@ 0x30
    measurement_variance = 50.0f;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a28      	ldr	r2, [pc, #160]	@ (80047a4 <_ZN13Thermocouples5setupEv+0x114>)
 8004702:	635a      	str	r2, [r3, #52]	@ 0x34

    diameter = 0.000812f;                // 20 gauge wire diameter, meters
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a28      	ldr	r2, [pc, #160]	@ (80047a8 <_ZN13Thermocouples5setupEv+0x118>)
 8004708:	645a      	str	r2, [r3, #68]	@ 0x44
    length = 0.0254f;                    // 1 inch in meters
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a27      	ldr	r2, [pc, #156]	@ (80047ac <_ZN13Thermocouples5setupEv+0x11c>)
 800470e:	649a      	str	r2, [r3, #72]	@ 0x48
    area = 3.14159f * diameter * length; // surface area in m^2
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8004716:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80047b0 <_ZN13Thermocouples5setupEv+0x120>
 800471a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8004724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
    ambientTemp = 20.0f;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a1a      	ldr	r2, [pc, #104]	@ (800479c <_ZN13Thermocouples5setupEv+0x10c>)
 8004732:	641a      	str	r2, [r3, #64]	@ 0x40
    h = 500;      // W/m^2 * K
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a1f      	ldr	r2, [pc, #124]	@ (80047b4 <_ZN13Thermocouples5setupEv+0x124>)
 8004738:	639a      	str	r2, [r3, #56]	@ 0x38
    C = 0.000053; // J /K
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a1e      	ldr	r2, [pc, #120]	@ (80047b8 <_ZN13Thermocouples5setupEv+0x128>)
 800473e:	63da      	str	r2, [r3, #60]	@ 0x3c
    lastTime = HAL_GetTick();
 8004740:	f002 fd1a 	bl	8007178 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	655a      	str	r2, [r3, #84]	@ 0x54
    left.begin();
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4618      	mov	r0, r3
 800474e:	f7ff fbaf 	bl	8003eb0 <_ZN17Adafruit_MAX318565beginEv>
    left.setThermocoupleType(MAX31856_TCTYPE_K);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2103      	movs	r1, #3
 8004756:	4618      	mov	r0, r3
 8004758:	f7ff fbfe 	bl	8003f58 <_ZN17Adafruit_MAX3185619setThermocoupleTypeE27max31856_thermocoupletype_t>
    left.setConversionMode(MAX31856_CONTINUOUS);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2101      	movs	r1, #1
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff fbcb 	bl	8003efc <_ZN17Adafruit_MAX3185617setConversionModeE26max31856_conversion_mode_t>

    right.begin();
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	330c      	adds	r3, #12
 800476a:	4618      	mov	r0, r3
 800476c:	f7ff fba0 	bl	8003eb0 <_ZN17Adafruit_MAX318565beginEv>
    right.setThermocoupleType(MAX31856_TCTYPE_K);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	330c      	adds	r3, #12
 8004774:	2103      	movs	r1, #3
 8004776:	4618      	mov	r0, r3
 8004778:	f7ff fbee 	bl	8003f58 <_ZN17Adafruit_MAX3185619setThermocoupleTypeE27max31856_thermocoupletype_t>
    right.setConversionMode(MAX31856_CONTINUOUS);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	330c      	adds	r3, #12
 8004780:	2101      	movs	r1, #1
 8004782:	4618      	mov	r0, r3
 8004784:	f7ff fbba 	bl	8003efc <_ZN17Adafruit_MAX3185617setConversionModeE26max31856_conversion_mode_t>
    // SPI_Set_Mode(0);
    HAL_Delay(250);
 8004788:	20fa      	movs	r0, #250	@ 0xfa
 800478a:	f000 fadc 	bl	8004d46 <HAL_Delay>
    // setNoiseFilter(&tempSensor, MAX31856_NOISE_FILTER_50HZ);
    // HAL_Delay(200);
    // Set fault thresholds (optional)
    // setTempFaultThresholds(&tempSensor, -200.0f, 1000.0f); // -200°C to 1000°C
    // setColdJunctionFaultThresholds(&tempSensor, -40, 85);   // -40°C to 85°C
}
 800478e:	bf00      	nop
 8004790:	3720      	adds	r7, #32
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	20000810 	.word	0x20000810
 800479c:	41a00000 	.word	0x41a00000
 80047a0:	3dcccccd 	.word	0x3dcccccd
 80047a4:	42480000 	.word	0x42480000
 80047a8:	3a54dc66 	.word	0x3a54dc66
 80047ac:	3cd013a9 	.word	0x3cd013a9
 80047b0:	40490fd0 	.word	0x40490fd0
 80047b4:	43fa0000 	.word	0x43fa0000
 80047b8:	385e4c51 	.word	0x385e4c51

080047bc <_ZN13Thermocouples12stateMachineEv>:

void Thermocouples::stateMachine(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af02      	add	r7, sp, #8
 80047c2:	6078      	str	r0, [r7, #4]
    if (!delay)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	bf0c      	ite	eq
 80047cc:	2301      	moveq	r3, #1
 80047ce:	2300      	movne	r3, #0
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 8099 	beq.w	800490a <_ZN13Thermocouples12stateMachineEv+0x14e>
    {
        // SPI_Set_Mode(1);
        rightRawTemp = (int32_t)right.readThermocoupleTemperature();
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	330c      	adds	r3, #12
 80047dc:	4618      	mov	r0, r3
 80047de:	f7ff fc17 	bl	8004010 <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv>
 80047e2:	4603      	mov	r3, r0
 80047e4:	461a      	mov	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	65da      	str	r2, [r3, #92]	@ 0x5c
        leftRawTemp = (int32_t)left.readThermocoupleTemperature();
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7ff fc0f 	bl	8004010 <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv>
 80047f2:	4603      	mov	r3, r0
 80047f4:	461a      	mov	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	659a      	str	r2, [r3, #88]	@ 0x58
        // SPI_Set_Mode(0);
        //  deltaTemp = deltaTemp + ((rightTemp - leftTemp) - deltaTemp) * 0.9; // leaky integrator with a gain of 0.9
        //  Average two sensors, or use one

        currentTime = HAL_GetTick();
 80047fa:	f002 fcbd 	bl	8007178 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	651a      	str	r2, [r3, #80]	@ 0x50

        rightTemp = rightRawTemp;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004808:	ee07 3a90 	vmov	s15, r3
 800480c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
        leftTemp = leftRawTemp;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800481a:	ee07 3a90 	vmov	s15, r3
 800481e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60

        measurement = 0.0078125f * (rightTemp); // or use delta if necessary
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800482e:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8004914 <_ZN13Thermocouples12stateMachineEv+0x158>
 8004832:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	edc3 7a07 	vstr	s15, [r3, #28]

        // Thermal model prediction (convert units if necessary for h/C)
        prediction = estimate; //+ (area * h / C) * (ambientTemp - estimate) * ((currentTime - lastTime) / 1000.0f);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	621a      	str	r2, [r3, #32]

        error = error + process_variance;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004850:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        kalman_gain = error / (error + measurement_variance);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800486c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        estimate = estimate + kalman_gain * (measurement - prediction);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	ed93 6a07 	vldr	s12, [r3, #28]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	edd3 7a08 	vldr	s15, [r3, #32]
 8004892:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004896:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800489a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        error = (1 - kalman_gain) * error;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80048aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80048b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        deltaTemp = estimate;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c6:	4a14      	ldr	r2, [pc, #80]	@ (8004918 <_ZN13Thermocouples12stateMachineEv+0x15c>)
 80048c8:	6013      	str	r3, [r2, #0]

        lastTime = currentTime;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	655a      	str	r2, [r3, #84]	@ 0x54
        // CDC_Transmit_FS((uint8_t *)usbBuffer, strlen(usbBuffer));




        snprintf((char*)UART_BUFFER, sizeof(UART_BUFFER), "Raw Delta T: %f\r\n", deltaTemp);
 80048d2:	4b11      	ldr	r3, [pc, #68]	@ (8004918 <_ZN13Thermocouples12stateMachineEv+0x15c>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fb fe0e 	bl	80004f8 <__aeabi_f2d>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	e9cd 2300 	strd	r2, r3, [sp]
 80048e4:	4a0d      	ldr	r2, [pc, #52]	@ (800491c <_ZN13Thermocouples12stateMachineEv+0x160>)
 80048e6:	2140      	movs	r1, #64	@ 0x40
 80048e8:	480d      	ldr	r0, [pc, #52]	@ (8004920 <_ZN13Thermocouples12stateMachineEv+0x164>)
 80048ea:	f014 fe83 	bl	80195f4 <sniprintf>
        HAL_UART_Transmit(&huart1, UART_BUFFER, strlen((char*)UART_BUFFER), 300);
 80048ee:	480c      	ldr	r0, [pc, #48]	@ (8004920 <_ZN13Thermocouples12stateMachineEv+0x164>)
 80048f0:	f7fb fc96 	bl	8000220 <strlen>
 80048f4:	4603      	mov	r3, r0
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80048fc:	4908      	ldr	r1, [pc, #32]	@ (8004920 <_ZN13Thermocouples12stateMachineEv+0x164>)
 80048fe:	4809      	ldr	r0, [pc, #36]	@ (8004924 <_ZN13Thermocouples12stateMachineEv+0x168>)
 8004900:	f009 fcf8 	bl	800e2f4 <HAL_UART_Transmit>

        delay = 1; // 50 ms
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	619a      	str	r2, [r3, #24]
    }
}
 800490a:	bf00      	nop
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	3c000000 	.word	0x3c000000
 8004918:	20000378 	.word	0x20000378
 800491c:	0801b720 	.word	0x0801b720
 8004920:	200004ac 	.word	0x200004ac
 8004924:	20000974 	.word	0x20000974

08004928 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8004928:	b5b0      	push	{r4, r5, r7, lr}
 800492a:	b088      	sub	sp, #32
 800492c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800492e:	4b0b      	ldr	r3, [pc, #44]	@ (800495c <APPD_EnableCPU2+0x34>)
 8004930:	1d3c      	adds	r4, r7, #4
 8004932:	461d      	mov	r5, r3
 8004934:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004936:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004938:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800493c:	c403      	stmia	r4!, {r0, r1}
 800493e:	8022      	strh	r2, [r4, #0]
 8004940:	3402      	adds	r4, #2
 8004942:	0c13      	lsrs	r3, r2, #16
 8004944:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8004946:	f010 f923 	bl	8014b90 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800494a:	1d3b      	adds	r3, r7, #4
 800494c:	4618      	mov	r0, r3
 800494e:	f00f fbb4 	bl	80140ba <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8004952:	bf00      	nop
}
 8004954:	3720      	adds	r7, #32
 8004956:	46bd      	mov	sp, r7
 8004958:	bdb0      	pop	{r4, r5, r7, pc}
 800495a:	bf00      	nop
 800495c:	0801b734 	.word	0x0801b734

08004960 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8004968:	4b07      	ldr	r3, [pc, #28]	@ (8004988 <LL_C2_PWR_SetPowerMode+0x28>)
 800496a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800496e:	f023 0207 	bic.w	r2, r3, #7
 8004972:	4905      	ldr	r1, [pc, #20]	@ (8004988 <LL_C2_PWR_SetPowerMode+0x28>)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4313      	orrs	r3, r2
 8004978:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr
 8004988:	58000400 	.word	0x58000400

0800498c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004994:	4b06      	ldr	r3, [pc, #24]	@ (80049b0 <LL_EXTI_EnableIT_32_63+0x24>)
 8004996:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800499a:	4905      	ldr	r1, [pc, #20]	@ (80049b0 <LL_EXTI_EnableIT_32_63+0x24>)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4313      	orrs	r3, r2
 80049a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr
 80049b0:	58000800 	.word	0x58000800

080049b4 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80049bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049c0:	4a0a      	ldr	r2, [pc, #40]	@ (80049ec <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80049c2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80049c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049ce:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	021b      	lsls	r3, r3, #8
 80049d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80049da:	4313      	orrs	r3, r2
 80049dc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	cafecafe 	.word	0xcafecafe

080049f0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80049f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004a02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	608b      	str	r3, [r1, #8]
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8004a1c:	4b04      	ldr	r3, [pc, #16]	@ (8004a30 <LL_DBGMCU_GetDeviceID+0x18>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	e0042000 	.word	0xe0042000

08004a34 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8004a38:	4b04      	ldr	r3, [pc, #16]	@ (8004a4c <LL_DBGMCU_GetRevisionID+0x18>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	0c1b      	lsrs	r3, r3, #16
 8004a3e:	b29b      	uxth	r3, r3
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	e0042000 	.word	0xe0042000

08004a50 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004a54:	4b05      	ldr	r3, [pc, #20]	@ (8004a6c <LL_LPM_EnableSleep+0x1c>)
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	4a04      	ldr	r2, [pc, #16]	@ (8004a6c <LL_LPM_EnableSleep+0x1c>)
 8004a5a:	f023 0304 	bic.w	r3, r3, #4
 8004a5e:	6113      	str	r3, [r2, #16]
}
 8004a60:	bf00      	nop
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	e000ed00 	.word	0xe000ed00

08004a70 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	22ff      	movs	r2, #255	@ 0xff
 8004a7c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	22ca      	movs	r2, #202	@ 0xca
 8004a96:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2253      	movs	r2, #83	@ 0x53
 8004a9c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f023 0207 	bic.w	r2, r3, #7
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	609a      	str	r2, [r3, #8]
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8004ad4:	4b04      	ldr	r3, [pc, #16]	@ (8004ae8 <MX_APPE_Config+0x18>)
 8004ad6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004ada:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8004adc:	f000 f824 	bl	8004b28 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8004ae0:	f000 f829 	bl	8004b36 <Config_HSE>

  return;
 8004ae4:	bf00      	nop
}
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	58004000 	.word	0x58004000

08004aec <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8004af0:	f000 f835 	bl	8004b5e <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8004af4:	f000 f84e 	bl	8004b94 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8004af8:	4903      	ldr	r1, [pc, #12]	@ (8004b08 <MX_APPE_Init+0x1c>)
 8004afa:	2000      	movs	r0, #0
 8004afc:	f000 fdf4 	bl	80056e8 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8004b00:	f000 f856 	bl	8004bb0 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8004b04:	bf00      	nop
}
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	200007ec 	.word	0x200007ec

08004b0c <Init_Smps>:

void Init_Smps(void)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8004b10:	bf00      	nop
}
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <Init_Exti>:

void Init_Exti(void)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8004b1e:	2050      	movs	r0, #80	@ 0x50
 8004b20:	f7ff ff34 	bl	800498c <LL_EXTI_EnableIT_32_63>

  return;
 8004b24:	bf00      	nop
}
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8004b2c:	bf00      	nop
}
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b082      	sub	sp, #8
 8004b3a:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8004b3c:	2000      	movs	r0, #0
 8004b3e:	f010 f8b3 	bl	8014ca8 <OTP_Read>
 8004b42:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d005      	beq.n	8004b56 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	799b      	ldrb	r3, [r3, #6]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7ff ff30 	bl	80049b4 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8004b54:	bf00      	nop
 8004b56:	bf00      	nop
}
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <System_Init>:

static void System_Init(void)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	af00      	add	r7, sp, #0
  Init_Smps();
 8004b62:	f7ff ffd3 	bl	8004b0c <Init_Smps>

  Init_Exti();
 8004b66:	f7ff ffd8 	bl	8004b1a <Init_Exti>

  Init_Rtc();
 8004b6a:	f000 f803 	bl	8004b74 <Init_Rtc>

  return;
 8004b6e:	bf00      	nop
}
 8004b70:	bd80      	pop	{r7, pc}
	...

08004b74 <Init_Rtc>:

static void Init_Rtc(void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8004b78:	4805      	ldr	r0, [pc, #20]	@ (8004b90 <Init_Rtc+0x1c>)
 8004b7a:	f7ff ff86 	bl	8004a8a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8004b7e:	2100      	movs	r1, #0
 8004b80:	4803      	ldr	r0, [pc, #12]	@ (8004b90 <Init_Rtc+0x1c>)
 8004b82:	f7ff ff92 	bl	8004aaa <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8004b86:	4802      	ldr	r0, [pc, #8]	@ (8004b90 <Init_Rtc+0x1c>)
 8004b88:	f7ff ff72 	bl	8004a70 <LL_RTC_EnableWriteProtection>

  return;
 8004b8c:	bf00      	nop
}
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	40002800 	.word	0x40002800

08004b94 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8004b98:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004b9c:	f7ff ff28 	bl	80049f0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8004ba0:	f012 ff6c 	bl	8017a7c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8004ba4:	2004      	movs	r0, #4
 8004ba6:	f7ff fedb 	bl	8004960 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8004baa:	bf00      	nop
}
 8004bac:	bd80      	pop	{r7, pc}
	...

08004bb0 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b088      	sub	sp, #32
 8004bb4:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8004bb6:	f00f fe35 	bl	8014824 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8004bba:	4a11      	ldr	r2, [pc, #68]	@ (8004c00 <appe_Tl_Init+0x50>)
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	2008      	movs	r0, #8
 8004bc0:	f013 f89a 	bl	8017cf8 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8004bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8004c04 <appe_Tl_Init+0x54>)
 8004bc6:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8004bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8004c08 <appe_Tl_Init+0x58>)
 8004bca:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8004bcc:	463b      	mov	r3, r7
 8004bce:	4619      	mov	r1, r3
 8004bd0:	480e      	ldr	r0, [pc, #56]	@ (8004c0c <appe_Tl_Init+0x5c>)
 8004bd2:	f00f fce9 	bl	80145a8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8004bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8004c10 <appe_Tl_Init+0x60>)
 8004bd8:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8004bda:	4b0e      	ldr	r3, [pc, #56]	@ (8004c14 <appe_Tl_Init+0x64>)
 8004bdc:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8004bde:	4b0e      	ldr	r3, [pc, #56]	@ (8004c18 <appe_Tl_Init+0x68>)
 8004be0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8004be2:	f240 533c 	movw	r3, #1340	@ 0x53c
 8004be6:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8004be8:	f107 0308 	add.w	r3, r7, #8
 8004bec:	4618      	mov	r0, r3
 8004bee:	f00f ff5b 	bl	8014aa8 <TL_MM_Init>

  TL_Enable();
 8004bf2:	f00f fe11 	bl	8014818 <TL_Enable>

  return;
 8004bf6:	bf00      	nop
}
 8004bf8:	3720      	adds	r7, #32
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	080145e1 	.word	0x080145e1
 8004c04:	20030734 	.word	0x20030734
 8004c08:	08004c1d 	.word	0x08004c1d
 8004c0c:	08004c35 	.word	0x08004c35
 8004c10:	2003094c 	.word	0x2003094c
 8004c14:	20030840 	.word	0x20030840
 8004c18:	200301f8 	.word	0x200301f8

08004c1c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	4603      	mov	r3, r0
 8004c24:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8004c26:	bf00      	nop
}
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
	...

08004c34 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b088      	sub	sp, #32
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	330b      	adds	r3, #11
 8004c42:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8004c4e:	2b07      	cmp	r3, #7
 8004c50:	d81f      	bhi.n	8004c92 <APPE_SysUserEvtRx+0x5e>
 8004c52:	a201      	add	r2, pc, #4	@ (adr r2, 8004c58 <APPE_SysUserEvtRx+0x24>)
 8004c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c58:	08004c79 	.word	0x08004c79
 8004c5c:	08004c8b 	.word	0x08004c8b
 8004c60:	08004c93 	.word	0x08004c93
 8004c64:	08004c93 	.word	0x08004c93
 8004c68:	08004c93 	.word	0x08004c93
 8004c6c:	08004c93 	.word	0x08004c93
 8004c70:	08004c93 	.word	0x08004c93
 8004c74:	08004c93 	.word	0x08004c93
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8004c78:	f107 030c 	add.w	r3, r7, #12
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f00f fa49 	bl	8014114 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f81b 	bl	8004cbe <APPE_SysEvtReadyProcessing>
    break;
 8004c88:	e004      	b.n	8004c94 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f806 	bl	8004c9c <APPE_SysEvtError>
    break;
 8004c90:	e000      	b.n	8004c94 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8004c92:	bf00      	nop
  }

  return;
 8004c94:	bf00      	nop
}
 8004c96:	3720      	adds	r7, #32
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	330b      	adds	r3, #11
 8004caa:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	3302      	adds	r3, #2
 8004cb0:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8004cb2:	bf00      	nop
}
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b08a      	sub	sp, #40	@ 0x28
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8004cc6:	f107 0308 	add.w	r3, r7, #8
 8004cca:	2200      	movs	r2, #0
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	605a      	str	r2, [r3, #4]
 8004cd0:	609a      	str	r2, [r3, #8]
 8004cd2:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	330b      	adds	r3, #11
 8004ce2:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	3302      	adds	r3, #2
 8004ce8:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d11d      	bne.n	8004d2e <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8004cf2:	f7ff fe19 	bl	8004928 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8004cf6:	230f      	movs	r3, #15
 8004cf8:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8004cfa:	237f      	movs	r3, #127	@ 0x7f
 8004cfc:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8004cfe:	f7ff fe99 	bl	8004a34 <LL_DBGMCU_GetRevisionID>
 8004d02:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8004d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8004d0a:	f7ff fe85 	bl	8004a18 <LL_DBGMCU_GetDeviceID>
 8004d0e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8004d16:	f107 0308 	add.w	r3, r7, #8
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f00f f9e4 	bl	80140e8 <SHCI_C2_Config>

    APP_BLE_Init();
 8004d20:	f010 f8cc 	bl	8014ebc <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8004d24:	2100      	movs	r1, #0
 8004d26:	2001      	movs	r0, #1
 8004d28:	f012 feba 	bl	8017aa0 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8004d2c:	e007      	b.n	8004d3e <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d103      	bne.n	8004d3e <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	701a      	strb	r2, [r3, #0]
  return;
 8004d3c:	bf00      	nop
 8004d3e:	bf00      	nop
}
 8004d40:	3728      	adds	r7, #40	@ 0x28
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b084      	sub	sp, #16
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d4e:	f002 fa13 	bl	8007178 <HAL_GetTick>
 8004d52:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5e:	d00a      	beq.n	8004d76 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8004d60:	f002 fa22 	bl	80071a8 <HAL_GetTickFreq>
 8004d64:	4603      	mov	r3, r0
 8004d66:	461a      	mov	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004d6e:	e002      	b.n	8004d76 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8004d70:	f7ff fe6e 	bl	8004a50 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8004d74:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8004d76:	f002 f9ff 	bl	8007178 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d8f4      	bhi.n	8004d70 <HAL_Delay+0x2a>
  }
}
 8004d86:	bf00      	nop
 8004d88:	bf00      	nop
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8004d94:	f04f 30ff 	mov.w	r0, #4294967295
 8004d98:	f012 feb2 	bl	8017b00 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8004d9c:	bf00      	nop
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8004da0:	b480      	push	{r7}
 8004da2:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8004da4:	bf00      	nop
}
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b082      	sub	sp, #8
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8004db6:	2100      	movs	r1, #0
 8004db8:	2008      	movs	r0, #8
 8004dba:	f012 ffbf 	bl	8017d3c <UTIL_SEQ_SetTask>
  return;
 8004dbe:	bf00      	nop
}
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b082      	sub	sp, #8
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8004dce:	2002      	movs	r0, #2
 8004dd0:	f013 f820 	bl	8017e14 <UTIL_SEQ_SetEvt>
  return;
 8004dd4:	bf00      	nop
}
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8004de4:	2002      	movs	r0, #2
 8004de6:	f013 f835 	bl	8017e54 <UTIL_SEQ_WaitEvt>
  return;
 8004dea:	bf00      	nop
}
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b085      	sub	sp, #20
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004dfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004e00:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004e0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4013      	ands	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004e16:	68fb      	ldr	r3, [r7, #12]
}
 8004e18:	bf00      	nop
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e2a:	1d3b      	adds	r3, r7, #4
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	601a      	str	r2, [r3, #0]
 8004e30:	605a      	str	r2, [r3, #4]
 8004e32:	609a      	str	r2, [r3, #8]
 8004e34:	60da      	str	r2, [r3, #12]
 8004e36:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e38:	2004      	movs	r0, #4
 8004e3a:	f7ff ffda 	bl	8004df2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e3e:	2002      	movs	r0, #2
 8004e40:	f7ff ffd7 	bl	8004df2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e44:	2001      	movs	r0, #1
 8004e46:	f7ff ffd4 	bl	8004df2 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TFT_RESET_Pin|TFT_RS_DC_Pin|TFT_CS_Pin|TEMP1_CS_Pin
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f240 310e 	movw	r1, #782	@ 0x30e
 8004e50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004e54:	f002 fd1c 	bl	8007890 <HAL_GPIO_WritePin>
                          |TEMP2_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_RESET);
 8004e58:	2200      	movs	r2, #0
 8004e5a:	2120      	movs	r1, #32
 8004e5c:	4817      	ldr	r0, [pc, #92]	@ (8004ebc <MX_GPIO_Init+0x98>)
 8004e5e:	f002 fd17 	bl	8007890 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TFT_RESET_Pin TFT_RS_DC_Pin TFT_CS_Pin TEMP1_CS_Pin
                           TEMP2_CS_Pin */
  GPIO_InitStruct.Pin = TFT_RESET_Pin|TFT_RS_DC_Pin|TFT_CS_Pin|TEMP1_CS_Pin
 8004e62:	f240 330e 	movw	r3, #782	@ 0x30e
 8004e66:	607b      	str	r3, [r7, #4]
                          |TEMP2_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e70:	2300      	movs	r3, #0
 8004e72:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e74:	1d3b      	adds	r3, r7, #4
 8004e76:	4619      	mov	r1, r3
 8004e78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004e7c:	f002 fb98 	bl	80075b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEMP1_DRDY_Pin TEMP2_DRDY_Pin */
  GPIO_InitStruct.Pin = TEMP1_DRDY_Pin|TEMP2_DRDY_Pin;
 8004e80:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8004e84:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e86:	2300      	movs	r3, #0
 8004e88:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e8e:	1d3b      	adds	r3, r7, #4
 8004e90:	4619      	mov	r1, r3
 8004e92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004e96:	f002 fb8b 	bl	80075b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CS_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin;
 8004e9a:	2320      	movs	r3, #32
 8004e9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ADC_CS_GPIO_Port, &GPIO_InitStruct);
 8004eaa:	1d3b      	adds	r3, r7, #4
 8004eac:	4619      	mov	r1, r3
 8004eae:	4803      	ldr	r0, [pc, #12]	@ (8004ebc <MX_GPIO_Init+0x98>)
 8004eb0:	f002 fb7e 	bl	80075b0 <HAL_GPIO_Init>

}
 8004eb4:	bf00      	nop
 8004eb6:	3718      	adds	r7, #24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	48000400 	.word	0x48000400

08004ec0 <LL_EXTI_EnableIT_0_31>:
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004ec8:	4b06      	ldr	r3, [pc, #24]	@ (8004ee4 <LL_EXTI_EnableIT_0_31+0x24>)
 8004eca:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004ece:	4905      	ldr	r1, [pc, #20]	@ (8004ee4 <LL_EXTI_EnableIT_0_31+0x24>)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	58000800 	.word	0x58000800

08004ee8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004ef0:	4b05      	ldr	r3, [pc, #20]	@ (8004f08 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	4904      	ldr	r1, [pc, #16]	@ (8004f08 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	600b      	str	r3, [r1, #0]

}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	58000800 	.word	0x58000800

08004f0c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8004f12:	4b0d      	ldr	r3, [pc, #52]	@ (8004f48 <ReadRtcSsrValue+0x3c>)
 8004f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8004f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8004f48 <ReadRtcSsrValue+0x3c>)
 8004f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8004f22:	e005      	b.n	8004f30 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8004f28:	4b07      	ldr	r3, [pc, #28]	@ (8004f48 <ReadRtcSsrValue+0x3c>)
 8004f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d1f5      	bne.n	8004f24 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8004f38:	683b      	ldr	r3, [r7, #0]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	40002800 	.word	0x40002800

08004f4c <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	4603      	mov	r3, r0
 8004f54:	460a      	mov	r2, r1
 8004f56:	71fb      	strb	r3, [r7, #7]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8004f5c:	79ba      	ldrb	r2, [r7, #6]
 8004f5e:	491d      	ldr	r1, [pc, #116]	@ (8004fd4 <LinkTimerAfter+0x88>)
 8004f60:	4613      	mov	r3, r2
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	4413      	add	r3, r2
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	440b      	add	r3, r1
 8004f6a:	3315      	adds	r3, #21
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
 8004f72:	2b06      	cmp	r3, #6
 8004f74:	d009      	beq.n	8004f8a <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8004f76:	7bfa      	ldrb	r2, [r7, #15]
 8004f78:	4916      	ldr	r1, [pc, #88]	@ (8004fd4 <LinkTimerAfter+0x88>)
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	4413      	add	r3, r2
 8004f80:	00db      	lsls	r3, r3, #3
 8004f82:	440b      	add	r3, r1
 8004f84:	3314      	adds	r3, #20
 8004f86:	79fa      	ldrb	r2, [r7, #7]
 8004f88:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8004f8a:	79fa      	ldrb	r2, [r7, #7]
 8004f8c:	4911      	ldr	r1, [pc, #68]	@ (8004fd4 <LinkTimerAfter+0x88>)
 8004f8e:	4613      	mov	r3, r2
 8004f90:	005b      	lsls	r3, r3, #1
 8004f92:	4413      	add	r3, r2
 8004f94:	00db      	lsls	r3, r3, #3
 8004f96:	440b      	add	r3, r1
 8004f98:	3315      	adds	r3, #21
 8004f9a:	7bfa      	ldrb	r2, [r7, #15]
 8004f9c:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8004f9e:	79fa      	ldrb	r2, [r7, #7]
 8004fa0:	490c      	ldr	r1, [pc, #48]	@ (8004fd4 <LinkTimerAfter+0x88>)
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	005b      	lsls	r3, r3, #1
 8004fa6:	4413      	add	r3, r2
 8004fa8:	00db      	lsls	r3, r3, #3
 8004faa:	440b      	add	r3, r1
 8004fac:	3314      	adds	r3, #20
 8004fae:	79ba      	ldrb	r2, [r7, #6]
 8004fb0:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8004fb2:	79ba      	ldrb	r2, [r7, #6]
 8004fb4:	4907      	ldr	r1, [pc, #28]	@ (8004fd4 <LinkTimerAfter+0x88>)
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	4413      	add	r3, r2
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	440b      	add	r3, r1
 8004fc0:	3315      	adds	r3, #21
 8004fc2:	79fa      	ldrb	r2, [r7, #7]
 8004fc4:	701a      	strb	r2, [r3, #0]

  return;
 8004fc6:	bf00      	nop
}
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	2000037c 	.word	0x2000037c

08004fd8 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	4603      	mov	r3, r0
 8004fe0:	460a      	mov	r2, r1
 8004fe2:	71fb      	strb	r3, [r7, #7]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8004fe8:	4b29      	ldr	r3, [pc, #164]	@ (8005090 <LinkTimerBefore+0xb8>)
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	79ba      	ldrb	r2, [r7, #6]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d032      	beq.n	800505a <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8004ff4:	79ba      	ldrb	r2, [r7, #6]
 8004ff6:	4927      	ldr	r1, [pc, #156]	@ (8005094 <LinkTimerBefore+0xbc>)
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	005b      	lsls	r3, r3, #1
 8004ffc:	4413      	add	r3, r2
 8004ffe:	00db      	lsls	r3, r3, #3
 8005000:	440b      	add	r3, r1
 8005002:	3314      	adds	r3, #20
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8005008:	7bfa      	ldrb	r2, [r7, #15]
 800500a:	4922      	ldr	r1, [pc, #136]	@ (8005094 <LinkTimerBefore+0xbc>)
 800500c:	4613      	mov	r3, r2
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	4413      	add	r3, r2
 8005012:	00db      	lsls	r3, r3, #3
 8005014:	440b      	add	r3, r1
 8005016:	3315      	adds	r3, #21
 8005018:	79fa      	ldrb	r2, [r7, #7]
 800501a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 800501c:	79fa      	ldrb	r2, [r7, #7]
 800501e:	491d      	ldr	r1, [pc, #116]	@ (8005094 <LinkTimerBefore+0xbc>)
 8005020:	4613      	mov	r3, r2
 8005022:	005b      	lsls	r3, r3, #1
 8005024:	4413      	add	r3, r2
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	440b      	add	r3, r1
 800502a:	3315      	adds	r3, #21
 800502c:	79ba      	ldrb	r2, [r7, #6]
 800502e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8005030:	79fa      	ldrb	r2, [r7, #7]
 8005032:	4918      	ldr	r1, [pc, #96]	@ (8005094 <LinkTimerBefore+0xbc>)
 8005034:	4613      	mov	r3, r2
 8005036:	005b      	lsls	r3, r3, #1
 8005038:	4413      	add	r3, r2
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	440b      	add	r3, r1
 800503e:	3314      	adds	r3, #20
 8005040:	7bfa      	ldrb	r2, [r7, #15]
 8005042:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8005044:	79ba      	ldrb	r2, [r7, #6]
 8005046:	4913      	ldr	r1, [pc, #76]	@ (8005094 <LinkTimerBefore+0xbc>)
 8005048:	4613      	mov	r3, r2
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	4413      	add	r3, r2
 800504e:	00db      	lsls	r3, r3, #3
 8005050:	440b      	add	r3, r1
 8005052:	3314      	adds	r3, #20
 8005054:	79fa      	ldrb	r2, [r7, #7]
 8005056:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8005058:	e014      	b.n	8005084 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800505a:	79fa      	ldrb	r2, [r7, #7]
 800505c:	490d      	ldr	r1, [pc, #52]	@ (8005094 <LinkTimerBefore+0xbc>)
 800505e:	4613      	mov	r3, r2
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	4413      	add	r3, r2
 8005064:	00db      	lsls	r3, r3, #3
 8005066:	440b      	add	r3, r1
 8005068:	3315      	adds	r3, #21
 800506a:	79ba      	ldrb	r2, [r7, #6]
 800506c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800506e:	79ba      	ldrb	r2, [r7, #6]
 8005070:	4908      	ldr	r1, [pc, #32]	@ (8005094 <LinkTimerBefore+0xbc>)
 8005072:	4613      	mov	r3, r2
 8005074:	005b      	lsls	r3, r3, #1
 8005076:	4413      	add	r3, r2
 8005078:	00db      	lsls	r3, r3, #3
 800507a:	440b      	add	r3, r1
 800507c:	3314      	adds	r3, #20
 800507e:	79fa      	ldrb	r2, [r7, #7]
 8005080:	701a      	strb	r2, [r3, #0]
  return;
 8005082:	bf00      	nop
}
 8005084:	3714      	adds	r7, #20
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	2000040c 	.word	0x2000040c
 8005094:	2000037c 	.word	0x2000037c

08005098 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	4603      	mov	r3, r0
 80050a0:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80050a2:	4b4e      	ldr	r3, [pc, #312]	@ (80051dc <linkTimer+0x144>)
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b06      	cmp	r3, #6
 80050aa:	d118      	bne.n	80050de <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80050ac:	4b4b      	ldr	r3, [pc, #300]	@ (80051dc <linkTimer+0x144>)
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	4b4b      	ldr	r3, [pc, #300]	@ (80051e0 <linkTimer+0x148>)
 80050b4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80050b6:	4a49      	ldr	r2, [pc, #292]	@ (80051dc <linkTimer+0x144>)
 80050b8:	79fb      	ldrb	r3, [r7, #7]
 80050ba:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80050bc:	79fa      	ldrb	r2, [r7, #7]
 80050be:	4949      	ldr	r1, [pc, #292]	@ (80051e4 <linkTimer+0x14c>)
 80050c0:	4613      	mov	r3, r2
 80050c2:	005b      	lsls	r3, r3, #1
 80050c4:	4413      	add	r3, r2
 80050c6:	00db      	lsls	r3, r3, #3
 80050c8:	440b      	add	r3, r1
 80050ca:	3315      	adds	r3, #21
 80050cc:	2206      	movs	r2, #6
 80050ce:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80050d0:	4b45      	ldr	r3, [pc, #276]	@ (80051e8 <linkTimer+0x150>)
 80050d2:	f04f 32ff 	mov.w	r2, #4294967295
 80050d6:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80050d8:	2300      	movs	r3, #0
 80050da:	81fb      	strh	r3, [r7, #14]
 80050dc:	e078      	b.n	80051d0 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80050de:	f000 f909 	bl	80052f4 <ReturnTimeElapsed>
 80050e2:	4603      	mov	r3, r0
 80050e4:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80050e6:	79fa      	ldrb	r2, [r7, #7]
 80050e8:	493e      	ldr	r1, [pc, #248]	@ (80051e4 <linkTimer+0x14c>)
 80050ea:	4613      	mov	r3, r2
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	4413      	add	r3, r2
 80050f0:	00db      	lsls	r3, r3, #3
 80050f2:	440b      	add	r3, r1
 80050f4:	3308      	adds	r3, #8
 80050f6:	6819      	ldr	r1, [r3, #0]
 80050f8:	89fb      	ldrh	r3, [r7, #14]
 80050fa:	79fa      	ldrb	r2, [r7, #7]
 80050fc:	4419      	add	r1, r3
 80050fe:	4839      	ldr	r0, [pc, #228]	@ (80051e4 <linkTimer+0x14c>)
 8005100:	4613      	mov	r3, r2
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	4413      	add	r3, r2
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	4403      	add	r3, r0
 800510a:	3308      	adds	r3, #8
 800510c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800510e:	79fa      	ldrb	r2, [r7, #7]
 8005110:	4934      	ldr	r1, [pc, #208]	@ (80051e4 <linkTimer+0x14c>)
 8005112:	4613      	mov	r3, r2
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	4413      	add	r3, r2
 8005118:	00db      	lsls	r3, r3, #3
 800511a:	440b      	add	r3, r1
 800511c:	3308      	adds	r3, #8
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8005122:	4b2e      	ldr	r3, [pc, #184]	@ (80051dc <linkTimer+0x144>)
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	b2db      	uxtb	r3, r3
 8005128:	4619      	mov	r1, r3
 800512a:	4a2e      	ldr	r2, [pc, #184]	@ (80051e4 <linkTimer+0x14c>)
 800512c:	460b      	mov	r3, r1
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	440b      	add	r3, r1
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	4413      	add	r3, r2
 8005136:	3308      	adds	r3, #8
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	429a      	cmp	r2, r3
 800513e:	d337      	bcc.n	80051b0 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8005140:	4b26      	ldr	r3, [pc, #152]	@ (80051dc <linkTimer+0x144>)
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8005146:	7b7a      	ldrb	r2, [r7, #13]
 8005148:	4926      	ldr	r1, [pc, #152]	@ (80051e4 <linkTimer+0x14c>)
 800514a:	4613      	mov	r3, r2
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	4413      	add	r3, r2
 8005150:	00db      	lsls	r3, r3, #3
 8005152:	440b      	add	r3, r1
 8005154:	3315      	adds	r3, #21
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800515a:	e013      	b.n	8005184 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 800515c:	7b7a      	ldrb	r2, [r7, #13]
 800515e:	4921      	ldr	r1, [pc, #132]	@ (80051e4 <linkTimer+0x14c>)
 8005160:	4613      	mov	r3, r2
 8005162:	005b      	lsls	r3, r3, #1
 8005164:	4413      	add	r3, r2
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	440b      	add	r3, r1
 800516a:	3315      	adds	r3, #21
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8005170:	7b7a      	ldrb	r2, [r7, #13]
 8005172:	491c      	ldr	r1, [pc, #112]	@ (80051e4 <linkTimer+0x14c>)
 8005174:	4613      	mov	r3, r2
 8005176:	005b      	lsls	r3, r3, #1
 8005178:	4413      	add	r3, r2
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	440b      	add	r3, r1
 800517e:	3315      	adds	r3, #21
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8005184:	7b3b      	ldrb	r3, [r7, #12]
 8005186:	2b06      	cmp	r3, #6
 8005188:	d00b      	beq.n	80051a2 <linkTimer+0x10a>
 800518a:	7b3a      	ldrb	r2, [r7, #12]
 800518c:	4915      	ldr	r1, [pc, #84]	@ (80051e4 <linkTimer+0x14c>)
 800518e:	4613      	mov	r3, r2
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	4413      	add	r3, r2
 8005194:	00db      	lsls	r3, r3, #3
 8005196:	440b      	add	r3, r1
 8005198:	3308      	adds	r3, #8
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d2dc      	bcs.n	800515c <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80051a2:	7b7a      	ldrb	r2, [r7, #13]
 80051a4:	79fb      	ldrb	r3, [r7, #7]
 80051a6:	4611      	mov	r1, r2
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7ff fecf 	bl	8004f4c <LinkTimerAfter>
 80051ae:	e00f      	b.n	80051d0 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80051b0:	4b0a      	ldr	r3, [pc, #40]	@ (80051dc <linkTimer+0x144>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	79fb      	ldrb	r3, [r7, #7]
 80051b8:	4611      	mov	r1, r2
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7ff ff0c 	bl	8004fd8 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80051c0:	4b06      	ldr	r3, [pc, #24]	@ (80051dc <linkTimer+0x144>)
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	4b06      	ldr	r3, [pc, #24]	@ (80051e0 <linkTimer+0x148>)
 80051c8:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80051ca:	4a04      	ldr	r2, [pc, #16]	@ (80051dc <linkTimer+0x144>)
 80051cc:	79fb      	ldrb	r3, [r7, #7]
 80051ce:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80051d0:	89fb      	ldrh	r3, [r7, #14]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	2000040c 	.word	0x2000040c
 80051e0:	2000040d 	.word	0x2000040d
 80051e4:	2000037c 	.word	0x2000037c
 80051e8:	20000410 	.word	0x20000410

080051ec <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	4603      	mov	r3, r0
 80051f4:	460a      	mov	r2, r1
 80051f6:	71fb      	strb	r3, [r7, #7]
 80051f8:	4613      	mov	r3, r2
 80051fa:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80051fc:	4b39      	ldr	r3, [pc, #228]	@ (80052e4 <UnlinkTimer+0xf8>)
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	b2db      	uxtb	r3, r3
 8005202:	79fa      	ldrb	r2, [r7, #7]
 8005204:	429a      	cmp	r2, r3
 8005206:	d111      	bne.n	800522c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8005208:	4b36      	ldr	r3, [pc, #216]	@ (80052e4 <UnlinkTimer+0xf8>)
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	b2da      	uxtb	r2, r3
 800520e:	4b36      	ldr	r3, [pc, #216]	@ (80052e8 <UnlinkTimer+0xfc>)
 8005210:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8005212:	79fa      	ldrb	r2, [r7, #7]
 8005214:	4935      	ldr	r1, [pc, #212]	@ (80052ec <UnlinkTimer+0x100>)
 8005216:	4613      	mov	r3, r2
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	4413      	add	r3, r2
 800521c:	00db      	lsls	r3, r3, #3
 800521e:	440b      	add	r3, r1
 8005220:	3315      	adds	r3, #21
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	b2da      	uxtb	r2, r3
 8005226:	4b2f      	ldr	r3, [pc, #188]	@ (80052e4 <UnlinkTimer+0xf8>)
 8005228:	701a      	strb	r2, [r3, #0]
 800522a:	e03e      	b.n	80052aa <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 800522c:	79fa      	ldrb	r2, [r7, #7]
 800522e:	492f      	ldr	r1, [pc, #188]	@ (80052ec <UnlinkTimer+0x100>)
 8005230:	4613      	mov	r3, r2
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	4413      	add	r3, r2
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	440b      	add	r3, r1
 800523a:	3314      	adds	r3, #20
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8005240:	79fa      	ldrb	r2, [r7, #7]
 8005242:	492a      	ldr	r1, [pc, #168]	@ (80052ec <UnlinkTimer+0x100>)
 8005244:	4613      	mov	r3, r2
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	4413      	add	r3, r2
 800524a:	00db      	lsls	r3, r3, #3
 800524c:	440b      	add	r3, r1
 800524e:	3315      	adds	r3, #21
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8005254:	79f9      	ldrb	r1, [r7, #7]
 8005256:	7bfa      	ldrb	r2, [r7, #15]
 8005258:	4824      	ldr	r0, [pc, #144]	@ (80052ec <UnlinkTimer+0x100>)
 800525a:	460b      	mov	r3, r1
 800525c:	005b      	lsls	r3, r3, #1
 800525e:	440b      	add	r3, r1
 8005260:	00db      	lsls	r3, r3, #3
 8005262:	4403      	add	r3, r0
 8005264:	3315      	adds	r3, #21
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	b2d8      	uxtb	r0, r3
 800526a:	4920      	ldr	r1, [pc, #128]	@ (80052ec <UnlinkTimer+0x100>)
 800526c:	4613      	mov	r3, r2
 800526e:	005b      	lsls	r3, r3, #1
 8005270:	4413      	add	r3, r2
 8005272:	00db      	lsls	r3, r3, #3
 8005274:	440b      	add	r3, r1
 8005276:	3315      	adds	r3, #21
 8005278:	4602      	mov	r2, r0
 800527a:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800527c:	7bbb      	ldrb	r3, [r7, #14]
 800527e:	2b06      	cmp	r3, #6
 8005280:	d013      	beq.n	80052aa <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8005282:	79f9      	ldrb	r1, [r7, #7]
 8005284:	7bba      	ldrb	r2, [r7, #14]
 8005286:	4819      	ldr	r0, [pc, #100]	@ (80052ec <UnlinkTimer+0x100>)
 8005288:	460b      	mov	r3, r1
 800528a:	005b      	lsls	r3, r3, #1
 800528c:	440b      	add	r3, r1
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	4403      	add	r3, r0
 8005292:	3314      	adds	r3, #20
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	b2d8      	uxtb	r0, r3
 8005298:	4914      	ldr	r1, [pc, #80]	@ (80052ec <UnlinkTimer+0x100>)
 800529a:	4613      	mov	r3, r2
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	4413      	add	r3, r2
 80052a0:	00db      	lsls	r3, r3, #3
 80052a2:	440b      	add	r3, r1
 80052a4:	3314      	adds	r3, #20
 80052a6:	4602      	mov	r2, r0
 80052a8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80052aa:	79fa      	ldrb	r2, [r7, #7]
 80052ac:	490f      	ldr	r1, [pc, #60]	@ (80052ec <UnlinkTimer+0x100>)
 80052ae:	4613      	mov	r3, r2
 80052b0:	005b      	lsls	r3, r3, #1
 80052b2:	4413      	add	r3, r2
 80052b4:	00db      	lsls	r3, r3, #3
 80052b6:	440b      	add	r3, r1
 80052b8:	330c      	adds	r3, #12
 80052ba:	2201      	movs	r2, #1
 80052bc:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80052be:	4b09      	ldr	r3, [pc, #36]	@ (80052e4 <UnlinkTimer+0xf8>)
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b06      	cmp	r3, #6
 80052c6:	d107      	bne.n	80052d8 <UnlinkTimer+0xec>
 80052c8:	79bb      	ldrb	r3, [r7, #6]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d104      	bne.n	80052d8 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80052ce:	4b08      	ldr	r3, [pc, #32]	@ (80052f0 <UnlinkTimer+0x104>)
 80052d0:	f04f 32ff 	mov.w	r2, #4294967295
 80052d4:	601a      	str	r2, [r3, #0]
  }

  return;
 80052d6:	bf00      	nop
 80052d8:	bf00      	nop
}
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	2000040c 	.word	0x2000040c
 80052e8:	2000040d 	.word	0x2000040d
 80052ec:	2000037c 	.word	0x2000037c
 80052f0:	20000410 	.word	0x20000410

080052f4 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80052fa:	4b1a      	ldr	r3, [pc, #104]	@ (8005364 <ReturnTimeElapsed+0x70>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005302:	d026      	beq.n	8005352 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8005304:	f7ff fe02 	bl	8004f0c <ReadRtcSsrValue>
 8005308:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800530a:	4b16      	ldr	r3, [pc, #88]	@ (8005364 <ReturnTimeElapsed+0x70>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	429a      	cmp	r2, r3
 8005312:	d805      	bhi.n	8005320 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8005314:	4b13      	ldr	r3, [pc, #76]	@ (8005364 <ReturnTimeElapsed+0x70>)
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	607b      	str	r3, [r7, #4]
 800531e:	e00a      	b.n	8005336 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8005320:	4b11      	ldr	r3, [pc, #68]	@ (8005368 <ReturnTimeElapsed+0x74>)
 8005322:	881b      	ldrh	r3, [r3, #0]
 8005324:	461a      	mov	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 800532c:	4b0d      	ldr	r3, [pc, #52]	@ (8005364 <ReturnTimeElapsed+0x70>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	4413      	add	r3, r2
 8005334:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8005336:	4b0d      	ldr	r3, [pc, #52]	@ (800536c <ReturnTimeElapsed+0x78>)
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	461a      	mov	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	fb02 f303 	mul.w	r3, r2, r3
 8005342:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8005344:	4b0a      	ldr	r3, [pc, #40]	@ (8005370 <ReturnTimeElapsed+0x7c>)
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	461a      	mov	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	40d3      	lsrs	r3, r2
 800534e:	607b      	str	r3, [r7, #4]
 8005350:	e001      	b.n	8005356 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8005352:	2300      	movs	r3, #0
 8005354:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	b29b      	uxth	r3, r3
}
 800535a:	4618      	mov	r0, r3
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	20000410 	.word	0x20000410
 8005368:	20000418 	.word	0x20000418
 800536c:	20000416 	.word	0x20000416
 8005370:	20000415 	.word	0x20000415

08005374 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	4603      	mov	r3, r0
 800537c:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 800537e:	88fb      	ldrh	r3, [r7, #6]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d108      	bne.n	8005396 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8005384:	f7ff fdc2 	bl	8004f0c <ReadRtcSsrValue>
 8005388:	4603      	mov	r3, r0
 800538a:	4a21      	ldr	r2, [pc, #132]	@ (8005410 <RestartWakeupCounter+0x9c>)
 800538c:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800538e:	2003      	movs	r0, #3
 8005390:	f002 f893 	bl	80074ba <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8005394:	e039      	b.n	800540a <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8005396:	88fb      	ldrh	r3, [r7, #6]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d803      	bhi.n	80053a4 <RestartWakeupCounter+0x30>
 800539c:	4b1d      	ldr	r3, [pc, #116]	@ (8005414 <RestartWakeupCounter+0xa0>)
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d002      	beq.n	80053aa <RestartWakeupCounter+0x36>
      Value -= 1;
 80053a4:	88fb      	ldrh	r3, [r7, #6]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80053aa:	bf00      	nop
 80053ac:	4b1a      	ldr	r3, [pc, #104]	@ (8005418 <RestartWakeupCounter+0xa4>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f003 0304 	and.w	r3, r3, #4
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d0f8      	beq.n	80053ac <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80053ba:	4b17      	ldr	r3, [pc, #92]	@ (8005418 <RestartWakeupCounter+0xa4>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	b2da      	uxtb	r2, r3
 80053c2:	4b15      	ldr	r3, [pc, #84]	@ (8005418 <RestartWakeupCounter+0xa4>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80053ca:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80053cc:	4b13      	ldr	r3, [pc, #76]	@ (800541c <RestartWakeupCounter+0xa8>)
 80053ce:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80053d2:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80053d4:	2003      	movs	r0, #3
 80053d6:	f002 f87e 	bl	80074d6 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80053da:	4b11      	ldr	r3, [pc, #68]	@ (8005420 <RestartWakeupCounter+0xac>)
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	0c1b      	lsrs	r3, r3, #16
 80053e0:	041b      	lsls	r3, r3, #16
 80053e2:	88fa      	ldrh	r2, [r7, #6]
 80053e4:	490e      	ldr	r1, [pc, #56]	@ (8005420 <RestartWakeupCounter+0xac>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80053ea:	f7ff fd8f 	bl	8004f0c <ReadRtcSsrValue>
 80053ee:	4603      	mov	r3, r0
 80053f0:	4a07      	ldr	r2, [pc, #28]	@ (8005410 <RestartWakeupCounter+0x9c>)
 80053f2:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80053f4:	4b08      	ldr	r3, [pc, #32]	@ (8005418 <RestartWakeupCounter+0xa4>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689a      	ldr	r2, [r3, #8]
 80053fa:	4b07      	ldr	r3, [pc, #28]	@ (8005418 <RestartWakeupCounter+0xa4>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005402:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8005404:	f3af 8000 	nop.w
  return ;
 8005408:	bf00      	nop
}
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	20000410 	.word	0x20000410
 8005414:	20000415 	.word	0x20000415
 8005418:	200007ec 	.word	0x200007ec
 800541c:	58000800 	.word	0x58000800
 8005420:	40002800 	.word	0x40002800

08005424 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800542a:	4b45      	ldr	r3, [pc, #276]	@ (8005540 <RescheduleTimerList+0x11c>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005432:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005436:	d107      	bne.n	8005448 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8005438:	bf00      	nop
 800543a:	4b42      	ldr	r3, [pc, #264]	@ (8005544 <RescheduleTimerList+0x120>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f003 0304 	and.w	r3, r3, #4
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1f8      	bne.n	800543a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8005448:	4b3e      	ldr	r3, [pc, #248]	@ (8005544 <RescheduleTimerList+0x120>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689a      	ldr	r2, [r3, #8]
 800544e:	4b3d      	ldr	r3, [pc, #244]	@ (8005544 <RescheduleTimerList+0x120>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005456:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8005458:	4b3b      	ldr	r3, [pc, #236]	@ (8005548 <RescheduleTimerList+0x124>)
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800545e:	7bfa      	ldrb	r2, [r7, #15]
 8005460:	493a      	ldr	r1, [pc, #232]	@ (800554c <RescheduleTimerList+0x128>)
 8005462:	4613      	mov	r3, r2
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	4413      	add	r3, r2
 8005468:	00db      	lsls	r3, r3, #3
 800546a:	440b      	add	r3, r1
 800546c:	3308      	adds	r3, #8
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8005472:	f7ff ff3f 	bl	80052f4 <ReturnTimeElapsed>
 8005476:	4603      	mov	r3, r0
 8005478:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800547a:	88fb      	ldrh	r3, [r7, #6]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	429a      	cmp	r2, r3
 8005480:	d205      	bcs.n	800548e <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8005482:	2300      	movs	r3, #0
 8005484:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8005486:	4b32      	ldr	r3, [pc, #200]	@ (8005550 <RescheduleTimerList+0x12c>)
 8005488:	2201      	movs	r2, #1
 800548a:	701a      	strb	r2, [r3, #0]
 800548c:	e04d      	b.n	800552a <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800548e:	88fb      	ldrh	r3, [r7, #6]
 8005490:	4a30      	ldr	r2, [pc, #192]	@ (8005554 <RescheduleTimerList+0x130>)
 8005492:	8812      	ldrh	r2, [r2, #0]
 8005494:	b292      	uxth	r2, r2
 8005496:	4413      	add	r3, r2
 8005498:	461a      	mov	r2, r3
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	4293      	cmp	r3, r2
 800549e:	d906      	bls.n	80054ae <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80054a0:	4b2c      	ldr	r3, [pc, #176]	@ (8005554 <RescheduleTimerList+0x130>)
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80054a6:	4b2a      	ldr	r3, [pc, #168]	@ (8005550 <RescheduleTimerList+0x12c>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	701a      	strb	r2, [r3, #0]
 80054ac:	e03d      	b.n	800552a <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	88fb      	ldrh	r3, [r7, #6]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80054b8:	4b25      	ldr	r3, [pc, #148]	@ (8005550 <RescheduleTimerList+0x12c>)
 80054ba:	2201      	movs	r2, #1
 80054bc:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80054be:	e034      	b.n	800552a <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80054c0:	7bfa      	ldrb	r2, [r7, #15]
 80054c2:	4922      	ldr	r1, [pc, #136]	@ (800554c <RescheduleTimerList+0x128>)
 80054c4:	4613      	mov	r3, r2
 80054c6:	005b      	lsls	r3, r3, #1
 80054c8:	4413      	add	r3, r2
 80054ca:	00db      	lsls	r3, r3, #3
 80054cc:	440b      	add	r3, r1
 80054ce:	3308      	adds	r3, #8
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	88fb      	ldrh	r3, [r7, #6]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d20a      	bcs.n	80054ee <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80054d8:	7bfa      	ldrb	r2, [r7, #15]
 80054da:	491c      	ldr	r1, [pc, #112]	@ (800554c <RescheduleTimerList+0x128>)
 80054dc:	4613      	mov	r3, r2
 80054de:	005b      	lsls	r3, r3, #1
 80054e0:	4413      	add	r3, r2
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	440b      	add	r3, r1
 80054e6:	3308      	adds	r3, #8
 80054e8:	2200      	movs	r2, #0
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	e013      	b.n	8005516 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80054ee:	7bfa      	ldrb	r2, [r7, #15]
 80054f0:	4916      	ldr	r1, [pc, #88]	@ (800554c <RescheduleTimerList+0x128>)
 80054f2:	4613      	mov	r3, r2
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	4413      	add	r3, r2
 80054f8:	00db      	lsls	r3, r3, #3
 80054fa:	440b      	add	r3, r1
 80054fc:	3308      	adds	r3, #8
 80054fe:	6819      	ldr	r1, [r3, #0]
 8005500:	88fb      	ldrh	r3, [r7, #6]
 8005502:	7bfa      	ldrb	r2, [r7, #15]
 8005504:	1ac9      	subs	r1, r1, r3
 8005506:	4811      	ldr	r0, [pc, #68]	@ (800554c <RescheduleTimerList+0x128>)
 8005508:	4613      	mov	r3, r2
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	4413      	add	r3, r2
 800550e:	00db      	lsls	r3, r3, #3
 8005510:	4403      	add	r3, r0
 8005512:	3308      	adds	r3, #8
 8005514:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8005516:	7bfa      	ldrb	r2, [r7, #15]
 8005518:	490c      	ldr	r1, [pc, #48]	@ (800554c <RescheduleTimerList+0x128>)
 800551a:	4613      	mov	r3, r2
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	4413      	add	r3, r2
 8005520:	00db      	lsls	r3, r3, #3
 8005522:	440b      	add	r3, r1
 8005524:	3315      	adds	r3, #21
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800552a:	7bfb      	ldrb	r3, [r7, #15]
 800552c:	2b06      	cmp	r3, #6
 800552e:	d1c7      	bne.n	80054c0 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8005530:	89bb      	ldrh	r3, [r7, #12]
 8005532:	4618      	mov	r0, r3
 8005534:	f7ff ff1e 	bl	8005374 <RestartWakeupCounter>

  return ;
 8005538:	bf00      	nop
}
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	40002800 	.word	0x40002800
 8005544:	200007ec 	.word	0x200007ec
 8005548:	2000040c 	.word	0x2000040c
 800554c:	2000037c 	.word	0x2000037c
 8005550:	20000414 	.word	0x20000414
 8005554:	2000041a 	.word	0x2000041a

08005558 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b08a      	sub	sp, #40	@ 0x28
 800555c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800555e:	f3ef 8310 	mrs	r3, PRIMASK
 8005562:	617b      	str	r3, [r7, #20]
  return(result);
 8005564:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005566:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8005568:	b672      	cpsid	i
}
 800556a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800556c:	4b59      	ldr	r3, [pc, #356]	@ (80056d4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	22ca      	movs	r2, #202	@ 0xca
 8005572:	625a      	str	r2, [r3, #36]	@ 0x24
 8005574:	4b57      	ldr	r3, [pc, #348]	@ (80056d4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2253      	movs	r2, #83	@ 0x53
 800557a:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 800557c:	4b55      	ldr	r3, [pc, #340]	@ (80056d4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689a      	ldr	r2, [r3, #8]
 8005582:	4b54      	ldr	r3, [pc, #336]	@ (80056d4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800558a:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 800558c:	4b52      	ldr	r3, [pc, #328]	@ (80056d8 <HW_TS_RTC_Wakeup_Handler+0x180>)
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8005594:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8005598:	4950      	ldr	r1, [pc, #320]	@ (80056dc <HW_TS_RTC_Wakeup_Handler+0x184>)
 800559a:	4613      	mov	r3, r2
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	4413      	add	r3, r2
 80055a0:	00db      	lsls	r3, r3, #3
 80055a2:	440b      	add	r3, r1
 80055a4:	330c      	adds	r3, #12
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d16e      	bne.n	800568c <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80055ae:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80055b2:	494a      	ldr	r1, [pc, #296]	@ (80056dc <HW_TS_RTC_Wakeup_Handler+0x184>)
 80055b4:	4613      	mov	r3, r2
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	4413      	add	r3, r2
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	440b      	add	r3, r1
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80055c2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80055c6:	4945      	ldr	r1, [pc, #276]	@ (80056dc <HW_TS_RTC_Wakeup_Handler+0x184>)
 80055c8:	4613      	mov	r3, r2
 80055ca:	005b      	lsls	r3, r3, #1
 80055cc:	4413      	add	r3, r2
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	440b      	add	r3, r1
 80055d2:	3310      	adds	r3, #16
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80055d8:	4b41      	ldr	r3, [pc, #260]	@ (80056e0 <HW_TS_RTC_Wakeup_Handler+0x188>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d04c      	beq.n	800567c <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80055e2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80055e6:	493d      	ldr	r1, [pc, #244]	@ (80056dc <HW_TS_RTC_Wakeup_Handler+0x184>)
 80055e8:	4613      	mov	r3, r2
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	4413      	add	r3, r2
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	440b      	add	r3, r1
 80055f2:	330d      	adds	r3, #13
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d124      	bne.n	8005646 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80055fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005600:	2101      	movs	r1, #1
 8005602:	4618      	mov	r0, r3
 8005604:	f7ff fdf2 	bl	80051ec <UnlinkTimer>
 8005608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	f383 8810 	msr	PRIMASK, r3
}
 8005612:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8005614:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8005618:	4930      	ldr	r1, [pc, #192]	@ (80056dc <HW_TS_RTC_Wakeup_Handler+0x184>)
 800561a:	4613      	mov	r3, r2
 800561c:	005b      	lsls	r3, r3, #1
 800561e:	4413      	add	r3, r2
 8005620:	00db      	lsls	r3, r3, #3
 8005622:	440b      	add	r3, r1
 8005624:	3304      	adds	r3, #4
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800562c:	4611      	mov	r1, r2
 800562e:	4618      	mov	r0, r3
 8005630:	f000 f9b8 	bl	80059a4 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8005634:	4b27      	ldr	r3, [pc, #156]	@ (80056d4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	22ca      	movs	r2, #202	@ 0xca
 800563a:	625a      	str	r2, [r3, #36]	@ 0x24
 800563c:	4b25      	ldr	r3, [pc, #148]	@ (80056d4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2253      	movs	r2, #83	@ 0x53
 8005642:	625a      	str	r2, [r3, #36]	@ 0x24
 8005644:	e012      	b.n	800566c <HW_TS_RTC_Wakeup_Handler+0x114>
 8005646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005648:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f383 8810 	msr	PRIMASK, r3
}
 8005650:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8005652:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005656:	4618      	mov	r0, r3
 8005658:	f000 f920 	bl	800589c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800565c:	4b1d      	ldr	r3, [pc, #116]	@ (80056d4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	22ca      	movs	r2, #202	@ 0xca
 8005662:	625a      	str	r2, [r3, #36]	@ 0x24
 8005664:	4b1b      	ldr	r3, [pc, #108]	@ (80056d4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2253      	movs	r2, #83	@ 0x53
 800566a:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 800566c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005670:	69fa      	ldr	r2, [r7, #28]
 8005672:	4619      	mov	r1, r3
 8005674:	69b8      	ldr	r0, [r7, #24]
 8005676:	f000 fa1b 	bl	8005ab0 <HW_TS_RTC_Int_AppNot>
 800567a:	e022      	b.n	80056c2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 800567c:	f7ff fed2 	bl	8005424 <RescheduleTimerList>
 8005680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005682:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f383 8810 	msr	PRIMASK, r3
}
 800568a:	e01a      	b.n	80056c2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800568c:	bf00      	nop
 800568e:	4b11      	ldr	r3, [pc, #68]	@ (80056d4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f003 0304 	and.w	r3, r3, #4
 8005698:	2b00      	cmp	r3, #0
 800569a:	d0f8      	beq.n	800568e <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800569c:	4b0d      	ldr	r3, [pc, #52]	@ (80056d4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	4b0b      	ldr	r3, [pc, #44]	@ (80056d4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80056ac:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80056ae:	4b0d      	ldr	r3, [pc, #52]	@ (80056e4 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80056b0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80056b4:	60da      	str	r2, [r3, #12]
 80056b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f383 8810 	msr	PRIMASK, r3
}
 80056c0:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80056c2:	4b04      	ldr	r3, [pc, #16]	@ (80056d4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	22ff      	movs	r2, #255	@ 0xff
 80056c8:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 80056ca:	bf00      	nop
}
 80056cc:	3728      	adds	r7, #40	@ 0x28
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	200007ec 	.word	0x200007ec
 80056d8:	2000040c 	.word	0x2000040c
 80056dc:	2000037c 	.word	0x2000037c
 80056e0:	20000414 	.word	0x20000414
 80056e4:	58000800 	.word	0x58000800

080056e8 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b088      	sub	sp, #32
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	4603      	mov	r3, r0
 80056f0:	6039      	str	r1, [r7, #0]
 80056f2:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80056f4:	4b5e      	ldr	r3, [pc, #376]	@ (8005870 <HW_TS_Init+0x188>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	22ca      	movs	r2, #202	@ 0xca
 80056fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80056fc:	4b5c      	ldr	r3, [pc, #368]	@ (8005870 <HW_TS_Init+0x188>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2253      	movs	r2, #83	@ 0x53
 8005702:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005704:	4b5b      	ldr	r3, [pc, #364]	@ (8005874 <HW_TS_Init+0x18c>)
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	4a5a      	ldr	r2, [pc, #360]	@ (8005874 <HW_TS_Init+0x18c>)
 800570a:	f043 0320 	orr.w	r3, r3, #32
 800570e:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8005710:	4b58      	ldr	r3, [pc, #352]	@ (8005874 <HW_TS_Init+0x18c>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	b2db      	uxtb	r3, r3
 8005716:	f003 0307 	and.w	r3, r3, #7
 800571a:	b2db      	uxtb	r3, r3
 800571c:	f1c3 0304 	rsb	r3, r3, #4
 8005720:	b2da      	uxtb	r2, r3
 8005722:	4b55      	ldr	r3, [pc, #340]	@ (8005878 <HW_TS_Init+0x190>)
 8005724:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8005726:	4b53      	ldr	r3, [pc, #332]	@ (8005874 <HW_TS_Init+0x18c>)
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800572e:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8005732:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	fa92 f2a2 	rbit	r2, r2
 800573a:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	2a00      	cmp	r2, #0
 8005744:	d101      	bne.n	800574a <HW_TS_Init+0x62>
  {
    return 32U;
 8005746:	2220      	movs	r2, #32
 8005748:	e003      	b.n	8005752 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	fab2 f282 	clz	r2, r2
 8005750:	b2d2      	uxtb	r2, r2
 8005752:	40d3      	lsrs	r3, r2
 8005754:	b2db      	uxtb	r3, r3
 8005756:	3301      	adds	r3, #1
 8005758:	b2da      	uxtb	r2, r3
 800575a:	4b48      	ldr	r3, [pc, #288]	@ (800587c <HW_TS_Init+0x194>)
 800575c:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800575e:	4b45      	ldr	r3, [pc, #276]	@ (8005874 <HW_TS_Init+0x18c>)
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	b29b      	uxth	r3, r3
 8005764:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005768:	b29b      	uxth	r3, r3
 800576a:	3301      	adds	r3, #1
 800576c:	b29a      	uxth	r2, r3
 800576e:	4b44      	ldr	r3, [pc, #272]	@ (8005880 <HW_TS_Init+0x198>)
 8005770:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8005772:	4b43      	ldr	r3, [pc, #268]	@ (8005880 <HW_TS_Init+0x198>)
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	3b01      	subs	r3, #1
 8005778:	4a40      	ldr	r2, [pc, #256]	@ (800587c <HW_TS_Init+0x194>)
 800577a:	7812      	ldrb	r2, [r2, #0]
 800577c:	fb02 f303 	mul.w	r3, r2, r3
 8005780:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005784:	4a3c      	ldr	r2, [pc, #240]	@ (8005878 <HW_TS_Init+0x190>)
 8005786:	7812      	ldrb	r2, [r2, #0]
 8005788:	40d3      	lsrs	r3, r2
 800578a:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005792:	4293      	cmp	r3, r2
 8005794:	d904      	bls.n	80057a0 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8005796:	4b3b      	ldr	r3, [pc, #236]	@ (8005884 <HW_TS_Init+0x19c>)
 8005798:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800579c:	801a      	strh	r2, [r3, #0]
 800579e:	e003      	b.n	80057a8 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	4b37      	ldr	r3, [pc, #220]	@ (8005884 <HW_TS_Init+0x19c>)
 80057a6:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80057a8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80057ac:	f7ff fb9c 	bl	8004ee8 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80057b0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80057b4:	f7ff fb84 	bl	8004ec0 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80057b8:	79fb      	ldrb	r3, [r7, #7]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d13d      	bne.n	800583a <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80057be:	4b32      	ldr	r3, [pc, #200]	@ (8005888 <HW_TS_Init+0x1a0>)
 80057c0:	2201      	movs	r2, #1
 80057c2:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80057c4:	4b31      	ldr	r3, [pc, #196]	@ (800588c <HW_TS_Init+0x1a4>)
 80057c6:	f04f 32ff 	mov.w	r2, #4294967295
 80057ca:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80057cc:	2300      	movs	r3, #0
 80057ce:	77fb      	strb	r3, [r7, #31]
 80057d0:	e00c      	b.n	80057ec <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80057d2:	7ffa      	ldrb	r2, [r7, #31]
 80057d4:	492e      	ldr	r1, [pc, #184]	@ (8005890 <HW_TS_Init+0x1a8>)
 80057d6:	4613      	mov	r3, r2
 80057d8:	005b      	lsls	r3, r3, #1
 80057da:	4413      	add	r3, r2
 80057dc:	00db      	lsls	r3, r3, #3
 80057de:	440b      	add	r3, r1
 80057e0:	330c      	adds	r3, #12
 80057e2:	2200      	movs	r2, #0
 80057e4:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80057e6:	7ffb      	ldrb	r3, [r7, #31]
 80057e8:	3301      	adds	r3, #1
 80057ea:	77fb      	strb	r3, [r7, #31]
 80057ec:	7ffb      	ldrb	r3, [r7, #31]
 80057ee:	2b05      	cmp	r3, #5
 80057f0:	d9ef      	bls.n	80057d2 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80057f2:	4b28      	ldr	r3, [pc, #160]	@ (8005894 <HW_TS_Init+0x1ac>)
 80057f4:	2206      	movs	r2, #6
 80057f6:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80057f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005870 <HW_TS_Init+0x188>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689a      	ldr	r2, [r3, #8]
 80057fe:	4b1c      	ldr	r3, [pc, #112]	@ (8005870 <HW_TS_Init+0x188>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005806:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8005808:	4b19      	ldr	r3, [pc, #100]	@ (8005870 <HW_TS_Init+0x188>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	b2da      	uxtb	r2, r3
 8005810:	4b17      	ldr	r3, [pc, #92]	@ (8005870 <HW_TS_Init+0x188>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8005818:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800581a:	4b1f      	ldr	r3, [pc, #124]	@ (8005898 <HW_TS_Init+0x1b0>)
 800581c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005820:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8005822:	2003      	movs	r0, #3
 8005824:	f001 fe57 	bl	80074d6 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8005828:	4b11      	ldr	r3, [pc, #68]	@ (8005870 <HW_TS_Init+0x188>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689a      	ldr	r2, [r3, #8]
 800582e:	4b10      	ldr	r3, [pc, #64]	@ (8005870 <HW_TS_Init+0x188>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005836:	609a      	str	r2, [r3, #8]
 8005838:	e009      	b.n	800584e <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800583a:	4b0d      	ldr	r3, [pc, #52]	@ (8005870 <HW_TS_Init+0x188>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8005848:	2003      	movs	r0, #3
 800584a:	f001 fe36 	bl	80074ba <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800584e:	4b08      	ldr	r3, [pc, #32]	@ (8005870 <HW_TS_Init+0x188>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	22ff      	movs	r2, #255	@ 0xff
 8005854:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8005856:	2200      	movs	r2, #0
 8005858:	2103      	movs	r1, #3
 800585a:	2003      	movs	r0, #3
 800585c:	f001 fdeb 	bl	8007436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8005860:	2003      	movs	r0, #3
 8005862:	f001 fe02 	bl	800746a <HAL_NVIC_EnableIRQ>

  return;
 8005866:	bf00      	nop
}
 8005868:	3720      	adds	r7, #32
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	200007ec 	.word	0x200007ec
 8005874:	40002800 	.word	0x40002800
 8005878:	20000415 	.word	0x20000415
 800587c:	20000416 	.word	0x20000416
 8005880:	20000418 	.word	0x20000418
 8005884:	2000041a 	.word	0x2000041a
 8005888:	20000414 	.word	0x20000414
 800588c:	20000410 	.word	0x20000410
 8005890:	2000037c 	.word	0x2000037c
 8005894:	2000040c 	.word	0x2000040c
 8005898:	58000800 	.word	0x58000800

0800589c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	4603      	mov	r3, r0
 80058a4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058a6:	f3ef 8310 	mrs	r3, PRIMASK
 80058aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80058ac:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80058ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80058b0:	b672      	cpsid	i
}
 80058b2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80058b4:	2003      	movs	r0, #3
 80058b6:	f001 fde6 	bl	8007486 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80058ba:	4b34      	ldr	r3, [pc, #208]	@ (800598c <HW_TS_Stop+0xf0>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	22ca      	movs	r2, #202	@ 0xca
 80058c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80058c2:	4b32      	ldr	r3, [pc, #200]	@ (800598c <HW_TS_Stop+0xf0>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2253      	movs	r2, #83	@ 0x53
 80058c8:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80058ca:	79fa      	ldrb	r2, [r7, #7]
 80058cc:	4930      	ldr	r1, [pc, #192]	@ (8005990 <HW_TS_Stop+0xf4>)
 80058ce:	4613      	mov	r3, r2
 80058d0:	005b      	lsls	r3, r3, #1
 80058d2:	4413      	add	r3, r2
 80058d4:	00db      	lsls	r3, r3, #3
 80058d6:	440b      	add	r3, r1
 80058d8:	330c      	adds	r3, #12
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d142      	bne.n	8005968 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80058e2:	79fb      	ldrb	r3, [r7, #7]
 80058e4:	2100      	movs	r1, #0
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7ff fc80 	bl	80051ec <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80058ec:	4b29      	ldr	r3, [pc, #164]	@ (8005994 <HW_TS_Stop+0xf8>)
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80058f2:	7cfb      	ldrb	r3, [r7, #19]
 80058f4:	2b06      	cmp	r3, #6
 80058f6:	d12f      	bne.n	8005958 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80058f8:	4b27      	ldr	r3, [pc, #156]	@ (8005998 <HW_TS_Stop+0xfc>)
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005900:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005904:	d107      	bne.n	8005916 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8005906:	bf00      	nop
 8005908:	4b20      	ldr	r3, [pc, #128]	@ (800598c <HW_TS_Stop+0xf0>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f003 0304 	and.w	r3, r3, #4
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1f8      	bne.n	8005908 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8005916:	4b1d      	ldr	r3, [pc, #116]	@ (800598c <HW_TS_Stop+0xf0>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	4b1b      	ldr	r3, [pc, #108]	@ (800598c <HW_TS_Stop+0xf0>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005924:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8005926:	bf00      	nop
 8005928:	4b18      	ldr	r3, [pc, #96]	@ (800598c <HW_TS_Stop+0xf0>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	f003 0304 	and.w	r3, r3, #4
 8005932:	2b00      	cmp	r3, #0
 8005934:	d0f8      	beq.n	8005928 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8005936:	4b15      	ldr	r3, [pc, #84]	@ (800598c <HW_TS_Stop+0xf0>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	b2da      	uxtb	r2, r3
 800593e:	4b13      	ldr	r3, [pc, #76]	@ (800598c <HW_TS_Stop+0xf0>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8005946:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8005948:	4b14      	ldr	r3, [pc, #80]	@ (800599c <HW_TS_Stop+0x100>)
 800594a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800594e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8005950:	2003      	movs	r0, #3
 8005952:	f001 fdc0 	bl	80074d6 <HAL_NVIC_ClearPendingIRQ>
 8005956:	e007      	b.n	8005968 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8005958:	4b11      	ldr	r3, [pc, #68]	@ (80059a0 <HW_TS_Stop+0x104>)
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	b2db      	uxtb	r3, r3
 800595e:	7cfa      	ldrb	r2, [r7, #19]
 8005960:	429a      	cmp	r2, r3
 8005962:	d001      	beq.n	8005968 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8005964:	f7ff fd5e 	bl	8005424 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8005968:	4b08      	ldr	r3, [pc, #32]	@ (800598c <HW_TS_Stop+0xf0>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	22ff      	movs	r2, #255	@ 0xff
 800596e:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8005970:	2003      	movs	r0, #3
 8005972:	f001 fd7a 	bl	800746a <HAL_NVIC_EnableIRQ>
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	f383 8810 	msr	PRIMASK, r3
}
 8005980:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8005982:	bf00      	nop
}
 8005984:	3718      	adds	r7, #24
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	200007ec 	.word	0x200007ec
 8005990:	2000037c 	.word	0x2000037c
 8005994:	2000040c 	.word	0x2000040c
 8005998:	40002800 	.word	0x40002800
 800599c:	58000800 	.word	0x58000800
 80059a0:	2000040d 	.word	0x2000040d

080059a4 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	4603      	mov	r3, r0
 80059ac:	6039      	str	r1, [r7, #0]
 80059ae:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80059b0:	79fa      	ldrb	r2, [r7, #7]
 80059b2:	493b      	ldr	r1, [pc, #236]	@ (8005aa0 <HW_TS_Start+0xfc>)
 80059b4:	4613      	mov	r3, r2
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	4413      	add	r3, r2
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	440b      	add	r3, r1
 80059be:	330c      	adds	r3, #12
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d103      	bne.n	80059d0 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80059c8:	79fb      	ldrb	r3, [r7, #7]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7ff ff66 	bl	800589c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059d0:	f3ef 8310 	mrs	r3, PRIMASK
 80059d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80059d6:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80059d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80059da:	b672      	cpsid	i
}
 80059dc:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80059de:	2003      	movs	r0, #3
 80059e0:	f001 fd51 	bl	8007486 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80059e4:	4b2f      	ldr	r3, [pc, #188]	@ (8005aa4 <HW_TS_Start+0x100>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	22ca      	movs	r2, #202	@ 0xca
 80059ea:	625a      	str	r2, [r3, #36]	@ 0x24
 80059ec:	4b2d      	ldr	r3, [pc, #180]	@ (8005aa4 <HW_TS_Start+0x100>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2253      	movs	r2, #83	@ 0x53
 80059f2:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80059f4:	79fa      	ldrb	r2, [r7, #7]
 80059f6:	492a      	ldr	r1, [pc, #168]	@ (8005aa0 <HW_TS_Start+0xfc>)
 80059f8:	4613      	mov	r3, r2
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	4413      	add	r3, r2
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	440b      	add	r3, r1
 8005a02:	330c      	adds	r3, #12
 8005a04:	2202      	movs	r2, #2
 8005a06:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8005a08:	79fa      	ldrb	r2, [r7, #7]
 8005a0a:	4925      	ldr	r1, [pc, #148]	@ (8005aa0 <HW_TS_Start+0xfc>)
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	4413      	add	r3, r2
 8005a12:	00db      	lsls	r3, r3, #3
 8005a14:	440b      	add	r3, r1
 8005a16:	3308      	adds	r3, #8
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8005a1c:	79fa      	ldrb	r2, [r7, #7]
 8005a1e:	4920      	ldr	r1, [pc, #128]	@ (8005aa0 <HW_TS_Start+0xfc>)
 8005a20:	4613      	mov	r3, r2
 8005a22:	005b      	lsls	r3, r3, #1
 8005a24:	4413      	add	r3, r2
 8005a26:	00db      	lsls	r3, r3, #3
 8005a28:	440b      	add	r3, r1
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8005a30:	79fb      	ldrb	r3, [r7, #7]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7ff fb30 	bl	8005098 <linkTimer>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8005a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8005aa8 <HW_TS_Start+0x104>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8005a42:	4b1a      	ldr	r3, [pc, #104]	@ (8005aac <HW_TS_Start+0x108>)
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	7c7a      	ldrb	r2, [r7, #17]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d002      	beq.n	8005a54 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8005a4e:	f7ff fce9 	bl	8005424 <RescheduleTimerList>
 8005a52:	e013      	b.n	8005a7c <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8005a54:	79fa      	ldrb	r2, [r7, #7]
 8005a56:	4912      	ldr	r1, [pc, #72]	@ (8005aa0 <HW_TS_Start+0xfc>)
 8005a58:	4613      	mov	r3, r2
 8005a5a:	005b      	lsls	r3, r3, #1
 8005a5c:	4413      	add	r3, r2
 8005a5e:	00db      	lsls	r3, r3, #3
 8005a60:	440b      	add	r3, r1
 8005a62:	3308      	adds	r3, #8
 8005a64:	6819      	ldr	r1, [r3, #0]
 8005a66:	8a7b      	ldrh	r3, [r7, #18]
 8005a68:	79fa      	ldrb	r2, [r7, #7]
 8005a6a:	1ac9      	subs	r1, r1, r3
 8005a6c:	480c      	ldr	r0, [pc, #48]	@ (8005aa0 <HW_TS_Start+0xfc>)
 8005a6e:	4613      	mov	r3, r2
 8005a70:	005b      	lsls	r3, r3, #1
 8005a72:	4413      	add	r3, r2
 8005a74:	00db      	lsls	r3, r3, #3
 8005a76:	4403      	add	r3, r0
 8005a78:	3308      	adds	r3, #8
 8005a7a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8005a7c:	4b09      	ldr	r3, [pc, #36]	@ (8005aa4 <HW_TS_Start+0x100>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	22ff      	movs	r2, #255	@ 0xff
 8005a82:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8005a84:	2003      	movs	r0, #3
 8005a86:	f001 fcf0 	bl	800746a <HAL_NVIC_EnableIRQ>
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	f383 8810 	msr	PRIMASK, r3
}
 8005a94:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8005a96:	bf00      	nop
}
 8005a98:	3718      	adds	r7, #24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	2000037c 	.word	0x2000037c
 8005aa4:	200007ec 	.word	0x200007ec
 8005aa8:	2000040c 	.word	0x2000040c
 8005aac:	2000040d 	.word	0x2000040d

08005ab0 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	460b      	mov	r3, r1
 8005aba:	607a      	str	r2, [r7, #4]
 8005abc:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4798      	blx	r3

  return;
 8005ac2:	bf00      	nop
}
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <LL_AHB2_GRP1_EnableClock>:
{
 8005aca:	b480      	push	{r7}
 8005acc:	b085      	sub	sp, #20
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005ad2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ad6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005ad8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005ae2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ae6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4013      	ands	r3, r2
 8005aec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005aee:	68fb      	ldr	r3, [r7, #12]
}
 8005af0:	bf00      	nop
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8005b04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b08:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005b0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8005b14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b18:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005b20:	68fb      	ldr	r3, [r7, #12]
}
 8005b22:	bf00      	nop
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
	...

08005b30 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005b34:	4b1b      	ldr	r3, [pc, #108]	@ (8005ba4 <MX_I2C1_Init+0x74>)
 8005b36:	4a1c      	ldr	r2, [pc, #112]	@ (8005ba8 <MX_I2C1_Init+0x78>)
 8005b38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8005b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8005ba4 <MX_I2C1_Init+0x74>)
 8005b3c:	4a1b      	ldr	r2, [pc, #108]	@ (8005bac <MX_I2C1_Init+0x7c>)
 8005b3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005b40:	4b18      	ldr	r3, [pc, #96]	@ (8005ba4 <MX_I2C1_Init+0x74>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005b46:	4b17      	ldr	r3, [pc, #92]	@ (8005ba4 <MX_I2C1_Init+0x74>)
 8005b48:	2201      	movs	r2, #1
 8005b4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005b4c:	4b15      	ldr	r3, [pc, #84]	@ (8005ba4 <MX_I2C1_Init+0x74>)
 8005b4e:	2200      	movs	r2, #0
 8005b50:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005b52:	4b14      	ldr	r3, [pc, #80]	@ (8005ba4 <MX_I2C1_Init+0x74>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005b58:	4b12      	ldr	r3, [pc, #72]	@ (8005ba4 <MX_I2C1_Init+0x74>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005b5e:	4b11      	ldr	r3, [pc, #68]	@ (8005ba4 <MX_I2C1_Init+0x74>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005b64:	4b0f      	ldr	r3, [pc, #60]	@ (8005ba4 <MX_I2C1_Init+0x74>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005b6a:	480e      	ldr	r0, [pc, #56]	@ (8005ba4 <MX_I2C1_Init+0x74>)
 8005b6c:	f001 fecc 	bl	8007908 <HAL_I2C_Init>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005b76:	f000 fccf 	bl	8006518 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	4809      	ldr	r0, [pc, #36]	@ (8005ba4 <MX_I2C1_Init+0x74>)
 8005b7e:	f002 fee9 	bl	8008954 <HAL_I2CEx_ConfigAnalogFilter>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d001      	beq.n	8005b8c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005b88:	f000 fcc6 	bl	8006518 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	4805      	ldr	r0, [pc, #20]	@ (8005ba4 <MX_I2C1_Init+0x74>)
 8005b90:	f002 ff2b 	bl	80089ea <HAL_I2CEx_ConfigDigitalFilter>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005b9a:	f000 fcbd 	bl	8006518 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005b9e:	bf00      	nop
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	2000041c 	.word	0x2000041c
 8005ba8:	40005400 	.word	0x40005400
 8005bac:	00b07cb4 	.word	0x00b07cb4

08005bb0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b09c      	sub	sp, #112	@ 0x70
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bb8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	601a      	str	r2, [r3, #0]
 8005bc0:	605a      	str	r2, [r3, #4]
 8005bc2:	609a      	str	r2, [r3, #8]
 8005bc4:	60da      	str	r2, [r3, #12]
 8005bc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005bc8:	f107 030c 	add.w	r3, r7, #12
 8005bcc:	2250      	movs	r2, #80	@ 0x50
 8005bce:	2100      	movs	r1, #0
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f013 fda2 	bl	801971a <memset>
  if(i2cHandle->Instance==I2C1)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a17      	ldr	r2, [pc, #92]	@ (8005c38 <HAL_I2C_MspInit+0x88>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d126      	bne.n	8005c2e <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005be0:	2304      	movs	r3, #4
 8005be2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005be4:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8005be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005bea:	f107 030c 	add.w	r3, r7, #12
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f006 f834 	bl	800bc5c <HAL_RCCEx_PeriphCLKConfig>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8005bfa:	f000 fc8d 	bl	8006518 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bfe:	2002      	movs	r0, #2
 8005c00:	f7ff ff63 	bl	8005aca <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005c04:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005c08:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005c0a:	2312      	movs	r3, #18
 8005c0c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c12:	2300      	movs	r3, #0
 8005c14:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005c16:	2304      	movs	r3, #4
 8005c18:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c1a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8005c1e:	4619      	mov	r1, r3
 8005c20:	4806      	ldr	r0, [pc, #24]	@ (8005c3c <HAL_I2C_MspInit+0x8c>)
 8005c22:	f001 fcc5 	bl	80075b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005c26:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8005c2a:	f7ff ff67 	bl	8005afc <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8005c2e:	bf00      	nop
 8005c30:	3770      	adds	r7, #112	@ 0x70
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	40005400 	.word	0x40005400
 8005c3c:	48000400 	.word	0x48000400

08005c40 <LL_AHB3_GRP1_EnableClock>:
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8005c48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8005c58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4013      	ands	r3, r2
 8005c62:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005c64:	68fb      	ldr	r3, [r7, #12]
}
 8005c66:	bf00      	nop
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
	...

08005c74 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8005c78:	4b06      	ldr	r3, [pc, #24]	@ (8005c94 <MX_IPCC_Init+0x20>)
 8005c7a:	4a07      	ldr	r2, [pc, #28]	@ (8005c98 <MX_IPCC_Init+0x24>)
 8005c7c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8005c7e:	4805      	ldr	r0, [pc, #20]	@ (8005c94 <MX_IPCC_Init+0x20>)
 8005c80:	f002 ff00 	bl	8008a84 <HAL_IPCC_Init>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8005c8a:	f000 fc45 	bl	8006518 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8005c8e:	bf00      	nop
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	20000470 	.word	0x20000470
 8005c98:	58000c00 	.word	0x58000c00

08005c9c <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8005ce0 <HAL_IPCC_MspInit+0x44>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d113      	bne.n	8005cd6 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8005cae:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8005cb2:	f7ff ffc5 	bl	8005c40 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	2100      	movs	r1, #0
 8005cba:	202c      	movs	r0, #44	@ 0x2c
 8005cbc:	f001 fbbb 	bl	8007436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8005cc0:	202c      	movs	r0, #44	@ 0x2c
 8005cc2:	f001 fbd2 	bl	800746a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	2100      	movs	r1, #0
 8005cca:	202d      	movs	r0, #45	@ 0x2d
 8005ccc:	f001 fbb3 	bl	8007436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8005cd0:	202d      	movs	r0, #45	@ 0x2d
 8005cd2:	f001 fbca 	bl	800746a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8005cd6:	bf00      	nop
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	58000c00 	.word	0x58000c00

08005ce4 <LL_RCC_LSE_SetDriveCapability>:
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8005cec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cf4:	f023 0218 	bic.w	r2, r3, #24
 8005cf8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(const HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_RLR_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	683a      	ldr	r2, [r7, #0]
 8005d1e:	3220      	adds	r2, #32
 8005d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d24:	4a05      	ldr	r2, [pc, #20]	@ (8005d3c <LL_HSEM_1StepLock+0x2c>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d001      	beq.n	8005d2e <LL_HSEM_1StepLock+0x1e>
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e000      	b.n	8005d30 <LL_HSEM_1StepLock+0x20>
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	80000400 	.word	0x80000400

08005d40 <_ZN13AccelerometerC1Ev>:
#include "usbd_cdc_if.h"
#include "main.h"
// #define STATUS_LED 0
#define ADXL343_ADDR (0x53 << 1) // Correct 8-bit address for grounded ALT_ADDRESS

class Accelerometer
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	605a      	str	r2, [r3, #4]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2232      	movs	r2, #50	@ 0x32
 8005d58:	609a      	str	r2, [r3, #8]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	220f      	movs	r2, #15
 8005d5e:	60da      	str	r2, [r3, #12]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	611a      	str	r2, [r3, #16]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2208      	movs	r2, #8
 8005d6a:	751a      	strb	r2, [r3, #20]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2232      	movs	r2, #50	@ 0x32
 8005d70:	755a      	strb	r2, [r3, #21]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4618      	mov	r0, r3
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <_ZN13ThermocouplesC1Ev>:
#include "gpio.h"
#include "usart.h"
#include <stdio.h>
#include <string.h>

class Thermocouples
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fe f87c 	bl	8003e88 <_ZN17Adafruit_MAX31856C1Ev>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	330c      	adds	r3, #12
 8005d94:	4618      	mov	r0, r3
 8005d96:	f7fe f877 	bl	8003e88 <_ZN17Adafruit_MAX31856C1Ev>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	619a      	str	r2, [r3, #24]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4618      	mov	r0, r3
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
	...

08005dac <_ZN6ScreenC1Ev>:

#define BACKGROUND_COLOR 0xDCFF
#define TEXT_COLOR 0xA329
#define ACCENT_COLOR 0x6763

class Screen
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b086      	sub	sp, #24
 8005db0:	af04      	add	r7, sp, #16
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	2302      	movs	r3, #2
 8005db8:	9303      	str	r3, [sp, #12]
 8005dba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005dbe:	9302      	str	r3, [sp, #8]
 8005dc0:	2304      	movs	r3, #4
 8005dc2:	9301      	str	r3, [sp, #4]
 8005dc4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	2308      	movs	r3, #8
 8005dcc:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8005dd0:	49c4      	ldr	r1, [pc, #784]	@ (80060e4 <_ZN6ScreenC1Ev+0x338>)
 8005dd2:	f7fd fa85 	bl	80032e0 <_ZN13ST7789V_STM32C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_t>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	651a      	str	r2, [r3, #80]	@ 0x50
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8005de8:	2301      	movs	r3, #1
 8005dea:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005dee:	21f0      	movs	r1, #240	@ 0xf0
 8005df0:	f7fc fe58 	bl	8002aa4 <_ZN11GFXcanvas16C1Ettb>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	22f0      	movs	r2, #240	@ 0xf0
 8005df8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005e02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2202      	movs	r2, #2
 8005e0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e1a:	005b      	lsls	r3, r3, #1
 8005e1c:	1ad2      	subs	r2, r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e30:	005b      	lsls	r3, r3, #1
 8005e32:	1ad2      	subs	r2, r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2218      	movs	r2, #24
 8005e62:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2204      	movs	r2, #4
 8005e82:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	22b0      	movs	r2, #176	@ 0xb0
 8005e96:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005eb2:	441a      	add	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005ec6:	0fd9      	lsrs	r1, r3, #31
 8005ec8:	440b      	add	r3, r1
 8005eca:	105b      	asrs	r3, r3, #1
 8005ecc:	441a      	add	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2204      	movs	r2, #4
 8005ed8:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005ee8:	1ad2      	subs	r2, r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005ef0:	441a      	add	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a7b      	ldr	r2, [pc, #492]	@ (80060e8 <_ZN6ScreenC1Ev+0x33c>)
 8005efc:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a79      	ldr	r2, [pc, #484]	@ (80060e8 <_ZN6ScreenC1Ev+0x33c>)
 8005f04:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a78      	ldr	r2, [pc, #480]	@ (80060ec <_ZN6ScreenC1Ev+0x340>)
 8005f0c:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2240      	movs	r2, #64	@ 0x40
 8005f20:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005f3c:	441a      	add	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005f5c:	1ad2      	subs	r2, r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005f64:	1ad2      	subs	r2, r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8005f6c:	1ad2      	subs	r2, r2, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8005f8c:	441a      	add	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2204      	movs	r2, #4
 8005f98:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8005fa8:	4619      	mov	r1, r3
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	1acb      	subs	r3, r1, r3
 8005fae:	4413      	add	r3, r2
 8005fb0:	0fda      	lsrs	r2, r3, #31
 8005fb2:	4413      	add	r3, r2
 8005fb4:	105b      	asrs	r3, r3, #1
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8005fca:	005b      	lsls	r3, r3, #1
 8005fcc:	1ad2      	subs	r2, r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8005fe0:	441a      	add	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8005ff4:	441a      	add	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8006008:	005b      	lsls	r3, r3, #1
 800600a:	441a      	add	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8006012:	441a      	add	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8006026:	441a      	add	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8d3 217c 	ldr.w	r2, [r3, #380]	@ 0x17c
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8006046:	441a      	add	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8d3 2170 	ldr.w	r2, [r3, #368]	@ 0x170
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f8d3 2184 	ldr.w	r2, [r3, #388]	@ 0x184
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8006066:	441a      	add	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 2174 	ldr.w	r2, [r3, #372]	@ 0x174
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8d3 218c 	ldr.w	r2, [r3, #396]	@ 0x18c
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8006086:	441a      	add	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8d3 2178 	ldr.w	r2, [r3, #376]	@ 0x178
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8d3 2194 	ldr.w	r2, [r3, #404]	@ 0x194
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 80060a6:	441a      	add	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	220a      	movs	r2, #10
 80060b2:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2206      	movs	r2, #6
 80060ba:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2205      	movs	r2, #5
 80060c2:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a09      	ldr	r2, [pc, #36]	@ (80060f0 <_ZN6ScreenC1Ev+0x344>)
 80060ca:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060dc:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
 80060e0:	e008      	b.n	80060f4 <_ZN6ScreenC1Ev+0x348>
 80060e2:	bf00      	nop
 80060e4:	20000874 	.word	0x20000874
 80060e8:	43870000 	.word	0x43870000
 80060ec:	3a83126f 	.word	0x3a83126f
 80060f0:	40490fdb 	.word	0x40490fdb
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2208      	movs	r2, #8
 80060f8:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 21a4 	ldr.w	r2, [r3, #420]	@ 0x1a4
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006108:	0fd9      	lsrs	r1, r3, #31
 800610a:	440b      	add	r3, r1
 800610c:	105b      	asrs	r3, r3, #1
 800610e:	441a      	add	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006122:	441a      	add	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2264      	movs	r2, #100	@ 0x64
 800612e:	f8c3 21c4 	str.w	r2, [r3, #452]	@ 0x1c4
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4618      	mov	r0, r3
 800613e:	3708      	adds	r7, #8
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <_ZN14BatteryMonitorC1Ev>:

#include "Adafruit_MAX1704X.h"
#include "i2c.h"
#include "usbd_cdc_if.h"

class BatteryMonitor
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4618      	mov	r0, r3
 8006150:	f7fa fee8 	bl	8000f24 <_ZN23Adafruit_MAX17048_STM32C1Ev>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	220a      	movs	r2, #10
 8006158:	60da      	str	r2, [r3, #12]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4618      	mov	r0, r3
 800615e:	3708      	adds	r7, #8
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <HAL_TIM_PeriodElapsedCallback>:
Screen myScreen;
BatteryMonitor myBatteryMonitor;

// main timer implementation
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]

  if (htim == &htim16)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a4d      	ldr	r2, [pc, #308]	@ (80062a4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8006170:	4293      	cmp	r3, r2
 8006172:	f040 8091 	bne.w	8006298 <HAL_TIM_PeriodElapsedCallback+0x134>
  {
    // if(init_finished) {
    //  increment / decrement 0.1ms timers here.

    timerCounter++;
 8006176:	4b4c      	ldr	r3, [pc, #304]	@ (80062a8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	3301      	adds	r3, #1
 800617c:	4a4a      	ldr	r2, [pc, #296]	@ (80062a8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800617e:	6013      	str	r3, [r2, #0]

    if ((timerCounter % 10) == 0)
 8006180:	4b49      	ldr	r3, [pc, #292]	@ (80062a8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8006182:	6819      	ldr	r1, [r3, #0]
 8006184:	4b49      	ldr	r3, [pc, #292]	@ (80062ac <HAL_TIM_PeriodElapsedCallback+0x148>)
 8006186:	fb83 2301 	smull	r2, r3, r3, r1
 800618a:	109a      	asrs	r2, r3, #2
 800618c:	17cb      	asrs	r3, r1, #31
 800618e:	1ad2      	subs	r2, r2, r3
 8006190:	4613      	mov	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4413      	add	r3, r2
 8006196:	005b      	lsls	r3, r3, #1
 8006198:	1aca      	subs	r2, r1, r3
 800619a:	2a00      	cmp	r2, #0
 800619c:	bf0c      	ite	eq
 800619e:	2301      	moveq	r3, #1
 80061a0:	2300      	movne	r3, #0
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d01b      	beq.n	80061e0 <HAL_TIM_PeriodElapsedCallback+0x7c>
    {

      if (myScreen.renderDelay)
 80061a8:	4b41      	ldr	r3, [pc, #260]	@ (80062b0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80061aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	bf14      	ite	ne
 80061b0:	2301      	movne	r3, #1
 80061b2:	2300      	moveq	r3, #0
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d004      	beq.n	80061c4 <HAL_TIM_PeriodElapsedCallback+0x60>
      {
        myScreen.renderDelay--;
 80061ba:	4b3d      	ldr	r3, [pc, #244]	@ (80062b0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80061bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061be:	3b01      	subs	r3, #1
 80061c0:	4a3b      	ldr	r2, [pc, #236]	@ (80062b0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80061c2:	6513      	str	r3, [r2, #80]	@ 0x50
      }

      if (myThermocouples.delay)
 80061c4:	4b3b      	ldr	r3, [pc, #236]	@ (80062b4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	bf14      	ite	ne
 80061cc:	2301      	movne	r3, #1
 80061ce:	2300      	moveq	r3, #0
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d004      	beq.n	80061e0 <HAL_TIM_PeriodElapsedCallback+0x7c>
      {
        myThermocouples.delay--;
 80061d6:	4b37      	ldr	r3, [pc, #220]	@ (80062b4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	3b01      	subs	r3, #1
 80061dc:	4a35      	ldr	r2, [pc, #212]	@ (80062b4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80061de:	6193      	str	r3, [r2, #24]
      }
      // increment / decrement 1 ms timers here.
    }

    if ((timerCounter % 100) == 0)
 80061e0:	4b31      	ldr	r3, [pc, #196]	@ (80062a8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	4b34      	ldr	r3, [pc, #208]	@ (80062b8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80061e6:	fb83 1302 	smull	r1, r3, r3, r2
 80061ea:	1159      	asrs	r1, r3, #5
 80061ec:	17d3      	asrs	r3, r2, #31
 80061ee:	1acb      	subs	r3, r1, r3
 80061f0:	2164      	movs	r1, #100	@ 0x64
 80061f2:	fb01 f303 	mul.w	r3, r1, r3
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	2b00      	cmp	r3, #0
      //{
      //  thermocoupleDelay--;
      //}
    }

    if ((timerCounter % 1000) == 0)
 80061fa:	4b2b      	ldr	r3, [pc, #172]	@ (80062a8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	4b2f      	ldr	r3, [pc, #188]	@ (80062bc <HAL_TIM_PeriodElapsedCallback+0x158>)
 8006200:	fb83 1302 	smull	r1, r3, r3, r2
 8006204:	1199      	asrs	r1, r3, #6
 8006206:	17d3      	asrs	r3, r2, #31
 8006208:	1acb      	subs	r3, r1, r3
 800620a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800620e:	fb01 f303 	mul.w	r3, r1, r3
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	2b00      	cmp	r3, #0
      //{
      //  helloWorldDelay--;
      //}
    }

    if ((timerCounter % 10000) == 0)
 8006216:	4b24      	ldr	r3, [pc, #144]	@ (80062a8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	4b29      	ldr	r3, [pc, #164]	@ (80062c0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800621c:	fb83 1302 	smull	r1, r3, r3, r2
 8006220:	1319      	asrs	r1, r3, #12
 8006222:	17d3      	asrs	r3, r2, #31
 8006224:	1acb      	subs	r3, r1, r3
 8006226:	f242 7110 	movw	r1, #10000	@ 0x2710
 800622a:	fb01 f303 	mul.w	r3, r1, r3
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	2b00      	cmp	r3, #0
 8006232:	bf0c      	ite	eq
 8006234:	2301      	moveq	r3, #1
 8006236:	2300      	movne	r3, #0
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d02c      	beq.n	8006298 <HAL_TIM_PeriodElapsedCallback+0x134>
    {
      // increment / decrement 1000 ms timers here.  Note this resets the timer variable.
      timerCounter = 0;
 800623e:	4b1a      	ldr	r3, [pc, #104]	@ (80062a8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8006240:	2200      	movs	r2, #0
 8006242:	601a      	str	r2, [r3, #0]
      if (myAccelerometer.delay)
 8006244:	4b1f      	ldr	r3, [pc, #124]	@ (80062c4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	bf14      	ite	ne
 800624c:	2301      	movne	r3, #1
 800624e:	2300      	moveq	r3, #0
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d004      	beq.n	8006260 <HAL_TIM_PeriodElapsedCallback+0xfc>
      {
        myAccelerometer.delay--;
 8006256:	4b1b      	ldr	r3, [pc, #108]	@ (80062c4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	3b01      	subs	r3, #1
 800625c:	4a19      	ldr	r2, [pc, #100]	@ (80062c4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800625e:	6013      	str	r3, [r2, #0]
      }
      if (myAccelerometer.readDelay)
 8006260:	4b18      	ldr	r3, [pc, #96]	@ (80062c4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	bf14      	ite	ne
 8006268:	2301      	movne	r3, #1
 800626a:	2300      	moveq	r3, #0
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b00      	cmp	r3, #0
 8006270:	d004      	beq.n	800627c <HAL_TIM_PeriodElapsedCallback+0x118>
      {
        myAccelerometer.readDelay--;
 8006272:	4b14      	ldr	r3, [pc, #80]	@ (80062c4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	3b01      	subs	r3, #1
 8006278:	4a12      	ldr	r2, [pc, #72]	@ (80062c4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800627a:	6053      	str	r3, [r2, #4]
      }

      if (myBatteryMonitor.delay)
 800627c:	4b12      	ldr	r3, [pc, #72]	@ (80062c8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	2b00      	cmp	r3, #0
 8006282:	bf14      	ite	ne
 8006284:	2301      	movne	r3, #1
 8006286:	2300      	moveq	r3, #0
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d004      	beq.n	8006298 <HAL_TIM_PeriodElapsedCallback+0x134>
      {
        myBatteryMonitor.delay--;
 800628e:	4b0e      	ldr	r3, [pc, #56]	@ (80062c8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	3b01      	subs	r3, #1
 8006294:	4a0c      	ldr	r2, [pc, #48]	@ (80062c8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8006296:	60d3      	str	r3, [r2, #12]
      }
    }
    //}
  }
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr
 80062a4:	20000928 	.word	0x20000928
 80062a8:	200004ec 	.word	0x200004ec
 80062ac:	66666667 	.word	0x66666667
 80062b0:	200005b4 	.word	0x200005b4
 80062b4:	2000054c 	.word	0x2000054c
 80062b8:	51eb851f 	.word	0x51eb851f
 80062bc:	10624dd3 	.word	0x10624dd3
 80062c0:	68db8bad 	.word	0x68db8bad
 80062c4:	200004f0 	.word	0x200004f0
 80062c8:	200007dc 	.word	0x200007dc

080062cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80062d0:	f000 fee4 	bl	800709c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80062d4:	f7fe fbfc 	bl	8004ad0 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80062d8:	f000 f872 	bl	80063c0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80062dc:	f000 f8f0 	bl	80064c0 <_Z24PeriphCommonClock_Configv>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80062e0:	f7ff fcc8 	bl	8005c74 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80062e4:	f7fe fd9e 	bl	8004e24 <MX_GPIO_Init>
  MX_RTC_Init();
 80062e8:	f000 f988 	bl	80065fc <MX_RTC_Init>
  MX_I2C1_Init();
 80062ec:	f7ff fc20 	bl	8005b30 <MX_I2C1_Init>
  MX_SPI1_Init();
 80062f0:	f000 fa38 	bl	8006764 <MX_SPI1_Init>
  MX_SPI2_Init();
 80062f4:	f000 fa74 	bl	80067e0 <MX_SPI2_Init>
  MX_TIM2_Init();
 80062f8:	f000 fcfc 	bl	8006cf4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80062fc:	f000 fe02 	bl	8006f04 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 8006300:	f000 fd52 	bl	8006da8 <MX_TIM16_Init>
  MX_RF_Init();
 8006304:	f000 f948 	bl	8006598 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  //MX_APPE_Init();

  HAL_Delay(1000);
 8006308:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800630c:	f7fe fd1b 	bl	8004d46 <HAL_Delay>
  MX_USB_Device_Init();
 8006310:	f010 fe7a 	bl	8017008 <MX_USB_Device_Init>
  HAL_Delay(1000);
 8006314:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006318:	f7fe fd15 	bl	8004d46 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim16);
 800631c:	481f      	ldr	r0, [pc, #124]	@ (800639c <main+0xd0>)
 800631e:	f007 f819 	bl	800d354 <HAL_TIM_Base_Start_IT>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8006322:	2200      	movs	r2, #0
 8006324:	2100      	movs	r1, #0
 8006326:	2019      	movs	r0, #25
 8006328:	f001 f885 	bl	8007436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800632c:	2019      	movs	r0, #25
 800632e:	f001 f89c 	bl	800746a <HAL_NVIC_EnableIRQ>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8006332:	f7fe fbdb 	bl	8004aec <MX_APPE_Init>

  myAccelerometer.setup();
 8006336:	481a      	ldr	r0, [pc, #104]	@ (80063a0 <main+0xd4>)
 8006338:	f7fd ffc2 	bl	80042c0 <_ZN13Accelerometer5setupEv>
  myBacklight.setup();
 800633c:	4819      	ldr	r0, [pc, #100]	@ (80063a4 <main+0xd8>)
 800633e:	f7fe f8af 	bl	80044a0 <_ZN9Backlight5setupEv>
  myThermocouples.setup();
 8006342:	4819      	ldr	r0, [pc, #100]	@ (80063a8 <main+0xdc>)
 8006344:	f7fe f9a4 	bl	8004690 <_ZN13Thermocouples5setupEv>
  myBatteryMonitor.setup();
 8006348:	4818      	ldr	r0, [pc, #96]	@ (80063ac <main+0xe0>)
 800634a:	f7fe f95d 	bl	8004608 <_ZN14BatteryMonitor5setupEv>
  myScreen.setup();
 800634e:	4818      	ldr	r0, [pc, #96]	@ (80063b0 <main+0xe4>)
 8006350:	f010 fc38 	bl	8016bc4 <_ZN6Screen5setupEv>


  snprintf((char*)UART_BUFFER, 64, "Setup finished\r\n");
 8006354:	4a17      	ldr	r2, [pc, #92]	@ (80063b4 <main+0xe8>)
 8006356:	2140      	movs	r1, #64	@ 0x40
 8006358:	4817      	ldr	r0, [pc, #92]	@ (80063b8 <main+0xec>)
 800635a:	f013 f94b 	bl	80195f4 <sniprintf>
  HAL_UART_Transmit(&huart1, UART_BUFFER, strlen((char*)UART_BUFFER), 300);
 800635e:	4816      	ldr	r0, [pc, #88]	@ (80063b8 <main+0xec>)
 8006360:	f7f9 ff5e 	bl	8000220 <strlen>
 8006364:	4603      	mov	r3, r0
 8006366:	b29a      	uxth	r2, r3
 8006368:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800636c:	4912      	ldr	r1, [pc, #72]	@ (80063b8 <main+0xec>)
 800636e:	4813      	ldr	r0, [pc, #76]	@ (80063bc <main+0xf0>)
 8006370:	f007 ffc0 	bl	800e2f4 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8006374:	f7fe fd0c 	bl	8004d90 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */

    myAccelerometer.stateMachine();
 8006378:	4809      	ldr	r0, [pc, #36]	@ (80063a0 <main+0xd4>)
 800637a:	f7fd ffb5 	bl	80042e8 <_ZN13Accelerometer12stateMachineEv>
    myBacklight.stateMachine();
 800637e:	4809      	ldr	r0, [pc, #36]	@ (80063a4 <main+0xd8>)
 8006380:	f7fe f8a8 	bl	80044d4 <_ZN9Backlight12stateMachineEv>
    myThermocouples.stateMachine();
 8006384:	4808      	ldr	r0, [pc, #32]	@ (80063a8 <main+0xdc>)
 8006386:	f7fe fa19 	bl	80047bc <_ZN13Thermocouples12stateMachineEv>
    myBatteryMonitor.stateMachine();
 800638a:	4808      	ldr	r0, [pc, #32]	@ (80063ac <main+0xe0>)
 800638c:	f7fe f95a 	bl	8004644 <_ZN14BatteryMonitor12stateMachineEv>
    myScreen.stateMachine();
 8006390:	4807      	ldr	r0, [pc, #28]	@ (80063b0 <main+0xe4>)
 8006392:	f010 fc73 	bl	8016c7c <_ZN6Screen12stateMachineEv>
    MX_APPE_Process();
 8006396:	bf00      	nop
 8006398:	e7ec      	b.n	8006374 <main+0xa8>
 800639a:	bf00      	nop
 800639c:	20000928 	.word	0x20000928
 80063a0:	200004f0 	.word	0x200004f0
 80063a4:	20000008 	.word	0x20000008
 80063a8:	2000054c 	.word	0x2000054c
 80063ac:	200007dc 	.word	0x200007dc
 80063b0:	200005b4 	.word	0x200005b4
 80063b4:	0801b750 	.word	0x0801b750
 80063b8:	200004ac 	.word	0x200004ac
 80063bc:	20000974 	.word	0x20000974

080063c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b09a      	sub	sp, #104	@ 0x68
 80063c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80063c6:	f107 0320 	add.w	r3, r7, #32
 80063ca:	2248      	movs	r2, #72	@ 0x48
 80063cc:	2100      	movs	r1, #0
 80063ce:	4618      	mov	r0, r3
 80063d0:	f013 f9a3 	bl	801971a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80063d4:	1d3b      	adds	r3, r7, #4
 80063d6:	2200      	movs	r2, #0
 80063d8:	601a      	str	r2, [r3, #0]
 80063da:	605a      	str	r2, [r3, #4]
 80063dc:	609a      	str	r2, [r3, #8]
 80063de:	60da      	str	r2, [r3, #12]
 80063e0:	611a      	str	r2, [r3, #16]
 80063e2:	615a      	str	r2, [r3, #20]
 80063e4:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80063e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063f4:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80063f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	f023 0303 	bic.w	r3, r3, #3
 8006400:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006404:	f043 0301 	orr.w	r3, r3, #1
 8006408:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800640a:	f004 f8c3 	bl	800a594 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800640e:	2010      	movs	r0, #16
 8006410:	f7ff fc68 	bl	8005ce4 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006414:	4b29      	ldr	r3, [pc, #164]	@ (80064bc <SystemClock_Config+0xfc>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800641c:	4a27      	ldr	r2, [pc, #156]	@ (80064bc <SystemClock_Config+0xfc>)
 800641e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006422:	6013      	str	r3, [r2, #0]
 8006424:	4b25      	ldr	r3, [pc, #148]	@ (80064bc <SystemClock_Config+0xfc>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800642c:	603b      	str	r3, [r7, #0]
 800642e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8006430:	2327      	movs	r3, #39	@ 0x27
 8006432:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006434:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006438:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800643a:	2301      	movs	r3, #1
 800643c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800643e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006442:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8006444:	2301      	movs	r3, #1
 8006446:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006448:	2340      	movs	r3, #64	@ 0x40
 800644a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800644c:	2300      	movs	r3, #0
 800644e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8006450:	2360      	movs	r3, #96	@ 0x60
 8006452:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8006454:	2300      	movs	r3, #0
 8006456:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006458:	f107 0320 	add.w	r3, r7, #32
 800645c:	4618      	mov	r0, r3
 800645e:	f004 fc3d 	bl	800acdc <HAL_RCC_OscConfig>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	bf14      	ite	ne
 8006468:	2301      	movne	r3, #1
 800646a:	2300      	moveq	r3, #0
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8006472:	f000 f851 	bl	8006518 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8006476:	236f      	movs	r3, #111	@ 0x6f
 8006478:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800647a:	2302      	movs	r3, #2
 800647c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800647e:	2300      	movs	r3, #0
 8006480:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006482:	2300      	movs	r3, #0
 8006484:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006486:	2300      	movs	r3, #0
 8006488:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800648a:	2300      	movs	r3, #0
 800648c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800648e:	2300      	movs	r3, #0
 8006490:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006492:	1d3b      	adds	r3, r7, #4
 8006494:	2101      	movs	r1, #1
 8006496:	4618      	mov	r0, r3
 8006498:	f004 ff94 	bl	800b3c4 <HAL_RCC_ClockConfig>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	bf14      	ite	ne
 80064a2:	2301      	movne	r3, #1
 80064a4:	2300      	moveq	r3, #0
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d001      	beq.n	80064b0 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80064ac:	f000 f834 	bl	8006518 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80064b0:	f005 fd4a 	bl	800bf48 <HAL_RCCEx_EnableMSIPLLMode>
}
 80064b4:	bf00      	nop
 80064b6:	3768      	adds	r7, #104	@ 0x68
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	58000400 	.word	0x58000400

080064c0 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b094      	sub	sp, #80	@ 0x50
 80064c4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80064c6:	463b      	mov	r3, r7
 80064c8:	2250      	movs	r2, #80	@ 0x50
 80064ca:	2100      	movs	r1, #0
 80064cc:	4618      	mov	r0, r3
 80064ce:	f013 f924 	bl	801971a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80064d2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80064d6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80064d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80064dc:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80064de:	2302      	movs	r3, #2
 80064e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80064e2:	2310      	movs	r3, #16
 80064e4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80064e6:	463b      	mov	r3, r7
 80064e8:	4618      	mov	r0, r3
 80064ea:	f005 fbb7 	bl	800bc5c <HAL_RCCEx_PeriphCLKConfig>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	bf14      	ite	ne
 80064f4:	2301      	movne	r3, #1
 80064f6:	2300      	moveq	r3, #0
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <_Z24PeriphCommonClock_Configv+0x42>
  {
    Error_Handler();
 80064fe:	f000 f80b 	bl	8006518 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */
  LL_HSEM_1StepLock(HSEM, 5);
 8006502:	2105      	movs	r1, #5
 8006504:	4803      	ldr	r0, [pc, #12]	@ (8006514 <_Z24PeriphCommonClock_Configv+0x54>)
 8006506:	f7ff fc03 	bl	8005d10 <LL_HSEM_1StepLock>

  /* USER CODE END Smps */
}
 800650a:	bf00      	nop
 800650c:	3750      	adds	r7, #80	@ 0x50
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	58001400 	.word	0x58001400

08006518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006518:	b480      	push	{r7}
 800651a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800651c:	b672      	cpsid	i
}
 800651e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006520:	bf00      	nop
 8006522:	e7fd      	b.n	8006520 <Error_Handler+0x8>

08006524 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8006524:	b580      	push	{r7, lr}
 8006526:	af00      	add	r7, sp, #0
Accelerometer myAccelerometer;
 8006528:	4806      	ldr	r0, [pc, #24]	@ (8006544 <_Z41__static_initialization_and_destruction_0v+0x20>)
 800652a:	f7ff fc09 	bl	8005d40 <_ZN13AccelerometerC1Ev>
Thermocouples myThermocouples;
 800652e:	4806      	ldr	r0, [pc, #24]	@ (8006548 <_Z41__static_initialization_and_destruction_0v+0x24>)
 8006530:	f7ff fc26 	bl	8005d80 <_ZN13ThermocouplesC1Ev>
Screen myScreen;
 8006534:	4805      	ldr	r0, [pc, #20]	@ (800654c <_Z41__static_initialization_and_destruction_0v+0x28>)
 8006536:	f7ff fc39 	bl	8005dac <_ZN6ScreenC1Ev>
BatteryMonitor myBatteryMonitor;
 800653a:	4805      	ldr	r0, [pc, #20]	@ (8006550 <_Z41__static_initialization_and_destruction_0v+0x2c>)
 800653c:	f7ff fe02 	bl	8006144 <_ZN14BatteryMonitorC1Ev>
}
 8006540:	bf00      	nop
 8006542:	bd80      	pop	{r7, pc}
 8006544:	200004f0 	.word	0x200004f0
 8006548:	2000054c 	.word	0x2000054c
 800654c:	200005b4 	.word	0x200005b4
 8006550:	200007dc 	.word	0x200007dc

08006554 <_ZN6ScreenD1Ev>:
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	3358      	adds	r3, #88	@ 0x58
 8006560:	4618      	mov	r0, r3
 8006562:	f7fc fae7 	bl	8002b34 <_ZN11GFXcanvas16D1Ev>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4618      	mov	r0, r3
 800656a:	3708      	adds	r7, #8
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <_Z41__static_initialization_and_destruction_1v>:
 8006570:	b580      	push	{r7, lr}
 8006572:	af00      	add	r7, sp, #0
Screen myScreen;
 8006574:	4802      	ldr	r0, [pc, #8]	@ (8006580 <_Z41__static_initialization_and_destruction_1v+0x10>)
 8006576:	f7ff ffed 	bl	8006554 <_ZN6ScreenD1Ev>
}
 800657a:	bf00      	nop
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	200005b4 	.word	0x200005b4

08006584 <_GLOBAL__sub_I_UART_BUFFER>:
 8006584:	b580      	push	{r7, lr}
 8006586:	af00      	add	r7, sp, #0
 8006588:	f7ff ffcc 	bl	8006524 <_Z41__static_initialization_and_destruction_0v>
 800658c:	bd80      	pop	{r7, pc}

0800658e <_GLOBAL__sub_D_UART_BUFFER>:
 800658e:	b580      	push	{r7, lr}
 8006590:	af00      	add	r7, sp, #0
 8006592:	f7ff ffed 	bl	8006570 <_Z41__static_initialization_and_destruction_1v>
 8006596:	bd80      	pop	{r7, pc}

08006598 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8006598:	b480      	push	{r7}
 800659a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800659c:	bf00      	nop
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80065a6:	b480      	push	{r7}
 80065a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80065aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80065be:	bf00      	nop
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <LL_APB1_GRP1_EnableClock>:
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80065d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80065d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4313      	orrs	r3, r2
 80065de:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80065e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4013      	ands	r3, r2
 80065ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80065ec:	68fb      	ldr	r3, [r7, #12]
}
 80065ee:	bf00      	nop
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
	...

080065fc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8006600:	4b16      	ldr	r3, [pc, #88]	@ (800665c <MX_RTC_Init+0x60>)
 8006602:	4a17      	ldr	r2, [pc, #92]	@ (8006660 <MX_RTC_Init+0x64>)
 8006604:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006606:	4b15      	ldr	r3, [pc, #84]	@ (800665c <MX_RTC_Init+0x60>)
 8006608:	2200      	movs	r2, #0
 800660a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 800660c:	4b13      	ldr	r3, [pc, #76]	@ (800665c <MX_RTC_Init+0x60>)
 800660e:	220f      	movs	r2, #15
 8006610:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8006612:	4b12      	ldr	r3, [pc, #72]	@ (800665c <MX_RTC_Init+0x60>)
 8006614:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8006618:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800661a:	4b10      	ldr	r3, [pc, #64]	@ (800665c <MX_RTC_Init+0x60>)
 800661c:	2200      	movs	r2, #0
 800661e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006620:	4b0e      	ldr	r3, [pc, #56]	@ (800665c <MX_RTC_Init+0x60>)
 8006622:	2200      	movs	r2, #0
 8006624:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006626:	4b0d      	ldr	r3, [pc, #52]	@ (800665c <MX_RTC_Init+0x60>)
 8006628:	2200      	movs	r2, #0
 800662a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800662c:	4b0b      	ldr	r3, [pc, #44]	@ (800665c <MX_RTC_Init+0x60>)
 800662e:	2200      	movs	r2, #0
 8006630:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006632:	480a      	ldr	r0, [pc, #40]	@ (800665c <MX_RTC_Init+0x60>)
 8006634:	f005 fd9f 	bl	800c176 <HAL_RTC_Init>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d001      	beq.n	8006642 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800663e:	f7ff ff6b 	bl	8006518 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8006642:	2200      	movs	r2, #0
 8006644:	2100      	movs	r1, #0
 8006646:	4805      	ldr	r0, [pc, #20]	@ (800665c <MX_RTC_Init+0x60>)
 8006648:	f005 fea4 	bl	800c394 <HAL_RTCEx_SetWakeUpTimer_IT>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8006652:	f7ff ff61 	bl	8006518 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8006656:	bf00      	nop
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	200007ec 	.word	0x200007ec
 8006660:	40002800 	.word	0x40002800

08006664 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b096      	sub	sp, #88	@ 0x58
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800666c:	f107 0308 	add.w	r3, r7, #8
 8006670:	2250      	movs	r2, #80	@ 0x50
 8006672:	2100      	movs	r1, #0
 8006674:	4618      	mov	r0, r3
 8006676:	f013 f850 	bl	801971a <memset>
  if(rtcHandle->Instance==RTC)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a12      	ldr	r2, [pc, #72]	@ (80066c8 <HAL_RTC_MspInit+0x64>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d11d      	bne.n	80066c0 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006684:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006688:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800668a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800668e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006690:	f107 0308 	add.w	r3, r7, #8
 8006694:	4618      	mov	r0, r3
 8006696:	f005 fae1 	bl	800bc5c <HAL_RCCEx_PeriphCLKConfig>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d001      	beq.n	80066a4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80066a0:	f7ff ff3a 	bl	8006518 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80066a4:	f7ff ff7f 	bl	80065a6 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80066a8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80066ac:	f7ff ff8c 	bl	80065c8 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80066b0:	2200      	movs	r2, #0
 80066b2:	2100      	movs	r1, #0
 80066b4:	2003      	movs	r0, #3
 80066b6:	f000 febe 	bl	8007436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80066ba:	2003      	movs	r0, #3
 80066bc:	f000 fed5 	bl	800746a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80066c0:	bf00      	nop
 80066c2:	3758      	adds	r7, #88	@ 0x58
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	40002800 	.word	0x40002800

080066cc <LL_AHB2_GRP1_EnableClock>:
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80066d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80066da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80066e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4013      	ands	r3, r2
 80066ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80066f0:	68fb      	ldr	r3, [r7, #12]
}
 80066f2:	bf00      	nop
 80066f4:	3714      	adds	r7, #20
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <LL_APB1_GRP1_EnableClock>:
{
 80066fe:	b480      	push	{r7}
 8006700:	b085      	sub	sp, #20
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006706:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800670a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800670c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4313      	orrs	r3, r2
 8006714:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006716:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800671a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4013      	ands	r3, r2
 8006720:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006722:	68fb      	ldr	r3, [r7, #12]
}
 8006724:	bf00      	nop
 8006726:	3714      	adds	r7, #20
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8006730:	b480      	push	{r7}
 8006732:	b085      	sub	sp, #20
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8006738:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800673c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800673e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4313      	orrs	r3, r2
 8006746:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006748:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800674c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4013      	ands	r3, r2
 8006752:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006754:	68fb      	ldr	r3, [r7, #12]
}
 8006756:	bf00      	nop
 8006758:	3714      	adds	r7, #20
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
	...

08006764 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8006768:	4b1b      	ldr	r3, [pc, #108]	@ (80067d8 <MX_SPI1_Init+0x74>)
 800676a:	4a1c      	ldr	r2, [pc, #112]	@ (80067dc <MX_SPI1_Init+0x78>)
 800676c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800676e:	4b1a      	ldr	r3, [pc, #104]	@ (80067d8 <MX_SPI1_Init+0x74>)
 8006770:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006774:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006776:	4b18      	ldr	r3, [pc, #96]	@ (80067d8 <MX_SPI1_Init+0x74>)
 8006778:	2200      	movs	r2, #0
 800677a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800677c:	4b16      	ldr	r3, [pc, #88]	@ (80067d8 <MX_SPI1_Init+0x74>)
 800677e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8006782:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006784:	4b14      	ldr	r3, [pc, #80]	@ (80067d8 <MX_SPI1_Init+0x74>)
 8006786:	2200      	movs	r2, #0
 8006788:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800678a:	4b13      	ldr	r3, [pc, #76]	@ (80067d8 <MX_SPI1_Init+0x74>)
 800678c:	2201      	movs	r2, #1
 800678e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006790:	4b11      	ldr	r3, [pc, #68]	@ (80067d8 <MX_SPI1_Init+0x74>)
 8006792:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006796:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006798:	4b0f      	ldr	r3, [pc, #60]	@ (80067d8 <MX_SPI1_Init+0x74>)
 800679a:	2200      	movs	r2, #0
 800679c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800679e:	4b0e      	ldr	r3, [pc, #56]	@ (80067d8 <MX_SPI1_Init+0x74>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80067a4:	4b0c      	ldr	r3, [pc, #48]	@ (80067d8 <MX_SPI1_Init+0x74>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067aa:	4b0b      	ldr	r3, [pc, #44]	@ (80067d8 <MX_SPI1_Init+0x74>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80067b0:	4b09      	ldr	r3, [pc, #36]	@ (80067d8 <MX_SPI1_Init+0x74>)
 80067b2:	2207      	movs	r2, #7
 80067b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80067b6:	4b08      	ldr	r3, [pc, #32]	@ (80067d8 <MX_SPI1_Init+0x74>)
 80067b8:	2200      	movs	r2, #0
 80067ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80067bc:	4b06      	ldr	r3, [pc, #24]	@ (80067d8 <MX_SPI1_Init+0x74>)
 80067be:	2200      	movs	r2, #0
 80067c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80067c2:	4805      	ldr	r0, [pc, #20]	@ (80067d8 <MX_SPI1_Init+0x74>)
 80067c4:	f005 feb2 	bl	800c52c <HAL_SPI_Init>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80067ce:	f7ff fea3 	bl	8006518 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80067d2:	bf00      	nop
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	20000810 	.word	0x20000810
 80067dc:	40013000 	.word	0x40013000

080067e0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80067e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006854 <MX_SPI2_Init+0x74>)
 80067e6:	4a1c      	ldr	r2, [pc, #112]	@ (8006858 <MX_SPI2_Init+0x78>)
 80067e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80067ea:	4b1a      	ldr	r3, [pc, #104]	@ (8006854 <MX_SPI2_Init+0x74>)
 80067ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80067f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80067f2:	4b18      	ldr	r3, [pc, #96]	@ (8006854 <MX_SPI2_Init+0x74>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80067f8:	4b16      	ldr	r3, [pc, #88]	@ (8006854 <MX_SPI2_Init+0x74>)
 80067fa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80067fe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006800:	4b14      	ldr	r3, [pc, #80]	@ (8006854 <MX_SPI2_Init+0x74>)
 8006802:	2200      	movs	r2, #0
 8006804:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006806:	4b13      	ldr	r3, [pc, #76]	@ (8006854 <MX_SPI2_Init+0x74>)
 8006808:	2200      	movs	r2, #0
 800680a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800680c:	4b11      	ldr	r3, [pc, #68]	@ (8006854 <MX_SPI2_Init+0x74>)
 800680e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006812:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006814:	4b0f      	ldr	r3, [pc, #60]	@ (8006854 <MX_SPI2_Init+0x74>)
 8006816:	2200      	movs	r2, #0
 8006818:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800681a:	4b0e      	ldr	r3, [pc, #56]	@ (8006854 <MX_SPI2_Init+0x74>)
 800681c:	2200      	movs	r2, #0
 800681e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006820:	4b0c      	ldr	r3, [pc, #48]	@ (8006854 <MX_SPI2_Init+0x74>)
 8006822:	2200      	movs	r2, #0
 8006824:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006826:	4b0b      	ldr	r3, [pc, #44]	@ (8006854 <MX_SPI2_Init+0x74>)
 8006828:	2200      	movs	r2, #0
 800682a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800682c:	4b09      	ldr	r3, [pc, #36]	@ (8006854 <MX_SPI2_Init+0x74>)
 800682e:	2207      	movs	r2, #7
 8006830:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006832:	4b08      	ldr	r3, [pc, #32]	@ (8006854 <MX_SPI2_Init+0x74>)
 8006834:	2200      	movs	r2, #0
 8006836:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006838:	4b06      	ldr	r3, [pc, #24]	@ (8006854 <MX_SPI2_Init+0x74>)
 800683a:	2208      	movs	r2, #8
 800683c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800683e:	4805      	ldr	r0, [pc, #20]	@ (8006854 <MX_SPI2_Init+0x74>)
 8006840:	f005 fe74 	bl	800c52c <HAL_SPI_Init>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d001      	beq.n	800684e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800684a:	f7ff fe65 	bl	8006518 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800684e:	bf00      	nop
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	20000874 	.word	0x20000874
 8006858:	40003800 	.word	0x40003800

0800685c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b088      	sub	sp, #32
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006864:	f107 030c 	add.w	r3, r7, #12
 8006868:	2200      	movs	r2, #0
 800686a:	601a      	str	r2, [r3, #0]
 800686c:	605a      	str	r2, [r3, #4]
 800686e:	609a      	str	r2, [r3, #8]
 8006870:	60da      	str	r2, [r3, #12]
 8006872:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a22      	ldr	r2, [pc, #136]	@ (8006904 <HAL_SPI_MspInit+0xa8>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d120      	bne.n	80068c0 <HAL_SPI_MspInit+0x64>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800687e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8006882:	f7ff ff55 	bl	8006730 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006886:	2001      	movs	r0, #1
 8006888:	f7ff ff20 	bl	80066cc <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800688c:	23e0      	movs	r3, #224	@ 0xe0
 800688e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006890:	2302      	movs	r3, #2
 8006892:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006894:	2300      	movs	r3, #0
 8006896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006898:	2300      	movs	r3, #0
 800689a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800689c:	2305      	movs	r3, #5
 800689e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068a0:	f107 030c 	add.w	r3, r7, #12
 80068a4:	4619      	mov	r1, r3
 80068a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80068aa:	f000 fe81 	bl	80075b0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80068ae:	2200      	movs	r2, #0
 80068b0:	2100      	movs	r1, #0
 80068b2:	2022      	movs	r0, #34	@ 0x22
 80068b4:	f000 fdbf 	bl	8007436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80068b8:	2022      	movs	r0, #34	@ 0x22
 80068ba:	f000 fdd6 	bl	800746a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80068be:	e01c      	b.n	80068fa <HAL_SPI_MspInit+0x9e>
  else if(spiHandle->Instance==SPI2)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a10      	ldr	r2, [pc, #64]	@ (8006908 <HAL_SPI_MspInit+0xac>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d117      	bne.n	80068fa <HAL_SPI_MspInit+0x9e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80068ca:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80068ce:	f7ff ff16 	bl	80066fe <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80068d2:	2002      	movs	r0, #2
 80068d4:	f7ff fefa 	bl	80066cc <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80068d8:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80068dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068de:	2302      	movs	r3, #2
 80068e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068e2:	2300      	movs	r3, #0
 80068e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068e6:	2300      	movs	r3, #0
 80068e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80068ea:	2305      	movs	r3, #5
 80068ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068ee:	f107 030c 	add.w	r3, r7, #12
 80068f2:	4619      	mov	r1, r3
 80068f4:	4805      	ldr	r0, [pc, #20]	@ (800690c <HAL_SPI_MspInit+0xb0>)
 80068f6:	f000 fe5b 	bl	80075b0 <HAL_GPIO_Init>
}
 80068fa:	bf00      	nop
 80068fc:	3720      	adds	r7, #32
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	40013000 	.word	0x40013000
 8006908:	40003800 	.word	0x40003800
 800690c:	48000400 	.word	0x48000400

08006910 <LL_AHB3_GRP1_EnableClock>:
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006918:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800691c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800691e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4313      	orrs	r3, r2
 8006926:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006928:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800692c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4013      	ands	r3, r2
 8006932:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006934:	68fb      	ldr	r3, [r7, #12]
}
 8006936:	bf00      	nop
 8006938:	3714      	adds	r7, #20
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr

08006942 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8006946:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800694a:	f7ff ffe1 	bl	8006910 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800694e:	2200      	movs	r2, #0
 8006950:	2100      	movs	r1, #0
 8006952:	202e      	movs	r0, #46	@ 0x2e
 8006954:	f000 fd6f 	bl	8007436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8006958:	202e      	movs	r0, #46	@ 0x2e
 800695a:	f000 fd86 	bl	800746a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800695e:	bf00      	nop
 8006960:	bd80      	pop	{r7, pc}

08006962 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006962:	b480      	push	{r7}
 8006964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006966:	bf00      	nop
 8006968:	e7fd      	b.n	8006966 <NMI_Handler+0x4>

0800696a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800696a:	b480      	push	{r7}
 800696c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800696e:	bf00      	nop
 8006970:	e7fd      	b.n	800696e <HardFault_Handler+0x4>

08006972 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006972:	b480      	push	{r7}
 8006974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006976:	bf00      	nop
 8006978:	e7fd      	b.n	8006976 <MemManage_Handler+0x4>

0800697a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800697a:	b480      	push	{r7}
 800697c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800697e:	bf00      	nop
 8006980:	e7fd      	b.n	800697e <BusFault_Handler+0x4>

08006982 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006982:	b480      	push	{r7}
 8006984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006986:	bf00      	nop
 8006988:	e7fd      	b.n	8006986 <UsageFault_Handler+0x4>

0800698a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800698a:	b480      	push	{r7}
 800698c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800698e:	bf00      	nop
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006998:	b480      	push	{r7}
 800699a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800699c:	bf00      	nop
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr

080069a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80069a6:	b480      	push	{r7}
 80069a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80069aa:	bf00      	nop
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80069b8:	f000 fbca 	bl	8007150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80069bc:	bf00      	nop
 80069be:	bd80      	pop	{r7, pc}

080069c0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80069c4:	f7fe fdc8 	bl	8005558 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80069c8:	bf00      	nop
 80069ca:	bd80      	pop	{r7, pc}

080069cc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80069d0:	4802      	ldr	r0, [pc, #8]	@ (80069dc <USB_LP_IRQHandler+0x10>)
 80069d2:	f002 f9cd 	bl	8008d70 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80069d6:	bf00      	nop
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	20002038 	.word	0x20002038

080069e0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80069e4:	4802      	ldr	r0, [pc, #8]	@ (80069f0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80069e6:	f006 fe35 	bl	800d654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80069ea:	bf00      	nop
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	20000928 	.word	0x20000928

080069f4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80069f8:	4802      	ldr	r0, [pc, #8]	@ (8006a04 <SPI1_IRQHandler+0x10>)
 80069fa:	f006 f9cf 	bl	800cd9c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80069fe:	bf00      	nop
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	20000810 	.word	0x20000810

08006a08 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8006a0c:	f00f f880 	bl	8015b10 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8006a10:	bf00      	nop
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8006a18:	f00f f8b0 	bl	8015b7c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8006a1c:	bf00      	nop
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8006a24:	f000 ff4c 	bl	80078c0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8006a28:	bf00      	nop
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	af00      	add	r7, sp, #0
  return 1;
 8006a30:	2301      	movs	r3, #1
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <_kill>:

int _kill(int pid, int sig)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006a46:	f012 ff0f 	bl	8019868 <__errno>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2216      	movs	r2, #22
 8006a4e:	601a      	str	r2, [r3, #0]
  return -1;
 8006a50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3708      	adds	r7, #8
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <_exit>:

void _exit (int status)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006a64:	f04f 31ff 	mov.w	r1, #4294967295
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f7ff ffe7 	bl	8006a3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8006a6e:	bf00      	nop
 8006a70:	e7fd      	b.n	8006a6e <_exit+0x12>

08006a72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b086      	sub	sp, #24
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	60f8      	str	r0, [r7, #12]
 8006a7a:	60b9      	str	r1, [r7, #8]
 8006a7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a7e:	2300      	movs	r3, #0
 8006a80:	617b      	str	r3, [r7, #20]
 8006a82:	e00a      	b.n	8006a9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006a84:	f3af 8000 	nop.w
 8006a88:	4601      	mov	r1, r0
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	1c5a      	adds	r2, r3, #1
 8006a8e:	60ba      	str	r2, [r7, #8]
 8006a90:	b2ca      	uxtb	r2, r1
 8006a92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	3301      	adds	r3, #1
 8006a98:	617b      	str	r3, [r7, #20]
 8006a9a:	697a      	ldr	r2, [r7, #20]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	dbf0      	blt.n	8006a84 <_read+0x12>
  }

  return len;
 8006aa2:	687b      	ldr	r3, [r7, #4]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3718      	adds	r7, #24
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ab8:	2300      	movs	r3, #0
 8006aba:	617b      	str	r3, [r7, #20]
 8006abc:	e009      	b.n	8006ad2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	1c5a      	adds	r2, r3, #1
 8006ac2:	60ba      	str	r2, [r7, #8]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	617b      	str	r3, [r7, #20]
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	dbf1      	blt.n	8006abe <_write+0x12>
  }
  return len;
 8006ada:	687b      	ldr	r3, [r7, #4]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3718      	adds	r7, #24
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <_close>:

int _close(int file)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006aec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006b0c:	605a      	str	r2, [r3, #4]
  return 0;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <_isatty>:

int _isatty(int file)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006b24:	2301      	movs	r3, #1
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b085      	sub	sp, #20
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	60f8      	str	r0, [r7, #12]
 8006b3a:	60b9      	str	r1, [r7, #8]
 8006b3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3714      	adds	r7, #20
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006b54:	4a14      	ldr	r2, [pc, #80]	@ (8006ba8 <_sbrk+0x5c>)
 8006b56:	4b15      	ldr	r3, [pc, #84]	@ (8006bac <_sbrk+0x60>)
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006b60:	4b13      	ldr	r3, [pc, #76]	@ (8006bb0 <_sbrk+0x64>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d102      	bne.n	8006b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006b68:	4b11      	ldr	r3, [pc, #68]	@ (8006bb0 <_sbrk+0x64>)
 8006b6a:	4a12      	ldr	r2, [pc, #72]	@ (8006bb4 <_sbrk+0x68>)
 8006b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006b6e:	4b10      	ldr	r3, [pc, #64]	@ (8006bb0 <_sbrk+0x64>)
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4413      	add	r3, r2
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d207      	bcs.n	8006b8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006b7c:	f012 fe74 	bl	8019868 <__errno>
 8006b80:	4603      	mov	r3, r0
 8006b82:	220c      	movs	r2, #12
 8006b84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006b86:	f04f 33ff 	mov.w	r3, #4294967295
 8006b8a:	e009      	b.n	8006ba0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006b8c:	4b08      	ldr	r3, [pc, #32]	@ (8006bb0 <_sbrk+0x64>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006b92:	4b07      	ldr	r3, [pc, #28]	@ (8006bb0 <_sbrk+0x64>)
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4413      	add	r3, r2
 8006b9a:	4a05      	ldr	r2, [pc, #20]	@ (8006bb0 <_sbrk+0x64>)
 8006b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3718      	adds	r7, #24
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	20030000 	.word	0x20030000
 8006bac:	00001000 	.word	0x00001000
 8006bb0:	200008d8 	.word	0x200008d8
 8006bb4:	20002720 	.word	0x20002720

08006bb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8006bbc:	4b24      	ldr	r3, [pc, #144]	@ (8006c50 <SystemInit+0x98>)
 8006bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bc2:	4a23      	ldr	r2, [pc, #140]	@ (8006c50 <SystemInit+0x98>)
 8006bc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006bc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006bcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006bd6:	f043 0301 	orr.w	r3, r3, #1
 8006bda:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8006bdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006be0:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8006be4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8006be6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006bf0:	4b18      	ldr	r3, [pc, #96]	@ (8006c54 <SystemInit+0x9c>)
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8006bf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bfe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c02:	f023 0305 	bic.w	r3, r3, #5
 8006c06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8006c0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c16:	f023 0301 	bic.w	r3, r3, #1
 8006c1a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8006c1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c22:	4a0d      	ldr	r2, [pc, #52]	@ (8006c58 <SystemInit+0xa0>)
 8006c24:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8006c26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c2a:	4a0b      	ldr	r2, [pc, #44]	@ (8006c58 <SystemInit+0xa0>)
 8006c2c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006c2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c3c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006c3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c42:	2200      	movs	r2, #0
 8006c44:	619a      	str	r2, [r3, #24]
}
 8006c46:	bf00      	nop
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr
 8006c50:	e000ed00 	.word	0xe000ed00
 8006c54:	faf6fefb 	.word	0xfaf6fefb
 8006c58:	22041000 	.word	0x22041000

08006c5c <LL_AHB2_GRP1_EnableClock>:
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006c64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c68:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006c6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006c74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c78:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006c80:	68fb      	ldr	r3, [r7, #12]
}
 8006c82:	bf00      	nop
 8006c84:	3714      	adds	r7, #20
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr

08006c8e <LL_APB1_GRP1_EnableClock>:
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b085      	sub	sp, #20
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006c96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c9a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006c9c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006ca6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006caa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4013      	ands	r3, r2
 8006cb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
}
 8006cb4:	bf00      	nop
 8006cb6:	3714      	adds	r7, #20
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <LL_APB2_GRP1_EnableClock>:
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8006cc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ccc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006cce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006cd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cdc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
}
 8006ce6:	bf00      	nop
 8006ce8:	3714      	adds	r7, #20
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
	...

08006cf4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b08a      	sub	sp, #40	@ 0x28
 8006cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006cfa:	f107 031c 	add.w	r3, r7, #28
 8006cfe:	2200      	movs	r2, #0
 8006d00:	601a      	str	r2, [r3, #0]
 8006d02:	605a      	str	r2, [r3, #4]
 8006d04:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006d06:	463b      	mov	r3, r7
 8006d08:	2200      	movs	r2, #0
 8006d0a:	601a      	str	r2, [r3, #0]
 8006d0c:	605a      	str	r2, [r3, #4]
 8006d0e:	609a      	str	r2, [r3, #8]
 8006d10:	60da      	str	r2, [r3, #12]
 8006d12:	611a      	str	r2, [r3, #16]
 8006d14:	615a      	str	r2, [r3, #20]
 8006d16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006d18:	4b22      	ldr	r3, [pc, #136]	@ (8006da4 <MX_TIM2_Init+0xb0>)
 8006d1a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006d1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8006d20:	4b20      	ldr	r3, [pc, #128]	@ (8006da4 <MX_TIM2_Init+0xb0>)
 8006d22:	221f      	movs	r2, #31
 8006d24:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d26:	4b1f      	ldr	r3, [pc, #124]	@ (8006da4 <MX_TIM2_Init+0xb0>)
 8006d28:	2200      	movs	r2, #0
 8006d2a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8006d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8006da4 <MX_TIM2_Init+0xb0>)
 8006d2e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006d32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006d34:	4b1b      	ldr	r3, [pc, #108]	@ (8006da4 <MX_TIM2_Init+0xb0>)
 8006d36:	2200      	movs	r2, #0
 8006d38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8006da4 <MX_TIM2_Init+0xb0>)
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8006d40:	4818      	ldr	r0, [pc, #96]	@ (8006da4 <MX_TIM2_Init+0xb0>)
 8006d42:	f006 fb55 	bl	800d3f0 <HAL_TIM_PWM_Init>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d001      	beq.n	8006d50 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8006d4c:	f7ff fbe4 	bl	8006518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006d50:	2300      	movs	r3, #0
 8006d52:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006d54:	2300      	movs	r3, #0
 8006d56:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006d58:	f107 031c 	add.w	r3, r7, #28
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	4811      	ldr	r0, [pc, #68]	@ (8006da4 <MX_TIM2_Init+0xb0>)
 8006d60:	f007 f9ca 	bl	800e0f8 <HAL_TIMEx_MasterConfigSynchronization>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d001      	beq.n	8006d6e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8006d6a:	f7ff fbd5 	bl	8006518 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006d6e:	2360      	movs	r3, #96	@ 0x60
 8006d70:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8006d72:	2300      	movs	r3, #0
 8006d74:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006d76:	2300      	movs	r3, #0
 8006d78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006d7e:	463b      	mov	r3, r7
 8006d80:	2200      	movs	r2, #0
 8006d82:	4619      	mov	r1, r3
 8006d84:	4807      	ldr	r0, [pc, #28]	@ (8006da4 <MX_TIM2_Init+0xb0>)
 8006d86:	f006 fd6d 	bl	800d864 <HAL_TIM_PWM_ConfigChannel>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d001      	beq.n	8006d94 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8006d90:	f7ff fbc2 	bl	8006518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8006d94:	4803      	ldr	r0, [pc, #12]	@ (8006da4 <MX_TIM2_Init+0xb0>)
 8006d96:	f000 f859 	bl	8006e4c <HAL_TIM_MspPostInit>

}
 8006d9a:	bf00      	nop
 8006d9c:	3728      	adds	r7, #40	@ 0x28
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	200008dc 	.word	0x200008dc

08006da8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8006dac:	4b0f      	ldr	r3, [pc, #60]	@ (8006dec <MX_TIM16_Init+0x44>)
 8006dae:	4a10      	ldr	r2, [pc, #64]	@ (8006df0 <MX_TIM16_Init+0x48>)
 8006db0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 8006db2:	4b0e      	ldr	r3, [pc, #56]	@ (8006dec <MX_TIM16_Init+0x44>)
 8006db4:	221f      	movs	r2, #31
 8006db6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006db8:	4b0c      	ldr	r3, [pc, #48]	@ (8006dec <MX_TIM16_Init+0x44>)
 8006dba:	2200      	movs	r2, #0
 8006dbc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 99;
 8006dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8006dec <MX_TIM16_Init+0x44>)
 8006dc0:	2263      	movs	r2, #99	@ 0x63
 8006dc2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006dc4:	4b09      	ldr	r3, [pc, #36]	@ (8006dec <MX_TIM16_Init+0x44>)
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8006dca:	4b08      	ldr	r3, [pc, #32]	@ (8006dec <MX_TIM16_Init+0x44>)
 8006dcc:	2200      	movs	r2, #0
 8006dce:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006dd0:	4b06      	ldr	r3, [pc, #24]	@ (8006dec <MX_TIM16_Init+0x44>)
 8006dd2:	2280      	movs	r2, #128	@ 0x80
 8006dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8006dd6:	4805      	ldr	r0, [pc, #20]	@ (8006dec <MX_TIM16_Init+0x44>)
 8006dd8:	f006 fa64 	bl	800d2a4 <HAL_TIM_Base_Init>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d001      	beq.n	8006de6 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8006de2:	f7ff fb99 	bl	8006518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8006de6:	bf00      	nop
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	20000928 	.word	0x20000928
 8006df0:	40014400 	.word	0x40014400

08006df4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e04:	d102      	bne.n	8006e0c <HAL_TIM_PWM_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006e06:	2001      	movs	r0, #1
 8006e08:	f7ff ff41 	bl	8006c8e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8006e0c:	bf00      	nop
 8006e0e:	3708      	adds	r7, #8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a09      	ldr	r2, [pc, #36]	@ (8006e48 <HAL_TIM_Base_MspInit+0x34>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d10b      	bne.n	8006e3e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8006e26:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8006e2a:	f7ff ff49 	bl	8006cc0 <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8006e2e:	2200      	movs	r2, #0
 8006e30:	2100      	movs	r1, #0
 8006e32:	2019      	movs	r0, #25
 8006e34:	f000 faff 	bl	8007436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006e38:	2019      	movs	r0, #25
 8006e3a:	f000 fb16 	bl	800746a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8006e3e:	bf00      	nop
 8006e40:	3708      	adds	r7, #8
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	40014400 	.word	0x40014400

08006e4c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b088      	sub	sp, #32
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e54:	f107 030c 	add.w	r3, r7, #12
 8006e58:	2200      	movs	r2, #0
 8006e5a:	601a      	str	r2, [r3, #0]
 8006e5c:	605a      	str	r2, [r3, #4]
 8006e5e:	609a      	str	r2, [r3, #8]
 8006e60:	60da      	str	r2, [r3, #12]
 8006e62:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e6c:	d113      	bne.n	8006e96 <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e6e:	2001      	movs	r0, #1
 8006e70:	f7ff fef4 	bl	8006c5c <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TFT_BACKLIGHT_Pin;
 8006e74:	2301      	movs	r3, #1
 8006e76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e78:	2302      	movs	r3, #2
 8006e7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e80:	2300      	movs	r3, #0
 8006e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006e84:	2301      	movs	r3, #1
 8006e86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TFT_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 8006e88:	f107 030c 	add.w	r3, r7, #12
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006e92:	f000 fb8d 	bl	80075b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8006e96:	bf00      	nop
 8006e98:	3720      	adds	r7, #32
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <LL_AHB2_GRP1_EnableClock>:
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	b085      	sub	sp, #20
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006ea6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006eaa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006eac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006eb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006eba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
}
 8006ec4:	bf00      	nop
 8006ec6:	3714      	adds	r7, #20
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <LL_APB2_GRP1_EnableClock>:
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8006ed8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006edc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006ede:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006ee8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006eec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
}
 8006ef6:	bf00      	nop
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
	...

08006f04 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006f08:	4b22      	ldr	r3, [pc, #136]	@ (8006f94 <MX_USART1_UART_Init+0x90>)
 8006f0a:	4a23      	ldr	r2, [pc, #140]	@ (8006f98 <MX_USART1_UART_Init+0x94>)
 8006f0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006f0e:	4b21      	ldr	r3, [pc, #132]	@ (8006f94 <MX_USART1_UART_Init+0x90>)
 8006f10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006f14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006f16:	4b1f      	ldr	r3, [pc, #124]	@ (8006f94 <MX_USART1_UART_Init+0x90>)
 8006f18:	2200      	movs	r2, #0
 8006f1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006f1c:	4b1d      	ldr	r3, [pc, #116]	@ (8006f94 <MX_USART1_UART_Init+0x90>)
 8006f1e:	2200      	movs	r2, #0
 8006f20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006f22:	4b1c      	ldr	r3, [pc, #112]	@ (8006f94 <MX_USART1_UART_Init+0x90>)
 8006f24:	2200      	movs	r2, #0
 8006f26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006f28:	4b1a      	ldr	r3, [pc, #104]	@ (8006f94 <MX_USART1_UART_Init+0x90>)
 8006f2a:	220c      	movs	r2, #12
 8006f2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006f2e:	4b19      	ldr	r3, [pc, #100]	@ (8006f94 <MX_USART1_UART_Init+0x90>)
 8006f30:	2200      	movs	r2, #0
 8006f32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006f34:	4b17      	ldr	r3, [pc, #92]	@ (8006f94 <MX_USART1_UART_Init+0x90>)
 8006f36:	2200      	movs	r2, #0
 8006f38:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006f3a:	4b16      	ldr	r3, [pc, #88]	@ (8006f94 <MX_USART1_UART_Init+0x90>)
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006f40:	4b14      	ldr	r3, [pc, #80]	@ (8006f94 <MX_USART1_UART_Init+0x90>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006f46:	4b13      	ldr	r3, [pc, #76]	@ (8006f94 <MX_USART1_UART_Init+0x90>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006f4c:	4811      	ldr	r0, [pc, #68]	@ (8006f94 <MX_USART1_UART_Init+0x90>)
 8006f4e:	f007 f971 	bl	800e234 <HAL_UART_Init>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d001      	beq.n	8006f5c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8006f58:	f7ff fade 	bl	8006518 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	480d      	ldr	r0, [pc, #52]	@ (8006f94 <MX_USART1_UART_Init+0x90>)
 8006f60:	f007 ffa2 	bl	800eea8 <HAL_UARTEx_SetTxFifoThreshold>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d001      	beq.n	8006f6e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006f6a:	f7ff fad5 	bl	8006518 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006f6e:	2100      	movs	r1, #0
 8006f70:	4808      	ldr	r0, [pc, #32]	@ (8006f94 <MX_USART1_UART_Init+0x90>)
 8006f72:	f007 ffd7 	bl	800ef24 <HAL_UARTEx_SetRxFifoThreshold>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d001      	beq.n	8006f80 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006f7c:	f7ff facc 	bl	8006518 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006f80:	4804      	ldr	r0, [pc, #16]	@ (8006f94 <MX_USART1_UART_Init+0x90>)
 8006f82:	f007 ff58 	bl	800ee36 <HAL_UARTEx_DisableFifoMode>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d001      	beq.n	8006f90 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006f8c:	f7ff fac4 	bl	8006518 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006f90:	bf00      	nop
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	20000974 	.word	0x20000974
 8006f98:	40013800 	.word	0x40013800

08006f9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b09c      	sub	sp, #112	@ 0x70
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fa4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006fa8:	2200      	movs	r2, #0
 8006faa:	601a      	str	r2, [r3, #0]
 8006fac:	605a      	str	r2, [r3, #4]
 8006fae:	609a      	str	r2, [r3, #8]
 8006fb0:	60da      	str	r2, [r3, #12]
 8006fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006fb4:	f107 030c 	add.w	r3, r7, #12
 8006fb8:	2250      	movs	r2, #80	@ 0x50
 8006fba:	2100      	movs	r1, #0
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f012 fbac 	bl	801971a <memset>
  if(uartHandle->Instance==USART1)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a16      	ldr	r2, [pc, #88]	@ (8007020 <HAL_UART_MspInit+0x84>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d124      	bne.n	8007016 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006fd4:	f107 030c 	add.w	r3, r7, #12
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f004 fe3f 	bl	800bc5c <HAL_RCCEx_PeriphCLKConfig>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d001      	beq.n	8006fe8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8006fe4:	f7ff fa98 	bl	8006518 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006fe8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8006fec:	f7ff ff70 	bl	8006ed0 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ff0:	2002      	movs	r0, #2
 8006ff2:	f7ff ff54 	bl	8006e9e <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006ff6:	23c0      	movs	r3, #192	@ 0xc0
 8006ff8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ffa:	2302      	movs	r3, #2
 8006ffc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ffe:	2300      	movs	r3, #0
 8007000:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007002:	2300      	movs	r3, #0
 8007004:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007006:	2307      	movs	r3, #7
 8007008:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800700a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800700e:	4619      	mov	r1, r3
 8007010:	4804      	ldr	r0, [pc, #16]	@ (8007024 <HAL_UART_MspInit+0x88>)
 8007012:	f000 facd 	bl	80075b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8007016:	bf00      	nop
 8007018:	3770      	adds	r7, #112	@ 0x70
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	40013800 	.word	0x40013800
 8007024:	48000400 	.word	0x48000400

08007028 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8007028:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800702a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800702c:	3304      	adds	r3, #4

0800702e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800702e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007030:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8007032:	d3f9      	bcc.n	8007028 <CopyDataInit>
  bx lr
 8007034:	4770      	bx	lr

08007036 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8007036:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8007038:	3004      	adds	r0, #4

0800703a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800703a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800703c:	d3fb      	bcc.n	8007036 <FillZerobss>
  bx lr
 800703e:	4770      	bx	lr

08007040 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007040:	480c      	ldr	r0, [pc, #48]	@ (8007074 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007042:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8007044:	f7ff fdb8 	bl	8006bb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8007048:	480b      	ldr	r0, [pc, #44]	@ (8007078 <LoopForever+0x6>)
 800704a:	490c      	ldr	r1, [pc, #48]	@ (800707c <LoopForever+0xa>)
 800704c:	4a0c      	ldr	r2, [pc, #48]	@ (8007080 <LoopForever+0xe>)
 800704e:	2300      	movs	r3, #0
 8007050:	f7ff ffed 	bl	800702e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8007054:	480b      	ldr	r0, [pc, #44]	@ (8007084 <LoopForever+0x12>)
 8007056:	490c      	ldr	r1, [pc, #48]	@ (8007088 <LoopForever+0x16>)
 8007058:	4a0c      	ldr	r2, [pc, #48]	@ (800708c <LoopForever+0x1a>)
 800705a:	2300      	movs	r3, #0
 800705c:	f7ff ffe7 	bl	800702e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8007060:	480b      	ldr	r0, [pc, #44]	@ (8007090 <LoopForever+0x1e>)
 8007062:	490c      	ldr	r1, [pc, #48]	@ (8007094 <LoopForever+0x22>)
 8007064:	2300      	movs	r3, #0
 8007066:	f7ff ffe8 	bl	800703a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800706a:	f012 fc03 	bl	8019874 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800706e:	f7ff f92d 	bl	80062cc <main>

08007072 <LoopForever>:

LoopForever:
  b LoopForever
 8007072:	e7fe      	b.n	8007072 <LoopForever>
  ldr   r0, =_estack
 8007074:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8007078:	20000008 	.word	0x20000008
 800707c:	2000030c 	.word	0x2000030c
 8007080:	0801cfd4 	.word	0x0801cfd4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8007084:	200301e4 	.word	0x200301e4
 8007088:	20030a67 	.word	0x20030a67
 800708c:	0801d31e 	.word	0x0801d31e
  INIT_BSS _sbss, _ebss
 8007090:	20000358 	.word	0x20000358
 8007094:	20002720 	.word	0x20002720

08007098 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007098:	e7fe      	b.n	8007098 <ADC1_IRQHandler>
	...

0800709c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80070a2:	2300      	movs	r3, #0
 80070a4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80070a6:	4b0c      	ldr	r3, [pc, #48]	@ (80070d8 <HAL_Init+0x3c>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a0b      	ldr	r2, [pc, #44]	@ (80070d8 <HAL_Init+0x3c>)
 80070ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070b0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80070b2:	2003      	movs	r0, #3
 80070b4:	f000 f9b4 	bl	8007420 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80070b8:	200f      	movs	r0, #15
 80070ba:	f000 f80f 	bl	80070dc <HAL_InitTick>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d002      	beq.n	80070ca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	71fb      	strb	r3, [r7, #7]
 80070c8:	e001      	b.n	80070ce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80070ca:	f7ff fc3a 	bl	8006942 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80070ce:	79fb      	ldrb	r3, [r7, #7]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3708      	adds	r7, #8
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	58004000 	.word	0x58004000

080070dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80070e4:	2300      	movs	r3, #0
 80070e6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80070e8:	4b17      	ldr	r3, [pc, #92]	@ (8007148 <HAL_InitTick+0x6c>)
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d024      	beq.n	800713a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80070f0:	f004 fb14 	bl	800b71c <HAL_RCC_GetHCLKFreq>
 80070f4:	4602      	mov	r2, r0
 80070f6:	4b14      	ldr	r3, [pc, #80]	@ (8007148 <HAL_InitTick+0x6c>)
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	4619      	mov	r1, r3
 80070fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007100:	fbb3 f3f1 	udiv	r3, r3, r1
 8007104:	fbb2 f3f3 	udiv	r3, r2, r3
 8007108:	4618      	mov	r0, r3
 800710a:	f000 f9ca 	bl	80074a2 <HAL_SYSTICK_Config>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10f      	bne.n	8007134 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b0f      	cmp	r3, #15
 8007118:	d809      	bhi.n	800712e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800711a:	2200      	movs	r2, #0
 800711c:	6879      	ldr	r1, [r7, #4]
 800711e:	f04f 30ff 	mov.w	r0, #4294967295
 8007122:	f000 f988 	bl	8007436 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007126:	4a09      	ldr	r2, [pc, #36]	@ (800714c <HAL_InitTick+0x70>)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6013      	str	r3, [r2, #0]
 800712c:	e007      	b.n	800713e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	73fb      	strb	r3, [r7, #15]
 8007132:	e004      	b.n	800713e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	73fb      	strb	r3, [r7, #15]
 8007138:	e001      	b.n	800713e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800713e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	2000002c 	.word	0x2000002c
 800714c:	20000028 	.word	0x20000028

08007150 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007150:	b480      	push	{r7}
 8007152:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007154:	4b06      	ldr	r3, [pc, #24]	@ (8007170 <HAL_IncTick+0x20>)
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	461a      	mov	r2, r3
 800715a:	4b06      	ldr	r3, [pc, #24]	@ (8007174 <HAL_IncTick+0x24>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4413      	add	r3, r2
 8007160:	4a04      	ldr	r2, [pc, #16]	@ (8007174 <HAL_IncTick+0x24>)
 8007162:	6013      	str	r3, [r2, #0]
}
 8007164:	bf00      	nop
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	2000002c 	.word	0x2000002c
 8007174:	20000a40 	.word	0x20000a40

08007178 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007178:	b480      	push	{r7}
 800717a:	af00      	add	r7, sp, #0
  return uwTick;
 800717c:	4b03      	ldr	r3, [pc, #12]	@ (800718c <HAL_GetTick+0x14>)
 800717e:	681b      	ldr	r3, [r3, #0]
}
 8007180:	4618      	mov	r0, r3
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	20000a40 	.word	0x20000a40

08007190 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8007190:	b480      	push	{r7}
 8007192:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8007194:	4b03      	ldr	r3, [pc, #12]	@ (80071a4 <HAL_GetTickPrio+0x14>)
 8007196:	681b      	ldr	r3, [r3, #0]
}
 8007198:	4618      	mov	r0, r3
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	20000028 	.word	0x20000028

080071a8 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80071a8:	b480      	push	{r7}
 80071aa:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80071ac:	4b03      	ldr	r3, [pc, #12]	@ (80071bc <HAL_GetTickFreq+0x14>)
 80071ae:	781b      	ldrb	r3, [r3, #0]
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	2000002c 	.word	0x2000002c

080071c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f003 0307 	and.w	r3, r3, #7
 80071ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80071d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007204 <__NVIC_SetPriorityGrouping+0x44>)
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80071dc:	4013      	ands	r3, r2
 80071de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80071e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80071ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80071f2:	4a04      	ldr	r2, [pc, #16]	@ (8007204 <__NVIC_SetPriorityGrouping+0x44>)
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	60d3      	str	r3, [r2, #12]
}
 80071f8:	bf00      	nop
 80071fa:	3714      	adds	r7, #20
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr
 8007204:	e000ed00 	.word	0xe000ed00

08007208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007208:	b480      	push	{r7}
 800720a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800720c:	4b04      	ldr	r3, [pc, #16]	@ (8007220 <__NVIC_GetPriorityGrouping+0x18>)
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	0a1b      	lsrs	r3, r3, #8
 8007212:	f003 0307 	and.w	r3, r3, #7
}
 8007216:	4618      	mov	r0, r3
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr
 8007220:	e000ed00 	.word	0xe000ed00

08007224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	4603      	mov	r3, r0
 800722c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800722e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007232:	2b00      	cmp	r3, #0
 8007234:	db0b      	blt.n	800724e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007236:	79fb      	ldrb	r3, [r7, #7]
 8007238:	f003 021f 	and.w	r2, r3, #31
 800723c:	4907      	ldr	r1, [pc, #28]	@ (800725c <__NVIC_EnableIRQ+0x38>)
 800723e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007242:	095b      	lsrs	r3, r3, #5
 8007244:	2001      	movs	r0, #1
 8007246:	fa00 f202 	lsl.w	r2, r0, r2
 800724a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800724e:	bf00      	nop
 8007250:	370c      	adds	r7, #12
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	e000e100 	.word	0xe000e100

08007260 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	4603      	mov	r3, r0
 8007268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800726a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800726e:	2b00      	cmp	r3, #0
 8007270:	db12      	blt.n	8007298 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007272:	79fb      	ldrb	r3, [r7, #7]
 8007274:	f003 021f 	and.w	r2, r3, #31
 8007278:	490a      	ldr	r1, [pc, #40]	@ (80072a4 <__NVIC_DisableIRQ+0x44>)
 800727a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800727e:	095b      	lsrs	r3, r3, #5
 8007280:	2001      	movs	r0, #1
 8007282:	fa00 f202 	lsl.w	r2, r0, r2
 8007286:	3320      	adds	r3, #32
 8007288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800728c:	f3bf 8f4f 	dsb	sy
}
 8007290:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007292:	f3bf 8f6f 	isb	sy
}
 8007296:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr
 80072a4:	e000e100 	.word	0xe000e100

080072a8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	4603      	mov	r3, r0
 80072b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	db0c      	blt.n	80072d4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80072ba:	79fb      	ldrb	r3, [r7, #7]
 80072bc:	f003 021f 	and.w	r2, r3, #31
 80072c0:	4907      	ldr	r1, [pc, #28]	@ (80072e0 <__NVIC_SetPendingIRQ+0x38>)
 80072c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072c6:	095b      	lsrs	r3, r3, #5
 80072c8:	2001      	movs	r0, #1
 80072ca:	fa00 f202 	lsl.w	r2, r0, r2
 80072ce:	3340      	adds	r3, #64	@ 0x40
 80072d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80072d4:	bf00      	nop
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr
 80072e0:	e000e100 	.word	0xe000e100

080072e4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	4603      	mov	r3, r0
 80072ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	db0c      	blt.n	8007310 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80072f6:	79fb      	ldrb	r3, [r7, #7]
 80072f8:	f003 021f 	and.w	r2, r3, #31
 80072fc:	4907      	ldr	r1, [pc, #28]	@ (800731c <__NVIC_ClearPendingIRQ+0x38>)
 80072fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007302:	095b      	lsrs	r3, r3, #5
 8007304:	2001      	movs	r0, #1
 8007306:	fa00 f202 	lsl.w	r2, r0, r2
 800730a:	3360      	adds	r3, #96	@ 0x60
 800730c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007310:	bf00      	nop
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr
 800731c:	e000e100 	.word	0xe000e100

08007320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	4603      	mov	r3, r0
 8007328:	6039      	str	r1, [r7, #0]
 800732a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800732c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007330:	2b00      	cmp	r3, #0
 8007332:	db0a      	blt.n	800734a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	b2da      	uxtb	r2, r3
 8007338:	490c      	ldr	r1, [pc, #48]	@ (800736c <__NVIC_SetPriority+0x4c>)
 800733a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800733e:	0112      	lsls	r2, r2, #4
 8007340:	b2d2      	uxtb	r2, r2
 8007342:	440b      	add	r3, r1
 8007344:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007348:	e00a      	b.n	8007360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	b2da      	uxtb	r2, r3
 800734e:	4908      	ldr	r1, [pc, #32]	@ (8007370 <__NVIC_SetPriority+0x50>)
 8007350:	79fb      	ldrb	r3, [r7, #7]
 8007352:	f003 030f 	and.w	r3, r3, #15
 8007356:	3b04      	subs	r3, #4
 8007358:	0112      	lsls	r2, r2, #4
 800735a:	b2d2      	uxtb	r2, r2
 800735c:	440b      	add	r3, r1
 800735e:	761a      	strb	r2, [r3, #24]
}
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr
 800736c:	e000e100 	.word	0xe000e100
 8007370:	e000ed00 	.word	0xe000ed00

08007374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007374:	b480      	push	{r7}
 8007376:	b089      	sub	sp, #36	@ 0x24
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f003 0307 	and.w	r3, r3, #7
 8007386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	f1c3 0307 	rsb	r3, r3, #7
 800738e:	2b04      	cmp	r3, #4
 8007390:	bf28      	it	cs
 8007392:	2304      	movcs	r3, #4
 8007394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	3304      	adds	r3, #4
 800739a:	2b06      	cmp	r3, #6
 800739c:	d902      	bls.n	80073a4 <NVIC_EncodePriority+0x30>
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	3b03      	subs	r3, #3
 80073a2:	e000      	b.n	80073a6 <NVIC_EncodePriority+0x32>
 80073a4:	2300      	movs	r3, #0
 80073a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073a8:	f04f 32ff 	mov.w	r2, #4294967295
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	fa02 f303 	lsl.w	r3, r2, r3
 80073b2:	43da      	mvns	r2, r3
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	401a      	ands	r2, r3
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80073bc:	f04f 31ff 	mov.w	r1, #4294967295
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	fa01 f303 	lsl.w	r3, r1, r3
 80073c6:	43d9      	mvns	r1, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073cc:	4313      	orrs	r3, r2
         );
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3724      	adds	r7, #36	@ 0x24
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
	...

080073dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	3b01      	subs	r3, #1
 80073e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80073ec:	d301      	bcc.n	80073f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80073ee:	2301      	movs	r3, #1
 80073f0:	e00f      	b.n	8007412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80073f2:	4a0a      	ldr	r2, [pc, #40]	@ (800741c <SysTick_Config+0x40>)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	3b01      	subs	r3, #1
 80073f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80073fa:	210f      	movs	r1, #15
 80073fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007400:	f7ff ff8e 	bl	8007320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007404:	4b05      	ldr	r3, [pc, #20]	@ (800741c <SysTick_Config+0x40>)
 8007406:	2200      	movs	r2, #0
 8007408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800740a:	4b04      	ldr	r3, [pc, #16]	@ (800741c <SysTick_Config+0x40>)
 800740c:	2207      	movs	r2, #7
 800740e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3708      	adds	r7, #8
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	e000e010 	.word	0xe000e010

08007420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f7ff fec9 	bl	80071c0 <__NVIC_SetPriorityGrouping>
}
 800742e:	bf00      	nop
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b086      	sub	sp, #24
 800743a:	af00      	add	r7, sp, #0
 800743c:	4603      	mov	r3, r0
 800743e:	60b9      	str	r1, [r7, #8]
 8007440:	607a      	str	r2, [r7, #4]
 8007442:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007444:	f7ff fee0 	bl	8007208 <__NVIC_GetPriorityGrouping>
 8007448:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	68b9      	ldr	r1, [r7, #8]
 800744e:	6978      	ldr	r0, [r7, #20]
 8007450:	f7ff ff90 	bl	8007374 <NVIC_EncodePriority>
 8007454:	4602      	mov	r2, r0
 8007456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800745a:	4611      	mov	r1, r2
 800745c:	4618      	mov	r0, r3
 800745e:	f7ff ff5f 	bl	8007320 <__NVIC_SetPriority>
}
 8007462:	bf00      	nop
 8007464:	3718      	adds	r7, #24
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b082      	sub	sp, #8
 800746e:	af00      	add	r7, sp, #0
 8007470:	4603      	mov	r3, r0
 8007472:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007478:	4618      	mov	r0, r3
 800747a:	f7ff fed3 	bl	8007224 <__NVIC_EnableIRQ>
}
 800747e:	bf00      	nop
 8007480:	3708      	adds	r7, #8
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b082      	sub	sp, #8
 800748a:	af00      	add	r7, sp, #0
 800748c:	4603      	mov	r3, r0
 800748e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007494:	4618      	mov	r0, r3
 8007496:	f7ff fee3 	bl	8007260 <__NVIC_DisableIRQ>
}
 800749a:	bf00      	nop
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b082      	sub	sp, #8
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7ff ff96 	bl	80073dc <SysTick_Config>
 80074b0:	4603      	mov	r3, r0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3708      	adds	r7, #8
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b082      	sub	sp, #8
 80074be:	af00      	add	r7, sp, #0
 80074c0:	4603      	mov	r3, r0
 80074c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80074c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074c8:	4618      	mov	r0, r3
 80074ca:	f7ff feed 	bl	80072a8 <__NVIC_SetPendingIRQ>
}
 80074ce:	bf00      	nop
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b082      	sub	sp, #8
 80074da:	af00      	add	r7, sp, #0
 80074dc:	4603      	mov	r3, r0
 80074de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80074e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7ff fefd 	bl	80072e4 <__NVIC_ClearPendingIRQ>
}
 80074ea:	bf00      	nop
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b084      	sub	sp, #16
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074fa:	2300      	movs	r3, #0
 80074fc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b02      	cmp	r3, #2
 8007508:	d005      	beq.n	8007516 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2204      	movs	r2, #4
 800750e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	73fb      	strb	r3, [r7, #15]
 8007514:	e047      	b.n	80075a6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f022 020e 	bic.w	r2, r2, #14
 8007524:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f022 0201 	bic.w	r2, r2, #1
 8007534:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007540:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007544:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800754a:	f003 021c 	and.w	r2, r3, #28
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007552:	2101      	movs	r1, #1
 8007554:	fa01 f202 	lsl.w	r2, r1, r2
 8007558:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007562:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00c      	beq.n	8007586 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007576:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800757a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007584:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2201      	movs	r2, #1
 800758a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800759a:	2b00      	cmp	r3, #0
 800759c:	d003      	beq.n	80075a6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	4798      	blx	r3
    }
  }
  return status;
 80075a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3710      	adds	r7, #16
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b087      	sub	sp, #28
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80075ba:	2300      	movs	r3, #0
 80075bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80075be:	e14c      	b.n	800785a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	2101      	movs	r1, #1
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	fa01 f303 	lsl.w	r3, r1, r3
 80075cc:	4013      	ands	r3, r2
 80075ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f000 813e 	beq.w	8007854 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	f003 0303 	and.w	r3, r3, #3
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d005      	beq.n	80075f0 <HAL_GPIO_Init+0x40>
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	f003 0303 	and.w	r3, r3, #3
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d130      	bne.n	8007652 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	005b      	lsls	r3, r3, #1
 80075fa:	2203      	movs	r2, #3
 80075fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007600:	43db      	mvns	r3, r3
 8007602:	693a      	ldr	r2, [r7, #16]
 8007604:	4013      	ands	r3, r2
 8007606:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	68da      	ldr	r2, [r3, #12]
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	005b      	lsls	r3, r3, #1
 8007610:	fa02 f303 	lsl.w	r3, r2, r3
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	4313      	orrs	r3, r2
 8007618:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007626:	2201      	movs	r2, #1
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	fa02 f303 	lsl.w	r3, r2, r3
 800762e:	43db      	mvns	r3, r3
 8007630:	693a      	ldr	r2, [r7, #16]
 8007632:	4013      	ands	r3, r2
 8007634:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	091b      	lsrs	r3, r3, #4
 800763c:	f003 0201 	and.w	r2, r3, #1
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	fa02 f303 	lsl.w	r3, r2, r3
 8007646:	693a      	ldr	r2, [r7, #16]
 8007648:	4313      	orrs	r3, r2
 800764a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	693a      	ldr	r2, [r7, #16]
 8007650:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	f003 0303 	and.w	r3, r3, #3
 800765a:	2b03      	cmp	r3, #3
 800765c:	d017      	beq.n	800768e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	005b      	lsls	r3, r3, #1
 8007668:	2203      	movs	r2, #3
 800766a:	fa02 f303 	lsl.w	r3, r2, r3
 800766e:	43db      	mvns	r3, r3
 8007670:	693a      	ldr	r2, [r7, #16]
 8007672:	4013      	ands	r3, r2
 8007674:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	689a      	ldr	r2, [r3, #8]
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	005b      	lsls	r3, r3, #1
 800767e:	fa02 f303 	lsl.w	r3, r2, r3
 8007682:	693a      	ldr	r2, [r7, #16]
 8007684:	4313      	orrs	r3, r2
 8007686:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	693a      	ldr	r2, [r7, #16]
 800768c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	f003 0303 	and.w	r3, r3, #3
 8007696:	2b02      	cmp	r3, #2
 8007698:	d123      	bne.n	80076e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	08da      	lsrs	r2, r3, #3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	3208      	adds	r2, #8
 80076a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	f003 0307 	and.w	r3, r3, #7
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	220f      	movs	r2, #15
 80076b2:	fa02 f303 	lsl.w	r3, r2, r3
 80076b6:	43db      	mvns	r3, r3
 80076b8:	693a      	ldr	r2, [r7, #16]
 80076ba:	4013      	ands	r3, r2
 80076bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	691a      	ldr	r2, [r3, #16]
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	f003 0307 	and.w	r3, r3, #7
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	fa02 f303 	lsl.w	r3, r2, r3
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	08da      	lsrs	r2, r3, #3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	3208      	adds	r2, #8
 80076dc:	6939      	ldr	r1, [r7, #16]
 80076de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	005b      	lsls	r3, r3, #1
 80076ec:	2203      	movs	r2, #3
 80076ee:	fa02 f303 	lsl.w	r3, r2, r3
 80076f2:	43db      	mvns	r3, r3
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	4013      	ands	r3, r2
 80076f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f003 0203 	and.w	r2, r3, #3
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	005b      	lsls	r3, r3, #1
 8007706:	fa02 f303 	lsl.w	r3, r2, r3
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	4313      	orrs	r3, r2
 800770e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	693a      	ldr	r2, [r7, #16]
 8007714:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800771e:	2b00      	cmp	r3, #0
 8007720:	f000 8098 	beq.w	8007854 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8007724:	4a54      	ldr	r2, [pc, #336]	@ (8007878 <HAL_GPIO_Init+0x2c8>)
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	089b      	lsrs	r3, r3, #2
 800772a:	3302      	adds	r3, #2
 800772c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007730:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	f003 0303 	and.w	r3, r3, #3
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	220f      	movs	r2, #15
 800773c:	fa02 f303 	lsl.w	r3, r2, r3
 8007740:	43db      	mvns	r3, r3
 8007742:	693a      	ldr	r2, [r7, #16]
 8007744:	4013      	ands	r3, r2
 8007746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800774e:	d019      	beq.n	8007784 <HAL_GPIO_Init+0x1d4>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a4a      	ldr	r2, [pc, #296]	@ (800787c <HAL_GPIO_Init+0x2cc>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d013      	beq.n	8007780 <HAL_GPIO_Init+0x1d0>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a49      	ldr	r2, [pc, #292]	@ (8007880 <HAL_GPIO_Init+0x2d0>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d00d      	beq.n	800777c <HAL_GPIO_Init+0x1cc>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a48      	ldr	r2, [pc, #288]	@ (8007884 <HAL_GPIO_Init+0x2d4>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d007      	beq.n	8007778 <HAL_GPIO_Init+0x1c8>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a47      	ldr	r2, [pc, #284]	@ (8007888 <HAL_GPIO_Init+0x2d8>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d101      	bne.n	8007774 <HAL_GPIO_Init+0x1c4>
 8007770:	2304      	movs	r3, #4
 8007772:	e008      	b.n	8007786 <HAL_GPIO_Init+0x1d6>
 8007774:	2307      	movs	r3, #7
 8007776:	e006      	b.n	8007786 <HAL_GPIO_Init+0x1d6>
 8007778:	2303      	movs	r3, #3
 800777a:	e004      	b.n	8007786 <HAL_GPIO_Init+0x1d6>
 800777c:	2302      	movs	r3, #2
 800777e:	e002      	b.n	8007786 <HAL_GPIO_Init+0x1d6>
 8007780:	2301      	movs	r3, #1
 8007782:	e000      	b.n	8007786 <HAL_GPIO_Init+0x1d6>
 8007784:	2300      	movs	r3, #0
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	f002 0203 	and.w	r2, r2, #3
 800778c:	0092      	lsls	r2, r2, #2
 800778e:	4093      	lsls	r3, r2
 8007790:	693a      	ldr	r2, [r7, #16]
 8007792:	4313      	orrs	r3, r2
 8007794:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007796:	4938      	ldr	r1, [pc, #224]	@ (8007878 <HAL_GPIO_Init+0x2c8>)
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	089b      	lsrs	r3, r3, #2
 800779c:	3302      	adds	r3, #2
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80077a4:	4b39      	ldr	r3, [pc, #228]	@ (800788c <HAL_GPIO_Init+0x2dc>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	43db      	mvns	r3, r3
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	4013      	ands	r3, r2
 80077b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d003      	beq.n	80077c8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80077c0:	693a      	ldr	r2, [r7, #16]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80077c8:	4a30      	ldr	r2, [pc, #192]	@ (800788c <HAL_GPIO_Init+0x2dc>)
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80077ce:	4b2f      	ldr	r3, [pc, #188]	@ (800788c <HAL_GPIO_Init+0x2dc>)
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	43db      	mvns	r3, r3
 80077d8:	693a      	ldr	r2, [r7, #16]
 80077da:	4013      	ands	r3, r2
 80077dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d003      	beq.n	80077f2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80077ea:	693a      	ldr	r2, [r7, #16]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80077f2:	4a26      	ldr	r2, [pc, #152]	@ (800788c <HAL_GPIO_Init+0x2dc>)
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80077f8:	4b24      	ldr	r3, [pc, #144]	@ (800788c <HAL_GPIO_Init+0x2dc>)
 80077fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	43db      	mvns	r3, r3
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	4013      	ands	r3, r2
 8007808:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007812:	2b00      	cmp	r3, #0
 8007814:	d003      	beq.n	800781e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8007816:	693a      	ldr	r2, [r7, #16]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	4313      	orrs	r3, r2
 800781c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800781e:	4a1b      	ldr	r2, [pc, #108]	@ (800788c <HAL_GPIO_Init+0x2dc>)
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8007826:	4b19      	ldr	r3, [pc, #100]	@ (800788c <HAL_GPIO_Init+0x2dc>)
 8007828:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800782c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	43db      	mvns	r3, r3
 8007832:	693a      	ldr	r2, [r7, #16]
 8007834:	4013      	ands	r3, r2
 8007836:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d003      	beq.n	800784c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8007844:	693a      	ldr	r2, [r7, #16]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	4313      	orrs	r3, r2
 800784a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800784c:	4a0f      	ldr	r2, [pc, #60]	@ (800788c <HAL_GPIO_Init+0x2dc>)
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	3301      	adds	r3, #1
 8007858:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	fa22 f303 	lsr.w	r3, r2, r3
 8007864:	2b00      	cmp	r3, #0
 8007866:	f47f aeab 	bne.w	80075c0 <HAL_GPIO_Init+0x10>
  }
}
 800786a:	bf00      	nop
 800786c:	bf00      	nop
 800786e:	371c      	adds	r7, #28
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr
 8007878:	40010000 	.word	0x40010000
 800787c:	48000400 	.word	0x48000400
 8007880:	48000800 	.word	0x48000800
 8007884:	48000c00 	.word	0x48000c00
 8007888:	48001000 	.word	0x48001000
 800788c:	58000800 	.word	0x58000800

08007890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	460b      	mov	r3, r1
 800789a:	807b      	strh	r3, [r7, #2]
 800789c:	4613      	mov	r3, r2
 800789e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80078a0:	787b      	ldrb	r3, [r7, #1]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d003      	beq.n	80078ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80078a6:	887a      	ldrh	r2, [r7, #2]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80078ac:	e002      	b.n	80078b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80078ae:	887a      	ldrh	r2, [r7, #2]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80078b4:	bf00      	nop
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80078c6:	4b0a      	ldr	r3, [pc, #40]	@ (80078f0 <HAL_HSEM_IRQHandler+0x30>)
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80078cc:	4b08      	ldr	r3, [pc, #32]	@ (80078f0 <HAL_HSEM_IRQHandler+0x30>)
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	43db      	mvns	r3, r3
 80078d4:	4906      	ldr	r1, [pc, #24]	@ (80078f0 <HAL_HSEM_IRQHandler+0x30>)
 80078d6:	4013      	ands	r3, r2
 80078d8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80078da:	4a05      	ldr	r2, [pc, #20]	@ (80078f0 <HAL_HSEM_IRQHandler+0x30>)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f807 	bl	80078f4 <HAL_HSEM_FreeCallback>
}
 80078e6:	bf00      	nop
 80078e8:	3708      	adds	r7, #8
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	58001500 	.word	0x58001500

080078f4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80078fc:	bf00      	nop
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e08d      	b.n	8007a36 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d106      	bne.n	8007934 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7fe f93e 	bl	8005bb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2224      	movs	r2, #36	@ 0x24
 8007938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f022 0201 	bic.w	r2, r2, #1
 800794a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685a      	ldr	r2, [r3, #4]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007958:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	689a      	ldr	r2, [r3, #8]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007968:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d107      	bne.n	8007982 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	689a      	ldr	r2, [r3, #8]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800797e:	609a      	str	r2, [r3, #8]
 8007980:	e006      	b.n	8007990 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	689a      	ldr	r2, [r3, #8]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800798e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	2b02      	cmp	r3, #2
 8007996:	d108      	bne.n	80079aa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	685a      	ldr	r2, [r3, #4]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079a6:	605a      	str	r2, [r3, #4]
 80079a8:	e007      	b.n	80079ba <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	685a      	ldr	r2, [r3, #4]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80079b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	6812      	ldr	r2, [r2, #0]
 80079c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80079c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68da      	ldr	r2, [r3, #12]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80079dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	691a      	ldr	r2, [r3, #16]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	430a      	orrs	r2, r1
 80079f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	69d9      	ldr	r1, [r3, #28]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6a1a      	ldr	r2, [r3, #32]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	430a      	orrs	r2, r1
 8007a06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f042 0201 	orr.w	r2, r2, #1
 8007a16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2220      	movs	r2, #32
 8007a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3708      	adds	r7, #8
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
	...

08007a40 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b088      	sub	sp, #32
 8007a44:	af02      	add	r7, sp, #8
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	607a      	str	r2, [r7, #4]
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	817b      	strh	r3, [r7, #10]
 8007a50:	4613      	mov	r3, r2
 8007a52:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	2b20      	cmp	r3, #32
 8007a5e:	f040 80fd 	bne.w	8007c5c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d101      	bne.n	8007a70 <HAL_I2C_Master_Transmit+0x30>
 8007a6c:	2302      	movs	r3, #2
 8007a6e:	e0f6      	b.n	8007c5e <HAL_I2C_Master_Transmit+0x21e>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007a78:	f7ff fb7e 	bl	8007178 <HAL_GetTick>
 8007a7c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	9300      	str	r3, [sp, #0]
 8007a82:	2319      	movs	r3, #25
 8007a84:	2201      	movs	r2, #1
 8007a86:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f000 fce0 	bl	8008450 <I2C_WaitOnFlagUntilTimeout>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d001      	beq.n	8007a9a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e0e1      	b.n	8007c5e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2221      	movs	r2, #33	@ 0x21
 8007a9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2210      	movs	r2, #16
 8007aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	893a      	ldrh	r2, [r7, #8]
 8007aba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	2bff      	cmp	r3, #255	@ 0xff
 8007aca:	d906      	bls.n	8007ada <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	22ff      	movs	r2, #255	@ 0xff
 8007ad0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007ad2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007ad6:	617b      	str	r3, [r7, #20]
 8007ad8:	e007      	b.n	8007aea <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007ae4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007ae8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d024      	beq.n	8007b3c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af6:	781a      	ldrb	r2, [r3, #0]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b02:	1c5a      	adds	r2, r3, #1
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	3301      	adds	r3, #1
 8007b2a:	b2da      	uxtb	r2, r3
 8007b2c:	8979      	ldrh	r1, [r7, #10]
 8007b2e:	4b4e      	ldr	r3, [pc, #312]	@ (8007c68 <HAL_I2C_Master_Transmit+0x228>)
 8007b30:	9300      	str	r3, [sp, #0]
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f000 fedb 	bl	80088f0 <I2C_TransferConfig>
 8007b3a:	e066      	b.n	8007c0a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b40:	b2da      	uxtb	r2, r3
 8007b42:	8979      	ldrh	r1, [r7, #10]
 8007b44:	4b48      	ldr	r3, [pc, #288]	@ (8007c68 <HAL_I2C_Master_Transmit+0x228>)
 8007b46:	9300      	str	r3, [sp, #0]
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f000 fed0 	bl	80088f0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007b50:	e05b      	b.n	8007c0a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b52:	693a      	ldr	r2, [r7, #16]
 8007b54:	6a39      	ldr	r1, [r7, #32]
 8007b56:	68f8      	ldr	r0, [r7, #12]
 8007b58:	f000 fcd3 	bl	8008502 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d001      	beq.n	8007b66 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e07b      	b.n	8007c5e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b6a:	781a      	ldrb	r2, [r3, #0]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b76:	1c5a      	adds	r2, r3, #1
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	3b01      	subs	r3, #1
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b8e:	3b01      	subs	r3, #1
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d034      	beq.n	8007c0a <HAL_I2C_Master_Transmit+0x1ca>
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d130      	bne.n	8007c0a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	9300      	str	r3, [sp, #0]
 8007bac:	6a3b      	ldr	r3, [r7, #32]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	2180      	movs	r1, #128	@ 0x80
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f000 fc4c 	bl	8008450 <I2C_WaitOnFlagUntilTimeout>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d001      	beq.n	8007bc2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e04d      	b.n	8007c5e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	2bff      	cmp	r3, #255	@ 0xff
 8007bca:	d90e      	bls.n	8007bea <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	22ff      	movs	r2, #255	@ 0xff
 8007bd0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bd6:	b2da      	uxtb	r2, r3
 8007bd8:	8979      	ldrh	r1, [r7, #10]
 8007bda:	2300      	movs	r3, #0
 8007bdc:	9300      	str	r3, [sp, #0]
 8007bde:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	f000 fe84 	bl	80088f0 <I2C_TransferConfig>
 8007be8:	e00f      	b.n	8007c0a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bf8:	b2da      	uxtb	r2, r3
 8007bfa:	8979      	ldrh	r1, [r7, #10]
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	9300      	str	r3, [sp, #0]
 8007c00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f000 fe73 	bl	80088f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d19e      	bne.n	8007b52 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c14:	693a      	ldr	r2, [r7, #16]
 8007c16:	6a39      	ldr	r1, [r7, #32]
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f000 fcb9 	bl	8008590 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d001      	beq.n	8007c28 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	e01a      	b.n	8007c5e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2220      	movs	r2, #32
 8007c2e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6859      	ldr	r1, [r3, #4]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8007c6c <HAL_I2C_Master_Transmit+0x22c>)
 8007c3c:	400b      	ands	r3, r1
 8007c3e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2220      	movs	r2, #32
 8007c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	e000      	b.n	8007c5e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8007c5c:	2302      	movs	r3, #2
  }
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3718      	adds	r7, #24
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	80002000 	.word	0x80002000
 8007c6c:	fe00e800 	.word	0xfe00e800

08007c70 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b088      	sub	sp, #32
 8007c74:	af02      	add	r7, sp, #8
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	607a      	str	r2, [r7, #4]
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	817b      	strh	r3, [r7, #10]
 8007c80:	4613      	mov	r3, r2
 8007c82:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	2b20      	cmp	r3, #32
 8007c8e:	f040 80db 	bne.w	8007e48 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d101      	bne.n	8007ca0 <HAL_I2C_Master_Receive+0x30>
 8007c9c:	2302      	movs	r3, #2
 8007c9e:	e0d4      	b.n	8007e4a <HAL_I2C_Master_Receive+0x1da>
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007ca8:	f7ff fa66 	bl	8007178 <HAL_GetTick>
 8007cac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	9300      	str	r3, [sp, #0]
 8007cb2:	2319      	movs	r3, #25
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f000 fbc8 	bl	8008450 <I2C_WaitOnFlagUntilTimeout>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d001      	beq.n	8007cca <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e0bf      	b.n	8007e4a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2222      	movs	r2, #34	@ 0x22
 8007cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2210      	movs	r2, #16
 8007cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	893a      	ldrh	r2, [r7, #8]
 8007cea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	2bff      	cmp	r3, #255	@ 0xff
 8007cfa:	d90e      	bls.n	8007d1a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	22ff      	movs	r2, #255	@ 0xff
 8007d00:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d06:	b2da      	uxtb	r2, r3
 8007d08:	8979      	ldrh	r1, [r7, #10]
 8007d0a:	4b52      	ldr	r3, [pc, #328]	@ (8007e54 <HAL_I2C_Master_Receive+0x1e4>)
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f000 fdec 	bl	80088f0 <I2C_TransferConfig>
 8007d18:	e06d      	b.n	8007df6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d1e:	b29a      	uxth	r2, r3
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d28:	b2da      	uxtb	r2, r3
 8007d2a:	8979      	ldrh	r1, [r7, #10]
 8007d2c:	4b49      	ldr	r3, [pc, #292]	@ (8007e54 <HAL_I2C_Master_Receive+0x1e4>)
 8007d2e:	9300      	str	r3, [sp, #0]
 8007d30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	f000 fddb 	bl	80088f0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007d3a:	e05c      	b.n	8007df6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	6a39      	ldr	r1, [r7, #32]
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f000 fc69 	bl	8008618 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d001      	beq.n	8007d50 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e07c      	b.n	8007e4a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d5a:	b2d2      	uxtb	r2, r2
 8007d5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d62:	1c5a      	adds	r2, r3, #1
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d6c:	3b01      	subs	r3, #1
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d034      	beq.n	8007df6 <HAL_I2C_Master_Receive+0x186>
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d130      	bne.n	8007df6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	9300      	str	r3, [sp, #0]
 8007d98:	6a3b      	ldr	r3, [r7, #32]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	2180      	movs	r1, #128	@ 0x80
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f000 fb56 	bl	8008450 <I2C_WaitOnFlagUntilTimeout>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d001      	beq.n	8007dae <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e04d      	b.n	8007e4a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	2bff      	cmp	r3, #255	@ 0xff
 8007db6:	d90e      	bls.n	8007dd6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	22ff      	movs	r2, #255	@ 0xff
 8007dbc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007dc2:	b2da      	uxtb	r2, r3
 8007dc4:	8979      	ldrh	r1, [r7, #10]
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	9300      	str	r3, [sp, #0]
 8007dca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	f000 fd8e 	bl	80088f0 <I2C_TransferConfig>
 8007dd4:	e00f      	b.n	8007df6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007de4:	b2da      	uxtb	r2, r3
 8007de6:	8979      	ldrh	r1, [r7, #10]
 8007de8:	2300      	movs	r3, #0
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f000 fd7d 	bl	80088f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d19d      	bne.n	8007d3c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e00:	697a      	ldr	r2, [r7, #20]
 8007e02:	6a39      	ldr	r1, [r7, #32]
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	f000 fbc3 	bl	8008590 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d001      	beq.n	8007e14 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	e01a      	b.n	8007e4a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2220      	movs	r2, #32
 8007e1a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	6859      	ldr	r1, [r3, #4]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	4b0c      	ldr	r3, [pc, #48]	@ (8007e58 <HAL_I2C_Master_Receive+0x1e8>)
 8007e28:	400b      	ands	r3, r1
 8007e2a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2220      	movs	r2, #32
 8007e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2200      	movs	r2, #0
 8007e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007e44:	2300      	movs	r3, #0
 8007e46:	e000      	b.n	8007e4a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007e48:	2302      	movs	r3, #2
  }
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3718      	adds	r7, #24
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	80002400 	.word	0x80002400
 8007e58:	fe00e800 	.word	0xfe00e800

08007e5c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b088      	sub	sp, #32
 8007e60:	af02      	add	r7, sp, #8
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	4608      	mov	r0, r1
 8007e66:	4611      	mov	r1, r2
 8007e68:	461a      	mov	r2, r3
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	817b      	strh	r3, [r7, #10]
 8007e6e:	460b      	mov	r3, r1
 8007e70:	813b      	strh	r3, [r7, #8]
 8007e72:	4613      	mov	r3, r2
 8007e74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	2b20      	cmp	r3, #32
 8007e80:	f040 80f9 	bne.w	8008076 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e84:	6a3b      	ldr	r3, [r7, #32]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d002      	beq.n	8007e90 <HAL_I2C_Mem_Write+0x34>
 8007e8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d105      	bne.n	8007e9c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e96:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e0ed      	b.n	8008078 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d101      	bne.n	8007eaa <HAL_I2C_Mem_Write+0x4e>
 8007ea6:	2302      	movs	r3, #2
 8007ea8:	e0e6      	b.n	8008078 <HAL_I2C_Mem_Write+0x21c>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2201      	movs	r2, #1
 8007eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007eb2:	f7ff f961 	bl	8007178 <HAL_GetTick>
 8007eb6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	9300      	str	r3, [sp, #0]
 8007ebc:	2319      	movs	r3, #25
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f000 fac3 	bl	8008450 <I2C_WaitOnFlagUntilTimeout>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d001      	beq.n	8007ed4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e0d1      	b.n	8008078 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2221      	movs	r2, #33	@ 0x21
 8007ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2240      	movs	r2, #64	@ 0x40
 8007ee0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6a3a      	ldr	r2, [r7, #32]
 8007eee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007ef4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007efc:	88f8      	ldrh	r0, [r7, #6]
 8007efe:	893a      	ldrh	r2, [r7, #8]
 8007f00:	8979      	ldrh	r1, [r7, #10]
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	9301      	str	r3, [sp, #4]
 8007f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f000 f9d3 	bl	80082b8 <I2C_RequestMemoryWrite>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d005      	beq.n	8007f24 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	e0a9      	b.n	8008078 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	2bff      	cmp	r3, #255	@ 0xff
 8007f2c:	d90e      	bls.n	8007f4c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	22ff      	movs	r2, #255	@ 0xff
 8007f32:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f38:	b2da      	uxtb	r2, r3
 8007f3a:	8979      	ldrh	r1, [r7, #10]
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f000 fcd3 	bl	80088f0 <I2C_TransferConfig>
 8007f4a:	e00f      	b.n	8007f6c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f50:	b29a      	uxth	r2, r3
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f5a:	b2da      	uxtb	r2, r3
 8007f5c:	8979      	ldrh	r1, [r7, #10]
 8007f5e:	2300      	movs	r3, #0
 8007f60:	9300      	str	r3, [sp, #0]
 8007f62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	f000 fcc2 	bl	80088f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f6c:	697a      	ldr	r2, [r7, #20]
 8007f6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f000 fac6 	bl	8008502 <I2C_WaitOnTXISFlagUntilTimeout>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d001      	beq.n	8007f80 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e07b      	b.n	8008078 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f84:	781a      	ldrb	r2, [r3, #0]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f90:	1c5a      	adds	r2, r3, #1
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	b29a      	uxth	r2, r3
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d034      	beq.n	8008024 <HAL_I2C_Mem_Write+0x1c8>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d130      	bne.n	8008024 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	9300      	str	r3, [sp, #0]
 8007fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc8:	2200      	movs	r2, #0
 8007fca:	2180      	movs	r1, #128	@ 0x80
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f000 fa3f 	bl	8008450 <I2C_WaitOnFlagUntilTimeout>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d001      	beq.n	8007fdc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e04d      	b.n	8008078 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	2bff      	cmp	r3, #255	@ 0xff
 8007fe4:	d90e      	bls.n	8008004 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	22ff      	movs	r2, #255	@ 0xff
 8007fea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	8979      	ldrh	r1, [r7, #10]
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	9300      	str	r3, [sp, #0]
 8007ff8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007ffc:	68f8      	ldr	r0, [r7, #12]
 8007ffe:	f000 fc77 	bl	80088f0 <I2C_TransferConfig>
 8008002:	e00f      	b.n	8008024 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008008:	b29a      	uxth	r2, r3
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008012:	b2da      	uxtb	r2, r3
 8008014:	8979      	ldrh	r1, [r7, #10]
 8008016:	2300      	movs	r3, #0
 8008018:	9300      	str	r3, [sp, #0]
 800801a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	f000 fc66 	bl	80088f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008028:	b29b      	uxth	r3, r3
 800802a:	2b00      	cmp	r3, #0
 800802c:	d19e      	bne.n	8007f6c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800802e:	697a      	ldr	r2, [r7, #20]
 8008030:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	f000 faac 	bl	8008590 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008038:	4603      	mov	r3, r0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d001      	beq.n	8008042 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e01a      	b.n	8008078 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2220      	movs	r2, #32
 8008048:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	6859      	ldr	r1, [r3, #4]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	4b0a      	ldr	r3, [pc, #40]	@ (8008080 <HAL_I2C_Mem_Write+0x224>)
 8008056:	400b      	ands	r3, r1
 8008058:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2220      	movs	r2, #32
 800805e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008072:	2300      	movs	r3, #0
 8008074:	e000      	b.n	8008078 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008076:	2302      	movs	r3, #2
  }
}
 8008078:	4618      	mov	r0, r3
 800807a:	3718      	adds	r7, #24
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}
 8008080:	fe00e800 	.word	0xfe00e800

08008084 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b088      	sub	sp, #32
 8008088:	af02      	add	r7, sp, #8
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	4608      	mov	r0, r1
 800808e:	4611      	mov	r1, r2
 8008090:	461a      	mov	r2, r3
 8008092:	4603      	mov	r3, r0
 8008094:	817b      	strh	r3, [r7, #10]
 8008096:	460b      	mov	r3, r1
 8008098:	813b      	strh	r3, [r7, #8]
 800809a:	4613      	mov	r3, r2
 800809c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	2b20      	cmp	r3, #32
 80080a8:	f040 80fd 	bne.w	80082a6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80080ac:	6a3b      	ldr	r3, [r7, #32]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d002      	beq.n	80080b8 <HAL_I2C_Mem_Read+0x34>
 80080b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d105      	bne.n	80080c4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80080be:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	e0f1      	b.n	80082a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d101      	bne.n	80080d2 <HAL_I2C_Mem_Read+0x4e>
 80080ce:	2302      	movs	r3, #2
 80080d0:	e0ea      	b.n	80082a8 <HAL_I2C_Mem_Read+0x224>
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2201      	movs	r2, #1
 80080d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80080da:	f7ff f84d 	bl	8007178 <HAL_GetTick>
 80080de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	9300      	str	r3, [sp, #0]
 80080e4:	2319      	movs	r3, #25
 80080e6:	2201      	movs	r2, #1
 80080e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f000 f9af 	bl	8008450 <I2C_WaitOnFlagUntilTimeout>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d001      	beq.n	80080fc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	e0d5      	b.n	80082a8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2222      	movs	r2, #34	@ 0x22
 8008100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2240      	movs	r2, #64	@ 0x40
 8008108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2200      	movs	r2, #0
 8008110:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	6a3a      	ldr	r2, [r7, #32]
 8008116:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800811c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2200      	movs	r2, #0
 8008122:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008124:	88f8      	ldrh	r0, [r7, #6]
 8008126:	893a      	ldrh	r2, [r7, #8]
 8008128:	8979      	ldrh	r1, [r7, #10]
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	9301      	str	r3, [sp, #4]
 800812e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008130:	9300      	str	r3, [sp, #0]
 8008132:	4603      	mov	r3, r0
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f000 f913 	bl	8008360 <I2C_RequestMemoryRead>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d005      	beq.n	800814c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2200      	movs	r2, #0
 8008144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	e0ad      	b.n	80082a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008150:	b29b      	uxth	r3, r3
 8008152:	2bff      	cmp	r3, #255	@ 0xff
 8008154:	d90e      	bls.n	8008174 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	22ff      	movs	r2, #255	@ 0xff
 800815a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008160:	b2da      	uxtb	r2, r3
 8008162:	8979      	ldrh	r1, [r7, #10]
 8008164:	4b52      	ldr	r3, [pc, #328]	@ (80082b0 <HAL_I2C_Mem_Read+0x22c>)
 8008166:	9300      	str	r3, [sp, #0]
 8008168:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f000 fbbf 	bl	80088f0 <I2C_TransferConfig>
 8008172:	e00f      	b.n	8008194 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008178:	b29a      	uxth	r2, r3
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008182:	b2da      	uxtb	r2, r3
 8008184:	8979      	ldrh	r1, [r7, #10]
 8008186:	4b4a      	ldr	r3, [pc, #296]	@ (80082b0 <HAL_I2C_Mem_Read+0x22c>)
 8008188:	9300      	str	r3, [sp, #0]
 800818a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	f000 fbae 	bl	80088f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	9300      	str	r3, [sp, #0]
 8008198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800819a:	2200      	movs	r2, #0
 800819c:	2104      	movs	r1, #4
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f000 f956 	bl	8008450 <I2C_WaitOnFlagUntilTimeout>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d001      	beq.n	80081ae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	e07c      	b.n	80082a8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081b8:	b2d2      	uxtb	r2, r2
 80081ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081c0:	1c5a      	adds	r2, r3, #1
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081ca:	3b01      	subs	r3, #1
 80081cc:	b29a      	uxth	r2, r3
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	3b01      	subs	r3, #1
 80081da:	b29a      	uxth	r2, r3
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d034      	beq.n	8008254 <HAL_I2C_Mem_Read+0x1d0>
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d130      	bne.n	8008254 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	9300      	str	r3, [sp, #0]
 80081f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f8:	2200      	movs	r2, #0
 80081fa:	2180      	movs	r1, #128	@ 0x80
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f000 f927 	bl	8008450 <I2C_WaitOnFlagUntilTimeout>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d001      	beq.n	800820c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	e04d      	b.n	80082a8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008210:	b29b      	uxth	r3, r3
 8008212:	2bff      	cmp	r3, #255	@ 0xff
 8008214:	d90e      	bls.n	8008234 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	22ff      	movs	r2, #255	@ 0xff
 800821a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008220:	b2da      	uxtb	r2, r3
 8008222:	8979      	ldrh	r1, [r7, #10]
 8008224:	2300      	movs	r3, #0
 8008226:	9300      	str	r3, [sp, #0]
 8008228:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	f000 fb5f 	bl	80088f0 <I2C_TransferConfig>
 8008232:	e00f      	b.n	8008254 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008238:	b29a      	uxth	r2, r3
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008242:	b2da      	uxtb	r2, r3
 8008244:	8979      	ldrh	r1, [r7, #10]
 8008246:	2300      	movs	r3, #0
 8008248:	9300      	str	r3, [sp, #0]
 800824a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f000 fb4e 	bl	80088f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008258:	b29b      	uxth	r3, r3
 800825a:	2b00      	cmp	r3, #0
 800825c:	d19a      	bne.n	8008194 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800825e:	697a      	ldr	r2, [r7, #20]
 8008260:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	f000 f994 	bl	8008590 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d001      	beq.n	8008272 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e01a      	b.n	80082a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2220      	movs	r2, #32
 8008278:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	6859      	ldr	r1, [r3, #4]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	4b0b      	ldr	r3, [pc, #44]	@ (80082b4 <HAL_I2C_Mem_Read+0x230>)
 8008286:	400b      	ands	r3, r1
 8008288:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2220      	movs	r2, #32
 800828e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2200      	movs	r2, #0
 800829e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80082a2:	2300      	movs	r3, #0
 80082a4:	e000      	b.n	80082a8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80082a6:	2302      	movs	r3, #2
  }
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3718      	adds	r7, #24
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	80002400 	.word	0x80002400
 80082b4:	fe00e800 	.word	0xfe00e800

080082b8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b086      	sub	sp, #24
 80082bc:	af02      	add	r7, sp, #8
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	4608      	mov	r0, r1
 80082c2:	4611      	mov	r1, r2
 80082c4:	461a      	mov	r2, r3
 80082c6:	4603      	mov	r3, r0
 80082c8:	817b      	strh	r3, [r7, #10]
 80082ca:	460b      	mov	r3, r1
 80082cc:	813b      	strh	r3, [r7, #8]
 80082ce:	4613      	mov	r3, r2
 80082d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80082d2:	88fb      	ldrh	r3, [r7, #6]
 80082d4:	b2da      	uxtb	r2, r3
 80082d6:	8979      	ldrh	r1, [r7, #10]
 80082d8:	4b20      	ldr	r3, [pc, #128]	@ (800835c <I2C_RequestMemoryWrite+0xa4>)
 80082da:	9300      	str	r3, [sp, #0]
 80082dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f000 fb05 	bl	80088f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082e6:	69fa      	ldr	r2, [r7, #28]
 80082e8:	69b9      	ldr	r1, [r7, #24]
 80082ea:	68f8      	ldr	r0, [r7, #12]
 80082ec:	f000 f909 	bl	8008502 <I2C_WaitOnTXISFlagUntilTimeout>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d001      	beq.n	80082fa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e02c      	b.n	8008354 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80082fa:	88fb      	ldrh	r3, [r7, #6]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d105      	bne.n	800830c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008300:	893b      	ldrh	r3, [r7, #8]
 8008302:	b2da      	uxtb	r2, r3
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	629a      	str	r2, [r3, #40]	@ 0x28
 800830a:	e015      	b.n	8008338 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800830c:	893b      	ldrh	r3, [r7, #8]
 800830e:	0a1b      	lsrs	r3, r3, #8
 8008310:	b29b      	uxth	r3, r3
 8008312:	b2da      	uxtb	r2, r3
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800831a:	69fa      	ldr	r2, [r7, #28]
 800831c:	69b9      	ldr	r1, [r7, #24]
 800831e:	68f8      	ldr	r0, [r7, #12]
 8008320:	f000 f8ef 	bl	8008502 <I2C_WaitOnTXISFlagUntilTimeout>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d001      	beq.n	800832e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	e012      	b.n	8008354 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800832e:	893b      	ldrh	r3, [r7, #8]
 8008330:	b2da      	uxtb	r2, r3
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	2200      	movs	r2, #0
 8008340:	2180      	movs	r1, #128	@ 0x80
 8008342:	68f8      	ldr	r0, [r7, #12]
 8008344:	f000 f884 	bl	8008450 <I2C_WaitOnFlagUntilTimeout>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d001      	beq.n	8008352 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	e000      	b.n	8008354 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	80002000 	.word	0x80002000

08008360 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b086      	sub	sp, #24
 8008364:	af02      	add	r7, sp, #8
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	4608      	mov	r0, r1
 800836a:	4611      	mov	r1, r2
 800836c:	461a      	mov	r2, r3
 800836e:	4603      	mov	r3, r0
 8008370:	817b      	strh	r3, [r7, #10]
 8008372:	460b      	mov	r3, r1
 8008374:	813b      	strh	r3, [r7, #8]
 8008376:	4613      	mov	r3, r2
 8008378:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800837a:	88fb      	ldrh	r3, [r7, #6]
 800837c:	b2da      	uxtb	r2, r3
 800837e:	8979      	ldrh	r1, [r7, #10]
 8008380:	4b20      	ldr	r3, [pc, #128]	@ (8008404 <I2C_RequestMemoryRead+0xa4>)
 8008382:	9300      	str	r3, [sp, #0]
 8008384:	2300      	movs	r3, #0
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	f000 fab2 	bl	80088f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800838c:	69fa      	ldr	r2, [r7, #28]
 800838e:	69b9      	ldr	r1, [r7, #24]
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f000 f8b6 	bl	8008502 <I2C_WaitOnTXISFlagUntilTimeout>
 8008396:	4603      	mov	r3, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d001      	beq.n	80083a0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800839c:	2301      	movs	r3, #1
 800839e:	e02c      	b.n	80083fa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80083a0:	88fb      	ldrh	r3, [r7, #6]
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d105      	bne.n	80083b2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80083a6:	893b      	ldrh	r3, [r7, #8]
 80083a8:	b2da      	uxtb	r2, r3
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80083b0:	e015      	b.n	80083de <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80083b2:	893b      	ldrh	r3, [r7, #8]
 80083b4:	0a1b      	lsrs	r3, r3, #8
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	b2da      	uxtb	r2, r3
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083c0:	69fa      	ldr	r2, [r7, #28]
 80083c2:	69b9      	ldr	r1, [r7, #24]
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f000 f89c 	bl	8008502 <I2C_WaitOnTXISFlagUntilTimeout>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d001      	beq.n	80083d4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	e012      	b.n	80083fa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80083d4:	893b      	ldrh	r3, [r7, #8]
 80083d6:	b2da      	uxtb	r2, r3
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	2200      	movs	r2, #0
 80083e6:	2140      	movs	r1, #64	@ 0x40
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	f000 f831 	bl	8008450 <I2C_WaitOnFlagUntilTimeout>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d001      	beq.n	80083f8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	e000      	b.n	80083fa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	80002000 	.word	0x80002000

08008408 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	f003 0302 	and.w	r3, r3, #2
 800841a:	2b02      	cmp	r3, #2
 800841c:	d103      	bne.n	8008426 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2200      	movs	r2, #0
 8008424:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	699b      	ldr	r3, [r3, #24]
 800842c:	f003 0301 	and.w	r3, r3, #1
 8008430:	2b01      	cmp	r3, #1
 8008432:	d007      	beq.n	8008444 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	699a      	ldr	r2, [r3, #24]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f042 0201 	orr.w	r2, r2, #1
 8008442:	619a      	str	r2, [r3, #24]
  }
}
 8008444:	bf00      	nop
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	603b      	str	r3, [r7, #0]
 800845c:	4613      	mov	r3, r2
 800845e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008460:	e03b      	b.n	80084da <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008462:	69ba      	ldr	r2, [r7, #24]
 8008464:	6839      	ldr	r1, [r7, #0]
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	f000 f962 	bl	8008730 <I2C_IsErrorOccurred>
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d001      	beq.n	8008476 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	e041      	b.n	80084fa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800847c:	d02d      	beq.n	80084da <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800847e:	f7fe fe7b 	bl	8007178 <HAL_GetTick>
 8008482:	4602      	mov	r2, r0
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	1ad3      	subs	r3, r2, r3
 8008488:	683a      	ldr	r2, [r7, #0]
 800848a:	429a      	cmp	r2, r3
 800848c:	d302      	bcc.n	8008494 <I2C_WaitOnFlagUntilTimeout+0x44>
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d122      	bne.n	80084da <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	699a      	ldr	r2, [r3, #24]
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	4013      	ands	r3, r2
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	bf0c      	ite	eq
 80084a4:	2301      	moveq	r3, #1
 80084a6:	2300      	movne	r3, #0
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	461a      	mov	r2, r3
 80084ac:	79fb      	ldrb	r3, [r7, #7]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d113      	bne.n	80084da <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084b6:	f043 0220 	orr.w	r2, r3, #32
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2220      	movs	r2, #32
 80084c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	e00f      	b.n	80084fa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	699a      	ldr	r2, [r3, #24]
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	4013      	ands	r3, r2
 80084e4:	68ba      	ldr	r2, [r7, #8]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	bf0c      	ite	eq
 80084ea:	2301      	moveq	r3, #1
 80084ec:	2300      	movne	r3, #0
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	461a      	mov	r2, r3
 80084f2:	79fb      	ldrb	r3, [r7, #7]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d0b4      	beq.n	8008462 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008502:	b580      	push	{r7, lr}
 8008504:	b084      	sub	sp, #16
 8008506:	af00      	add	r7, sp, #0
 8008508:	60f8      	str	r0, [r7, #12]
 800850a:	60b9      	str	r1, [r7, #8]
 800850c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800850e:	e033      	b.n	8008578 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	68b9      	ldr	r1, [r7, #8]
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f000 f90b 	bl	8008730 <I2C_IsErrorOccurred>
 800851a:	4603      	mov	r3, r0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d001      	beq.n	8008524 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	e031      	b.n	8008588 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800852a:	d025      	beq.n	8008578 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800852c:	f7fe fe24 	bl	8007178 <HAL_GetTick>
 8008530:	4602      	mov	r2, r0
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	68ba      	ldr	r2, [r7, #8]
 8008538:	429a      	cmp	r2, r3
 800853a:	d302      	bcc.n	8008542 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d11a      	bne.n	8008578 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	f003 0302 	and.w	r3, r3, #2
 800854c:	2b02      	cmp	r3, #2
 800854e:	d013      	beq.n	8008578 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008554:	f043 0220 	orr.w	r2, r3, #32
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2220      	movs	r2, #32
 8008560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2200      	movs	r2, #0
 8008568:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2200      	movs	r2, #0
 8008570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	e007      	b.n	8008588 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	699b      	ldr	r3, [r3, #24]
 800857e:	f003 0302 	and.w	r3, r3, #2
 8008582:	2b02      	cmp	r3, #2
 8008584:	d1c4      	bne.n	8008510 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008586:	2300      	movs	r3, #0
}
 8008588:	4618      	mov	r0, r3
 800858a:	3710      	adds	r7, #16
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800859c:	e02f      	b.n	80085fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	68b9      	ldr	r1, [r7, #8]
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	f000 f8c4 	bl	8008730 <I2C_IsErrorOccurred>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d001      	beq.n	80085b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	e02d      	b.n	800860e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085b2:	f7fe fde1 	bl	8007178 <HAL_GetTick>
 80085b6:	4602      	mov	r2, r0
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	1ad3      	subs	r3, r2, r3
 80085bc:	68ba      	ldr	r2, [r7, #8]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d302      	bcc.n	80085c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d11a      	bne.n	80085fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	699b      	ldr	r3, [r3, #24]
 80085ce:	f003 0320 	and.w	r3, r3, #32
 80085d2:	2b20      	cmp	r3, #32
 80085d4:	d013      	beq.n	80085fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085da:	f043 0220 	orr.w	r2, r3, #32
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2220      	movs	r2, #32
 80085e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2200      	movs	r2, #0
 80085f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	e007      	b.n	800860e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	f003 0320 	and.w	r3, r3, #32
 8008608:	2b20      	cmp	r3, #32
 800860a:	d1c8      	bne.n	800859e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
	...

08008618 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b086      	sub	sp, #24
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008624:	2300      	movs	r3, #0
 8008626:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008628:	e071      	b.n	800870e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	68b9      	ldr	r1, [r7, #8]
 800862e:	68f8      	ldr	r0, [r7, #12]
 8008630:	f000 f87e 	bl	8008730 <I2C_IsErrorOccurred>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d001      	beq.n	800863e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	699b      	ldr	r3, [r3, #24]
 8008644:	f003 0320 	and.w	r3, r3, #32
 8008648:	2b20      	cmp	r3, #32
 800864a:	d13b      	bne.n	80086c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800864c:	7dfb      	ldrb	r3, [r7, #23]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d138      	bne.n	80086c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	699b      	ldr	r3, [r3, #24]
 8008658:	f003 0304 	and.w	r3, r3, #4
 800865c:	2b04      	cmp	r3, #4
 800865e:	d105      	bne.n	800866c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008664:	2b00      	cmp	r3, #0
 8008666:	d001      	beq.n	800866c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8008668:	2300      	movs	r3, #0
 800866a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	699b      	ldr	r3, [r3, #24]
 8008672:	f003 0310 	and.w	r3, r3, #16
 8008676:	2b10      	cmp	r3, #16
 8008678:	d121      	bne.n	80086be <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2210      	movs	r2, #16
 8008680:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2204      	movs	r2, #4
 8008686:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2220      	movs	r2, #32
 800868e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	6859      	ldr	r1, [r3, #4]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	4b24      	ldr	r3, [pc, #144]	@ (800872c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800869c:	400b      	ands	r3, r1
 800869e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2220      	movs	r2, #32
 80086a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	75fb      	strb	r3, [r7, #23]
 80086bc:	e002      	b.n	80086c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2200      	movs	r2, #0
 80086c2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80086c4:	f7fe fd58 	bl	8007178 <HAL_GetTick>
 80086c8:	4602      	mov	r2, r0
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	1ad3      	subs	r3, r2, r3
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d302      	bcc.n	80086da <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d119      	bne.n	800870e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80086da:	7dfb      	ldrb	r3, [r7, #23]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d116      	bne.n	800870e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	699b      	ldr	r3, [r3, #24]
 80086e6:	f003 0304 	and.w	r3, r3, #4
 80086ea:	2b04      	cmp	r3, #4
 80086ec:	d00f      	beq.n	800870e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086f2:	f043 0220 	orr.w	r2, r3, #32
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2220      	movs	r2, #32
 80086fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	699b      	ldr	r3, [r3, #24]
 8008714:	f003 0304 	and.w	r3, r3, #4
 8008718:	2b04      	cmp	r3, #4
 800871a:	d002      	beq.n	8008722 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800871c:	7dfb      	ldrb	r3, [r7, #23]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d083      	beq.n	800862a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8008722:	7dfb      	ldrb	r3, [r7, #23]
}
 8008724:	4618      	mov	r0, r3
 8008726:	3718      	adds	r7, #24
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}
 800872c:	fe00e800 	.word	0xfe00e800

08008730 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b08a      	sub	sp, #40	@ 0x28
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800873c:	2300      	movs	r3, #0
 800873e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	699b      	ldr	r3, [r3, #24]
 8008748:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800874a:	2300      	movs	r3, #0
 800874c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008752:	69bb      	ldr	r3, [r7, #24]
 8008754:	f003 0310 	and.w	r3, r3, #16
 8008758:	2b00      	cmp	r3, #0
 800875a:	d068      	beq.n	800882e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2210      	movs	r2, #16
 8008762:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008764:	e049      	b.n	80087fa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800876c:	d045      	beq.n	80087fa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800876e:	f7fe fd03 	bl	8007178 <HAL_GetTick>
 8008772:	4602      	mov	r2, r0
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	1ad3      	subs	r3, r2, r3
 8008778:	68ba      	ldr	r2, [r7, #8]
 800877a:	429a      	cmp	r2, r3
 800877c:	d302      	bcc.n	8008784 <I2C_IsErrorOccurred+0x54>
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d13a      	bne.n	80087fa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800878e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008796:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	699b      	ldr	r3, [r3, #24]
 800879e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80087a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087a6:	d121      	bne.n	80087ec <I2C_IsErrorOccurred+0xbc>
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80087ae:	d01d      	beq.n	80087ec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80087b0:	7cfb      	ldrb	r3, [r7, #19]
 80087b2:	2b20      	cmp	r3, #32
 80087b4:	d01a      	beq.n	80087ec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	685a      	ldr	r2, [r3, #4]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80087c4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80087c6:	f7fe fcd7 	bl	8007178 <HAL_GetTick>
 80087ca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80087cc:	e00e      	b.n	80087ec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80087ce:	f7fe fcd3 	bl	8007178 <HAL_GetTick>
 80087d2:	4602      	mov	r2, r0
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	1ad3      	subs	r3, r2, r3
 80087d8:	2b19      	cmp	r3, #25
 80087da:	d907      	bls.n	80087ec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80087dc:	6a3b      	ldr	r3, [r7, #32]
 80087de:	f043 0320 	orr.w	r3, r3, #32
 80087e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80087ea:	e006      	b.n	80087fa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	699b      	ldr	r3, [r3, #24]
 80087f2:	f003 0320 	and.w	r3, r3, #32
 80087f6:	2b20      	cmp	r3, #32
 80087f8:	d1e9      	bne.n	80087ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	699b      	ldr	r3, [r3, #24]
 8008800:	f003 0320 	and.w	r3, r3, #32
 8008804:	2b20      	cmp	r3, #32
 8008806:	d003      	beq.n	8008810 <I2C_IsErrorOccurred+0xe0>
 8008808:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800880c:	2b00      	cmp	r3, #0
 800880e:	d0aa      	beq.n	8008766 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008810:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008814:	2b00      	cmp	r3, #0
 8008816:	d103      	bne.n	8008820 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2220      	movs	r2, #32
 800881e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008820:	6a3b      	ldr	r3, [r7, #32]
 8008822:	f043 0304 	orr.w	r3, r3, #4
 8008826:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	699b      	ldr	r3, [r3, #24]
 8008834:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00b      	beq.n	8008858 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008840:	6a3b      	ldr	r3, [r7, #32]
 8008842:	f043 0301 	orr.w	r3, r3, #1
 8008846:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008850:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00b      	beq.n	800887a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008862:	6a3b      	ldr	r3, [r7, #32]
 8008864:	f043 0308 	orr.w	r3, r3, #8
 8008868:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008872:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008880:	2b00      	cmp	r3, #0
 8008882:	d00b      	beq.n	800889c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008884:	6a3b      	ldr	r3, [r7, #32]
 8008886:	f043 0302 	orr.w	r3, r3, #2
 800888a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008894:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800889c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d01c      	beq.n	80088de <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80088a4:	68f8      	ldr	r0, [r7, #12]
 80088a6:	f7ff fdaf 	bl	8008408 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	6859      	ldr	r1, [r3, #4]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	4b0d      	ldr	r3, [pc, #52]	@ (80088ec <I2C_IsErrorOccurred+0x1bc>)
 80088b6:	400b      	ands	r3, r1
 80088b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80088be:	6a3b      	ldr	r3, [r7, #32]
 80088c0:	431a      	orrs	r2, r3
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2220      	movs	r2, #32
 80088ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80088de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3728      	adds	r7, #40	@ 0x28
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	fe00e800 	.word	0xfe00e800

080088f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b087      	sub	sp, #28
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	607b      	str	r3, [r7, #4]
 80088fa:	460b      	mov	r3, r1
 80088fc:	817b      	strh	r3, [r7, #10]
 80088fe:	4613      	mov	r3, r2
 8008900:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008902:	897b      	ldrh	r3, [r7, #10]
 8008904:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008908:	7a7b      	ldrb	r3, [r7, #9]
 800890a:	041b      	lsls	r3, r3, #16
 800890c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008910:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008916:	6a3b      	ldr	r3, [r7, #32]
 8008918:	4313      	orrs	r3, r2
 800891a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800891e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	685a      	ldr	r2, [r3, #4]
 8008926:	6a3b      	ldr	r3, [r7, #32]
 8008928:	0d5b      	lsrs	r3, r3, #21
 800892a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800892e:	4b08      	ldr	r3, [pc, #32]	@ (8008950 <I2C_TransferConfig+0x60>)
 8008930:	430b      	orrs	r3, r1
 8008932:	43db      	mvns	r3, r3
 8008934:	ea02 0103 	and.w	r1, r2, r3
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	697a      	ldr	r2, [r7, #20]
 800893e:	430a      	orrs	r2, r1
 8008940:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008942:	bf00      	nop
 8008944:	371c      	adds	r7, #28
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop
 8008950:	03ff63ff 	.word	0x03ff63ff

08008954 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008964:	b2db      	uxtb	r3, r3
 8008966:	2b20      	cmp	r3, #32
 8008968:	d138      	bne.n	80089dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008970:	2b01      	cmp	r3, #1
 8008972:	d101      	bne.n	8008978 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008974:	2302      	movs	r3, #2
 8008976:	e032      	b.n	80089de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2201      	movs	r2, #1
 800897c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2224      	movs	r2, #36	@ 0x24
 8008984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f022 0201 	bic.w	r2, r2, #1
 8008996:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80089a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	6819      	ldr	r1, [r3, #0]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	683a      	ldr	r2, [r7, #0]
 80089b4:	430a      	orrs	r2, r1
 80089b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f042 0201 	orr.w	r2, r2, #1
 80089c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2220      	movs	r2, #32
 80089cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80089d8:	2300      	movs	r3, #0
 80089da:	e000      	b.n	80089de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80089dc:	2302      	movs	r3, #2
  }
}
 80089de:	4618      	mov	r0, r3
 80089e0:	370c      	adds	r7, #12
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr

080089ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80089ea:	b480      	push	{r7}
 80089ec:	b085      	sub	sp, #20
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
 80089f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	2b20      	cmp	r3, #32
 80089fe:	d139      	bne.n	8008a74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d101      	bne.n	8008a0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008a0a:	2302      	movs	r3, #2
 8008a0c:	e033      	b.n	8008a76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2201      	movs	r2, #1
 8008a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2224      	movs	r2, #36	@ 0x24
 8008a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f022 0201 	bic.w	r2, r2, #1
 8008a2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008a3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	021b      	lsls	r3, r3, #8
 8008a42:	68fa      	ldr	r2, [r7, #12]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f042 0201 	orr.w	r2, r2, #1
 8008a5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2220      	movs	r2, #32
 8008a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008a70:	2300      	movs	r3, #0
 8008a72:	e000      	b.n	8008a76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008a74:	2302      	movs	r3, #2
  }
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3714      	adds	r7, #20
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
	...

08008a84 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d01e      	beq.n	8008ad4 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8008a96:	4b13      	ldr	r3, [pc, #76]	@ (8008ae4 <HAL_IPCC_Init+0x60>)
 8008a98:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d102      	bne.n	8008aac <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f7fd f8f8 	bl	8005c9c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8008aac:	68b8      	ldr	r0, [r7, #8]
 8008aae:	f000 f85b 	bl	8008b68 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 f82c 	bl	8008b1c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2201      	movs	r2, #1
 8008ace:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8008ad2:	e001      	b.n	8008ad8 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8008ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3710      	adds	r7, #16
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	58000c00 	.word	0x58000c00

08008ae8 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b085      	sub	sp, #20
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	4613      	mov	r3, r2
 8008af4:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8008af6:	bf00      	nop
 8008af8:	3714      	adds	r7, #20
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr

08008b02 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8008b02:	b480      	push	{r7}
 8008b04:	b085      	sub	sp, #20
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	60f8      	str	r0, [r7, #12]
 8008b0a:	60b9      	str	r1, [r7, #8]
 8008b0c:	4613      	mov	r3, r2
 8008b0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8008b10:	bf00      	nop
 8008b12:	3714      	adds	r7, #20
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b085      	sub	sp, #20
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8008b24:	2300      	movs	r3, #0
 8008b26:	60fb      	str	r3, [r7, #12]
 8008b28:	e00f      	b.n	8008b4a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	4413      	add	r3, r2
 8008b32:	4a0b      	ldr	r2, [pc, #44]	@ (8008b60 <IPCC_SetDefaultCallbacks+0x44>)
 8008b34:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	3306      	adds	r3, #6
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	4413      	add	r3, r2
 8008b40:	4a08      	ldr	r2, [pc, #32]	@ (8008b64 <IPCC_SetDefaultCallbacks+0x48>)
 8008b42:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	3301      	adds	r3, #1
 8008b48:	60fb      	str	r3, [r7, #12]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2b05      	cmp	r3, #5
 8008b4e:	d9ec      	bls.n	8008b2a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8008b50:	bf00      	nop
 8008b52:	bf00      	nop
 8008b54:	3714      	adds	r7, #20
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr
 8008b5e:	bf00      	nop
 8008b60:	08008ae9 	.word	0x08008ae9
 8008b64:	08008b03 	.word	0x08008b03

08008b68 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8008b7c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	223f      	movs	r2, #63	@ 0x3f
 8008b82:	609a      	str	r2, [r3, #8]
}
 8008b84:	bf00      	nop
 8008b86:	370c      	adds	r7, #12
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d101      	bne.n	8008ba2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e0c0      	b.n	8008d24 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d106      	bne.n	8008bbc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f00e fc38 	bl	801742c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2203      	movs	r2, #3
 8008bc0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f006 fa4e 	bl	800f06a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008bce:	2300      	movs	r3, #0
 8008bd0:	73fb      	strb	r3, [r7, #15]
 8008bd2:	e03e      	b.n	8008c52 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008bd4:	7bfa      	ldrb	r2, [r7, #15]
 8008bd6:	6879      	ldr	r1, [r7, #4]
 8008bd8:	4613      	mov	r3, r2
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	4413      	add	r3, r2
 8008bde:	00db      	lsls	r3, r3, #3
 8008be0:	440b      	add	r3, r1
 8008be2:	3311      	adds	r3, #17
 8008be4:	2201      	movs	r2, #1
 8008be6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008be8:	7bfa      	ldrb	r2, [r7, #15]
 8008bea:	6879      	ldr	r1, [r7, #4]
 8008bec:	4613      	mov	r3, r2
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	4413      	add	r3, r2
 8008bf2:	00db      	lsls	r3, r3, #3
 8008bf4:	440b      	add	r3, r1
 8008bf6:	3310      	adds	r3, #16
 8008bf8:	7bfa      	ldrb	r2, [r7, #15]
 8008bfa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008bfc:	7bfa      	ldrb	r2, [r7, #15]
 8008bfe:	6879      	ldr	r1, [r7, #4]
 8008c00:	4613      	mov	r3, r2
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	4413      	add	r3, r2
 8008c06:	00db      	lsls	r3, r3, #3
 8008c08:	440b      	add	r3, r1
 8008c0a:	3313      	adds	r3, #19
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008c10:	7bfa      	ldrb	r2, [r7, #15]
 8008c12:	6879      	ldr	r1, [r7, #4]
 8008c14:	4613      	mov	r3, r2
 8008c16:	009b      	lsls	r3, r3, #2
 8008c18:	4413      	add	r3, r2
 8008c1a:	00db      	lsls	r3, r3, #3
 8008c1c:	440b      	add	r3, r1
 8008c1e:	3320      	adds	r3, #32
 8008c20:	2200      	movs	r2, #0
 8008c22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008c24:	7bfa      	ldrb	r2, [r7, #15]
 8008c26:	6879      	ldr	r1, [r7, #4]
 8008c28:	4613      	mov	r3, r2
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	4413      	add	r3, r2
 8008c2e:	00db      	lsls	r3, r3, #3
 8008c30:	440b      	add	r3, r1
 8008c32:	3324      	adds	r3, #36	@ 0x24
 8008c34:	2200      	movs	r2, #0
 8008c36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008c38:	7bfb      	ldrb	r3, [r7, #15]
 8008c3a:	6879      	ldr	r1, [r7, #4]
 8008c3c:	1c5a      	adds	r2, r3, #1
 8008c3e:	4613      	mov	r3, r2
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	4413      	add	r3, r2
 8008c44:	00db      	lsls	r3, r3, #3
 8008c46:	440b      	add	r3, r1
 8008c48:	2200      	movs	r2, #0
 8008c4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c4c:	7bfb      	ldrb	r3, [r7, #15]
 8008c4e:	3301      	adds	r3, #1
 8008c50:	73fb      	strb	r3, [r7, #15]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	791b      	ldrb	r3, [r3, #4]
 8008c56:	7bfa      	ldrb	r2, [r7, #15]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d3bb      	bcc.n	8008bd4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	73fb      	strb	r3, [r7, #15]
 8008c60:	e044      	b.n	8008cec <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008c62:	7bfa      	ldrb	r2, [r7, #15]
 8008c64:	6879      	ldr	r1, [r7, #4]
 8008c66:	4613      	mov	r3, r2
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	4413      	add	r3, r2
 8008c6c:	00db      	lsls	r3, r3, #3
 8008c6e:	440b      	add	r3, r1
 8008c70:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8008c74:	2200      	movs	r2, #0
 8008c76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008c78:	7bfa      	ldrb	r2, [r7, #15]
 8008c7a:	6879      	ldr	r1, [r7, #4]
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	4413      	add	r3, r2
 8008c82:	00db      	lsls	r3, r3, #3
 8008c84:	440b      	add	r3, r1
 8008c86:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008c8a:	7bfa      	ldrb	r2, [r7, #15]
 8008c8c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008c8e:	7bfa      	ldrb	r2, [r7, #15]
 8008c90:	6879      	ldr	r1, [r7, #4]
 8008c92:	4613      	mov	r3, r2
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	4413      	add	r3, r2
 8008c98:	00db      	lsls	r3, r3, #3
 8008c9a:	440b      	add	r3, r1
 8008c9c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008ca4:	7bfa      	ldrb	r2, [r7, #15]
 8008ca6:	6879      	ldr	r1, [r7, #4]
 8008ca8:	4613      	mov	r3, r2
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	4413      	add	r3, r2
 8008cae:	00db      	lsls	r3, r3, #3
 8008cb0:	440b      	add	r3, r1
 8008cb2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008cba:	7bfa      	ldrb	r2, [r7, #15]
 8008cbc:	6879      	ldr	r1, [r7, #4]
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	4413      	add	r3, r2
 8008cc4:	00db      	lsls	r3, r3, #3
 8008cc6:	440b      	add	r3, r1
 8008cc8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008ccc:	2200      	movs	r2, #0
 8008cce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008cd0:	7bfa      	ldrb	r2, [r7, #15]
 8008cd2:	6879      	ldr	r1, [r7, #4]
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	4413      	add	r3, r2
 8008cda:	00db      	lsls	r3, r3, #3
 8008cdc:	440b      	add	r3, r1
 8008cde:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ce6:	7bfb      	ldrb	r3, [r7, #15]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	73fb      	strb	r3, [r7, #15]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	791b      	ldrb	r3, [r3, #4]
 8008cf0:	7bfa      	ldrb	r2, [r7, #15]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d3b5      	bcc.n	8008c62 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6818      	ldr	r0, [r3, #0]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	3304      	adds	r3, #4
 8008cfe:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008d02:	f006 f9cd 	bl	800f0a0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	7a9b      	ldrb	r3, [r3, #10]
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d102      	bne.n	8008d22 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f001 fc0e 	bl	800a53e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8008d22:	2300      	movs	r3, #0
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3710      	adds	r7, #16
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d101      	bne.n	8008d42 <HAL_PCD_Start+0x16>
 8008d3e:	2302      	movs	r3, #2
 8008d40:	e012      	b.n	8008d68 <HAL_PCD_Start+0x3c>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2201      	movs	r2, #1
 8008d46:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f006 f974 	bl	800f03c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f007 ff51 	bl	8010c00 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8008d66:	2300      	movs	r3, #0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3708      	adds	r7, #8
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f007 ff56 	bl	8010c2e <USB_ReadInterrupts>
 8008d82:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d003      	beq.n	8008d96 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 fb06 	bl	80093a0 <PCD_EP_ISR_Handler>

    return;
 8008d94:	e110      	b.n	8008fb8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d013      	beq.n	8008dc8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008db2:	b292      	uxth	r2, r2
 8008db4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f00e fbea 	bl	8017592 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8008dbe:	2100      	movs	r1, #0
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f8fc 	bl	8008fbe <HAL_PCD_SetAddress>

    return;
 8008dc6:	e0f7      	b.n	8008fb8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d00c      	beq.n	8008dec <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008dda:	b29a      	uxth	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008de4:	b292      	uxth	r2, r2
 8008de6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8008dea:	e0e5      	b.n	8008fb8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00c      	beq.n	8008e10 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008dfe:	b29a      	uxth	r2, r3
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008e08:	b292      	uxth	r2, r2
 8008e0a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8008e0e:	e0d3      	b.n	8008fb8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d034      	beq.n	8008e84 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008e22:	b29a      	uxth	r2, r3
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f022 0204 	bic.w	r2, r2, #4
 8008e2c:	b292      	uxth	r2, r2
 8008e2e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f022 0208 	bic.w	r2, r2, #8
 8008e44:	b292      	uxth	r2, r2
 8008e46:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d107      	bne.n	8008e64 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f00e fd8c 	bl	801797c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f00e fbcd 	bl	8017604 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008e72:	b29a      	uxth	r2, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008e7c:	b292      	uxth	r2, r2
 8008e7e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8008e82:	e099      	b.n	8008fb8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d027      	beq.n	8008ede <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f042 0208 	orr.w	r2, r2, #8
 8008ea0:	b292      	uxth	r2, r2
 8008ea2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008eb8:	b292      	uxth	r2, r2
 8008eba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f042 0204 	orr.w	r2, r2, #4
 8008ed0:	b292      	uxth	r2, r2
 8008ed2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f00e fb7a 	bl	80175d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008edc:	e06c      	b.n	8008fb8 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d040      	beq.n	8008f6a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008ef0:	b29a      	uxth	r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008efa:	b292      	uxth	r2, r2
 8008efc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d12b      	bne.n	8008f62 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008f12:	b29a      	uxth	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f042 0204 	orr.w	r2, r2, #4
 8008f1c:	b292      	uxth	r2, r2
 8008f1e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008f2a:	b29a      	uxth	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f042 0208 	orr.w	r2, r2, #8
 8008f34:	b292      	uxth	r2, r2
 8008f36:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	089b      	lsrs	r3, r3, #2
 8008f4e:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008f58:	2101      	movs	r1, #1
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f00e fd0e 	bl	801797c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8008f60:	e02a      	b.n	8008fb8 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f00e fb34 	bl	80175d0 <HAL_PCD_SuspendCallback>
    return;
 8008f68:	e026      	b.n	8008fb8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00f      	beq.n	8008f94 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008f7c:	b29a      	uxth	r2, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008f86:	b292      	uxth	r2, r2
 8008f88:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f00e faf2 	bl	8017576 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008f92:	e011      	b.n	8008fb8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d00c      	beq.n	8008fb8 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008fa6:	b29a      	uxth	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008fb0:	b292      	uxth	r2, r2
 8008fb2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8008fb6:	bf00      	nop
  }
}
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b082      	sub	sp, #8
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d101      	bne.n	8008fd8 <HAL_PCD_SetAddress+0x1a>
 8008fd4:	2302      	movs	r3, #2
 8008fd6:	e012      	b.n	8008ffe <HAL_PCD_SetAddress+0x40>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	78fa      	ldrb	r2, [r7, #3]
 8008fe4:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	78fa      	ldrb	r2, [r7, #3]
 8008fec:	4611      	mov	r1, r2
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f007 fdf2 	bl	8010bd8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b084      	sub	sp, #16
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
 800900e:	4608      	mov	r0, r1
 8009010:	4611      	mov	r1, r2
 8009012:	461a      	mov	r2, r3
 8009014:	4603      	mov	r3, r0
 8009016:	70fb      	strb	r3, [r7, #3]
 8009018:	460b      	mov	r3, r1
 800901a:	803b      	strh	r3, [r7, #0]
 800901c:	4613      	mov	r3, r2
 800901e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8009020:	2300      	movs	r3, #0
 8009022:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009024:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009028:	2b00      	cmp	r3, #0
 800902a:	da0e      	bge.n	800904a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800902c:	78fb      	ldrb	r3, [r7, #3]
 800902e:	f003 0207 	and.w	r2, r3, #7
 8009032:	4613      	mov	r3, r2
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	4413      	add	r3, r2
 8009038:	00db      	lsls	r3, r3, #3
 800903a:	3310      	adds	r3, #16
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	4413      	add	r3, r2
 8009040:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2201      	movs	r2, #1
 8009046:	705a      	strb	r2, [r3, #1]
 8009048:	e00e      	b.n	8009068 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800904a:	78fb      	ldrb	r3, [r7, #3]
 800904c:	f003 0207 	and.w	r2, r3, #7
 8009050:	4613      	mov	r3, r2
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	4413      	add	r3, r2
 8009056:	00db      	lsls	r3, r3, #3
 8009058:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	4413      	add	r3, r2
 8009060:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2200      	movs	r2, #0
 8009066:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009068:	78fb      	ldrb	r3, [r7, #3]
 800906a:	f003 0307 	and.w	r3, r3, #7
 800906e:	b2da      	uxtb	r2, r3
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8009074:	883b      	ldrh	r3, [r7, #0]
 8009076:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	78ba      	ldrb	r2, [r7, #2]
 8009082:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009084:	78bb      	ldrb	r3, [r7, #2]
 8009086:	2b02      	cmp	r3, #2
 8009088:	d102      	bne.n	8009090 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2200      	movs	r2, #0
 800908e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009096:	2b01      	cmp	r3, #1
 8009098:	d101      	bne.n	800909e <HAL_PCD_EP_Open+0x98>
 800909a:	2302      	movs	r3, #2
 800909c:	e00e      	b.n	80090bc <HAL_PCD_EP_Open+0xb6>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2201      	movs	r2, #1
 80090a2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	68f9      	ldr	r1, [r7, #12]
 80090ac:	4618      	mov	r0, r3
 80090ae:	f006 f815 	bl	800f0dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80090ba:	7afb      	ldrb	r3, [r7, #11]
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3710      	adds	r7, #16
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	460b      	mov	r3, r1
 80090ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80090d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	da0e      	bge.n	80090f6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80090d8:	78fb      	ldrb	r3, [r7, #3]
 80090da:	f003 0207 	and.w	r2, r3, #7
 80090de:	4613      	mov	r3, r2
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	4413      	add	r3, r2
 80090e4:	00db      	lsls	r3, r3, #3
 80090e6:	3310      	adds	r3, #16
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	4413      	add	r3, r2
 80090ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2201      	movs	r2, #1
 80090f2:	705a      	strb	r2, [r3, #1]
 80090f4:	e00e      	b.n	8009114 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80090f6:	78fb      	ldrb	r3, [r7, #3]
 80090f8:	f003 0207 	and.w	r2, r3, #7
 80090fc:	4613      	mov	r3, r2
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	4413      	add	r3, r2
 8009102:	00db      	lsls	r3, r3, #3
 8009104:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	4413      	add	r3, r2
 800910c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2200      	movs	r2, #0
 8009112:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009114:	78fb      	ldrb	r3, [r7, #3]
 8009116:	f003 0307 	and.w	r3, r3, #7
 800911a:	b2da      	uxtb	r2, r3
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009126:	2b01      	cmp	r3, #1
 8009128:	d101      	bne.n	800912e <HAL_PCD_EP_Close+0x6a>
 800912a:	2302      	movs	r3, #2
 800912c:	e00e      	b.n	800914c <HAL_PCD_EP_Close+0x88>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2201      	movs	r2, #1
 8009132:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	68f9      	ldr	r1, [r7, #12]
 800913c:	4618      	mov	r0, r3
 800913e:	f006 fcb5 	bl	800faac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800914a:	2300      	movs	r3, #0
}
 800914c:	4618      	mov	r0, r3
 800914e:	3710      	adds	r7, #16
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b086      	sub	sp, #24
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	607a      	str	r2, [r7, #4]
 800915e:	603b      	str	r3, [r7, #0]
 8009160:	460b      	mov	r3, r1
 8009162:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009164:	7afb      	ldrb	r3, [r7, #11]
 8009166:	f003 0207 	and.w	r2, r3, #7
 800916a:	4613      	mov	r3, r2
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	4413      	add	r3, r2
 8009170:	00db      	lsls	r3, r3, #3
 8009172:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009176:	68fa      	ldr	r2, [r7, #12]
 8009178:	4413      	add	r3, r2
 800917a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	683a      	ldr	r2, [r7, #0]
 8009186:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	2200      	movs	r2, #0
 800918c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	2200      	movs	r2, #0
 8009192:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009194:	7afb      	ldrb	r3, [r7, #11]
 8009196:	f003 0307 	and.w	r3, r3, #7
 800919a:	b2da      	uxtb	r2, r3
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	6979      	ldr	r1, [r7, #20]
 80091a6:	4618      	mov	r0, r3
 80091a8:	f006 fe6d 	bl	800fe86 <USB_EPStartXfer>

  return HAL_OK;
 80091ac:	2300      	movs	r3, #0
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3718      	adds	r7, #24
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80091b6:	b480      	push	{r7}
 80091b8:	b083      	sub	sp, #12
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
 80091be:	460b      	mov	r3, r1
 80091c0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80091c2:	78fb      	ldrb	r3, [r7, #3]
 80091c4:	f003 0207 	and.w	r2, r3, #7
 80091c8:	6879      	ldr	r1, [r7, #4]
 80091ca:	4613      	mov	r3, r2
 80091cc:	009b      	lsls	r3, r3, #2
 80091ce:	4413      	add	r3, r2
 80091d0:	00db      	lsls	r3, r3, #3
 80091d2:	440b      	add	r3, r1
 80091d4:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80091d8:	681b      	ldr	r3, [r3, #0]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	370c      	adds	r7, #12
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr

080091e6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b086      	sub	sp, #24
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	60f8      	str	r0, [r7, #12]
 80091ee:	607a      	str	r2, [r7, #4]
 80091f0:	603b      	str	r3, [r7, #0]
 80091f2:	460b      	mov	r3, r1
 80091f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091f6:	7afb      	ldrb	r3, [r7, #11]
 80091f8:	f003 0207 	and.w	r2, r3, #7
 80091fc:	4613      	mov	r3, r2
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	4413      	add	r3, r2
 8009202:	00db      	lsls	r3, r3, #3
 8009204:	3310      	adds	r3, #16
 8009206:	68fa      	ldr	r2, [r7, #12]
 8009208:	4413      	add	r3, r2
 800920a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	683a      	ldr	r2, [r7, #0]
 8009216:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	2201      	movs	r2, #1
 800921c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	683a      	ldr	r2, [r7, #0]
 8009224:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	2200      	movs	r2, #0
 800922a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	2201      	movs	r2, #1
 8009230:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009232:	7afb      	ldrb	r3, [r7, #11]
 8009234:	f003 0307 	and.w	r3, r3, #7
 8009238:	b2da      	uxtb	r2, r3
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	6979      	ldr	r1, [r7, #20]
 8009244:	4618      	mov	r0, r3
 8009246:	f006 fe1e 	bl	800fe86 <USB_EPStartXfer>

  return HAL_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3718      	adds	r7, #24
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	460b      	mov	r3, r1
 800925e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009260:	78fb      	ldrb	r3, [r7, #3]
 8009262:	f003 0307 	and.w	r3, r3, #7
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	7912      	ldrb	r2, [r2, #4]
 800926a:	4293      	cmp	r3, r2
 800926c:	d901      	bls.n	8009272 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800926e:	2301      	movs	r3, #1
 8009270:	e03e      	b.n	80092f0 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009272:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009276:	2b00      	cmp	r3, #0
 8009278:	da0e      	bge.n	8009298 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800927a:	78fb      	ldrb	r3, [r7, #3]
 800927c:	f003 0207 	and.w	r2, r3, #7
 8009280:	4613      	mov	r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	4413      	add	r3, r2
 8009286:	00db      	lsls	r3, r3, #3
 8009288:	3310      	adds	r3, #16
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	4413      	add	r3, r2
 800928e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2201      	movs	r2, #1
 8009294:	705a      	strb	r2, [r3, #1]
 8009296:	e00c      	b.n	80092b2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009298:	78fa      	ldrb	r2, [r7, #3]
 800929a:	4613      	mov	r3, r2
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	4413      	add	r3, r2
 80092a0:	00db      	lsls	r3, r3, #3
 80092a2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	4413      	add	r3, r2
 80092aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2200      	movs	r2, #0
 80092b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2201      	movs	r2, #1
 80092b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80092b8:	78fb      	ldrb	r3, [r7, #3]
 80092ba:	f003 0307 	and.w	r3, r3, #7
 80092be:	b2da      	uxtb	r2, r3
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d101      	bne.n	80092d2 <HAL_PCD_EP_SetStall+0x7e>
 80092ce:	2302      	movs	r3, #2
 80092d0:	e00e      	b.n	80092f0 <HAL_PCD_EP_SetStall+0x9c>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	68f9      	ldr	r1, [r7, #12]
 80092e0:	4618      	mov	r0, r3
 80092e2:	f007 fb7f 	bl	80109e4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	460b      	mov	r3, r1
 8009302:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009304:	78fb      	ldrb	r3, [r7, #3]
 8009306:	f003 030f 	and.w	r3, r3, #15
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	7912      	ldrb	r2, [r2, #4]
 800930e:	4293      	cmp	r3, r2
 8009310:	d901      	bls.n	8009316 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009312:	2301      	movs	r3, #1
 8009314:	e040      	b.n	8009398 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009316:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800931a:	2b00      	cmp	r3, #0
 800931c:	da0e      	bge.n	800933c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800931e:	78fb      	ldrb	r3, [r7, #3]
 8009320:	f003 0207 	and.w	r2, r3, #7
 8009324:	4613      	mov	r3, r2
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	4413      	add	r3, r2
 800932a:	00db      	lsls	r3, r3, #3
 800932c:	3310      	adds	r3, #16
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	4413      	add	r3, r2
 8009332:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2201      	movs	r2, #1
 8009338:	705a      	strb	r2, [r3, #1]
 800933a:	e00e      	b.n	800935a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800933c:	78fb      	ldrb	r3, [r7, #3]
 800933e:	f003 0207 	and.w	r2, r3, #7
 8009342:	4613      	mov	r3, r2
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	4413      	add	r3, r2
 8009348:	00db      	lsls	r3, r3, #3
 800934a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	4413      	add	r3, r2
 8009352:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2200      	movs	r2, #0
 8009358:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2200      	movs	r2, #0
 800935e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009360:	78fb      	ldrb	r3, [r7, #3]
 8009362:	f003 0307 	and.w	r3, r3, #7
 8009366:	b2da      	uxtb	r2, r3
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009372:	2b01      	cmp	r3, #1
 8009374:	d101      	bne.n	800937a <HAL_PCD_EP_ClrStall+0x82>
 8009376:	2302      	movs	r3, #2
 8009378:	e00e      	b.n	8009398 <HAL_PCD_EP_ClrStall+0xa0>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2201      	movs	r2, #1
 800937e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	68f9      	ldr	r1, [r7, #12]
 8009388:	4618      	mov	r0, r3
 800938a:	f007 fb7c 	bl	8010a86 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8009396:	2300      	movs	r3, #0
}
 8009398:	4618      	mov	r0, r3
 800939a:	3710      	adds	r7, #16
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b092      	sub	sp, #72	@ 0x48
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80093a8:	e333      	b.n	8009a12 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80093b2:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80093b4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	f003 030f 	and.w	r3, r3, #15
 80093bc:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 80093c0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	f040 8108 	bne.w	80095da <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80093ca:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80093cc:	f003 0310 	and.w	r3, r3, #16
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d14c      	bne.n	800946e <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	881b      	ldrh	r3, [r3, #0]
 80093da:	b29b      	uxth	r3, r3
 80093dc:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80093e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093e4:	813b      	strh	r3, [r7, #8]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	893b      	ldrh	r3, [r7, #8]
 80093ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	3310      	adds	r3, #16
 80093fc:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009406:	b29b      	uxth	r3, r3
 8009408:	461a      	mov	r2, r3
 800940a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	00db      	lsls	r3, r3, #3
 8009410:	4413      	add	r3, r2
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	6812      	ldr	r2, [r2, #0]
 8009416:	4413      	add	r3, r2
 8009418:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800941c:	881b      	ldrh	r3, [r3, #0]
 800941e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009422:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009424:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8009426:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009428:	695a      	ldr	r2, [r3, #20]
 800942a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800942c:	69db      	ldr	r3, [r3, #28]
 800942e:	441a      	add	r2, r3
 8009430:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009432:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8009434:	2100      	movs	r1, #0
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f00e f883 	bl	8017542 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	7b1b      	ldrb	r3, [r3, #12]
 8009440:	b2db      	uxtb	r3, r3
 8009442:	2b00      	cmp	r3, #0
 8009444:	f000 82e5 	beq.w	8009a12 <PCD_EP_ISR_Handler+0x672>
 8009448:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800944a:	699b      	ldr	r3, [r3, #24]
 800944c:	2b00      	cmp	r3, #0
 800944e:	f040 82e0 	bne.w	8009a12 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	7b1b      	ldrb	r3, [r3, #12]
 8009456:	b2db      	uxtb	r3, r3
 8009458:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800945c:	b2da      	uxtb	r2, r3
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	731a      	strb	r2, [r3, #12]
 800946c:	e2d1      	b.n	8009a12 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009474:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	881b      	ldrh	r3, [r3, #0]
 800947c:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800947e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009480:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009484:	2b00      	cmp	r3, #0
 8009486:	d032      	beq.n	80094ee <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009490:	b29b      	uxth	r3, r3
 8009492:	461a      	mov	r2, r3
 8009494:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	00db      	lsls	r3, r3, #3
 800949a:	4413      	add	r3, r2
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	6812      	ldr	r2, [r2, #0]
 80094a0:	4413      	add	r3, r2
 80094a2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80094a6:	881b      	ldrh	r3, [r3, #0]
 80094a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80094ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094ae:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6818      	ldr	r0, [r3, #0]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80094ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094bc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80094be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094c0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	f007 fc06 	bl	8010cd4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	881b      	ldrh	r3, [r3, #0]
 80094ce:	b29a      	uxth	r2, r3
 80094d0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80094d4:	4013      	ands	r3, r2
 80094d6:	817b      	strh	r3, [r7, #10]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	897a      	ldrh	r2, [r7, #10]
 80094de:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80094e2:	b292      	uxth	r2, r2
 80094e4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f00d fffe 	bl	80174e8 <HAL_PCD_SetupStageCallback>
 80094ec:	e291      	b.n	8009a12 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80094ee:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	f280 828d 	bge.w	8009a12 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	881b      	ldrh	r3, [r3, #0]
 80094fe:	b29a      	uxth	r2, r3
 8009500:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8009504:	4013      	ands	r3, r2
 8009506:	81fb      	strh	r3, [r7, #14]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	89fa      	ldrh	r2, [r7, #14]
 800950e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009512:	b292      	uxth	r2, r2
 8009514:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800951e:	b29b      	uxth	r3, r3
 8009520:	461a      	mov	r2, r3
 8009522:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	00db      	lsls	r3, r3, #3
 8009528:	4413      	add	r3, r2
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	6812      	ldr	r2, [r2, #0]
 800952e:	4413      	add	r3, r2
 8009530:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009534:	881b      	ldrh	r3, [r3, #0]
 8009536:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800953a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800953c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800953e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009540:	69db      	ldr	r3, [r3, #28]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d019      	beq.n	800957a <PCD_EP_ISR_Handler+0x1da>
 8009546:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009548:	695b      	ldr	r3, [r3, #20]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d015      	beq.n	800957a <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6818      	ldr	r0, [r3, #0]
 8009552:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009554:	6959      	ldr	r1, [r3, #20]
 8009556:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009558:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800955a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800955c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800955e:	b29b      	uxth	r3, r3
 8009560:	f007 fbb8 	bl	8010cd4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8009564:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009566:	695a      	ldr	r2, [r3, #20]
 8009568:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800956a:	69db      	ldr	r3, [r3, #28]
 800956c:	441a      	add	r2, r3
 800956e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009570:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8009572:	2100      	movs	r1, #0
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f00d ffc9 	bl	801750c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	881b      	ldrh	r3, [r3, #0]
 8009580:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8009582:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009584:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009588:	2b00      	cmp	r3, #0
 800958a:	f040 8242 	bne.w	8009a12 <PCD_EP_ISR_Handler+0x672>
 800958e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009590:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009594:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009598:	f000 823b 	beq.w	8009a12 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	881b      	ldrh	r3, [r3, #0]
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80095a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095ac:	81bb      	strh	r3, [r7, #12]
 80095ae:	89bb      	ldrh	r3, [r7, #12]
 80095b0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80095b4:	81bb      	strh	r3, [r7, #12]
 80095b6:	89bb      	ldrh	r3, [r7, #12]
 80095b8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80095bc:	81bb      	strh	r3, [r7, #12]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	89bb      	ldrh	r3, [r7, #12]
 80095c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	8013      	strh	r3, [r2, #0]
 80095d8:	e21b      	b.n	8009a12 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	461a      	mov	r2, r3
 80095e0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	4413      	add	r3, r2
 80095e8:	881b      	ldrh	r3, [r3, #0]
 80095ea:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80095ec:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	f280 80f1 	bge.w	80097d8 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	461a      	mov	r2, r3
 80095fc:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	4413      	add	r3, r2
 8009604:	881b      	ldrh	r3, [r3, #0]
 8009606:	b29a      	uxth	r2, r3
 8009608:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800960c:	4013      	ands	r3, r2
 800960e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	461a      	mov	r2, r3
 8009616:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	4413      	add	r3, r2
 800961e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8009620:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009624:	b292      	uxth	r2, r2
 8009626:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8009628:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800962c:	4613      	mov	r3, r2
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	4413      	add	r3, r2
 8009632:	00db      	lsls	r3, r3, #3
 8009634:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	4413      	add	r3, r2
 800963c:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800963e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009640:	7b1b      	ldrb	r3, [r3, #12]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d123      	bne.n	800968e <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800964e:	b29b      	uxth	r3, r3
 8009650:	461a      	mov	r2, r3
 8009652:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	00db      	lsls	r3, r3, #3
 8009658:	4413      	add	r3, r2
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	6812      	ldr	r2, [r2, #0]
 800965e:	4413      	add	r3, r2
 8009660:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009664:	881b      	ldrh	r3, [r3, #0]
 8009666:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800966a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 800966e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009672:	2b00      	cmp	r3, #0
 8009674:	f000 808b 	beq.w	800978e <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6818      	ldr	r0, [r3, #0]
 800967c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800967e:	6959      	ldr	r1, [r3, #20]
 8009680:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009682:	88da      	ldrh	r2, [r3, #6]
 8009684:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009688:	f007 fb24 	bl	8010cd4 <USB_ReadPMA>
 800968c:	e07f      	b.n	800978e <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800968e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009690:	78db      	ldrb	r3, [r3, #3]
 8009692:	2b02      	cmp	r3, #2
 8009694:	d109      	bne.n	80096aa <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8009696:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009698:	461a      	mov	r2, r3
 800969a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 f9c6 	bl	8009a2e <HAL_PCD_EP_DB_Receive>
 80096a2:	4603      	mov	r3, r0
 80096a4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80096a8:	e071      	b.n	800978e <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	461a      	mov	r2, r3
 80096b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	4413      	add	r3, r2
 80096b8:	881b      	ldrh	r3, [r3, #0]
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096c4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	461a      	mov	r2, r3
 80096cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	441a      	add	r2, r3
 80096d4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80096d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	461a      	mov	r2, r3
 80096f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	4413      	add	r3, r2
 80096f8:	881b      	ldrh	r3, [r3, #0]
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009700:	2b00      	cmp	r3, #0
 8009702:	d022      	beq.n	800974a <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800970c:	b29b      	uxth	r3, r3
 800970e:	461a      	mov	r2, r3
 8009710:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	00db      	lsls	r3, r3, #3
 8009716:	4413      	add	r3, r2
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	6812      	ldr	r2, [r2, #0]
 800971c:	4413      	add	r3, r2
 800971e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009722:	881b      	ldrh	r3, [r3, #0]
 8009724:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009728:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800972c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009730:	2b00      	cmp	r3, #0
 8009732:	d02c      	beq.n	800978e <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6818      	ldr	r0, [r3, #0]
 8009738:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800973a:	6959      	ldr	r1, [r3, #20]
 800973c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800973e:	891a      	ldrh	r2, [r3, #8]
 8009740:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009744:	f007 fac6 	bl	8010cd4 <USB_ReadPMA>
 8009748:	e021      	b.n	800978e <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009752:	b29b      	uxth	r3, r3
 8009754:	461a      	mov	r2, r3
 8009756:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	00db      	lsls	r3, r3, #3
 800975c:	4413      	add	r3, r2
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	6812      	ldr	r2, [r2, #0]
 8009762:	4413      	add	r3, r2
 8009764:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009768:	881b      	ldrh	r3, [r3, #0]
 800976a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800976e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8009772:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009776:	2b00      	cmp	r3, #0
 8009778:	d009      	beq.n	800978e <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6818      	ldr	r0, [r3, #0]
 800977e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009780:	6959      	ldr	r1, [r3, #20]
 8009782:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009784:	895a      	ldrh	r2, [r3, #10]
 8009786:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800978a:	f007 faa3 	bl	8010cd4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800978e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009790:	69da      	ldr	r2, [r3, #28]
 8009792:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009796:	441a      	add	r2, r3
 8009798:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800979a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800979c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800979e:	695a      	ldr	r2, [r3, #20]
 80097a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80097a4:	441a      	add	r2, r3
 80097a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097a8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80097aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097ac:	699b      	ldr	r3, [r3, #24]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d005      	beq.n	80097be <PCD_EP_ISR_Handler+0x41e>
 80097b2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80097b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097b8:	691b      	ldr	r3, [r3, #16]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d206      	bcs.n	80097cc <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80097be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	4619      	mov	r1, r3
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f00d fea1 	bl	801750c <HAL_PCD_DataOutStageCallback>
 80097ca:	e005      	b.n	80097d8 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80097d2:	4618      	mov	r0, r3
 80097d4:	f006 fb57 	bl	800fe86 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80097d8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80097da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097de:	2b00      	cmp	r3, #0
 80097e0:	f000 8117 	beq.w	8009a12 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 80097e4:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80097e8:	4613      	mov	r3, r2
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	4413      	add	r3, r2
 80097ee:	00db      	lsls	r3, r3, #3
 80097f0:	3310      	adds	r3, #16
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	4413      	add	r3, r2
 80097f6:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	461a      	mov	r2, r3
 80097fe:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	4413      	add	r3, r2
 8009806:	881b      	ldrh	r3, [r3, #0]
 8009808:	b29b      	uxth	r3, r3
 800980a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800980e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009812:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	461a      	mov	r2, r3
 800981a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	441a      	add	r2, r3
 8009822:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009824:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009828:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800982c:	b29b      	uxth	r3, r3
 800982e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8009830:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009832:	78db      	ldrb	r3, [r3, #3]
 8009834:	2b01      	cmp	r3, #1
 8009836:	f040 80a1 	bne.w	800997c <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800983a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800983c:	2200      	movs	r2, #0
 800983e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8009840:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009842:	7b1b      	ldrb	r3, [r3, #12]
 8009844:	2b00      	cmp	r3, #0
 8009846:	f000 8092 	beq.w	800996e <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800984a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800984c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009850:	2b00      	cmp	r3, #0
 8009852:	d046      	beq.n	80098e2 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009854:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009856:	785b      	ldrb	r3, [r3, #1]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d126      	bne.n	80098aa <PCD_EP_ISR_Handler+0x50a>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	617b      	str	r3, [r7, #20]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800986a:	b29b      	uxth	r3, r3
 800986c:	461a      	mov	r2, r3
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	4413      	add	r3, r2
 8009872:	617b      	str	r3, [r7, #20]
 8009874:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	00da      	lsls	r2, r3, #3
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	4413      	add	r3, r2
 800987e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009882:	613b      	str	r3, [r7, #16]
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	881b      	ldrh	r3, [r3, #0]
 8009888:	b29b      	uxth	r3, r3
 800988a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800988e:	b29a      	uxth	r2, r3
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	801a      	strh	r2, [r3, #0]
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	881b      	ldrh	r3, [r3, #0]
 8009898:	b29b      	uxth	r3, r3
 800989a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800989e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098a2:	b29a      	uxth	r2, r3
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	801a      	strh	r2, [r3, #0]
 80098a8:	e061      	b.n	800996e <PCD_EP_ISR_Handler+0x5ce>
 80098aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098ac:	785b      	ldrb	r3, [r3, #1]
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d15d      	bne.n	800996e <PCD_EP_ISR_Handler+0x5ce>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	61fb      	str	r3, [r7, #28]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	461a      	mov	r2, r3
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	4413      	add	r3, r2
 80098c8:	61fb      	str	r3, [r7, #28]
 80098ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	00da      	lsls	r2, r3, #3
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	4413      	add	r3, r2
 80098d4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80098d8:	61bb      	str	r3, [r7, #24]
 80098da:	69bb      	ldr	r3, [r7, #24]
 80098dc:	2200      	movs	r2, #0
 80098de:	801a      	strh	r2, [r3, #0]
 80098e0:	e045      	b.n	800996e <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80098e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098ea:	785b      	ldrb	r3, [r3, #1]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d126      	bne.n	800993e <PCD_EP_ISR_Handler+0x59e>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098fe:	b29b      	uxth	r3, r3
 8009900:	461a      	mov	r2, r3
 8009902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009904:	4413      	add	r3, r2
 8009906:	627b      	str	r3, [r7, #36]	@ 0x24
 8009908:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	00da      	lsls	r2, r3, #3
 800990e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009910:	4413      	add	r3, r2
 8009912:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009916:	623b      	str	r3, [r7, #32]
 8009918:	6a3b      	ldr	r3, [r7, #32]
 800991a:	881b      	ldrh	r3, [r3, #0]
 800991c:	b29b      	uxth	r3, r3
 800991e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009922:	b29a      	uxth	r2, r3
 8009924:	6a3b      	ldr	r3, [r7, #32]
 8009926:	801a      	strh	r2, [r3, #0]
 8009928:	6a3b      	ldr	r3, [r7, #32]
 800992a:	881b      	ldrh	r3, [r3, #0]
 800992c:	b29b      	uxth	r3, r3
 800992e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009932:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009936:	b29a      	uxth	r2, r3
 8009938:	6a3b      	ldr	r3, [r7, #32]
 800993a:	801a      	strh	r2, [r3, #0]
 800993c:	e017      	b.n	800996e <PCD_EP_ISR_Handler+0x5ce>
 800993e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009940:	785b      	ldrb	r3, [r3, #1]
 8009942:	2b01      	cmp	r3, #1
 8009944:	d113      	bne.n	800996e <PCD_EP_ISR_Handler+0x5ce>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800994e:	b29b      	uxth	r3, r3
 8009950:	461a      	mov	r2, r3
 8009952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009954:	4413      	add	r3, r2
 8009956:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009958:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	00da      	lsls	r2, r3, #3
 800995e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009960:	4413      	add	r3, r2
 8009962:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009966:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800996a:	2200      	movs	r2, #0
 800996c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800996e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	4619      	mov	r1, r3
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f00d fde4 	bl	8017542 <HAL_PCD_DataInStageCallback>
 800997a:	e04a      	b.n	8009a12 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800997c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800997e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009982:	2b00      	cmp	r3, #0
 8009984:	d13f      	bne.n	8009a06 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800998e:	b29b      	uxth	r3, r3
 8009990:	461a      	mov	r2, r3
 8009992:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	00db      	lsls	r3, r3, #3
 8009998:	4413      	add	r3, r2
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	6812      	ldr	r2, [r2, #0]
 800999e:	4413      	add	r3, r2
 80099a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80099a4:	881b      	ldrh	r3, [r3, #0]
 80099a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099aa:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 80099ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099ae:	699a      	ldr	r2, [r3, #24]
 80099b0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d906      	bls.n	80099c4 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 80099b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099b8:	699a      	ldr	r2, [r3, #24]
 80099ba:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80099bc:	1ad2      	subs	r2, r2, r3
 80099be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099c0:	619a      	str	r2, [r3, #24]
 80099c2:	e002      	b.n	80099ca <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 80099c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099c6:	2200      	movs	r2, #0
 80099c8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80099ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099cc:	699b      	ldr	r3, [r3, #24]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d106      	bne.n	80099e0 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80099d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	4619      	mov	r1, r3
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f00d fdb2 	bl	8017542 <HAL_PCD_DataInStageCallback>
 80099de:	e018      	b.n	8009a12 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80099e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099e2:	695a      	ldr	r2, [r3, #20]
 80099e4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80099e6:	441a      	add	r2, r3
 80099e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099ea:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80099ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099ee:	69da      	ldr	r2, [r3, #28]
 80099f0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80099f2:	441a      	add	r2, r3
 80099f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099f6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80099fe:	4618      	mov	r0, r3
 8009a00:	f006 fa41 	bl	800fe86 <USB_EPStartXfer>
 8009a04:	e005      	b.n	8009a12 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8009a06:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009a08:	461a      	mov	r2, r3
 8009a0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 f917 	bl	8009c40 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	b21b      	sxth	r3, r3
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	f6ff acc3 	blt.w	80093aa <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8009a24:	2300      	movs	r3, #0
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3748      	adds	r7, #72	@ 0x48
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}

08009a2e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b088      	sub	sp, #32
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	60f8      	str	r0, [r7, #12]
 8009a36:	60b9      	str	r1, [r7, #8]
 8009a38:	4613      	mov	r3, r2
 8009a3a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009a3c:	88fb      	ldrh	r3, [r7, #6]
 8009a3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d07c      	beq.n	8009b40 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	461a      	mov	r2, r3
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	00db      	lsls	r3, r3, #3
 8009a58:	4413      	add	r3, r2
 8009a5a:	68fa      	ldr	r2, [r7, #12]
 8009a5c:	6812      	ldr	r2, [r2, #0]
 8009a5e:	4413      	add	r3, r2
 8009a60:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009a64:	881b      	ldrh	r3, [r3, #0]
 8009a66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a6a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	699a      	ldr	r2, [r3, #24]
 8009a70:	8b7b      	ldrh	r3, [r7, #26]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d306      	bcc.n	8009a84 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	699a      	ldr	r2, [r3, #24]
 8009a7a:	8b7b      	ldrh	r3, [r7, #26]
 8009a7c:	1ad2      	subs	r2, r2, r3
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	619a      	str	r2, [r3, #24]
 8009a82:	e002      	b.n	8009a8a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	2200      	movs	r2, #0
 8009a88:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	699b      	ldr	r3, [r3, #24]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d123      	bne.n	8009ada <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	461a      	mov	r2, r3
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	4413      	add	r3, r2
 8009aa0:	881b      	ldrh	r3, [r3, #0]
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009aa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009aac:	833b      	strh	r3, [r7, #24]
 8009aae:	8b3b      	ldrh	r3, [r7, #24]
 8009ab0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009ab4:	833b      	strh	r3, [r7, #24]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	461a      	mov	r2, r3
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	441a      	add	r2, r3
 8009ac4:	8b3b      	ldrh	r3, [r7, #24]
 8009ac6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009aca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ace:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ad2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009ada:	88fb      	ldrh	r3, [r7, #6]
 8009adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d01f      	beq.n	8009b24 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	461a      	mov	r2, r3
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	4413      	add	r3, r2
 8009af2:	881b      	ldrh	r3, [r3, #0]
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009afa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009afe:	82fb      	strh	r3, [r7, #22]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	461a      	mov	r2, r3
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	441a      	add	r2, r3
 8009b0e:	8afb      	ldrh	r3, [r7, #22]
 8009b10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b1c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009b24:	8b7b      	ldrh	r3, [r7, #26]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	f000 8085 	beq.w	8009c36 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	6818      	ldr	r0, [r3, #0]
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	6959      	ldr	r1, [r3, #20]
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	891a      	ldrh	r2, [r3, #8]
 8009b38:	8b7b      	ldrh	r3, [r7, #26]
 8009b3a:	f007 f8cb 	bl	8010cd4 <USB_ReadPMA>
 8009b3e:	e07a      	b.n	8009c36 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	00db      	lsls	r3, r3, #3
 8009b52:	4413      	add	r3, r2
 8009b54:	68fa      	ldr	r2, [r7, #12]
 8009b56:	6812      	ldr	r2, [r2, #0]
 8009b58:	4413      	add	r3, r2
 8009b5a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009b5e:	881b      	ldrh	r3, [r3, #0]
 8009b60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b64:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	699a      	ldr	r2, [r3, #24]
 8009b6a:	8b7b      	ldrh	r3, [r7, #26]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d306      	bcc.n	8009b7e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	699a      	ldr	r2, [r3, #24]
 8009b74:	8b7b      	ldrh	r3, [r7, #26]
 8009b76:	1ad2      	subs	r2, r2, r3
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	619a      	str	r2, [r3, #24]
 8009b7c:	e002      	b.n	8009b84 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	2200      	movs	r2, #0
 8009b82:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	699b      	ldr	r3, [r3, #24]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d123      	bne.n	8009bd4 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	461a      	mov	r2, r3
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	4413      	add	r3, r2
 8009b9a:	881b      	ldrh	r3, [r3, #0]
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009ba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ba6:	83fb      	strh	r3, [r7, #30]
 8009ba8:	8bfb      	ldrh	r3, [r7, #30]
 8009baa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009bae:	83fb      	strh	r3, [r7, #30]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	009b      	lsls	r3, r3, #2
 8009bbc:	441a      	add	r2, r3
 8009bbe:	8bfb      	ldrh	r3, [r7, #30]
 8009bc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8009bd4:	88fb      	ldrh	r3, [r7, #6]
 8009bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d11f      	bne.n	8009c1e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	461a      	mov	r2, r3
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	4413      	add	r3, r2
 8009bec:	881b      	ldrh	r3, [r3, #0]
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009bf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bf8:	83bb      	strh	r3, [r7, #28]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	461a      	mov	r2, r3
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	441a      	add	r2, r3
 8009c08:	8bbb      	ldrh	r3, [r7, #28]
 8009c0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c16:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009c1e:	8b7b      	ldrh	r3, [r7, #26]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d008      	beq.n	8009c36 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	6818      	ldr	r0, [r3, #0]
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	6959      	ldr	r1, [r3, #20]
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	895a      	ldrh	r2, [r3, #10]
 8009c30:	8b7b      	ldrh	r3, [r7, #26]
 8009c32:	f007 f84f 	bl	8010cd4 <USB_ReadPMA>
    }
  }

  return count;
 8009c36:	8b7b      	ldrh	r3, [r7, #26]
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3720      	adds	r7, #32
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b0a6      	sub	sp, #152	@ 0x98
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009c4e:	88fb      	ldrh	r3, [r7, #6]
 8009c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f000 81f7 	beq.w	800a048 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	461a      	mov	r2, r3
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	00db      	lsls	r3, r3, #3
 8009c6c:	4413      	add	r3, r2
 8009c6e:	68fa      	ldr	r2, [r7, #12]
 8009c70:	6812      	ldr	r2, [r2, #0]
 8009c72:	4413      	add	r3, r2
 8009c74:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009c78:	881b      	ldrh	r3, [r3, #0]
 8009c7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c7e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	699a      	ldr	r2, [r3, #24]
 8009c86:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d907      	bls.n	8009c9e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	699a      	ldr	r2, [r3, #24]
 8009c92:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009c96:	1ad2      	subs	r2, r2, r3
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	619a      	str	r2, [r3, #24]
 8009c9c:	e002      	b.n	8009ca4 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	699b      	ldr	r3, [r3, #24]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	f040 80e1 	bne.w	8009e70 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	785b      	ldrb	r3, [r3, #1]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d126      	bne.n	8009d04 <HAL_PCD_EP_DB_Transmit+0xc4>
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	633b      	str	r3, [r7, #48]	@ 0x30
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cca:	4413      	add	r3, r2
 8009ccc:	633b      	str	r3, [r7, #48]	@ 0x30
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	00da      	lsls	r2, r3, #3
 8009cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd6:	4413      	add	r3, r2
 8009cd8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ce0:	881b      	ldrh	r3, [r3, #0]
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ce8:	b29a      	uxth	r2, r3
 8009cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cec:	801a      	strh	r2, [r3, #0]
 8009cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cf0:	881b      	ldrh	r3, [r3, #0]
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cfc:	b29a      	uxth	r2, r3
 8009cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d00:	801a      	strh	r2, [r3, #0]
 8009d02:	e01a      	b.n	8009d3a <HAL_PCD_EP_DB_Transmit+0xfa>
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	785b      	ldrb	r3, [r3, #1]
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d116      	bne.n	8009d3a <HAL_PCD_EP_DB_Transmit+0xfa>
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d20:	4413      	add	r3, r2
 8009d22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	00da      	lsls	r2, r3, #3
 8009d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d2c:	4413      	add	r3, r2
 8009d2e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009d32:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d36:	2200      	movs	r2, #0
 8009d38:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	785b      	ldrb	r3, [r3, #1]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d126      	bne.n	8009d96 <HAL_PCD_EP_DB_Transmit+0x156>
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	623b      	str	r3, [r7, #32]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	461a      	mov	r2, r3
 8009d5a:	6a3b      	ldr	r3, [r7, #32]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	623b      	str	r3, [r7, #32]
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	00da      	lsls	r2, r3, #3
 8009d66:	6a3b      	ldr	r3, [r7, #32]
 8009d68:	4413      	add	r3, r2
 8009d6a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009d6e:	61fb      	str	r3, [r7, #28]
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	881b      	ldrh	r3, [r3, #0]
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	801a      	strh	r2, [r3, #0]
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	881b      	ldrh	r3, [r3, #0]
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d8e:	b29a      	uxth	r2, r3
 8009d90:	69fb      	ldr	r3, [r7, #28]
 8009d92:	801a      	strh	r2, [r3, #0]
 8009d94:	e017      	b.n	8009dc6 <HAL_PCD_EP_DB_Transmit+0x186>
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	785b      	ldrb	r3, [r3, #1]
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d113      	bne.n	8009dc6 <HAL_PCD_EP_DB_Transmit+0x186>
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	461a      	mov	r2, r3
 8009daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dac:	4413      	add	r3, r2
 8009dae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	00da      	lsls	r2, r3, #3
 8009db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009db8:	4413      	add	r3, r2
 8009dba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009dbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8009dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	78db      	ldrb	r3, [r3, #3]
 8009dca:	2b02      	cmp	r3, #2
 8009dcc:	d123      	bne.n	8009e16 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	4413      	add	r3, r2
 8009ddc:	881b      	ldrh	r3, [r3, #0]
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009de4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009de8:	837b      	strh	r3, [r7, #26]
 8009dea:	8b7b      	ldrh	r3, [r7, #26]
 8009dec:	f083 0320 	eor.w	r3, r3, #32
 8009df0:	837b      	strh	r3, [r7, #26]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	461a      	mov	r2, r3
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	441a      	add	r2, r3
 8009e00:	8b7b      	ldrh	r3, [r7, #26]
 8009e02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f00d fb90 	bl	8017542 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009e22:	88fb      	ldrh	r3, [r7, #6]
 8009e24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d01f      	beq.n	8009e6c <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	461a      	mov	r2, r3
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	4413      	add	r3, r2
 8009e3a:	881b      	ldrh	r3, [r3, #0]
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e46:	833b      	strh	r3, [r7, #24]
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	441a      	add	r2, r3
 8009e56:	8b3b      	ldrh	r3, [r7, #24]
 8009e58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009e64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	e31f      	b.n	800a4b0 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009e70:	88fb      	ldrh	r3, [r7, #6]
 8009e72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d021      	beq.n	8009ebe <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	461a      	mov	r2, r3
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	4413      	add	r3, r2
 8009e88:	881b      	ldrh	r3, [r3, #0]
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e94:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	441a      	add	r2, r3
 8009ea6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009eaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009eae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009eb2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009eb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	f040 82ca 	bne.w	800a45e <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	695a      	ldr	r2, [r3, #20]
 8009ece:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009ed2:	441a      	add	r2, r3
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	69da      	ldr	r2, [r3, #28]
 8009edc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009ee0:	441a      	add	r2, r3
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	6a1a      	ldr	r2, [r3, #32]
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	691b      	ldr	r3, [r3, #16]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d309      	bcc.n	8009f06 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	691b      	ldr	r3, [r3, #16]
 8009ef6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	6a1a      	ldr	r2, [r3, #32]
 8009efc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009efe:	1ad2      	subs	r2, r2, r3
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	621a      	str	r2, [r3, #32]
 8009f04:	e015      	b.n	8009f32 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	6a1b      	ldr	r3, [r3, #32]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d107      	bne.n	8009f1e <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8009f0e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009f12:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	2200      	movs	r2, #0
 8009f18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8009f1c:	e009      	b.n	8009f32 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	2200      	movs	r2, #0
 8009f22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	6a1b      	ldr	r3, [r3, #32]
 8009f2a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	785b      	ldrb	r3, [r3, #1]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d15f      	bne.n	8009ffa <HAL_PCD_EP_DB_Transmit+0x3ba>
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f48:	b29b      	uxth	r3, r3
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f4e:	4413      	add	r3, r2
 8009f50:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	00da      	lsls	r2, r3, #3
 8009f58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f5a:	4413      	add	r3, r2
 8009f5c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f64:	881b      	ldrh	r3, [r3, #0]
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f6c:	b29a      	uxth	r2, r3
 8009f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f70:	801a      	strh	r2, [r3, #0]
 8009f72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d10a      	bne.n	8009f8e <HAL_PCD_EP_DB_Transmit+0x34e>
 8009f78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f7a:	881b      	ldrh	r3, [r3, #0]
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f86:	b29a      	uxth	r2, r3
 8009f88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f8a:	801a      	strh	r2, [r3, #0]
 8009f8c:	e051      	b.n	800a032 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8009f8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f90:	2b3e      	cmp	r3, #62	@ 0x3e
 8009f92:	d816      	bhi.n	8009fc2 <HAL_PCD_EP_DB_Transmit+0x382>
 8009f94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f96:	085b      	lsrs	r3, r3, #1
 8009f98:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f9c:	f003 0301 	and.w	r3, r3, #1
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d002      	beq.n	8009faa <HAL_PCD_EP_DB_Transmit+0x36a>
 8009fa4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	653b      	str	r3, [r7, #80]	@ 0x50
 8009faa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fac:	881b      	ldrh	r3, [r3, #0]
 8009fae:	b29a      	uxth	r2, r3
 8009fb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	029b      	lsls	r3, r3, #10
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	b29a      	uxth	r2, r3
 8009fbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fbe:	801a      	strh	r2, [r3, #0]
 8009fc0:	e037      	b.n	800a032 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8009fc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009fc4:	095b      	lsrs	r3, r3, #5
 8009fc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8009fc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009fca:	f003 031f 	and.w	r3, r3, #31
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d102      	bne.n	8009fd8 <HAL_PCD_EP_DB_Transmit+0x398>
 8009fd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fd4:	3b01      	subs	r3, #1
 8009fd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8009fd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fda:	881b      	ldrh	r3, [r3, #0]
 8009fdc:	b29a      	uxth	r2, r3
 8009fde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	029b      	lsls	r3, r3, #10
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	b29b      	uxth	r3, r3
 8009fea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ff2:	b29a      	uxth	r2, r3
 8009ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ff6:	801a      	strh	r2, [r3, #0]
 8009ff8:	e01b      	b.n	800a032 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	785b      	ldrb	r3, [r3, #1]
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d117      	bne.n	800a032 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a010:	b29b      	uxth	r3, r3
 800a012:	461a      	mov	r2, r3
 800a014:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a016:	4413      	add	r3, r2
 800a018:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	00da      	lsls	r2, r3, #3
 800a020:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a022:	4413      	add	r3, r2
 800a024:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a028:	647b      	str	r3, [r7, #68]	@ 0x44
 800a02a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a02c:	b29a      	uxth	r2, r3
 800a02e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a030:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	6818      	ldr	r0, [r3, #0]
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	6959      	ldr	r1, [r3, #20]
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	891a      	ldrh	r2, [r3, #8]
 800a03e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a040:	b29b      	uxth	r3, r3
 800a042:	f006 fe04 	bl	8010c4e <USB_WritePMA>
 800a046:	e20a      	b.n	800a45e <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a050:	b29b      	uxth	r3, r3
 800a052:	461a      	mov	r2, r3
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	00db      	lsls	r3, r3, #3
 800a05a:	4413      	add	r3, r2
 800a05c:	68fa      	ldr	r2, [r7, #12]
 800a05e:	6812      	ldr	r2, [r2, #0]
 800a060:	4413      	add	r3, r2
 800a062:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a066:	881b      	ldrh	r3, [r3, #0]
 800a068:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a06c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	699a      	ldr	r2, [r3, #24]
 800a074:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a078:	429a      	cmp	r2, r3
 800a07a:	d307      	bcc.n	800a08c <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	699a      	ldr	r2, [r3, #24]
 800a080:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a084:	1ad2      	subs	r2, r2, r3
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	619a      	str	r2, [r3, #24]
 800a08a:	e002      	b.n	800a092 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	2200      	movs	r2, #0
 800a090:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	699b      	ldr	r3, [r3, #24]
 800a096:	2b00      	cmp	r3, #0
 800a098:	f040 80f6 	bne.w	800a288 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	785b      	ldrb	r3, [r3, #1]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d126      	bne.n	800a0f2 <HAL_PCD_EP_DB_Transmit+0x4b2>
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	677b      	str	r3, [r7, #116]	@ 0x74
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a0b8:	4413      	add	r3, r2
 800a0ba:	677b      	str	r3, [r7, #116]	@ 0x74
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	00da      	lsls	r2, r3, #3
 800a0c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a0c4:	4413      	add	r3, r2
 800a0c6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a0ca:	673b      	str	r3, [r7, #112]	@ 0x70
 800a0cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a0ce:	881b      	ldrh	r3, [r3, #0]
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a0d6:	b29a      	uxth	r2, r3
 800a0d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a0da:	801a      	strh	r2, [r3, #0]
 800a0dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a0de:	881b      	ldrh	r3, [r3, #0]
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0ea:	b29a      	uxth	r2, r3
 800a0ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a0ee:	801a      	strh	r2, [r3, #0]
 800a0f0:	e01a      	b.n	800a128 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	785b      	ldrb	r3, [r3, #1]
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d116      	bne.n	800a128 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a108:	b29b      	uxth	r3, r3
 800a10a:	461a      	mov	r2, r3
 800a10c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a10e:	4413      	add	r3, r2
 800a110:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	00da      	lsls	r2, r3, #3
 800a118:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a11a:	4413      	add	r3, r2
 800a11c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a120:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a122:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a124:	2200      	movs	r2, #0
 800a126:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	785b      	ldrb	r3, [r3, #1]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d12f      	bne.n	800a198 <HAL_PCD_EP_DB_Transmit+0x558>
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a148:	b29b      	uxth	r3, r3
 800a14a:	461a      	mov	r2, r3
 800a14c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a150:	4413      	add	r3, r2
 800a152:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	00da      	lsls	r2, r3, #3
 800a15c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a160:	4413      	add	r3, r2
 800a162:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a166:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a16a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a16e:	881b      	ldrh	r3, [r3, #0]
 800a170:	b29b      	uxth	r3, r3
 800a172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a176:	b29a      	uxth	r2, r3
 800a178:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a17c:	801a      	strh	r2, [r3, #0]
 800a17e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a182:	881b      	ldrh	r3, [r3, #0]
 800a184:	b29b      	uxth	r3, r3
 800a186:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a18a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a18e:	b29a      	uxth	r2, r3
 800a190:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a194:	801a      	strh	r2, [r3, #0]
 800a196:	e01c      	b.n	800a1d2 <HAL_PCD_EP_DB_Transmit+0x592>
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	785b      	ldrb	r3, [r3, #1]
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d118      	bne.n	800a1d2 <HAL_PCD_EP_DB_Transmit+0x592>
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a1b0:	4413      	add	r3, r2
 800a1b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	00da      	lsls	r2, r3, #3
 800a1bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a1c0:	4413      	add	r3, r2
 800a1c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a1c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a1ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	78db      	ldrb	r3, [r3, #3]
 800a1d6:	2b02      	cmp	r3, #2
 800a1d8:	d127      	bne.n	800a22a <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	461a      	mov	r2, r3
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	4413      	add	r3, r2
 800a1e8:	881b      	ldrh	r3, [r3, #0]
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a1f4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800a1f8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800a1fc:	f083 0320 	eor.w	r3, r3, #32
 800a200:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	461a      	mov	r2, r3
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	009b      	lsls	r3, r3, #2
 800a210:	441a      	add	r2, r3
 800a212:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800a216:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a21a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a21e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a222:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a226:	b29b      	uxth	r3, r3
 800a228:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	4619      	mov	r1, r3
 800a230:	68f8      	ldr	r0, [r7, #12]
 800a232:	f00d f986 	bl	8017542 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a236:	88fb      	ldrh	r3, [r7, #6]
 800a238:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d121      	bne.n	800a284 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	461a      	mov	r2, r3
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	4413      	add	r3, r2
 800a24e:	881b      	ldrh	r3, [r3, #0]
 800a250:	b29b      	uxth	r3, r3
 800a252:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a256:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a25a:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	461a      	mov	r2, r3
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	441a      	add	r2, r3
 800a26c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a270:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a274:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a278:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a27c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a280:	b29b      	uxth	r3, r3
 800a282:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800a284:	2300      	movs	r3, #0
 800a286:	e113      	b.n	800a4b0 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a288:	88fb      	ldrh	r3, [r7, #6]
 800a28a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d121      	bne.n	800a2d6 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	461a      	mov	r2, r3
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	4413      	add	r3, r2
 800a2a0:	881b      	ldrh	r3, [r3, #0]
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a2a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2ac:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	441a      	add	r2, r3
 800a2be:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a2c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a2ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	f040 80be 	bne.w	800a45e <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	695a      	ldr	r2, [r3, #20]
 800a2e6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a2ea:	441a      	add	r2, r3
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	69da      	ldr	r2, [r3, #28]
 800a2f4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a2f8:	441a      	add	r2, r3
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	6a1a      	ldr	r2, [r3, #32]
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	691b      	ldr	r3, [r3, #16]
 800a306:	429a      	cmp	r2, r3
 800a308:	d309      	bcc.n	800a31e <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	691b      	ldr	r3, [r3, #16]
 800a30e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	6a1a      	ldr	r2, [r3, #32]
 800a314:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a316:	1ad2      	subs	r2, r2, r3
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	621a      	str	r2, [r3, #32]
 800a31c:	e015      	b.n	800a34a <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	6a1b      	ldr	r3, [r3, #32]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d107      	bne.n	800a336 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800a326:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a32a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	2200      	movs	r2, #0
 800a330:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800a334:	e009      	b.n	800a34a <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	6a1b      	ldr	r3, [r3, #32]
 800a33a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	2200      	movs	r2, #0
 800a340:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	2200      	movs	r2, #0
 800a346:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	785b      	ldrb	r3, [r3, #1]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d15f      	bne.n	800a418 <HAL_PCD_EP_DB_Transmit+0x7d8>
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a366:	b29b      	uxth	r3, r3
 800a368:	461a      	mov	r2, r3
 800a36a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a36c:	4413      	add	r3, r2
 800a36e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	00da      	lsls	r2, r3, #3
 800a376:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a378:	4413      	add	r3, r2
 800a37a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a37e:	667b      	str	r3, [r7, #100]	@ 0x64
 800a380:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a382:	881b      	ldrh	r3, [r3, #0]
 800a384:	b29b      	uxth	r3, r3
 800a386:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a38a:	b29a      	uxth	r2, r3
 800a38c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a38e:	801a      	strh	r2, [r3, #0]
 800a390:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a392:	2b00      	cmp	r3, #0
 800a394:	d10a      	bne.n	800a3ac <HAL_PCD_EP_DB_Transmit+0x76c>
 800a396:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a398:	881b      	ldrh	r3, [r3, #0]
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3a4:	b29a      	uxth	r2, r3
 800a3a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a3a8:	801a      	strh	r2, [r3, #0]
 800a3aa:	e04e      	b.n	800a44a <HAL_PCD_EP_DB_Transmit+0x80a>
 800a3ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a3ae:	2b3e      	cmp	r3, #62	@ 0x3e
 800a3b0:	d816      	bhi.n	800a3e0 <HAL_PCD_EP_DB_Transmit+0x7a0>
 800a3b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a3b4:	085b      	lsrs	r3, r3, #1
 800a3b6:	663b      	str	r3, [r7, #96]	@ 0x60
 800a3b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a3ba:	f003 0301 	and.w	r3, r3, #1
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d002      	beq.n	800a3c8 <HAL_PCD_EP_DB_Transmit+0x788>
 800a3c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	663b      	str	r3, [r7, #96]	@ 0x60
 800a3c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a3ca:	881b      	ldrh	r3, [r3, #0]
 800a3cc:	b29a      	uxth	r2, r3
 800a3ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	029b      	lsls	r3, r3, #10
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	b29a      	uxth	r2, r3
 800a3da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a3dc:	801a      	strh	r2, [r3, #0]
 800a3de:	e034      	b.n	800a44a <HAL_PCD_EP_DB_Transmit+0x80a>
 800a3e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a3e2:	095b      	lsrs	r3, r3, #5
 800a3e4:	663b      	str	r3, [r7, #96]	@ 0x60
 800a3e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a3e8:	f003 031f 	and.w	r3, r3, #31
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d102      	bne.n	800a3f6 <HAL_PCD_EP_DB_Transmit+0x7b6>
 800a3f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a3f2:	3b01      	subs	r3, #1
 800a3f4:	663b      	str	r3, [r7, #96]	@ 0x60
 800a3f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a3f8:	881b      	ldrh	r3, [r3, #0]
 800a3fa:	b29a      	uxth	r2, r3
 800a3fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a3fe:	b29b      	uxth	r3, r3
 800a400:	029b      	lsls	r3, r3, #10
 800a402:	b29b      	uxth	r3, r3
 800a404:	4313      	orrs	r3, r2
 800a406:	b29b      	uxth	r3, r3
 800a408:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a40c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a410:	b29a      	uxth	r2, r3
 800a412:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a414:	801a      	strh	r2, [r3, #0]
 800a416:	e018      	b.n	800a44a <HAL_PCD_EP_DB_Transmit+0x80a>
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	785b      	ldrb	r3, [r3, #1]
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d114      	bne.n	800a44a <HAL_PCD_EP_DB_Transmit+0x80a>
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a428:	b29b      	uxth	r3, r3
 800a42a:	461a      	mov	r2, r3
 800a42c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a42e:	4413      	add	r3, r2
 800a430:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	00da      	lsls	r2, r3, #3
 800a438:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a43a:	4413      	add	r3, r2
 800a43c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a440:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a442:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a444:	b29a      	uxth	r2, r3
 800a446:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a448:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	6818      	ldr	r0, [r3, #0]
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	6959      	ldr	r1, [r3, #20]
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	895a      	ldrh	r2, [r3, #10]
 800a456:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a458:	b29b      	uxth	r3, r3
 800a45a:	f006 fbf8 	bl	8010c4e <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	461a      	mov	r2, r3
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	4413      	add	r3, r2
 800a46c:	881b      	ldrh	r3, [r3, #0]
 800a46e:	b29b      	uxth	r3, r3
 800a470:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a474:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a478:	82fb      	strh	r3, [r7, #22]
 800a47a:	8afb      	ldrh	r3, [r7, #22]
 800a47c:	f083 0310 	eor.w	r3, r3, #16
 800a480:	82fb      	strh	r3, [r7, #22]
 800a482:	8afb      	ldrh	r3, [r7, #22]
 800a484:	f083 0320 	eor.w	r3, r3, #32
 800a488:	82fb      	strh	r3, [r7, #22]
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	461a      	mov	r2, r3
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	009b      	lsls	r3, r3, #2
 800a496:	441a      	add	r2, r3
 800a498:	8afb      	ldrh	r3, [r7, #22]
 800a49a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a49e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a4a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a4a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800a4ae:	2300      	movs	r3, #0
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3798      	adds	r7, #152	@ 0x98
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b087      	sub	sp, #28
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	607b      	str	r3, [r7, #4]
 800a4c2:	460b      	mov	r3, r1
 800a4c4:	817b      	strh	r3, [r7, #10]
 800a4c6:	4613      	mov	r3, r2
 800a4c8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800a4ca:	897b      	ldrh	r3, [r7, #10]
 800a4cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4d0:	b29b      	uxth	r3, r3
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00b      	beq.n	800a4ee <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a4d6:	897b      	ldrh	r3, [r7, #10]
 800a4d8:	f003 0207 	and.w	r2, r3, #7
 800a4dc:	4613      	mov	r3, r2
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	4413      	add	r3, r2
 800a4e2:	00db      	lsls	r3, r3, #3
 800a4e4:	3310      	adds	r3, #16
 800a4e6:	68fa      	ldr	r2, [r7, #12]
 800a4e8:	4413      	add	r3, r2
 800a4ea:	617b      	str	r3, [r7, #20]
 800a4ec:	e009      	b.n	800a502 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a4ee:	897a      	ldrh	r2, [r7, #10]
 800a4f0:	4613      	mov	r3, r2
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	4413      	add	r3, r2
 800a4f6:	00db      	lsls	r3, r3, #3
 800a4f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a4fc:	68fa      	ldr	r2, [r7, #12]
 800a4fe:	4413      	add	r3, r2
 800a500:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800a502:	893b      	ldrh	r3, [r7, #8]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d107      	bne.n	800a518 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	2200      	movs	r2, #0
 800a50c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	b29a      	uxth	r2, r3
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	80da      	strh	r2, [r3, #6]
 800a516:	e00b      	b.n	800a530 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	2201      	movs	r2, #1
 800a51c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	b29a      	uxth	r2, r3
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	0c1b      	lsrs	r3, r3, #16
 800a52a:	b29a      	uxth	r2, r3
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a530:	2300      	movs	r3, #0
}
 800a532:	4618      	mov	r0, r3
 800a534:	371c      	adds	r7, #28
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr

0800a53e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a53e:	b480      	push	{r7}
 800a540:	b085      	sub	sp, #20
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2201      	movs	r2, #1
 800a550:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2200      	movs	r2, #0
 800a558:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a562:	b29b      	uxth	r3, r3
 800a564:	f043 0301 	orr.w	r3, r3, #1
 800a568:	b29a      	uxth	r2, r3
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a576:	b29b      	uxth	r3, r3
 800a578:	f043 0302 	orr.w	r3, r3, #2
 800a57c:	b29a      	uxth	r2, r3
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800a584:	2300      	movs	r3, #0
}
 800a586:	4618      	mov	r0, r3
 800a588:	3714      	adds	r7, #20
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr
	...

0800a594 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a594:	b480      	push	{r7}
 800a596:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a598:	4b05      	ldr	r3, [pc, #20]	@ (800a5b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a04      	ldr	r2, [pc, #16]	@ (800a5b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a59e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a5a2:	6013      	str	r3, [r2, #0]
}
 800a5a4:	bf00      	nop
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr
 800a5ae:	bf00      	nop
 800a5b0:	58000400 	.word	0x58000400

0800a5b4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800a5b8:	4b04      	ldr	r3, [pc, #16]	@ (800a5cc <HAL_PWREx_GetVoltageRange+0x18>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr
 800a5ca:	bf00      	nop
 800a5cc:	58000400 	.word	0x58000400

0800a5d0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800a5d4:	4b05      	ldr	r3, [pc, #20]	@ (800a5ec <HAL_PWREx_EnableVddUSB+0x1c>)
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	4a04      	ldr	r2, [pc, #16]	@ (800a5ec <HAL_PWREx_EnableVddUSB+0x1c>)
 800a5da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a5de:	6053      	str	r3, [r2, #4]
}
 800a5e0:	bf00      	nop
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr
 800a5ea:	bf00      	nop
 800a5ec:	58000400 	.word	0x58000400

0800a5f0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800a5f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a5fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a602:	d101      	bne.n	800a608 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800a604:	2301      	movs	r3, #1
 800a606:	e000      	b.n	800a60a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr

0800a614 <LL_RCC_HSE_Enable>:
{
 800a614:	b480      	push	{r7}
 800a616:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800a618:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a622:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a626:	6013      	str	r3, [r2, #0]
}
 800a628:	bf00      	nop
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr

0800a632 <LL_RCC_HSE_Disable>:
{
 800a632:	b480      	push	{r7}
 800a634:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800a636:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a640:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a644:	6013      	str	r3, [r2, #0]
}
 800a646:	bf00      	nop
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <LL_RCC_HSE_IsReady>:
{
 800a650:	b480      	push	{r7}
 800a652:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800a654:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a65e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a662:	d101      	bne.n	800a668 <LL_RCC_HSE_IsReady+0x18>
 800a664:	2301      	movs	r3, #1
 800a666:	e000      	b.n	800a66a <LL_RCC_HSE_IsReady+0x1a>
 800a668:	2300      	movs	r3, #0
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <LL_RCC_HSI_Enable>:
{
 800a674:	b480      	push	{r7}
 800a676:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800a678:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a682:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a686:	6013      	str	r3, [r2, #0]
}
 800a688:	bf00      	nop
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr

0800a692 <LL_RCC_HSI_Disable>:
{
 800a692:	b480      	push	{r7}
 800a694:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800a696:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a6a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a6a4:	6013      	str	r3, [r2, #0]
}
 800a6a6:	bf00      	nop
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <LL_RCC_HSI_IsReady>:
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a6b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a6be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a6c2:	d101      	bne.n	800a6c8 <LL_RCC_HSI_IsReady+0x18>
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	e000      	b.n	800a6ca <LL_RCC_HSI_IsReady+0x1a>
 800a6c8:	2300      	movs	r3, #0
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr

0800a6d4 <LL_RCC_HSI_SetCalibTrimming>:
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b083      	sub	sp, #12
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800a6dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	061b      	lsls	r3, r3, #24
 800a6ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	604b      	str	r3, [r1, #4]
}
 800a6f2:	bf00      	nop
 800a6f4:	370c      	adds	r7, #12
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr

0800a6fe <LL_RCC_HSI48_Enable>:
{
 800a6fe:	b480      	push	{r7}
 800a700:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800a702:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a706:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a70a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a70e:	f043 0301 	orr.w	r3, r3, #1
 800a712:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800a716:	bf00      	nop
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr

0800a720 <LL_RCC_HSI48_Disable>:
{
 800a720:	b480      	push	{r7}
 800a722:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800a724:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a728:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a72c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a730:	f023 0301 	bic.w	r3, r3, #1
 800a734:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800a738:	bf00      	nop
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr

0800a742 <LL_RCC_HSI48_IsReady>:
{
 800a742:	b480      	push	{r7}
 800a744:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800a746:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a74a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a74e:	f003 0302 	and.w	r3, r3, #2
 800a752:	2b02      	cmp	r3, #2
 800a754:	d101      	bne.n	800a75a <LL_RCC_HSI48_IsReady+0x18>
 800a756:	2301      	movs	r3, #1
 800a758:	e000      	b.n	800a75c <LL_RCC_HSI48_IsReady+0x1a>
 800a75a:	2300      	movs	r3, #0
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr

0800a766 <LL_RCC_LSE_Enable>:
{
 800a766:	b480      	push	{r7}
 800a768:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a76a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a76e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a772:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a776:	f043 0301 	orr.w	r3, r3, #1
 800a77a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a77e:	bf00      	nop
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr

0800a788 <LL_RCC_LSE_Disable>:
{
 800a788:	b480      	push	{r7}
 800a78a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a78c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a790:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a794:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a798:	f023 0301 	bic.w	r3, r3, #1
 800a79c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a7a0:	bf00      	nop
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr

0800a7aa <LL_RCC_LSE_EnableBypass>:
{
 800a7aa:	b480      	push	{r7}
 800a7ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a7ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a7b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a7ba:	f043 0304 	orr.w	r3, r3, #4
 800a7be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a7c2:	bf00      	nop
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr

0800a7cc <LL_RCC_LSE_DisableBypass>:
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a7d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a7d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a7dc:	f023 0304 	bic.w	r3, r3, #4
 800a7e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a7e4:	bf00      	nop
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr

0800a7ee <LL_RCC_LSE_IsReady>:
{
 800a7ee:	b480      	push	{r7}
 800a7f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a7f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a7f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7fa:	f003 0302 	and.w	r3, r3, #2
 800a7fe:	2b02      	cmp	r3, #2
 800a800:	d101      	bne.n	800a806 <LL_RCC_LSE_IsReady+0x18>
 800a802:	2301      	movs	r3, #1
 800a804:	e000      	b.n	800a808 <LL_RCC_LSE_IsReady+0x1a>
 800a806:	2300      	movs	r3, #0
}
 800a808:	4618      	mov	r0, r3
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr

0800a812 <LL_RCC_LSI1_Enable>:
{
 800a812:	b480      	push	{r7}
 800a814:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800a816:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a81a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a81e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a822:	f043 0301 	orr.w	r3, r3, #1
 800a826:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a82a:	bf00      	nop
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr

0800a834 <LL_RCC_LSI1_Disable>:
{
 800a834:	b480      	push	{r7}
 800a836:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800a838:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a83c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a840:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a844:	f023 0301 	bic.w	r3, r3, #1
 800a848:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a84c:	bf00      	nop
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr

0800a856 <LL_RCC_LSI1_IsReady>:
{
 800a856:	b480      	push	{r7}
 800a858:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800a85a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a85e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a862:	f003 0302 	and.w	r3, r3, #2
 800a866:	2b02      	cmp	r3, #2
 800a868:	d101      	bne.n	800a86e <LL_RCC_LSI1_IsReady+0x18>
 800a86a:	2301      	movs	r3, #1
 800a86c:	e000      	b.n	800a870 <LL_RCC_LSI1_IsReady+0x1a>
 800a86e:	2300      	movs	r3, #0
}
 800a870:	4618      	mov	r0, r3
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr

0800a87a <LL_RCC_LSI2_Enable>:
{
 800a87a:	b480      	push	{r7}
 800a87c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800a87e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a882:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a886:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a88a:	f043 0304 	orr.w	r3, r3, #4
 800a88e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a892:	bf00      	nop
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr

0800a89c <LL_RCC_LSI2_Disable>:
{
 800a89c:	b480      	push	{r7}
 800a89e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800a8a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a8a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a8a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a8ac:	f023 0304 	bic.w	r3, r3, #4
 800a8b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a8b4:	bf00      	nop
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr

0800a8be <LL_RCC_LSI2_IsReady>:
{
 800a8be:	b480      	push	{r7}
 800a8c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800a8c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a8c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a8ca:	f003 0308 	and.w	r3, r3, #8
 800a8ce:	2b08      	cmp	r3, #8
 800a8d0:	d101      	bne.n	800a8d6 <LL_RCC_LSI2_IsReady+0x18>
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e000      	b.n	800a8d8 <LL_RCC_LSI2_IsReady+0x1a>
 800a8d6:	2300      	movs	r3, #0
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr

0800a8e2 <LL_RCC_LSI2_SetTrimming>:
{
 800a8e2:	b480      	push	{r7}
 800a8e4:	b083      	sub	sp, #12
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800a8ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a8ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a8f2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	021b      	lsls	r3, r3, #8
 800a8fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a8fe:	4313      	orrs	r3, r2
 800a900:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800a904:	bf00      	nop
 800a906:	370c      	adds	r7, #12
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr

0800a910 <LL_RCC_MSI_Enable>:
{
 800a910:	b480      	push	{r7}
 800a912:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800a914:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a91e:	f043 0301 	orr.w	r3, r3, #1
 800a922:	6013      	str	r3, [r2, #0]
}
 800a924:	bf00      	nop
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr

0800a92e <LL_RCC_MSI_Disable>:
{
 800a92e:	b480      	push	{r7}
 800a930:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800a932:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a93c:	f023 0301 	bic.w	r3, r3, #1
 800a940:	6013      	str	r3, [r2, #0]
}
 800a942:	bf00      	nop
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr

0800a94c <LL_RCC_MSI_IsReady>:
{
 800a94c:	b480      	push	{r7}
 800a94e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800a950:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f003 0302 	and.w	r3, r3, #2
 800a95a:	2b02      	cmp	r3, #2
 800a95c:	d101      	bne.n	800a962 <LL_RCC_MSI_IsReady+0x16>
 800a95e:	2301      	movs	r3, #1
 800a960:	e000      	b.n	800a964 <LL_RCC_MSI_IsReady+0x18>
 800a962:	2300      	movs	r3, #0
}
 800a964:	4618      	mov	r0, r3
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr

0800a96e <LL_RCC_MSI_SetRange>:
{
 800a96e:	b480      	push	{r7}
 800a970:	b083      	sub	sp, #12
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800a976:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a980:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	4313      	orrs	r3, r2
 800a988:	600b      	str	r3, [r1, #0]
}
 800a98a:	bf00      	nop
 800a98c:	370c      	adds	r7, #12
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr

0800a996 <LL_RCC_MSI_GetRange>:
{
 800a996:	b480      	push	{r7}
 800a998:	b083      	sub	sp, #12
 800a99a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800a99c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a9a6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2bb0      	cmp	r3, #176	@ 0xb0
 800a9ac:	d901      	bls.n	800a9b2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800a9ae:	23b0      	movs	r3, #176	@ 0xb0
 800a9b0:	607b      	str	r3, [r7, #4]
  return msiRange;
 800a9b2:	687b      	ldr	r3, [r7, #4]
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <LL_RCC_MSI_SetCalibTrimming>:
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b083      	sub	sp, #12
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800a9c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	021b      	lsls	r3, r3, #8
 800a9d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	604b      	str	r3, [r1, #4]
}
 800a9de:	bf00      	nop
 800a9e0:	370c      	adds	r7, #12
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr

0800a9ea <LL_RCC_SetSysClkSource>:
{
 800a9ea:	b480      	push	{r7}
 800a9ec:	b083      	sub	sp, #12
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800a9f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	f023 0203 	bic.w	r2, r3, #3
 800a9fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	4313      	orrs	r3, r2
 800aa04:	608b      	str	r3, [r1, #8]
}
 800aa06:	bf00      	nop
 800aa08:	370c      	adds	r7, #12
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr

0800aa12 <LL_RCC_GetSysClkSource>:
{
 800aa12:	b480      	push	{r7}
 800aa14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800aa16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa1a:	689b      	ldr	r3, [r3, #8]
 800aa1c:	f003 030c 	and.w	r3, r3, #12
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr

0800aa2a <LL_RCC_SetAHBPrescaler>:
{
 800aa2a:	b480      	push	{r7}
 800aa2c:	b083      	sub	sp, #12
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800aa32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa36:	689b      	ldr	r3, [r3, #8]
 800aa38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800aa3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	4313      	orrs	r3, r2
 800aa44:	608b      	str	r3, [r1, #8]
}
 800aa46:	bf00      	nop
 800aa48:	370c      	adds	r7, #12
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr

0800aa52 <LL_C2_RCC_SetAHBPrescaler>:
{
 800aa52:	b480      	push	{r7}
 800aa54:	b083      	sub	sp, #12
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800aa5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa5e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800aa62:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800aa66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800aa72:	bf00      	nop
 800aa74:	370c      	adds	r7, #12
 800aa76:	46bd      	mov	sp, r7
 800aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7c:	4770      	bx	lr

0800aa7e <LL_RCC_SetAHB4Prescaler>:
{
 800aa7e:	b480      	push	{r7}
 800aa80:	b083      	sub	sp, #12
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800aa86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa8a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800aa8e:	f023 020f 	bic.w	r2, r3, #15
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	091b      	lsrs	r3, r3, #4
 800aa96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800aaa0:	bf00      	nop
 800aaa2:	370c      	adds	r7, #12
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr

0800aaac <LL_RCC_SetAPB1Prescaler>:
{
 800aaac:	b480      	push	{r7}
 800aaae:	b083      	sub	sp, #12
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800aab4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aab8:	689b      	ldr	r3, [r3, #8]
 800aaba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800aabe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	4313      	orrs	r3, r2
 800aac6:	608b      	str	r3, [r1, #8]
}
 800aac8:	bf00      	nop
 800aaca:	370c      	adds	r7, #12
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr

0800aad4 <LL_RCC_SetAPB2Prescaler>:
{
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800aadc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aae0:	689b      	ldr	r3, [r3, #8]
 800aae2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800aae6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	4313      	orrs	r3, r2
 800aaee:	608b      	str	r3, [r1, #8]
}
 800aaf0:	bf00      	nop
 800aaf2:	370c      	adds	r7, #12
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr

0800aafc <LL_RCC_GetAHBPrescaler>:
{
 800aafc:	b480      	push	{r7}
 800aafe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800ab00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab04:	689b      	ldr	r3, [r3, #8]
 800ab06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr

0800ab14 <LL_RCC_GetAHB4Prescaler>:
{
 800ab14:	b480      	push	{r7}
 800ab16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800ab18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab1c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800ab20:	011b      	lsls	r3, r3, #4
 800ab22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <LL_RCC_GetAPB1Prescaler>:
{
 800ab30:	b480      	push	{r7}
 800ab32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800ab34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <LL_RCC_GetAPB2Prescaler>:
{
 800ab48:	b480      	push	{r7}
 800ab4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800ab4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab50:	689b      	ldr	r3, [r3, #8]
 800ab52:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr

0800ab60 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800ab60:	b480      	push	{r7}
 800ab62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800ab64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ab6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ab72:	6013      	str	r3, [r2, #0]
}
 800ab74:	bf00      	nop
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr

0800ab7e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800ab7e:	b480      	push	{r7}
 800ab80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800ab82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ab8c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ab90:	6013      	str	r3, [r2, #0]
}
 800ab92:	bf00      	nop
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr

0800ab9c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800aba0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800abaa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800abae:	d101      	bne.n	800abb4 <LL_RCC_PLL_IsReady+0x18>
 800abb0:	2301      	movs	r3, #1
 800abb2:	e000      	b.n	800abb6 <LL_RCC_PLL_IsReady+0x1a>
 800abb4:	2300      	movs	r3, #0
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr

0800abc0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800abc0:	b480      	push	{r7}
 800abc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800abc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800abc8:	68db      	ldr	r3, [r3, #12]
 800abca:	0a1b      	lsrs	r3, r3, #8
 800abcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	46bd      	mov	sp, r7
 800abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd8:	4770      	bx	lr

0800abda <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800abda:	b480      	push	{r7}
 800abdc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800abde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800abe2:	68db      	ldr	r3, [r3, #12]
 800abe4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800abe8:	4618      	mov	r0, r3
 800abea:	46bd      	mov	sp, r7
 800abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf0:	4770      	bx	lr

0800abf2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800abf2:	b480      	push	{r7}
 800abf4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800abf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800abfa:	68db      	ldr	r3, [r3, #12]
 800abfc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	46bd      	mov	sp, r7
 800ac04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac08:	4770      	bx	lr

0800ac0a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800ac0a:	b480      	push	{r7}
 800ac0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800ac0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac12:	68db      	ldr	r3, [r3, #12]
 800ac14:	f003 0303 	and.w	r3, r3, #3
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr

0800ac22 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800ac22:	b480      	push	{r7}
 800ac24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800ac26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac2a:	689b      	ldr	r3, [r3, #8]
 800ac2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ac30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac34:	d101      	bne.n	800ac3a <LL_RCC_IsActiveFlag_HPRE+0x18>
 800ac36:	2301      	movs	r3, #1
 800ac38:	e000      	b.n	800ac3c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800ac3a:	2300      	movs	r3, #0
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr

0800ac46 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800ac46:	b480      	push	{r7}
 800ac48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800ac4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac4e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800ac52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac5a:	d101      	bne.n	800ac60 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	e000      	b.n	800ac62 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800ac60:	2300      	movs	r3, #0
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800ac70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac74:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800ac78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ac7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac80:	d101      	bne.n	800ac86 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800ac82:	2301      	movs	r3, #1
 800ac84:	e000      	b.n	800ac88 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800ac86:	2300      	movs	r3, #0
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr

0800ac92 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800ac92:	b480      	push	{r7}
 800ac94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800ac96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac9a:	689b      	ldr	r3, [r3, #8]
 800ac9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aca0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aca4:	d101      	bne.n	800acaa <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800aca6:	2301      	movs	r3, #1
 800aca8:	e000      	b.n	800acac <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800acaa:	2300      	movs	r3, #0
}
 800acac:	4618      	mov	r0, r3
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr

0800acb6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800acb6:	b480      	push	{r7}
 800acb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800acba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800acbe:	689b      	ldr	r3, [r3, #8]
 800acc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800acc4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800acc8:	d101      	bne.n	800acce <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800acca:	2301      	movs	r3, #1
 800accc:	e000      	b.n	800acd0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800acce:	2300      	movs	r3, #0
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr
	...

0800acdc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800acdc:	b590      	push	{r4, r7, lr}
 800acde:	b08d      	sub	sp, #52	@ 0x34
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d101      	bne.n	800acee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800acea:	2301      	movs	r3, #1
 800acec:	e363      	b.n	800b3b6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f003 0320 	and.w	r3, r3, #32
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	f000 808d 	beq.w	800ae16 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800acfc:	f7ff fe89 	bl	800aa12 <LL_RCC_GetSysClkSource>
 800ad00:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ad02:	f7ff ff82 	bl	800ac0a <LL_RCC_PLL_GetMainSource>
 800ad06:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800ad08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d005      	beq.n	800ad1a <HAL_RCC_OscConfig+0x3e>
 800ad0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad10:	2b0c      	cmp	r3, #12
 800ad12:	d147      	bne.n	800ada4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800ad14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad16:	2b01      	cmp	r3, #1
 800ad18:	d144      	bne.n	800ada4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	69db      	ldr	r3, [r3, #28]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d101      	bne.n	800ad26 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800ad22:	2301      	movs	r3, #1
 800ad24:	e347      	b.n	800b3b6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800ad2a:	f7ff fe34 	bl	800a996 <LL_RCC_MSI_GetRange>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	429c      	cmp	r4, r3
 800ad32:	d914      	bls.n	800ad5e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f000 fd2f 	bl	800b79c <RCC_SetFlashLatencyFromMSIRange>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d001      	beq.n	800ad48 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800ad44:	2301      	movs	r3, #1
 800ad46:	e336      	b.n	800b3b6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f7ff fe0e 	bl	800a96e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6a1b      	ldr	r3, [r3, #32]
 800ad56:	4618      	mov	r0, r3
 800ad58:	f7ff fe32 	bl	800a9c0 <LL_RCC_MSI_SetCalibTrimming>
 800ad5c:	e013      	b.n	800ad86 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7ff fe03 	bl	800a96e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6a1b      	ldr	r3, [r3, #32]
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f7ff fe27 	bl	800a9c0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad76:	4618      	mov	r0, r3
 800ad78:	f000 fd10 	bl	800b79c <RCC_SetFlashLatencyFromMSIRange>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d001      	beq.n	800ad86 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800ad82:	2301      	movs	r3, #1
 800ad84:	e317      	b.n	800b3b6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800ad86:	f000 fcc9 	bl	800b71c <HAL_RCC_GetHCLKFreq>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	4aa4      	ldr	r2, [pc, #656]	@ (800b020 <HAL_RCC_OscConfig+0x344>)
 800ad8e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800ad90:	4ba4      	ldr	r3, [pc, #656]	@ (800b024 <HAL_RCC_OscConfig+0x348>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7fc f9a1 	bl	80070dc <HAL_InitTick>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d039      	beq.n	800ae14 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800ada0:	2301      	movs	r3, #1
 800ada2:	e308      	b.n	800b3b6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	69db      	ldr	r3, [r3, #28]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d01e      	beq.n	800adea <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800adac:	f7ff fdb0 	bl	800a910 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800adb0:	f7fc f9e2 	bl	8007178 <HAL_GetTick>
 800adb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800adb6:	e008      	b.n	800adca <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800adb8:	f7fc f9de 	bl	8007178 <HAL_GetTick>
 800adbc:	4602      	mov	r2, r0
 800adbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc0:	1ad3      	subs	r3, r2, r3
 800adc2:	2b02      	cmp	r3, #2
 800adc4:	d901      	bls.n	800adca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800adc6:	2303      	movs	r3, #3
 800adc8:	e2f5      	b.n	800b3b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800adca:	f7ff fdbf 	bl	800a94c <LL_RCC_MSI_IsReady>
 800adce:	4603      	mov	r3, r0
 800add0:	2b00      	cmp	r3, #0
 800add2:	d0f1      	beq.n	800adb8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800add8:	4618      	mov	r0, r3
 800adda:	f7ff fdc8 	bl	800a96e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6a1b      	ldr	r3, [r3, #32]
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7ff fdec 	bl	800a9c0 <LL_RCC_MSI_SetCalibTrimming>
 800ade8:	e015      	b.n	800ae16 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800adea:	f7ff fda0 	bl	800a92e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800adee:	f7fc f9c3 	bl	8007178 <HAL_GetTick>
 800adf2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800adf4:	e008      	b.n	800ae08 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800adf6:	f7fc f9bf 	bl	8007178 <HAL_GetTick>
 800adfa:	4602      	mov	r2, r0
 800adfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adfe:	1ad3      	subs	r3, r2, r3
 800ae00:	2b02      	cmp	r3, #2
 800ae02:	d901      	bls.n	800ae08 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800ae04:	2303      	movs	r3, #3
 800ae06:	e2d6      	b.n	800b3b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800ae08:	f7ff fda0 	bl	800a94c <LL_RCC_MSI_IsReady>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d1f1      	bne.n	800adf6 <HAL_RCC_OscConfig+0x11a>
 800ae12:	e000      	b.n	800ae16 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800ae14:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f003 0301 	and.w	r3, r3, #1
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d047      	beq.n	800aeb2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ae22:	f7ff fdf6 	bl	800aa12 <LL_RCC_GetSysClkSource>
 800ae26:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ae28:	f7ff feef 	bl	800ac0a <LL_RCC_PLL_GetMainSource>
 800ae2c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800ae2e:	6a3b      	ldr	r3, [r7, #32]
 800ae30:	2b08      	cmp	r3, #8
 800ae32:	d005      	beq.n	800ae40 <HAL_RCC_OscConfig+0x164>
 800ae34:	6a3b      	ldr	r3, [r7, #32]
 800ae36:	2b0c      	cmp	r3, #12
 800ae38:	d108      	bne.n	800ae4c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800ae3a:	69fb      	ldr	r3, [r7, #28]
 800ae3c:	2b03      	cmp	r3, #3
 800ae3e:	d105      	bne.n	800ae4c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d134      	bne.n	800aeb2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	e2b4      	b.n	800b3b6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae54:	d102      	bne.n	800ae5c <HAL_RCC_OscConfig+0x180>
 800ae56:	f7ff fbdd 	bl	800a614 <LL_RCC_HSE_Enable>
 800ae5a:	e001      	b.n	800ae60 <HAL_RCC_OscConfig+0x184>
 800ae5c:	f7ff fbe9 	bl	800a632 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d012      	beq.n	800ae8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae68:	f7fc f986 	bl	8007178 <HAL_GetTick>
 800ae6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800ae6e:	e008      	b.n	800ae82 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ae70:	f7fc f982 	bl	8007178 <HAL_GetTick>
 800ae74:	4602      	mov	r2, r0
 800ae76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae78:	1ad3      	subs	r3, r2, r3
 800ae7a:	2b64      	cmp	r3, #100	@ 0x64
 800ae7c:	d901      	bls.n	800ae82 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800ae7e:	2303      	movs	r3, #3
 800ae80:	e299      	b.n	800b3b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800ae82:	f7ff fbe5 	bl	800a650 <LL_RCC_HSE_IsReady>
 800ae86:	4603      	mov	r3, r0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d0f1      	beq.n	800ae70 <HAL_RCC_OscConfig+0x194>
 800ae8c:	e011      	b.n	800aeb2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae8e:	f7fc f973 	bl	8007178 <HAL_GetTick>
 800ae92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800ae94:	e008      	b.n	800aea8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ae96:	f7fc f96f 	bl	8007178 <HAL_GetTick>
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae9e:	1ad3      	subs	r3, r2, r3
 800aea0:	2b64      	cmp	r3, #100	@ 0x64
 800aea2:	d901      	bls.n	800aea8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800aea4:	2303      	movs	r3, #3
 800aea6:	e286      	b.n	800b3b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800aea8:	f7ff fbd2 	bl	800a650 <LL_RCC_HSE_IsReady>
 800aeac:	4603      	mov	r3, r0
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d1f1      	bne.n	800ae96 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f003 0302 	and.w	r3, r3, #2
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d04c      	beq.n	800af58 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aebe:	f7ff fda8 	bl	800aa12 <LL_RCC_GetSysClkSource>
 800aec2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800aec4:	f7ff fea1 	bl	800ac0a <LL_RCC_PLL_GetMainSource>
 800aec8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800aeca:	69bb      	ldr	r3, [r7, #24]
 800aecc:	2b04      	cmp	r3, #4
 800aece:	d005      	beq.n	800aedc <HAL_RCC_OscConfig+0x200>
 800aed0:	69bb      	ldr	r3, [r7, #24]
 800aed2:	2b0c      	cmp	r3, #12
 800aed4:	d10e      	bne.n	800aef4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	2b02      	cmp	r3, #2
 800aeda:	d10b      	bne.n	800aef4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	68db      	ldr	r3, [r3, #12]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d101      	bne.n	800aee8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800aee4:	2301      	movs	r3, #1
 800aee6:	e266      	b.n	800b3b6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	691b      	ldr	r3, [r3, #16]
 800aeec:	4618      	mov	r0, r3
 800aeee:	f7ff fbf1 	bl	800a6d4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800aef2:	e031      	b.n	800af58 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	68db      	ldr	r3, [r3, #12]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d019      	beq.n	800af30 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aefc:	f7ff fbba 	bl	800a674 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af00:	f7fc f93a 	bl	8007178 <HAL_GetTick>
 800af04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800af06:	e008      	b.n	800af1a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800af08:	f7fc f936 	bl	8007178 <HAL_GetTick>
 800af0c:	4602      	mov	r2, r0
 800af0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af10:	1ad3      	subs	r3, r2, r3
 800af12:	2b02      	cmp	r3, #2
 800af14:	d901      	bls.n	800af1a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800af16:	2303      	movs	r3, #3
 800af18:	e24d      	b.n	800b3b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800af1a:	f7ff fbc9 	bl	800a6b0 <LL_RCC_HSI_IsReady>
 800af1e:	4603      	mov	r3, r0
 800af20:	2b00      	cmp	r3, #0
 800af22:	d0f1      	beq.n	800af08 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	691b      	ldr	r3, [r3, #16]
 800af28:	4618      	mov	r0, r3
 800af2a:	f7ff fbd3 	bl	800a6d4 <LL_RCC_HSI_SetCalibTrimming>
 800af2e:	e013      	b.n	800af58 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800af30:	f7ff fbaf 	bl	800a692 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af34:	f7fc f920 	bl	8007178 <HAL_GetTick>
 800af38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800af3a:	e008      	b.n	800af4e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800af3c:	f7fc f91c 	bl	8007178 <HAL_GetTick>
 800af40:	4602      	mov	r2, r0
 800af42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af44:	1ad3      	subs	r3, r2, r3
 800af46:	2b02      	cmp	r3, #2
 800af48:	d901      	bls.n	800af4e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800af4a:	2303      	movs	r3, #3
 800af4c:	e233      	b.n	800b3b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800af4e:	f7ff fbaf 	bl	800a6b0 <LL_RCC_HSI_IsReady>
 800af52:	4603      	mov	r3, r0
 800af54:	2b00      	cmp	r3, #0
 800af56:	d1f1      	bne.n	800af3c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f003 0308 	and.w	r3, r3, #8
 800af60:	2b00      	cmp	r3, #0
 800af62:	d106      	bne.n	800af72 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	f000 80a3 	beq.w	800b0b8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	695b      	ldr	r3, [r3, #20]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d076      	beq.n	800b068 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f003 0310 	and.w	r3, r3, #16
 800af82:	2b00      	cmp	r3, #0
 800af84:	d046      	beq.n	800b014 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800af86:	f7ff fc66 	bl	800a856 <LL_RCC_LSI1_IsReady>
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d113      	bne.n	800afb8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800af90:	f7ff fc3f 	bl	800a812 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800af94:	f7fc f8f0 	bl	8007178 <HAL_GetTick>
 800af98:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800af9a:	e008      	b.n	800afae <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800af9c:	f7fc f8ec 	bl	8007178 <HAL_GetTick>
 800afa0:	4602      	mov	r2, r0
 800afa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afa4:	1ad3      	subs	r3, r2, r3
 800afa6:	2b02      	cmp	r3, #2
 800afa8:	d901      	bls.n	800afae <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800afaa:	2303      	movs	r3, #3
 800afac:	e203      	b.n	800b3b6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800afae:	f7ff fc52 	bl	800a856 <LL_RCC_LSI1_IsReady>
 800afb2:	4603      	mov	r3, r0
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d0f1      	beq.n	800af9c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800afb8:	f7ff fc5f 	bl	800a87a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afbc:	f7fc f8dc 	bl	8007178 <HAL_GetTick>
 800afc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800afc2:	e008      	b.n	800afd6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800afc4:	f7fc f8d8 	bl	8007178 <HAL_GetTick>
 800afc8:	4602      	mov	r2, r0
 800afca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afcc:	1ad3      	subs	r3, r2, r3
 800afce:	2b03      	cmp	r3, #3
 800afd0:	d901      	bls.n	800afd6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800afd2:	2303      	movs	r3, #3
 800afd4:	e1ef      	b.n	800b3b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800afd6:	f7ff fc72 	bl	800a8be <LL_RCC_LSI2_IsReady>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d0f1      	beq.n	800afc4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	699b      	ldr	r3, [r3, #24]
 800afe4:	4618      	mov	r0, r3
 800afe6:	f7ff fc7c 	bl	800a8e2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800afea:	f7ff fc23 	bl	800a834 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afee:	f7fc f8c3 	bl	8007178 <HAL_GetTick>
 800aff2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800aff4:	e008      	b.n	800b008 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800aff6:	f7fc f8bf 	bl	8007178 <HAL_GetTick>
 800affa:	4602      	mov	r2, r0
 800affc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800affe:	1ad3      	subs	r3, r2, r3
 800b000:	2b02      	cmp	r3, #2
 800b002:	d901      	bls.n	800b008 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800b004:	2303      	movs	r3, #3
 800b006:	e1d6      	b.n	800b3b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800b008:	f7ff fc25 	bl	800a856 <LL_RCC_LSI1_IsReady>
 800b00c:	4603      	mov	r3, r0
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d1f1      	bne.n	800aff6 <HAL_RCC_OscConfig+0x31a>
 800b012:	e051      	b.n	800b0b8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800b014:	f7ff fbfd 	bl	800a812 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b018:	f7fc f8ae 	bl	8007178 <HAL_GetTick>
 800b01c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800b01e:	e00c      	b.n	800b03a <HAL_RCC_OscConfig+0x35e>
 800b020:	20000024 	.word	0x20000024
 800b024:	20000028 	.word	0x20000028
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b028:	f7fc f8a6 	bl	8007178 <HAL_GetTick>
 800b02c:	4602      	mov	r2, r0
 800b02e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b030:	1ad3      	subs	r3, r2, r3
 800b032:	2b02      	cmp	r3, #2
 800b034:	d901      	bls.n	800b03a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800b036:	2303      	movs	r3, #3
 800b038:	e1bd      	b.n	800b3b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800b03a:	f7ff fc0c 	bl	800a856 <LL_RCC_LSI1_IsReady>
 800b03e:	4603      	mov	r3, r0
 800b040:	2b00      	cmp	r3, #0
 800b042:	d0f1      	beq.n	800b028 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800b044:	f7ff fc2a 	bl	800a89c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800b048:	e008      	b.n	800b05c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b04a:	f7fc f895 	bl	8007178 <HAL_GetTick>
 800b04e:	4602      	mov	r2, r0
 800b050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b052:	1ad3      	subs	r3, r2, r3
 800b054:	2b03      	cmp	r3, #3
 800b056:	d901      	bls.n	800b05c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800b058:	2303      	movs	r3, #3
 800b05a:	e1ac      	b.n	800b3b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800b05c:	f7ff fc2f 	bl	800a8be <LL_RCC_LSI2_IsReady>
 800b060:	4603      	mov	r3, r0
 800b062:	2b00      	cmp	r3, #0
 800b064:	d1f1      	bne.n	800b04a <HAL_RCC_OscConfig+0x36e>
 800b066:	e027      	b.n	800b0b8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800b068:	f7ff fc18 	bl	800a89c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b06c:	f7fc f884 	bl	8007178 <HAL_GetTick>
 800b070:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800b072:	e008      	b.n	800b086 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b074:	f7fc f880 	bl	8007178 <HAL_GetTick>
 800b078:	4602      	mov	r2, r0
 800b07a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b07c:	1ad3      	subs	r3, r2, r3
 800b07e:	2b03      	cmp	r3, #3
 800b080:	d901      	bls.n	800b086 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800b082:	2303      	movs	r3, #3
 800b084:	e197      	b.n	800b3b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800b086:	f7ff fc1a 	bl	800a8be <LL_RCC_LSI2_IsReady>
 800b08a:	4603      	mov	r3, r0
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d1f1      	bne.n	800b074 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800b090:	f7ff fbd0 	bl	800a834 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b094:	f7fc f870 	bl	8007178 <HAL_GetTick>
 800b098:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800b09a:	e008      	b.n	800b0ae <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b09c:	f7fc f86c 	bl	8007178 <HAL_GetTick>
 800b0a0:	4602      	mov	r2, r0
 800b0a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0a4:	1ad3      	subs	r3, r2, r3
 800b0a6:	2b02      	cmp	r3, #2
 800b0a8:	d901      	bls.n	800b0ae <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800b0aa:	2303      	movs	r3, #3
 800b0ac:	e183      	b.n	800b3b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800b0ae:	f7ff fbd2 	bl	800a856 <LL_RCC_LSI1_IsReady>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d1f1      	bne.n	800b09c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f003 0304 	and.w	r3, r3, #4
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d05b      	beq.n	800b17c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b0c4:	4ba7      	ldr	r3, [pc, #668]	@ (800b364 <HAL_RCC_OscConfig+0x688>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d114      	bne.n	800b0fa <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800b0d0:	f7ff fa60 	bl	800a594 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b0d4:	f7fc f850 	bl	8007178 <HAL_GetTick>
 800b0d8:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b0da:	e008      	b.n	800b0ee <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b0dc:	f7fc f84c 	bl	8007178 <HAL_GetTick>
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0e4:	1ad3      	subs	r3, r2, r3
 800b0e6:	2b02      	cmp	r3, #2
 800b0e8:	d901      	bls.n	800b0ee <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800b0ea:	2303      	movs	r3, #3
 800b0ec:	e163      	b.n	800b3b6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b0ee:	4b9d      	ldr	r3, [pc, #628]	@ (800b364 <HAL_RCC_OscConfig+0x688>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d0f0      	beq.n	800b0dc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	689b      	ldr	r3, [r3, #8]
 800b0fe:	2b01      	cmp	r3, #1
 800b100:	d102      	bne.n	800b108 <HAL_RCC_OscConfig+0x42c>
 800b102:	f7ff fb30 	bl	800a766 <LL_RCC_LSE_Enable>
 800b106:	e00c      	b.n	800b122 <HAL_RCC_OscConfig+0x446>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	689b      	ldr	r3, [r3, #8]
 800b10c:	2b05      	cmp	r3, #5
 800b10e:	d104      	bne.n	800b11a <HAL_RCC_OscConfig+0x43e>
 800b110:	f7ff fb4b 	bl	800a7aa <LL_RCC_LSE_EnableBypass>
 800b114:	f7ff fb27 	bl	800a766 <LL_RCC_LSE_Enable>
 800b118:	e003      	b.n	800b122 <HAL_RCC_OscConfig+0x446>
 800b11a:	f7ff fb35 	bl	800a788 <LL_RCC_LSE_Disable>
 800b11e:	f7ff fb55 	bl	800a7cc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	689b      	ldr	r3, [r3, #8]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d014      	beq.n	800b154 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b12a:	f7fc f825 	bl	8007178 <HAL_GetTick>
 800b12e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800b130:	e00a      	b.n	800b148 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b132:	f7fc f821 	bl	8007178 <HAL_GetTick>
 800b136:	4602      	mov	r2, r0
 800b138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b13a:	1ad3      	subs	r3, r2, r3
 800b13c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b140:	4293      	cmp	r3, r2
 800b142:	d901      	bls.n	800b148 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800b144:	2303      	movs	r3, #3
 800b146:	e136      	b.n	800b3b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800b148:	f7ff fb51 	bl	800a7ee <LL_RCC_LSE_IsReady>
 800b14c:	4603      	mov	r3, r0
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d0ef      	beq.n	800b132 <HAL_RCC_OscConfig+0x456>
 800b152:	e013      	b.n	800b17c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b154:	f7fc f810 	bl	8007178 <HAL_GetTick>
 800b158:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800b15a:	e00a      	b.n	800b172 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b15c:	f7fc f80c 	bl	8007178 <HAL_GetTick>
 800b160:	4602      	mov	r2, r0
 800b162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b164:	1ad3      	subs	r3, r2, r3
 800b166:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d901      	bls.n	800b172 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800b16e:	2303      	movs	r3, #3
 800b170:	e121      	b.n	800b3b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800b172:	f7ff fb3c 	bl	800a7ee <LL_RCC_LSE_IsReady>
 800b176:	4603      	mov	r3, r0
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d1ef      	bne.n	800b15c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b184:	2b00      	cmp	r3, #0
 800b186:	d02c      	beq.n	800b1e2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d014      	beq.n	800b1ba <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b190:	f7ff fab5 	bl	800a6fe <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b194:	f7fb fff0 	bl	8007178 <HAL_GetTick>
 800b198:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800b19a:	e008      	b.n	800b1ae <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b19c:	f7fb ffec 	bl	8007178 <HAL_GetTick>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a4:	1ad3      	subs	r3, r2, r3
 800b1a6:	2b02      	cmp	r3, #2
 800b1a8:	d901      	bls.n	800b1ae <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800b1aa:	2303      	movs	r3, #3
 800b1ac:	e103      	b.n	800b3b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800b1ae:	f7ff fac8 	bl	800a742 <LL_RCC_HSI48_IsReady>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d0f1      	beq.n	800b19c <HAL_RCC_OscConfig+0x4c0>
 800b1b8:	e013      	b.n	800b1e2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b1ba:	f7ff fab1 	bl	800a720 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1be:	f7fb ffdb 	bl	8007178 <HAL_GetTick>
 800b1c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800b1c4:	e008      	b.n	800b1d8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b1c6:	f7fb ffd7 	bl	8007178 <HAL_GetTick>
 800b1ca:	4602      	mov	r2, r0
 800b1cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ce:	1ad3      	subs	r3, r2, r3
 800b1d0:	2b02      	cmp	r3, #2
 800b1d2:	d901      	bls.n	800b1d8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800b1d4:	2303      	movs	r3, #3
 800b1d6:	e0ee      	b.n	800b3b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800b1d8:	f7ff fab3 	bl	800a742 <LL_RCC_HSI48_IsReady>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d1f1      	bne.n	800b1c6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	f000 80e4 	beq.w	800b3b4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b1ec:	f7ff fc11 	bl	800aa12 <LL_RCC_GetSysClkSource>
 800b1f0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800b1f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1fe:	2b02      	cmp	r3, #2
 800b200:	f040 80b4 	bne.w	800b36c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f003 0203 	and.w	r2, r3, #3
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b20e:	429a      	cmp	r2, r3
 800b210:	d123      	bne.n	800b25a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d11c      	bne.n	800b25a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	0a1b      	lsrs	r3, r3, #8
 800b224:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b22c:	429a      	cmp	r2, r3
 800b22e:	d114      	bne.n	800b25a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d10d      	bne.n	800b25a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b248:	429a      	cmp	r2, r3
 800b24a:	d106      	bne.n	800b25a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b256:	429a      	cmp	r2, r3
 800b258:	d05d      	beq.n	800b316 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	2b0c      	cmp	r3, #12
 800b25e:	d058      	beq.n	800b312 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800b260:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d001      	beq.n	800b272 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800b26e:	2301      	movs	r3, #1
 800b270:	e0a1      	b.n	800b3b6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800b272:	f7ff fc84 	bl	800ab7e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b276:	f7fb ff7f 	bl	8007178 <HAL_GetTick>
 800b27a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b27c:	e008      	b.n	800b290 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b27e:	f7fb ff7b 	bl	8007178 <HAL_GetTick>
 800b282:	4602      	mov	r2, r0
 800b284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b286:	1ad3      	subs	r3, r2, r3
 800b288:	2b02      	cmp	r3, #2
 800b28a:	d901      	bls.n	800b290 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800b28c:	2303      	movs	r3, #3
 800b28e:	e092      	b.n	800b3b6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b290:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d1ef      	bne.n	800b27e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b29e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b2a2:	68da      	ldr	r2, [r3, #12]
 800b2a4:	4b30      	ldr	r3, [pc, #192]	@ (800b368 <HAL_RCC_OscConfig+0x68c>)
 800b2a6:	4013      	ands	r3, r2
 800b2a8:	687a      	ldr	r2, [r7, #4]
 800b2aa:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b2b0:	4311      	orrs	r1, r2
 800b2b2:	687a      	ldr	r2, [r7, #4]
 800b2b4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b2b6:	0212      	lsls	r2, r2, #8
 800b2b8:	4311      	orrs	r1, r2
 800b2ba:	687a      	ldr	r2, [r7, #4]
 800b2bc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b2be:	4311      	orrs	r1, r2
 800b2c0:	687a      	ldr	r2, [r7, #4]
 800b2c2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b2c4:	4311      	orrs	r1, r2
 800b2c6:	687a      	ldr	r2, [r7, #4]
 800b2c8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800b2ca:	430a      	orrs	r2, r1
 800b2cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800b2d4:	f7ff fc44 	bl	800ab60 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b2d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b2dc:	68db      	ldr	r3, [r3, #12]
 800b2de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b2e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b2e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b2e8:	f7fb ff46 	bl	8007178 <HAL_GetTick>
 800b2ec:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b2ee:	e008      	b.n	800b302 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b2f0:	f7fb ff42 	bl	8007178 <HAL_GetTick>
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2f8:	1ad3      	subs	r3, r2, r3
 800b2fa:	2b02      	cmp	r3, #2
 800b2fc:	d901      	bls.n	800b302 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800b2fe:	2303      	movs	r3, #3
 800b300:	e059      	b.n	800b3b6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b302:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d0ef      	beq.n	800b2f0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b310:	e050      	b.n	800b3b4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800b312:	2301      	movs	r3, #1
 800b314:	e04f      	b.n	800b3b6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b316:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b320:	2b00      	cmp	r3, #0
 800b322:	d147      	bne.n	800b3b4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800b324:	f7ff fc1c 	bl	800ab60 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b328:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b32c:	68db      	ldr	r3, [r3, #12]
 800b32e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b332:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b336:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b338:	f7fb ff1e 	bl	8007178 <HAL_GetTick>
 800b33c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b33e:	e008      	b.n	800b352 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b340:	f7fb ff1a 	bl	8007178 <HAL_GetTick>
 800b344:	4602      	mov	r2, r0
 800b346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b348:	1ad3      	subs	r3, r2, r3
 800b34a:	2b02      	cmp	r3, #2
 800b34c:	d901      	bls.n	800b352 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800b34e:	2303      	movs	r3, #3
 800b350:	e031      	b.n	800b3b6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b352:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d0ef      	beq.n	800b340 <HAL_RCC_OscConfig+0x664>
 800b360:	e028      	b.n	800b3b4 <HAL_RCC_OscConfig+0x6d8>
 800b362:	bf00      	nop
 800b364:	58000400 	.word	0x58000400
 800b368:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	2b0c      	cmp	r3, #12
 800b370:	d01e      	beq.n	800b3b0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b372:	f7ff fc04 	bl	800ab7e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b376:	f7fb feff 	bl	8007178 <HAL_GetTick>
 800b37a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b37c:	e008      	b.n	800b390 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b37e:	f7fb fefb 	bl	8007178 <HAL_GetTick>
 800b382:	4602      	mov	r2, r0
 800b384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b386:	1ad3      	subs	r3, r2, r3
 800b388:	2b02      	cmp	r3, #2
 800b38a:	d901      	bls.n	800b390 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800b38c:	2303      	movs	r3, #3
 800b38e:	e012      	b.n	800b3b6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b390:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d1ef      	bne.n	800b37e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800b39e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3a2:	68da      	ldr	r2, [r3, #12]
 800b3a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b3a8:	4b05      	ldr	r3, [pc, #20]	@ (800b3c0 <HAL_RCC_OscConfig+0x6e4>)
 800b3aa:	4013      	ands	r3, r2
 800b3ac:	60cb      	str	r3, [r1, #12]
 800b3ae:	e001      	b.n	800b3b4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	e000      	b.n	800b3b6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800b3b4:	2300      	movs	r3, #0
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3734      	adds	r7, #52	@ 0x34
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd90      	pop	{r4, r7, pc}
 800b3be:	bf00      	nop
 800b3c0:	eefefffc 	.word	0xeefefffc

0800b3c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b084      	sub	sp, #16
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d101      	bne.n	800b3d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	e12d      	b.n	800b634 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b3d8:	4b98      	ldr	r3, [pc, #608]	@ (800b63c <HAL_RCC_ClockConfig+0x278>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f003 0307 	and.w	r3, r3, #7
 800b3e0:	683a      	ldr	r2, [r7, #0]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d91b      	bls.n	800b41e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b3e6:	4b95      	ldr	r3, [pc, #596]	@ (800b63c <HAL_RCC_ClockConfig+0x278>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f023 0207 	bic.w	r2, r3, #7
 800b3ee:	4993      	ldr	r1, [pc, #588]	@ (800b63c <HAL_RCC_ClockConfig+0x278>)
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3f6:	f7fb febf 	bl	8007178 <HAL_GetTick>
 800b3fa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b3fc:	e008      	b.n	800b410 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b3fe:	f7fb febb 	bl	8007178 <HAL_GetTick>
 800b402:	4602      	mov	r2, r0
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	1ad3      	subs	r3, r2, r3
 800b408:	2b02      	cmp	r3, #2
 800b40a:	d901      	bls.n	800b410 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800b40c:	2303      	movs	r3, #3
 800b40e:	e111      	b.n	800b634 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b410:	4b8a      	ldr	r3, [pc, #552]	@ (800b63c <HAL_RCC_ClockConfig+0x278>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f003 0307 	and.w	r3, r3, #7
 800b418:	683a      	ldr	r2, [r7, #0]
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d1ef      	bne.n	800b3fe <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f003 0302 	and.w	r3, r3, #2
 800b426:	2b00      	cmp	r3, #0
 800b428:	d016      	beq.n	800b458 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	689b      	ldr	r3, [r3, #8]
 800b42e:	4618      	mov	r0, r3
 800b430:	f7ff fafb 	bl	800aa2a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b434:	f7fb fea0 	bl	8007178 <HAL_GetTick>
 800b438:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800b43a:	e008      	b.n	800b44e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b43c:	f7fb fe9c 	bl	8007178 <HAL_GetTick>
 800b440:	4602      	mov	r2, r0
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	1ad3      	subs	r3, r2, r3
 800b446:	2b02      	cmp	r3, #2
 800b448:	d901      	bls.n	800b44e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800b44a:	2303      	movs	r3, #3
 800b44c:	e0f2      	b.n	800b634 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800b44e:	f7ff fbe8 	bl	800ac22 <LL_RCC_IsActiveFlag_HPRE>
 800b452:	4603      	mov	r3, r0
 800b454:	2b00      	cmp	r3, #0
 800b456:	d0f1      	beq.n	800b43c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f003 0320 	and.w	r3, r3, #32
 800b460:	2b00      	cmp	r3, #0
 800b462:	d016      	beq.n	800b492 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	695b      	ldr	r3, [r3, #20]
 800b468:	4618      	mov	r0, r3
 800b46a:	f7ff faf2 	bl	800aa52 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b46e:	f7fb fe83 	bl	8007178 <HAL_GetTick>
 800b472:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800b474:	e008      	b.n	800b488 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b476:	f7fb fe7f 	bl	8007178 <HAL_GetTick>
 800b47a:	4602      	mov	r2, r0
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	1ad3      	subs	r3, r2, r3
 800b480:	2b02      	cmp	r3, #2
 800b482:	d901      	bls.n	800b488 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800b484:	2303      	movs	r3, #3
 800b486:	e0d5      	b.n	800b634 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800b488:	f7ff fbdd 	bl	800ac46 <LL_RCC_IsActiveFlag_C2HPRE>
 800b48c:	4603      	mov	r3, r0
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d0f1      	beq.n	800b476 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d016      	beq.n	800b4cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	699b      	ldr	r3, [r3, #24]
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f7ff faeb 	bl	800aa7e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b4a8:	f7fb fe66 	bl	8007178 <HAL_GetTick>
 800b4ac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800b4ae:	e008      	b.n	800b4c2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b4b0:	f7fb fe62 	bl	8007178 <HAL_GetTick>
 800b4b4:	4602      	mov	r2, r0
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	1ad3      	subs	r3, r2, r3
 800b4ba:	2b02      	cmp	r3, #2
 800b4bc:	d901      	bls.n	800b4c2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800b4be:	2303      	movs	r3, #3
 800b4c0:	e0b8      	b.n	800b634 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800b4c2:	f7ff fbd3 	bl	800ac6c <LL_RCC_IsActiveFlag_SHDHPRE>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d0f1      	beq.n	800b4b0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f003 0304 	and.w	r3, r3, #4
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d016      	beq.n	800b506 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	68db      	ldr	r3, [r3, #12]
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f7ff fae5 	bl	800aaac <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b4e2:	f7fb fe49 	bl	8007178 <HAL_GetTick>
 800b4e6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800b4e8:	e008      	b.n	800b4fc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b4ea:	f7fb fe45 	bl	8007178 <HAL_GetTick>
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	1ad3      	subs	r3, r2, r3
 800b4f4:	2b02      	cmp	r3, #2
 800b4f6:	d901      	bls.n	800b4fc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800b4f8:	2303      	movs	r3, #3
 800b4fa:	e09b      	b.n	800b634 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800b4fc:	f7ff fbc9 	bl	800ac92 <LL_RCC_IsActiveFlag_PPRE1>
 800b500:	4603      	mov	r3, r0
 800b502:	2b00      	cmp	r3, #0
 800b504:	d0f1      	beq.n	800b4ea <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f003 0308 	and.w	r3, r3, #8
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d017      	beq.n	800b542 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	691b      	ldr	r3, [r3, #16]
 800b516:	00db      	lsls	r3, r3, #3
 800b518:	4618      	mov	r0, r3
 800b51a:	f7ff fadb 	bl	800aad4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b51e:	f7fb fe2b 	bl	8007178 <HAL_GetTick>
 800b522:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800b524:	e008      	b.n	800b538 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b526:	f7fb fe27 	bl	8007178 <HAL_GetTick>
 800b52a:	4602      	mov	r2, r0
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	1ad3      	subs	r3, r2, r3
 800b530:	2b02      	cmp	r3, #2
 800b532:	d901      	bls.n	800b538 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800b534:	2303      	movs	r3, #3
 800b536:	e07d      	b.n	800b634 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800b538:	f7ff fbbd 	bl	800acb6 <LL_RCC_IsActiveFlag_PPRE2>
 800b53c:	4603      	mov	r3, r0
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d0f1      	beq.n	800b526 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f003 0301 	and.w	r3, r3, #1
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d043      	beq.n	800b5d6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	2b02      	cmp	r3, #2
 800b554:	d106      	bne.n	800b564 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800b556:	f7ff f87b 	bl	800a650 <LL_RCC_HSE_IsReady>
 800b55a:	4603      	mov	r3, r0
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d11e      	bne.n	800b59e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b560:	2301      	movs	r3, #1
 800b562:	e067      	b.n	800b634 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	685b      	ldr	r3, [r3, #4]
 800b568:	2b03      	cmp	r3, #3
 800b56a:	d106      	bne.n	800b57a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800b56c:	f7ff fb16 	bl	800ab9c <LL_RCC_PLL_IsReady>
 800b570:	4603      	mov	r3, r0
 800b572:	2b00      	cmp	r3, #0
 800b574:	d113      	bne.n	800b59e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b576:	2301      	movs	r3, #1
 800b578:	e05c      	b.n	800b634 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d106      	bne.n	800b590 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800b582:	f7ff f9e3 	bl	800a94c <LL_RCC_MSI_IsReady>
 800b586:	4603      	mov	r3, r0
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d108      	bne.n	800b59e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b58c:	2301      	movs	r3, #1
 800b58e:	e051      	b.n	800b634 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800b590:	f7ff f88e 	bl	800a6b0 <LL_RCC_HSI_IsReady>
 800b594:	4603      	mov	r3, r0
 800b596:	2b00      	cmp	r3, #0
 800b598:	d101      	bne.n	800b59e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b59a:	2301      	movs	r3, #1
 800b59c:	e04a      	b.n	800b634 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f7ff fa21 	bl	800a9ea <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5a8:	f7fb fde6 	bl	8007178 <HAL_GetTick>
 800b5ac:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b5ae:	e00a      	b.n	800b5c6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b5b0:	f7fb fde2 	bl	8007178 <HAL_GetTick>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	1ad3      	subs	r3, r2, r3
 800b5ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d901      	bls.n	800b5c6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800b5c2:	2303      	movs	r3, #3
 800b5c4:	e036      	b.n	800b634 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b5c6:	f7ff fa24 	bl	800aa12 <LL_RCC_GetSysClkSource>
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	009b      	lsls	r3, r3, #2
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d1ec      	bne.n	800b5b0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b5d6:	4b19      	ldr	r3, [pc, #100]	@ (800b63c <HAL_RCC_ClockConfig+0x278>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f003 0307 	and.w	r3, r3, #7
 800b5de:	683a      	ldr	r2, [r7, #0]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d21b      	bcs.n	800b61c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b5e4:	4b15      	ldr	r3, [pc, #84]	@ (800b63c <HAL_RCC_ClockConfig+0x278>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f023 0207 	bic.w	r2, r3, #7
 800b5ec:	4913      	ldr	r1, [pc, #76]	@ (800b63c <HAL_RCC_ClockConfig+0x278>)
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	4313      	orrs	r3, r2
 800b5f2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5f4:	f7fb fdc0 	bl	8007178 <HAL_GetTick>
 800b5f8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b5fa:	e008      	b.n	800b60e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b5fc:	f7fb fdbc 	bl	8007178 <HAL_GetTick>
 800b600:	4602      	mov	r2, r0
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	1ad3      	subs	r3, r2, r3
 800b606:	2b02      	cmp	r3, #2
 800b608:	d901      	bls.n	800b60e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800b60a:	2303      	movs	r3, #3
 800b60c:	e012      	b.n	800b634 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b60e:	4b0b      	ldr	r3, [pc, #44]	@ (800b63c <HAL_RCC_ClockConfig+0x278>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f003 0307 	and.w	r3, r3, #7
 800b616:	683a      	ldr	r2, [r7, #0]
 800b618:	429a      	cmp	r2, r3
 800b61a:	d1ef      	bne.n	800b5fc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800b61c:	f000 f87e 	bl	800b71c <HAL_RCC_GetHCLKFreq>
 800b620:	4603      	mov	r3, r0
 800b622:	4a07      	ldr	r2, [pc, #28]	@ (800b640 <HAL_RCC_ClockConfig+0x27c>)
 800b624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800b626:	f7fb fdb3 	bl	8007190 <HAL_GetTickPrio>
 800b62a:	4603      	mov	r3, r0
 800b62c:	4618      	mov	r0, r3
 800b62e:	f7fb fd55 	bl	80070dc <HAL_InitTick>
 800b632:	4603      	mov	r3, r0
}
 800b634:	4618      	mov	r0, r3
 800b636:	3710      	adds	r7, #16
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}
 800b63c:	58004000 	.word	0x58004000
 800b640:	20000024 	.word	0x20000024

0800b644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b644:	b590      	push	{r4, r7, lr}
 800b646:	b085      	sub	sp, #20
 800b648:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b64a:	f7ff f9e2 	bl	800aa12 <LL_RCC_GetSysClkSource>
 800b64e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d10a      	bne.n	800b66c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800b656:	f7ff f99e 	bl	800a996 <LL_RCC_MSI_GetRange>
 800b65a:	4603      	mov	r3, r0
 800b65c:	091b      	lsrs	r3, r3, #4
 800b65e:	f003 030f 	and.w	r3, r3, #15
 800b662:	4a2b      	ldr	r2, [pc, #172]	@ (800b710 <HAL_RCC_GetSysClockFreq+0xcc>)
 800b664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b668:	60fb      	str	r3, [r7, #12]
 800b66a:	e04b      	b.n	800b704 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2b04      	cmp	r3, #4
 800b670:	d102      	bne.n	800b678 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b672:	4b28      	ldr	r3, [pc, #160]	@ (800b714 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b674:	60fb      	str	r3, [r7, #12]
 800b676:	e045      	b.n	800b704 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2b08      	cmp	r3, #8
 800b67c:	d10a      	bne.n	800b694 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800b67e:	f7fe ffb7 	bl	800a5f0 <LL_RCC_HSE_IsEnabledDiv2>
 800b682:	4603      	mov	r3, r0
 800b684:	2b01      	cmp	r3, #1
 800b686:	d102      	bne.n	800b68e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800b688:	4b22      	ldr	r3, [pc, #136]	@ (800b714 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b68a:	60fb      	str	r3, [r7, #12]
 800b68c:	e03a      	b.n	800b704 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800b68e:	4b22      	ldr	r3, [pc, #136]	@ (800b718 <HAL_RCC_GetSysClockFreq+0xd4>)
 800b690:	60fb      	str	r3, [r7, #12]
 800b692:	e037      	b.n	800b704 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800b694:	f7ff fab9 	bl	800ac0a <LL_RCC_PLL_GetMainSource>
 800b698:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	2b02      	cmp	r3, #2
 800b69e:	d003      	beq.n	800b6a8 <HAL_RCC_GetSysClockFreq+0x64>
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	2b03      	cmp	r3, #3
 800b6a4:	d003      	beq.n	800b6ae <HAL_RCC_GetSysClockFreq+0x6a>
 800b6a6:	e00d      	b.n	800b6c4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800b6a8:	4b1a      	ldr	r3, [pc, #104]	@ (800b714 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b6aa:	60bb      	str	r3, [r7, #8]
        break;
 800b6ac:	e015      	b.n	800b6da <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800b6ae:	f7fe ff9f 	bl	800a5f0 <LL_RCC_HSE_IsEnabledDiv2>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d102      	bne.n	800b6be <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800b6b8:	4b16      	ldr	r3, [pc, #88]	@ (800b714 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b6ba:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800b6bc:	e00d      	b.n	800b6da <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800b6be:	4b16      	ldr	r3, [pc, #88]	@ (800b718 <HAL_RCC_GetSysClockFreq+0xd4>)
 800b6c0:	60bb      	str	r3, [r7, #8]
        break;
 800b6c2:	e00a      	b.n	800b6da <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800b6c4:	f7ff f967 	bl	800a996 <LL_RCC_MSI_GetRange>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	091b      	lsrs	r3, r3, #4
 800b6cc:	f003 030f 	and.w	r3, r3, #15
 800b6d0:	4a0f      	ldr	r2, [pc, #60]	@ (800b710 <HAL_RCC_GetSysClockFreq+0xcc>)
 800b6d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6d6:	60bb      	str	r3, [r7, #8]
        break;
 800b6d8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800b6da:	f7ff fa71 	bl	800abc0 <LL_RCC_PLL_GetN>
 800b6de:	4602      	mov	r2, r0
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	fb03 f402 	mul.w	r4, r3, r2
 800b6e6:	f7ff fa84 	bl	800abf2 <LL_RCC_PLL_GetDivider>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	091b      	lsrs	r3, r3, #4
 800b6ee:	3301      	adds	r3, #1
 800b6f0:	fbb4 f4f3 	udiv	r4, r4, r3
 800b6f4:	f7ff fa71 	bl	800abda <LL_RCC_PLL_GetR>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	0f5b      	lsrs	r3, r3, #29
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	fbb4 f3f3 	udiv	r3, r4, r3
 800b702:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800b704:	68fb      	ldr	r3, [r7, #12]
}
 800b706:	4618      	mov	r0, r3
 800b708:	3714      	adds	r7, #20
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd90      	pop	{r4, r7, pc}
 800b70e:	bf00      	nop
 800b710:	0801c05c 	.word	0x0801c05c
 800b714:	00f42400 	.word	0x00f42400
 800b718:	01e84800 	.word	0x01e84800

0800b71c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b71c:	b598      	push	{r3, r4, r7, lr}
 800b71e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800b720:	f7ff ff90 	bl	800b644 <HAL_RCC_GetSysClockFreq>
 800b724:	4604      	mov	r4, r0
 800b726:	f7ff f9e9 	bl	800aafc <LL_RCC_GetAHBPrescaler>
 800b72a:	4603      	mov	r3, r0
 800b72c:	091b      	lsrs	r3, r3, #4
 800b72e:	f003 030f 	and.w	r3, r3, #15
 800b732:	4a03      	ldr	r2, [pc, #12]	@ (800b740 <HAL_RCC_GetHCLKFreq+0x24>)
 800b734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b738:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	bd98      	pop	{r3, r4, r7, pc}
 800b740:	0801bffc 	.word	0x0801bffc

0800b744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b744:	b598      	push	{r3, r4, r7, lr}
 800b746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800b748:	f7ff ffe8 	bl	800b71c <HAL_RCC_GetHCLKFreq>
 800b74c:	4604      	mov	r4, r0
 800b74e:	f7ff f9ef 	bl	800ab30 <LL_RCC_GetAPB1Prescaler>
 800b752:	4603      	mov	r3, r0
 800b754:	0a1b      	lsrs	r3, r3, #8
 800b756:	f003 0307 	and.w	r3, r3, #7
 800b75a:	4a04      	ldr	r2, [pc, #16]	@ (800b76c <HAL_RCC_GetPCLK1Freq+0x28>)
 800b75c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b760:	f003 031f 	and.w	r3, r3, #31
 800b764:	fa24 f303 	lsr.w	r3, r4, r3
}
 800b768:	4618      	mov	r0, r3
 800b76a:	bd98      	pop	{r3, r4, r7, pc}
 800b76c:	0801c03c 	.word	0x0801c03c

0800b770 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b770:	b598      	push	{r3, r4, r7, lr}
 800b772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800b774:	f7ff ffd2 	bl	800b71c <HAL_RCC_GetHCLKFreq>
 800b778:	4604      	mov	r4, r0
 800b77a:	f7ff f9e5 	bl	800ab48 <LL_RCC_GetAPB2Prescaler>
 800b77e:	4603      	mov	r3, r0
 800b780:	0adb      	lsrs	r3, r3, #11
 800b782:	f003 0307 	and.w	r3, r3, #7
 800b786:	4a04      	ldr	r2, [pc, #16]	@ (800b798 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b78c:	f003 031f 	and.w	r3, r3, #31
 800b790:	fa24 f303 	lsr.w	r3, r4, r3
}
 800b794:	4618      	mov	r0, r3
 800b796:	bd98      	pop	{r3, r4, r7, pc}
 800b798:	0801c03c 	.word	0x0801c03c

0800b79c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800b79c:	b590      	push	{r4, r7, lr}
 800b79e:	b085      	sub	sp, #20
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2bb0      	cmp	r3, #176	@ 0xb0
 800b7a8:	d903      	bls.n	800b7b2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800b7aa:	4b15      	ldr	r3, [pc, #84]	@ (800b800 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800b7ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7ae:	60fb      	str	r3, [r7, #12]
 800b7b0:	e007      	b.n	800b7c2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	091b      	lsrs	r3, r3, #4
 800b7b6:	f003 030f 	and.w	r3, r3, #15
 800b7ba:	4a11      	ldr	r2, [pc, #68]	@ (800b800 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800b7bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7c0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800b7c2:	f7ff f9a7 	bl	800ab14 <LL_RCC_GetAHB4Prescaler>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	091b      	lsrs	r3, r3, #4
 800b7ca:	f003 030f 	and.w	r3, r3, #15
 800b7ce:	4a0d      	ldr	r2, [pc, #52]	@ (800b804 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800b7d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7d4:	68fa      	ldr	r2, [r7, #12]
 800b7d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7da:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	4a0a      	ldr	r2, [pc, #40]	@ (800b808 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800b7e0:	fba2 2303 	umull	r2, r3, r2, r3
 800b7e4:	0c9c      	lsrs	r4, r3, #18
 800b7e6:	f7fe fee5 	bl	800a5b4 <HAL_PWREx_GetVoltageRange>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	f000 f80c 	bl	800b80c <RCC_SetFlashLatency>
 800b7f4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3714      	adds	r7, #20
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd90      	pop	{r4, r7, pc}
 800b7fe:	bf00      	nop
 800b800:	0801c05c 	.word	0x0801c05c
 800b804:	0801bffc 	.word	0x0801bffc
 800b808:	431bde83 	.word	0x431bde83

0800b80c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800b80c:	b590      	push	{r4, r7, lr}
 800b80e:	b093      	sub	sp, #76	@ 0x4c
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800b816:	4b37      	ldr	r3, [pc, #220]	@ (800b8f4 <RCC_SetFlashLatency+0xe8>)
 800b818:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800b81c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b81e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800b822:	4a35      	ldr	r2, [pc, #212]	@ (800b8f8 <RCC_SetFlashLatency+0xec>)
 800b824:	f107 031c 	add.w	r3, r7, #28
 800b828:	ca07      	ldmia	r2, {r0, r1, r2}
 800b82a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800b82e:	4b33      	ldr	r3, [pc, #204]	@ (800b8fc <RCC_SetFlashLatency+0xf0>)
 800b830:	f107 040c 	add.w	r4, r7, #12
 800b834:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b836:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800b83a:	2300      	movs	r3, #0
 800b83c:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b844:	d11a      	bne.n	800b87c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800b846:	2300      	movs	r3, #0
 800b848:	643b      	str	r3, [r7, #64]	@ 0x40
 800b84a:	e013      	b.n	800b874 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800b84c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b84e:	009b      	lsls	r3, r3, #2
 800b850:	3348      	adds	r3, #72	@ 0x48
 800b852:	443b      	add	r3, r7
 800b854:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800b858:	687a      	ldr	r2, [r7, #4]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d807      	bhi.n	800b86e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800b85e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b860:	009b      	lsls	r3, r3, #2
 800b862:	3348      	adds	r3, #72	@ 0x48
 800b864:	443b      	add	r3, r7
 800b866:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800b86a:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800b86c:	e020      	b.n	800b8b0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800b86e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b870:	3301      	adds	r3, #1
 800b872:	643b      	str	r3, [r7, #64]	@ 0x40
 800b874:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b876:	2b03      	cmp	r3, #3
 800b878:	d9e8      	bls.n	800b84c <RCC_SetFlashLatency+0x40>
 800b87a:	e019      	b.n	800b8b0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800b87c:	2300      	movs	r3, #0
 800b87e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b880:	e013      	b.n	800b8aa <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800b882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b884:	009b      	lsls	r3, r3, #2
 800b886:	3348      	adds	r3, #72	@ 0x48
 800b888:	443b      	add	r3, r7
 800b88a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	429a      	cmp	r2, r3
 800b892:	d807      	bhi.n	800b8a4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800b894:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b896:	009b      	lsls	r3, r3, #2
 800b898:	3348      	adds	r3, #72	@ 0x48
 800b89a:	443b      	add	r3, r7
 800b89c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800b8a0:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800b8a2:	e005      	b.n	800b8b0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800b8a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b8aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8ac:	2b02      	cmp	r3, #2
 800b8ae:	d9e8      	bls.n	800b882 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800b8b0:	4b13      	ldr	r3, [pc, #76]	@ (800b900 <RCC_SetFlashLatency+0xf4>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f023 0207 	bic.w	r2, r3, #7
 800b8b8:	4911      	ldr	r1, [pc, #68]	@ (800b900 <RCC_SetFlashLatency+0xf4>)
 800b8ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8bc:	4313      	orrs	r3, r2
 800b8be:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b8c0:	f7fb fc5a 	bl	8007178 <HAL_GetTick>
 800b8c4:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800b8c6:	e008      	b.n	800b8da <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b8c8:	f7fb fc56 	bl	8007178 <HAL_GetTick>
 800b8cc:	4602      	mov	r2, r0
 800b8ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8d0:	1ad3      	subs	r3, r2, r3
 800b8d2:	2b02      	cmp	r3, #2
 800b8d4:	d901      	bls.n	800b8da <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800b8d6:	2303      	movs	r3, #3
 800b8d8:	e007      	b.n	800b8ea <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800b8da:	4b09      	ldr	r3, [pc, #36]	@ (800b900 <RCC_SetFlashLatency+0xf4>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f003 0307 	and.w	r3, r3, #7
 800b8e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	d1ef      	bne.n	800b8c8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800b8e8:	2300      	movs	r3, #0
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	374c      	adds	r7, #76	@ 0x4c
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd90      	pop	{r4, r7, pc}
 800b8f2:	bf00      	nop
 800b8f4:	0801b764 	.word	0x0801b764
 800b8f8:	0801b774 	.word	0x0801b774
 800b8fc:	0801b780 	.word	0x0801b780
 800b900:	58004000 	.word	0x58004000

0800b904 <LL_RCC_LSE_IsEnabled>:
{
 800b904:	b480      	push	{r7}
 800b906:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800b908:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b90c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b910:	f003 0301 	and.w	r3, r3, #1
 800b914:	2b01      	cmp	r3, #1
 800b916:	d101      	bne.n	800b91c <LL_RCC_LSE_IsEnabled+0x18>
 800b918:	2301      	movs	r3, #1
 800b91a:	e000      	b.n	800b91e <LL_RCC_LSE_IsEnabled+0x1a>
 800b91c:	2300      	movs	r3, #0
}
 800b91e:	4618      	mov	r0, r3
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr

0800b928 <LL_RCC_LSE_IsReady>:
{
 800b928:	b480      	push	{r7}
 800b92a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800b92c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b934:	f003 0302 	and.w	r3, r3, #2
 800b938:	2b02      	cmp	r3, #2
 800b93a:	d101      	bne.n	800b940 <LL_RCC_LSE_IsReady+0x18>
 800b93c:	2301      	movs	r3, #1
 800b93e:	e000      	b.n	800b942 <LL_RCC_LSE_IsReady+0x1a>
 800b940:	2300      	movs	r3, #0
}
 800b942:	4618      	mov	r0, r3
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr

0800b94c <LL_RCC_MSI_EnablePLLMode>:
{
 800b94c:	b480      	push	{r7}
 800b94e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800b950:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b95a:	f043 0304 	orr.w	r3, r3, #4
 800b95e:	6013      	str	r3, [r2, #0]
}
 800b960:	bf00      	nop
 800b962:	46bd      	mov	sp, r7
 800b964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b968:	4770      	bx	lr

0800b96a <LL_RCC_SetRFWKPClockSource>:
{
 800b96a:	b480      	push	{r7}
 800b96c:	b083      	sub	sp, #12
 800b96e:	af00      	add	r7, sp, #0
 800b970:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800b972:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b976:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b97a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b97e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	4313      	orrs	r3, r2
 800b986:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800b98a:	bf00      	nop
 800b98c:	370c      	adds	r7, #12
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr

0800b996 <LL_RCC_SetSMPSClockSource>:
{
 800b996:	b480      	push	{r7}
 800b998:	b083      	sub	sp, #12
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800b99e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9a4:	f023 0203 	bic.w	r2, r3, #3
 800b9a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800b9b2:	bf00      	nop
 800b9b4:	370c      	adds	r7, #12
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9bc:	4770      	bx	lr

0800b9be <LL_RCC_SetSMPSPrescaler>:
{
 800b9be:	b480      	push	{r7}
 800b9c0:	b083      	sub	sp, #12
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800b9c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9cc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800b9d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800b9da:	bf00      	nop
 800b9dc:	370c      	adds	r7, #12
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e4:	4770      	bx	lr

0800b9e6 <LL_RCC_SetUSARTClockSource>:
{
 800b9e6:	b480      	push	{r7}
 800b9e8:	b083      	sub	sp, #12
 800b9ea:	af00      	add	r7, sp, #0
 800b9ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800b9ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b9f6:	f023 0203 	bic.w	r2, r3, #3
 800b9fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	4313      	orrs	r3, r2
 800ba02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800ba06:	bf00      	nop
 800ba08:	370c      	adds	r7, #12
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr

0800ba12 <LL_RCC_SetLPUARTClockSource>:
{
 800ba12:	b480      	push	{r7}
 800ba14:	b083      	sub	sp, #12
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800ba1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba22:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800ba26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800ba32:	bf00      	nop
 800ba34:	370c      	adds	r7, #12
 800ba36:	46bd      	mov	sp, r7
 800ba38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3c:	4770      	bx	lr

0800ba3e <LL_RCC_SetI2CClockSource>:
{
 800ba3e:	b480      	push	{r7}
 800ba40:	b083      	sub	sp, #12
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800ba46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	091b      	lsrs	r3, r3, #4
 800ba52:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800ba56:	43db      	mvns	r3, r3
 800ba58:	401a      	ands	r2, r3
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	011b      	lsls	r3, r3, #4
 800ba5e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800ba62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ba66:	4313      	orrs	r3, r2
 800ba68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800ba6c:	bf00      	nop
 800ba6e:	370c      	adds	r7, #12
 800ba70:	46bd      	mov	sp, r7
 800ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba76:	4770      	bx	lr

0800ba78 <LL_RCC_SetLPTIMClockSource>:
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b083      	sub	sp, #12
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800ba80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba84:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	0c1b      	lsrs	r3, r3, #16
 800ba8c:	041b      	lsls	r3, r3, #16
 800ba8e:	43db      	mvns	r3, r3
 800ba90:	401a      	ands	r2, r3
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	041b      	lsls	r3, r3, #16
 800ba96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800baa0:	bf00      	nop
 800baa2:	370c      	adds	r7, #12
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr

0800baac <LL_RCC_SetSAIClockSource>:
{
 800baac:	b480      	push	{r7}
 800baae:	b083      	sub	sp, #12
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800bab4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800babc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800bac0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	4313      	orrs	r3, r2
 800bac8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bacc:	bf00      	nop
 800bace:	370c      	adds	r7, #12
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr

0800bad8 <LL_RCC_SetRNGClockSource>:
{
 800bad8:	b480      	push	{r7}
 800bada:	b083      	sub	sp, #12
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800bae0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bae8:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800baec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	4313      	orrs	r3, r2
 800baf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800baf8:	bf00      	nop
 800bafa:	370c      	adds	r7, #12
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr

0800bb04 <LL_RCC_SetCLK48ClockSource>:
{
 800bb04:	b480      	push	{r7}
 800bb06:	b083      	sub	sp, #12
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800bb0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb14:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800bb18:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bb24:	bf00      	nop
 800bb26:	370c      	adds	r7, #12
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr

0800bb30 <LL_RCC_SetUSBClockSource>:
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f7ff ffe3 	bl	800bb04 <LL_RCC_SetCLK48ClockSource>
}
 800bb3e:	bf00      	nop
 800bb40:	3708      	adds	r7, #8
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}

0800bb46 <LL_RCC_SetADCClockSource>:
{
 800bb46:	b480      	push	{r7}
 800bb48:	b083      	sub	sp, #12
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800bb4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb56:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800bb5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	4313      	orrs	r3, r2
 800bb62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bb66:	bf00      	nop
 800bb68:	370c      	adds	r7, #12
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb70:	4770      	bx	lr

0800bb72 <LL_RCC_SetRTCClockSource>:
{
 800bb72:	b480      	push	{r7}
 800bb74:	b083      	sub	sp, #12
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800bb7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb82:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bb86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800bb92:	bf00      	nop
 800bb94:	370c      	adds	r7, #12
 800bb96:	46bd      	mov	sp, r7
 800bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9c:	4770      	bx	lr

0800bb9e <LL_RCC_GetRTCClockSource>:
{
 800bb9e:	b480      	push	{r7}
 800bba0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800bba2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr

0800bbb8 <LL_RCC_ForceBackupDomainReset>:
{
 800bbb8:	b480      	push	{r7}
 800bbba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800bbbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbc4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bbc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bbcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bbd0:	bf00      	nop
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr

0800bbda <LL_RCC_ReleaseBackupDomainReset>:
{
 800bbda:	b480      	push	{r7}
 800bbdc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800bbde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbe6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bbea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bbee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bbf2:	bf00      	nop
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr

0800bbfc <LL_RCC_PLLSAI1_Enable>:
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800bc00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bc0a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bc0e:	6013      	str	r3, [r2, #0]
}
 800bc10:	bf00      	nop
 800bc12:	46bd      	mov	sp, r7
 800bc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc18:	4770      	bx	lr

0800bc1a <LL_RCC_PLLSAI1_Disable>:
{
 800bc1a:	b480      	push	{r7}
 800bc1c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800bc1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bc28:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bc2c:	6013      	str	r3, [r2, #0]
}
 800bc2e:	bf00      	nop
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr

0800bc38 <LL_RCC_PLLSAI1_IsReady>:
{
 800bc38:	b480      	push	{r7}
 800bc3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800bc3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bc46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bc4a:	d101      	bne.n	800bc50 <LL_RCC_PLLSAI1_IsReady+0x18>
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	e000      	b.n	800bc52 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800bc50:	2300      	movs	r3, #0
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr

0800bc5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b088      	sub	sp, #32
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800bc64:	2300      	movs	r3, #0
 800bc66:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800bc68:	2300      	movs	r3, #0
 800bc6a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d034      	beq.n	800bce2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc7c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800bc80:	d021      	beq.n	800bcc6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800bc82:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800bc86:	d81b      	bhi.n	800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800bc88:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bc8c:	d01d      	beq.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800bc8e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bc92:	d815      	bhi.n	800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d00b      	beq.n	800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800bc98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bc9c:	d110      	bne.n	800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800bc9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bca2:	68db      	ldr	r3, [r3, #12]
 800bca4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bcac:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800bcae:	e00d      	b.n	800bccc <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	3304      	adds	r3, #4
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f000 f94d 	bl	800bf54 <RCCEx_PLLSAI1_ConfigNP>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800bcbe:	e005      	b.n	800bccc <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	77fb      	strb	r3, [r7, #31]
        break;
 800bcc4:	e002      	b.n	800bccc <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800bcc6:	bf00      	nop
 800bcc8:	e000      	b.n	800bccc <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800bcca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bccc:	7ffb      	ldrb	r3, [r7, #31]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d105      	bne.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f7ff fee8 	bl	800baac <LL_RCC_SetSAIClockSource>
 800bcdc:	e001      	b.n	800bce2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcde:	7ffb      	ldrb	r3, [r7, #31]
 800bce0:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d046      	beq.n	800bd7c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800bcee:	f7ff ff56 	bl	800bb9e <LL_RCC_GetRTCClockSource>
 800bcf2:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcf8:	69ba      	ldr	r2, [r7, #24]
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d03c      	beq.n	800bd78 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800bcfe:	f7fe fc49 	bl	800a594 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800bd02:	69bb      	ldr	r3, [r7, #24]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d105      	bne.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7ff ff30 	bl	800bb72 <LL_RCC_SetRTCClockSource>
 800bd12:	e02e      	b.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800bd14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd1c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800bd1e:	f7ff ff4b 	bl	800bbb8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800bd22:	f7ff ff5a 	bl	800bbda <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd30:	4313      	orrs	r3, r2
 800bd32:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800bd34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800bd3e:	f7ff fde1 	bl	800b904 <LL_RCC_LSE_IsEnabled>
 800bd42:	4603      	mov	r3, r0
 800bd44:	2b01      	cmp	r3, #1
 800bd46:	d114      	bne.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800bd48:	f7fb fa16 	bl	8007178 <HAL_GetTick>
 800bd4c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800bd4e:	e00b      	b.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd50:	f7fb fa12 	bl	8007178 <HAL_GetTick>
 800bd54:	4602      	mov	r2, r0
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	1ad3      	subs	r3, r2, r3
 800bd5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	d902      	bls.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800bd62:	2303      	movs	r3, #3
 800bd64:	77fb      	strb	r3, [r7, #31]
              break;
 800bd66:	e004      	b.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800bd68:	f7ff fdde 	bl	800b928 <LL_RCC_LSE_IsReady>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	2b01      	cmp	r3, #1
 800bd70:	d1ee      	bne.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800bd72:	7ffb      	ldrb	r3, [r7, #31]
 800bd74:	77bb      	strb	r3, [r7, #30]
 800bd76:	e001      	b.n	800bd7c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd78:	7ffb      	ldrb	r3, [r7, #31]
 800bd7a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f003 0301 	and.w	r3, r3, #1
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d004      	beq.n	800bd92 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	699b      	ldr	r3, [r3, #24]
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f7ff fe2a 	bl	800b9e6 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f003 0302 	and.w	r3, r3, #2
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d004      	beq.n	800bda8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	69db      	ldr	r3, [r3, #28]
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7ff fe35 	bl	800ba12 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	f003 0310 	and.w	r3, r3, #16
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d004      	beq.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f7ff fe5d 	bl	800ba78 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f003 0320 	and.w	r3, r3, #32
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d004      	beq.n	800bdd4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f7ff fe52 	bl	800ba78 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f003 0304 	and.w	r3, r3, #4
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d004      	beq.n	800bdea <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6a1b      	ldr	r3, [r3, #32]
 800bde4:	4618      	mov	r0, r3
 800bde6:	f7ff fe2a 	bl	800ba3e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f003 0308 	and.w	r3, r3, #8
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d004      	beq.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f7ff fe1f 	bl	800ba3e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d022      	beq.n	800be52 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be10:	4618      	mov	r0, r3
 800be12:	f7ff fe8d 	bl	800bb30 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800be1e:	d107      	bne.n	800be30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800be20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be24:	68db      	ldr	r3, [r3, #12]
 800be26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800be2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800be2e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be34:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800be38:	d10b      	bne.n	800be52 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	3304      	adds	r3, #4
 800be3e:	4618      	mov	r0, r3
 800be40:	f000 f8e3 	bl	800c00a <RCCEx_PLLSAI1_ConfigNQ>
 800be44:	4603      	mov	r3, r0
 800be46:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800be48:	7ffb      	ldrb	r3, [r7, #31]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d001      	beq.n	800be52 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800be4e:	7ffb      	ldrb	r3, [r7, #31]
 800be50:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d02b      	beq.n	800beb6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be66:	d008      	beq.n	800be7a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800be70:	d003      	beq.n	800be7a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be76:	2b00      	cmp	r3, #0
 800be78:	d105      	bne.n	800be86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be7e:	4618      	mov	r0, r3
 800be80:	f7ff fe2a 	bl	800bad8 <LL_RCC_SetRNGClockSource>
 800be84:	e00a      	b.n	800be9c <HAL_RCCEx_PeriphCLKConfig+0x240>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800be8e:	60fb      	str	r3, [r7, #12]
 800be90:	2000      	movs	r0, #0
 800be92:	f7ff fe21 	bl	800bad8 <LL_RCC_SetRNGClockSource>
 800be96:	68f8      	ldr	r0, [r7, #12]
 800be98:	f7ff fe34 	bl	800bb04 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bea0:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800bea4:	d107      	bne.n	800beb6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800bea6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800beaa:	68db      	ldr	r3, [r3, #12]
 800beac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800beb0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800beb4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d022      	beq.n	800bf08 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bec6:	4618      	mov	r0, r3
 800bec8:	f7ff fe3d 	bl	800bb46 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bed0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bed4:	d107      	bne.n	800bee6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bed6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800beda:	68db      	ldr	r3, [r3, #12]
 800bedc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bee4:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800beea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800beee:	d10b      	bne.n	800bf08 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	3304      	adds	r3, #4
 800bef4:	4618      	mov	r0, r3
 800bef6:	f000 f8e3 	bl	800c0c0 <RCCEx_PLLSAI1_ConfigNR>
 800befa:	4603      	mov	r3, r0
 800befc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800befe:	7ffb      	ldrb	r3, [r7, #31]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d001      	beq.n	800bf08 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800bf04:	7ffb      	ldrb	r3, [r7, #31]
 800bf06:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d004      	beq.n	800bf1e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f7ff fd26 	bl	800b96a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d009      	beq.n	800bf3e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f7ff fd45 	bl	800b9be <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f7ff fd2c 	bl	800b996 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800bf3e:	7fbb      	ldrb	r3, [r7, #30]
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3720      	adds	r7, #32
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800bf4c:	f7ff fcfe 	bl	800b94c <LL_RCC_MSI_EnablePLLMode>
}
 800bf50:	bf00      	nop
 800bf52:	bd80      	pop	{r7, pc}

0800bf54 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b084      	sub	sp, #16
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800bf60:	f7ff fe5b 	bl	800bc1a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bf64:	f7fb f908 	bl	8007178 <HAL_GetTick>
 800bf68:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bf6a:	e009      	b.n	800bf80 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bf6c:	f7fb f904 	bl	8007178 <HAL_GetTick>
 800bf70:	4602      	mov	r2, r0
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	1ad3      	subs	r3, r2, r3
 800bf76:	2b02      	cmp	r3, #2
 800bf78:	d902      	bls.n	800bf80 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800bf7a:	2303      	movs	r3, #3
 800bf7c:	73fb      	strb	r3, [r7, #15]
      break;
 800bf7e:	e004      	b.n	800bf8a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bf80:	f7ff fe5a 	bl	800bc38 <LL_RCC_PLLSAI1_IsReady>
 800bf84:	4603      	mov	r3, r0
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d1f0      	bne.n	800bf6c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800bf8a:	7bfb      	ldrb	r3, [r7, #15]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d137      	bne.n	800c000 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800bf90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf94:	691b      	ldr	r3, [r3, #16]
 800bf96:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	021b      	lsls	r3, r3, #8
 800bfa0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bfa4:	4313      	orrs	r3, r2
 800bfa6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800bfa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bfac:	691b      	ldr	r3, [r3, #16]
 800bfae:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	685b      	ldr	r3, [r3, #4]
 800bfb6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bfba:	4313      	orrs	r3, r2
 800bfbc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800bfbe:	f7ff fe1d 	bl	800bbfc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bfc2:	f7fb f8d9 	bl	8007178 <HAL_GetTick>
 800bfc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bfc8:	e009      	b.n	800bfde <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bfca:	f7fb f8d5 	bl	8007178 <HAL_GetTick>
 800bfce:	4602      	mov	r2, r0
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	1ad3      	subs	r3, r2, r3
 800bfd4:	2b02      	cmp	r3, #2
 800bfd6:	d902      	bls.n	800bfde <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800bfd8:	2303      	movs	r3, #3
 800bfda:	73fb      	strb	r3, [r7, #15]
        break;
 800bfdc:	e004      	b.n	800bfe8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bfde:	f7ff fe2b 	bl	800bc38 <LL_RCC_PLLSAI1_IsReady>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	d1f0      	bne.n	800bfca <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800bfe8:	7bfb      	ldrb	r3, [r7, #15]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d108      	bne.n	800c000 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800bfee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bff2:	691a      	ldr	r2, [r3, #16]
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	691b      	ldr	r3, [r3, #16]
 800bff8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bffc:	4313      	orrs	r3, r2
 800bffe:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c000:	7bfb      	ldrb	r3, [r7, #15]
}
 800c002:	4618      	mov	r0, r3
 800c004:	3710      	adds	r7, #16
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}

0800c00a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c00a:	b580      	push	{r7, lr}
 800c00c:	b084      	sub	sp, #16
 800c00e:	af00      	add	r7, sp, #0
 800c010:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c012:	2300      	movs	r3, #0
 800c014:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c016:	f7ff fe00 	bl	800bc1a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c01a:	f7fb f8ad 	bl	8007178 <HAL_GetTick>
 800c01e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c020:	e009      	b.n	800c036 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c022:	f7fb f8a9 	bl	8007178 <HAL_GetTick>
 800c026:	4602      	mov	r2, r0
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	1ad3      	subs	r3, r2, r3
 800c02c:	2b02      	cmp	r3, #2
 800c02e:	d902      	bls.n	800c036 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800c030:	2303      	movs	r3, #3
 800c032:	73fb      	strb	r3, [r7, #15]
      break;
 800c034:	e004      	b.n	800c040 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c036:	f7ff fdff 	bl	800bc38 <LL_RCC_PLLSAI1_IsReady>
 800c03a:	4603      	mov	r3, r0
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d1f0      	bne.n	800c022 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800c040:	7bfb      	ldrb	r3, [r7, #15]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d137      	bne.n	800c0b6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c046:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c04a:	691b      	ldr	r3, [r3, #16]
 800c04c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	021b      	lsls	r3, r3, #8
 800c056:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c05a:	4313      	orrs	r3, r2
 800c05c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800c05e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c062:	691b      	ldr	r3, [r3, #16]
 800c064:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	689b      	ldr	r3, [r3, #8]
 800c06c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c070:	4313      	orrs	r3, r2
 800c072:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c074:	f7ff fdc2 	bl	800bbfc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c078:	f7fb f87e 	bl	8007178 <HAL_GetTick>
 800c07c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c07e:	e009      	b.n	800c094 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c080:	f7fb f87a 	bl	8007178 <HAL_GetTick>
 800c084:	4602      	mov	r2, r0
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	1ad3      	subs	r3, r2, r3
 800c08a:	2b02      	cmp	r3, #2
 800c08c:	d902      	bls.n	800c094 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800c08e:	2303      	movs	r3, #3
 800c090:	73fb      	strb	r3, [r7, #15]
        break;
 800c092:	e004      	b.n	800c09e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c094:	f7ff fdd0 	bl	800bc38 <LL_RCC_PLLSAI1_IsReady>
 800c098:	4603      	mov	r3, r0
 800c09a:	2b01      	cmp	r3, #1
 800c09c:	d1f0      	bne.n	800c080 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800c09e:	7bfb      	ldrb	r3, [r7, #15]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d108      	bne.n	800c0b6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c0a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c0a8:	691a      	ldr	r2, [r3, #16]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	691b      	ldr	r3, [r3, #16]
 800c0ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c0b2:	4313      	orrs	r3, r2
 800c0b4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c0b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3710      	adds	r7, #16
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}

0800c0c0 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c0cc:	f7ff fda5 	bl	800bc1a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c0d0:	f7fb f852 	bl	8007178 <HAL_GetTick>
 800c0d4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c0d6:	e009      	b.n	800c0ec <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c0d8:	f7fb f84e 	bl	8007178 <HAL_GetTick>
 800c0dc:	4602      	mov	r2, r0
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	1ad3      	subs	r3, r2, r3
 800c0e2:	2b02      	cmp	r3, #2
 800c0e4:	d902      	bls.n	800c0ec <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800c0e6:	2303      	movs	r3, #3
 800c0e8:	73fb      	strb	r3, [r7, #15]
      break;
 800c0ea:	e004      	b.n	800c0f6 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c0ec:	f7ff fda4 	bl	800bc38 <LL_RCC_PLLSAI1_IsReady>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d1f0      	bne.n	800c0d8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800c0f6:	7bfb      	ldrb	r3, [r7, #15]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d137      	bne.n	800c16c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c0fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c100:	691b      	ldr	r3, [r3, #16]
 800c102:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	021b      	lsls	r3, r3, #8
 800c10c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c110:	4313      	orrs	r3, r2
 800c112:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800c114:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c118:	691b      	ldr	r3, [r3, #16]
 800c11a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	68db      	ldr	r3, [r3, #12]
 800c122:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c126:	4313      	orrs	r3, r2
 800c128:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c12a:	f7ff fd67 	bl	800bbfc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c12e:	f7fb f823 	bl	8007178 <HAL_GetTick>
 800c132:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c134:	e009      	b.n	800c14a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c136:	f7fb f81f 	bl	8007178 <HAL_GetTick>
 800c13a:	4602      	mov	r2, r0
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	1ad3      	subs	r3, r2, r3
 800c140:	2b02      	cmp	r3, #2
 800c142:	d902      	bls.n	800c14a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800c144:	2303      	movs	r3, #3
 800c146:	73fb      	strb	r3, [r7, #15]
        break;
 800c148:	e004      	b.n	800c154 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c14a:	f7ff fd75 	bl	800bc38 <LL_RCC_PLLSAI1_IsReady>
 800c14e:	4603      	mov	r3, r0
 800c150:	2b01      	cmp	r3, #1
 800c152:	d1f0      	bne.n	800c136 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800c154:	7bfb      	ldrb	r3, [r7, #15]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d108      	bne.n	800c16c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c15a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c15e:	691a      	ldr	r2, [r3, #16]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	691b      	ldr	r3, [r3, #16]
 800c164:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c168:	4313      	orrs	r3, r2
 800c16a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c16c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3710      	adds	r7, #16
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}

0800c176 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c176:	b580      	push	{r7, lr}
 800c178:	b084      	sub	sp, #16
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c17e:	2301      	movs	r3, #1
 800c180:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d101      	bne.n	800c18c <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800c188:	2301      	movs	r3, #1
 800c18a:	e07a      	b.n	800c282 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c192:	b2db      	uxtb	r3, r3
 800c194:	2b00      	cmp	r3, #0
 800c196:	d106      	bne.n	800c1a6 <HAL_RTC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2200      	movs	r2, #0
 800c19c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f7fa fa5f 	bl	8006664 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2202      	movs	r2, #2
 800c1aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	68db      	ldr	r3, [r3, #12]
 800c1b4:	f003 0310 	and.w	r3, r3, #16
 800c1b8:	2b10      	cmp	r3, #16
 800c1ba:	d058      	beq.n	800c26e <HAL_RTC_Init+0xf8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	22ca      	movs	r2, #202	@ 0xca
 800c1c2:	625a      	str	r2, [r3, #36]	@ 0x24
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	2253      	movs	r2, #83	@ 0x53
 800c1ca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f000 f883 	bl	800c2d8 <RTC_EnterInitMode>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800c1d6:	7bfb      	ldrb	r3, [r7, #15]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d12c      	bne.n	800c236 <HAL_RTC_Init+0xc0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	689b      	ldr	r3, [r3, #8]
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	6812      	ldr	r2, [r2, #0]
 800c1e6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c1ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c1ee:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	6899      	ldr	r1, [r3, #8]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	685a      	ldr	r2, [r3, #4]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	691b      	ldr	r3, [r3, #16]
 800c1fe:	431a      	orrs	r2, r3
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	699b      	ldr	r3, [r3, #24]
 800c204:	431a      	orrs	r2, r3
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	430a      	orrs	r2, r1
 800c20c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	687a      	ldr	r2, [r7, #4]
 800c214:	68d2      	ldr	r2, [r2, #12]
 800c216:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	6919      	ldr	r1, [r3, #16]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	689b      	ldr	r3, [r3, #8]
 800c222:	041a      	lsls	r2, r3, #16
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	430a      	orrs	r2, r1
 800c22a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f000 f88b 	bl	800c348 <RTC_ExitInitMode>
 800c232:	4603      	mov	r3, r0
 800c234:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c236:	7bfb      	ldrb	r3, [r7, #15]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d113      	bne.n	800c264 <HAL_RTC_Init+0xee>
    {
#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f022 0203 	bic.w	r2, r2, #3
 800c24a:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	69da      	ldr	r2, [r3, #28]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	695b      	ldr	r3, [r3, #20]
 800c25a:	431a      	orrs	r2, r3
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	430a      	orrs	r2, r1
 800c262:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutRemap);
#endif /* RTC_OR_ALARMOUTTYPE */
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	22ff      	movs	r2, #255	@ 0xff
 800c26a:	625a      	str	r2, [r3, #36]	@ 0x24
 800c26c:	e001      	b.n	800c272 <HAL_RTC_Init+0xfc>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800c26e:	2300      	movs	r3, #0
 800c270:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800c272:	7bfb      	ldrb	r3, [r7, #15]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d103      	bne.n	800c280 <HAL_RTC_Init+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2201      	movs	r2, #1
 800c27c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800c280:	7bfb      	ldrb	r3, [r7, #15]
}
 800c282:	4618      	mov	r0, r3
 800c284:	3710      	adds	r7, #16
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
	...

0800c28c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b084      	sub	sp, #16
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c294:	2300      	movs	r3, #0
 800c296:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	4a0d      	ldr	r2, [pc, #52]	@ (800c2d4 <HAL_RTC_WaitForSynchro+0x48>)
 800c29e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c2a0:	f7fa ff6a 	bl	8007178 <HAL_GetTick>
 800c2a4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c2a6:	e009      	b.n	800c2bc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c2a8:	f7fa ff66 	bl	8007178 <HAL_GetTick>
 800c2ac:	4602      	mov	r2, r0
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	1ad3      	subs	r3, r2, r3
 800c2b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c2b6:	d901      	bls.n	800c2bc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800c2b8:	2303      	movs	r3, #3
 800c2ba:	e007      	b.n	800c2cc <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	68db      	ldr	r3, [r3, #12]
 800c2c2:	f003 0320 	and.w	r3, r3, #32
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d0ee      	beq.n	800c2a8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800c2ca:	2300      	movs	r3, #0
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3710      	adds	r7, #16
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}
 800c2d4:	0001ff5f 	.word	0x0001ff5f

0800c2d8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b084      	sub	sp, #16
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	68db      	ldr	r3, [r3, #12]
 800c2ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d123      	bne.n	800c33e <RTC_EnterInitMode+0x66>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	68da      	ldr	r2, [r3, #12]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c304:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c306:	f7fa ff37 	bl	8007178 <HAL_GetTick>
 800c30a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800c30c:	e00d      	b.n	800c32a <RTC_EnterInitMode+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c30e:	f7fa ff33 	bl	8007178 <HAL_GetTick>
 800c312:	4602      	mov	r2, r0
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	1ad3      	subs	r3, r2, r3
 800c318:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c31c:	d905      	bls.n	800c32a <RTC_EnterInitMode+0x52>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2204      	movs	r2, #4
 800c322:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        status = HAL_ERROR;
 800c326:	2301      	movs	r3, #1
 800c328:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	68db      	ldr	r3, [r3, #12]
 800c330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c334:	2b00      	cmp	r3, #0
 800c336:	d102      	bne.n	800c33e <RTC_EnterInitMode+0x66>
 800c338:	7bfb      	ldrb	r3, [r7, #15]
 800c33a:	2b01      	cmp	r3, #1
 800c33c:	d1e7      	bne.n	800c30e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800c33e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c340:	4618      	mov	r0, r3
 800c342:	3710      	adds	r7, #16
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b084      	sub	sp, #16
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c350:	2300      	movs	r3, #0
 800c352:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	68da      	ldr	r2, [r3, #12]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c362:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	689b      	ldr	r3, [r3, #8]
 800c36a:	f003 0320 	and.w	r3, r3, #32
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d10b      	bne.n	800c38a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f7ff ff8a 	bl	800c28c <HAL_RTC_WaitForSynchro>
 800c378:	4603      	mov	r3, r0
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d005      	beq.n	800c38a <RTC_ExitInitMode+0x42>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2204      	movs	r2, #4
 800c382:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_ERROR;
 800c386:	2301      	movs	r3, #1
 800c388:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800c38a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3710      	adds	r7, #16
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800c394:	b480      	push	{r7}
 800c396:	b087      	sub	sp, #28
 800c398:	af00      	add	r7, sp, #0
 800c39a:	60f8      	str	r0, [r7, #12]
 800c39c:	60b9      	str	r1, [r7, #8]
 800c39e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800c3a0:	4b5f      	ldr	r3, [pc, #380]	@ (800c520 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	4a5f      	ldr	r2, [pc, #380]	@ (800c524 <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 800c3a6:	fba2 2303 	umull	r2, r3, r2, r3
 800c3aa:	0adb      	lsrs	r3, r3, #11
 800c3ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c3b0:	fb02 f303 	mul.w	r3, r2, r3
 800c3b4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c3bc:	2b01      	cmp	r3, #1
 800c3be:	d101      	bne.n	800c3c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x30>
 800c3c0:	2302      	movs	r3, #2
 800c3c2:	e0a7      	b.n	800c514 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	2202      	movs	r2, #2
 800c3d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	22ca      	movs	r2, #202	@ 0xca
 800c3da:	625a      	str	r2, [r3, #36]	@ 0x24
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	2253      	movs	r2, #83	@ 0x53
 800c3e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	689b      	ldr	r3, [r3, #8]
 800c3ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d01a      	beq.n	800c428 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	3b01      	subs	r3, #1
 800c3f6:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d10d      	bne.n	800c41a <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	22ff      	movs	r2, #255	@ 0xff
 800c404:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	2203      	movs	r2, #3
 800c40a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	2200      	movs	r2, #0
 800c412:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800c416:	2303      	movs	r3, #3
 800c418:	e07c      	b.n	800c514 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	68db      	ldr	r3, [r3, #12]
 800c420:	f003 0304 	and.w	r3, r3, #4
 800c424:	2b00      	cmp	r3, #0
 800c426:	d1e4      	bne.n	800c3f2 <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	689a      	ldr	r2, [r3, #8]
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c436:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	68db      	ldr	r3, [r3, #12]
 800c43e:	b2da      	uxtb	r2, r3
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800c448:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800c44a:	4b35      	ldr	r3, [pc, #212]	@ (800c520 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	4a35      	ldr	r2, [pc, #212]	@ (800c524 <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 800c450:	fba2 2303 	umull	r2, r3, r2, r3
 800c454:	0adb      	lsrs	r3, r3, #11
 800c456:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c45a:	fb02 f303 	mul.w	r3, r2, r3
 800c45e:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	3b01      	subs	r3, #1
 800c464:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d10d      	bne.n	800c488 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	22ff      	movs	r2, #255	@ 0xff
 800c472:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	2203      	movs	r2, #3
 800c478:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	2200      	movs	r2, #0
 800c480:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800c484:	2303      	movs	r3, #3
 800c486:	e045      	b.n	800c514 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	68db      	ldr	r3, [r3, #12]
 800c48e:	f003 0304 	and.w	r3, r3, #4
 800c492:	2b00      	cmp	r3, #0
 800c494:	d0e4      	beq.n	800c460 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	689a      	ldr	r2, [r3, #8]
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	f022 0207 	bic.w	r2, r2, #7
 800c4a4:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	6899      	ldr	r1, [r3, #8]
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	430a      	orrs	r2, r1
 800c4b4:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	68ba      	ldr	r2, [r7, #8]
 800c4bc:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800c4be:	4b1a      	ldr	r3, [pc, #104]	@ (800c528 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800c4c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4c4:	4a18      	ldr	r2, [pc, #96]	@ (800c528 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800c4c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c4ca:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800c4ce:	4b16      	ldr	r3, [pc, #88]	@ (800c528 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	4a15      	ldr	r2, [pc, #84]	@ (800c528 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800c4d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c4d8:	6013      	str	r3, [r2, #0]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	689a      	ldr	r2, [r3, #8]
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c4e8:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	689a      	ldr	r2, [r3, #8]
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c4f8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	22ff      	movs	r2, #255	@ 0xff
 800c500:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	2201      	movs	r2, #1
 800c506:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	2200      	movs	r2, #0
 800c50e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800c512:	2300      	movs	r3, #0
}
 800c514:	4618      	mov	r0, r3
 800c516:	371c      	adds	r7, #28
 800c518:	46bd      	mov	sp, r7
 800c51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51e:	4770      	bx	lr
 800c520:	20000024 	.word	0x20000024
 800c524:	10624dd3 	.word	0x10624dd3
 800c528:	58000800 	.word	0x58000800

0800c52c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b084      	sub	sp, #16
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d101      	bne.n	800c53e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c53a:	2301      	movs	r3, #1
 800c53c:	e095      	b.n	800c66a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c542:	2b00      	cmp	r3, #0
 800c544:	d108      	bne.n	800c558 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c54e:	d009      	beq.n	800c564 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2200      	movs	r2, #0
 800c554:	61da      	str	r2, [r3, #28]
 800c556:	e005      	b.n	800c564 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2200      	movs	r2, #0
 800c55c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2200      	movs	r2, #0
 800c562:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2200      	movs	r2, #0
 800c568:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c570:	b2db      	uxtb	r3, r3
 800c572:	2b00      	cmp	r3, #0
 800c574:	d106      	bne.n	800c584 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2200      	movs	r2, #0
 800c57a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f7fa f96c 	bl	800685c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2202      	movs	r2, #2
 800c588:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	681a      	ldr	r2, [r3, #0]
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c59a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	68db      	ldr	r3, [r3, #12]
 800c5a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c5a4:	d902      	bls.n	800c5ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	60fb      	str	r3, [r7, #12]
 800c5aa:	e002      	b.n	800c5b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c5ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c5b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	68db      	ldr	r3, [r3, #12]
 800c5b6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800c5ba:	d007      	beq.n	800c5cc <HAL_SPI_Init+0xa0>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	68db      	ldr	r3, [r3, #12]
 800c5c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c5c4:	d002      	beq.n	800c5cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	685b      	ldr	r3, [r3, #4]
 800c5d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	689b      	ldr	r3, [r3, #8]
 800c5d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800c5dc:	431a      	orrs	r2, r3
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	691b      	ldr	r3, [r3, #16]
 800c5e2:	f003 0302 	and.w	r3, r3, #2
 800c5e6:	431a      	orrs	r2, r3
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	695b      	ldr	r3, [r3, #20]
 800c5ec:	f003 0301 	and.w	r3, r3, #1
 800c5f0:	431a      	orrs	r2, r3
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	699b      	ldr	r3, [r3, #24]
 800c5f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c5fa:	431a      	orrs	r2, r3
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	69db      	ldr	r3, [r3, #28]
 800c600:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c604:	431a      	orrs	r2, r3
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6a1b      	ldr	r3, [r3, #32]
 800c60a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c60e:	ea42 0103 	orr.w	r1, r2, r3
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c616:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	430a      	orrs	r2, r1
 800c620:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	699b      	ldr	r3, [r3, #24]
 800c626:	0c1b      	lsrs	r3, r3, #16
 800c628:	f003 0204 	and.w	r2, r3, #4
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c630:	f003 0310 	and.w	r3, r3, #16
 800c634:	431a      	orrs	r2, r3
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c63a:	f003 0308 	and.w	r3, r3, #8
 800c63e:	431a      	orrs	r2, r3
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	68db      	ldr	r3, [r3, #12]
 800c644:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800c648:	ea42 0103 	orr.w	r1, r2, r3
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	430a      	orrs	r2, r1
 800c658:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2200      	movs	r2, #0
 800c65e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2201      	movs	r2, #1
 800c664:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800c668:	2300      	movs	r3, #0
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3710      	adds	r7, #16
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}

0800c672 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c672:	b580      	push	{r7, lr}
 800c674:	b088      	sub	sp, #32
 800c676:	af00      	add	r7, sp, #0
 800c678:	60f8      	str	r0, [r7, #12]
 800c67a:	60b9      	str	r1, [r7, #8]
 800c67c:	603b      	str	r3, [r7, #0]
 800c67e:	4613      	mov	r3, r2
 800c680:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c682:	f7fa fd79 	bl	8007178 <HAL_GetTick>
 800c686:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800c688:	88fb      	ldrh	r3, [r7, #6]
 800c68a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c692:	b2db      	uxtb	r3, r3
 800c694:	2b01      	cmp	r3, #1
 800c696:	d001      	beq.n	800c69c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800c698:	2302      	movs	r3, #2
 800c69a:	e15c      	b.n	800c956 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d002      	beq.n	800c6a8 <HAL_SPI_Transmit+0x36>
 800c6a2:	88fb      	ldrh	r3, [r7, #6]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d101      	bne.n	800c6ac <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	e154      	b.n	800c956 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800c6b2:	2b01      	cmp	r3, #1
 800c6b4:	d101      	bne.n	800c6ba <HAL_SPI_Transmit+0x48>
 800c6b6:	2302      	movs	r3, #2
 800c6b8:	e14d      	b.n	800c956 <HAL_SPI_Transmit+0x2e4>
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	2201      	movs	r2, #1
 800c6be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	2203      	movs	r2, #3
 800c6c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	68ba      	ldr	r2, [r7, #8]
 800c6d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	88fa      	ldrh	r2, [r7, #6]
 800c6da:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	88fa      	ldrh	r2, [r7, #6]
 800c6e0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	2200      	movs	r2, #0
 800c702:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	689b      	ldr	r3, [r3, #8]
 800c708:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c70c:	d10f      	bne.n	800c72e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	681a      	ldr	r2, [r3, #0]
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c71c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c72c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c738:	2b40      	cmp	r3, #64	@ 0x40
 800c73a:	d007      	beq.n	800c74c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	681a      	ldr	r2, [r3, #0]
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c74a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	68db      	ldr	r3, [r3, #12]
 800c750:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c754:	d952      	bls.n	800c7fc <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	685b      	ldr	r3, [r3, #4]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d002      	beq.n	800c764 <HAL_SPI_Transmit+0xf2>
 800c75e:	8b7b      	ldrh	r3, [r7, #26]
 800c760:	2b01      	cmp	r3, #1
 800c762:	d145      	bne.n	800c7f0 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c768:	881a      	ldrh	r2, [r3, #0]
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c774:	1c9a      	adds	r2, r3, #2
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c77e:	b29b      	uxth	r3, r3
 800c780:	3b01      	subs	r3, #1
 800c782:	b29a      	uxth	r2, r3
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c788:	e032      	b.n	800c7f0 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	689b      	ldr	r3, [r3, #8]
 800c790:	f003 0302 	and.w	r3, r3, #2
 800c794:	2b02      	cmp	r3, #2
 800c796:	d112      	bne.n	800c7be <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c79c:	881a      	ldrh	r2, [r3, #0]
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7a8:	1c9a      	adds	r2, r3, #2
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c7b2:	b29b      	uxth	r3, r3
 800c7b4:	3b01      	subs	r3, #1
 800c7b6:	b29a      	uxth	r2, r3
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c7bc:	e018      	b.n	800c7f0 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c7be:	f7fa fcdb 	bl	8007178 <HAL_GetTick>
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	69fb      	ldr	r3, [r7, #28]
 800c7c6:	1ad3      	subs	r3, r2, r3
 800c7c8:	683a      	ldr	r2, [r7, #0]
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d803      	bhi.n	800c7d6 <HAL_SPI_Transmit+0x164>
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7d4:	d102      	bne.n	800c7dc <HAL_SPI_Transmit+0x16a>
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d109      	bne.n	800c7f0 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	2201      	movs	r2, #1
 800c7e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800c7ec:	2303      	movs	r3, #3
 800c7ee:	e0b2      	b.n	800c956 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c7f4:	b29b      	uxth	r3, r3
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d1c7      	bne.n	800c78a <HAL_SPI_Transmit+0x118>
 800c7fa:	e083      	b.n	800c904 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	685b      	ldr	r3, [r3, #4]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d002      	beq.n	800c80a <HAL_SPI_Transmit+0x198>
 800c804:	8b7b      	ldrh	r3, [r7, #26]
 800c806:	2b01      	cmp	r3, #1
 800c808:	d177      	bne.n	800c8fa <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c80e:	b29b      	uxth	r3, r3
 800c810:	2b01      	cmp	r3, #1
 800c812:	d912      	bls.n	800c83a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c818:	881a      	ldrh	r2, [r3, #0]
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c824:	1c9a      	adds	r2, r3, #2
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c82e:	b29b      	uxth	r3, r3
 800c830:	3b02      	subs	r3, #2
 800c832:	b29a      	uxth	r2, r3
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c838:	e05f      	b.n	800c8fa <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	330c      	adds	r3, #12
 800c844:	7812      	ldrb	r2, [r2, #0]
 800c846:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c84c:	1c5a      	adds	r2, r3, #1
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c856:	b29b      	uxth	r3, r3
 800c858:	3b01      	subs	r3, #1
 800c85a:	b29a      	uxth	r2, r3
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800c860:	e04b      	b.n	800c8fa <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	689b      	ldr	r3, [r3, #8]
 800c868:	f003 0302 	and.w	r3, r3, #2
 800c86c:	2b02      	cmp	r3, #2
 800c86e:	d12b      	bne.n	800c8c8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c874:	b29b      	uxth	r3, r3
 800c876:	2b01      	cmp	r3, #1
 800c878:	d912      	bls.n	800c8a0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c87e:	881a      	ldrh	r2, [r3, #0]
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c88a:	1c9a      	adds	r2, r3, #2
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c894:	b29b      	uxth	r3, r3
 800c896:	3b02      	subs	r3, #2
 800c898:	b29a      	uxth	r2, r3
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c89e:	e02c      	b.n	800c8fa <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	330c      	adds	r3, #12
 800c8aa:	7812      	ldrb	r2, [r2, #0]
 800c8ac:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8b2:	1c5a      	adds	r2, r3, #1
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c8bc:	b29b      	uxth	r3, r3
 800c8be:	3b01      	subs	r3, #1
 800c8c0:	b29a      	uxth	r2, r3
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c8c6:	e018      	b.n	800c8fa <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c8c8:	f7fa fc56 	bl	8007178 <HAL_GetTick>
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	69fb      	ldr	r3, [r7, #28]
 800c8d0:	1ad3      	subs	r3, r2, r3
 800c8d2:	683a      	ldr	r2, [r7, #0]
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d803      	bhi.n	800c8e0 <HAL_SPI_Transmit+0x26e>
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8de:	d102      	bne.n	800c8e6 <HAL_SPI_Transmit+0x274>
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d109      	bne.n	800c8fa <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	2201      	movs	r2, #1
 800c8ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800c8f6:	2303      	movs	r3, #3
 800c8f8:	e02d      	b.n	800c956 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c8fe:	b29b      	uxth	r3, r3
 800c900:	2b00      	cmp	r3, #0
 800c902:	d1ae      	bne.n	800c862 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c904:	69fa      	ldr	r2, [r7, #28]
 800c906:	6839      	ldr	r1, [r7, #0]
 800c908:	68f8      	ldr	r0, [r7, #12]
 800c90a:	f000 fc85 	bl	800d218 <SPI_EndRxTxTransaction>
 800c90e:	4603      	mov	r3, r0
 800c910:	2b00      	cmp	r3, #0
 800c912:	d002      	beq.n	800c91a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2220      	movs	r2, #32
 800c918:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	689b      	ldr	r3, [r3, #8]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d10a      	bne.n	800c938 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c922:	2300      	movs	r3, #0
 800c924:	617b      	str	r3, [r7, #20]
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	68db      	ldr	r3, [r3, #12]
 800c92c:	617b      	str	r3, [r7, #20]
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	689b      	ldr	r3, [r3, #8]
 800c934:	617b      	str	r3, [r7, #20]
 800c936:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	2201      	movs	r2, #1
 800c93c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	2200      	movs	r2, #0
 800c944:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d001      	beq.n	800c954 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800c950:	2301      	movs	r3, #1
 800c952:	e000      	b.n	800c956 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800c954:	2300      	movs	r3, #0
  }
}
 800c956:	4618      	mov	r0, r3
 800c958:	3720      	adds	r7, #32
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}

0800c95e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800c95e:	b580      	push	{r7, lr}
 800c960:	b08a      	sub	sp, #40	@ 0x28
 800c962:	af00      	add	r7, sp, #0
 800c964:	60f8      	str	r0, [r7, #12]
 800c966:	60b9      	str	r1, [r7, #8]
 800c968:	607a      	str	r2, [r7, #4]
 800c96a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c96c:	2301      	movs	r3, #1
 800c96e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c970:	f7fa fc02 	bl	8007178 <HAL_GetTick>
 800c974:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c97c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800c984:	887b      	ldrh	r3, [r7, #2]
 800c986:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800c988:	887b      	ldrh	r3, [r7, #2]
 800c98a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c98c:	7ffb      	ldrb	r3, [r7, #31]
 800c98e:	2b01      	cmp	r3, #1
 800c990:	d00c      	beq.n	800c9ac <HAL_SPI_TransmitReceive+0x4e>
 800c992:	69bb      	ldr	r3, [r7, #24]
 800c994:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c998:	d106      	bne.n	800c9a8 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	689b      	ldr	r3, [r3, #8]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d102      	bne.n	800c9a8 <HAL_SPI_TransmitReceive+0x4a>
 800c9a2:	7ffb      	ldrb	r3, [r7, #31]
 800c9a4:	2b04      	cmp	r3, #4
 800c9a6:	d001      	beq.n	800c9ac <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800c9a8:	2302      	movs	r3, #2
 800c9aa:	e1f3      	b.n	800cd94 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d005      	beq.n	800c9be <HAL_SPI_TransmitReceive+0x60>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d002      	beq.n	800c9be <HAL_SPI_TransmitReceive+0x60>
 800c9b8:	887b      	ldrh	r3, [r7, #2]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d101      	bne.n	800c9c2 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800c9be:	2301      	movs	r3, #1
 800c9c0:	e1e8      	b.n	800cd94 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800c9c8:	2b01      	cmp	r3, #1
 800c9ca:	d101      	bne.n	800c9d0 <HAL_SPI_TransmitReceive+0x72>
 800c9cc:	2302      	movs	r3, #2
 800c9ce:	e1e1      	b.n	800cd94 <HAL_SPI_TransmitReceive+0x436>
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	2b04      	cmp	r3, #4
 800c9e2:	d003      	beq.n	800c9ec <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	2205      	movs	r2, #5
 800c9e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	687a      	ldr	r2, [r7, #4]
 800c9f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	887a      	ldrh	r2, [r7, #2]
 800c9fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	887a      	ldrh	r2, [r7, #2]
 800ca04:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	68ba      	ldr	r2, [r7, #8]
 800ca0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	887a      	ldrh	r2, [r7, #2]
 800ca12:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	887a      	ldrh	r2, [r7, #2]
 800ca18:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	2200      	movs	r2, #0
 800ca24:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	68db      	ldr	r3, [r3, #12]
 800ca2a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ca2e:	d802      	bhi.n	800ca36 <HAL_SPI_TransmitReceive+0xd8>
 800ca30:	8abb      	ldrh	r3, [r7, #20]
 800ca32:	2b01      	cmp	r3, #1
 800ca34:	d908      	bls.n	800ca48 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	685a      	ldr	r2, [r3, #4]
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800ca44:	605a      	str	r2, [r3, #4]
 800ca46:	e007      	b.n	800ca58 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	685a      	ldr	r2, [r3, #4]
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ca56:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca62:	2b40      	cmp	r3, #64	@ 0x40
 800ca64:	d007      	beq.n	800ca76 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	681a      	ldr	r2, [r3, #0]
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ca74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	68db      	ldr	r3, [r3, #12]
 800ca7a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ca7e:	f240 8083 	bls.w	800cb88 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	685b      	ldr	r3, [r3, #4]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d002      	beq.n	800ca90 <HAL_SPI_TransmitReceive+0x132>
 800ca8a:	8afb      	ldrh	r3, [r7, #22]
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	d16f      	bne.n	800cb70 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca94:	881a      	ldrh	r2, [r3, #0]
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800caa0:	1c9a      	adds	r2, r3, #2
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800caaa:	b29b      	uxth	r3, r3
 800caac:	3b01      	subs	r3, #1
 800caae:	b29a      	uxth	r2, r3
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cab4:	e05c      	b.n	800cb70 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	689b      	ldr	r3, [r3, #8]
 800cabc:	f003 0302 	and.w	r3, r3, #2
 800cac0:	2b02      	cmp	r3, #2
 800cac2:	d11b      	bne.n	800cafc <HAL_SPI_TransmitReceive+0x19e>
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cac8:	b29b      	uxth	r3, r3
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d016      	beq.n	800cafc <HAL_SPI_TransmitReceive+0x19e>
 800cace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cad0:	2b01      	cmp	r3, #1
 800cad2:	d113      	bne.n	800cafc <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cad8:	881a      	ldrh	r2, [r3, #0]
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cae4:	1c9a      	adds	r2, r3, #2
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800caee:	b29b      	uxth	r3, r3
 800caf0:	3b01      	subs	r3, #1
 800caf2:	b29a      	uxth	r2, r3
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800caf8:	2300      	movs	r3, #0
 800cafa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	689b      	ldr	r3, [r3, #8]
 800cb02:	f003 0301 	and.w	r3, r3, #1
 800cb06:	2b01      	cmp	r3, #1
 800cb08:	d11c      	bne.n	800cb44 <HAL_SPI_TransmitReceive+0x1e6>
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cb10:	b29b      	uxth	r3, r3
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d016      	beq.n	800cb44 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	68da      	ldr	r2, [r3, #12]
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb20:	b292      	uxth	r2, r2
 800cb22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb28:	1c9a      	adds	r2, r3, #2
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cb34:	b29b      	uxth	r3, r3
 800cb36:	3b01      	subs	r3, #1
 800cb38:	b29a      	uxth	r2, r3
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800cb40:	2301      	movs	r3, #1
 800cb42:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800cb44:	f7fa fb18 	bl	8007178 <HAL_GetTick>
 800cb48:	4602      	mov	r2, r0
 800cb4a:	6a3b      	ldr	r3, [r7, #32]
 800cb4c:	1ad3      	subs	r3, r2, r3
 800cb4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb50:	429a      	cmp	r2, r3
 800cb52:	d80d      	bhi.n	800cb70 <HAL_SPI_TransmitReceive+0x212>
 800cb54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb5a:	d009      	beq.n	800cb70 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2201      	movs	r2, #1
 800cb60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2200      	movs	r2, #0
 800cb68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800cb6c:	2303      	movs	r3, #3
 800cb6e:	e111      	b.n	800cd94 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cb74:	b29b      	uxth	r3, r3
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d19d      	bne.n	800cab6 <HAL_SPI_TransmitReceive+0x158>
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cb80:	b29b      	uxth	r3, r3
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d197      	bne.n	800cab6 <HAL_SPI_TransmitReceive+0x158>
 800cb86:	e0e5      	b.n	800cd54 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	685b      	ldr	r3, [r3, #4]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d003      	beq.n	800cb98 <HAL_SPI_TransmitReceive+0x23a>
 800cb90:	8afb      	ldrh	r3, [r7, #22]
 800cb92:	2b01      	cmp	r3, #1
 800cb94:	f040 80d1 	bne.w	800cd3a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cb9c:	b29b      	uxth	r3, r3
 800cb9e:	2b01      	cmp	r3, #1
 800cba0:	d912      	bls.n	800cbc8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cba6:	881a      	ldrh	r2, [r3, #0]
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbb2:	1c9a      	adds	r2, r3, #2
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cbbc:	b29b      	uxth	r3, r3
 800cbbe:	3b02      	subs	r3, #2
 800cbc0:	b29a      	uxth	r2, r3
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800cbc6:	e0b8      	b.n	800cd3a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	330c      	adds	r3, #12
 800cbd2:	7812      	ldrb	r2, [r2, #0]
 800cbd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbda:	1c5a      	adds	r2, r3, #1
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cbe4:	b29b      	uxth	r3, r3
 800cbe6:	3b01      	subs	r3, #1
 800cbe8:	b29a      	uxth	r2, r3
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cbee:	e0a4      	b.n	800cd3a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	689b      	ldr	r3, [r3, #8]
 800cbf6:	f003 0302 	and.w	r3, r3, #2
 800cbfa:	2b02      	cmp	r3, #2
 800cbfc:	d134      	bne.n	800cc68 <HAL_SPI_TransmitReceive+0x30a>
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cc02:	b29b      	uxth	r3, r3
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d02f      	beq.n	800cc68 <HAL_SPI_TransmitReceive+0x30a>
 800cc08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc0a:	2b01      	cmp	r3, #1
 800cc0c:	d12c      	bne.n	800cc68 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cc12:	b29b      	uxth	r3, r3
 800cc14:	2b01      	cmp	r3, #1
 800cc16:	d912      	bls.n	800cc3e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc1c:	881a      	ldrh	r2, [r3, #0]
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc28:	1c9a      	adds	r2, r3, #2
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cc32:	b29b      	uxth	r3, r3
 800cc34:	3b02      	subs	r3, #2
 800cc36:	b29a      	uxth	r2, r3
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800cc3c:	e012      	b.n	800cc64 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	330c      	adds	r3, #12
 800cc48:	7812      	ldrb	r2, [r2, #0]
 800cc4a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc50:	1c5a      	adds	r2, r3, #1
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cc5a:	b29b      	uxth	r3, r3
 800cc5c:	3b01      	subs	r3, #1
 800cc5e:	b29a      	uxth	r2, r3
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800cc64:	2300      	movs	r3, #0
 800cc66:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	689b      	ldr	r3, [r3, #8]
 800cc6e:	f003 0301 	and.w	r3, r3, #1
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	d148      	bne.n	800cd08 <HAL_SPI_TransmitReceive+0x3aa>
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cc7c:	b29b      	uxth	r3, r3
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d042      	beq.n	800cd08 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cc88:	b29b      	uxth	r3, r3
 800cc8a:	2b01      	cmp	r3, #1
 800cc8c:	d923      	bls.n	800ccd6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	68da      	ldr	r2, [r3, #12]
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc98:	b292      	uxth	r2, r2
 800cc9a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cca0:	1c9a      	adds	r2, r3, #2
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ccac:	b29b      	uxth	r3, r3
 800ccae:	3b02      	subs	r3, #2
 800ccb0:	b29a      	uxth	r2, r3
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ccbe:	b29b      	uxth	r3, r3
 800ccc0:	2b01      	cmp	r3, #1
 800ccc2:	d81f      	bhi.n	800cd04 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	685a      	ldr	r2, [r3, #4]
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ccd2:	605a      	str	r2, [r3, #4]
 800ccd4:	e016      	b.n	800cd04 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f103 020c 	add.w	r2, r3, #12
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cce2:	7812      	ldrb	r2, [r2, #0]
 800cce4:	b2d2      	uxtb	r2, r2
 800cce6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccec:	1c5a      	adds	r2, r3, #1
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ccf8:	b29b      	uxth	r3, r3
 800ccfa:	3b01      	subs	r3, #1
 800ccfc:	b29a      	uxth	r2, r3
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800cd04:	2301      	movs	r3, #1
 800cd06:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800cd08:	f7fa fa36 	bl	8007178 <HAL_GetTick>
 800cd0c:	4602      	mov	r2, r0
 800cd0e:	6a3b      	ldr	r3, [r7, #32]
 800cd10:	1ad3      	subs	r3, r2, r3
 800cd12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d803      	bhi.n	800cd20 <HAL_SPI_TransmitReceive+0x3c2>
 800cd18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd1e:	d102      	bne.n	800cd26 <HAL_SPI_TransmitReceive+0x3c8>
 800cd20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d109      	bne.n	800cd3a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	2201      	movs	r2, #1
 800cd2a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	2200      	movs	r2, #0
 800cd32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800cd36:	2303      	movs	r3, #3
 800cd38:	e02c      	b.n	800cd94 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cd3e:	b29b      	uxth	r3, r3
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	f47f af55 	bne.w	800cbf0 <HAL_SPI_TransmitReceive+0x292>
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cd4c:	b29b      	uxth	r3, r3
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	f47f af4e 	bne.w	800cbf0 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cd54:	6a3a      	ldr	r2, [r7, #32]
 800cd56:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cd58:	68f8      	ldr	r0, [r7, #12]
 800cd5a:	f000 fa5d 	bl	800d218 <SPI_EndRxTxTransaction>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d008      	beq.n	800cd76 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	2220      	movs	r2, #32
 800cd68:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800cd72:	2301      	movs	r3, #1
 800cd74:	e00e      	b.n	800cd94 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	2201      	movs	r2, #1
 800cd7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	2200      	movs	r2, #0
 800cd82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d001      	beq.n	800cd92 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800cd8e:	2301      	movs	r3, #1
 800cd90:	e000      	b.n	800cd94 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800cd92:	2300      	movs	r3, #0
  }
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3728      	adds	r7, #40	@ 0x28
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}

0800cd9c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b088      	sub	sp, #32
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	685b      	ldr	r3, [r3, #4]
 800cdaa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	689b      	ldr	r3, [r3, #8]
 800cdb2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800cdb4:	69bb      	ldr	r3, [r7, #24]
 800cdb6:	099b      	lsrs	r3, r3, #6
 800cdb8:	f003 0301 	and.w	r3, r3, #1
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d10f      	bne.n	800cde0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800cdc0:	69bb      	ldr	r3, [r7, #24]
 800cdc2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d00a      	beq.n	800cde0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800cdca:	69fb      	ldr	r3, [r7, #28]
 800cdcc:	099b      	lsrs	r3, r3, #6
 800cdce:	f003 0301 	and.w	r3, r3, #1
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d004      	beq.n	800cde0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	4798      	blx	r3
    return;
 800cdde:	e0d7      	b.n	800cf90 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800cde0:	69bb      	ldr	r3, [r7, #24]
 800cde2:	085b      	lsrs	r3, r3, #1
 800cde4:	f003 0301 	and.w	r3, r3, #1
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d00a      	beq.n	800ce02 <HAL_SPI_IRQHandler+0x66>
 800cdec:	69fb      	ldr	r3, [r7, #28]
 800cdee:	09db      	lsrs	r3, r3, #7
 800cdf0:	f003 0301 	and.w	r3, r3, #1
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d004      	beq.n	800ce02 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	4798      	blx	r3
    return;
 800ce00:	e0c6      	b.n	800cf90 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ce02:	69bb      	ldr	r3, [r7, #24]
 800ce04:	095b      	lsrs	r3, r3, #5
 800ce06:	f003 0301 	and.w	r3, r3, #1
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d10c      	bne.n	800ce28 <HAL_SPI_IRQHandler+0x8c>
 800ce0e:	69bb      	ldr	r3, [r7, #24]
 800ce10:	099b      	lsrs	r3, r3, #6
 800ce12:	f003 0301 	and.w	r3, r3, #1
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d106      	bne.n	800ce28 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800ce1a:	69bb      	ldr	r3, [r7, #24]
 800ce1c:	0a1b      	lsrs	r3, r3, #8
 800ce1e:	f003 0301 	and.w	r3, r3, #1
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	f000 80b4 	beq.w	800cf90 <HAL_SPI_IRQHandler+0x1f4>
 800ce28:	69fb      	ldr	r3, [r7, #28]
 800ce2a:	095b      	lsrs	r3, r3, #5
 800ce2c:	f003 0301 	and.w	r3, r3, #1
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	f000 80ad 	beq.w	800cf90 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ce36:	69bb      	ldr	r3, [r7, #24]
 800ce38:	099b      	lsrs	r3, r3, #6
 800ce3a:	f003 0301 	and.w	r3, r3, #1
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d023      	beq.n	800ce8a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ce48:	b2db      	uxtb	r3, r3
 800ce4a:	2b03      	cmp	r3, #3
 800ce4c:	d011      	beq.n	800ce72 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce52:	f043 0204 	orr.w	r2, r3, #4
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	617b      	str	r3, [r7, #20]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	68db      	ldr	r3, [r3, #12]
 800ce64:	617b      	str	r3, [r7, #20]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	689b      	ldr	r3, [r3, #8]
 800ce6c:	617b      	str	r3, [r7, #20]
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	e00b      	b.n	800ce8a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ce72:	2300      	movs	r3, #0
 800ce74:	613b      	str	r3, [r7, #16]
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	68db      	ldr	r3, [r3, #12]
 800ce7c:	613b      	str	r3, [r7, #16]
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	689b      	ldr	r3, [r3, #8]
 800ce84:	613b      	str	r3, [r7, #16]
 800ce86:	693b      	ldr	r3, [r7, #16]
        return;
 800ce88:	e082      	b.n	800cf90 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800ce8a:	69bb      	ldr	r3, [r7, #24]
 800ce8c:	095b      	lsrs	r3, r3, #5
 800ce8e:	f003 0301 	and.w	r3, r3, #1
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d014      	beq.n	800cec0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce9a:	f043 0201 	orr.w	r2, r3, #1
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800cea2:	2300      	movs	r3, #0
 800cea4:	60fb      	str	r3, [r7, #12]
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	689b      	ldr	r3, [r3, #8]
 800ceac:	60fb      	str	r3, [r7, #12]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	681a      	ldr	r2, [r3, #0]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cebc:	601a      	str	r2, [r3, #0]
 800cebe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800cec0:	69bb      	ldr	r3, [r7, #24]
 800cec2:	0a1b      	lsrs	r3, r3, #8
 800cec4:	f003 0301 	and.w	r3, r3, #1
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d00c      	beq.n	800cee6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ced0:	f043 0208 	orr.w	r2, r3, #8
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ced8:	2300      	movs	r3, #0
 800ceda:	60bb      	str	r3, [r7, #8]
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	689b      	ldr	r3, [r3, #8]
 800cee2:	60bb      	str	r3, [r7, #8]
 800cee4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d04f      	beq.n	800cf8e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	685a      	ldr	r2, [r3, #4]
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800cefc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2201      	movs	r2, #1
 800cf02:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800cf06:	69fb      	ldr	r3, [r7, #28]
 800cf08:	f003 0302 	and.w	r3, r3, #2
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d104      	bne.n	800cf1a <HAL_SPI_IRQHandler+0x17e>
 800cf10:	69fb      	ldr	r3, [r7, #28]
 800cf12:	f003 0301 	and.w	r3, r3, #1
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d034      	beq.n	800cf84 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	685a      	ldr	r2, [r3, #4]
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	f022 0203 	bic.w	r2, r2, #3
 800cf28:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d011      	beq.n	800cf56 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf36:	4a18      	ldr	r2, [pc, #96]	@ (800cf98 <HAL_SPI_IRQHandler+0x1fc>)
 800cf38:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f7fa fad7 	bl	80074f2 <HAL_DMA_Abort_IT>
 800cf44:	4603      	mov	r3, r0
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d005      	beq.n	800cf56 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf4e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d016      	beq.n	800cf8c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf62:	4a0d      	ldr	r2, [pc, #52]	@ (800cf98 <HAL_SPI_IRQHandler+0x1fc>)
 800cf64:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f7fa fac1 	bl	80074f2 <HAL_DMA_Abort_IT>
 800cf70:	4603      	mov	r3, r0
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d00a      	beq.n	800cf8c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf7a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800cf82:	e003      	b.n	800cf8c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f000 f809 	bl	800cf9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800cf8a:	e000      	b.n	800cf8e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800cf8c:	bf00      	nop
    return;
 800cf8e:	bf00      	nop
  }
}
 800cf90:	3720      	adds	r7, #32
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}
 800cf96:	bf00      	nop
 800cf98:	0800cfb1 	.word	0x0800cfb1

0800cf9c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b083      	sub	sp, #12
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800cfa4:	bf00      	nop
 800cfa6:	370c      	adds	r7, #12
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfae:	4770      	bx	lr

0800cfb0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b084      	sub	sp, #16
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfbc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800cfcc:	68f8      	ldr	r0, [r7, #12]
 800cfce:	f7ff ffe5 	bl	800cf9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cfd2:	bf00      	nop
 800cfd4:	3710      	adds	r7, #16
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}
	...

0800cfdc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b088      	sub	sp, #32
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	60f8      	str	r0, [r7, #12]
 800cfe4:	60b9      	str	r1, [r7, #8]
 800cfe6:	603b      	str	r3, [r7, #0]
 800cfe8:	4613      	mov	r3, r2
 800cfea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800cfec:	f7fa f8c4 	bl	8007178 <HAL_GetTick>
 800cff0:	4602      	mov	r2, r0
 800cff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cff4:	1a9b      	subs	r3, r3, r2
 800cff6:	683a      	ldr	r2, [r7, #0]
 800cff8:	4413      	add	r3, r2
 800cffa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800cffc:	f7fa f8bc 	bl	8007178 <HAL_GetTick>
 800d000:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d002:	4b39      	ldr	r3, [pc, #228]	@ (800d0e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	015b      	lsls	r3, r3, #5
 800d008:	0d1b      	lsrs	r3, r3, #20
 800d00a:	69fa      	ldr	r2, [r7, #28]
 800d00c:	fb02 f303 	mul.w	r3, r2, r3
 800d010:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d012:	e054      	b.n	800d0be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d01a:	d050      	beq.n	800d0be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d01c:	f7fa f8ac 	bl	8007178 <HAL_GetTick>
 800d020:	4602      	mov	r2, r0
 800d022:	69bb      	ldr	r3, [r7, #24]
 800d024:	1ad3      	subs	r3, r2, r3
 800d026:	69fa      	ldr	r2, [r7, #28]
 800d028:	429a      	cmp	r2, r3
 800d02a:	d902      	bls.n	800d032 <SPI_WaitFlagStateUntilTimeout+0x56>
 800d02c:	69fb      	ldr	r3, [r7, #28]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d13d      	bne.n	800d0ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	685a      	ldr	r2, [r3, #4]
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d040:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	685b      	ldr	r3, [r3, #4]
 800d046:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d04a:	d111      	bne.n	800d070 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	689b      	ldr	r3, [r3, #8]
 800d050:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d054:	d004      	beq.n	800d060 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	689b      	ldr	r3, [r3, #8]
 800d05a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d05e:	d107      	bne.n	800d070 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	681a      	ldr	r2, [r3, #0]
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d06e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d074:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d078:	d10f      	bne.n	800d09a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	681a      	ldr	r2, [r3, #0]
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d088:	601a      	str	r2, [r3, #0]
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	681a      	ldr	r2, [r3, #0]
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d098:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	2201      	movs	r2, #1
 800d09e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800d0aa:	2303      	movs	r3, #3
 800d0ac:	e017      	b.n	800d0de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d0ae:	697b      	ldr	r3, [r7, #20]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d101      	bne.n	800d0b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	3b01      	subs	r3, #1
 800d0bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	689a      	ldr	r2, [r3, #8]
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	4013      	ands	r3, r2
 800d0c8:	68ba      	ldr	r2, [r7, #8]
 800d0ca:	429a      	cmp	r2, r3
 800d0cc:	bf0c      	ite	eq
 800d0ce:	2301      	moveq	r3, #1
 800d0d0:	2300      	movne	r3, #0
 800d0d2:	b2db      	uxtb	r3, r3
 800d0d4:	461a      	mov	r2, r3
 800d0d6:	79fb      	ldrb	r3, [r7, #7]
 800d0d8:	429a      	cmp	r2, r3
 800d0da:	d19b      	bne.n	800d014 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d0dc:	2300      	movs	r3, #0
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3720      	adds	r7, #32
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}
 800d0e6:	bf00      	nop
 800d0e8:	20000024 	.word	0x20000024

0800d0ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b08a      	sub	sp, #40	@ 0x28
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	60f8      	str	r0, [r7, #12]
 800d0f4:	60b9      	str	r1, [r7, #8]
 800d0f6:	607a      	str	r2, [r7, #4]
 800d0f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d0fe:	f7fa f83b 	bl	8007178 <HAL_GetTick>
 800d102:	4602      	mov	r2, r0
 800d104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d106:	1a9b      	subs	r3, r3, r2
 800d108:	683a      	ldr	r2, [r7, #0]
 800d10a:	4413      	add	r3, r2
 800d10c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800d10e:	f7fa f833 	bl	8007178 <HAL_GetTick>
 800d112:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	330c      	adds	r3, #12
 800d11a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d11c:	4b3d      	ldr	r3, [pc, #244]	@ (800d214 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800d11e:	681a      	ldr	r2, [r3, #0]
 800d120:	4613      	mov	r3, r2
 800d122:	009b      	lsls	r3, r3, #2
 800d124:	4413      	add	r3, r2
 800d126:	00da      	lsls	r2, r3, #3
 800d128:	1ad3      	subs	r3, r2, r3
 800d12a:	0d1b      	lsrs	r3, r3, #20
 800d12c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d12e:	fb02 f303 	mul.w	r3, r2, r3
 800d132:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800d134:	e060      	b.n	800d1f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800d13c:	d107      	bne.n	800d14e <SPI_WaitFifoStateUntilTimeout+0x62>
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d104      	bne.n	800d14e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800d144:	69fb      	ldr	r3, [r7, #28]
 800d146:	781b      	ldrb	r3, [r3, #0]
 800d148:	b2db      	uxtb	r3, r3
 800d14a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800d14c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d154:	d050      	beq.n	800d1f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d156:	f7fa f80f 	bl	8007178 <HAL_GetTick>
 800d15a:	4602      	mov	r2, r0
 800d15c:	6a3b      	ldr	r3, [r7, #32]
 800d15e:	1ad3      	subs	r3, r2, r3
 800d160:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d162:	429a      	cmp	r2, r3
 800d164:	d902      	bls.n	800d16c <SPI_WaitFifoStateUntilTimeout+0x80>
 800d166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d13d      	bne.n	800d1e8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	685a      	ldr	r2, [r3, #4]
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d17a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	685b      	ldr	r3, [r3, #4]
 800d180:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d184:	d111      	bne.n	800d1aa <SPI_WaitFifoStateUntilTimeout+0xbe>
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	689b      	ldr	r3, [r3, #8]
 800d18a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d18e:	d004      	beq.n	800d19a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	689b      	ldr	r3, [r3, #8]
 800d194:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d198:	d107      	bne.n	800d1aa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	681a      	ldr	r2, [r3, #0]
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d1a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d1b2:	d10f      	bne.n	800d1d4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	681a      	ldr	r2, [r3, #0]
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d1c2:	601a      	str	r2, [r3, #0]
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	681a      	ldr	r2, [r3, #0]
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d1d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800d1e4:	2303      	movs	r3, #3
 800d1e6:	e010      	b.n	800d20a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d1e8:	69bb      	ldr	r3, [r7, #24]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d101      	bne.n	800d1f2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800d1f2:	69bb      	ldr	r3, [r7, #24]
 800d1f4:	3b01      	subs	r3, #1
 800d1f6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	689a      	ldr	r2, [r3, #8]
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	4013      	ands	r3, r2
 800d202:	687a      	ldr	r2, [r7, #4]
 800d204:	429a      	cmp	r2, r3
 800d206:	d196      	bne.n	800d136 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800d208:	2300      	movs	r3, #0
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3728      	adds	r7, #40	@ 0x28
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}
 800d212:	bf00      	nop
 800d214:	20000024 	.word	0x20000024

0800d218 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b086      	sub	sp, #24
 800d21c:	af02      	add	r7, sp, #8
 800d21e:	60f8      	str	r0, [r7, #12]
 800d220:	60b9      	str	r1, [r7, #8]
 800d222:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	9300      	str	r3, [sp, #0]
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	2200      	movs	r2, #0
 800d22c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800d230:	68f8      	ldr	r0, [r7, #12]
 800d232:	f7ff ff5b 	bl	800d0ec <SPI_WaitFifoStateUntilTimeout>
 800d236:	4603      	mov	r3, r0
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d007      	beq.n	800d24c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d240:	f043 0220 	orr.w	r2, r3, #32
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d248:	2303      	movs	r3, #3
 800d24a:	e027      	b.n	800d29c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	9300      	str	r3, [sp, #0]
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	2200      	movs	r2, #0
 800d254:	2180      	movs	r1, #128	@ 0x80
 800d256:	68f8      	ldr	r0, [r7, #12]
 800d258:	f7ff fec0 	bl	800cfdc <SPI_WaitFlagStateUntilTimeout>
 800d25c:	4603      	mov	r3, r0
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d007      	beq.n	800d272 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d266:	f043 0220 	orr.w	r2, r3, #32
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d26e:	2303      	movs	r3, #3
 800d270:	e014      	b.n	800d29c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	9300      	str	r3, [sp, #0]
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	2200      	movs	r2, #0
 800d27a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800d27e:	68f8      	ldr	r0, [r7, #12]
 800d280:	f7ff ff34 	bl	800d0ec <SPI_WaitFifoStateUntilTimeout>
 800d284:	4603      	mov	r3, r0
 800d286:	2b00      	cmp	r3, #0
 800d288:	d007      	beq.n	800d29a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d28e:	f043 0220 	orr.w	r2, r3, #32
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d296:	2303      	movs	r3, #3
 800d298:	e000      	b.n	800d29c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800d29a:	2300      	movs	r3, #0
}
 800d29c:	4618      	mov	r0, r3
 800d29e:	3710      	adds	r7, #16
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}

0800d2a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b082      	sub	sp, #8
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d101      	bne.n	800d2b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	e049      	b.n	800d34a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d2bc:	b2db      	uxtb	r3, r3
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d106      	bne.n	800d2d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d2ca:	6878      	ldr	r0, [r7, #4]
 800d2cc:	f7f9 fda2 	bl	8006e14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2202      	movs	r2, #2
 800d2d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681a      	ldr	r2, [r3, #0]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	3304      	adds	r3, #4
 800d2e0:	4619      	mov	r1, r3
 800d2e2:	4610      	mov	r0, r2
 800d2e4:	f000 fbfa 	bl	800dadc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2201      	movs	r2, #1
 800d2f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2201      	movs	r2, #1
 800d2fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2201      	movs	r2, #1
 800d304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2201      	movs	r2, #1
 800d30c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2201      	movs	r2, #1
 800d314:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2201      	movs	r2, #1
 800d31c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2201      	movs	r2, #1
 800d324:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2201      	movs	r2, #1
 800d32c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2201      	movs	r2, #1
 800d334:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2201      	movs	r2, #1
 800d33c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2201      	movs	r2, #1
 800d344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d348:	2300      	movs	r3, #0
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	3708      	adds	r7, #8
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}
	...

0800d354 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d354:	b480      	push	{r7}
 800d356:	b085      	sub	sp, #20
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d362:	b2db      	uxtb	r3, r3
 800d364:	2b01      	cmp	r3, #1
 800d366:	d001      	beq.n	800d36c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d368:	2301      	movs	r3, #1
 800d36a:	e036      	b.n	800d3da <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2202      	movs	r2, #2
 800d370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	68da      	ldr	r2, [r3, #12]
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f042 0201 	orr.w	r2, r2, #1
 800d382:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	4a17      	ldr	r2, [pc, #92]	@ (800d3e8 <HAL_TIM_Base_Start_IT+0x94>)
 800d38a:	4293      	cmp	r3, r2
 800d38c:	d004      	beq.n	800d398 <HAL_TIM_Base_Start_IT+0x44>
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d396:	d115      	bne.n	800d3c4 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	689a      	ldr	r2, [r3, #8]
 800d39e:	4b13      	ldr	r3, [pc, #76]	@ (800d3ec <HAL_TIM_Base_Start_IT+0x98>)
 800d3a0:	4013      	ands	r3, r2
 800d3a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	2b06      	cmp	r3, #6
 800d3a8:	d015      	beq.n	800d3d6 <HAL_TIM_Base_Start_IT+0x82>
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d3b0:	d011      	beq.n	800d3d6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	681a      	ldr	r2, [r3, #0]
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	f042 0201 	orr.w	r2, r2, #1
 800d3c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d3c2:	e008      	b.n	800d3d6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	681a      	ldr	r2, [r3, #0]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	f042 0201 	orr.w	r2, r2, #1
 800d3d2:	601a      	str	r2, [r3, #0]
 800d3d4:	e000      	b.n	800d3d8 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d3d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d3d8:	2300      	movs	r3, #0
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3714      	adds	r7, #20
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e4:	4770      	bx	lr
 800d3e6:	bf00      	nop
 800d3e8:	40012c00 	.word	0x40012c00
 800d3ec:	00010007 	.word	0x00010007

0800d3f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b082      	sub	sp, #8
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d101      	bne.n	800d402 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d3fe:	2301      	movs	r3, #1
 800d400:	e049      	b.n	800d496 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d408:	b2db      	uxtb	r3, r3
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d106      	bne.n	800d41c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2200      	movs	r2, #0
 800d412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	f7f9 fcec 	bl	8006df4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2202      	movs	r2, #2
 800d420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681a      	ldr	r2, [r3, #0]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	3304      	adds	r3, #4
 800d42c:	4619      	mov	r1, r3
 800d42e:	4610      	mov	r0, r2
 800d430:	f000 fb54 	bl	800dadc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2201      	movs	r2, #1
 800d438:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2201      	movs	r2, #1
 800d440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2201      	movs	r2, #1
 800d448:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2201      	movs	r2, #1
 800d450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2201      	movs	r2, #1
 800d458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2201      	movs	r2, #1
 800d460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2201      	movs	r2, #1
 800d468:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2201      	movs	r2, #1
 800d470:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2201      	movs	r2, #1
 800d478:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2201      	movs	r2, #1
 800d480:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2201      	movs	r2, #1
 800d488:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2201      	movs	r2, #1
 800d490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d494:	2300      	movs	r3, #0
}
 800d496:	4618      	mov	r0, r3
 800d498:	3708      	adds	r7, #8
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}
	...

0800d4a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b084      	sub	sp, #16
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
 800d4a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d109      	bne.n	800d4c4 <HAL_TIM_PWM_Start+0x24>
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d4b6:	b2db      	uxtb	r3, r3
 800d4b8:	2b01      	cmp	r3, #1
 800d4ba:	bf14      	ite	ne
 800d4bc:	2301      	movne	r3, #1
 800d4be:	2300      	moveq	r3, #0
 800d4c0:	b2db      	uxtb	r3, r3
 800d4c2:	e03c      	b.n	800d53e <HAL_TIM_PWM_Start+0x9e>
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	2b04      	cmp	r3, #4
 800d4c8:	d109      	bne.n	800d4de <HAL_TIM_PWM_Start+0x3e>
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d4d0:	b2db      	uxtb	r3, r3
 800d4d2:	2b01      	cmp	r3, #1
 800d4d4:	bf14      	ite	ne
 800d4d6:	2301      	movne	r3, #1
 800d4d8:	2300      	moveq	r3, #0
 800d4da:	b2db      	uxtb	r3, r3
 800d4dc:	e02f      	b.n	800d53e <HAL_TIM_PWM_Start+0x9e>
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	2b08      	cmp	r3, #8
 800d4e2:	d109      	bne.n	800d4f8 <HAL_TIM_PWM_Start+0x58>
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d4ea:	b2db      	uxtb	r3, r3
 800d4ec:	2b01      	cmp	r3, #1
 800d4ee:	bf14      	ite	ne
 800d4f0:	2301      	movne	r3, #1
 800d4f2:	2300      	moveq	r3, #0
 800d4f4:	b2db      	uxtb	r3, r3
 800d4f6:	e022      	b.n	800d53e <HAL_TIM_PWM_Start+0x9e>
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	2b0c      	cmp	r3, #12
 800d4fc:	d109      	bne.n	800d512 <HAL_TIM_PWM_Start+0x72>
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d504:	b2db      	uxtb	r3, r3
 800d506:	2b01      	cmp	r3, #1
 800d508:	bf14      	ite	ne
 800d50a:	2301      	movne	r3, #1
 800d50c:	2300      	moveq	r3, #0
 800d50e:	b2db      	uxtb	r3, r3
 800d510:	e015      	b.n	800d53e <HAL_TIM_PWM_Start+0x9e>
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	2b10      	cmp	r3, #16
 800d516:	d109      	bne.n	800d52c <HAL_TIM_PWM_Start+0x8c>
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d51e:	b2db      	uxtb	r3, r3
 800d520:	2b01      	cmp	r3, #1
 800d522:	bf14      	ite	ne
 800d524:	2301      	movne	r3, #1
 800d526:	2300      	moveq	r3, #0
 800d528:	b2db      	uxtb	r3, r3
 800d52a:	e008      	b.n	800d53e <HAL_TIM_PWM_Start+0x9e>
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d532:	b2db      	uxtb	r3, r3
 800d534:	2b01      	cmp	r3, #1
 800d536:	bf14      	ite	ne
 800d538:	2301      	movne	r3, #1
 800d53a:	2300      	moveq	r3, #0
 800d53c:	b2db      	uxtb	r3, r3
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d001      	beq.n	800d546 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d542:	2301      	movs	r3, #1
 800d544:	e079      	b.n	800d63a <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d104      	bne.n	800d556 <HAL_TIM_PWM_Start+0xb6>
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2202      	movs	r2, #2
 800d550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d554:	e023      	b.n	800d59e <HAL_TIM_PWM_Start+0xfe>
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	2b04      	cmp	r3, #4
 800d55a:	d104      	bne.n	800d566 <HAL_TIM_PWM_Start+0xc6>
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2202      	movs	r2, #2
 800d560:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d564:	e01b      	b.n	800d59e <HAL_TIM_PWM_Start+0xfe>
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	2b08      	cmp	r3, #8
 800d56a:	d104      	bne.n	800d576 <HAL_TIM_PWM_Start+0xd6>
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2202      	movs	r2, #2
 800d570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d574:	e013      	b.n	800d59e <HAL_TIM_PWM_Start+0xfe>
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	2b0c      	cmp	r3, #12
 800d57a:	d104      	bne.n	800d586 <HAL_TIM_PWM_Start+0xe6>
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2202      	movs	r2, #2
 800d580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d584:	e00b      	b.n	800d59e <HAL_TIM_PWM_Start+0xfe>
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	2b10      	cmp	r3, #16
 800d58a:	d104      	bne.n	800d596 <HAL_TIM_PWM_Start+0xf6>
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2202      	movs	r2, #2
 800d590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d594:	e003      	b.n	800d59e <HAL_TIM_PWM_Start+0xfe>
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	2202      	movs	r2, #2
 800d59a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	2201      	movs	r2, #1
 800d5a4:	6839      	ldr	r1, [r7, #0]
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f000 fd80 	bl	800e0ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	4a24      	ldr	r2, [pc, #144]	@ (800d644 <HAL_TIM_PWM_Start+0x1a4>)
 800d5b2:	4293      	cmp	r3, r2
 800d5b4:	d009      	beq.n	800d5ca <HAL_TIM_PWM_Start+0x12a>
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	4a23      	ldr	r2, [pc, #140]	@ (800d648 <HAL_TIM_PWM_Start+0x1a8>)
 800d5bc:	4293      	cmp	r3, r2
 800d5be:	d004      	beq.n	800d5ca <HAL_TIM_PWM_Start+0x12a>
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	4a21      	ldr	r2, [pc, #132]	@ (800d64c <HAL_TIM_PWM_Start+0x1ac>)
 800d5c6:	4293      	cmp	r3, r2
 800d5c8:	d101      	bne.n	800d5ce <HAL_TIM_PWM_Start+0x12e>
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	e000      	b.n	800d5d0 <HAL_TIM_PWM_Start+0x130>
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d007      	beq.n	800d5e4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d5e2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	4a16      	ldr	r2, [pc, #88]	@ (800d644 <HAL_TIM_PWM_Start+0x1a4>)
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	d004      	beq.n	800d5f8 <HAL_TIM_PWM_Start+0x158>
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d5f6:	d115      	bne.n	800d624 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	689a      	ldr	r2, [r3, #8]
 800d5fe:	4b14      	ldr	r3, [pc, #80]	@ (800d650 <HAL_TIM_PWM_Start+0x1b0>)
 800d600:	4013      	ands	r3, r2
 800d602:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	2b06      	cmp	r3, #6
 800d608:	d015      	beq.n	800d636 <HAL_TIM_PWM_Start+0x196>
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d610:	d011      	beq.n	800d636 <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	681a      	ldr	r2, [r3, #0]
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	f042 0201 	orr.w	r2, r2, #1
 800d620:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d622:	e008      	b.n	800d636 <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	681a      	ldr	r2, [r3, #0]
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	f042 0201 	orr.w	r2, r2, #1
 800d632:	601a      	str	r2, [r3, #0]
 800d634:	e000      	b.n	800d638 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d636:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d638:	2300      	movs	r3, #0
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	3710      	adds	r7, #16
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}
 800d642:	bf00      	nop
 800d644:	40012c00 	.word	0x40012c00
 800d648:	40014400 	.word	0x40014400
 800d64c:	40014800 	.word	0x40014800
 800d650:	00010007 	.word	0x00010007

0800d654 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b084      	sub	sp, #16
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	68db      	ldr	r3, [r3, #12]
 800d662:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	691b      	ldr	r3, [r3, #16]
 800d66a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	f003 0302 	and.w	r3, r3, #2
 800d672:	2b00      	cmp	r3, #0
 800d674:	d020      	beq.n	800d6b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	f003 0302 	and.w	r3, r3, #2
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d01b      	beq.n	800d6b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	f06f 0202 	mvn.w	r2, #2
 800d688:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2201      	movs	r2, #1
 800d68e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	699b      	ldr	r3, [r3, #24]
 800d696:	f003 0303 	and.w	r3, r3, #3
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d003      	beq.n	800d6a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f000 f9fe 	bl	800daa0 <HAL_TIM_IC_CaptureCallback>
 800d6a4:	e005      	b.n	800d6b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f000 f9f0 	bl	800da8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f000 fa01 	bl	800dab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	f003 0304 	and.w	r3, r3, #4
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d020      	beq.n	800d704 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	f003 0304 	and.w	r3, r3, #4
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d01b      	beq.n	800d704 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	f06f 0204 	mvn.w	r2, #4
 800d6d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2202      	movs	r2, #2
 800d6da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	699b      	ldr	r3, [r3, #24]
 800d6e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d003      	beq.n	800d6f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f000 f9d8 	bl	800daa0 <HAL_TIM_IC_CaptureCallback>
 800d6f0:	e005      	b.n	800d6fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f000 f9ca 	bl	800da8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f000 f9db 	bl	800dab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2200      	movs	r2, #0
 800d702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	f003 0308 	and.w	r3, r3, #8
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d020      	beq.n	800d750 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	f003 0308 	and.w	r3, r3, #8
 800d714:	2b00      	cmp	r3, #0
 800d716:	d01b      	beq.n	800d750 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	f06f 0208 	mvn.w	r2, #8
 800d720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2204      	movs	r2, #4
 800d726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	69db      	ldr	r3, [r3, #28]
 800d72e:	f003 0303 	and.w	r3, r3, #3
 800d732:	2b00      	cmp	r3, #0
 800d734:	d003      	beq.n	800d73e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f000 f9b2 	bl	800daa0 <HAL_TIM_IC_CaptureCallback>
 800d73c:	e005      	b.n	800d74a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f000 f9a4 	bl	800da8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f000 f9b5 	bl	800dab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2200      	movs	r2, #0
 800d74e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d750:	68bb      	ldr	r3, [r7, #8]
 800d752:	f003 0310 	and.w	r3, r3, #16
 800d756:	2b00      	cmp	r3, #0
 800d758:	d020      	beq.n	800d79c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	f003 0310 	and.w	r3, r3, #16
 800d760:	2b00      	cmp	r3, #0
 800d762:	d01b      	beq.n	800d79c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f06f 0210 	mvn.w	r2, #16
 800d76c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	2208      	movs	r2, #8
 800d772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	69db      	ldr	r3, [r3, #28]
 800d77a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d003      	beq.n	800d78a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f000 f98c 	bl	800daa0 <HAL_TIM_IC_CaptureCallback>
 800d788:	e005      	b.n	800d796 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f000 f97e 	bl	800da8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	f000 f98f 	bl	800dab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2200      	movs	r2, #0
 800d79a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	f003 0301 	and.w	r3, r3, #1
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d00c      	beq.n	800d7c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	f003 0301 	and.w	r3, r3, #1
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d007      	beq.n	800d7c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	f06f 0201 	mvn.w	r2, #1
 800d7b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f7f8 fcd2 	bl	8006164 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d104      	bne.n	800d7d4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d7ca:	68bb      	ldr	r3, [r7, #8]
 800d7cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d00c      	beq.n	800d7ee <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d007      	beq.n	800d7ee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d7e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	f000 fcef 	bl	800e1cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d00c      	beq.n	800d812 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d007      	beq.n	800d812 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d80a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d80c:	6878      	ldr	r0, [r7, #4]
 800d80e:	f000 fce7 	bl	800e1e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d00c      	beq.n	800d836 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d822:	2b00      	cmp	r3, #0
 800d824:	d007      	beq.n	800d836 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d82e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f000 f949 	bl	800dac8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	f003 0320 	and.w	r3, r3, #32
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d00c      	beq.n	800d85a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	f003 0320 	and.w	r3, r3, #32
 800d846:	2b00      	cmp	r3, #0
 800d848:	d007      	beq.n	800d85a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	f06f 0220 	mvn.w	r2, #32
 800d852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f000 fcaf 	bl	800e1b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d85a:	bf00      	nop
 800d85c:	3710      	adds	r7, #16
 800d85e:	46bd      	mov	sp, r7
 800d860:	bd80      	pop	{r7, pc}
	...

0800d864 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b086      	sub	sp, #24
 800d868:	af00      	add	r7, sp, #0
 800d86a:	60f8      	str	r0, [r7, #12]
 800d86c:	60b9      	str	r1, [r7, #8]
 800d86e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d870:	2300      	movs	r3, #0
 800d872:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d87a:	2b01      	cmp	r3, #1
 800d87c:	d101      	bne.n	800d882 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d87e:	2302      	movs	r3, #2
 800d880:	e0ff      	b.n	800da82 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	2201      	movs	r2, #1
 800d886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2b14      	cmp	r3, #20
 800d88e:	f200 80f0 	bhi.w	800da72 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d892:	a201      	add	r2, pc, #4	@ (adr r2, 800d898 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d898:	0800d8ed 	.word	0x0800d8ed
 800d89c:	0800da73 	.word	0x0800da73
 800d8a0:	0800da73 	.word	0x0800da73
 800d8a4:	0800da73 	.word	0x0800da73
 800d8a8:	0800d92d 	.word	0x0800d92d
 800d8ac:	0800da73 	.word	0x0800da73
 800d8b0:	0800da73 	.word	0x0800da73
 800d8b4:	0800da73 	.word	0x0800da73
 800d8b8:	0800d96f 	.word	0x0800d96f
 800d8bc:	0800da73 	.word	0x0800da73
 800d8c0:	0800da73 	.word	0x0800da73
 800d8c4:	0800da73 	.word	0x0800da73
 800d8c8:	0800d9af 	.word	0x0800d9af
 800d8cc:	0800da73 	.word	0x0800da73
 800d8d0:	0800da73 	.word	0x0800da73
 800d8d4:	0800da73 	.word	0x0800da73
 800d8d8:	0800d9f1 	.word	0x0800d9f1
 800d8dc:	0800da73 	.word	0x0800da73
 800d8e0:	0800da73 	.word	0x0800da73
 800d8e4:	0800da73 	.word	0x0800da73
 800d8e8:	0800da31 	.word	0x0800da31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	68b9      	ldr	r1, [r7, #8]
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f000 f95c 	bl	800dbb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	699a      	ldr	r2, [r3, #24]
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	f042 0208 	orr.w	r2, r2, #8
 800d906:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	699a      	ldr	r2, [r3, #24]
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	f022 0204 	bic.w	r2, r2, #4
 800d916:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	6999      	ldr	r1, [r3, #24]
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	691a      	ldr	r2, [r3, #16]
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	430a      	orrs	r2, r1
 800d928:	619a      	str	r2, [r3, #24]
      break;
 800d92a:	e0a5      	b.n	800da78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	68b9      	ldr	r1, [r7, #8]
 800d932:	4618      	mov	r0, r3
 800d934:	f000 f9b8 	bl	800dca8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	699a      	ldr	r2, [r3, #24]
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d946:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	699a      	ldr	r2, [r3, #24]
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d956:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	6999      	ldr	r1, [r3, #24]
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	691b      	ldr	r3, [r3, #16]
 800d962:	021a      	lsls	r2, r3, #8
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	430a      	orrs	r2, r1
 800d96a:	619a      	str	r2, [r3, #24]
      break;
 800d96c:	e084      	b.n	800da78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	68b9      	ldr	r1, [r7, #8]
 800d974:	4618      	mov	r0, r3
 800d976:	f000 fa11 	bl	800dd9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	69da      	ldr	r2, [r3, #28]
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	f042 0208 	orr.w	r2, r2, #8
 800d988:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	69da      	ldr	r2, [r3, #28]
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	f022 0204 	bic.w	r2, r2, #4
 800d998:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	69d9      	ldr	r1, [r3, #28]
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	691a      	ldr	r2, [r3, #16]
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	430a      	orrs	r2, r1
 800d9aa:	61da      	str	r2, [r3, #28]
      break;
 800d9ac:	e064      	b.n	800da78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	68b9      	ldr	r1, [r7, #8]
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f000 fa69 	bl	800de8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	69da      	ldr	r2, [r3, #28]
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d9c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	69da      	ldr	r2, [r3, #28]
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d9d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	69d9      	ldr	r1, [r3, #28]
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	691b      	ldr	r3, [r3, #16]
 800d9e4:	021a      	lsls	r2, r3, #8
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	430a      	orrs	r2, r1
 800d9ec:	61da      	str	r2, [r3, #28]
      break;
 800d9ee:	e043      	b.n	800da78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	68b9      	ldr	r1, [r7, #8]
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f000 faa6 	bl	800df48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	f042 0208 	orr.w	r2, r2, #8
 800da0a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	f022 0204 	bic.w	r2, r2, #4
 800da1a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800da22:	68bb      	ldr	r3, [r7, #8]
 800da24:	691a      	ldr	r2, [r3, #16]
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	430a      	orrs	r2, r1
 800da2c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800da2e:	e023      	b.n	800da78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	68b9      	ldr	r1, [r7, #8]
 800da36:	4618      	mov	r0, r3
 800da38:	f000 fade 	bl	800dff8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800da4a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800da5a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	691b      	ldr	r3, [r3, #16]
 800da66:	021a      	lsls	r2, r3, #8
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	430a      	orrs	r2, r1
 800da6e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800da70:	e002      	b.n	800da78 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800da72:	2301      	movs	r3, #1
 800da74:	75fb      	strb	r3, [r7, #23]
      break;
 800da76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	2200      	movs	r2, #0
 800da7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800da80:	7dfb      	ldrb	r3, [r7, #23]
}
 800da82:	4618      	mov	r0, r3
 800da84:	3718      	adds	r7, #24
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}
 800da8a:	bf00      	nop

0800da8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800da8c:	b480      	push	{r7}
 800da8e:	b083      	sub	sp, #12
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800da94:	bf00      	nop
 800da96:	370c      	adds	r7, #12
 800da98:	46bd      	mov	sp, r7
 800da9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9e:	4770      	bx	lr

0800daa0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800daa0:	b480      	push	{r7}
 800daa2:	b083      	sub	sp, #12
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800daa8:	bf00      	nop
 800daaa:	370c      	adds	r7, #12
 800daac:	46bd      	mov	sp, r7
 800daae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab2:	4770      	bx	lr

0800dab4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dab4:	b480      	push	{r7}
 800dab6:	b083      	sub	sp, #12
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dabc:	bf00      	nop
 800dabe:	370c      	adds	r7, #12
 800dac0:	46bd      	mov	sp, r7
 800dac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac6:	4770      	bx	lr

0800dac8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dac8:	b480      	push	{r7}
 800daca:	b083      	sub	sp, #12
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dad0:	bf00      	nop
 800dad2:	370c      	adds	r7, #12
 800dad4:	46bd      	mov	sp, r7
 800dad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dada:	4770      	bx	lr

0800dadc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dadc:	b480      	push	{r7}
 800dade:	b085      	sub	sp, #20
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
 800dae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	4a2d      	ldr	r2, [pc, #180]	@ (800dba4 <TIM_Base_SetConfig+0xc8>)
 800daf0:	4293      	cmp	r3, r2
 800daf2:	d003      	beq.n	800dafc <TIM_Base_SetConfig+0x20>
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dafa:	d108      	bne.n	800db0e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800db02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	685b      	ldr	r3, [r3, #4]
 800db08:	68fa      	ldr	r2, [r7, #12]
 800db0a:	4313      	orrs	r3, r2
 800db0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	4a24      	ldr	r2, [pc, #144]	@ (800dba4 <TIM_Base_SetConfig+0xc8>)
 800db12:	4293      	cmp	r3, r2
 800db14:	d00b      	beq.n	800db2e <TIM_Base_SetConfig+0x52>
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db1c:	d007      	beq.n	800db2e <TIM_Base_SetConfig+0x52>
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	4a21      	ldr	r2, [pc, #132]	@ (800dba8 <TIM_Base_SetConfig+0xcc>)
 800db22:	4293      	cmp	r3, r2
 800db24:	d003      	beq.n	800db2e <TIM_Base_SetConfig+0x52>
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	4a20      	ldr	r2, [pc, #128]	@ (800dbac <TIM_Base_SetConfig+0xd0>)
 800db2a:	4293      	cmp	r3, r2
 800db2c:	d108      	bne.n	800db40 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800db34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	68db      	ldr	r3, [r3, #12]
 800db3a:	68fa      	ldr	r2, [r7, #12]
 800db3c:	4313      	orrs	r3, r2
 800db3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	695b      	ldr	r3, [r3, #20]
 800db4a:	4313      	orrs	r3, r2
 800db4c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	689a      	ldr	r2, [r3, #8]
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	681a      	ldr	r2, [r3, #0]
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	4a10      	ldr	r2, [pc, #64]	@ (800dba4 <TIM_Base_SetConfig+0xc8>)
 800db62:	4293      	cmp	r3, r2
 800db64:	d007      	beq.n	800db76 <TIM_Base_SetConfig+0x9a>
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	4a0f      	ldr	r2, [pc, #60]	@ (800dba8 <TIM_Base_SetConfig+0xcc>)
 800db6a:	4293      	cmp	r3, r2
 800db6c:	d003      	beq.n	800db76 <TIM_Base_SetConfig+0x9a>
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	4a0e      	ldr	r2, [pc, #56]	@ (800dbac <TIM_Base_SetConfig+0xd0>)
 800db72:	4293      	cmp	r3, r2
 800db74:	d103      	bne.n	800db7e <TIM_Base_SetConfig+0xa2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	691a      	ldr	r2, [r3, #16]
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	f043 0204 	orr.w	r2, r3, #4
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2201      	movs	r2, #1
 800db8e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	68fa      	ldr	r2, [r7, #12]
 800db94:	601a      	str	r2, [r3, #0]
}
 800db96:	bf00      	nop
 800db98:	3714      	adds	r7, #20
 800db9a:	46bd      	mov	sp, r7
 800db9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba0:	4770      	bx	lr
 800dba2:	bf00      	nop
 800dba4:	40012c00 	.word	0x40012c00
 800dba8:	40014400 	.word	0x40014400
 800dbac:	40014800 	.word	0x40014800

0800dbb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b087      	sub	sp, #28
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
 800dbb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	6a1b      	ldr	r3, [r3, #32]
 800dbbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6a1b      	ldr	r3, [r3, #32]
 800dbc4:	f023 0201 	bic.w	r2, r3, #1
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	685b      	ldr	r3, [r3, #4]
 800dbd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	699b      	ldr	r3, [r3, #24]
 800dbd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dbde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dbe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	f023 0303 	bic.w	r3, r3, #3
 800dbea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	68fa      	ldr	r2, [r7, #12]
 800dbf2:	4313      	orrs	r3, r2
 800dbf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	f023 0302 	bic.w	r3, r3, #2
 800dbfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	689b      	ldr	r3, [r3, #8]
 800dc02:	697a      	ldr	r2, [r7, #20]
 800dc04:	4313      	orrs	r3, r2
 800dc06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	4a24      	ldr	r2, [pc, #144]	@ (800dc9c <TIM_OC1_SetConfig+0xec>)
 800dc0c:	4293      	cmp	r3, r2
 800dc0e:	d007      	beq.n	800dc20 <TIM_OC1_SetConfig+0x70>
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	4a23      	ldr	r2, [pc, #140]	@ (800dca0 <TIM_OC1_SetConfig+0xf0>)
 800dc14:	4293      	cmp	r3, r2
 800dc16:	d003      	beq.n	800dc20 <TIM_OC1_SetConfig+0x70>
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	4a22      	ldr	r2, [pc, #136]	@ (800dca4 <TIM_OC1_SetConfig+0xf4>)
 800dc1c:	4293      	cmp	r3, r2
 800dc1e:	d10c      	bne.n	800dc3a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dc20:	697b      	ldr	r3, [r7, #20]
 800dc22:	f023 0308 	bic.w	r3, r3, #8
 800dc26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	68db      	ldr	r3, [r3, #12]
 800dc2c:	697a      	ldr	r2, [r7, #20]
 800dc2e:	4313      	orrs	r3, r2
 800dc30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	f023 0304 	bic.w	r3, r3, #4
 800dc38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	4a17      	ldr	r2, [pc, #92]	@ (800dc9c <TIM_OC1_SetConfig+0xec>)
 800dc3e:	4293      	cmp	r3, r2
 800dc40:	d007      	beq.n	800dc52 <TIM_OC1_SetConfig+0xa2>
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	4a17      	ldr	r2, [pc, #92]	@ (800dca4 <TIM_OC1_SetConfig+0xf4>)
 800dc46:	4293      	cmp	r3, r2
 800dc48:	d003      	beq.n	800dc52 <TIM_OC1_SetConfig+0xa2>
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	4a14      	ldr	r2, [pc, #80]	@ (800dca0 <TIM_OC1_SetConfig+0xf0>)
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	d111      	bne.n	800dc76 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800dc52:	693b      	ldr	r3, [r7, #16]
 800dc54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dc58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800dc5a:	693b      	ldr	r3, [r7, #16]
 800dc5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800dc60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	695b      	ldr	r3, [r3, #20]
 800dc66:	693a      	ldr	r2, [r7, #16]
 800dc68:	4313      	orrs	r3, r2
 800dc6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	699b      	ldr	r3, [r3, #24]
 800dc70:	693a      	ldr	r2, [r7, #16]
 800dc72:	4313      	orrs	r3, r2
 800dc74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	693a      	ldr	r2, [r7, #16]
 800dc7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	68fa      	ldr	r2, [r7, #12]
 800dc80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	685a      	ldr	r2, [r3, #4]
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	697a      	ldr	r2, [r7, #20]
 800dc8e:	621a      	str	r2, [r3, #32]
}
 800dc90:	bf00      	nop
 800dc92:	371c      	adds	r7, #28
 800dc94:	46bd      	mov	sp, r7
 800dc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9a:	4770      	bx	lr
 800dc9c:	40012c00 	.word	0x40012c00
 800dca0:	40014800 	.word	0x40014800
 800dca4:	40014400 	.word	0x40014400

0800dca8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b087      	sub	sp, #28
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
 800dcb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6a1b      	ldr	r3, [r3, #32]
 800dcb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	6a1b      	ldr	r3, [r3, #32]
 800dcbc:	f023 0210 	bic.w	r2, r3, #16
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	685b      	ldr	r3, [r3, #4]
 800dcc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	699b      	ldr	r3, [r3, #24]
 800dcce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800dcd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dcda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dce2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	021b      	lsls	r3, r3, #8
 800dcea:	68fa      	ldr	r2, [r7, #12]
 800dcec:	4313      	orrs	r3, r2
 800dcee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	f023 0320 	bic.w	r3, r3, #32
 800dcf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	689b      	ldr	r3, [r3, #8]
 800dcfc:	011b      	lsls	r3, r3, #4
 800dcfe:	697a      	ldr	r2, [r7, #20]
 800dd00:	4313      	orrs	r3, r2
 800dd02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	4a22      	ldr	r2, [pc, #136]	@ (800dd90 <TIM_OC2_SetConfig+0xe8>)
 800dd08:	4293      	cmp	r3, r2
 800dd0a:	d10d      	bne.n	800dd28 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dd0c:	697b      	ldr	r3, [r7, #20]
 800dd0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dd12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	68db      	ldr	r3, [r3, #12]
 800dd18:	011b      	lsls	r3, r3, #4
 800dd1a:	697a      	ldr	r2, [r7, #20]
 800dd1c:	4313      	orrs	r3, r2
 800dd1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dd26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	4a19      	ldr	r2, [pc, #100]	@ (800dd90 <TIM_OC2_SetConfig+0xe8>)
 800dd2c:	4293      	cmp	r3, r2
 800dd2e:	d007      	beq.n	800dd40 <TIM_OC2_SetConfig+0x98>
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	4a18      	ldr	r2, [pc, #96]	@ (800dd94 <TIM_OC2_SetConfig+0xec>)
 800dd34:	4293      	cmp	r3, r2
 800dd36:	d003      	beq.n	800dd40 <TIM_OC2_SetConfig+0x98>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	4a17      	ldr	r2, [pc, #92]	@ (800dd98 <TIM_OC2_SetConfig+0xf0>)
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	d113      	bne.n	800dd68 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dd40:	693b      	ldr	r3, [r7, #16]
 800dd42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800dd46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dd48:	693b      	ldr	r3, [r7, #16]
 800dd4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dd4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	695b      	ldr	r3, [r3, #20]
 800dd54:	009b      	lsls	r3, r3, #2
 800dd56:	693a      	ldr	r2, [r7, #16]
 800dd58:	4313      	orrs	r3, r2
 800dd5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	699b      	ldr	r3, [r3, #24]
 800dd60:	009b      	lsls	r3, r3, #2
 800dd62:	693a      	ldr	r2, [r7, #16]
 800dd64:	4313      	orrs	r3, r2
 800dd66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	693a      	ldr	r2, [r7, #16]
 800dd6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	68fa      	ldr	r2, [r7, #12]
 800dd72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	685a      	ldr	r2, [r3, #4]
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	697a      	ldr	r2, [r7, #20]
 800dd80:	621a      	str	r2, [r3, #32]
}
 800dd82:	bf00      	nop
 800dd84:	371c      	adds	r7, #28
 800dd86:	46bd      	mov	sp, r7
 800dd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8c:	4770      	bx	lr
 800dd8e:	bf00      	nop
 800dd90:	40012c00 	.word	0x40012c00
 800dd94:	40014400 	.word	0x40014400
 800dd98:	40014800 	.word	0x40014800

0800dd9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dd9c:	b480      	push	{r7}
 800dd9e:	b087      	sub	sp, #28
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
 800dda4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6a1b      	ldr	r3, [r3, #32]
 800ddaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	6a1b      	ldr	r3, [r3, #32]
 800ddb0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	685b      	ldr	r3, [r3, #4]
 800ddbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	69db      	ldr	r3, [r3, #28]
 800ddc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ddca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ddce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	f023 0303 	bic.w	r3, r3, #3
 800ddd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	68fa      	ldr	r2, [r7, #12]
 800ddde:	4313      	orrs	r3, r2
 800dde0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800dde8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	689b      	ldr	r3, [r3, #8]
 800ddee:	021b      	lsls	r3, r3, #8
 800ddf0:	697a      	ldr	r2, [r7, #20]
 800ddf2:	4313      	orrs	r3, r2
 800ddf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	4a21      	ldr	r2, [pc, #132]	@ (800de80 <TIM_OC3_SetConfig+0xe4>)
 800ddfa:	4293      	cmp	r3, r2
 800ddfc:	d10d      	bne.n	800de1a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ddfe:	697b      	ldr	r3, [r7, #20]
 800de00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800de04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	68db      	ldr	r3, [r3, #12]
 800de0a:	021b      	lsls	r3, r3, #8
 800de0c:	697a      	ldr	r2, [r7, #20]
 800de0e:	4313      	orrs	r3, r2
 800de10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800de12:	697b      	ldr	r3, [r7, #20]
 800de14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800de18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	4a18      	ldr	r2, [pc, #96]	@ (800de80 <TIM_OC3_SetConfig+0xe4>)
 800de1e:	4293      	cmp	r3, r2
 800de20:	d007      	beq.n	800de32 <TIM_OC3_SetConfig+0x96>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	4a17      	ldr	r2, [pc, #92]	@ (800de84 <TIM_OC3_SetConfig+0xe8>)
 800de26:	4293      	cmp	r3, r2
 800de28:	d003      	beq.n	800de32 <TIM_OC3_SetConfig+0x96>
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	4a16      	ldr	r2, [pc, #88]	@ (800de88 <TIM_OC3_SetConfig+0xec>)
 800de2e:	4293      	cmp	r3, r2
 800de30:	d113      	bne.n	800de5a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800de32:	693b      	ldr	r3, [r7, #16]
 800de34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800de38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800de3a:	693b      	ldr	r3, [r7, #16]
 800de3c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800de40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	695b      	ldr	r3, [r3, #20]
 800de46:	011b      	lsls	r3, r3, #4
 800de48:	693a      	ldr	r2, [r7, #16]
 800de4a:	4313      	orrs	r3, r2
 800de4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	699b      	ldr	r3, [r3, #24]
 800de52:	011b      	lsls	r3, r3, #4
 800de54:	693a      	ldr	r2, [r7, #16]
 800de56:	4313      	orrs	r3, r2
 800de58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	693a      	ldr	r2, [r7, #16]
 800de5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	68fa      	ldr	r2, [r7, #12]
 800de64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	685a      	ldr	r2, [r3, #4]
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	697a      	ldr	r2, [r7, #20]
 800de72:	621a      	str	r2, [r3, #32]
}
 800de74:	bf00      	nop
 800de76:	371c      	adds	r7, #28
 800de78:	46bd      	mov	sp, r7
 800de7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7e:	4770      	bx	lr
 800de80:	40012c00 	.word	0x40012c00
 800de84:	40014400 	.word	0x40014400
 800de88:	40014800 	.word	0x40014800

0800de8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800de8c:	b480      	push	{r7}
 800de8e:	b087      	sub	sp, #28
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
 800de94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	6a1b      	ldr	r3, [r3, #32]
 800de9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	6a1b      	ldr	r3, [r3, #32]
 800dea0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	685b      	ldr	r3, [r3, #4]
 800deac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	69db      	ldr	r3, [r3, #28]
 800deb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800deba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800debe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dec6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	021b      	lsls	r3, r3, #8
 800dece:	68fa      	ldr	r2, [r7, #12]
 800ded0:	4313      	orrs	r3, r2
 800ded2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ded4:	693b      	ldr	r3, [r7, #16]
 800ded6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800deda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	689b      	ldr	r3, [r3, #8]
 800dee0:	031b      	lsls	r3, r3, #12
 800dee2:	693a      	ldr	r2, [r7, #16]
 800dee4:	4313      	orrs	r3, r2
 800dee6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	4a14      	ldr	r2, [pc, #80]	@ (800df3c <TIM_OC4_SetConfig+0xb0>)
 800deec:	4293      	cmp	r3, r2
 800deee:	d007      	beq.n	800df00 <TIM_OC4_SetConfig+0x74>
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	4a13      	ldr	r2, [pc, #76]	@ (800df40 <TIM_OC4_SetConfig+0xb4>)
 800def4:	4293      	cmp	r3, r2
 800def6:	d003      	beq.n	800df00 <TIM_OC4_SetConfig+0x74>
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	4a12      	ldr	r2, [pc, #72]	@ (800df44 <TIM_OC4_SetConfig+0xb8>)
 800defc:	4293      	cmp	r3, r2
 800defe:	d109      	bne.n	800df14 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800df00:	697b      	ldr	r3, [r7, #20]
 800df02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800df06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	695b      	ldr	r3, [r3, #20]
 800df0c:	019b      	lsls	r3, r3, #6
 800df0e:	697a      	ldr	r2, [r7, #20]
 800df10:	4313      	orrs	r3, r2
 800df12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	697a      	ldr	r2, [r7, #20]
 800df18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	68fa      	ldr	r2, [r7, #12]
 800df1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	685a      	ldr	r2, [r3, #4]
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	693a      	ldr	r2, [r7, #16]
 800df2c:	621a      	str	r2, [r3, #32]
}
 800df2e:	bf00      	nop
 800df30:	371c      	adds	r7, #28
 800df32:	46bd      	mov	sp, r7
 800df34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df38:	4770      	bx	lr
 800df3a:	bf00      	nop
 800df3c:	40012c00 	.word	0x40012c00
 800df40:	40014400 	.word	0x40014400
 800df44:	40014800 	.word	0x40014800

0800df48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800df48:	b480      	push	{r7}
 800df4a:	b087      	sub	sp, #28
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	6a1b      	ldr	r3, [r3, #32]
 800df56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	6a1b      	ldr	r3, [r3, #32]
 800df5c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	685b      	ldr	r3, [r3, #4]
 800df68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800df76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800df7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	68fa      	ldr	r2, [r7, #12]
 800df82:	4313      	orrs	r3, r2
 800df84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800df86:	693b      	ldr	r3, [r7, #16]
 800df88:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800df8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	689b      	ldr	r3, [r3, #8]
 800df92:	041b      	lsls	r3, r3, #16
 800df94:	693a      	ldr	r2, [r7, #16]
 800df96:	4313      	orrs	r3, r2
 800df98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	4a13      	ldr	r2, [pc, #76]	@ (800dfec <TIM_OC5_SetConfig+0xa4>)
 800df9e:	4293      	cmp	r3, r2
 800dfa0:	d007      	beq.n	800dfb2 <TIM_OC5_SetConfig+0x6a>
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	4a12      	ldr	r2, [pc, #72]	@ (800dff0 <TIM_OC5_SetConfig+0xa8>)
 800dfa6:	4293      	cmp	r3, r2
 800dfa8:	d003      	beq.n	800dfb2 <TIM_OC5_SetConfig+0x6a>
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	4a11      	ldr	r2, [pc, #68]	@ (800dff4 <TIM_OC5_SetConfig+0xac>)
 800dfae:	4293      	cmp	r3, r2
 800dfb0:	d109      	bne.n	800dfc6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dfb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	695b      	ldr	r3, [r3, #20]
 800dfbe:	021b      	lsls	r3, r3, #8
 800dfc0:	697a      	ldr	r2, [r7, #20]
 800dfc2:	4313      	orrs	r3, r2
 800dfc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	697a      	ldr	r2, [r7, #20]
 800dfca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	68fa      	ldr	r2, [r7, #12]
 800dfd0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	685a      	ldr	r2, [r3, #4]
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	693a      	ldr	r2, [r7, #16]
 800dfde:	621a      	str	r2, [r3, #32]
}
 800dfe0:	bf00      	nop
 800dfe2:	371c      	adds	r7, #28
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfea:	4770      	bx	lr
 800dfec:	40012c00 	.word	0x40012c00
 800dff0:	40014400 	.word	0x40014400
 800dff4:	40014800 	.word	0x40014800

0800dff8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dff8:	b480      	push	{r7}
 800dffa:	b087      	sub	sp, #28
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
 800e000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	6a1b      	ldr	r3, [r3, #32]
 800e006:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	6a1b      	ldr	r3, [r3, #32]
 800e00c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	685b      	ldr	r3, [r3, #4]
 800e018:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e01e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e026:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e02a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	021b      	lsls	r3, r3, #8
 800e032:	68fa      	ldr	r2, [r7, #12]
 800e034:	4313      	orrs	r3, r2
 800e036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e03e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	689b      	ldr	r3, [r3, #8]
 800e044:	051b      	lsls	r3, r3, #20
 800e046:	693a      	ldr	r2, [r7, #16]
 800e048:	4313      	orrs	r3, r2
 800e04a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	4a14      	ldr	r2, [pc, #80]	@ (800e0a0 <TIM_OC6_SetConfig+0xa8>)
 800e050:	4293      	cmp	r3, r2
 800e052:	d007      	beq.n	800e064 <TIM_OC6_SetConfig+0x6c>
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	4a13      	ldr	r2, [pc, #76]	@ (800e0a4 <TIM_OC6_SetConfig+0xac>)
 800e058:	4293      	cmp	r3, r2
 800e05a:	d003      	beq.n	800e064 <TIM_OC6_SetConfig+0x6c>
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	4a12      	ldr	r2, [pc, #72]	@ (800e0a8 <TIM_OC6_SetConfig+0xb0>)
 800e060:	4293      	cmp	r3, r2
 800e062:	d109      	bne.n	800e078 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e064:	697b      	ldr	r3, [r7, #20]
 800e066:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e06a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	695b      	ldr	r3, [r3, #20]
 800e070:	029b      	lsls	r3, r3, #10
 800e072:	697a      	ldr	r2, [r7, #20]
 800e074:	4313      	orrs	r3, r2
 800e076:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	697a      	ldr	r2, [r7, #20]
 800e07c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	68fa      	ldr	r2, [r7, #12]
 800e082:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	685a      	ldr	r2, [r3, #4]
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	693a      	ldr	r2, [r7, #16]
 800e090:	621a      	str	r2, [r3, #32]
}
 800e092:	bf00      	nop
 800e094:	371c      	adds	r7, #28
 800e096:	46bd      	mov	sp, r7
 800e098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09c:	4770      	bx	lr
 800e09e:	bf00      	nop
 800e0a0:	40012c00 	.word	0x40012c00
 800e0a4:	40014400 	.word	0x40014400
 800e0a8:	40014800 	.word	0x40014800

0800e0ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e0ac:	b480      	push	{r7}
 800e0ae:	b087      	sub	sp, #28
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	60f8      	str	r0, [r7, #12]
 800e0b4:	60b9      	str	r1, [r7, #8]
 800e0b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e0b8:	68bb      	ldr	r3, [r7, #8]
 800e0ba:	f003 031f 	and.w	r3, r3, #31
 800e0be:	2201      	movs	r2, #1
 800e0c0:	fa02 f303 	lsl.w	r3, r2, r3
 800e0c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	6a1a      	ldr	r2, [r3, #32]
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	43db      	mvns	r3, r3
 800e0ce:	401a      	ands	r2, r3
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	6a1a      	ldr	r2, [r3, #32]
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	f003 031f 	and.w	r3, r3, #31
 800e0de:	6879      	ldr	r1, [r7, #4]
 800e0e0:	fa01 f303 	lsl.w	r3, r1, r3
 800e0e4:	431a      	orrs	r2, r3
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	621a      	str	r2, [r3, #32]
}
 800e0ea:	bf00      	nop
 800e0ec:	371c      	adds	r7, #28
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f4:	4770      	bx	lr
	...

0800e0f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e0f8:	b480      	push	{r7}
 800e0fa:	b085      	sub	sp, #20
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
 800e100:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e108:	2b01      	cmp	r3, #1
 800e10a:	d101      	bne.n	800e110 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e10c:	2302      	movs	r3, #2
 800e10e:	e04a      	b.n	800e1a6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2201      	movs	r2, #1
 800e114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2202      	movs	r2, #2
 800e11c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	685b      	ldr	r3, [r3, #4]
 800e126:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	689b      	ldr	r3, [r3, #8]
 800e12e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	4a1f      	ldr	r2, [pc, #124]	@ (800e1b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800e136:	4293      	cmp	r3, r2
 800e138:	d108      	bne.n	800e14c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e140:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	685b      	ldr	r3, [r3, #4]
 800e146:	68fa      	ldr	r2, [r7, #12]
 800e148:	4313      	orrs	r3, r2
 800e14a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e152:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	68fa      	ldr	r2, [r7, #12]
 800e15a:	4313      	orrs	r3, r2
 800e15c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	68fa      	ldr	r2, [r7, #12]
 800e164:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	4a12      	ldr	r2, [pc, #72]	@ (800e1b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800e16c:	4293      	cmp	r3, r2
 800e16e:	d004      	beq.n	800e17a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e178:	d10c      	bne.n	800e194 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e180:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	689b      	ldr	r3, [r3, #8]
 800e186:	68ba      	ldr	r2, [r7, #8]
 800e188:	4313      	orrs	r3, r2
 800e18a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	68ba      	ldr	r2, [r7, #8]
 800e192:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2201      	movs	r2, #1
 800e198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2200      	movs	r2, #0
 800e1a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e1a4:	2300      	movs	r3, #0
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3714      	adds	r7, #20
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b0:	4770      	bx	lr
 800e1b2:	bf00      	nop
 800e1b4:	40012c00 	.word	0x40012c00

0800e1b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e1b8:	b480      	push	{r7}
 800e1ba:	b083      	sub	sp, #12
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e1c0:	bf00      	nop
 800e1c2:	370c      	adds	r7, #12
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ca:	4770      	bx	lr

0800e1cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e1cc:	b480      	push	{r7}
 800e1ce:	b083      	sub	sp, #12
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e1d4:	bf00      	nop
 800e1d6:	370c      	adds	r7, #12
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1de:	4770      	bx	lr

0800e1e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e1e0:	b480      	push	{r7}
 800e1e2:	b083      	sub	sp, #12
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e1e8:	bf00      	nop
 800e1ea:	370c      	adds	r7, #12
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f2:	4770      	bx	lr

0800e1f4 <LL_RCC_GetUSARTClockSource>:
{
 800e1f4:	b480      	push	{r7}
 800e1f6:	b083      	sub	sp, #12
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800e1fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e200:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	4013      	ands	r3, r2
}
 800e208:	4618      	mov	r0, r3
 800e20a:	370c      	adds	r7, #12
 800e20c:	46bd      	mov	sp, r7
 800e20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e212:	4770      	bx	lr

0800e214 <LL_RCC_GetLPUARTClockSource>:
{
 800e214:	b480      	push	{r7}
 800e216:	b083      	sub	sp, #12
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800e21c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e220:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	4013      	ands	r3, r2
}
 800e228:	4618      	mov	r0, r3
 800e22a:	370c      	adds	r7, #12
 800e22c:	46bd      	mov	sp, r7
 800e22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e232:	4770      	bx	lr

0800e234 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b082      	sub	sp, #8
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d101      	bne.n	800e246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e242:	2301      	movs	r3, #1
 800e244:	e050      	b.n	800e2e8 <HAL_UART_Init+0xb4>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d114      	bne.n	800e27a <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2200      	movs	r2, #0
 800e254:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f000 f935 	bl	800e4c8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800e264:	2b00      	cmp	r3, #0
 800e266:	d103      	bne.n	800e270 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	4a21      	ldr	r2, [pc, #132]	@ (800e2f0 <HAL_UART_Init+0xbc>)
 800e26c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2224      	movs	r2, #36	@ 0x24
 800e27e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	681a      	ldr	r2, [r3, #0]
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	f022 0201 	bic.w	r2, r2, #1
 800e290:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e296:	2b00      	cmp	r3, #0
 800e298:	d002      	beq.n	800e2a0 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f000 fb8e 	bl	800e9bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e2a0:	6878      	ldr	r0, [r7, #4]
 800e2a2:	f000 f963 	bl	800e56c <UART_SetConfig>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	2b01      	cmp	r3, #1
 800e2aa:	d101      	bne.n	800e2b0 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800e2ac:	2301      	movs	r3, #1
 800e2ae:	e01b      	b.n	800e2e8 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	685a      	ldr	r2, [r3, #4]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e2be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	689a      	ldr	r2, [r3, #8]
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e2ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	681a      	ldr	r2, [r3, #0]
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	f042 0201 	orr.w	r2, r2, #1
 800e2de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f000 fc0d 	bl	800eb00 <UART_CheckIdleState>
 800e2e6:	4603      	mov	r3, r0
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	3708      	adds	r7, #8
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}
 800e2f0:	08006f9d 	.word	0x08006f9d

0800e2f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b08a      	sub	sp, #40	@ 0x28
 800e2f8:	af02      	add	r7, sp, #8
 800e2fa:	60f8      	str	r0, [r7, #12]
 800e2fc:	60b9      	str	r1, [r7, #8]
 800e2fe:	603b      	str	r3, [r7, #0]
 800e300:	4613      	mov	r3, r2
 800e302:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e30a:	2b20      	cmp	r3, #32
 800e30c:	d17b      	bne.n	800e406 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e30e:	68bb      	ldr	r3, [r7, #8]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d002      	beq.n	800e31a <HAL_UART_Transmit+0x26>
 800e314:	88fb      	ldrh	r3, [r7, #6]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d101      	bne.n	800e31e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e31a:	2301      	movs	r3, #1
 800e31c:	e074      	b.n	800e408 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	2200      	movs	r2, #0
 800e322:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	2221      	movs	r2, #33	@ 0x21
 800e32a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e32e:	f7f8 ff23 	bl	8007178 <HAL_GetTick>
 800e332:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	88fa      	ldrh	r2, [r7, #6]
 800e338:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	88fa      	ldrh	r2, [r7, #6]
 800e340:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	689b      	ldr	r3, [r3, #8]
 800e348:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e34c:	d108      	bne.n	800e360 <HAL_UART_Transmit+0x6c>
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	691b      	ldr	r3, [r3, #16]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d104      	bne.n	800e360 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e356:	2300      	movs	r3, #0
 800e358:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e35a:	68bb      	ldr	r3, [r7, #8]
 800e35c:	61bb      	str	r3, [r7, #24]
 800e35e:	e003      	b.n	800e368 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e364:	2300      	movs	r3, #0
 800e366:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e368:	e030      	b.n	800e3cc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	9300      	str	r3, [sp, #0]
 800e36e:	697b      	ldr	r3, [r7, #20]
 800e370:	2200      	movs	r2, #0
 800e372:	2180      	movs	r1, #128	@ 0x80
 800e374:	68f8      	ldr	r0, [r7, #12]
 800e376:	f000 fc6d 	bl	800ec54 <UART_WaitOnFlagUntilTimeout>
 800e37a:	4603      	mov	r3, r0
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d005      	beq.n	800e38c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	2220      	movs	r2, #32
 800e384:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800e388:	2303      	movs	r3, #3
 800e38a:	e03d      	b.n	800e408 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e38c:	69fb      	ldr	r3, [r7, #28]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d10b      	bne.n	800e3aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e392:	69bb      	ldr	r3, [r7, #24]
 800e394:	881b      	ldrh	r3, [r3, #0]
 800e396:	461a      	mov	r2, r3
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e3a0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e3a2:	69bb      	ldr	r3, [r7, #24]
 800e3a4:	3302      	adds	r3, #2
 800e3a6:	61bb      	str	r3, [r7, #24]
 800e3a8:	e007      	b.n	800e3ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e3aa:	69fb      	ldr	r3, [r7, #28]
 800e3ac:	781a      	ldrb	r2, [r3, #0]
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e3b4:	69fb      	ldr	r3, [r7, #28]
 800e3b6:	3301      	adds	r3, #1
 800e3b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e3c0:	b29b      	uxth	r3, r3
 800e3c2:	3b01      	subs	r3, #1
 800e3c4:	b29a      	uxth	r2, r3
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e3d2:	b29b      	uxth	r3, r3
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d1c8      	bne.n	800e36a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	9300      	str	r3, [sp, #0]
 800e3dc:	697b      	ldr	r3, [r7, #20]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	2140      	movs	r1, #64	@ 0x40
 800e3e2:	68f8      	ldr	r0, [r7, #12]
 800e3e4:	f000 fc36 	bl	800ec54 <UART_WaitOnFlagUntilTimeout>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d005      	beq.n	800e3fa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	2220      	movs	r2, #32
 800e3f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800e3f6:	2303      	movs	r3, #3
 800e3f8:	e006      	b.n	800e408 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	2220      	movs	r2, #32
 800e3fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800e402:	2300      	movs	r3, #0
 800e404:	e000      	b.n	800e408 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e406:	2302      	movs	r3, #2
  }
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3720      	adds	r7, #32
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}

0800e410 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e410:	b480      	push	{r7}
 800e412:	b083      	sub	sp, #12
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e418:	bf00      	nop
 800e41a:	370c      	adds	r7, #12
 800e41c:	46bd      	mov	sp, r7
 800e41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e422:	4770      	bx	lr

0800e424 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e424:	b480      	push	{r7}
 800e426:	b083      	sub	sp, #12
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800e42c:	bf00      	nop
 800e42e:	370c      	adds	r7, #12
 800e430:	46bd      	mov	sp, r7
 800e432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e436:	4770      	bx	lr

0800e438 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e438:	b480      	push	{r7}
 800e43a:	b083      	sub	sp, #12
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800e440:	bf00      	nop
 800e442:	370c      	adds	r7, #12
 800e444:	46bd      	mov	sp, r7
 800e446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44a:	4770      	bx	lr

0800e44c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e44c:	b480      	push	{r7}
 800e44e:	b083      	sub	sp, #12
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e454:	bf00      	nop
 800e456:	370c      	adds	r7, #12
 800e458:	46bd      	mov	sp, r7
 800e45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45e:	4770      	bx	lr

0800e460 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e460:	b480      	push	{r7}
 800e462:	b083      	sub	sp, #12
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e468:	bf00      	nop
 800e46a:	370c      	adds	r7, #12
 800e46c:	46bd      	mov	sp, r7
 800e46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e472:	4770      	bx	lr

0800e474 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800e474:	b480      	push	{r7}
 800e476:	b083      	sub	sp, #12
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800e47c:	bf00      	nop
 800e47e:	370c      	adds	r7, #12
 800e480:	46bd      	mov	sp, r7
 800e482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e486:	4770      	bx	lr

0800e488 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800e488:	b480      	push	{r7}
 800e48a:	b083      	sub	sp, #12
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800e490:	bf00      	nop
 800e492:	370c      	adds	r7, #12
 800e494:	46bd      	mov	sp, r7
 800e496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49a:	4770      	bx	lr

0800e49c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800e49c:	b480      	push	{r7}
 800e49e:	b083      	sub	sp, #12
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800e4a4:	bf00      	nop
 800e4a6:	370c      	adds	r7, #12
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ae:	4770      	bx	lr

0800e4b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e4b0:	b480      	push	{r7}
 800e4b2:	b083      	sub	sp, #12
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
 800e4b8:	460b      	mov	r3, r1
 800e4ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e4bc:	bf00      	nop
 800e4be:	370c      	adds	r7, #12
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c6:	4770      	bx	lr

0800e4c8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800e4c8:	b480      	push	{r7}
 800e4ca:	b083      	sub	sp, #12
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	4a1a      	ldr	r2, [pc, #104]	@ (800e53c <UART_InitCallbacksToDefault+0x74>)
 800e4d4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	4a19      	ldr	r2, [pc, #100]	@ (800e540 <UART_InitCallbacksToDefault+0x78>)
 800e4dc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	4a18      	ldr	r2, [pc, #96]	@ (800e544 <UART_InitCallbacksToDefault+0x7c>)
 800e4e4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	4a17      	ldr	r2, [pc, #92]	@ (800e548 <UART_InitCallbacksToDefault+0x80>)
 800e4ec:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	4a16      	ldr	r2, [pc, #88]	@ (800e54c <UART_InitCallbacksToDefault+0x84>)
 800e4f4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	4a15      	ldr	r2, [pc, #84]	@ (800e550 <UART_InitCallbacksToDefault+0x88>)
 800e4fc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	4a14      	ldr	r2, [pc, #80]	@ (800e554 <UART_InitCallbacksToDefault+0x8c>)
 800e504:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	4a13      	ldr	r2, [pc, #76]	@ (800e558 <UART_InitCallbacksToDefault+0x90>)
 800e50c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	4a12      	ldr	r2, [pc, #72]	@ (800e55c <UART_InitCallbacksToDefault+0x94>)
 800e514:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	4a11      	ldr	r2, [pc, #68]	@ (800e560 <UART_InitCallbacksToDefault+0x98>)
 800e51c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	4a10      	ldr	r2, [pc, #64]	@ (800e564 <UART_InitCallbacksToDefault+0x9c>)
 800e524:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	4a0f      	ldr	r2, [pc, #60]	@ (800e568 <UART_InitCallbacksToDefault+0xa0>)
 800e52c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800e530:	bf00      	nop
 800e532:	370c      	adds	r7, #12
 800e534:	46bd      	mov	sp, r7
 800e536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53a:	4770      	bx	lr
 800e53c:	0800e425 	.word	0x0800e425
 800e540:	0800e411 	.word	0x0800e411
 800e544:	0800e44d 	.word	0x0800e44d
 800e548:	0800e439 	.word	0x0800e439
 800e54c:	0800e461 	.word	0x0800e461
 800e550:	0800e475 	.word	0x0800e475
 800e554:	0800e489 	.word	0x0800e489
 800e558:	0800e49d 	.word	0x0800e49d
 800e55c:	0800edfb 	.word	0x0800edfb
 800e560:	0800ee0f 	.word	0x0800ee0f
 800e564:	0800ee23 	.word	0x0800ee23
 800e568:	0800e4b1 	.word	0x0800e4b1

0800e56c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e56c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e570:	b08c      	sub	sp, #48	@ 0x30
 800e572:	af00      	add	r7, sp, #0
 800e574:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e576:	2300      	movs	r3, #0
 800e578:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e57c:	697b      	ldr	r3, [r7, #20]
 800e57e:	689a      	ldr	r2, [r3, #8]
 800e580:	697b      	ldr	r3, [r7, #20]
 800e582:	691b      	ldr	r3, [r3, #16]
 800e584:	431a      	orrs	r2, r3
 800e586:	697b      	ldr	r3, [r7, #20]
 800e588:	695b      	ldr	r3, [r3, #20]
 800e58a:	431a      	orrs	r2, r3
 800e58c:	697b      	ldr	r3, [r7, #20]
 800e58e:	69db      	ldr	r3, [r3, #28]
 800e590:	4313      	orrs	r3, r2
 800e592:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e594:	697b      	ldr	r3, [r7, #20]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	681a      	ldr	r2, [r3, #0]
 800e59a:	4baf      	ldr	r3, [pc, #700]	@ (800e858 <UART_SetConfig+0x2ec>)
 800e59c:	4013      	ands	r3, r2
 800e59e:	697a      	ldr	r2, [r7, #20]
 800e5a0:	6812      	ldr	r2, [r2, #0]
 800e5a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e5a4:	430b      	orrs	r3, r1
 800e5a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e5a8:	697b      	ldr	r3, [r7, #20]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	685b      	ldr	r3, [r3, #4]
 800e5ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	68da      	ldr	r2, [r3, #12]
 800e5b6:	697b      	ldr	r3, [r7, #20]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	430a      	orrs	r2, r1
 800e5bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	699b      	ldr	r3, [r3, #24]
 800e5c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e5c4:	697b      	ldr	r3, [r7, #20]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	4aa4      	ldr	r2, [pc, #656]	@ (800e85c <UART_SetConfig+0x2f0>)
 800e5ca:	4293      	cmp	r3, r2
 800e5cc:	d004      	beq.n	800e5d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	6a1b      	ldr	r3, [r3, #32]
 800e5d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e5d4:	4313      	orrs	r3, r2
 800e5d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e5d8:	697b      	ldr	r3, [r7, #20]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	689b      	ldr	r3, [r3, #8]
 800e5de:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800e5e2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800e5e6:	697a      	ldr	r2, [r7, #20]
 800e5e8:	6812      	ldr	r2, [r2, #0]
 800e5ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e5ec:	430b      	orrs	r3, r1
 800e5ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5f6:	f023 010f 	bic.w	r1, r3, #15
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e5fe:	697b      	ldr	r3, [r7, #20]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	430a      	orrs	r2, r1
 800e604:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e606:	697b      	ldr	r3, [r7, #20]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	4a95      	ldr	r2, [pc, #596]	@ (800e860 <UART_SetConfig+0x2f4>)
 800e60c:	4293      	cmp	r3, r2
 800e60e:	d125      	bne.n	800e65c <UART_SetConfig+0xf0>
 800e610:	2003      	movs	r0, #3
 800e612:	f7ff fdef 	bl	800e1f4 <LL_RCC_GetUSARTClockSource>
 800e616:	4603      	mov	r3, r0
 800e618:	2b03      	cmp	r3, #3
 800e61a:	d81b      	bhi.n	800e654 <UART_SetConfig+0xe8>
 800e61c:	a201      	add	r2, pc, #4	@ (adr r2, 800e624 <UART_SetConfig+0xb8>)
 800e61e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e622:	bf00      	nop
 800e624:	0800e635 	.word	0x0800e635
 800e628:	0800e645 	.word	0x0800e645
 800e62c:	0800e63d 	.word	0x0800e63d
 800e630:	0800e64d 	.word	0x0800e64d
 800e634:	2301      	movs	r3, #1
 800e636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e63a:	e042      	b.n	800e6c2 <UART_SetConfig+0x156>
 800e63c:	2302      	movs	r3, #2
 800e63e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e642:	e03e      	b.n	800e6c2 <UART_SetConfig+0x156>
 800e644:	2304      	movs	r3, #4
 800e646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e64a:	e03a      	b.n	800e6c2 <UART_SetConfig+0x156>
 800e64c:	2308      	movs	r3, #8
 800e64e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e652:	e036      	b.n	800e6c2 <UART_SetConfig+0x156>
 800e654:	2310      	movs	r3, #16
 800e656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e65a:	e032      	b.n	800e6c2 <UART_SetConfig+0x156>
 800e65c:	697b      	ldr	r3, [r7, #20]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	4a7e      	ldr	r2, [pc, #504]	@ (800e85c <UART_SetConfig+0x2f0>)
 800e662:	4293      	cmp	r3, r2
 800e664:	d12a      	bne.n	800e6bc <UART_SetConfig+0x150>
 800e666:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800e66a:	f7ff fdd3 	bl	800e214 <LL_RCC_GetLPUARTClockSource>
 800e66e:	4603      	mov	r3, r0
 800e670:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e674:	d01a      	beq.n	800e6ac <UART_SetConfig+0x140>
 800e676:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e67a:	d81b      	bhi.n	800e6b4 <UART_SetConfig+0x148>
 800e67c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e680:	d00c      	beq.n	800e69c <UART_SetConfig+0x130>
 800e682:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e686:	d815      	bhi.n	800e6b4 <UART_SetConfig+0x148>
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d003      	beq.n	800e694 <UART_SetConfig+0x128>
 800e68c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e690:	d008      	beq.n	800e6a4 <UART_SetConfig+0x138>
 800e692:	e00f      	b.n	800e6b4 <UART_SetConfig+0x148>
 800e694:	2300      	movs	r3, #0
 800e696:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e69a:	e012      	b.n	800e6c2 <UART_SetConfig+0x156>
 800e69c:	2302      	movs	r3, #2
 800e69e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e6a2:	e00e      	b.n	800e6c2 <UART_SetConfig+0x156>
 800e6a4:	2304      	movs	r3, #4
 800e6a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e6aa:	e00a      	b.n	800e6c2 <UART_SetConfig+0x156>
 800e6ac:	2308      	movs	r3, #8
 800e6ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e6b2:	e006      	b.n	800e6c2 <UART_SetConfig+0x156>
 800e6b4:	2310      	movs	r3, #16
 800e6b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800e6ba:	e002      	b.n	800e6c2 <UART_SetConfig+0x156>
 800e6bc:	2310      	movs	r3, #16
 800e6be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	4a65      	ldr	r2, [pc, #404]	@ (800e85c <UART_SetConfig+0x2f0>)
 800e6c8:	4293      	cmp	r3, r2
 800e6ca:	f040 8097 	bne.w	800e7fc <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e6ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e6d2:	2b08      	cmp	r3, #8
 800e6d4:	d823      	bhi.n	800e71e <UART_SetConfig+0x1b2>
 800e6d6:	a201      	add	r2, pc, #4	@ (adr r2, 800e6dc <UART_SetConfig+0x170>)
 800e6d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6dc:	0800e701 	.word	0x0800e701
 800e6e0:	0800e71f 	.word	0x0800e71f
 800e6e4:	0800e709 	.word	0x0800e709
 800e6e8:	0800e71f 	.word	0x0800e71f
 800e6ec:	0800e70f 	.word	0x0800e70f
 800e6f0:	0800e71f 	.word	0x0800e71f
 800e6f4:	0800e71f 	.word	0x0800e71f
 800e6f8:	0800e71f 	.word	0x0800e71f
 800e6fc:	0800e717 	.word	0x0800e717
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e700:	f7fd f820 	bl	800b744 <HAL_RCC_GetPCLK1Freq>
 800e704:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e706:	e010      	b.n	800e72a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e708:	4b56      	ldr	r3, [pc, #344]	@ (800e864 <UART_SetConfig+0x2f8>)
 800e70a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800e70c:	e00d      	b.n	800e72a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e70e:	f7fc ff99 	bl	800b644 <HAL_RCC_GetSysClockFreq>
 800e712:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e714:	e009      	b.n	800e72a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e716:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e71a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800e71c:	e005      	b.n	800e72a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800e71e:	2300      	movs	r3, #0
 800e720:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800e722:	2301      	movs	r3, #1
 800e724:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800e728:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	f000 812b 	beq.w	800e988 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e736:	4a4c      	ldr	r2, [pc, #304]	@ (800e868 <UART_SetConfig+0x2fc>)
 800e738:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e73c:	461a      	mov	r2, r3
 800e73e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e740:	fbb3 f3f2 	udiv	r3, r3, r2
 800e744:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	685a      	ldr	r2, [r3, #4]
 800e74a:	4613      	mov	r3, r2
 800e74c:	005b      	lsls	r3, r3, #1
 800e74e:	4413      	add	r3, r2
 800e750:	69ba      	ldr	r2, [r7, #24]
 800e752:	429a      	cmp	r2, r3
 800e754:	d305      	bcc.n	800e762 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e756:	697b      	ldr	r3, [r7, #20]
 800e758:	685b      	ldr	r3, [r3, #4]
 800e75a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e75c:	69ba      	ldr	r2, [r7, #24]
 800e75e:	429a      	cmp	r2, r3
 800e760:	d903      	bls.n	800e76a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800e762:	2301      	movs	r3, #1
 800e764:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800e768:	e10e      	b.n	800e988 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e76c:	2200      	movs	r2, #0
 800e76e:	60bb      	str	r3, [r7, #8]
 800e770:	60fa      	str	r2, [r7, #12]
 800e772:	697b      	ldr	r3, [r7, #20]
 800e774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e776:	4a3c      	ldr	r2, [pc, #240]	@ (800e868 <UART_SetConfig+0x2fc>)
 800e778:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e77c:	b29b      	uxth	r3, r3
 800e77e:	2200      	movs	r2, #0
 800e780:	603b      	str	r3, [r7, #0]
 800e782:	607a      	str	r2, [r7, #4]
 800e784:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e788:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e78c:	f7f2 fa34 	bl	8000bf8 <__aeabi_uldivmod>
 800e790:	4602      	mov	r2, r0
 800e792:	460b      	mov	r3, r1
 800e794:	4610      	mov	r0, r2
 800e796:	4619      	mov	r1, r3
 800e798:	f04f 0200 	mov.w	r2, #0
 800e79c:	f04f 0300 	mov.w	r3, #0
 800e7a0:	020b      	lsls	r3, r1, #8
 800e7a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e7a6:	0202      	lsls	r2, r0, #8
 800e7a8:	6979      	ldr	r1, [r7, #20]
 800e7aa:	6849      	ldr	r1, [r1, #4]
 800e7ac:	0849      	lsrs	r1, r1, #1
 800e7ae:	2000      	movs	r0, #0
 800e7b0:	460c      	mov	r4, r1
 800e7b2:	4605      	mov	r5, r0
 800e7b4:	eb12 0804 	adds.w	r8, r2, r4
 800e7b8:	eb43 0905 	adc.w	r9, r3, r5
 800e7bc:	697b      	ldr	r3, [r7, #20]
 800e7be:	685b      	ldr	r3, [r3, #4]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	469a      	mov	sl, r3
 800e7c4:	4693      	mov	fp, r2
 800e7c6:	4652      	mov	r2, sl
 800e7c8:	465b      	mov	r3, fp
 800e7ca:	4640      	mov	r0, r8
 800e7cc:	4649      	mov	r1, r9
 800e7ce:	f7f2 fa13 	bl	8000bf8 <__aeabi_uldivmod>
 800e7d2:	4602      	mov	r2, r0
 800e7d4:	460b      	mov	r3, r1
 800e7d6:	4613      	mov	r3, r2
 800e7d8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e7da:	6a3b      	ldr	r3, [r7, #32]
 800e7dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e7e0:	d308      	bcc.n	800e7f4 <UART_SetConfig+0x288>
 800e7e2:	6a3b      	ldr	r3, [r7, #32]
 800e7e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e7e8:	d204      	bcs.n	800e7f4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800e7ea:	697b      	ldr	r3, [r7, #20]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	6a3a      	ldr	r2, [r7, #32]
 800e7f0:	60da      	str	r2, [r3, #12]
 800e7f2:	e0c9      	b.n	800e988 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800e7f4:	2301      	movs	r3, #1
 800e7f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800e7fa:	e0c5      	b.n	800e988 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	69db      	ldr	r3, [r3, #28]
 800e800:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e804:	d16d      	bne.n	800e8e2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800e806:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e80a:	3b01      	subs	r3, #1
 800e80c:	2b07      	cmp	r3, #7
 800e80e:	d82d      	bhi.n	800e86c <UART_SetConfig+0x300>
 800e810:	a201      	add	r2, pc, #4	@ (adr r2, 800e818 <UART_SetConfig+0x2ac>)
 800e812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e816:	bf00      	nop
 800e818:	0800e839 	.word	0x0800e839
 800e81c:	0800e841 	.word	0x0800e841
 800e820:	0800e86d 	.word	0x0800e86d
 800e824:	0800e847 	.word	0x0800e847
 800e828:	0800e86d 	.word	0x0800e86d
 800e82c:	0800e86d 	.word	0x0800e86d
 800e830:	0800e86d 	.word	0x0800e86d
 800e834:	0800e84f 	.word	0x0800e84f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e838:	f7fc ff9a 	bl	800b770 <HAL_RCC_GetPCLK2Freq>
 800e83c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e83e:	e01b      	b.n	800e878 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e840:	4b08      	ldr	r3, [pc, #32]	@ (800e864 <UART_SetConfig+0x2f8>)
 800e842:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800e844:	e018      	b.n	800e878 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e846:	f7fc fefd 	bl	800b644 <HAL_RCC_GetSysClockFreq>
 800e84a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e84c:	e014      	b.n	800e878 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e84e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e852:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800e854:	e010      	b.n	800e878 <UART_SetConfig+0x30c>
 800e856:	bf00      	nop
 800e858:	cfff69f3 	.word	0xcfff69f3
 800e85c:	40008000 	.word	0x40008000
 800e860:	40013800 	.word	0x40013800
 800e864:	00f42400 	.word	0x00f42400
 800e868:	0801c09c 	.word	0x0801c09c
      default:
        pclk = 0U;
 800e86c:	2300      	movs	r3, #0
 800e86e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800e870:	2301      	movs	r3, #1
 800e872:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800e876:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	f000 8084 	beq.w	800e988 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e884:	4a4b      	ldr	r2, [pc, #300]	@ (800e9b4 <UART_SetConfig+0x448>)
 800e886:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e88a:	461a      	mov	r2, r3
 800e88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e88e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e892:	005a      	lsls	r2, r3, #1
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	685b      	ldr	r3, [r3, #4]
 800e898:	085b      	lsrs	r3, r3, #1
 800e89a:	441a      	add	r2, r3
 800e89c:	697b      	ldr	r3, [r7, #20]
 800e89e:	685b      	ldr	r3, [r3, #4]
 800e8a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8a4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e8a6:	6a3b      	ldr	r3, [r7, #32]
 800e8a8:	2b0f      	cmp	r3, #15
 800e8aa:	d916      	bls.n	800e8da <UART_SetConfig+0x36e>
 800e8ac:	6a3b      	ldr	r3, [r7, #32]
 800e8ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e8b2:	d212      	bcs.n	800e8da <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e8b4:	6a3b      	ldr	r3, [r7, #32]
 800e8b6:	b29b      	uxth	r3, r3
 800e8b8:	f023 030f 	bic.w	r3, r3, #15
 800e8bc:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e8be:	6a3b      	ldr	r3, [r7, #32]
 800e8c0:	085b      	lsrs	r3, r3, #1
 800e8c2:	b29b      	uxth	r3, r3
 800e8c4:	f003 0307 	and.w	r3, r3, #7
 800e8c8:	b29a      	uxth	r2, r3
 800e8ca:	8bfb      	ldrh	r3, [r7, #30]
 800e8cc:	4313      	orrs	r3, r2
 800e8ce:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800e8d0:	697b      	ldr	r3, [r7, #20]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	8bfa      	ldrh	r2, [r7, #30]
 800e8d6:	60da      	str	r2, [r3, #12]
 800e8d8:	e056      	b.n	800e988 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800e8da:	2301      	movs	r3, #1
 800e8dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800e8e0:	e052      	b.n	800e988 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e8e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e8e6:	3b01      	subs	r3, #1
 800e8e8:	2b07      	cmp	r3, #7
 800e8ea:	d822      	bhi.n	800e932 <UART_SetConfig+0x3c6>
 800e8ec:	a201      	add	r2, pc, #4	@ (adr r2, 800e8f4 <UART_SetConfig+0x388>)
 800e8ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8f2:	bf00      	nop
 800e8f4:	0800e915 	.word	0x0800e915
 800e8f8:	0800e91d 	.word	0x0800e91d
 800e8fc:	0800e933 	.word	0x0800e933
 800e900:	0800e923 	.word	0x0800e923
 800e904:	0800e933 	.word	0x0800e933
 800e908:	0800e933 	.word	0x0800e933
 800e90c:	0800e933 	.word	0x0800e933
 800e910:	0800e92b 	.word	0x0800e92b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e914:	f7fc ff2c 	bl	800b770 <HAL_RCC_GetPCLK2Freq>
 800e918:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e91a:	e010      	b.n	800e93e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e91c:	4b26      	ldr	r3, [pc, #152]	@ (800e9b8 <UART_SetConfig+0x44c>)
 800e91e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800e920:	e00d      	b.n	800e93e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e922:	f7fc fe8f 	bl	800b644 <HAL_RCC_GetSysClockFreq>
 800e926:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800e928:	e009      	b.n	800e93e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e92a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e92e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800e930:	e005      	b.n	800e93e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800e932:	2300      	movs	r3, #0
 800e934:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800e936:	2301      	movs	r3, #1
 800e938:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800e93c:	bf00      	nop
    }

    if (pclk != 0U)
 800e93e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e940:	2b00      	cmp	r3, #0
 800e942:	d021      	beq.n	800e988 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e944:	697b      	ldr	r3, [r7, #20]
 800e946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e948:	4a1a      	ldr	r2, [pc, #104]	@ (800e9b4 <UART_SetConfig+0x448>)
 800e94a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e94e:	461a      	mov	r2, r3
 800e950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e952:	fbb3 f2f2 	udiv	r2, r3, r2
 800e956:	697b      	ldr	r3, [r7, #20]
 800e958:	685b      	ldr	r3, [r3, #4]
 800e95a:	085b      	lsrs	r3, r3, #1
 800e95c:	441a      	add	r2, r3
 800e95e:	697b      	ldr	r3, [r7, #20]
 800e960:	685b      	ldr	r3, [r3, #4]
 800e962:	fbb2 f3f3 	udiv	r3, r2, r3
 800e966:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e968:	6a3b      	ldr	r3, [r7, #32]
 800e96a:	2b0f      	cmp	r3, #15
 800e96c:	d909      	bls.n	800e982 <UART_SetConfig+0x416>
 800e96e:	6a3b      	ldr	r3, [r7, #32]
 800e970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e974:	d205      	bcs.n	800e982 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e976:	6a3b      	ldr	r3, [r7, #32]
 800e978:	b29a      	uxth	r2, r3
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	60da      	str	r2, [r3, #12]
 800e980:	e002      	b.n	800e988 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800e982:	2301      	movs	r3, #1
 800e984:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	2201      	movs	r2, #1
 800e98c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e990:	697b      	ldr	r3, [r7, #20]
 800e992:	2201      	movs	r2, #1
 800e994:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	2200      	movs	r2, #0
 800e99c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e99e:	697b      	ldr	r3, [r7, #20]
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e9a4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3730      	adds	r7, #48	@ 0x30
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e9b2:	bf00      	nop
 800e9b4:	0801c09c 	.word	0x0801c09c
 800e9b8:	00f42400 	.word	0x00f42400

0800e9bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e9bc:	b480      	push	{r7}
 800e9be:	b083      	sub	sp, #12
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e9c8:	f003 0308 	and.w	r3, r3, #8
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d00a      	beq.n	800e9e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	685b      	ldr	r3, [r3, #4]
 800e9d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	430a      	orrs	r2, r1
 800e9e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e9ea:	f003 0301 	and.w	r3, r3, #1
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d00a      	beq.n	800ea08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	685b      	ldr	r3, [r3, #4]
 800e9f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	430a      	orrs	r2, r1
 800ea06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea0c:	f003 0302 	and.w	r3, r3, #2
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d00a      	beq.n	800ea2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	685b      	ldr	r3, [r3, #4]
 800ea1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	430a      	orrs	r2, r1
 800ea28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea2e:	f003 0304 	and.w	r3, r3, #4
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d00a      	beq.n	800ea4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	685b      	ldr	r3, [r3, #4]
 800ea3c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	430a      	orrs	r2, r1
 800ea4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea50:	f003 0310 	and.w	r3, r3, #16
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d00a      	beq.n	800ea6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	689b      	ldr	r3, [r3, #8]
 800ea5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	430a      	orrs	r2, r1
 800ea6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea72:	f003 0320 	and.w	r3, r3, #32
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d00a      	beq.n	800ea90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	689b      	ldr	r3, [r3, #8]
 800ea80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	430a      	orrs	r2, r1
 800ea8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d01a      	beq.n	800ead2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	685b      	ldr	r3, [r3, #4]
 800eaa2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	430a      	orrs	r2, r1
 800eab0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eab6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eaba:	d10a      	bne.n	800ead2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	685b      	ldr	r3, [r3, #4]
 800eac2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	430a      	orrs	r2, r1
 800ead0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ead6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d00a      	beq.n	800eaf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	685b      	ldr	r3, [r3, #4]
 800eae4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	430a      	orrs	r2, r1
 800eaf2:	605a      	str	r2, [r3, #4]
  }
}
 800eaf4:	bf00      	nop
 800eaf6:	370c      	adds	r7, #12
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafe:	4770      	bx	lr

0800eb00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b098      	sub	sp, #96	@ 0x60
 800eb04:	af02      	add	r7, sp, #8
 800eb06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800eb10:	f7f8 fb32 	bl	8007178 <HAL_GetTick>
 800eb14:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	f003 0308 	and.w	r3, r3, #8
 800eb20:	2b08      	cmp	r3, #8
 800eb22:	d12f      	bne.n	800eb84 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eb24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800eb28:	9300      	str	r3, [sp, #0]
 800eb2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800eb32:	6878      	ldr	r0, [r7, #4]
 800eb34:	f000 f88e 	bl	800ec54 <UART_WaitOnFlagUntilTimeout>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d022      	beq.n	800eb84 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb46:	e853 3f00 	ldrex	r3, [r3]
 800eb4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800eb4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eb52:	653b      	str	r3, [r7, #80]	@ 0x50
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	461a      	mov	r2, r3
 800eb5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eb5c:	647b      	str	r3, [r7, #68]	@ 0x44
 800eb5e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800eb62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eb64:	e841 2300 	strex	r3, r2, [r1]
 800eb68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800eb6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d1e6      	bne.n	800eb3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2220      	movs	r2, #32
 800eb74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eb80:	2303      	movs	r3, #3
 800eb82:	e063      	b.n	800ec4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	f003 0304 	and.w	r3, r3, #4
 800eb8e:	2b04      	cmp	r3, #4
 800eb90:	d149      	bne.n	800ec26 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eb92:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800eb96:	9300      	str	r3, [sp, #0]
 800eb98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800eba0:	6878      	ldr	r0, [r7, #4]
 800eba2:	f000 f857 	bl	800ec54 <UART_WaitOnFlagUntilTimeout>
 800eba6:	4603      	mov	r3, r0
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d03c      	beq.n	800ec26 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebb4:	e853 3f00 	ldrex	r3, [r3]
 800ebb8:	623b      	str	r3, [r7, #32]
   return(result);
 800ebba:	6a3b      	ldr	r3, [r7, #32]
 800ebbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ebc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	461a      	mov	r2, r3
 800ebc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ebca:	633b      	str	r3, [r7, #48]	@ 0x30
 800ebcc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ebd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ebd2:	e841 2300 	strex	r3, r2, [r1]
 800ebd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ebd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d1e6      	bne.n	800ebac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	3308      	adds	r3, #8
 800ebe4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	e853 3f00 	ldrex	r3, [r3]
 800ebec:	60fb      	str	r3, [r7, #12]
   return(result);
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	f023 0301 	bic.w	r3, r3, #1
 800ebf4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	3308      	adds	r3, #8
 800ebfc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ebfe:	61fa      	str	r2, [r7, #28]
 800ec00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec02:	69b9      	ldr	r1, [r7, #24]
 800ec04:	69fa      	ldr	r2, [r7, #28]
 800ec06:	e841 2300 	strex	r3, r2, [r1]
 800ec0a:	617b      	str	r3, [r7, #20]
   return(result);
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d1e5      	bne.n	800ebde <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	2220      	movs	r2, #32
 800ec16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ec22:	2303      	movs	r3, #3
 800ec24:	e012      	b.n	800ec4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2220      	movs	r2, #32
 800ec2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	2220      	movs	r2, #32
 800ec32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2200      	movs	r2, #0
 800ec3a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	2200      	movs	r2, #0
 800ec46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ec4a:	2300      	movs	r3, #0
}
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	3758      	adds	r7, #88	@ 0x58
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd80      	pop	{r7, pc}

0800ec54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b084      	sub	sp, #16
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	60f8      	str	r0, [r7, #12]
 800ec5c:	60b9      	str	r1, [r7, #8]
 800ec5e:	603b      	str	r3, [r7, #0]
 800ec60:	4613      	mov	r3, r2
 800ec62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ec64:	e04f      	b.n	800ed06 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ec66:	69bb      	ldr	r3, [r7, #24]
 800ec68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec6c:	d04b      	beq.n	800ed06 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ec6e:	f7f8 fa83 	bl	8007178 <HAL_GetTick>
 800ec72:	4602      	mov	r2, r0
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	1ad3      	subs	r3, r2, r3
 800ec78:	69ba      	ldr	r2, [r7, #24]
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	d302      	bcc.n	800ec84 <UART_WaitOnFlagUntilTimeout+0x30>
 800ec7e:	69bb      	ldr	r3, [r7, #24]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d101      	bne.n	800ec88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ec84:	2303      	movs	r3, #3
 800ec86:	e04e      	b.n	800ed26 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	f003 0304 	and.w	r3, r3, #4
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d037      	beq.n	800ed06 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ec96:	68bb      	ldr	r3, [r7, #8]
 800ec98:	2b80      	cmp	r3, #128	@ 0x80
 800ec9a:	d034      	beq.n	800ed06 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	2b40      	cmp	r3, #64	@ 0x40
 800eca0:	d031      	beq.n	800ed06 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	69db      	ldr	r3, [r3, #28]
 800eca8:	f003 0308 	and.w	r3, r3, #8
 800ecac:	2b08      	cmp	r3, #8
 800ecae:	d110      	bne.n	800ecd2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	2208      	movs	r2, #8
 800ecb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ecb8:	68f8      	ldr	r0, [r7, #12]
 800ecba:	f000 f838 	bl	800ed2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	2208      	movs	r2, #8
 800ecc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	2200      	movs	r2, #0
 800ecca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ecce:	2301      	movs	r3, #1
 800ecd0:	e029      	b.n	800ed26 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	69db      	ldr	r3, [r3, #28]
 800ecd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ecdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ece0:	d111      	bne.n	800ed06 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ecea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ecec:	68f8      	ldr	r0, [r7, #12]
 800ecee:	f000 f81e 	bl	800ed2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	2220      	movs	r2, #32
 800ecf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ed02:	2303      	movs	r3, #3
 800ed04:	e00f      	b.n	800ed26 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	69da      	ldr	r2, [r3, #28]
 800ed0c:	68bb      	ldr	r3, [r7, #8]
 800ed0e:	4013      	ands	r3, r2
 800ed10:	68ba      	ldr	r2, [r7, #8]
 800ed12:	429a      	cmp	r2, r3
 800ed14:	bf0c      	ite	eq
 800ed16:	2301      	moveq	r3, #1
 800ed18:	2300      	movne	r3, #0
 800ed1a:	b2db      	uxtb	r3, r3
 800ed1c:	461a      	mov	r2, r3
 800ed1e:	79fb      	ldrb	r3, [r7, #7]
 800ed20:	429a      	cmp	r2, r3
 800ed22:	d0a0      	beq.n	800ec66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ed24:	2300      	movs	r3, #0
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	3710      	adds	r7, #16
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}

0800ed2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ed2e:	b480      	push	{r7}
 800ed30:	b095      	sub	sp, #84	@ 0x54
 800ed32:	af00      	add	r7, sp, #0
 800ed34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed3e:	e853 3f00 	ldrex	r3, [r3]
 800ed42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ed44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ed4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	461a      	mov	r2, r3
 800ed52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed54:	643b      	str	r3, [r7, #64]	@ 0x40
 800ed56:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ed5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ed5c:	e841 2300 	strex	r3, r2, [r1]
 800ed60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ed62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d1e6      	bne.n	800ed36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	3308      	adds	r3, #8
 800ed6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed70:	6a3b      	ldr	r3, [r7, #32]
 800ed72:	e853 3f00 	ldrex	r3, [r3]
 800ed76:	61fb      	str	r3, [r7, #28]
   return(result);
 800ed78:	69fb      	ldr	r3, [r7, #28]
 800ed7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ed7e:	f023 0301 	bic.w	r3, r3, #1
 800ed82:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	3308      	adds	r3, #8
 800ed8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ed8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ed8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ed92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed94:	e841 2300 	strex	r3, r2, [r1]
 800ed98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ed9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d1e3      	bne.n	800ed68 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eda4:	2b01      	cmp	r3, #1
 800eda6:	d118      	bne.n	800edda <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	e853 3f00 	ldrex	r3, [r3]
 800edb4:	60bb      	str	r3, [r7, #8]
   return(result);
 800edb6:	68bb      	ldr	r3, [r7, #8]
 800edb8:	f023 0310 	bic.w	r3, r3, #16
 800edbc:	647b      	str	r3, [r7, #68]	@ 0x44
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	461a      	mov	r2, r3
 800edc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800edc6:	61bb      	str	r3, [r7, #24]
 800edc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edca:	6979      	ldr	r1, [r7, #20]
 800edcc:	69ba      	ldr	r2, [r7, #24]
 800edce:	e841 2300 	strex	r3, r2, [r1]
 800edd2:	613b      	str	r3, [r7, #16]
   return(result);
 800edd4:	693b      	ldr	r3, [r7, #16]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d1e6      	bne.n	800eda8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	2220      	movs	r2, #32
 800edde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	2200      	movs	r2, #0
 800ede6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2200      	movs	r2, #0
 800edec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800edee:	bf00      	nop
 800edf0:	3754      	adds	r7, #84	@ 0x54
 800edf2:	46bd      	mov	sp, r7
 800edf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf8:	4770      	bx	lr

0800edfa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800edfa:	b480      	push	{r7}
 800edfc:	b083      	sub	sp, #12
 800edfe:	af00      	add	r7, sp, #0
 800ee00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ee02:	bf00      	nop
 800ee04:	370c      	adds	r7, #12
 800ee06:	46bd      	mov	sp, r7
 800ee08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0c:	4770      	bx	lr

0800ee0e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ee0e:	b480      	push	{r7}
 800ee10:	b083      	sub	sp, #12
 800ee12:	af00      	add	r7, sp, #0
 800ee14:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ee16:	bf00      	nop
 800ee18:	370c      	adds	r7, #12
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee20:	4770      	bx	lr

0800ee22 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ee22:	b480      	push	{r7}
 800ee24:	b083      	sub	sp, #12
 800ee26:	af00      	add	r7, sp, #0
 800ee28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ee2a:	bf00      	nop
 800ee2c:	370c      	adds	r7, #12
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee34:	4770      	bx	lr

0800ee36 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ee36:	b480      	push	{r7}
 800ee38:	b085      	sub	sp, #20
 800ee3a:	af00      	add	r7, sp, #0
 800ee3c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ee44:	2b01      	cmp	r3, #1
 800ee46:	d101      	bne.n	800ee4c <HAL_UARTEx_DisableFifoMode+0x16>
 800ee48:	2302      	movs	r3, #2
 800ee4a:	e027      	b.n	800ee9c <HAL_UARTEx_DisableFifoMode+0x66>
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2201      	movs	r2, #1
 800ee50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	2224      	movs	r2, #36	@ 0x24
 800ee58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	681a      	ldr	r2, [r3, #0]
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	f022 0201 	bic.w	r2, r2, #1
 800ee72:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ee7a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2200      	movs	r2, #0
 800ee80:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	68fa      	ldr	r2, [r7, #12]
 800ee88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	2220      	movs	r2, #32
 800ee8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	2200      	movs	r2, #0
 800ee96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ee9a:	2300      	movs	r3, #0
}
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3714      	adds	r7, #20
 800eea0:	46bd      	mov	sp, r7
 800eea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea6:	4770      	bx	lr

0800eea8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b084      	sub	sp, #16
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
 800eeb0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800eeb8:	2b01      	cmp	r3, #1
 800eeba:	d101      	bne.n	800eec0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800eebc:	2302      	movs	r3, #2
 800eebe:	e02d      	b.n	800ef1c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2201      	movs	r2, #1
 800eec4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2224      	movs	r2, #36	@ 0x24
 800eecc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	681a      	ldr	r2, [r3, #0]
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	f022 0201 	bic.w	r2, r2, #1
 800eee6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	689b      	ldr	r3, [r3, #8]
 800eeee:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	683a      	ldr	r2, [r7, #0]
 800eef8:	430a      	orrs	r2, r1
 800eefa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f000 f84f 	bl	800efa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	68fa      	ldr	r2, [r7, #12]
 800ef08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2220      	movs	r2, #32
 800ef0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	2200      	movs	r2, #0
 800ef16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ef1a:	2300      	movs	r3, #0
}
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	3710      	adds	r7, #16
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}

0800ef24 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b084      	sub	sp, #16
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
 800ef2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ef34:	2b01      	cmp	r3, #1
 800ef36:	d101      	bne.n	800ef3c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ef38:	2302      	movs	r3, #2
 800ef3a:	e02d      	b.n	800ef98 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2201      	movs	r2, #1
 800ef40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2224      	movs	r2, #36	@ 0x24
 800ef48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	681a      	ldr	r2, [r3, #0]
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	f022 0201 	bic.w	r2, r2, #1
 800ef62:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	689b      	ldr	r3, [r3, #8]
 800ef6a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	683a      	ldr	r2, [r7, #0]
 800ef74:	430a      	orrs	r2, r1
 800ef76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ef78:	6878      	ldr	r0, [r7, #4]
 800ef7a:	f000 f811 	bl	800efa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	68fa      	ldr	r2, [r7, #12]
 800ef84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2220      	movs	r2, #32
 800ef8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2200      	movs	r2, #0
 800ef92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ef96:	2300      	movs	r3, #0
}
 800ef98:	4618      	mov	r0, r3
 800ef9a:	3710      	adds	r7, #16
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bd80      	pop	{r7, pc}

0800efa0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800efa0:	b480      	push	{r7}
 800efa2:	b085      	sub	sp, #20
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800efac:	2b00      	cmp	r3, #0
 800efae:	d108      	bne.n	800efc2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2201      	movs	r2, #1
 800efb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2201      	movs	r2, #1
 800efbc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800efc0:	e031      	b.n	800f026 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800efc2:	2308      	movs	r3, #8
 800efc4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800efc6:	2308      	movs	r3, #8
 800efc8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	689b      	ldr	r3, [r3, #8]
 800efd0:	0e5b      	lsrs	r3, r3, #25
 800efd2:	b2db      	uxtb	r3, r3
 800efd4:	f003 0307 	and.w	r3, r3, #7
 800efd8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	689b      	ldr	r3, [r3, #8]
 800efe0:	0f5b      	lsrs	r3, r3, #29
 800efe2:	b2db      	uxtb	r3, r3
 800efe4:	f003 0307 	and.w	r3, r3, #7
 800efe8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800efea:	7bbb      	ldrb	r3, [r7, #14]
 800efec:	7b3a      	ldrb	r2, [r7, #12]
 800efee:	4911      	ldr	r1, [pc, #68]	@ (800f034 <UARTEx_SetNbDataToProcess+0x94>)
 800eff0:	5c8a      	ldrb	r2, [r1, r2]
 800eff2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800eff6:	7b3a      	ldrb	r2, [r7, #12]
 800eff8:	490f      	ldr	r1, [pc, #60]	@ (800f038 <UARTEx_SetNbDataToProcess+0x98>)
 800effa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800effc:	fb93 f3f2 	sdiv	r3, r3, r2
 800f000:	b29a      	uxth	r2, r3
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f008:	7bfb      	ldrb	r3, [r7, #15]
 800f00a:	7b7a      	ldrb	r2, [r7, #13]
 800f00c:	4909      	ldr	r1, [pc, #36]	@ (800f034 <UARTEx_SetNbDataToProcess+0x94>)
 800f00e:	5c8a      	ldrb	r2, [r1, r2]
 800f010:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f014:	7b7a      	ldrb	r2, [r7, #13]
 800f016:	4908      	ldr	r1, [pc, #32]	@ (800f038 <UARTEx_SetNbDataToProcess+0x98>)
 800f018:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f01a:	fb93 f3f2 	sdiv	r3, r3, r2
 800f01e:	b29a      	uxth	r2, r3
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f026:	bf00      	nop
 800f028:	3714      	adds	r7, #20
 800f02a:	46bd      	mov	sp, r7
 800f02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f030:	4770      	bx	lr
 800f032:	bf00      	nop
 800f034:	0801c0b4 	.word	0x0801c0b4
 800f038:	0801c0bc 	.word	0x0801c0bc

0800f03c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800f03c:	b480      	push	{r7}
 800f03e:	b085      	sub	sp, #20
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2200      	movs	r2, #0
 800f048:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800f04c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800f050:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	b29a      	uxth	r2, r3
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f05c:	2300      	movs	r3, #0
}
 800f05e:	4618      	mov	r0, r3
 800f060:	3714      	adds	r7, #20
 800f062:	46bd      	mov	sp, r7
 800f064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f068:	4770      	bx	lr

0800f06a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800f06a:	b480      	push	{r7}
 800f06c:	b085      	sub	sp, #20
 800f06e:	af00      	add	r7, sp, #0
 800f070:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800f072:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800f076:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800f07e:	b29a      	uxth	r2, r3
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	b29b      	uxth	r3, r3
 800f084:	43db      	mvns	r3, r3
 800f086:	b29b      	uxth	r3, r3
 800f088:	4013      	ands	r3, r2
 800f08a:	b29a      	uxth	r2, r3
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f092:	2300      	movs	r3, #0
}
 800f094:	4618      	mov	r0, r3
 800f096:	3714      	adds	r7, #20
 800f098:	46bd      	mov	sp, r7
 800f09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09e:	4770      	bx	lr

0800f0a0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800f0a0:	b480      	push	{r7}
 800f0a2:	b085      	sub	sp, #20
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	60f8      	str	r0, [r7, #12]
 800f0a8:	1d3b      	adds	r3, r7, #4
 800f0aa:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	2201      	movs	r2, #1
 800f0b2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800f0ce:	2300      	movs	r3, #0
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	3714      	adds	r7, #20
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0da:	4770      	bx	lr

0800f0dc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f0dc:	b480      	push	{r7}
 800f0de:	b0a7      	sub	sp, #156	@ 0x9c
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800f0ec:	687a      	ldr	r2, [r7, #4]
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	781b      	ldrb	r3, [r3, #0]
 800f0f2:	009b      	lsls	r3, r3, #2
 800f0f4:	4413      	add	r3, r2
 800f0f6:	881b      	ldrh	r3, [r3, #0]
 800f0f8:	b29b      	uxth	r3, r3
 800f0fa:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800f0fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f102:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	78db      	ldrb	r3, [r3, #3]
 800f10a:	2b03      	cmp	r3, #3
 800f10c:	d81f      	bhi.n	800f14e <USB_ActivateEndpoint+0x72>
 800f10e:	a201      	add	r2, pc, #4	@ (adr r2, 800f114 <USB_ActivateEndpoint+0x38>)
 800f110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f114:	0800f125 	.word	0x0800f125
 800f118:	0800f141 	.word	0x0800f141
 800f11c:	0800f157 	.word	0x0800f157
 800f120:	0800f133 	.word	0x0800f133
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800f124:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800f128:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800f12c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800f130:	e012      	b.n	800f158 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800f132:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800f136:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800f13a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800f13e:	e00b      	b.n	800f158 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800f140:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800f144:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800f148:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800f14c:	e004      	b.n	800f158 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800f14e:	2301      	movs	r3, #1
 800f150:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800f154:	e000      	b.n	800f158 <USB_ActivateEndpoint+0x7c>
      break;
 800f156:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800f158:	687a      	ldr	r2, [r7, #4]
 800f15a:	683b      	ldr	r3, [r7, #0]
 800f15c:	781b      	ldrb	r3, [r3, #0]
 800f15e:	009b      	lsls	r3, r3, #2
 800f160:	441a      	add	r2, r3
 800f162:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800f166:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f16a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f16e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f176:	b29b      	uxth	r3, r3
 800f178:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800f17a:	687a      	ldr	r2, [r7, #4]
 800f17c:	683b      	ldr	r3, [r7, #0]
 800f17e:	781b      	ldrb	r3, [r3, #0]
 800f180:	009b      	lsls	r3, r3, #2
 800f182:	4413      	add	r3, r2
 800f184:	881b      	ldrh	r3, [r3, #0]
 800f186:	b29b      	uxth	r3, r3
 800f188:	b21b      	sxth	r3, r3
 800f18a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f18e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f192:	b21a      	sxth	r2, r3
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	781b      	ldrb	r3, [r3, #0]
 800f198:	b21b      	sxth	r3, r3
 800f19a:	4313      	orrs	r3, r2
 800f19c:	b21b      	sxth	r3, r3
 800f19e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800f1a2:	687a      	ldr	r2, [r7, #4]
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	781b      	ldrb	r3, [r3, #0]
 800f1a8:	009b      	lsls	r3, r3, #2
 800f1aa:	441a      	add	r2, r3
 800f1ac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800f1b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f1b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f1b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f1bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f1c0:	b29b      	uxth	r3, r3
 800f1c2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800f1c4:	683b      	ldr	r3, [r7, #0]
 800f1c6:	7b1b      	ldrb	r3, [r3, #12]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	f040 8180 	bne.w	800f4ce <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	785b      	ldrb	r3, [r3, #1]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	f000 8084 	beq.w	800f2e0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	61bb      	str	r3, [r7, #24]
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f1e2:	b29b      	uxth	r3, r3
 800f1e4:	461a      	mov	r2, r3
 800f1e6:	69bb      	ldr	r3, [r7, #24]
 800f1e8:	4413      	add	r3, r2
 800f1ea:	61bb      	str	r3, [r7, #24]
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	781b      	ldrb	r3, [r3, #0]
 800f1f0:	00da      	lsls	r2, r3, #3
 800f1f2:	69bb      	ldr	r3, [r7, #24]
 800f1f4:	4413      	add	r3, r2
 800f1f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f1fa:	617b      	str	r3, [r7, #20]
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	88db      	ldrh	r3, [r3, #6]
 800f200:	085b      	lsrs	r3, r3, #1
 800f202:	b29b      	uxth	r3, r3
 800f204:	005b      	lsls	r3, r3, #1
 800f206:	b29a      	uxth	r2, r3
 800f208:	697b      	ldr	r3, [r7, #20]
 800f20a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f20c:	687a      	ldr	r2, [r7, #4]
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	781b      	ldrb	r3, [r3, #0]
 800f212:	009b      	lsls	r3, r3, #2
 800f214:	4413      	add	r3, r2
 800f216:	881b      	ldrh	r3, [r3, #0]
 800f218:	827b      	strh	r3, [r7, #18]
 800f21a:	8a7b      	ldrh	r3, [r7, #18]
 800f21c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f220:	2b00      	cmp	r3, #0
 800f222:	d01b      	beq.n	800f25c <USB_ActivateEndpoint+0x180>
 800f224:	687a      	ldr	r2, [r7, #4]
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	781b      	ldrb	r3, [r3, #0]
 800f22a:	009b      	lsls	r3, r3, #2
 800f22c:	4413      	add	r3, r2
 800f22e:	881b      	ldrh	r3, [r3, #0]
 800f230:	b29b      	uxth	r3, r3
 800f232:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f23a:	823b      	strh	r3, [r7, #16]
 800f23c:	687a      	ldr	r2, [r7, #4]
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	781b      	ldrb	r3, [r3, #0]
 800f242:	009b      	lsls	r3, r3, #2
 800f244:	441a      	add	r2, r3
 800f246:	8a3b      	ldrh	r3, [r7, #16]
 800f248:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f24c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f250:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f254:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f258:	b29b      	uxth	r3, r3
 800f25a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	78db      	ldrb	r3, [r3, #3]
 800f260:	2b01      	cmp	r3, #1
 800f262:	d020      	beq.n	800f2a6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f264:	687a      	ldr	r2, [r7, #4]
 800f266:	683b      	ldr	r3, [r7, #0]
 800f268:	781b      	ldrb	r3, [r3, #0]
 800f26a:	009b      	lsls	r3, r3, #2
 800f26c:	4413      	add	r3, r2
 800f26e:	881b      	ldrh	r3, [r3, #0]
 800f270:	b29b      	uxth	r3, r3
 800f272:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f276:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f27a:	81bb      	strh	r3, [r7, #12]
 800f27c:	89bb      	ldrh	r3, [r7, #12]
 800f27e:	f083 0320 	eor.w	r3, r3, #32
 800f282:	81bb      	strh	r3, [r7, #12]
 800f284:	687a      	ldr	r2, [r7, #4]
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	781b      	ldrb	r3, [r3, #0]
 800f28a:	009b      	lsls	r3, r3, #2
 800f28c:	441a      	add	r2, r3
 800f28e:	89bb      	ldrh	r3, [r7, #12]
 800f290:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f294:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f298:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f29c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f2a0:	b29b      	uxth	r3, r3
 800f2a2:	8013      	strh	r3, [r2, #0]
 800f2a4:	e3f9      	b.n	800fa9a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f2a6:	687a      	ldr	r2, [r7, #4]
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	781b      	ldrb	r3, [r3, #0]
 800f2ac:	009b      	lsls	r3, r3, #2
 800f2ae:	4413      	add	r3, r2
 800f2b0:	881b      	ldrh	r3, [r3, #0]
 800f2b2:	b29b      	uxth	r3, r3
 800f2b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f2b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f2bc:	81fb      	strh	r3, [r7, #14]
 800f2be:	687a      	ldr	r2, [r7, #4]
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	781b      	ldrb	r3, [r3, #0]
 800f2c4:	009b      	lsls	r3, r3, #2
 800f2c6:	441a      	add	r2, r3
 800f2c8:	89fb      	ldrh	r3, [r7, #14]
 800f2ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f2ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f2d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f2d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f2da:	b29b      	uxth	r3, r3
 800f2dc:	8013      	strh	r3, [r2, #0]
 800f2de:	e3dc      	b.n	800fa9a <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	633b      	str	r3, [r7, #48]	@ 0x30
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f2ea:	b29b      	uxth	r3, r3
 800f2ec:	461a      	mov	r2, r3
 800f2ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2f0:	4413      	add	r3, r2
 800f2f2:	633b      	str	r3, [r7, #48]	@ 0x30
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	781b      	ldrb	r3, [r3, #0]
 800f2f8:	00da      	lsls	r2, r3, #3
 800f2fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2fc:	4413      	add	r3, r2
 800f2fe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800f302:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	88db      	ldrh	r3, [r3, #6]
 800f308:	085b      	lsrs	r3, r3, #1
 800f30a:	b29b      	uxth	r3, r3
 800f30c:	005b      	lsls	r3, r3, #1
 800f30e:	b29a      	uxth	r2, r3
 800f310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f312:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f31e:	b29b      	uxth	r3, r3
 800f320:	461a      	mov	r2, r3
 800f322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f324:	4413      	add	r3, r2
 800f326:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	781b      	ldrb	r3, [r3, #0]
 800f32c:	00da      	lsls	r2, r3, #3
 800f32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f330:	4413      	add	r3, r2
 800f332:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f336:	627b      	str	r3, [r7, #36]	@ 0x24
 800f338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f33a:	881b      	ldrh	r3, [r3, #0]
 800f33c:	b29b      	uxth	r3, r3
 800f33e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f342:	b29a      	uxth	r2, r3
 800f344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f346:	801a      	strh	r2, [r3, #0]
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	691b      	ldr	r3, [r3, #16]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d10a      	bne.n	800f366 <USB_ActivateEndpoint+0x28a>
 800f350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f352:	881b      	ldrh	r3, [r3, #0]
 800f354:	b29b      	uxth	r3, r3
 800f356:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f35a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f35e:	b29a      	uxth	r2, r3
 800f360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f362:	801a      	strh	r2, [r3, #0]
 800f364:	e041      	b.n	800f3ea <USB_ActivateEndpoint+0x30e>
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	691b      	ldr	r3, [r3, #16]
 800f36a:	2b3e      	cmp	r3, #62	@ 0x3e
 800f36c:	d81c      	bhi.n	800f3a8 <USB_ActivateEndpoint+0x2cc>
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	691b      	ldr	r3, [r3, #16]
 800f372:	085b      	lsrs	r3, r3, #1
 800f374:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	691b      	ldr	r3, [r3, #16]
 800f37c:	f003 0301 	and.w	r3, r3, #1
 800f380:	2b00      	cmp	r3, #0
 800f382:	d004      	beq.n	800f38e <USB_ActivateEndpoint+0x2b2>
 800f384:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f388:	3301      	adds	r3, #1
 800f38a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f38e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f390:	881b      	ldrh	r3, [r3, #0]
 800f392:	b29a      	uxth	r2, r3
 800f394:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f398:	b29b      	uxth	r3, r3
 800f39a:	029b      	lsls	r3, r3, #10
 800f39c:	b29b      	uxth	r3, r3
 800f39e:	4313      	orrs	r3, r2
 800f3a0:	b29a      	uxth	r2, r3
 800f3a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3a4:	801a      	strh	r2, [r3, #0]
 800f3a6:	e020      	b.n	800f3ea <USB_ActivateEndpoint+0x30e>
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	691b      	ldr	r3, [r3, #16]
 800f3ac:	095b      	lsrs	r3, r3, #5
 800f3ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	691b      	ldr	r3, [r3, #16]
 800f3b6:	f003 031f 	and.w	r3, r3, #31
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d104      	bne.n	800f3c8 <USB_ActivateEndpoint+0x2ec>
 800f3be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f3c2:	3b01      	subs	r3, #1
 800f3c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3ca:	881b      	ldrh	r3, [r3, #0]
 800f3cc:	b29a      	uxth	r2, r3
 800f3ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f3d2:	b29b      	uxth	r3, r3
 800f3d4:	029b      	lsls	r3, r3, #10
 800f3d6:	b29b      	uxth	r3, r3
 800f3d8:	4313      	orrs	r3, r2
 800f3da:	b29b      	uxth	r3, r3
 800f3dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f3e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f3e4:	b29a      	uxth	r2, r3
 800f3e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3e8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f3ea:	687a      	ldr	r2, [r7, #4]
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	781b      	ldrb	r3, [r3, #0]
 800f3f0:	009b      	lsls	r3, r3, #2
 800f3f2:	4413      	add	r3, r2
 800f3f4:	881b      	ldrh	r3, [r3, #0]
 800f3f6:	847b      	strh	r3, [r7, #34]	@ 0x22
 800f3f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f3fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d01b      	beq.n	800f43a <USB_ActivateEndpoint+0x35e>
 800f402:	687a      	ldr	r2, [r7, #4]
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	781b      	ldrb	r3, [r3, #0]
 800f408:	009b      	lsls	r3, r3, #2
 800f40a:	4413      	add	r3, r2
 800f40c:	881b      	ldrh	r3, [r3, #0]
 800f40e:	b29b      	uxth	r3, r3
 800f410:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f414:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f418:	843b      	strh	r3, [r7, #32]
 800f41a:	687a      	ldr	r2, [r7, #4]
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	781b      	ldrb	r3, [r3, #0]
 800f420:	009b      	lsls	r3, r3, #2
 800f422:	441a      	add	r2, r3
 800f424:	8c3b      	ldrh	r3, [r7, #32]
 800f426:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f42a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f42e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f436:	b29b      	uxth	r3, r3
 800f438:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	781b      	ldrb	r3, [r3, #0]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d124      	bne.n	800f48c <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f442:	687a      	ldr	r2, [r7, #4]
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	781b      	ldrb	r3, [r3, #0]
 800f448:	009b      	lsls	r3, r3, #2
 800f44a:	4413      	add	r3, r2
 800f44c:	881b      	ldrh	r3, [r3, #0]
 800f44e:	b29b      	uxth	r3, r3
 800f450:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f454:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f458:	83bb      	strh	r3, [r7, #28]
 800f45a:	8bbb      	ldrh	r3, [r7, #28]
 800f45c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f460:	83bb      	strh	r3, [r7, #28]
 800f462:	8bbb      	ldrh	r3, [r7, #28]
 800f464:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f468:	83bb      	strh	r3, [r7, #28]
 800f46a:	687a      	ldr	r2, [r7, #4]
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	781b      	ldrb	r3, [r3, #0]
 800f470:	009b      	lsls	r3, r3, #2
 800f472:	441a      	add	r2, r3
 800f474:	8bbb      	ldrh	r3, [r7, #28]
 800f476:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f47a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f47e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f486:	b29b      	uxth	r3, r3
 800f488:	8013      	strh	r3, [r2, #0]
 800f48a:	e306      	b.n	800fa9a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800f48c:	687a      	ldr	r2, [r7, #4]
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	781b      	ldrb	r3, [r3, #0]
 800f492:	009b      	lsls	r3, r3, #2
 800f494:	4413      	add	r3, r2
 800f496:	881b      	ldrh	r3, [r3, #0]
 800f498:	b29b      	uxth	r3, r3
 800f49a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f49e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f4a2:	83fb      	strh	r3, [r7, #30]
 800f4a4:	8bfb      	ldrh	r3, [r7, #30]
 800f4a6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f4aa:	83fb      	strh	r3, [r7, #30]
 800f4ac:	687a      	ldr	r2, [r7, #4]
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	781b      	ldrb	r3, [r3, #0]
 800f4b2:	009b      	lsls	r3, r3, #2
 800f4b4:	441a      	add	r2, r3
 800f4b6:	8bfb      	ldrh	r3, [r7, #30]
 800f4b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f4bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f4c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f4c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f4c8:	b29b      	uxth	r3, r3
 800f4ca:	8013      	strh	r3, [r2, #0]
 800f4cc:	e2e5      	b.n	800fa9a <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	78db      	ldrb	r3, [r3, #3]
 800f4d2:	2b02      	cmp	r3, #2
 800f4d4:	d11e      	bne.n	800f514 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800f4d6:	687a      	ldr	r2, [r7, #4]
 800f4d8:	683b      	ldr	r3, [r7, #0]
 800f4da:	781b      	ldrb	r3, [r3, #0]
 800f4dc:	009b      	lsls	r3, r3, #2
 800f4de:	4413      	add	r3, r2
 800f4e0:	881b      	ldrh	r3, [r3, #0]
 800f4e2:	b29b      	uxth	r3, r3
 800f4e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f4e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f4ec:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800f4f0:	687a      	ldr	r2, [r7, #4]
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	009b      	lsls	r3, r3, #2
 800f4f8:	441a      	add	r2, r3
 800f4fa:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800f4fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f502:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f506:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800f50a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f50e:	b29b      	uxth	r3, r3
 800f510:	8013      	strh	r3, [r2, #0]
 800f512:	e01d      	b.n	800f550 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800f514:	687a      	ldr	r2, [r7, #4]
 800f516:	683b      	ldr	r3, [r7, #0]
 800f518:	781b      	ldrb	r3, [r3, #0]
 800f51a:	009b      	lsls	r3, r3, #2
 800f51c:	4413      	add	r3, r2
 800f51e:	881b      	ldrh	r3, [r3, #0]
 800f520:	b29b      	uxth	r3, r3
 800f522:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800f526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f52a:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800f52e:	687a      	ldr	r2, [r7, #4]
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	781b      	ldrb	r3, [r3, #0]
 800f534:	009b      	lsls	r3, r3, #2
 800f536:	441a      	add	r2, r3
 800f538:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800f53c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f540:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f544:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f548:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f54c:	b29b      	uxth	r3, r3
 800f54e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f55a:	b29b      	uxth	r3, r3
 800f55c:	461a      	mov	r2, r3
 800f55e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f560:	4413      	add	r3, r2
 800f562:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	781b      	ldrb	r3, [r3, #0]
 800f568:	00da      	lsls	r2, r3, #3
 800f56a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f56c:	4413      	add	r3, r2
 800f56e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f572:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	891b      	ldrh	r3, [r3, #8]
 800f578:	085b      	lsrs	r3, r3, #1
 800f57a:	b29b      	uxth	r3, r3
 800f57c:	005b      	lsls	r3, r3, #1
 800f57e:	b29a      	uxth	r2, r3
 800f580:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f582:	801a      	strh	r2, [r3, #0]
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	677b      	str	r3, [r7, #116]	@ 0x74
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f58e:	b29b      	uxth	r3, r3
 800f590:	461a      	mov	r2, r3
 800f592:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f594:	4413      	add	r3, r2
 800f596:	677b      	str	r3, [r7, #116]	@ 0x74
 800f598:	683b      	ldr	r3, [r7, #0]
 800f59a:	781b      	ldrb	r3, [r3, #0]
 800f59c:	00da      	lsls	r2, r3, #3
 800f59e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f5a0:	4413      	add	r3, r2
 800f5a2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800f5a6:	673b      	str	r3, [r7, #112]	@ 0x70
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	895b      	ldrh	r3, [r3, #10]
 800f5ac:	085b      	lsrs	r3, r3, #1
 800f5ae:	b29b      	uxth	r3, r3
 800f5b0:	005b      	lsls	r3, r3, #1
 800f5b2:	b29a      	uxth	r2, r3
 800f5b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f5b6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	785b      	ldrb	r3, [r3, #1]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	f040 81af 	bne.w	800f920 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f5c2:	687a      	ldr	r2, [r7, #4]
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	781b      	ldrb	r3, [r3, #0]
 800f5c8:	009b      	lsls	r3, r3, #2
 800f5ca:	4413      	add	r3, r2
 800f5cc:	881b      	ldrh	r3, [r3, #0]
 800f5ce:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800f5d2:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800f5d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d01d      	beq.n	800f61a <USB_ActivateEndpoint+0x53e>
 800f5de:	687a      	ldr	r2, [r7, #4]
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	781b      	ldrb	r3, [r3, #0]
 800f5e4:	009b      	lsls	r3, r3, #2
 800f5e6:	4413      	add	r3, r2
 800f5e8:	881b      	ldrh	r3, [r3, #0]
 800f5ea:	b29b      	uxth	r3, r3
 800f5ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f5f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f5f4:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800f5f8:	687a      	ldr	r2, [r7, #4]
 800f5fa:	683b      	ldr	r3, [r7, #0]
 800f5fc:	781b      	ldrb	r3, [r3, #0]
 800f5fe:	009b      	lsls	r3, r3, #2
 800f600:	441a      	add	r2, r3
 800f602:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800f606:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f60a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f60e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f616:	b29b      	uxth	r3, r3
 800f618:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f61a:	687a      	ldr	r2, [r7, #4]
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	781b      	ldrb	r3, [r3, #0]
 800f620:	009b      	lsls	r3, r3, #2
 800f622:	4413      	add	r3, r2
 800f624:	881b      	ldrh	r3, [r3, #0]
 800f626:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800f62a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800f62e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f632:	2b00      	cmp	r3, #0
 800f634:	d01d      	beq.n	800f672 <USB_ActivateEndpoint+0x596>
 800f636:	687a      	ldr	r2, [r7, #4]
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	781b      	ldrb	r3, [r3, #0]
 800f63c:	009b      	lsls	r3, r3, #2
 800f63e:	4413      	add	r3, r2
 800f640:	881b      	ldrh	r3, [r3, #0]
 800f642:	b29b      	uxth	r3, r3
 800f644:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f648:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f64c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800f650:	687a      	ldr	r2, [r7, #4]
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	781b      	ldrb	r3, [r3, #0]
 800f656:	009b      	lsls	r3, r3, #2
 800f658:	441a      	add	r2, r3
 800f65a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800f65e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f662:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f666:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f66a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f66e:	b29b      	uxth	r3, r3
 800f670:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	785b      	ldrb	r3, [r3, #1]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d16b      	bne.n	800f752 <USB_ActivateEndpoint+0x676>
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f684:	b29b      	uxth	r3, r3
 800f686:	461a      	mov	r2, r3
 800f688:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f68a:	4413      	add	r3, r2
 800f68c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f68e:	683b      	ldr	r3, [r7, #0]
 800f690:	781b      	ldrb	r3, [r3, #0]
 800f692:	00da      	lsls	r2, r3, #3
 800f694:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f696:	4413      	add	r3, r2
 800f698:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f69c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f69e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f6a0:	881b      	ldrh	r3, [r3, #0]
 800f6a2:	b29b      	uxth	r3, r3
 800f6a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f6a8:	b29a      	uxth	r2, r3
 800f6aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f6ac:	801a      	strh	r2, [r3, #0]
 800f6ae:	683b      	ldr	r3, [r7, #0]
 800f6b0:	691b      	ldr	r3, [r3, #16]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d10a      	bne.n	800f6cc <USB_ActivateEndpoint+0x5f0>
 800f6b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f6b8:	881b      	ldrh	r3, [r3, #0]
 800f6ba:	b29b      	uxth	r3, r3
 800f6bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f6c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f6c4:	b29a      	uxth	r2, r3
 800f6c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f6c8:	801a      	strh	r2, [r3, #0]
 800f6ca:	e05d      	b.n	800f788 <USB_ActivateEndpoint+0x6ac>
 800f6cc:	683b      	ldr	r3, [r7, #0]
 800f6ce:	691b      	ldr	r3, [r3, #16]
 800f6d0:	2b3e      	cmp	r3, #62	@ 0x3e
 800f6d2:	d81c      	bhi.n	800f70e <USB_ActivateEndpoint+0x632>
 800f6d4:	683b      	ldr	r3, [r7, #0]
 800f6d6:	691b      	ldr	r3, [r3, #16]
 800f6d8:	085b      	lsrs	r3, r3, #1
 800f6da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f6de:	683b      	ldr	r3, [r7, #0]
 800f6e0:	691b      	ldr	r3, [r3, #16]
 800f6e2:	f003 0301 	and.w	r3, r3, #1
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d004      	beq.n	800f6f4 <USB_ActivateEndpoint+0x618>
 800f6ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f6ee:	3301      	adds	r3, #1
 800f6f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f6f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f6f6:	881b      	ldrh	r3, [r3, #0]
 800f6f8:	b29a      	uxth	r2, r3
 800f6fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f6fe:	b29b      	uxth	r3, r3
 800f700:	029b      	lsls	r3, r3, #10
 800f702:	b29b      	uxth	r3, r3
 800f704:	4313      	orrs	r3, r2
 800f706:	b29a      	uxth	r2, r3
 800f708:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f70a:	801a      	strh	r2, [r3, #0]
 800f70c:	e03c      	b.n	800f788 <USB_ActivateEndpoint+0x6ac>
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	691b      	ldr	r3, [r3, #16]
 800f712:	095b      	lsrs	r3, r3, #5
 800f714:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	691b      	ldr	r3, [r3, #16]
 800f71c:	f003 031f 	and.w	r3, r3, #31
 800f720:	2b00      	cmp	r3, #0
 800f722:	d104      	bne.n	800f72e <USB_ActivateEndpoint+0x652>
 800f724:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f728:	3b01      	subs	r3, #1
 800f72a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f72e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f730:	881b      	ldrh	r3, [r3, #0]
 800f732:	b29a      	uxth	r2, r3
 800f734:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f738:	b29b      	uxth	r3, r3
 800f73a:	029b      	lsls	r3, r3, #10
 800f73c:	b29b      	uxth	r3, r3
 800f73e:	4313      	orrs	r3, r2
 800f740:	b29b      	uxth	r3, r3
 800f742:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f746:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f74a:	b29a      	uxth	r2, r3
 800f74c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f74e:	801a      	strh	r2, [r3, #0]
 800f750:	e01a      	b.n	800f788 <USB_ActivateEndpoint+0x6ac>
 800f752:	683b      	ldr	r3, [r7, #0]
 800f754:	785b      	ldrb	r3, [r3, #1]
 800f756:	2b01      	cmp	r3, #1
 800f758:	d116      	bne.n	800f788 <USB_ActivateEndpoint+0x6ac>
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	657b      	str	r3, [r7, #84]	@ 0x54
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f764:	b29b      	uxth	r3, r3
 800f766:	461a      	mov	r2, r3
 800f768:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f76a:	4413      	add	r3, r2
 800f76c:	657b      	str	r3, [r7, #84]	@ 0x54
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	781b      	ldrb	r3, [r3, #0]
 800f772:	00da      	lsls	r2, r3, #3
 800f774:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f776:	4413      	add	r3, r2
 800f778:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f77c:	653b      	str	r3, [r7, #80]	@ 0x50
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	691b      	ldr	r3, [r3, #16]
 800f782:	b29a      	uxth	r2, r3
 800f784:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f786:	801a      	strh	r2, [r3, #0]
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	647b      	str	r3, [r7, #68]	@ 0x44
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	785b      	ldrb	r3, [r3, #1]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d16b      	bne.n	800f86c <USB_ActivateEndpoint+0x790>
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f79e:	b29b      	uxth	r3, r3
 800f7a0:	461a      	mov	r2, r3
 800f7a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7a4:	4413      	add	r3, r2
 800f7a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	781b      	ldrb	r3, [r3, #0]
 800f7ac:	00da      	lsls	r2, r3, #3
 800f7ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7b0:	4413      	add	r3, r2
 800f7b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f7b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f7b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7ba:	881b      	ldrh	r3, [r3, #0]
 800f7bc:	b29b      	uxth	r3, r3
 800f7be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f7c2:	b29a      	uxth	r2, r3
 800f7c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7c6:	801a      	strh	r2, [r3, #0]
 800f7c8:	683b      	ldr	r3, [r7, #0]
 800f7ca:	691b      	ldr	r3, [r3, #16]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d10a      	bne.n	800f7e6 <USB_ActivateEndpoint+0x70a>
 800f7d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7d2:	881b      	ldrh	r3, [r3, #0]
 800f7d4:	b29b      	uxth	r3, r3
 800f7d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f7da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f7de:	b29a      	uxth	r2, r3
 800f7e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7e2:	801a      	strh	r2, [r3, #0]
 800f7e4:	e05b      	b.n	800f89e <USB_ActivateEndpoint+0x7c2>
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	691b      	ldr	r3, [r3, #16]
 800f7ea:	2b3e      	cmp	r3, #62	@ 0x3e
 800f7ec:	d81c      	bhi.n	800f828 <USB_ActivateEndpoint+0x74c>
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	691b      	ldr	r3, [r3, #16]
 800f7f2:	085b      	lsrs	r3, r3, #1
 800f7f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	691b      	ldr	r3, [r3, #16]
 800f7fc:	f003 0301 	and.w	r3, r3, #1
 800f800:	2b00      	cmp	r3, #0
 800f802:	d004      	beq.n	800f80e <USB_ActivateEndpoint+0x732>
 800f804:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f808:	3301      	adds	r3, #1
 800f80a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f80e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f810:	881b      	ldrh	r3, [r3, #0]
 800f812:	b29a      	uxth	r2, r3
 800f814:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f818:	b29b      	uxth	r3, r3
 800f81a:	029b      	lsls	r3, r3, #10
 800f81c:	b29b      	uxth	r3, r3
 800f81e:	4313      	orrs	r3, r2
 800f820:	b29a      	uxth	r2, r3
 800f822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f824:	801a      	strh	r2, [r3, #0]
 800f826:	e03a      	b.n	800f89e <USB_ActivateEndpoint+0x7c2>
 800f828:	683b      	ldr	r3, [r7, #0]
 800f82a:	691b      	ldr	r3, [r3, #16]
 800f82c:	095b      	lsrs	r3, r3, #5
 800f82e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f832:	683b      	ldr	r3, [r7, #0]
 800f834:	691b      	ldr	r3, [r3, #16]
 800f836:	f003 031f 	and.w	r3, r3, #31
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d104      	bne.n	800f848 <USB_ActivateEndpoint+0x76c>
 800f83e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f842:	3b01      	subs	r3, #1
 800f844:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f84a:	881b      	ldrh	r3, [r3, #0]
 800f84c:	b29a      	uxth	r2, r3
 800f84e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f852:	b29b      	uxth	r3, r3
 800f854:	029b      	lsls	r3, r3, #10
 800f856:	b29b      	uxth	r3, r3
 800f858:	4313      	orrs	r3, r2
 800f85a:	b29b      	uxth	r3, r3
 800f85c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f860:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f864:	b29a      	uxth	r2, r3
 800f866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f868:	801a      	strh	r2, [r3, #0]
 800f86a:	e018      	b.n	800f89e <USB_ActivateEndpoint+0x7c2>
 800f86c:	683b      	ldr	r3, [r7, #0]
 800f86e:	785b      	ldrb	r3, [r3, #1]
 800f870:	2b01      	cmp	r3, #1
 800f872:	d114      	bne.n	800f89e <USB_ActivateEndpoint+0x7c2>
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f87a:	b29b      	uxth	r3, r3
 800f87c:	461a      	mov	r2, r3
 800f87e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f880:	4413      	add	r3, r2
 800f882:	647b      	str	r3, [r7, #68]	@ 0x44
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	781b      	ldrb	r3, [r3, #0]
 800f888:	00da      	lsls	r2, r3, #3
 800f88a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f88c:	4413      	add	r3, r2
 800f88e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f892:	643b      	str	r3, [r7, #64]	@ 0x40
 800f894:	683b      	ldr	r3, [r7, #0]
 800f896:	691b      	ldr	r3, [r3, #16]
 800f898:	b29a      	uxth	r2, r3
 800f89a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f89c:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f89e:	687a      	ldr	r2, [r7, #4]
 800f8a0:	683b      	ldr	r3, [r7, #0]
 800f8a2:	781b      	ldrb	r3, [r3, #0]
 800f8a4:	009b      	lsls	r3, r3, #2
 800f8a6:	4413      	add	r3, r2
 800f8a8:	881b      	ldrh	r3, [r3, #0]
 800f8aa:	b29b      	uxth	r3, r3
 800f8ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f8b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f8b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800f8b6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f8b8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f8bc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800f8be:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f8c0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f8c4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800f8c6:	687a      	ldr	r2, [r7, #4]
 800f8c8:	683b      	ldr	r3, [r7, #0]
 800f8ca:	781b      	ldrb	r3, [r3, #0]
 800f8cc:	009b      	lsls	r3, r3, #2
 800f8ce:	441a      	add	r2, r3
 800f8d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f8d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f8d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f8da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f8de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f8e2:	b29b      	uxth	r3, r3
 800f8e4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f8e6:	687a      	ldr	r2, [r7, #4]
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	781b      	ldrb	r3, [r3, #0]
 800f8ec:	009b      	lsls	r3, r3, #2
 800f8ee:	4413      	add	r3, r2
 800f8f0:	881b      	ldrh	r3, [r3, #0]
 800f8f2:	b29b      	uxth	r3, r3
 800f8f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f8f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f8fc:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800f8fe:	687a      	ldr	r2, [r7, #4]
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	781b      	ldrb	r3, [r3, #0]
 800f904:	009b      	lsls	r3, r3, #2
 800f906:	441a      	add	r2, r3
 800f908:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800f90a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f90e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f912:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f916:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f91a:	b29b      	uxth	r3, r3
 800f91c:	8013      	strh	r3, [r2, #0]
 800f91e:	e0bc      	b.n	800fa9a <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f920:	687a      	ldr	r2, [r7, #4]
 800f922:	683b      	ldr	r3, [r7, #0]
 800f924:	781b      	ldrb	r3, [r3, #0]
 800f926:	009b      	lsls	r3, r3, #2
 800f928:	4413      	add	r3, r2
 800f92a:	881b      	ldrh	r3, [r3, #0]
 800f92c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800f930:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800f934:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d01d      	beq.n	800f978 <USB_ActivateEndpoint+0x89c>
 800f93c:	687a      	ldr	r2, [r7, #4]
 800f93e:	683b      	ldr	r3, [r7, #0]
 800f940:	781b      	ldrb	r3, [r3, #0]
 800f942:	009b      	lsls	r3, r3, #2
 800f944:	4413      	add	r3, r2
 800f946:	881b      	ldrh	r3, [r3, #0]
 800f948:	b29b      	uxth	r3, r3
 800f94a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f94e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f952:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800f956:	687a      	ldr	r2, [r7, #4]
 800f958:	683b      	ldr	r3, [r7, #0]
 800f95a:	781b      	ldrb	r3, [r3, #0]
 800f95c:	009b      	lsls	r3, r3, #2
 800f95e:	441a      	add	r2, r3
 800f960:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800f964:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f968:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f96c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f970:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f974:	b29b      	uxth	r3, r3
 800f976:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f978:	687a      	ldr	r2, [r7, #4]
 800f97a:	683b      	ldr	r3, [r7, #0]
 800f97c:	781b      	ldrb	r3, [r3, #0]
 800f97e:	009b      	lsls	r3, r3, #2
 800f980:	4413      	add	r3, r2
 800f982:	881b      	ldrh	r3, [r3, #0]
 800f984:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800f988:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800f98c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f990:	2b00      	cmp	r3, #0
 800f992:	d01d      	beq.n	800f9d0 <USB_ActivateEndpoint+0x8f4>
 800f994:	687a      	ldr	r2, [r7, #4]
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	781b      	ldrb	r3, [r3, #0]
 800f99a:	009b      	lsls	r3, r3, #2
 800f99c:	4413      	add	r3, r2
 800f99e:	881b      	ldrh	r3, [r3, #0]
 800f9a0:	b29b      	uxth	r3, r3
 800f9a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f9a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f9aa:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800f9ae:	687a      	ldr	r2, [r7, #4]
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	781b      	ldrb	r3, [r3, #0]
 800f9b4:	009b      	lsls	r3, r3, #2
 800f9b6:	441a      	add	r2, r3
 800f9b8:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800f9bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f9c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f9c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f9c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f9cc:	b29b      	uxth	r3, r3
 800f9ce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	78db      	ldrb	r3, [r3, #3]
 800f9d4:	2b01      	cmp	r3, #1
 800f9d6:	d024      	beq.n	800fa22 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f9d8:	687a      	ldr	r2, [r7, #4]
 800f9da:	683b      	ldr	r3, [r7, #0]
 800f9dc:	781b      	ldrb	r3, [r3, #0]
 800f9de:	009b      	lsls	r3, r3, #2
 800f9e0:	4413      	add	r3, r2
 800f9e2:	881b      	ldrh	r3, [r3, #0]
 800f9e4:	b29b      	uxth	r3, r3
 800f9e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f9ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f9ee:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800f9f2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800f9f6:	f083 0320 	eor.w	r3, r3, #32
 800f9fa:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800f9fe:	687a      	ldr	r2, [r7, #4]
 800fa00:	683b      	ldr	r3, [r7, #0]
 800fa02:	781b      	ldrb	r3, [r3, #0]
 800fa04:	009b      	lsls	r3, r3, #2
 800fa06:	441a      	add	r2, r3
 800fa08:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800fa0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fa10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fa14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fa18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fa1c:	b29b      	uxth	r3, r3
 800fa1e:	8013      	strh	r3, [r2, #0]
 800fa20:	e01d      	b.n	800fa5e <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800fa22:	687a      	ldr	r2, [r7, #4]
 800fa24:	683b      	ldr	r3, [r7, #0]
 800fa26:	781b      	ldrb	r3, [r3, #0]
 800fa28:	009b      	lsls	r3, r3, #2
 800fa2a:	4413      	add	r3, r2
 800fa2c:	881b      	ldrh	r3, [r3, #0]
 800fa2e:	b29b      	uxth	r3, r3
 800fa30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fa34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fa38:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800fa3c:	687a      	ldr	r2, [r7, #4]
 800fa3e:	683b      	ldr	r3, [r7, #0]
 800fa40:	781b      	ldrb	r3, [r3, #0]
 800fa42:	009b      	lsls	r3, r3, #2
 800fa44:	441a      	add	r2, r3
 800fa46:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800fa4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fa4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fa52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fa56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fa5a:	b29b      	uxth	r3, r3
 800fa5c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800fa5e:	687a      	ldr	r2, [r7, #4]
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	781b      	ldrb	r3, [r3, #0]
 800fa64:	009b      	lsls	r3, r3, #2
 800fa66:	4413      	add	r3, r2
 800fa68:	881b      	ldrh	r3, [r3, #0]
 800fa6a:	b29b      	uxth	r3, r3
 800fa6c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fa70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fa74:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800fa78:	687a      	ldr	r2, [r7, #4]
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	781b      	ldrb	r3, [r3, #0]
 800fa7e:	009b      	lsls	r3, r3, #2
 800fa80:	441a      	add	r2, r3
 800fa82:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800fa86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fa8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fa8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fa92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fa96:	b29b      	uxth	r3, r3
 800fa98:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800fa9a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800fa9e:	4618      	mov	r0, r3
 800faa0:	379c      	adds	r7, #156	@ 0x9c
 800faa2:	46bd      	mov	sp, r7
 800faa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa8:	4770      	bx	lr
 800faaa:	bf00      	nop

0800faac <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800faac:	b480      	push	{r7}
 800faae:	b08d      	sub	sp, #52	@ 0x34
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
 800fab4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800fab6:	683b      	ldr	r3, [r7, #0]
 800fab8:	7b1b      	ldrb	r3, [r3, #12]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	f040 808e 	bne.w	800fbdc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800fac0:	683b      	ldr	r3, [r7, #0]
 800fac2:	785b      	ldrb	r3, [r3, #1]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d044      	beq.n	800fb52 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fac8:	687a      	ldr	r2, [r7, #4]
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	781b      	ldrb	r3, [r3, #0]
 800face:	009b      	lsls	r3, r3, #2
 800fad0:	4413      	add	r3, r2
 800fad2:	881b      	ldrh	r3, [r3, #0]
 800fad4:	81bb      	strh	r3, [r7, #12]
 800fad6:	89bb      	ldrh	r3, [r7, #12]
 800fad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d01b      	beq.n	800fb18 <USB_DeactivateEndpoint+0x6c>
 800fae0:	687a      	ldr	r2, [r7, #4]
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	781b      	ldrb	r3, [r3, #0]
 800fae6:	009b      	lsls	r3, r3, #2
 800fae8:	4413      	add	r3, r2
 800faea:	881b      	ldrh	r3, [r3, #0]
 800faec:	b29b      	uxth	r3, r3
 800faee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800faf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800faf6:	817b      	strh	r3, [r7, #10]
 800faf8:	687a      	ldr	r2, [r7, #4]
 800fafa:	683b      	ldr	r3, [r7, #0]
 800fafc:	781b      	ldrb	r3, [r3, #0]
 800fafe:	009b      	lsls	r3, r3, #2
 800fb00:	441a      	add	r2, r3
 800fb02:	897b      	ldrh	r3, [r7, #10]
 800fb04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fb08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fb0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fb10:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800fb14:	b29b      	uxth	r3, r3
 800fb16:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800fb18:	687a      	ldr	r2, [r7, #4]
 800fb1a:	683b      	ldr	r3, [r7, #0]
 800fb1c:	781b      	ldrb	r3, [r3, #0]
 800fb1e:	009b      	lsls	r3, r3, #2
 800fb20:	4413      	add	r3, r2
 800fb22:	881b      	ldrh	r3, [r3, #0]
 800fb24:	b29b      	uxth	r3, r3
 800fb26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fb2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fb2e:	813b      	strh	r3, [r7, #8]
 800fb30:	687a      	ldr	r2, [r7, #4]
 800fb32:	683b      	ldr	r3, [r7, #0]
 800fb34:	781b      	ldrb	r3, [r3, #0]
 800fb36:	009b      	lsls	r3, r3, #2
 800fb38:	441a      	add	r2, r3
 800fb3a:	893b      	ldrh	r3, [r7, #8]
 800fb3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fb40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fb44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fb48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fb4c:	b29b      	uxth	r3, r3
 800fb4e:	8013      	strh	r3, [r2, #0]
 800fb50:	e192      	b.n	800fe78 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fb52:	687a      	ldr	r2, [r7, #4]
 800fb54:	683b      	ldr	r3, [r7, #0]
 800fb56:	781b      	ldrb	r3, [r3, #0]
 800fb58:	009b      	lsls	r3, r3, #2
 800fb5a:	4413      	add	r3, r2
 800fb5c:	881b      	ldrh	r3, [r3, #0]
 800fb5e:	827b      	strh	r3, [r7, #18]
 800fb60:	8a7b      	ldrh	r3, [r7, #18]
 800fb62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d01b      	beq.n	800fba2 <USB_DeactivateEndpoint+0xf6>
 800fb6a:	687a      	ldr	r2, [r7, #4]
 800fb6c:	683b      	ldr	r3, [r7, #0]
 800fb6e:	781b      	ldrb	r3, [r3, #0]
 800fb70:	009b      	lsls	r3, r3, #2
 800fb72:	4413      	add	r3, r2
 800fb74:	881b      	ldrh	r3, [r3, #0]
 800fb76:	b29b      	uxth	r3, r3
 800fb78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fb7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fb80:	823b      	strh	r3, [r7, #16]
 800fb82:	687a      	ldr	r2, [r7, #4]
 800fb84:	683b      	ldr	r3, [r7, #0]
 800fb86:	781b      	ldrb	r3, [r3, #0]
 800fb88:	009b      	lsls	r3, r3, #2
 800fb8a:	441a      	add	r2, r3
 800fb8c:	8a3b      	ldrh	r3, [r7, #16]
 800fb8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fb92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fb96:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800fb9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fb9e:	b29b      	uxth	r3, r3
 800fba0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800fba2:	687a      	ldr	r2, [r7, #4]
 800fba4:	683b      	ldr	r3, [r7, #0]
 800fba6:	781b      	ldrb	r3, [r3, #0]
 800fba8:	009b      	lsls	r3, r3, #2
 800fbaa:	4413      	add	r3, r2
 800fbac:	881b      	ldrh	r3, [r3, #0]
 800fbae:	b29b      	uxth	r3, r3
 800fbb0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fbb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fbb8:	81fb      	strh	r3, [r7, #14]
 800fbba:	687a      	ldr	r2, [r7, #4]
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	781b      	ldrb	r3, [r3, #0]
 800fbc0:	009b      	lsls	r3, r3, #2
 800fbc2:	441a      	add	r2, r3
 800fbc4:	89fb      	ldrh	r3, [r7, #14]
 800fbc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fbca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fbce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fbd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fbd6:	b29b      	uxth	r3, r3
 800fbd8:	8013      	strh	r3, [r2, #0]
 800fbda:	e14d      	b.n	800fe78 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	785b      	ldrb	r3, [r3, #1]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	f040 80a5 	bne.w	800fd30 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fbe6:	687a      	ldr	r2, [r7, #4]
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	781b      	ldrb	r3, [r3, #0]
 800fbec:	009b      	lsls	r3, r3, #2
 800fbee:	4413      	add	r3, r2
 800fbf0:	881b      	ldrh	r3, [r3, #0]
 800fbf2:	843b      	strh	r3, [r7, #32]
 800fbf4:	8c3b      	ldrh	r3, [r7, #32]
 800fbf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d01b      	beq.n	800fc36 <USB_DeactivateEndpoint+0x18a>
 800fbfe:	687a      	ldr	r2, [r7, #4]
 800fc00:	683b      	ldr	r3, [r7, #0]
 800fc02:	781b      	ldrb	r3, [r3, #0]
 800fc04:	009b      	lsls	r3, r3, #2
 800fc06:	4413      	add	r3, r2
 800fc08:	881b      	ldrh	r3, [r3, #0]
 800fc0a:	b29b      	uxth	r3, r3
 800fc0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fc10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fc14:	83fb      	strh	r3, [r7, #30]
 800fc16:	687a      	ldr	r2, [r7, #4]
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	781b      	ldrb	r3, [r3, #0]
 800fc1c:	009b      	lsls	r3, r3, #2
 800fc1e:	441a      	add	r2, r3
 800fc20:	8bfb      	ldrh	r3, [r7, #30]
 800fc22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fc26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fc2a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800fc2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fc32:	b29b      	uxth	r3, r3
 800fc34:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fc36:	687a      	ldr	r2, [r7, #4]
 800fc38:	683b      	ldr	r3, [r7, #0]
 800fc3a:	781b      	ldrb	r3, [r3, #0]
 800fc3c:	009b      	lsls	r3, r3, #2
 800fc3e:	4413      	add	r3, r2
 800fc40:	881b      	ldrh	r3, [r3, #0]
 800fc42:	83bb      	strh	r3, [r7, #28]
 800fc44:	8bbb      	ldrh	r3, [r7, #28]
 800fc46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d01b      	beq.n	800fc86 <USB_DeactivateEndpoint+0x1da>
 800fc4e:	687a      	ldr	r2, [r7, #4]
 800fc50:	683b      	ldr	r3, [r7, #0]
 800fc52:	781b      	ldrb	r3, [r3, #0]
 800fc54:	009b      	lsls	r3, r3, #2
 800fc56:	4413      	add	r3, r2
 800fc58:	881b      	ldrh	r3, [r3, #0]
 800fc5a:	b29b      	uxth	r3, r3
 800fc5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fc60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fc64:	837b      	strh	r3, [r7, #26]
 800fc66:	687a      	ldr	r2, [r7, #4]
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	781b      	ldrb	r3, [r3, #0]
 800fc6c:	009b      	lsls	r3, r3, #2
 800fc6e:	441a      	add	r2, r3
 800fc70:	8b7b      	ldrh	r3, [r7, #26]
 800fc72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fc76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fc7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fc7e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800fc82:	b29b      	uxth	r3, r3
 800fc84:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800fc86:	687a      	ldr	r2, [r7, #4]
 800fc88:	683b      	ldr	r3, [r7, #0]
 800fc8a:	781b      	ldrb	r3, [r3, #0]
 800fc8c:	009b      	lsls	r3, r3, #2
 800fc8e:	4413      	add	r3, r2
 800fc90:	881b      	ldrh	r3, [r3, #0]
 800fc92:	b29b      	uxth	r3, r3
 800fc94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fc98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fc9c:	833b      	strh	r3, [r7, #24]
 800fc9e:	687a      	ldr	r2, [r7, #4]
 800fca0:	683b      	ldr	r3, [r7, #0]
 800fca2:	781b      	ldrb	r3, [r3, #0]
 800fca4:	009b      	lsls	r3, r3, #2
 800fca6:	441a      	add	r2, r3
 800fca8:	8b3b      	ldrh	r3, [r7, #24]
 800fcaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fcae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fcb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fcb6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800fcba:	b29b      	uxth	r3, r3
 800fcbc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800fcbe:	687a      	ldr	r2, [r7, #4]
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	781b      	ldrb	r3, [r3, #0]
 800fcc4:	009b      	lsls	r3, r3, #2
 800fcc6:	4413      	add	r3, r2
 800fcc8:	881b      	ldrh	r3, [r3, #0]
 800fcca:	b29b      	uxth	r3, r3
 800fccc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fcd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fcd4:	82fb      	strh	r3, [r7, #22]
 800fcd6:	687a      	ldr	r2, [r7, #4]
 800fcd8:	683b      	ldr	r3, [r7, #0]
 800fcda:	781b      	ldrb	r3, [r3, #0]
 800fcdc:	009b      	lsls	r3, r3, #2
 800fcde:	441a      	add	r2, r3
 800fce0:	8afb      	ldrh	r3, [r7, #22]
 800fce2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fce6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fcea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fcee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fcf2:	b29b      	uxth	r3, r3
 800fcf4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800fcf6:	687a      	ldr	r2, [r7, #4]
 800fcf8:	683b      	ldr	r3, [r7, #0]
 800fcfa:	781b      	ldrb	r3, [r3, #0]
 800fcfc:	009b      	lsls	r3, r3, #2
 800fcfe:	4413      	add	r3, r2
 800fd00:	881b      	ldrh	r3, [r3, #0]
 800fd02:	b29b      	uxth	r3, r3
 800fd04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fd08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fd0c:	82bb      	strh	r3, [r7, #20]
 800fd0e:	687a      	ldr	r2, [r7, #4]
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	781b      	ldrb	r3, [r3, #0]
 800fd14:	009b      	lsls	r3, r3, #2
 800fd16:	441a      	add	r2, r3
 800fd18:	8abb      	ldrh	r3, [r7, #20]
 800fd1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fd1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fd22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fd26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fd2a:	b29b      	uxth	r3, r3
 800fd2c:	8013      	strh	r3, [r2, #0]
 800fd2e:	e0a3      	b.n	800fe78 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fd30:	687a      	ldr	r2, [r7, #4]
 800fd32:	683b      	ldr	r3, [r7, #0]
 800fd34:	781b      	ldrb	r3, [r3, #0]
 800fd36:	009b      	lsls	r3, r3, #2
 800fd38:	4413      	add	r3, r2
 800fd3a:	881b      	ldrh	r3, [r3, #0]
 800fd3c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800fd3e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fd40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d01b      	beq.n	800fd80 <USB_DeactivateEndpoint+0x2d4>
 800fd48:	687a      	ldr	r2, [r7, #4]
 800fd4a:	683b      	ldr	r3, [r7, #0]
 800fd4c:	781b      	ldrb	r3, [r3, #0]
 800fd4e:	009b      	lsls	r3, r3, #2
 800fd50:	4413      	add	r3, r2
 800fd52:	881b      	ldrh	r3, [r3, #0]
 800fd54:	b29b      	uxth	r3, r3
 800fd56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fd5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fd5e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800fd60:	687a      	ldr	r2, [r7, #4]
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	781b      	ldrb	r3, [r3, #0]
 800fd66:	009b      	lsls	r3, r3, #2
 800fd68:	441a      	add	r2, r3
 800fd6a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800fd6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fd70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fd74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800fd78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fd7c:	b29b      	uxth	r3, r3
 800fd7e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fd80:	687a      	ldr	r2, [r7, #4]
 800fd82:	683b      	ldr	r3, [r7, #0]
 800fd84:	781b      	ldrb	r3, [r3, #0]
 800fd86:	009b      	lsls	r3, r3, #2
 800fd88:	4413      	add	r3, r2
 800fd8a:	881b      	ldrh	r3, [r3, #0]
 800fd8c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800fd8e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fd90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d01b      	beq.n	800fdd0 <USB_DeactivateEndpoint+0x324>
 800fd98:	687a      	ldr	r2, [r7, #4]
 800fd9a:	683b      	ldr	r3, [r7, #0]
 800fd9c:	781b      	ldrb	r3, [r3, #0]
 800fd9e:	009b      	lsls	r3, r3, #2
 800fda0:	4413      	add	r3, r2
 800fda2:	881b      	ldrh	r3, [r3, #0]
 800fda4:	b29b      	uxth	r3, r3
 800fda6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fdaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fdae:	853b      	strh	r3, [r7, #40]	@ 0x28
 800fdb0:	687a      	ldr	r2, [r7, #4]
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	781b      	ldrb	r3, [r3, #0]
 800fdb6:	009b      	lsls	r3, r3, #2
 800fdb8:	441a      	add	r2, r3
 800fdba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fdbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fdc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fdc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fdc8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800fdcc:	b29b      	uxth	r3, r3
 800fdce:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800fdd0:	687a      	ldr	r2, [r7, #4]
 800fdd2:	683b      	ldr	r3, [r7, #0]
 800fdd4:	781b      	ldrb	r3, [r3, #0]
 800fdd6:	009b      	lsls	r3, r3, #2
 800fdd8:	4413      	add	r3, r2
 800fdda:	881b      	ldrh	r3, [r3, #0]
 800fddc:	b29b      	uxth	r3, r3
 800fdde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fde2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fde6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800fde8:	687a      	ldr	r2, [r7, #4]
 800fdea:	683b      	ldr	r3, [r7, #0]
 800fdec:	781b      	ldrb	r3, [r3, #0]
 800fdee:	009b      	lsls	r3, r3, #2
 800fdf0:	441a      	add	r2, r3
 800fdf2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fdf4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fdf8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fdfc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800fe00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe04:	b29b      	uxth	r3, r3
 800fe06:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800fe08:	687a      	ldr	r2, [r7, #4]
 800fe0a:	683b      	ldr	r3, [r7, #0]
 800fe0c:	781b      	ldrb	r3, [r3, #0]
 800fe0e:	009b      	lsls	r3, r3, #2
 800fe10:	4413      	add	r3, r2
 800fe12:	881b      	ldrh	r3, [r3, #0]
 800fe14:	b29b      	uxth	r3, r3
 800fe16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fe1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fe1e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800fe20:	687a      	ldr	r2, [r7, #4]
 800fe22:	683b      	ldr	r3, [r7, #0]
 800fe24:	781b      	ldrb	r3, [r3, #0]
 800fe26:	009b      	lsls	r3, r3, #2
 800fe28:	441a      	add	r2, r3
 800fe2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fe2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fe30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fe34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fe38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe3c:	b29b      	uxth	r3, r3
 800fe3e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800fe40:	687a      	ldr	r2, [r7, #4]
 800fe42:	683b      	ldr	r3, [r7, #0]
 800fe44:	781b      	ldrb	r3, [r3, #0]
 800fe46:	009b      	lsls	r3, r3, #2
 800fe48:	4413      	add	r3, r2
 800fe4a:	881b      	ldrh	r3, [r3, #0]
 800fe4c:	b29b      	uxth	r3, r3
 800fe4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fe52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fe56:	847b      	strh	r3, [r7, #34]	@ 0x22
 800fe58:	687a      	ldr	r2, [r7, #4]
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	781b      	ldrb	r3, [r3, #0]
 800fe5e:	009b      	lsls	r3, r3, #2
 800fe60:	441a      	add	r2, r3
 800fe62:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fe64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fe68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fe6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fe70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe74:	b29b      	uxth	r3, r3
 800fe76:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800fe78:	2300      	movs	r3, #0
}
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	3734      	adds	r7, #52	@ 0x34
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe84:	4770      	bx	lr

0800fe86 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800fe86:	b580      	push	{r7, lr}
 800fe88:	b0ac      	sub	sp, #176	@ 0xb0
 800fe8a:	af00      	add	r7, sp, #0
 800fe8c:	6078      	str	r0, [r7, #4]
 800fe8e:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	785b      	ldrb	r3, [r3, #1]
 800fe94:	2b01      	cmp	r3, #1
 800fe96:	f040 84ca 	bne.w	801082e <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800fe9a:	683b      	ldr	r3, [r7, #0]
 800fe9c:	699a      	ldr	r2, [r3, #24]
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	691b      	ldr	r3, [r3, #16]
 800fea2:	429a      	cmp	r2, r3
 800fea4:	d904      	bls.n	800feb0 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	691b      	ldr	r3, [r3, #16]
 800feaa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800feae:	e003      	b.n	800feb8 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800feb0:	683b      	ldr	r3, [r7, #0]
 800feb2:	699b      	ldr	r3, [r3, #24]
 800feb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800feb8:	683b      	ldr	r3, [r7, #0]
 800feba:	7b1b      	ldrb	r3, [r3, #12]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d122      	bne.n	800ff06 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800fec0:	683b      	ldr	r3, [r7, #0]
 800fec2:	6959      	ldr	r1, [r3, #20]
 800fec4:	683b      	ldr	r3, [r7, #0]
 800fec6:	88da      	ldrh	r2, [r3, #6]
 800fec8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fecc:	b29b      	uxth	r3, r3
 800fece:	6878      	ldr	r0, [r7, #4]
 800fed0:	f000 febd 	bl	8010c4e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	613b      	str	r3, [r7, #16]
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fede:	b29b      	uxth	r3, r3
 800fee0:	461a      	mov	r2, r3
 800fee2:	693b      	ldr	r3, [r7, #16]
 800fee4:	4413      	add	r3, r2
 800fee6:	613b      	str	r3, [r7, #16]
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	781b      	ldrb	r3, [r3, #0]
 800feec:	00da      	lsls	r2, r3, #3
 800feee:	693b      	ldr	r3, [r7, #16]
 800fef0:	4413      	add	r3, r2
 800fef2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800fef6:	60fb      	str	r3, [r7, #12]
 800fef8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fefc:	b29a      	uxth	r2, r3
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	801a      	strh	r2, [r3, #0]
 800ff02:	f000 bc6f 	b.w	80107e4 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	78db      	ldrb	r3, [r3, #3]
 800ff0a:	2b02      	cmp	r3, #2
 800ff0c:	f040 831e 	bne.w	801054c <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	6a1a      	ldr	r2, [r3, #32]
 800ff14:	683b      	ldr	r3, [r7, #0]
 800ff16:	691b      	ldr	r3, [r3, #16]
 800ff18:	429a      	cmp	r2, r3
 800ff1a:	f240 82cf 	bls.w	80104bc <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ff1e:	687a      	ldr	r2, [r7, #4]
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	781b      	ldrb	r3, [r3, #0]
 800ff24:	009b      	lsls	r3, r3, #2
 800ff26:	4413      	add	r3, r2
 800ff28:	881b      	ldrh	r3, [r3, #0]
 800ff2a:	b29b      	uxth	r3, r3
 800ff2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ff30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ff34:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800ff38:	687a      	ldr	r2, [r7, #4]
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	781b      	ldrb	r3, [r3, #0]
 800ff3e:	009b      	lsls	r3, r3, #2
 800ff40:	441a      	add	r2, r3
 800ff42:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ff46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ff4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ff4e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ff52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ff56:	b29b      	uxth	r3, r3
 800ff58:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	6a1a      	ldr	r2, [r3, #32]
 800ff5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ff62:	1ad2      	subs	r2, r2, r3
 800ff64:	683b      	ldr	r3, [r7, #0]
 800ff66:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ff68:	687a      	ldr	r2, [r7, #4]
 800ff6a:	683b      	ldr	r3, [r7, #0]
 800ff6c:	781b      	ldrb	r3, [r3, #0]
 800ff6e:	009b      	lsls	r3, r3, #2
 800ff70:	4413      	add	r3, r2
 800ff72:	881b      	ldrh	r3, [r3, #0]
 800ff74:	b29b      	uxth	r3, r3
 800ff76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	f000 814f 	beq.w	801021e <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	633b      	str	r3, [r7, #48]	@ 0x30
 800ff84:	683b      	ldr	r3, [r7, #0]
 800ff86:	785b      	ldrb	r3, [r3, #1]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d16b      	bne.n	8010064 <USB_EPStartXfer+0x1de>
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ff96:	b29b      	uxth	r3, r3
 800ff98:	461a      	mov	r2, r3
 800ff9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff9c:	4413      	add	r3, r2
 800ff9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	781b      	ldrb	r3, [r3, #0]
 800ffa4:	00da      	lsls	r2, r3, #3
 800ffa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffa8:	4413      	add	r3, r2
 800ffaa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ffae:	627b      	str	r3, [r7, #36]	@ 0x24
 800ffb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffb2:	881b      	ldrh	r3, [r3, #0]
 800ffb4:	b29b      	uxth	r3, r3
 800ffb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ffba:	b29a      	uxth	r2, r3
 800ffbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffbe:	801a      	strh	r2, [r3, #0]
 800ffc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d10a      	bne.n	800ffde <USB_EPStartXfer+0x158>
 800ffc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffca:	881b      	ldrh	r3, [r3, #0]
 800ffcc:	b29b      	uxth	r3, r3
 800ffce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ffd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ffd6:	b29a      	uxth	r2, r3
 800ffd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffda:	801a      	strh	r2, [r3, #0]
 800ffdc:	e05b      	b.n	8010096 <USB_EPStartXfer+0x210>
 800ffde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ffe2:	2b3e      	cmp	r3, #62	@ 0x3e
 800ffe4:	d81c      	bhi.n	8010020 <USB_EPStartXfer+0x19a>
 800ffe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ffea:	085b      	lsrs	r3, r3, #1
 800ffec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800fff0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fff4:	f003 0301 	and.w	r3, r3, #1
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d004      	beq.n	8010006 <USB_EPStartXfer+0x180>
 800fffc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010000:	3301      	adds	r3, #1
 8010002:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010008:	881b      	ldrh	r3, [r3, #0]
 801000a:	b29a      	uxth	r2, r3
 801000c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010010:	b29b      	uxth	r3, r3
 8010012:	029b      	lsls	r3, r3, #10
 8010014:	b29b      	uxth	r3, r3
 8010016:	4313      	orrs	r3, r2
 8010018:	b29a      	uxth	r2, r3
 801001a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801001c:	801a      	strh	r2, [r3, #0]
 801001e:	e03a      	b.n	8010096 <USB_EPStartXfer+0x210>
 8010020:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010024:	095b      	lsrs	r3, r3, #5
 8010026:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801002a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801002e:	f003 031f 	and.w	r3, r3, #31
 8010032:	2b00      	cmp	r3, #0
 8010034:	d104      	bne.n	8010040 <USB_EPStartXfer+0x1ba>
 8010036:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801003a:	3b01      	subs	r3, #1
 801003c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010042:	881b      	ldrh	r3, [r3, #0]
 8010044:	b29a      	uxth	r2, r3
 8010046:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801004a:	b29b      	uxth	r3, r3
 801004c:	029b      	lsls	r3, r3, #10
 801004e:	b29b      	uxth	r3, r3
 8010050:	4313      	orrs	r3, r2
 8010052:	b29b      	uxth	r3, r3
 8010054:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010058:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801005c:	b29a      	uxth	r2, r3
 801005e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010060:	801a      	strh	r2, [r3, #0]
 8010062:	e018      	b.n	8010096 <USB_EPStartXfer+0x210>
 8010064:	683b      	ldr	r3, [r7, #0]
 8010066:	785b      	ldrb	r3, [r3, #1]
 8010068:	2b01      	cmp	r3, #1
 801006a:	d114      	bne.n	8010096 <USB_EPStartXfer+0x210>
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010072:	b29b      	uxth	r3, r3
 8010074:	461a      	mov	r2, r3
 8010076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010078:	4413      	add	r3, r2
 801007a:	633b      	str	r3, [r7, #48]	@ 0x30
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	781b      	ldrb	r3, [r3, #0]
 8010080:	00da      	lsls	r2, r3, #3
 8010082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010084:	4413      	add	r3, r2
 8010086:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801008a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801008c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010090:	b29a      	uxth	r2, r3
 8010092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010094:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8010096:	683b      	ldr	r3, [r7, #0]
 8010098:	895b      	ldrh	r3, [r3, #10]
 801009a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	6959      	ldr	r1, [r3, #20]
 80100a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80100a6:	b29b      	uxth	r3, r3
 80100a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80100ac:	6878      	ldr	r0, [r7, #4]
 80100ae:	f000 fdce 	bl	8010c4e <USB_WritePMA>
            ep->xfer_buff += len;
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	695a      	ldr	r2, [r3, #20]
 80100b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80100ba:	441a      	add	r2, r3
 80100bc:	683b      	ldr	r3, [r7, #0]
 80100be:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80100c0:	683b      	ldr	r3, [r7, #0]
 80100c2:	6a1a      	ldr	r2, [r3, #32]
 80100c4:	683b      	ldr	r3, [r7, #0]
 80100c6:	691b      	ldr	r3, [r3, #16]
 80100c8:	429a      	cmp	r2, r3
 80100ca:	d907      	bls.n	80100dc <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	6a1a      	ldr	r2, [r3, #32]
 80100d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80100d4:	1ad2      	subs	r2, r2, r3
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	621a      	str	r2, [r3, #32]
 80100da:	e006      	b.n	80100ea <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 80100dc:	683b      	ldr	r3, [r7, #0]
 80100de:	6a1b      	ldr	r3, [r3, #32]
 80100e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80100e4:	683b      	ldr	r3, [r7, #0]
 80100e6:	2200      	movs	r2, #0
 80100e8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	785b      	ldrb	r3, [r3, #1]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d16b      	bne.n	80101ca <USB_EPStartXfer+0x344>
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	61bb      	str	r3, [r7, #24]
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80100fc:	b29b      	uxth	r3, r3
 80100fe:	461a      	mov	r2, r3
 8010100:	69bb      	ldr	r3, [r7, #24]
 8010102:	4413      	add	r3, r2
 8010104:	61bb      	str	r3, [r7, #24]
 8010106:	683b      	ldr	r3, [r7, #0]
 8010108:	781b      	ldrb	r3, [r3, #0]
 801010a:	00da      	lsls	r2, r3, #3
 801010c:	69bb      	ldr	r3, [r7, #24]
 801010e:	4413      	add	r3, r2
 8010110:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010114:	617b      	str	r3, [r7, #20]
 8010116:	697b      	ldr	r3, [r7, #20]
 8010118:	881b      	ldrh	r3, [r3, #0]
 801011a:	b29b      	uxth	r3, r3
 801011c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010120:	b29a      	uxth	r2, r3
 8010122:	697b      	ldr	r3, [r7, #20]
 8010124:	801a      	strh	r2, [r3, #0]
 8010126:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801012a:	2b00      	cmp	r3, #0
 801012c:	d10a      	bne.n	8010144 <USB_EPStartXfer+0x2be>
 801012e:	697b      	ldr	r3, [r7, #20]
 8010130:	881b      	ldrh	r3, [r3, #0]
 8010132:	b29b      	uxth	r3, r3
 8010134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801013c:	b29a      	uxth	r2, r3
 801013e:	697b      	ldr	r3, [r7, #20]
 8010140:	801a      	strh	r2, [r3, #0]
 8010142:	e05d      	b.n	8010200 <USB_EPStartXfer+0x37a>
 8010144:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010148:	2b3e      	cmp	r3, #62	@ 0x3e
 801014a:	d81c      	bhi.n	8010186 <USB_EPStartXfer+0x300>
 801014c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010150:	085b      	lsrs	r3, r3, #1
 8010152:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8010156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801015a:	f003 0301 	and.w	r3, r3, #1
 801015e:	2b00      	cmp	r3, #0
 8010160:	d004      	beq.n	801016c <USB_EPStartXfer+0x2e6>
 8010162:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010166:	3301      	adds	r3, #1
 8010168:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801016c:	697b      	ldr	r3, [r7, #20]
 801016e:	881b      	ldrh	r3, [r3, #0]
 8010170:	b29a      	uxth	r2, r3
 8010172:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010176:	b29b      	uxth	r3, r3
 8010178:	029b      	lsls	r3, r3, #10
 801017a:	b29b      	uxth	r3, r3
 801017c:	4313      	orrs	r3, r2
 801017e:	b29a      	uxth	r2, r3
 8010180:	697b      	ldr	r3, [r7, #20]
 8010182:	801a      	strh	r2, [r3, #0]
 8010184:	e03c      	b.n	8010200 <USB_EPStartXfer+0x37a>
 8010186:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801018a:	095b      	lsrs	r3, r3, #5
 801018c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8010190:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010194:	f003 031f 	and.w	r3, r3, #31
 8010198:	2b00      	cmp	r3, #0
 801019a:	d104      	bne.n	80101a6 <USB_EPStartXfer+0x320>
 801019c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80101a0:	3b01      	subs	r3, #1
 80101a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80101a6:	697b      	ldr	r3, [r7, #20]
 80101a8:	881b      	ldrh	r3, [r3, #0]
 80101aa:	b29a      	uxth	r2, r3
 80101ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80101b0:	b29b      	uxth	r3, r3
 80101b2:	029b      	lsls	r3, r3, #10
 80101b4:	b29b      	uxth	r3, r3
 80101b6:	4313      	orrs	r3, r2
 80101b8:	b29b      	uxth	r3, r3
 80101ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80101be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80101c2:	b29a      	uxth	r2, r3
 80101c4:	697b      	ldr	r3, [r7, #20]
 80101c6:	801a      	strh	r2, [r3, #0]
 80101c8:	e01a      	b.n	8010200 <USB_EPStartXfer+0x37a>
 80101ca:	683b      	ldr	r3, [r7, #0]
 80101cc:	785b      	ldrb	r3, [r3, #1]
 80101ce:	2b01      	cmp	r3, #1
 80101d0:	d116      	bne.n	8010200 <USB_EPStartXfer+0x37a>
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	623b      	str	r3, [r7, #32]
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80101dc:	b29b      	uxth	r3, r3
 80101de:	461a      	mov	r2, r3
 80101e0:	6a3b      	ldr	r3, [r7, #32]
 80101e2:	4413      	add	r3, r2
 80101e4:	623b      	str	r3, [r7, #32]
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	781b      	ldrb	r3, [r3, #0]
 80101ea:	00da      	lsls	r2, r3, #3
 80101ec:	6a3b      	ldr	r3, [r7, #32]
 80101ee:	4413      	add	r3, r2
 80101f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80101f4:	61fb      	str	r3, [r7, #28]
 80101f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80101fa:	b29a      	uxth	r2, r3
 80101fc:	69fb      	ldr	r3, [r7, #28]
 80101fe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8010200:	683b      	ldr	r3, [r7, #0]
 8010202:	891b      	ldrh	r3, [r3, #8]
 8010204:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	6959      	ldr	r1, [r3, #20]
 801020c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010210:	b29b      	uxth	r3, r3
 8010212:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8010216:	6878      	ldr	r0, [r7, #4]
 8010218:	f000 fd19 	bl	8010c4e <USB_WritePMA>
 801021c:	e2e2      	b.n	80107e4 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801021e:	683b      	ldr	r3, [r7, #0]
 8010220:	785b      	ldrb	r3, [r3, #1]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d16b      	bne.n	80102fe <USB_EPStartXfer+0x478>
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	64bb      	str	r3, [r7, #72]	@ 0x48
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010230:	b29b      	uxth	r3, r3
 8010232:	461a      	mov	r2, r3
 8010234:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010236:	4413      	add	r3, r2
 8010238:	64bb      	str	r3, [r7, #72]	@ 0x48
 801023a:	683b      	ldr	r3, [r7, #0]
 801023c:	781b      	ldrb	r3, [r3, #0]
 801023e:	00da      	lsls	r2, r3, #3
 8010240:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010242:	4413      	add	r3, r2
 8010244:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010248:	647b      	str	r3, [r7, #68]	@ 0x44
 801024a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801024c:	881b      	ldrh	r3, [r3, #0]
 801024e:	b29b      	uxth	r3, r3
 8010250:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010254:	b29a      	uxth	r2, r3
 8010256:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010258:	801a      	strh	r2, [r3, #0]
 801025a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801025e:	2b00      	cmp	r3, #0
 8010260:	d10a      	bne.n	8010278 <USB_EPStartXfer+0x3f2>
 8010262:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010264:	881b      	ldrh	r3, [r3, #0]
 8010266:	b29b      	uxth	r3, r3
 8010268:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801026c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010270:	b29a      	uxth	r2, r3
 8010272:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010274:	801a      	strh	r2, [r3, #0]
 8010276:	e05d      	b.n	8010334 <USB_EPStartXfer+0x4ae>
 8010278:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801027c:	2b3e      	cmp	r3, #62	@ 0x3e
 801027e:	d81c      	bhi.n	80102ba <USB_EPStartXfer+0x434>
 8010280:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010284:	085b      	lsrs	r3, r3, #1
 8010286:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801028a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801028e:	f003 0301 	and.w	r3, r3, #1
 8010292:	2b00      	cmp	r3, #0
 8010294:	d004      	beq.n	80102a0 <USB_EPStartXfer+0x41a>
 8010296:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801029a:	3301      	adds	r3, #1
 801029c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80102a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80102a2:	881b      	ldrh	r3, [r3, #0]
 80102a4:	b29a      	uxth	r2, r3
 80102a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80102aa:	b29b      	uxth	r3, r3
 80102ac:	029b      	lsls	r3, r3, #10
 80102ae:	b29b      	uxth	r3, r3
 80102b0:	4313      	orrs	r3, r2
 80102b2:	b29a      	uxth	r2, r3
 80102b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80102b6:	801a      	strh	r2, [r3, #0]
 80102b8:	e03c      	b.n	8010334 <USB_EPStartXfer+0x4ae>
 80102ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80102be:	095b      	lsrs	r3, r3, #5
 80102c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80102c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80102c8:	f003 031f 	and.w	r3, r3, #31
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d104      	bne.n	80102da <USB_EPStartXfer+0x454>
 80102d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80102d4:	3b01      	subs	r3, #1
 80102d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80102da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80102dc:	881b      	ldrh	r3, [r3, #0]
 80102de:	b29a      	uxth	r2, r3
 80102e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80102e4:	b29b      	uxth	r3, r3
 80102e6:	029b      	lsls	r3, r3, #10
 80102e8:	b29b      	uxth	r3, r3
 80102ea:	4313      	orrs	r3, r2
 80102ec:	b29b      	uxth	r3, r3
 80102ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80102f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80102f6:	b29a      	uxth	r2, r3
 80102f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80102fa:	801a      	strh	r2, [r3, #0]
 80102fc:	e01a      	b.n	8010334 <USB_EPStartXfer+0x4ae>
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	785b      	ldrb	r3, [r3, #1]
 8010302:	2b01      	cmp	r3, #1
 8010304:	d116      	bne.n	8010334 <USB_EPStartXfer+0x4ae>
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	653b      	str	r3, [r7, #80]	@ 0x50
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010310:	b29b      	uxth	r3, r3
 8010312:	461a      	mov	r2, r3
 8010314:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010316:	4413      	add	r3, r2
 8010318:	653b      	str	r3, [r7, #80]	@ 0x50
 801031a:	683b      	ldr	r3, [r7, #0]
 801031c:	781b      	ldrb	r3, [r3, #0]
 801031e:	00da      	lsls	r2, r3, #3
 8010320:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010322:	4413      	add	r3, r2
 8010324:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010328:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801032a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801032e:	b29a      	uxth	r2, r3
 8010330:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010332:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8010334:	683b      	ldr	r3, [r7, #0]
 8010336:	891b      	ldrh	r3, [r3, #8]
 8010338:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801033c:	683b      	ldr	r3, [r7, #0]
 801033e:	6959      	ldr	r1, [r3, #20]
 8010340:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010344:	b29b      	uxth	r3, r3
 8010346:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801034a:	6878      	ldr	r0, [r7, #4]
 801034c:	f000 fc7f 	bl	8010c4e <USB_WritePMA>
            ep->xfer_buff += len;
 8010350:	683b      	ldr	r3, [r7, #0]
 8010352:	695a      	ldr	r2, [r3, #20]
 8010354:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010358:	441a      	add	r2, r3
 801035a:	683b      	ldr	r3, [r7, #0]
 801035c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801035e:	683b      	ldr	r3, [r7, #0]
 8010360:	6a1a      	ldr	r2, [r3, #32]
 8010362:	683b      	ldr	r3, [r7, #0]
 8010364:	691b      	ldr	r3, [r3, #16]
 8010366:	429a      	cmp	r2, r3
 8010368:	d907      	bls.n	801037a <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	6a1a      	ldr	r2, [r3, #32]
 801036e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010372:	1ad2      	subs	r2, r2, r3
 8010374:	683b      	ldr	r3, [r7, #0]
 8010376:	621a      	str	r2, [r3, #32]
 8010378:	e006      	b.n	8010388 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 801037a:	683b      	ldr	r3, [r7, #0]
 801037c:	6a1b      	ldr	r3, [r3, #32]
 801037e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8010382:	683b      	ldr	r3, [r7, #0]
 8010384:	2200      	movs	r2, #0
 8010386:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	643b      	str	r3, [r7, #64]	@ 0x40
 801038c:	683b      	ldr	r3, [r7, #0]
 801038e:	785b      	ldrb	r3, [r3, #1]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d16b      	bne.n	801046c <USB_EPStartXfer+0x5e6>
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801039e:	b29b      	uxth	r3, r3
 80103a0:	461a      	mov	r2, r3
 80103a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103a4:	4413      	add	r3, r2
 80103a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80103a8:	683b      	ldr	r3, [r7, #0]
 80103aa:	781b      	ldrb	r3, [r3, #0]
 80103ac:	00da      	lsls	r2, r3, #3
 80103ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103b0:	4413      	add	r3, r2
 80103b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80103b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80103b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103ba:	881b      	ldrh	r3, [r3, #0]
 80103bc:	b29b      	uxth	r3, r3
 80103be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80103c2:	b29a      	uxth	r2, r3
 80103c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103c6:	801a      	strh	r2, [r3, #0]
 80103c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d10a      	bne.n	80103e6 <USB_EPStartXfer+0x560>
 80103d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103d2:	881b      	ldrh	r3, [r3, #0]
 80103d4:	b29b      	uxth	r3, r3
 80103d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80103da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80103de:	b29a      	uxth	r2, r3
 80103e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103e2:	801a      	strh	r2, [r3, #0]
 80103e4:	e05b      	b.n	801049e <USB_EPStartXfer+0x618>
 80103e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80103ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80103ec:	d81c      	bhi.n	8010428 <USB_EPStartXfer+0x5a2>
 80103ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80103f2:	085b      	lsrs	r3, r3, #1
 80103f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80103f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80103fc:	f003 0301 	and.w	r3, r3, #1
 8010400:	2b00      	cmp	r3, #0
 8010402:	d004      	beq.n	801040e <USB_EPStartXfer+0x588>
 8010404:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010408:	3301      	adds	r3, #1
 801040a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801040e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010410:	881b      	ldrh	r3, [r3, #0]
 8010412:	b29a      	uxth	r2, r3
 8010414:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010418:	b29b      	uxth	r3, r3
 801041a:	029b      	lsls	r3, r3, #10
 801041c:	b29b      	uxth	r3, r3
 801041e:	4313      	orrs	r3, r2
 8010420:	b29a      	uxth	r2, r3
 8010422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010424:	801a      	strh	r2, [r3, #0]
 8010426:	e03a      	b.n	801049e <USB_EPStartXfer+0x618>
 8010428:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801042c:	095b      	lsrs	r3, r3, #5
 801042e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010436:	f003 031f 	and.w	r3, r3, #31
 801043a:	2b00      	cmp	r3, #0
 801043c:	d104      	bne.n	8010448 <USB_EPStartXfer+0x5c2>
 801043e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010442:	3b01      	subs	r3, #1
 8010444:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801044a:	881b      	ldrh	r3, [r3, #0]
 801044c:	b29a      	uxth	r2, r3
 801044e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010452:	b29b      	uxth	r3, r3
 8010454:	029b      	lsls	r3, r3, #10
 8010456:	b29b      	uxth	r3, r3
 8010458:	4313      	orrs	r3, r2
 801045a:	b29b      	uxth	r3, r3
 801045c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010460:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010464:	b29a      	uxth	r2, r3
 8010466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010468:	801a      	strh	r2, [r3, #0]
 801046a:	e018      	b.n	801049e <USB_EPStartXfer+0x618>
 801046c:	683b      	ldr	r3, [r7, #0]
 801046e:	785b      	ldrb	r3, [r3, #1]
 8010470:	2b01      	cmp	r3, #1
 8010472:	d114      	bne.n	801049e <USB_EPStartXfer+0x618>
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801047a:	b29b      	uxth	r3, r3
 801047c:	461a      	mov	r2, r3
 801047e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010480:	4413      	add	r3, r2
 8010482:	643b      	str	r3, [r7, #64]	@ 0x40
 8010484:	683b      	ldr	r3, [r7, #0]
 8010486:	781b      	ldrb	r3, [r3, #0]
 8010488:	00da      	lsls	r2, r3, #3
 801048a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801048c:	4413      	add	r3, r2
 801048e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010492:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010494:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010498:	b29a      	uxth	r2, r3
 801049a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801049c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801049e:	683b      	ldr	r3, [r7, #0]
 80104a0:	895b      	ldrh	r3, [r3, #10]
 80104a2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80104a6:	683b      	ldr	r3, [r7, #0]
 80104a8:	6959      	ldr	r1, [r3, #20]
 80104aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80104ae:	b29b      	uxth	r3, r3
 80104b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80104b4:	6878      	ldr	r0, [r7, #4]
 80104b6:	f000 fbca 	bl	8010c4e <USB_WritePMA>
 80104ba:	e193      	b.n	80107e4 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80104bc:	683b      	ldr	r3, [r7, #0]
 80104be:	6a1b      	ldr	r3, [r3, #32]
 80104c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80104c4:	687a      	ldr	r2, [r7, #4]
 80104c6:	683b      	ldr	r3, [r7, #0]
 80104c8:	781b      	ldrb	r3, [r3, #0]
 80104ca:	009b      	lsls	r3, r3, #2
 80104cc:	4413      	add	r3, r2
 80104ce:	881b      	ldrh	r3, [r3, #0]
 80104d0:	b29b      	uxth	r3, r3
 80104d2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80104d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80104da:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80104de:	687a      	ldr	r2, [r7, #4]
 80104e0:	683b      	ldr	r3, [r7, #0]
 80104e2:	781b      	ldrb	r3, [r3, #0]
 80104e4:	009b      	lsls	r3, r3, #2
 80104e6:	441a      	add	r2, r3
 80104e8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80104ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80104f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80104f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80104f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80104fc:	b29b      	uxth	r3, r3
 80104fe:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801050a:	b29b      	uxth	r3, r3
 801050c:	461a      	mov	r2, r3
 801050e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010510:	4413      	add	r3, r2
 8010512:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010514:	683b      	ldr	r3, [r7, #0]
 8010516:	781b      	ldrb	r3, [r3, #0]
 8010518:	00da      	lsls	r2, r3, #3
 801051a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801051c:	4413      	add	r3, r2
 801051e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010522:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010524:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010528:	b29a      	uxth	r2, r3
 801052a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801052c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801052e:	683b      	ldr	r3, [r7, #0]
 8010530:	891b      	ldrh	r3, [r3, #8]
 8010532:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010536:	683b      	ldr	r3, [r7, #0]
 8010538:	6959      	ldr	r1, [r3, #20]
 801053a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801053e:	b29b      	uxth	r3, r3
 8010540:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8010544:	6878      	ldr	r0, [r7, #4]
 8010546:	f000 fb82 	bl	8010c4e <USB_WritePMA>
 801054a:	e14b      	b.n	80107e4 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801054c:	683b      	ldr	r3, [r7, #0]
 801054e:	6a1a      	ldr	r2, [r3, #32]
 8010550:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010554:	1ad2      	subs	r2, r2, r3
 8010556:	683b      	ldr	r3, [r7, #0]
 8010558:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801055a:	687a      	ldr	r2, [r7, #4]
 801055c:	683b      	ldr	r3, [r7, #0]
 801055e:	781b      	ldrb	r3, [r3, #0]
 8010560:	009b      	lsls	r3, r3, #2
 8010562:	4413      	add	r3, r2
 8010564:	881b      	ldrh	r3, [r3, #0]
 8010566:	b29b      	uxth	r3, r3
 8010568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801056c:	2b00      	cmp	r3, #0
 801056e:	f000 809a 	beq.w	80106a6 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	673b      	str	r3, [r7, #112]	@ 0x70
 8010576:	683b      	ldr	r3, [r7, #0]
 8010578:	785b      	ldrb	r3, [r3, #1]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d16b      	bne.n	8010656 <USB_EPStartXfer+0x7d0>
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010588:	b29b      	uxth	r3, r3
 801058a:	461a      	mov	r2, r3
 801058c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801058e:	4413      	add	r3, r2
 8010590:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010592:	683b      	ldr	r3, [r7, #0]
 8010594:	781b      	ldrb	r3, [r3, #0]
 8010596:	00da      	lsls	r2, r3, #3
 8010598:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801059a:	4413      	add	r3, r2
 801059c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80105a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80105a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80105a4:	881b      	ldrh	r3, [r3, #0]
 80105a6:	b29b      	uxth	r3, r3
 80105a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80105ac:	b29a      	uxth	r2, r3
 80105ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80105b0:	801a      	strh	r2, [r3, #0]
 80105b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d10a      	bne.n	80105d0 <USB_EPStartXfer+0x74a>
 80105ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80105bc:	881b      	ldrh	r3, [r3, #0]
 80105be:	b29b      	uxth	r3, r3
 80105c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80105c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80105c8:	b29a      	uxth	r2, r3
 80105ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80105cc:	801a      	strh	r2, [r3, #0]
 80105ce:	e05b      	b.n	8010688 <USB_EPStartXfer+0x802>
 80105d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80105d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80105d6:	d81c      	bhi.n	8010612 <USB_EPStartXfer+0x78c>
 80105d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80105dc:	085b      	lsrs	r3, r3, #1
 80105de:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80105e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80105e6:	f003 0301 	and.w	r3, r3, #1
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d004      	beq.n	80105f8 <USB_EPStartXfer+0x772>
 80105ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80105f2:	3301      	adds	r3, #1
 80105f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80105f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80105fa:	881b      	ldrh	r3, [r3, #0]
 80105fc:	b29a      	uxth	r2, r3
 80105fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010602:	b29b      	uxth	r3, r3
 8010604:	029b      	lsls	r3, r3, #10
 8010606:	b29b      	uxth	r3, r3
 8010608:	4313      	orrs	r3, r2
 801060a:	b29a      	uxth	r2, r3
 801060c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801060e:	801a      	strh	r2, [r3, #0]
 8010610:	e03a      	b.n	8010688 <USB_EPStartXfer+0x802>
 8010612:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010616:	095b      	lsrs	r3, r3, #5
 8010618:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801061c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010620:	f003 031f 	and.w	r3, r3, #31
 8010624:	2b00      	cmp	r3, #0
 8010626:	d104      	bne.n	8010632 <USB_EPStartXfer+0x7ac>
 8010628:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801062c:	3b01      	subs	r3, #1
 801062e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8010632:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010634:	881b      	ldrh	r3, [r3, #0]
 8010636:	b29a      	uxth	r2, r3
 8010638:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801063c:	b29b      	uxth	r3, r3
 801063e:	029b      	lsls	r3, r3, #10
 8010640:	b29b      	uxth	r3, r3
 8010642:	4313      	orrs	r3, r2
 8010644:	b29b      	uxth	r3, r3
 8010646:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801064a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801064e:	b29a      	uxth	r2, r3
 8010650:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010652:	801a      	strh	r2, [r3, #0]
 8010654:	e018      	b.n	8010688 <USB_EPStartXfer+0x802>
 8010656:	683b      	ldr	r3, [r7, #0]
 8010658:	785b      	ldrb	r3, [r3, #1]
 801065a:	2b01      	cmp	r3, #1
 801065c:	d114      	bne.n	8010688 <USB_EPStartXfer+0x802>
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010664:	b29b      	uxth	r3, r3
 8010666:	461a      	mov	r2, r3
 8010668:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801066a:	4413      	add	r3, r2
 801066c:	673b      	str	r3, [r7, #112]	@ 0x70
 801066e:	683b      	ldr	r3, [r7, #0]
 8010670:	781b      	ldrb	r3, [r3, #0]
 8010672:	00da      	lsls	r2, r3, #3
 8010674:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010676:	4413      	add	r3, r2
 8010678:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801067c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801067e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010682:	b29a      	uxth	r2, r3
 8010684:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010686:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8010688:	683b      	ldr	r3, [r7, #0]
 801068a:	895b      	ldrh	r3, [r3, #10]
 801068c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010690:	683b      	ldr	r3, [r7, #0]
 8010692:	6959      	ldr	r1, [r3, #20]
 8010694:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010698:	b29b      	uxth	r3, r3
 801069a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801069e:	6878      	ldr	r0, [r7, #4]
 80106a0:	f000 fad5 	bl	8010c4e <USB_WritePMA>
 80106a4:	e09e      	b.n	80107e4 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	785b      	ldrb	r3, [r3, #1]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d16b      	bne.n	8010786 <USB_EPStartXfer+0x900>
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80106b8:	b29b      	uxth	r3, r3
 80106ba:	461a      	mov	r2, r3
 80106bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80106be:	4413      	add	r3, r2
 80106c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80106c2:	683b      	ldr	r3, [r7, #0]
 80106c4:	781b      	ldrb	r3, [r3, #0]
 80106c6:	00da      	lsls	r2, r3, #3
 80106c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80106ca:	4413      	add	r3, r2
 80106cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80106d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80106d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80106d4:	881b      	ldrh	r3, [r3, #0]
 80106d6:	b29b      	uxth	r3, r3
 80106d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80106dc:	b29a      	uxth	r2, r3
 80106de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80106e0:	801a      	strh	r2, [r3, #0]
 80106e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d10a      	bne.n	8010700 <USB_EPStartXfer+0x87a>
 80106ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80106ec:	881b      	ldrh	r3, [r3, #0]
 80106ee:	b29b      	uxth	r3, r3
 80106f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80106f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80106f8:	b29a      	uxth	r2, r3
 80106fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80106fc:	801a      	strh	r2, [r3, #0]
 80106fe:	e063      	b.n	80107c8 <USB_EPStartXfer+0x942>
 8010700:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010704:	2b3e      	cmp	r3, #62	@ 0x3e
 8010706:	d81c      	bhi.n	8010742 <USB_EPStartXfer+0x8bc>
 8010708:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801070c:	085b      	lsrs	r3, r3, #1
 801070e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010712:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010716:	f003 0301 	and.w	r3, r3, #1
 801071a:	2b00      	cmp	r3, #0
 801071c:	d004      	beq.n	8010728 <USB_EPStartXfer+0x8a2>
 801071e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8010722:	3301      	adds	r3, #1
 8010724:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010728:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801072a:	881b      	ldrh	r3, [r3, #0]
 801072c:	b29a      	uxth	r2, r3
 801072e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8010732:	b29b      	uxth	r3, r3
 8010734:	029b      	lsls	r3, r3, #10
 8010736:	b29b      	uxth	r3, r3
 8010738:	4313      	orrs	r3, r2
 801073a:	b29a      	uxth	r2, r3
 801073c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801073e:	801a      	strh	r2, [r3, #0]
 8010740:	e042      	b.n	80107c8 <USB_EPStartXfer+0x942>
 8010742:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010746:	095b      	lsrs	r3, r3, #5
 8010748:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801074c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010750:	f003 031f 	and.w	r3, r3, #31
 8010754:	2b00      	cmp	r3, #0
 8010756:	d104      	bne.n	8010762 <USB_EPStartXfer+0x8dc>
 8010758:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801075c:	3b01      	subs	r3, #1
 801075e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010762:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010764:	881b      	ldrh	r3, [r3, #0]
 8010766:	b29a      	uxth	r2, r3
 8010768:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801076c:	b29b      	uxth	r3, r3
 801076e:	029b      	lsls	r3, r3, #10
 8010770:	b29b      	uxth	r3, r3
 8010772:	4313      	orrs	r3, r2
 8010774:	b29b      	uxth	r3, r3
 8010776:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801077a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801077e:	b29a      	uxth	r2, r3
 8010780:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010782:	801a      	strh	r2, [r3, #0]
 8010784:	e020      	b.n	80107c8 <USB_EPStartXfer+0x942>
 8010786:	683b      	ldr	r3, [r7, #0]
 8010788:	785b      	ldrb	r3, [r3, #1]
 801078a:	2b01      	cmp	r3, #1
 801078c:	d11c      	bne.n	80107c8 <USB_EPStartXfer+0x942>
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801079a:	b29b      	uxth	r3, r3
 801079c:	461a      	mov	r2, r3
 801079e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80107a2:	4413      	add	r3, r2
 80107a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80107a8:	683b      	ldr	r3, [r7, #0]
 80107aa:	781b      	ldrb	r3, [r3, #0]
 80107ac:	00da      	lsls	r2, r3, #3
 80107ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80107b2:	4413      	add	r3, r2
 80107b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80107b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80107bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80107c0:	b29a      	uxth	r2, r3
 80107c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80107c6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80107c8:	683b      	ldr	r3, [r7, #0]
 80107ca:	891b      	ldrh	r3, [r3, #8]
 80107cc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80107d0:	683b      	ldr	r3, [r7, #0]
 80107d2:	6959      	ldr	r1, [r3, #20]
 80107d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80107d8:	b29b      	uxth	r3, r3
 80107da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80107de:	6878      	ldr	r0, [r7, #4]
 80107e0:	f000 fa35 	bl	8010c4e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80107e4:	687a      	ldr	r2, [r7, #4]
 80107e6:	683b      	ldr	r3, [r7, #0]
 80107e8:	781b      	ldrb	r3, [r3, #0]
 80107ea:	009b      	lsls	r3, r3, #2
 80107ec:	4413      	add	r3, r2
 80107ee:	881b      	ldrh	r3, [r3, #0]
 80107f0:	b29b      	uxth	r3, r3
 80107f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80107f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80107fa:	817b      	strh	r3, [r7, #10]
 80107fc:	897b      	ldrh	r3, [r7, #10]
 80107fe:	f083 0310 	eor.w	r3, r3, #16
 8010802:	817b      	strh	r3, [r7, #10]
 8010804:	897b      	ldrh	r3, [r7, #10]
 8010806:	f083 0320 	eor.w	r3, r3, #32
 801080a:	817b      	strh	r3, [r7, #10]
 801080c:	687a      	ldr	r2, [r7, #4]
 801080e:	683b      	ldr	r3, [r7, #0]
 8010810:	781b      	ldrb	r3, [r3, #0]
 8010812:	009b      	lsls	r3, r3, #2
 8010814:	441a      	add	r2, r3
 8010816:	897b      	ldrh	r3, [r7, #10]
 8010818:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801081c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010820:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010828:	b29b      	uxth	r3, r3
 801082a:	8013      	strh	r3, [r2, #0]
 801082c:	e0d5      	b.n	80109da <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801082e:	683b      	ldr	r3, [r7, #0]
 8010830:	7b1b      	ldrb	r3, [r3, #12]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d156      	bne.n	80108e4 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8010836:	683b      	ldr	r3, [r7, #0]
 8010838:	699b      	ldr	r3, [r3, #24]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d122      	bne.n	8010884 <USB_EPStartXfer+0x9fe>
 801083e:	683b      	ldr	r3, [r7, #0]
 8010840:	78db      	ldrb	r3, [r3, #3]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d11e      	bne.n	8010884 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8010846:	687a      	ldr	r2, [r7, #4]
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	781b      	ldrb	r3, [r3, #0]
 801084c:	009b      	lsls	r3, r3, #2
 801084e:	4413      	add	r3, r2
 8010850:	881b      	ldrh	r3, [r3, #0]
 8010852:	b29b      	uxth	r3, r3
 8010854:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010858:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801085c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8010860:	687a      	ldr	r2, [r7, #4]
 8010862:	683b      	ldr	r3, [r7, #0]
 8010864:	781b      	ldrb	r3, [r3, #0]
 8010866:	009b      	lsls	r3, r3, #2
 8010868:	441a      	add	r2, r3
 801086a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 801086e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010872:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010876:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 801087a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801087e:	b29b      	uxth	r3, r3
 8010880:	8013      	strh	r3, [r2, #0]
 8010882:	e01d      	b.n	80108c0 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8010884:	687a      	ldr	r2, [r7, #4]
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	781b      	ldrb	r3, [r3, #0]
 801088a:	009b      	lsls	r3, r3, #2
 801088c:	4413      	add	r3, r2
 801088e:	881b      	ldrh	r3, [r3, #0]
 8010890:	b29b      	uxth	r3, r3
 8010892:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8010896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801089a:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 801089e:	687a      	ldr	r2, [r7, #4]
 80108a0:	683b      	ldr	r3, [r7, #0]
 80108a2:	781b      	ldrb	r3, [r3, #0]
 80108a4:	009b      	lsls	r3, r3, #2
 80108a6:	441a      	add	r2, r3
 80108a8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80108ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80108b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80108b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80108b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80108bc:	b29b      	uxth	r3, r3
 80108be:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80108c0:	683b      	ldr	r3, [r7, #0]
 80108c2:	699a      	ldr	r2, [r3, #24]
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	691b      	ldr	r3, [r3, #16]
 80108c8:	429a      	cmp	r2, r3
 80108ca:	d907      	bls.n	80108dc <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 80108cc:	683b      	ldr	r3, [r7, #0]
 80108ce:	699a      	ldr	r2, [r3, #24]
 80108d0:	683b      	ldr	r3, [r7, #0]
 80108d2:	691b      	ldr	r3, [r3, #16]
 80108d4:	1ad2      	subs	r2, r2, r3
 80108d6:	683b      	ldr	r3, [r7, #0]
 80108d8:	619a      	str	r2, [r3, #24]
 80108da:	e054      	b.n	8010986 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 80108dc:	683b      	ldr	r3, [r7, #0]
 80108de:	2200      	movs	r2, #0
 80108e0:	619a      	str	r2, [r3, #24]
 80108e2:	e050      	b.n	8010986 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80108e4:	683b      	ldr	r3, [r7, #0]
 80108e6:	78db      	ldrb	r3, [r3, #3]
 80108e8:	2b02      	cmp	r3, #2
 80108ea:	d142      	bne.n	8010972 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80108ec:	683b      	ldr	r3, [r7, #0]
 80108ee:	69db      	ldr	r3, [r3, #28]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d048      	beq.n	8010986 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80108f4:	687a      	ldr	r2, [r7, #4]
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	781b      	ldrb	r3, [r3, #0]
 80108fa:	009b      	lsls	r3, r3, #2
 80108fc:	4413      	add	r3, r2
 80108fe:	881b      	ldrh	r3, [r3, #0]
 8010900:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8010904:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8010908:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801090c:	2b00      	cmp	r3, #0
 801090e:	d005      	beq.n	801091c <USB_EPStartXfer+0xa96>
 8010910:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8010914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010918:	2b00      	cmp	r3, #0
 801091a:	d10b      	bne.n	8010934 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801091c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8010920:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8010924:	2b00      	cmp	r3, #0
 8010926:	d12e      	bne.n	8010986 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8010928:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 801092c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010930:	2b00      	cmp	r3, #0
 8010932:	d128      	bne.n	8010986 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8010934:	687a      	ldr	r2, [r7, #4]
 8010936:	683b      	ldr	r3, [r7, #0]
 8010938:	781b      	ldrb	r3, [r3, #0]
 801093a:	009b      	lsls	r3, r3, #2
 801093c:	4413      	add	r3, r2
 801093e:	881b      	ldrh	r3, [r3, #0]
 8010940:	b29b      	uxth	r3, r3
 8010942:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010946:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801094a:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 801094e:	687a      	ldr	r2, [r7, #4]
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	781b      	ldrb	r3, [r3, #0]
 8010954:	009b      	lsls	r3, r3, #2
 8010956:	441a      	add	r2, r3
 8010958:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 801095c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010960:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010964:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010968:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 801096c:	b29b      	uxth	r3, r3
 801096e:	8013      	strh	r3, [r2, #0]
 8010970:	e009      	b.n	8010986 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8010972:	683b      	ldr	r3, [r7, #0]
 8010974:	78db      	ldrb	r3, [r3, #3]
 8010976:	2b01      	cmp	r3, #1
 8010978:	d103      	bne.n	8010982 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	2200      	movs	r2, #0
 801097e:	619a      	str	r2, [r3, #24]
 8010980:	e001      	b.n	8010986 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8010982:	2301      	movs	r3, #1
 8010984:	e02a      	b.n	80109dc <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010986:	687a      	ldr	r2, [r7, #4]
 8010988:	683b      	ldr	r3, [r7, #0]
 801098a:	781b      	ldrb	r3, [r3, #0]
 801098c:	009b      	lsls	r3, r3, #2
 801098e:	4413      	add	r3, r2
 8010990:	881b      	ldrh	r3, [r3, #0]
 8010992:	b29b      	uxth	r3, r3
 8010994:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010998:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801099c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80109a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80109a4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80109a8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80109ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80109b0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80109b4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80109b8:	687a      	ldr	r2, [r7, #4]
 80109ba:	683b      	ldr	r3, [r7, #0]
 80109bc:	781b      	ldrb	r3, [r3, #0]
 80109be:	009b      	lsls	r3, r3, #2
 80109c0:	441a      	add	r2, r3
 80109c2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80109c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80109ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80109ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80109d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80109d6:	b29b      	uxth	r3, r3
 80109d8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80109da:	2300      	movs	r3, #0
}
 80109dc:	4618      	mov	r0, r3
 80109de:	37b0      	adds	r7, #176	@ 0xb0
 80109e0:	46bd      	mov	sp, r7
 80109e2:	bd80      	pop	{r7, pc}

080109e4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80109e4:	b480      	push	{r7}
 80109e6:	b085      	sub	sp, #20
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
 80109ec:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	785b      	ldrb	r3, [r3, #1]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d020      	beq.n	8010a38 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80109f6:	687a      	ldr	r2, [r7, #4]
 80109f8:	683b      	ldr	r3, [r7, #0]
 80109fa:	781b      	ldrb	r3, [r3, #0]
 80109fc:	009b      	lsls	r3, r3, #2
 80109fe:	4413      	add	r3, r2
 8010a00:	881b      	ldrh	r3, [r3, #0]
 8010a02:	b29b      	uxth	r3, r3
 8010a04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010a08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010a0c:	81bb      	strh	r3, [r7, #12]
 8010a0e:	89bb      	ldrh	r3, [r7, #12]
 8010a10:	f083 0310 	eor.w	r3, r3, #16
 8010a14:	81bb      	strh	r3, [r7, #12]
 8010a16:	687a      	ldr	r2, [r7, #4]
 8010a18:	683b      	ldr	r3, [r7, #0]
 8010a1a:	781b      	ldrb	r3, [r3, #0]
 8010a1c:	009b      	lsls	r3, r3, #2
 8010a1e:	441a      	add	r2, r3
 8010a20:	89bb      	ldrh	r3, [r7, #12]
 8010a22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010a26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010a2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010a2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a32:	b29b      	uxth	r3, r3
 8010a34:	8013      	strh	r3, [r2, #0]
 8010a36:	e01f      	b.n	8010a78 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8010a38:	687a      	ldr	r2, [r7, #4]
 8010a3a:	683b      	ldr	r3, [r7, #0]
 8010a3c:	781b      	ldrb	r3, [r3, #0]
 8010a3e:	009b      	lsls	r3, r3, #2
 8010a40:	4413      	add	r3, r2
 8010a42:	881b      	ldrh	r3, [r3, #0]
 8010a44:	b29b      	uxth	r3, r3
 8010a46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010a4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010a4e:	81fb      	strh	r3, [r7, #14]
 8010a50:	89fb      	ldrh	r3, [r7, #14]
 8010a52:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8010a56:	81fb      	strh	r3, [r7, #14]
 8010a58:	687a      	ldr	r2, [r7, #4]
 8010a5a:	683b      	ldr	r3, [r7, #0]
 8010a5c:	781b      	ldrb	r3, [r3, #0]
 8010a5e:	009b      	lsls	r3, r3, #2
 8010a60:	441a      	add	r2, r3
 8010a62:	89fb      	ldrh	r3, [r7, #14]
 8010a64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010a68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010a6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010a70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a74:	b29b      	uxth	r3, r3
 8010a76:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8010a78:	2300      	movs	r3, #0
}
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	3714      	adds	r7, #20
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a84:	4770      	bx	lr

08010a86 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010a86:	b480      	push	{r7}
 8010a88:	b087      	sub	sp, #28
 8010a8a:	af00      	add	r7, sp, #0
 8010a8c:	6078      	str	r0, [r7, #4]
 8010a8e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8010a90:	683b      	ldr	r3, [r7, #0]
 8010a92:	785b      	ldrb	r3, [r3, #1]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d04c      	beq.n	8010b32 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010a98:	687a      	ldr	r2, [r7, #4]
 8010a9a:	683b      	ldr	r3, [r7, #0]
 8010a9c:	781b      	ldrb	r3, [r3, #0]
 8010a9e:	009b      	lsls	r3, r3, #2
 8010aa0:	4413      	add	r3, r2
 8010aa2:	881b      	ldrh	r3, [r3, #0]
 8010aa4:	823b      	strh	r3, [r7, #16]
 8010aa6:	8a3b      	ldrh	r3, [r7, #16]
 8010aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d01b      	beq.n	8010ae8 <USB_EPClearStall+0x62>
 8010ab0:	687a      	ldr	r2, [r7, #4]
 8010ab2:	683b      	ldr	r3, [r7, #0]
 8010ab4:	781b      	ldrb	r3, [r3, #0]
 8010ab6:	009b      	lsls	r3, r3, #2
 8010ab8:	4413      	add	r3, r2
 8010aba:	881b      	ldrh	r3, [r3, #0]
 8010abc:	b29b      	uxth	r3, r3
 8010abe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010ac6:	81fb      	strh	r3, [r7, #14]
 8010ac8:	687a      	ldr	r2, [r7, #4]
 8010aca:	683b      	ldr	r3, [r7, #0]
 8010acc:	781b      	ldrb	r3, [r3, #0]
 8010ace:	009b      	lsls	r3, r3, #2
 8010ad0:	441a      	add	r2, r3
 8010ad2:	89fb      	ldrh	r3, [r7, #14]
 8010ad4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010ad8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010adc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010ae0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8010ae4:	b29b      	uxth	r3, r3
 8010ae6:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8010ae8:	683b      	ldr	r3, [r7, #0]
 8010aea:	78db      	ldrb	r3, [r3, #3]
 8010aec:	2b01      	cmp	r3, #1
 8010aee:	d06c      	beq.n	8010bca <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010af0:	687a      	ldr	r2, [r7, #4]
 8010af2:	683b      	ldr	r3, [r7, #0]
 8010af4:	781b      	ldrb	r3, [r3, #0]
 8010af6:	009b      	lsls	r3, r3, #2
 8010af8:	4413      	add	r3, r2
 8010afa:	881b      	ldrh	r3, [r3, #0]
 8010afc:	b29b      	uxth	r3, r3
 8010afe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010b02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010b06:	81bb      	strh	r3, [r7, #12]
 8010b08:	89bb      	ldrh	r3, [r7, #12]
 8010b0a:	f083 0320 	eor.w	r3, r3, #32
 8010b0e:	81bb      	strh	r3, [r7, #12]
 8010b10:	687a      	ldr	r2, [r7, #4]
 8010b12:	683b      	ldr	r3, [r7, #0]
 8010b14:	781b      	ldrb	r3, [r3, #0]
 8010b16:	009b      	lsls	r3, r3, #2
 8010b18:	441a      	add	r2, r3
 8010b1a:	89bb      	ldrh	r3, [r7, #12]
 8010b1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010b20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010b24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010b28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010b2c:	b29b      	uxth	r3, r3
 8010b2e:	8013      	strh	r3, [r2, #0]
 8010b30:	e04b      	b.n	8010bca <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010b32:	687a      	ldr	r2, [r7, #4]
 8010b34:	683b      	ldr	r3, [r7, #0]
 8010b36:	781b      	ldrb	r3, [r3, #0]
 8010b38:	009b      	lsls	r3, r3, #2
 8010b3a:	4413      	add	r3, r2
 8010b3c:	881b      	ldrh	r3, [r3, #0]
 8010b3e:	82fb      	strh	r3, [r7, #22]
 8010b40:	8afb      	ldrh	r3, [r7, #22]
 8010b42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d01b      	beq.n	8010b82 <USB_EPClearStall+0xfc>
 8010b4a:	687a      	ldr	r2, [r7, #4]
 8010b4c:	683b      	ldr	r3, [r7, #0]
 8010b4e:	781b      	ldrb	r3, [r3, #0]
 8010b50:	009b      	lsls	r3, r3, #2
 8010b52:	4413      	add	r3, r2
 8010b54:	881b      	ldrh	r3, [r3, #0]
 8010b56:	b29b      	uxth	r3, r3
 8010b58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010b5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010b60:	82bb      	strh	r3, [r7, #20]
 8010b62:	687a      	ldr	r2, [r7, #4]
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	781b      	ldrb	r3, [r3, #0]
 8010b68:	009b      	lsls	r3, r3, #2
 8010b6a:	441a      	add	r2, r3
 8010b6c:	8abb      	ldrh	r3, [r7, #20]
 8010b6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010b72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010b76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010b7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010b7e:	b29b      	uxth	r3, r3
 8010b80:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010b82:	687a      	ldr	r2, [r7, #4]
 8010b84:	683b      	ldr	r3, [r7, #0]
 8010b86:	781b      	ldrb	r3, [r3, #0]
 8010b88:	009b      	lsls	r3, r3, #2
 8010b8a:	4413      	add	r3, r2
 8010b8c:	881b      	ldrh	r3, [r3, #0]
 8010b8e:	b29b      	uxth	r3, r3
 8010b90:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010b94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010b98:	827b      	strh	r3, [r7, #18]
 8010b9a:	8a7b      	ldrh	r3, [r7, #18]
 8010b9c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8010ba0:	827b      	strh	r3, [r7, #18]
 8010ba2:	8a7b      	ldrh	r3, [r7, #18]
 8010ba4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8010ba8:	827b      	strh	r3, [r7, #18]
 8010baa:	687a      	ldr	r2, [r7, #4]
 8010bac:	683b      	ldr	r3, [r7, #0]
 8010bae:	781b      	ldrb	r3, [r3, #0]
 8010bb0:	009b      	lsls	r3, r3, #2
 8010bb2:	441a      	add	r2, r3
 8010bb4:	8a7b      	ldrh	r3, [r7, #18]
 8010bb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010bba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010bbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010bc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010bc6:	b29b      	uxth	r3, r3
 8010bc8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8010bca:	2300      	movs	r3, #0
}
 8010bcc:	4618      	mov	r0, r3
 8010bce:	371c      	adds	r7, #28
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd6:	4770      	bx	lr

08010bd8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8010bd8:	b480      	push	{r7}
 8010bda:	b083      	sub	sp, #12
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
 8010be0:	460b      	mov	r3, r1
 8010be2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8010be4:	78fb      	ldrb	r3, [r7, #3]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d103      	bne.n	8010bf2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	2280      	movs	r2, #128	@ 0x80
 8010bee:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8010bf2:	2300      	movs	r3, #0
}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	370c      	adds	r7, #12
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfe:	4770      	bx	lr

08010c00 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8010c00:	b480      	push	{r7}
 8010c02:	b083      	sub	sp, #12
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8010c0e:	b29b      	uxth	r3, r3
 8010c10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010c14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010c18:	b29a      	uxth	r2, r3
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8010c20:	2300      	movs	r3, #0
}
 8010c22:	4618      	mov	r0, r3
 8010c24:	370c      	adds	r7, #12
 8010c26:	46bd      	mov	sp, r7
 8010c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c2c:	4770      	bx	lr

08010c2e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8010c2e:	b480      	push	{r7}
 8010c30:	b085      	sub	sp, #20
 8010c32:	af00      	add	r7, sp, #0
 8010c34:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8010c3c:	b29b      	uxth	r3, r3
 8010c3e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8010c40:	68fb      	ldr	r3, [r7, #12]
}
 8010c42:	4618      	mov	r0, r3
 8010c44:	3714      	adds	r7, #20
 8010c46:	46bd      	mov	sp, r7
 8010c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4c:	4770      	bx	lr

08010c4e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8010c4e:	b480      	push	{r7}
 8010c50:	b08b      	sub	sp, #44	@ 0x2c
 8010c52:	af00      	add	r7, sp, #0
 8010c54:	60f8      	str	r0, [r7, #12]
 8010c56:	60b9      	str	r1, [r7, #8]
 8010c58:	4611      	mov	r1, r2
 8010c5a:	461a      	mov	r2, r3
 8010c5c:	460b      	mov	r3, r1
 8010c5e:	80fb      	strh	r3, [r7, #6]
 8010c60:	4613      	mov	r3, r2
 8010c62:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8010c64:	88bb      	ldrh	r3, [r7, #4]
 8010c66:	3301      	adds	r3, #1
 8010c68:	085b      	lsrs	r3, r3, #1
 8010c6a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8010c70:	68bb      	ldr	r3, [r7, #8]
 8010c72:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8010c74:	88fa      	ldrh	r2, [r7, #6]
 8010c76:	697b      	ldr	r3, [r7, #20]
 8010c78:	4413      	add	r3, r2
 8010c7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010c7e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8010c80:	69bb      	ldr	r3, [r7, #24]
 8010c82:	627b      	str	r3, [r7, #36]	@ 0x24
 8010c84:	e01c      	b.n	8010cc0 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 8010c86:	69fb      	ldr	r3, [r7, #28]
 8010c88:	781b      	ldrb	r3, [r3, #0]
 8010c8a:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8010c8c:	69fb      	ldr	r3, [r7, #28]
 8010c8e:	3301      	adds	r3, #1
 8010c90:	781b      	ldrb	r3, [r3, #0]
 8010c92:	b21b      	sxth	r3, r3
 8010c94:	021b      	lsls	r3, r3, #8
 8010c96:	b21a      	sxth	r2, r3
 8010c98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010c9c:	4313      	orrs	r3, r2
 8010c9e:	b21b      	sxth	r3, r3
 8010ca0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8010ca2:	6a3b      	ldr	r3, [r7, #32]
 8010ca4:	8a7a      	ldrh	r2, [r7, #18]
 8010ca6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8010ca8:	6a3b      	ldr	r3, [r7, #32]
 8010caa:	3302      	adds	r3, #2
 8010cac:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8010cae:	69fb      	ldr	r3, [r7, #28]
 8010cb0:	3301      	adds	r3, #1
 8010cb2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8010cb4:	69fb      	ldr	r3, [r7, #28]
 8010cb6:	3301      	adds	r3, #1
 8010cb8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8010cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cbc:	3b01      	subs	r3, #1
 8010cbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8010cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d1df      	bne.n	8010c86 <USB_WritePMA+0x38>
  }
}
 8010cc6:	bf00      	nop
 8010cc8:	bf00      	nop
 8010cca:	372c      	adds	r7, #44	@ 0x2c
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd2:	4770      	bx	lr

08010cd4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8010cd4:	b480      	push	{r7}
 8010cd6:	b08b      	sub	sp, #44	@ 0x2c
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	60f8      	str	r0, [r7, #12]
 8010cdc:	60b9      	str	r1, [r7, #8]
 8010cde:	4611      	mov	r1, r2
 8010ce0:	461a      	mov	r2, r3
 8010ce2:	460b      	mov	r3, r1
 8010ce4:	80fb      	strh	r3, [r7, #6]
 8010ce6:	4613      	mov	r3, r2
 8010ce8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8010cea:	88bb      	ldrh	r3, [r7, #4]
 8010cec:	085b      	lsrs	r3, r3, #1
 8010cee:	b29b      	uxth	r3, r3
 8010cf0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8010cf6:	68bb      	ldr	r3, [r7, #8]
 8010cf8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8010cfa:	88fa      	ldrh	r2, [r7, #6]
 8010cfc:	697b      	ldr	r3, [r7, #20]
 8010cfe:	4413      	add	r3, r2
 8010d00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010d04:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8010d06:	69bb      	ldr	r3, [r7, #24]
 8010d08:	627b      	str	r3, [r7, #36]	@ 0x24
 8010d0a:	e018      	b.n	8010d3e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8010d0c:	6a3b      	ldr	r3, [r7, #32]
 8010d0e:	881b      	ldrh	r3, [r3, #0]
 8010d10:	b29b      	uxth	r3, r3
 8010d12:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8010d14:	6a3b      	ldr	r3, [r7, #32]
 8010d16:	3302      	adds	r3, #2
 8010d18:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8010d1a:	693b      	ldr	r3, [r7, #16]
 8010d1c:	b2da      	uxtb	r2, r3
 8010d1e:	69fb      	ldr	r3, [r7, #28]
 8010d20:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8010d22:	69fb      	ldr	r3, [r7, #28]
 8010d24:	3301      	adds	r3, #1
 8010d26:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8010d28:	693b      	ldr	r3, [r7, #16]
 8010d2a:	0a1b      	lsrs	r3, r3, #8
 8010d2c:	b2da      	uxtb	r2, r3
 8010d2e:	69fb      	ldr	r3, [r7, #28]
 8010d30:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8010d32:	69fb      	ldr	r3, [r7, #28]
 8010d34:	3301      	adds	r3, #1
 8010d36:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8010d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d3a:	3b01      	subs	r3, #1
 8010d3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8010d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d1e3      	bne.n	8010d0c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8010d44:	88bb      	ldrh	r3, [r7, #4]
 8010d46:	f003 0301 	and.w	r3, r3, #1
 8010d4a:	b29b      	uxth	r3, r3
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d007      	beq.n	8010d60 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8010d50:	6a3b      	ldr	r3, [r7, #32]
 8010d52:	881b      	ldrh	r3, [r3, #0]
 8010d54:	b29b      	uxth	r3, r3
 8010d56:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8010d58:	693b      	ldr	r3, [r7, #16]
 8010d5a:	b2da      	uxtb	r2, r3
 8010d5c:	69fb      	ldr	r3, [r7, #28]
 8010d5e:	701a      	strb	r2, [r3, #0]
  }
}
 8010d60:	bf00      	nop
 8010d62:	372c      	adds	r7, #44	@ 0x2c
 8010d64:	46bd      	mov	sp, r7
 8010d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6a:	4770      	bx	lr

08010d6c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b084      	sub	sp, #16
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
 8010d74:	460b      	mov	r3, r1
 8010d76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010d78:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8010d7c:	f006 fe34 	bl	80179e8 <USBD_static_malloc>
 8010d80:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d109      	bne.n	8010d9c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	32b0      	adds	r2, #176	@ 0xb0
 8010d92:	2100      	movs	r1, #0
 8010d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8010d98:	2302      	movs	r3, #2
 8010d9a:	e0d4      	b.n	8010f46 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8010d9c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8010da0:	2100      	movs	r1, #0
 8010da2:	68f8      	ldr	r0, [r7, #12]
 8010da4:	f008 fcb9 	bl	801971a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	32b0      	adds	r2, #176	@ 0xb0
 8010db2:	68f9      	ldr	r1, [r7, #12]
 8010db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	32b0      	adds	r2, #176	@ 0xb0
 8010dc2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	7c1b      	ldrb	r3, [r3, #16]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d138      	bne.n	8010e46 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010dd4:	4b5e      	ldr	r3, [pc, #376]	@ (8010f50 <USBD_CDC_Init+0x1e4>)
 8010dd6:	7819      	ldrb	r1, [r3, #0]
 8010dd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010ddc:	2202      	movs	r2, #2
 8010dde:	6878      	ldr	r0, [r7, #4]
 8010de0:	f006 fca9 	bl	8017736 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010de4:	4b5a      	ldr	r3, [pc, #360]	@ (8010f50 <USBD_CDC_Init+0x1e4>)
 8010de6:	781b      	ldrb	r3, [r3, #0]
 8010de8:	f003 020f 	and.w	r2, r3, #15
 8010dec:	6879      	ldr	r1, [r7, #4]
 8010dee:	4613      	mov	r3, r2
 8010df0:	009b      	lsls	r3, r3, #2
 8010df2:	4413      	add	r3, r2
 8010df4:	009b      	lsls	r3, r3, #2
 8010df6:	440b      	add	r3, r1
 8010df8:	3324      	adds	r3, #36	@ 0x24
 8010dfa:	2201      	movs	r2, #1
 8010dfc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8010dfe:	4b55      	ldr	r3, [pc, #340]	@ (8010f54 <USBD_CDC_Init+0x1e8>)
 8010e00:	7819      	ldrb	r1, [r3, #0]
 8010e02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010e06:	2202      	movs	r2, #2
 8010e08:	6878      	ldr	r0, [r7, #4]
 8010e0a:	f006 fc94 	bl	8017736 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010e0e:	4b51      	ldr	r3, [pc, #324]	@ (8010f54 <USBD_CDC_Init+0x1e8>)
 8010e10:	781b      	ldrb	r3, [r3, #0]
 8010e12:	f003 020f 	and.w	r2, r3, #15
 8010e16:	6879      	ldr	r1, [r7, #4]
 8010e18:	4613      	mov	r3, r2
 8010e1a:	009b      	lsls	r3, r3, #2
 8010e1c:	4413      	add	r3, r2
 8010e1e:	009b      	lsls	r3, r3, #2
 8010e20:	440b      	add	r3, r1
 8010e22:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010e26:	2201      	movs	r2, #1
 8010e28:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010e2a:	4b4b      	ldr	r3, [pc, #300]	@ (8010f58 <USBD_CDC_Init+0x1ec>)
 8010e2c:	781b      	ldrb	r3, [r3, #0]
 8010e2e:	f003 020f 	and.w	r2, r3, #15
 8010e32:	6879      	ldr	r1, [r7, #4]
 8010e34:	4613      	mov	r3, r2
 8010e36:	009b      	lsls	r3, r3, #2
 8010e38:	4413      	add	r3, r2
 8010e3a:	009b      	lsls	r3, r3, #2
 8010e3c:	440b      	add	r3, r1
 8010e3e:	3326      	adds	r3, #38	@ 0x26
 8010e40:	2210      	movs	r2, #16
 8010e42:	801a      	strh	r2, [r3, #0]
 8010e44:	e035      	b.n	8010eb2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010e46:	4b42      	ldr	r3, [pc, #264]	@ (8010f50 <USBD_CDC_Init+0x1e4>)
 8010e48:	7819      	ldrb	r1, [r3, #0]
 8010e4a:	2340      	movs	r3, #64	@ 0x40
 8010e4c:	2202      	movs	r2, #2
 8010e4e:	6878      	ldr	r0, [r7, #4]
 8010e50:	f006 fc71 	bl	8017736 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010e54:	4b3e      	ldr	r3, [pc, #248]	@ (8010f50 <USBD_CDC_Init+0x1e4>)
 8010e56:	781b      	ldrb	r3, [r3, #0]
 8010e58:	f003 020f 	and.w	r2, r3, #15
 8010e5c:	6879      	ldr	r1, [r7, #4]
 8010e5e:	4613      	mov	r3, r2
 8010e60:	009b      	lsls	r3, r3, #2
 8010e62:	4413      	add	r3, r2
 8010e64:	009b      	lsls	r3, r3, #2
 8010e66:	440b      	add	r3, r1
 8010e68:	3324      	adds	r3, #36	@ 0x24
 8010e6a:	2201      	movs	r2, #1
 8010e6c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8010e6e:	4b39      	ldr	r3, [pc, #228]	@ (8010f54 <USBD_CDC_Init+0x1e8>)
 8010e70:	7819      	ldrb	r1, [r3, #0]
 8010e72:	2340      	movs	r3, #64	@ 0x40
 8010e74:	2202      	movs	r2, #2
 8010e76:	6878      	ldr	r0, [r7, #4]
 8010e78:	f006 fc5d 	bl	8017736 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010e7c:	4b35      	ldr	r3, [pc, #212]	@ (8010f54 <USBD_CDC_Init+0x1e8>)
 8010e7e:	781b      	ldrb	r3, [r3, #0]
 8010e80:	f003 020f 	and.w	r2, r3, #15
 8010e84:	6879      	ldr	r1, [r7, #4]
 8010e86:	4613      	mov	r3, r2
 8010e88:	009b      	lsls	r3, r3, #2
 8010e8a:	4413      	add	r3, r2
 8010e8c:	009b      	lsls	r3, r3, #2
 8010e8e:	440b      	add	r3, r1
 8010e90:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010e94:	2201      	movs	r2, #1
 8010e96:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010e98:	4b2f      	ldr	r3, [pc, #188]	@ (8010f58 <USBD_CDC_Init+0x1ec>)
 8010e9a:	781b      	ldrb	r3, [r3, #0]
 8010e9c:	f003 020f 	and.w	r2, r3, #15
 8010ea0:	6879      	ldr	r1, [r7, #4]
 8010ea2:	4613      	mov	r3, r2
 8010ea4:	009b      	lsls	r3, r3, #2
 8010ea6:	4413      	add	r3, r2
 8010ea8:	009b      	lsls	r3, r3, #2
 8010eaa:	440b      	add	r3, r1
 8010eac:	3326      	adds	r3, #38	@ 0x26
 8010eae:	2210      	movs	r2, #16
 8010eb0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010eb2:	4b29      	ldr	r3, [pc, #164]	@ (8010f58 <USBD_CDC_Init+0x1ec>)
 8010eb4:	7819      	ldrb	r1, [r3, #0]
 8010eb6:	2308      	movs	r3, #8
 8010eb8:	2203      	movs	r2, #3
 8010eba:	6878      	ldr	r0, [r7, #4]
 8010ebc:	f006 fc3b 	bl	8017736 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8010ec0:	4b25      	ldr	r3, [pc, #148]	@ (8010f58 <USBD_CDC_Init+0x1ec>)
 8010ec2:	781b      	ldrb	r3, [r3, #0]
 8010ec4:	f003 020f 	and.w	r2, r3, #15
 8010ec8:	6879      	ldr	r1, [r7, #4]
 8010eca:	4613      	mov	r3, r2
 8010ecc:	009b      	lsls	r3, r3, #2
 8010ece:	4413      	add	r3, r2
 8010ed0:	009b      	lsls	r3, r3, #2
 8010ed2:	440b      	add	r3, r1
 8010ed4:	3324      	adds	r3, #36	@ 0x24
 8010ed6:	2201      	movs	r2, #1
 8010ed8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	2200      	movs	r2, #0
 8010ede:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010ee8:	687a      	ldr	r2, [r7, #4]
 8010eea:	33b0      	adds	r3, #176	@ 0xb0
 8010eec:	009b      	lsls	r3, r3, #2
 8010eee:	4413      	add	r3, r2
 8010ef0:	685b      	ldr	r3, [r3, #4]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	2200      	movs	r2, #0
 8010efa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	2200      	movs	r2, #0
 8010f02:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d101      	bne.n	8010f14 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8010f10:	2302      	movs	r3, #2
 8010f12:	e018      	b.n	8010f46 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	7c1b      	ldrb	r3, [r3, #16]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d10a      	bne.n	8010f32 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8010f54 <USBD_CDC_Init+0x1e8>)
 8010f1e:	7819      	ldrb	r1, [r3, #0]
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010f26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010f2a:	6878      	ldr	r0, [r7, #4]
 8010f2c:	f006 fcf2 	bl	8017914 <USBD_LL_PrepareReceive>
 8010f30:	e008      	b.n	8010f44 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010f32:	4b08      	ldr	r3, [pc, #32]	@ (8010f54 <USBD_CDC_Init+0x1e8>)
 8010f34:	7819      	ldrb	r1, [r3, #0]
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010f3c:	2340      	movs	r3, #64	@ 0x40
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	f006 fce8 	bl	8017914 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010f44:	2300      	movs	r3, #0
}
 8010f46:	4618      	mov	r0, r3
 8010f48:	3710      	adds	r7, #16
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	bd80      	pop	{r7, pc}
 8010f4e:	bf00      	nop
 8010f50:	200000b7 	.word	0x200000b7
 8010f54:	200000b8 	.word	0x200000b8
 8010f58:	200000b9 	.word	0x200000b9

08010f5c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010f5c:	b580      	push	{r7, lr}
 8010f5e:	b082      	sub	sp, #8
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]
 8010f64:	460b      	mov	r3, r1
 8010f66:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8010f68:	4b3a      	ldr	r3, [pc, #232]	@ (8011054 <USBD_CDC_DeInit+0xf8>)
 8010f6a:	781b      	ldrb	r3, [r3, #0]
 8010f6c:	4619      	mov	r1, r3
 8010f6e:	6878      	ldr	r0, [r7, #4]
 8010f70:	f006 fc07 	bl	8017782 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8010f74:	4b37      	ldr	r3, [pc, #220]	@ (8011054 <USBD_CDC_DeInit+0xf8>)
 8010f76:	781b      	ldrb	r3, [r3, #0]
 8010f78:	f003 020f 	and.w	r2, r3, #15
 8010f7c:	6879      	ldr	r1, [r7, #4]
 8010f7e:	4613      	mov	r3, r2
 8010f80:	009b      	lsls	r3, r3, #2
 8010f82:	4413      	add	r3, r2
 8010f84:	009b      	lsls	r3, r3, #2
 8010f86:	440b      	add	r3, r1
 8010f88:	3324      	adds	r3, #36	@ 0x24
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8010f8e:	4b32      	ldr	r3, [pc, #200]	@ (8011058 <USBD_CDC_DeInit+0xfc>)
 8010f90:	781b      	ldrb	r3, [r3, #0]
 8010f92:	4619      	mov	r1, r3
 8010f94:	6878      	ldr	r0, [r7, #4]
 8010f96:	f006 fbf4 	bl	8017782 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8010f9a:	4b2f      	ldr	r3, [pc, #188]	@ (8011058 <USBD_CDC_DeInit+0xfc>)
 8010f9c:	781b      	ldrb	r3, [r3, #0]
 8010f9e:	f003 020f 	and.w	r2, r3, #15
 8010fa2:	6879      	ldr	r1, [r7, #4]
 8010fa4:	4613      	mov	r3, r2
 8010fa6:	009b      	lsls	r3, r3, #2
 8010fa8:	4413      	add	r3, r2
 8010faa:	009b      	lsls	r3, r3, #2
 8010fac:	440b      	add	r3, r1
 8010fae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8010fb6:	4b29      	ldr	r3, [pc, #164]	@ (801105c <USBD_CDC_DeInit+0x100>)
 8010fb8:	781b      	ldrb	r3, [r3, #0]
 8010fba:	4619      	mov	r1, r3
 8010fbc:	6878      	ldr	r0, [r7, #4]
 8010fbe:	f006 fbe0 	bl	8017782 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8010fc2:	4b26      	ldr	r3, [pc, #152]	@ (801105c <USBD_CDC_DeInit+0x100>)
 8010fc4:	781b      	ldrb	r3, [r3, #0]
 8010fc6:	f003 020f 	and.w	r2, r3, #15
 8010fca:	6879      	ldr	r1, [r7, #4]
 8010fcc:	4613      	mov	r3, r2
 8010fce:	009b      	lsls	r3, r3, #2
 8010fd0:	4413      	add	r3, r2
 8010fd2:	009b      	lsls	r3, r3, #2
 8010fd4:	440b      	add	r3, r1
 8010fd6:	3324      	adds	r3, #36	@ 0x24
 8010fd8:	2200      	movs	r2, #0
 8010fda:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8010fdc:	4b1f      	ldr	r3, [pc, #124]	@ (801105c <USBD_CDC_DeInit+0x100>)
 8010fde:	781b      	ldrb	r3, [r3, #0]
 8010fe0:	f003 020f 	and.w	r2, r3, #15
 8010fe4:	6879      	ldr	r1, [r7, #4]
 8010fe6:	4613      	mov	r3, r2
 8010fe8:	009b      	lsls	r3, r3, #2
 8010fea:	4413      	add	r3, r2
 8010fec:	009b      	lsls	r3, r3, #2
 8010fee:	440b      	add	r3, r1
 8010ff0:	3326      	adds	r3, #38	@ 0x26
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	32b0      	adds	r2, #176	@ 0xb0
 8011000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d01f      	beq.n	8011048 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801100e:	687a      	ldr	r2, [r7, #4]
 8011010:	33b0      	adds	r3, #176	@ 0xb0
 8011012:	009b      	lsls	r3, r3, #2
 8011014:	4413      	add	r3, r2
 8011016:	685b      	ldr	r3, [r3, #4]
 8011018:	685b      	ldr	r3, [r3, #4]
 801101a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	32b0      	adds	r2, #176	@ 0xb0
 8011026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801102a:	4618      	mov	r0, r3
 801102c:	f006 fcea 	bl	8017a04 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	32b0      	adds	r2, #176	@ 0xb0
 801103a:	2100      	movs	r1, #0
 801103c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	2200      	movs	r2, #0
 8011044:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8011048:	2300      	movs	r3, #0
}
 801104a:	4618      	mov	r0, r3
 801104c:	3708      	adds	r7, #8
 801104e:	46bd      	mov	sp, r7
 8011050:	bd80      	pop	{r7, pc}
 8011052:	bf00      	nop
 8011054:	200000b7 	.word	0x200000b7
 8011058:	200000b8 	.word	0x200000b8
 801105c:	200000b9 	.word	0x200000b9

08011060 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b086      	sub	sp, #24
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
 8011068:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	32b0      	adds	r2, #176	@ 0xb0
 8011074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011078:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801107a:	2300      	movs	r3, #0
 801107c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801107e:	2300      	movs	r3, #0
 8011080:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8011082:	2300      	movs	r3, #0
 8011084:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8011086:	693b      	ldr	r3, [r7, #16]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d101      	bne.n	8011090 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 801108c:	2303      	movs	r3, #3
 801108e:	e0bf      	b.n	8011210 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011090:	683b      	ldr	r3, [r7, #0]
 8011092:	781b      	ldrb	r3, [r3, #0]
 8011094:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011098:	2b00      	cmp	r3, #0
 801109a:	d050      	beq.n	801113e <USBD_CDC_Setup+0xde>
 801109c:	2b20      	cmp	r3, #32
 801109e:	f040 80af 	bne.w	8011200 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	88db      	ldrh	r3, [r3, #6]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d03a      	beq.n	8011120 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80110aa:	683b      	ldr	r3, [r7, #0]
 80110ac:	781b      	ldrb	r3, [r3, #0]
 80110ae:	b25b      	sxtb	r3, r3
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	da1b      	bge.n	80110ec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80110ba:	687a      	ldr	r2, [r7, #4]
 80110bc:	33b0      	adds	r3, #176	@ 0xb0
 80110be:	009b      	lsls	r3, r3, #2
 80110c0:	4413      	add	r3, r2
 80110c2:	685b      	ldr	r3, [r3, #4]
 80110c4:	689b      	ldr	r3, [r3, #8]
 80110c6:	683a      	ldr	r2, [r7, #0]
 80110c8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80110ca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80110cc:	683a      	ldr	r2, [r7, #0]
 80110ce:	88d2      	ldrh	r2, [r2, #6]
 80110d0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80110d2:	683b      	ldr	r3, [r7, #0]
 80110d4:	88db      	ldrh	r3, [r3, #6]
 80110d6:	2b07      	cmp	r3, #7
 80110d8:	bf28      	it	cs
 80110da:	2307      	movcs	r3, #7
 80110dc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80110de:	693b      	ldr	r3, [r7, #16]
 80110e0:	89fa      	ldrh	r2, [r7, #14]
 80110e2:	4619      	mov	r1, r3
 80110e4:	6878      	ldr	r0, [r7, #4]
 80110e6:	f001 fceb 	bl	8012ac0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80110ea:	e090      	b.n	801120e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80110ec:	683b      	ldr	r3, [r7, #0]
 80110ee:	785a      	ldrb	r2, [r3, #1]
 80110f0:	693b      	ldr	r3, [r7, #16]
 80110f2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80110f6:	683b      	ldr	r3, [r7, #0]
 80110f8:	88db      	ldrh	r3, [r3, #6]
 80110fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80110fc:	d803      	bhi.n	8011106 <USBD_CDC_Setup+0xa6>
 80110fe:	683b      	ldr	r3, [r7, #0]
 8011100:	88db      	ldrh	r3, [r3, #6]
 8011102:	b2da      	uxtb	r2, r3
 8011104:	e000      	b.n	8011108 <USBD_CDC_Setup+0xa8>
 8011106:	2240      	movs	r2, #64	@ 0x40
 8011108:	693b      	ldr	r3, [r7, #16]
 801110a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801110e:	6939      	ldr	r1, [r7, #16]
 8011110:	693b      	ldr	r3, [r7, #16]
 8011112:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8011116:	461a      	mov	r2, r3
 8011118:	6878      	ldr	r0, [r7, #4]
 801111a:	f001 fcfd 	bl	8012b18 <USBD_CtlPrepareRx>
      break;
 801111e:	e076      	b.n	801120e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011126:	687a      	ldr	r2, [r7, #4]
 8011128:	33b0      	adds	r3, #176	@ 0xb0
 801112a:	009b      	lsls	r3, r3, #2
 801112c:	4413      	add	r3, r2
 801112e:	685b      	ldr	r3, [r3, #4]
 8011130:	689b      	ldr	r3, [r3, #8]
 8011132:	683a      	ldr	r2, [r7, #0]
 8011134:	7850      	ldrb	r0, [r2, #1]
 8011136:	2200      	movs	r2, #0
 8011138:	6839      	ldr	r1, [r7, #0]
 801113a:	4798      	blx	r3
      break;
 801113c:	e067      	b.n	801120e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801113e:	683b      	ldr	r3, [r7, #0]
 8011140:	785b      	ldrb	r3, [r3, #1]
 8011142:	2b0b      	cmp	r3, #11
 8011144:	d851      	bhi.n	80111ea <USBD_CDC_Setup+0x18a>
 8011146:	a201      	add	r2, pc, #4	@ (adr r2, 801114c <USBD_CDC_Setup+0xec>)
 8011148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801114c:	0801117d 	.word	0x0801117d
 8011150:	080111f9 	.word	0x080111f9
 8011154:	080111eb 	.word	0x080111eb
 8011158:	080111eb 	.word	0x080111eb
 801115c:	080111eb 	.word	0x080111eb
 8011160:	080111eb 	.word	0x080111eb
 8011164:	080111eb 	.word	0x080111eb
 8011168:	080111eb 	.word	0x080111eb
 801116c:	080111eb 	.word	0x080111eb
 8011170:	080111eb 	.word	0x080111eb
 8011174:	080111a7 	.word	0x080111a7
 8011178:	080111d1 	.word	0x080111d1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011182:	b2db      	uxtb	r3, r3
 8011184:	2b03      	cmp	r3, #3
 8011186:	d107      	bne.n	8011198 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011188:	f107 030a 	add.w	r3, r7, #10
 801118c:	2202      	movs	r2, #2
 801118e:	4619      	mov	r1, r3
 8011190:	6878      	ldr	r0, [r7, #4]
 8011192:	f001 fc95 	bl	8012ac0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011196:	e032      	b.n	80111fe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8011198:	6839      	ldr	r1, [r7, #0]
 801119a:	6878      	ldr	r0, [r7, #4]
 801119c:	f001 fc13 	bl	80129c6 <USBD_CtlError>
            ret = USBD_FAIL;
 80111a0:	2303      	movs	r3, #3
 80111a2:	75fb      	strb	r3, [r7, #23]
          break;
 80111a4:	e02b      	b.n	80111fe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80111ac:	b2db      	uxtb	r3, r3
 80111ae:	2b03      	cmp	r3, #3
 80111b0:	d107      	bne.n	80111c2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80111b2:	f107 030d 	add.w	r3, r7, #13
 80111b6:	2201      	movs	r2, #1
 80111b8:	4619      	mov	r1, r3
 80111ba:	6878      	ldr	r0, [r7, #4]
 80111bc:	f001 fc80 	bl	8012ac0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80111c0:	e01d      	b.n	80111fe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80111c2:	6839      	ldr	r1, [r7, #0]
 80111c4:	6878      	ldr	r0, [r7, #4]
 80111c6:	f001 fbfe 	bl	80129c6 <USBD_CtlError>
            ret = USBD_FAIL;
 80111ca:	2303      	movs	r3, #3
 80111cc:	75fb      	strb	r3, [r7, #23]
          break;
 80111ce:	e016      	b.n	80111fe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80111d6:	b2db      	uxtb	r3, r3
 80111d8:	2b03      	cmp	r3, #3
 80111da:	d00f      	beq.n	80111fc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80111dc:	6839      	ldr	r1, [r7, #0]
 80111de:	6878      	ldr	r0, [r7, #4]
 80111e0:	f001 fbf1 	bl	80129c6 <USBD_CtlError>
            ret = USBD_FAIL;
 80111e4:	2303      	movs	r3, #3
 80111e6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80111e8:	e008      	b.n	80111fc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80111ea:	6839      	ldr	r1, [r7, #0]
 80111ec:	6878      	ldr	r0, [r7, #4]
 80111ee:	f001 fbea 	bl	80129c6 <USBD_CtlError>
          ret = USBD_FAIL;
 80111f2:	2303      	movs	r3, #3
 80111f4:	75fb      	strb	r3, [r7, #23]
          break;
 80111f6:	e002      	b.n	80111fe <USBD_CDC_Setup+0x19e>
          break;
 80111f8:	bf00      	nop
 80111fa:	e008      	b.n	801120e <USBD_CDC_Setup+0x1ae>
          break;
 80111fc:	bf00      	nop
      }
      break;
 80111fe:	e006      	b.n	801120e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8011200:	6839      	ldr	r1, [r7, #0]
 8011202:	6878      	ldr	r0, [r7, #4]
 8011204:	f001 fbdf 	bl	80129c6 <USBD_CtlError>
      ret = USBD_FAIL;
 8011208:	2303      	movs	r3, #3
 801120a:	75fb      	strb	r3, [r7, #23]
      break;
 801120c:	bf00      	nop
  }

  return (uint8_t)ret;
 801120e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011210:	4618      	mov	r0, r3
 8011212:	3718      	adds	r7, #24
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}

08011218 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b084      	sub	sp, #16
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
 8011220:	460b      	mov	r3, r1
 8011222:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801122a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	32b0      	adds	r2, #176	@ 0xb0
 8011236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d101      	bne.n	8011242 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801123e:	2303      	movs	r3, #3
 8011240:	e065      	b.n	801130e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	32b0      	adds	r2, #176	@ 0xb0
 801124c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011250:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8011252:	78fb      	ldrb	r3, [r7, #3]
 8011254:	f003 020f 	and.w	r2, r3, #15
 8011258:	6879      	ldr	r1, [r7, #4]
 801125a:	4613      	mov	r3, r2
 801125c:	009b      	lsls	r3, r3, #2
 801125e:	4413      	add	r3, r2
 8011260:	009b      	lsls	r3, r3, #2
 8011262:	440b      	add	r3, r1
 8011264:	3318      	adds	r3, #24
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d02f      	beq.n	80112cc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 801126c:	78fb      	ldrb	r3, [r7, #3]
 801126e:	f003 020f 	and.w	r2, r3, #15
 8011272:	6879      	ldr	r1, [r7, #4]
 8011274:	4613      	mov	r3, r2
 8011276:	009b      	lsls	r3, r3, #2
 8011278:	4413      	add	r3, r2
 801127a:	009b      	lsls	r3, r3, #2
 801127c:	440b      	add	r3, r1
 801127e:	3318      	adds	r3, #24
 8011280:	681a      	ldr	r2, [r3, #0]
 8011282:	78fb      	ldrb	r3, [r7, #3]
 8011284:	f003 010f 	and.w	r1, r3, #15
 8011288:	68f8      	ldr	r0, [r7, #12]
 801128a:	460b      	mov	r3, r1
 801128c:	009b      	lsls	r3, r3, #2
 801128e:	440b      	add	r3, r1
 8011290:	00db      	lsls	r3, r3, #3
 8011292:	4403      	add	r3, r0
 8011294:	3320      	adds	r3, #32
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	fbb2 f1f3 	udiv	r1, r2, r3
 801129c:	fb01 f303 	mul.w	r3, r1, r3
 80112a0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d112      	bne.n	80112cc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80112a6:	78fb      	ldrb	r3, [r7, #3]
 80112a8:	f003 020f 	and.w	r2, r3, #15
 80112ac:	6879      	ldr	r1, [r7, #4]
 80112ae:	4613      	mov	r3, r2
 80112b0:	009b      	lsls	r3, r3, #2
 80112b2:	4413      	add	r3, r2
 80112b4:	009b      	lsls	r3, r3, #2
 80112b6:	440b      	add	r3, r1
 80112b8:	3318      	adds	r3, #24
 80112ba:	2200      	movs	r2, #0
 80112bc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80112be:	78f9      	ldrb	r1, [r7, #3]
 80112c0:	2300      	movs	r3, #0
 80112c2:	2200      	movs	r2, #0
 80112c4:	6878      	ldr	r0, [r7, #4]
 80112c6:	f006 fb04 	bl	80178d2 <USBD_LL_Transmit>
 80112ca:	e01f      	b.n	801130c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80112cc:	68bb      	ldr	r3, [r7, #8]
 80112ce:	2200      	movs	r2, #0
 80112d0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80112da:	687a      	ldr	r2, [r7, #4]
 80112dc:	33b0      	adds	r3, #176	@ 0xb0
 80112de:	009b      	lsls	r3, r3, #2
 80112e0:	4413      	add	r3, r2
 80112e2:	685b      	ldr	r3, [r3, #4]
 80112e4:	691b      	ldr	r3, [r3, #16]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d010      	beq.n	801130c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80112f0:	687a      	ldr	r2, [r7, #4]
 80112f2:	33b0      	adds	r3, #176	@ 0xb0
 80112f4:	009b      	lsls	r3, r3, #2
 80112f6:	4413      	add	r3, r2
 80112f8:	685b      	ldr	r3, [r3, #4]
 80112fa:	691b      	ldr	r3, [r3, #16]
 80112fc:	68ba      	ldr	r2, [r7, #8]
 80112fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8011302:	68ba      	ldr	r2, [r7, #8]
 8011304:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8011308:	78fa      	ldrb	r2, [r7, #3]
 801130a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801130c:	2300      	movs	r3, #0
}
 801130e:	4618      	mov	r0, r3
 8011310:	3710      	adds	r7, #16
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}

08011316 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011316:	b580      	push	{r7, lr}
 8011318:	b084      	sub	sp, #16
 801131a:	af00      	add	r7, sp, #0
 801131c:	6078      	str	r0, [r7, #4]
 801131e:	460b      	mov	r3, r1
 8011320:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	32b0      	adds	r2, #176	@ 0xb0
 801132c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011330:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	32b0      	adds	r2, #176	@ 0xb0
 801133c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d101      	bne.n	8011348 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8011344:	2303      	movs	r3, #3
 8011346:	e01a      	b.n	801137e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011348:	78fb      	ldrb	r3, [r7, #3]
 801134a:	4619      	mov	r1, r3
 801134c:	6878      	ldr	r0, [r7, #4]
 801134e:	f006 fb02 	bl	8017956 <USBD_LL_GetRxDataSize>
 8011352:	4602      	mov	r2, r0
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011360:	687a      	ldr	r2, [r7, #4]
 8011362:	33b0      	adds	r3, #176	@ 0xb0
 8011364:	009b      	lsls	r3, r3, #2
 8011366:	4413      	add	r3, r2
 8011368:	685b      	ldr	r3, [r3, #4]
 801136a:	68db      	ldr	r3, [r3, #12]
 801136c:	68fa      	ldr	r2, [r7, #12]
 801136e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8011372:	68fa      	ldr	r2, [r7, #12]
 8011374:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8011378:	4611      	mov	r1, r2
 801137a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801137c:	2300      	movs	r3, #0
}
 801137e:	4618      	mov	r0, r3
 8011380:	3710      	adds	r7, #16
 8011382:	46bd      	mov	sp, r7
 8011384:	bd80      	pop	{r7, pc}

08011386 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011386:	b580      	push	{r7, lr}
 8011388:	b084      	sub	sp, #16
 801138a:	af00      	add	r7, sp, #0
 801138c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	32b0      	adds	r2, #176	@ 0xb0
 8011398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801139c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d101      	bne.n	80113a8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80113a4:	2303      	movs	r3, #3
 80113a6:	e024      	b.n	80113f2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80113ae:	687a      	ldr	r2, [r7, #4]
 80113b0:	33b0      	adds	r3, #176	@ 0xb0
 80113b2:	009b      	lsls	r3, r3, #2
 80113b4:	4413      	add	r3, r2
 80113b6:	685b      	ldr	r3, [r3, #4]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d019      	beq.n	80113f0 <USBD_CDC_EP0_RxReady+0x6a>
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80113c2:	2bff      	cmp	r3, #255	@ 0xff
 80113c4:	d014      	beq.n	80113f0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80113cc:	687a      	ldr	r2, [r7, #4]
 80113ce:	33b0      	adds	r3, #176	@ 0xb0
 80113d0:	009b      	lsls	r3, r3, #2
 80113d2:	4413      	add	r3, r2
 80113d4:	685b      	ldr	r3, [r3, #4]
 80113d6:	689b      	ldr	r3, [r3, #8]
 80113d8:	68fa      	ldr	r2, [r7, #12]
 80113da:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80113de:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80113e0:	68fa      	ldr	r2, [r7, #12]
 80113e2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80113e6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	22ff      	movs	r2, #255	@ 0xff
 80113ec:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80113f0:	2300      	movs	r3, #0
}
 80113f2:	4618      	mov	r0, r3
 80113f4:	3710      	adds	r7, #16
 80113f6:	46bd      	mov	sp, r7
 80113f8:	bd80      	pop	{r7, pc}
	...

080113fc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b086      	sub	sp, #24
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011404:	2182      	movs	r1, #130	@ 0x82
 8011406:	4818      	ldr	r0, [pc, #96]	@ (8011468 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011408:	f000 fc7d 	bl	8011d06 <USBD_GetEpDesc>
 801140c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801140e:	2101      	movs	r1, #1
 8011410:	4815      	ldr	r0, [pc, #84]	@ (8011468 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011412:	f000 fc78 	bl	8011d06 <USBD_GetEpDesc>
 8011416:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011418:	2181      	movs	r1, #129	@ 0x81
 801141a:	4813      	ldr	r0, [pc, #76]	@ (8011468 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801141c:	f000 fc73 	bl	8011d06 <USBD_GetEpDesc>
 8011420:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011422:	697b      	ldr	r3, [r7, #20]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d002      	beq.n	801142e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8011428:	697b      	ldr	r3, [r7, #20]
 801142a:	2210      	movs	r2, #16
 801142c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801142e:	693b      	ldr	r3, [r7, #16]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d006      	beq.n	8011442 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011434:	693b      	ldr	r3, [r7, #16]
 8011436:	2200      	movs	r2, #0
 8011438:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801143c:	711a      	strb	r2, [r3, #4]
 801143e:	2200      	movs	r2, #0
 8011440:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d006      	beq.n	8011456 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	2200      	movs	r2, #0
 801144c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011450:	711a      	strb	r2, [r3, #4]
 8011452:	2200      	movs	r2, #0
 8011454:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	2243      	movs	r2, #67	@ 0x43
 801145a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801145c:	4b02      	ldr	r3, [pc, #8]	@ (8011468 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801145e:	4618      	mov	r0, r3
 8011460:	3718      	adds	r7, #24
 8011462:	46bd      	mov	sp, r7
 8011464:	bd80      	pop	{r7, pc}
 8011466:	bf00      	nop
 8011468:	20000074 	.word	0x20000074

0801146c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801146c:	b580      	push	{r7, lr}
 801146e:	b086      	sub	sp, #24
 8011470:	af00      	add	r7, sp, #0
 8011472:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011474:	2182      	movs	r1, #130	@ 0x82
 8011476:	4818      	ldr	r0, [pc, #96]	@ (80114d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011478:	f000 fc45 	bl	8011d06 <USBD_GetEpDesc>
 801147c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801147e:	2101      	movs	r1, #1
 8011480:	4815      	ldr	r0, [pc, #84]	@ (80114d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011482:	f000 fc40 	bl	8011d06 <USBD_GetEpDesc>
 8011486:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011488:	2181      	movs	r1, #129	@ 0x81
 801148a:	4813      	ldr	r0, [pc, #76]	@ (80114d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801148c:	f000 fc3b 	bl	8011d06 <USBD_GetEpDesc>
 8011490:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011492:	697b      	ldr	r3, [r7, #20]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d002      	beq.n	801149e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8011498:	697b      	ldr	r3, [r7, #20]
 801149a:	2210      	movs	r2, #16
 801149c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801149e:	693b      	ldr	r3, [r7, #16]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d006      	beq.n	80114b2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80114a4:	693b      	ldr	r3, [r7, #16]
 80114a6:	2200      	movs	r2, #0
 80114a8:	711a      	strb	r2, [r3, #4]
 80114aa:	2200      	movs	r2, #0
 80114ac:	f042 0202 	orr.w	r2, r2, #2
 80114b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d006      	beq.n	80114c6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	2200      	movs	r2, #0
 80114bc:	711a      	strb	r2, [r3, #4]
 80114be:	2200      	movs	r2, #0
 80114c0:	f042 0202 	orr.w	r2, r2, #2
 80114c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	2243      	movs	r2, #67	@ 0x43
 80114ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80114cc:	4b02      	ldr	r3, [pc, #8]	@ (80114d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80114ce:	4618      	mov	r0, r3
 80114d0:	3718      	adds	r7, #24
 80114d2:	46bd      	mov	sp, r7
 80114d4:	bd80      	pop	{r7, pc}
 80114d6:	bf00      	nop
 80114d8:	20000074 	.word	0x20000074

080114dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	b086      	sub	sp, #24
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80114e4:	2182      	movs	r1, #130	@ 0x82
 80114e6:	4818      	ldr	r0, [pc, #96]	@ (8011548 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80114e8:	f000 fc0d 	bl	8011d06 <USBD_GetEpDesc>
 80114ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80114ee:	2101      	movs	r1, #1
 80114f0:	4815      	ldr	r0, [pc, #84]	@ (8011548 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80114f2:	f000 fc08 	bl	8011d06 <USBD_GetEpDesc>
 80114f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80114f8:	2181      	movs	r1, #129	@ 0x81
 80114fa:	4813      	ldr	r0, [pc, #76]	@ (8011548 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80114fc:	f000 fc03 	bl	8011d06 <USBD_GetEpDesc>
 8011500:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011502:	697b      	ldr	r3, [r7, #20]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d002      	beq.n	801150e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8011508:	697b      	ldr	r3, [r7, #20]
 801150a:	2210      	movs	r2, #16
 801150c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801150e:	693b      	ldr	r3, [r7, #16]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d006      	beq.n	8011522 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011514:	693b      	ldr	r3, [r7, #16]
 8011516:	2200      	movs	r2, #0
 8011518:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801151c:	711a      	strb	r2, [r3, #4]
 801151e:	2200      	movs	r2, #0
 8011520:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d006      	beq.n	8011536 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	2200      	movs	r2, #0
 801152c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011530:	711a      	strb	r2, [r3, #4]
 8011532:	2200      	movs	r2, #0
 8011534:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	2243      	movs	r2, #67	@ 0x43
 801153a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801153c:	4b02      	ldr	r3, [pc, #8]	@ (8011548 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801153e:	4618      	mov	r0, r3
 8011540:	3718      	adds	r7, #24
 8011542:	46bd      	mov	sp, r7
 8011544:	bd80      	pop	{r7, pc}
 8011546:	bf00      	nop
 8011548:	20000074 	.word	0x20000074

0801154c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801154c:	b480      	push	{r7}
 801154e:	b083      	sub	sp, #12
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	220a      	movs	r2, #10
 8011558:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801155a:	4b03      	ldr	r3, [pc, #12]	@ (8011568 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801155c:	4618      	mov	r0, r3
 801155e:	370c      	adds	r7, #12
 8011560:	46bd      	mov	sp, r7
 8011562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011566:	4770      	bx	lr
 8011568:	20000030 	.word	0x20000030

0801156c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801156c:	b480      	push	{r7}
 801156e:	b083      	sub	sp, #12
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
 8011574:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011576:	683b      	ldr	r3, [r7, #0]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d101      	bne.n	8011580 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801157c:	2303      	movs	r3, #3
 801157e:	e009      	b.n	8011594 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011586:	687a      	ldr	r2, [r7, #4]
 8011588:	33b0      	adds	r3, #176	@ 0xb0
 801158a:	009b      	lsls	r3, r3, #2
 801158c:	4413      	add	r3, r2
 801158e:	683a      	ldr	r2, [r7, #0]
 8011590:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8011592:	2300      	movs	r3, #0
}
 8011594:	4618      	mov	r0, r3
 8011596:	370c      	adds	r7, #12
 8011598:	46bd      	mov	sp, r7
 801159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159e:	4770      	bx	lr

080115a0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80115a0:	b480      	push	{r7}
 80115a2:	b087      	sub	sp, #28
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	60f8      	str	r0, [r7, #12]
 80115a8:	60b9      	str	r1, [r7, #8]
 80115aa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	32b0      	adds	r2, #176	@ 0xb0
 80115b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115ba:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80115bc:	697b      	ldr	r3, [r7, #20]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d101      	bne.n	80115c6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80115c2:	2303      	movs	r3, #3
 80115c4:	e008      	b.n	80115d8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80115c6:	697b      	ldr	r3, [r7, #20]
 80115c8:	68ba      	ldr	r2, [r7, #8]
 80115ca:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80115ce:	697b      	ldr	r3, [r7, #20]
 80115d0:	687a      	ldr	r2, [r7, #4]
 80115d2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80115d6:	2300      	movs	r3, #0
}
 80115d8:	4618      	mov	r0, r3
 80115da:	371c      	adds	r7, #28
 80115dc:	46bd      	mov	sp, r7
 80115de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e2:	4770      	bx	lr

080115e4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80115e4:	b480      	push	{r7}
 80115e6:	b085      	sub	sp, #20
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6078      	str	r0, [r7, #4]
 80115ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	32b0      	adds	r2, #176	@ 0xb0
 80115f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d101      	bne.n	8011608 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8011604:	2303      	movs	r3, #3
 8011606:	e004      	b.n	8011612 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	683a      	ldr	r2, [r7, #0]
 801160c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8011610:	2300      	movs	r3, #0
}
 8011612:	4618      	mov	r0, r3
 8011614:	3714      	adds	r7, #20
 8011616:	46bd      	mov	sp, r7
 8011618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161c:	4770      	bx	lr
	...

08011620 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011620:	b580      	push	{r7, lr}
 8011622:	b084      	sub	sp, #16
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	32b0      	adds	r2, #176	@ 0xb0
 8011632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011636:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	32b0      	adds	r2, #176	@ 0xb0
 8011642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d101      	bne.n	801164e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801164a:	2303      	movs	r3, #3
 801164c:	e018      	b.n	8011680 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	7c1b      	ldrb	r3, [r3, #16]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d10a      	bne.n	801166c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011656:	4b0c      	ldr	r3, [pc, #48]	@ (8011688 <USBD_CDC_ReceivePacket+0x68>)
 8011658:	7819      	ldrb	r1, [r3, #0]
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011660:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011664:	6878      	ldr	r0, [r7, #4]
 8011666:	f006 f955 	bl	8017914 <USBD_LL_PrepareReceive>
 801166a:	e008      	b.n	801167e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801166c:	4b06      	ldr	r3, [pc, #24]	@ (8011688 <USBD_CDC_ReceivePacket+0x68>)
 801166e:	7819      	ldrb	r1, [r3, #0]
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011676:	2340      	movs	r3, #64	@ 0x40
 8011678:	6878      	ldr	r0, [r7, #4]
 801167a:	f006 f94b 	bl	8017914 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801167e:	2300      	movs	r3, #0
}
 8011680:	4618      	mov	r0, r3
 8011682:	3710      	adds	r7, #16
 8011684:	46bd      	mov	sp, r7
 8011686:	bd80      	pop	{r7, pc}
 8011688:	200000b8 	.word	0x200000b8

0801168c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801168c:	b580      	push	{r7, lr}
 801168e:	b086      	sub	sp, #24
 8011690:	af00      	add	r7, sp, #0
 8011692:	60f8      	str	r0, [r7, #12]
 8011694:	60b9      	str	r1, [r7, #8]
 8011696:	4613      	mov	r3, r2
 8011698:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d101      	bne.n	80116a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80116a0:	2303      	movs	r3, #3
 80116a2:	e01f      	b.n	80116e4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	2200      	movs	r2, #0
 80116a8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	2200      	movs	r2, #0
 80116b0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	2200      	movs	r2, #0
 80116b8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80116bc:	68bb      	ldr	r3, [r7, #8]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d003      	beq.n	80116ca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	68ba      	ldr	r2, [r7, #8]
 80116c6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	2201      	movs	r2, #1
 80116ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	79fa      	ldrb	r2, [r7, #7]
 80116d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80116d8:	68f8      	ldr	r0, [r7, #12]
 80116da:	f005 ffaf 	bl	801763c <USBD_LL_Init>
 80116de:	4603      	mov	r3, r0
 80116e0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80116e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80116e4:	4618      	mov	r0, r3
 80116e6:	3718      	adds	r7, #24
 80116e8:	46bd      	mov	sp, r7
 80116ea:	bd80      	pop	{r7, pc}

080116ec <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80116ec:	b580      	push	{r7, lr}
 80116ee:	b084      	sub	sp, #16
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	6078      	str	r0, [r7, #4]
 80116f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80116f6:	2300      	movs	r3, #0
 80116f8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d101      	bne.n	8011704 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011700:	2303      	movs	r3, #3
 8011702:	e025      	b.n	8011750 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	683a      	ldr	r2, [r7, #0]
 8011708:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	32ae      	adds	r2, #174	@ 0xae
 8011716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801171a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801171c:	2b00      	cmp	r3, #0
 801171e:	d00f      	beq.n	8011740 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	32ae      	adds	r2, #174	@ 0xae
 801172a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801172e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011730:	f107 020e 	add.w	r2, r7, #14
 8011734:	4610      	mov	r0, r2
 8011736:	4798      	blx	r3
 8011738:	4602      	mov	r2, r0
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011746:	1c5a      	adds	r2, r3, #1
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 801174e:	2300      	movs	r3, #0
}
 8011750:	4618      	mov	r0, r3
 8011752:	3710      	adds	r7, #16
 8011754:	46bd      	mov	sp, r7
 8011756:	bd80      	pop	{r7, pc}

08011758 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b082      	sub	sp, #8
 801175c:	af00      	add	r7, sp, #0
 801175e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011760:	6878      	ldr	r0, [r7, #4]
 8011762:	f005 ffcd 	bl	8017700 <USBD_LL_Start>
 8011766:	4603      	mov	r3, r0
}
 8011768:	4618      	mov	r0, r3
 801176a:	3708      	adds	r7, #8
 801176c:	46bd      	mov	sp, r7
 801176e:	bd80      	pop	{r7, pc}

08011770 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8011770:	b480      	push	{r7}
 8011772:	b083      	sub	sp, #12
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011778:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801177a:	4618      	mov	r0, r3
 801177c:	370c      	adds	r7, #12
 801177e:	46bd      	mov	sp, r7
 8011780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011784:	4770      	bx	lr

08011786 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011786:	b580      	push	{r7, lr}
 8011788:	b084      	sub	sp, #16
 801178a:	af00      	add	r7, sp, #0
 801178c:	6078      	str	r0, [r7, #4]
 801178e:	460b      	mov	r3, r1
 8011790:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011792:	2300      	movs	r3, #0
 8011794:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801179c:	2b00      	cmp	r3, #0
 801179e:	d009      	beq.n	80117b4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	78fa      	ldrb	r2, [r7, #3]
 80117aa:	4611      	mov	r1, r2
 80117ac:	6878      	ldr	r0, [r7, #4]
 80117ae:	4798      	blx	r3
 80117b0:	4603      	mov	r3, r0
 80117b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80117b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80117b6:	4618      	mov	r0, r3
 80117b8:	3710      	adds	r7, #16
 80117ba:	46bd      	mov	sp, r7
 80117bc:	bd80      	pop	{r7, pc}

080117be <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80117be:	b580      	push	{r7, lr}
 80117c0:	b084      	sub	sp, #16
 80117c2:	af00      	add	r7, sp, #0
 80117c4:	6078      	str	r0, [r7, #4]
 80117c6:	460b      	mov	r3, r1
 80117c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80117ca:	2300      	movs	r3, #0
 80117cc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80117d4:	685b      	ldr	r3, [r3, #4]
 80117d6:	78fa      	ldrb	r2, [r7, #3]
 80117d8:	4611      	mov	r1, r2
 80117da:	6878      	ldr	r0, [r7, #4]
 80117dc:	4798      	blx	r3
 80117de:	4603      	mov	r3, r0
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d001      	beq.n	80117e8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80117e4:	2303      	movs	r3, #3
 80117e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80117e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80117ea:	4618      	mov	r0, r3
 80117ec:	3710      	adds	r7, #16
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bd80      	pop	{r7, pc}

080117f2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80117f2:	b580      	push	{r7, lr}
 80117f4:	b084      	sub	sp, #16
 80117f6:	af00      	add	r7, sp, #0
 80117f8:	6078      	str	r0, [r7, #4]
 80117fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011802:	6839      	ldr	r1, [r7, #0]
 8011804:	4618      	mov	r0, r3
 8011806:	f001 f8a4 	bl	8012952 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	2201      	movs	r2, #1
 801180e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8011818:	461a      	mov	r2, r3
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011826:	f003 031f 	and.w	r3, r3, #31
 801182a:	2b02      	cmp	r3, #2
 801182c:	d01a      	beq.n	8011864 <USBD_LL_SetupStage+0x72>
 801182e:	2b02      	cmp	r3, #2
 8011830:	d822      	bhi.n	8011878 <USBD_LL_SetupStage+0x86>
 8011832:	2b00      	cmp	r3, #0
 8011834:	d002      	beq.n	801183c <USBD_LL_SetupStage+0x4a>
 8011836:	2b01      	cmp	r3, #1
 8011838:	d00a      	beq.n	8011850 <USBD_LL_SetupStage+0x5e>
 801183a:	e01d      	b.n	8011878 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011842:	4619      	mov	r1, r3
 8011844:	6878      	ldr	r0, [r7, #4]
 8011846:	f000 fad1 	bl	8011dec <USBD_StdDevReq>
 801184a:	4603      	mov	r3, r0
 801184c:	73fb      	strb	r3, [r7, #15]
      break;
 801184e:	e020      	b.n	8011892 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011856:	4619      	mov	r1, r3
 8011858:	6878      	ldr	r0, [r7, #4]
 801185a:	f000 fb39 	bl	8011ed0 <USBD_StdItfReq>
 801185e:	4603      	mov	r3, r0
 8011860:	73fb      	strb	r3, [r7, #15]
      break;
 8011862:	e016      	b.n	8011892 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801186a:	4619      	mov	r1, r3
 801186c:	6878      	ldr	r0, [r7, #4]
 801186e:	f000 fb9b 	bl	8011fa8 <USBD_StdEPReq>
 8011872:	4603      	mov	r3, r0
 8011874:	73fb      	strb	r3, [r7, #15]
      break;
 8011876:	e00c      	b.n	8011892 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801187e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011882:	b2db      	uxtb	r3, r3
 8011884:	4619      	mov	r1, r3
 8011886:	6878      	ldr	r0, [r7, #4]
 8011888:	f005 ff9a 	bl	80177c0 <USBD_LL_StallEP>
 801188c:	4603      	mov	r3, r0
 801188e:	73fb      	strb	r3, [r7, #15]
      break;
 8011890:	bf00      	nop
  }

  return ret;
 8011892:	7bfb      	ldrb	r3, [r7, #15]
}
 8011894:	4618      	mov	r0, r3
 8011896:	3710      	adds	r7, #16
 8011898:	46bd      	mov	sp, r7
 801189a:	bd80      	pop	{r7, pc}

0801189c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801189c:	b580      	push	{r7, lr}
 801189e:	b086      	sub	sp, #24
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	60f8      	str	r0, [r7, #12]
 80118a4:	460b      	mov	r3, r1
 80118a6:	607a      	str	r2, [r7, #4]
 80118a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80118aa:	2300      	movs	r3, #0
 80118ac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80118ae:	7afb      	ldrb	r3, [r7, #11]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d16e      	bne.n	8011992 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80118ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80118c2:	2b03      	cmp	r3, #3
 80118c4:	f040 8098 	bne.w	80119f8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80118c8:	693b      	ldr	r3, [r7, #16]
 80118ca:	689a      	ldr	r2, [r3, #8]
 80118cc:	693b      	ldr	r3, [r7, #16]
 80118ce:	68db      	ldr	r3, [r3, #12]
 80118d0:	429a      	cmp	r2, r3
 80118d2:	d913      	bls.n	80118fc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80118d4:	693b      	ldr	r3, [r7, #16]
 80118d6:	689a      	ldr	r2, [r3, #8]
 80118d8:	693b      	ldr	r3, [r7, #16]
 80118da:	68db      	ldr	r3, [r3, #12]
 80118dc:	1ad2      	subs	r2, r2, r3
 80118de:	693b      	ldr	r3, [r7, #16]
 80118e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80118e2:	693b      	ldr	r3, [r7, #16]
 80118e4:	68da      	ldr	r2, [r3, #12]
 80118e6:	693b      	ldr	r3, [r7, #16]
 80118e8:	689b      	ldr	r3, [r3, #8]
 80118ea:	4293      	cmp	r3, r2
 80118ec:	bf28      	it	cs
 80118ee:	4613      	movcs	r3, r2
 80118f0:	461a      	mov	r2, r3
 80118f2:	6879      	ldr	r1, [r7, #4]
 80118f4:	68f8      	ldr	r0, [r7, #12]
 80118f6:	f001 f92c 	bl	8012b52 <USBD_CtlContinueRx>
 80118fa:	e07d      	b.n	80119f8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011902:	f003 031f 	and.w	r3, r3, #31
 8011906:	2b02      	cmp	r3, #2
 8011908:	d014      	beq.n	8011934 <USBD_LL_DataOutStage+0x98>
 801190a:	2b02      	cmp	r3, #2
 801190c:	d81d      	bhi.n	801194a <USBD_LL_DataOutStage+0xae>
 801190e:	2b00      	cmp	r3, #0
 8011910:	d002      	beq.n	8011918 <USBD_LL_DataOutStage+0x7c>
 8011912:	2b01      	cmp	r3, #1
 8011914:	d003      	beq.n	801191e <USBD_LL_DataOutStage+0x82>
 8011916:	e018      	b.n	801194a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8011918:	2300      	movs	r3, #0
 801191a:	75bb      	strb	r3, [r7, #22]
            break;
 801191c:	e018      	b.n	8011950 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8011924:	b2db      	uxtb	r3, r3
 8011926:	4619      	mov	r1, r3
 8011928:	68f8      	ldr	r0, [r7, #12]
 801192a:	f000 f9d2 	bl	8011cd2 <USBD_CoreFindIF>
 801192e:	4603      	mov	r3, r0
 8011930:	75bb      	strb	r3, [r7, #22]
            break;
 8011932:	e00d      	b.n	8011950 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801193a:	b2db      	uxtb	r3, r3
 801193c:	4619      	mov	r1, r3
 801193e:	68f8      	ldr	r0, [r7, #12]
 8011940:	f000 f9d4 	bl	8011cec <USBD_CoreFindEP>
 8011944:	4603      	mov	r3, r0
 8011946:	75bb      	strb	r3, [r7, #22]
            break;
 8011948:	e002      	b.n	8011950 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801194a:	2300      	movs	r3, #0
 801194c:	75bb      	strb	r3, [r7, #22]
            break;
 801194e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8011950:	7dbb      	ldrb	r3, [r7, #22]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d119      	bne.n	801198a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801195c:	b2db      	uxtb	r3, r3
 801195e:	2b03      	cmp	r3, #3
 8011960:	d113      	bne.n	801198a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8011962:	7dba      	ldrb	r2, [r7, #22]
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	32ae      	adds	r2, #174	@ 0xae
 8011968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801196c:	691b      	ldr	r3, [r3, #16]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d00b      	beq.n	801198a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8011972:	7dba      	ldrb	r2, [r7, #22]
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801197a:	7dba      	ldrb	r2, [r7, #22]
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	32ae      	adds	r2, #174	@ 0xae
 8011980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011984:	691b      	ldr	r3, [r3, #16]
 8011986:	68f8      	ldr	r0, [r7, #12]
 8011988:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801198a:	68f8      	ldr	r0, [r7, #12]
 801198c:	f001 f8f2 	bl	8012b74 <USBD_CtlSendStatus>
 8011990:	e032      	b.n	80119f8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8011992:	7afb      	ldrb	r3, [r7, #11]
 8011994:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011998:	b2db      	uxtb	r3, r3
 801199a:	4619      	mov	r1, r3
 801199c:	68f8      	ldr	r0, [r7, #12]
 801199e:	f000 f9a5 	bl	8011cec <USBD_CoreFindEP>
 80119a2:	4603      	mov	r3, r0
 80119a4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80119a6:	7dbb      	ldrb	r3, [r7, #22]
 80119a8:	2bff      	cmp	r3, #255	@ 0xff
 80119aa:	d025      	beq.n	80119f8 <USBD_LL_DataOutStage+0x15c>
 80119ac:	7dbb      	ldrb	r3, [r7, #22]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d122      	bne.n	80119f8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80119b8:	b2db      	uxtb	r3, r3
 80119ba:	2b03      	cmp	r3, #3
 80119bc:	d117      	bne.n	80119ee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80119be:	7dba      	ldrb	r2, [r7, #22]
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	32ae      	adds	r2, #174	@ 0xae
 80119c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119c8:	699b      	ldr	r3, [r3, #24]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d00f      	beq.n	80119ee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80119ce:	7dba      	ldrb	r2, [r7, #22]
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80119d6:	7dba      	ldrb	r2, [r7, #22]
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	32ae      	adds	r2, #174	@ 0xae
 80119dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119e0:	699b      	ldr	r3, [r3, #24]
 80119e2:	7afa      	ldrb	r2, [r7, #11]
 80119e4:	4611      	mov	r1, r2
 80119e6:	68f8      	ldr	r0, [r7, #12]
 80119e8:	4798      	blx	r3
 80119ea:	4603      	mov	r3, r0
 80119ec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80119ee:	7dfb      	ldrb	r3, [r7, #23]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d001      	beq.n	80119f8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80119f4:	7dfb      	ldrb	r3, [r7, #23]
 80119f6:	e000      	b.n	80119fa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80119f8:	2300      	movs	r3, #0
}
 80119fa:	4618      	mov	r0, r3
 80119fc:	3718      	adds	r7, #24
 80119fe:	46bd      	mov	sp, r7
 8011a00:	bd80      	pop	{r7, pc}

08011a02 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011a02:	b580      	push	{r7, lr}
 8011a04:	b086      	sub	sp, #24
 8011a06:	af00      	add	r7, sp, #0
 8011a08:	60f8      	str	r0, [r7, #12]
 8011a0a:	460b      	mov	r3, r1
 8011a0c:	607a      	str	r2, [r7, #4]
 8011a0e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8011a10:	7afb      	ldrb	r3, [r7, #11]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d16f      	bne.n	8011af6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	3314      	adds	r3, #20
 8011a1a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011a22:	2b02      	cmp	r3, #2
 8011a24:	d15a      	bne.n	8011adc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8011a26:	693b      	ldr	r3, [r7, #16]
 8011a28:	689a      	ldr	r2, [r3, #8]
 8011a2a:	693b      	ldr	r3, [r7, #16]
 8011a2c:	68db      	ldr	r3, [r3, #12]
 8011a2e:	429a      	cmp	r2, r3
 8011a30:	d914      	bls.n	8011a5c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011a32:	693b      	ldr	r3, [r7, #16]
 8011a34:	689a      	ldr	r2, [r3, #8]
 8011a36:	693b      	ldr	r3, [r7, #16]
 8011a38:	68db      	ldr	r3, [r3, #12]
 8011a3a:	1ad2      	subs	r2, r2, r3
 8011a3c:	693b      	ldr	r3, [r7, #16]
 8011a3e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011a40:	693b      	ldr	r3, [r7, #16]
 8011a42:	689b      	ldr	r3, [r3, #8]
 8011a44:	461a      	mov	r2, r3
 8011a46:	6879      	ldr	r1, [r7, #4]
 8011a48:	68f8      	ldr	r0, [r7, #12]
 8011a4a:	f001 f854 	bl	8012af6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011a4e:	2300      	movs	r3, #0
 8011a50:	2200      	movs	r2, #0
 8011a52:	2100      	movs	r1, #0
 8011a54:	68f8      	ldr	r0, [r7, #12]
 8011a56:	f005 ff5d 	bl	8017914 <USBD_LL_PrepareReceive>
 8011a5a:	e03f      	b.n	8011adc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011a5c:	693b      	ldr	r3, [r7, #16]
 8011a5e:	68da      	ldr	r2, [r3, #12]
 8011a60:	693b      	ldr	r3, [r7, #16]
 8011a62:	689b      	ldr	r3, [r3, #8]
 8011a64:	429a      	cmp	r2, r3
 8011a66:	d11c      	bne.n	8011aa2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011a68:	693b      	ldr	r3, [r7, #16]
 8011a6a:	685a      	ldr	r2, [r3, #4]
 8011a6c:	693b      	ldr	r3, [r7, #16]
 8011a6e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011a70:	429a      	cmp	r2, r3
 8011a72:	d316      	bcc.n	8011aa2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011a74:	693b      	ldr	r3, [r7, #16]
 8011a76:	685a      	ldr	r2, [r3, #4]
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011a7e:	429a      	cmp	r2, r3
 8011a80:	d20f      	bcs.n	8011aa2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011a82:	2200      	movs	r2, #0
 8011a84:	2100      	movs	r1, #0
 8011a86:	68f8      	ldr	r0, [r7, #12]
 8011a88:	f001 f835 	bl	8012af6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	2200      	movs	r2, #0
 8011a90:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011a94:	2300      	movs	r3, #0
 8011a96:	2200      	movs	r2, #0
 8011a98:	2100      	movs	r1, #0
 8011a9a:	68f8      	ldr	r0, [r7, #12]
 8011a9c:	f005 ff3a 	bl	8017914 <USBD_LL_PrepareReceive>
 8011aa0:	e01c      	b.n	8011adc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011aa8:	b2db      	uxtb	r3, r3
 8011aaa:	2b03      	cmp	r3, #3
 8011aac:	d10f      	bne.n	8011ace <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011ab4:	68db      	ldr	r3, [r3, #12]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d009      	beq.n	8011ace <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	2200      	movs	r2, #0
 8011abe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011ac8:	68db      	ldr	r3, [r3, #12]
 8011aca:	68f8      	ldr	r0, [r7, #12]
 8011acc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011ace:	2180      	movs	r1, #128	@ 0x80
 8011ad0:	68f8      	ldr	r0, [r7, #12]
 8011ad2:	f005 fe75 	bl	80177c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011ad6:	68f8      	ldr	r0, [r7, #12]
 8011ad8:	f001 f85f 	bl	8012b9a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d03a      	beq.n	8011b5c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8011ae6:	68f8      	ldr	r0, [r7, #12]
 8011ae8:	f7ff fe42 	bl	8011770 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	2200      	movs	r2, #0
 8011af0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8011af4:	e032      	b.n	8011b5c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8011af6:	7afb      	ldrb	r3, [r7, #11]
 8011af8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011afc:	b2db      	uxtb	r3, r3
 8011afe:	4619      	mov	r1, r3
 8011b00:	68f8      	ldr	r0, [r7, #12]
 8011b02:	f000 f8f3 	bl	8011cec <USBD_CoreFindEP>
 8011b06:	4603      	mov	r3, r0
 8011b08:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011b0a:	7dfb      	ldrb	r3, [r7, #23]
 8011b0c:	2bff      	cmp	r3, #255	@ 0xff
 8011b0e:	d025      	beq.n	8011b5c <USBD_LL_DataInStage+0x15a>
 8011b10:	7dfb      	ldrb	r3, [r7, #23]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d122      	bne.n	8011b5c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011b1c:	b2db      	uxtb	r3, r3
 8011b1e:	2b03      	cmp	r3, #3
 8011b20:	d11c      	bne.n	8011b5c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8011b22:	7dfa      	ldrb	r2, [r7, #23]
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	32ae      	adds	r2, #174	@ 0xae
 8011b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b2c:	695b      	ldr	r3, [r3, #20]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d014      	beq.n	8011b5c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8011b32:	7dfa      	ldrb	r2, [r7, #23]
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8011b3a:	7dfa      	ldrb	r2, [r7, #23]
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	32ae      	adds	r2, #174	@ 0xae
 8011b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b44:	695b      	ldr	r3, [r3, #20]
 8011b46:	7afa      	ldrb	r2, [r7, #11]
 8011b48:	4611      	mov	r1, r2
 8011b4a:	68f8      	ldr	r0, [r7, #12]
 8011b4c:	4798      	blx	r3
 8011b4e:	4603      	mov	r3, r0
 8011b50:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8011b52:	7dbb      	ldrb	r3, [r7, #22]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d001      	beq.n	8011b5c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8011b58:	7dbb      	ldrb	r3, [r7, #22]
 8011b5a:	e000      	b.n	8011b5e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8011b5c:	2300      	movs	r3, #0
}
 8011b5e:	4618      	mov	r0, r3
 8011b60:	3718      	adds	r7, #24
 8011b62:	46bd      	mov	sp, r7
 8011b64:	bd80      	pop	{r7, pc}

08011b66 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011b66:	b580      	push	{r7, lr}
 8011b68:	b084      	sub	sp, #16
 8011b6a:	af00      	add	r7, sp, #0
 8011b6c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8011b6e:	2300      	movs	r3, #0
 8011b70:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	2201      	movs	r2, #1
 8011b76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	2200      	movs	r2, #0
 8011b86:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	2200      	movs	r2, #0
 8011b94:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d014      	beq.n	8011bcc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011ba8:	685b      	ldr	r3, [r3, #4]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d00e      	beq.n	8011bcc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011bb4:	685b      	ldr	r3, [r3, #4]
 8011bb6:	687a      	ldr	r2, [r7, #4]
 8011bb8:	6852      	ldr	r2, [r2, #4]
 8011bba:	b2d2      	uxtb	r2, r2
 8011bbc:	4611      	mov	r1, r2
 8011bbe:	6878      	ldr	r0, [r7, #4]
 8011bc0:	4798      	blx	r3
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d001      	beq.n	8011bcc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8011bc8:	2303      	movs	r3, #3
 8011bca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011bcc:	2340      	movs	r3, #64	@ 0x40
 8011bce:	2200      	movs	r2, #0
 8011bd0:	2100      	movs	r1, #0
 8011bd2:	6878      	ldr	r0, [r7, #4]
 8011bd4:	f005 fdaf 	bl	8017736 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	2201      	movs	r2, #1
 8011bdc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	2240      	movs	r2, #64	@ 0x40
 8011be4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011be8:	2340      	movs	r3, #64	@ 0x40
 8011bea:	2200      	movs	r2, #0
 8011bec:	2180      	movs	r1, #128	@ 0x80
 8011bee:	6878      	ldr	r0, [r7, #4]
 8011bf0:	f005 fda1 	bl	8017736 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	2201      	movs	r2, #1
 8011bf8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	2240      	movs	r2, #64	@ 0x40
 8011bfe:	621a      	str	r2, [r3, #32]

  return ret;
 8011c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c02:	4618      	mov	r0, r3
 8011c04:	3710      	adds	r7, #16
 8011c06:	46bd      	mov	sp, r7
 8011c08:	bd80      	pop	{r7, pc}

08011c0a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011c0a:	b480      	push	{r7}
 8011c0c:	b083      	sub	sp, #12
 8011c0e:	af00      	add	r7, sp, #0
 8011c10:	6078      	str	r0, [r7, #4]
 8011c12:	460b      	mov	r3, r1
 8011c14:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	78fa      	ldrb	r2, [r7, #3]
 8011c1a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011c1c:	2300      	movs	r3, #0
}
 8011c1e:	4618      	mov	r0, r3
 8011c20:	370c      	adds	r7, #12
 8011c22:	46bd      	mov	sp, r7
 8011c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c28:	4770      	bx	lr

08011c2a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011c2a:	b480      	push	{r7}
 8011c2c:	b083      	sub	sp, #12
 8011c2e:	af00      	add	r7, sp, #0
 8011c30:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011c38:	b2db      	uxtb	r3, r3
 8011c3a:	2b04      	cmp	r3, #4
 8011c3c:	d006      	beq.n	8011c4c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011c44:	b2da      	uxtb	r2, r3
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	2204      	movs	r2, #4
 8011c50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8011c54:	2300      	movs	r3, #0
}
 8011c56:	4618      	mov	r0, r3
 8011c58:	370c      	adds	r7, #12
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c60:	4770      	bx	lr

08011c62 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011c62:	b480      	push	{r7}
 8011c64:	b083      	sub	sp, #12
 8011c66:	af00      	add	r7, sp, #0
 8011c68:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011c70:	b2db      	uxtb	r3, r3
 8011c72:	2b04      	cmp	r3, #4
 8011c74:	d106      	bne.n	8011c84 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8011c7c:	b2da      	uxtb	r2, r3
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8011c84:	2300      	movs	r3, #0
}
 8011c86:	4618      	mov	r0, r3
 8011c88:	370c      	adds	r7, #12
 8011c8a:	46bd      	mov	sp, r7
 8011c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c90:	4770      	bx	lr

08011c92 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011c92:	b580      	push	{r7, lr}
 8011c94:	b082      	sub	sp, #8
 8011c96:	af00      	add	r7, sp, #0
 8011c98:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011ca0:	b2db      	uxtb	r3, r3
 8011ca2:	2b03      	cmp	r3, #3
 8011ca4:	d110      	bne.n	8011cc8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d00b      	beq.n	8011cc8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011cb6:	69db      	ldr	r3, [r3, #28]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d005      	beq.n	8011cc8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011cc2:	69db      	ldr	r3, [r3, #28]
 8011cc4:	6878      	ldr	r0, [r7, #4]
 8011cc6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8011cc8:	2300      	movs	r3, #0
}
 8011cca:	4618      	mov	r0, r3
 8011ccc:	3708      	adds	r7, #8
 8011cce:	46bd      	mov	sp, r7
 8011cd0:	bd80      	pop	{r7, pc}

08011cd2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011cd2:	b480      	push	{r7}
 8011cd4:	b083      	sub	sp, #12
 8011cd6:	af00      	add	r7, sp, #0
 8011cd8:	6078      	str	r0, [r7, #4]
 8011cda:	460b      	mov	r3, r1
 8011cdc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011cde:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	370c      	adds	r7, #12
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cea:	4770      	bx	lr

08011cec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011cec:	b480      	push	{r7}
 8011cee:	b083      	sub	sp, #12
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
 8011cf4:	460b      	mov	r3, r1
 8011cf6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011cf8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	370c      	adds	r7, #12
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d04:	4770      	bx	lr

08011d06 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8011d06:	b580      	push	{r7, lr}
 8011d08:	b086      	sub	sp, #24
 8011d0a:	af00      	add	r7, sp, #0
 8011d0c:	6078      	str	r0, [r7, #4]
 8011d0e:	460b      	mov	r3, r1
 8011d10:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	885b      	ldrh	r3, [r3, #2]
 8011d22:	b29b      	uxth	r3, r3
 8011d24:	68fa      	ldr	r2, [r7, #12]
 8011d26:	7812      	ldrb	r2, [r2, #0]
 8011d28:	4293      	cmp	r3, r2
 8011d2a:	d91f      	bls.n	8011d6c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	781b      	ldrb	r3, [r3, #0]
 8011d30:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8011d32:	e013      	b.n	8011d5c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8011d34:	f107 030a 	add.w	r3, r7, #10
 8011d38:	4619      	mov	r1, r3
 8011d3a:	6978      	ldr	r0, [r7, #20]
 8011d3c:	f000 f81b 	bl	8011d76 <USBD_GetNextDesc>
 8011d40:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8011d42:	697b      	ldr	r3, [r7, #20]
 8011d44:	785b      	ldrb	r3, [r3, #1]
 8011d46:	2b05      	cmp	r3, #5
 8011d48:	d108      	bne.n	8011d5c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8011d4a:	697b      	ldr	r3, [r7, #20]
 8011d4c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8011d4e:	693b      	ldr	r3, [r7, #16]
 8011d50:	789b      	ldrb	r3, [r3, #2]
 8011d52:	78fa      	ldrb	r2, [r7, #3]
 8011d54:	429a      	cmp	r2, r3
 8011d56:	d008      	beq.n	8011d6a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8011d58:	2300      	movs	r3, #0
 8011d5a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	885b      	ldrh	r3, [r3, #2]
 8011d60:	b29a      	uxth	r2, r3
 8011d62:	897b      	ldrh	r3, [r7, #10]
 8011d64:	429a      	cmp	r2, r3
 8011d66:	d8e5      	bhi.n	8011d34 <USBD_GetEpDesc+0x2e>
 8011d68:	e000      	b.n	8011d6c <USBD_GetEpDesc+0x66>
          break;
 8011d6a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8011d6c:	693b      	ldr	r3, [r7, #16]
}
 8011d6e:	4618      	mov	r0, r3
 8011d70:	3718      	adds	r7, #24
 8011d72:	46bd      	mov	sp, r7
 8011d74:	bd80      	pop	{r7, pc}

08011d76 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8011d76:	b480      	push	{r7}
 8011d78:	b085      	sub	sp, #20
 8011d7a:	af00      	add	r7, sp, #0
 8011d7c:	6078      	str	r0, [r7, #4]
 8011d7e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8011d84:	683b      	ldr	r3, [r7, #0]
 8011d86:	881b      	ldrh	r3, [r3, #0]
 8011d88:	68fa      	ldr	r2, [r7, #12]
 8011d8a:	7812      	ldrb	r2, [r2, #0]
 8011d8c:	4413      	add	r3, r2
 8011d8e:	b29a      	uxth	r2, r3
 8011d90:	683b      	ldr	r3, [r7, #0]
 8011d92:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	781b      	ldrb	r3, [r3, #0]
 8011d98:	461a      	mov	r2, r3
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	4413      	add	r3, r2
 8011d9e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011da0:	68fb      	ldr	r3, [r7, #12]
}
 8011da2:	4618      	mov	r0, r3
 8011da4:	3714      	adds	r7, #20
 8011da6:	46bd      	mov	sp, r7
 8011da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dac:	4770      	bx	lr

08011dae <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011dae:	b480      	push	{r7}
 8011db0:	b087      	sub	sp, #28
 8011db2:	af00      	add	r7, sp, #0
 8011db4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011dba:	697b      	ldr	r3, [r7, #20]
 8011dbc:	781b      	ldrb	r3, [r3, #0]
 8011dbe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011dc0:	697b      	ldr	r3, [r7, #20]
 8011dc2:	3301      	adds	r3, #1
 8011dc4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011dc6:	697b      	ldr	r3, [r7, #20]
 8011dc8:	781b      	ldrb	r3, [r3, #0]
 8011dca:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011dcc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8011dd0:	021b      	lsls	r3, r3, #8
 8011dd2:	b21a      	sxth	r2, r3
 8011dd4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011dd8:	4313      	orrs	r3, r2
 8011dda:	b21b      	sxth	r3, r3
 8011ddc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011dde:	89fb      	ldrh	r3, [r7, #14]
}
 8011de0:	4618      	mov	r0, r3
 8011de2:	371c      	adds	r7, #28
 8011de4:	46bd      	mov	sp, r7
 8011de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dea:	4770      	bx	lr

08011dec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b084      	sub	sp, #16
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
 8011df4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011df6:	2300      	movs	r3, #0
 8011df8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011dfa:	683b      	ldr	r3, [r7, #0]
 8011dfc:	781b      	ldrb	r3, [r3, #0]
 8011dfe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011e02:	2b40      	cmp	r3, #64	@ 0x40
 8011e04:	d005      	beq.n	8011e12 <USBD_StdDevReq+0x26>
 8011e06:	2b40      	cmp	r3, #64	@ 0x40
 8011e08:	d857      	bhi.n	8011eba <USBD_StdDevReq+0xce>
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d00f      	beq.n	8011e2e <USBD_StdDevReq+0x42>
 8011e0e:	2b20      	cmp	r3, #32
 8011e10:	d153      	bne.n	8011eba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	32ae      	adds	r2, #174	@ 0xae
 8011e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e20:	689b      	ldr	r3, [r3, #8]
 8011e22:	6839      	ldr	r1, [r7, #0]
 8011e24:	6878      	ldr	r0, [r7, #4]
 8011e26:	4798      	blx	r3
 8011e28:	4603      	mov	r3, r0
 8011e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8011e2c:	e04a      	b.n	8011ec4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011e2e:	683b      	ldr	r3, [r7, #0]
 8011e30:	785b      	ldrb	r3, [r3, #1]
 8011e32:	2b09      	cmp	r3, #9
 8011e34:	d83b      	bhi.n	8011eae <USBD_StdDevReq+0xc2>
 8011e36:	a201      	add	r2, pc, #4	@ (adr r2, 8011e3c <USBD_StdDevReq+0x50>)
 8011e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e3c:	08011e91 	.word	0x08011e91
 8011e40:	08011ea5 	.word	0x08011ea5
 8011e44:	08011eaf 	.word	0x08011eaf
 8011e48:	08011e9b 	.word	0x08011e9b
 8011e4c:	08011eaf 	.word	0x08011eaf
 8011e50:	08011e6f 	.word	0x08011e6f
 8011e54:	08011e65 	.word	0x08011e65
 8011e58:	08011eaf 	.word	0x08011eaf
 8011e5c:	08011e87 	.word	0x08011e87
 8011e60:	08011e79 	.word	0x08011e79
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011e64:	6839      	ldr	r1, [r7, #0]
 8011e66:	6878      	ldr	r0, [r7, #4]
 8011e68:	f000 fa3c 	bl	80122e4 <USBD_GetDescriptor>
          break;
 8011e6c:	e024      	b.n	8011eb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011e6e:	6839      	ldr	r1, [r7, #0]
 8011e70:	6878      	ldr	r0, [r7, #4]
 8011e72:	f000 fbcb 	bl	801260c <USBD_SetAddress>
          break;
 8011e76:	e01f      	b.n	8011eb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011e78:	6839      	ldr	r1, [r7, #0]
 8011e7a:	6878      	ldr	r0, [r7, #4]
 8011e7c:	f000 fc0a 	bl	8012694 <USBD_SetConfig>
 8011e80:	4603      	mov	r3, r0
 8011e82:	73fb      	strb	r3, [r7, #15]
          break;
 8011e84:	e018      	b.n	8011eb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011e86:	6839      	ldr	r1, [r7, #0]
 8011e88:	6878      	ldr	r0, [r7, #4]
 8011e8a:	f000 fcad 	bl	80127e8 <USBD_GetConfig>
          break;
 8011e8e:	e013      	b.n	8011eb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011e90:	6839      	ldr	r1, [r7, #0]
 8011e92:	6878      	ldr	r0, [r7, #4]
 8011e94:	f000 fcde 	bl	8012854 <USBD_GetStatus>
          break;
 8011e98:	e00e      	b.n	8011eb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011e9a:	6839      	ldr	r1, [r7, #0]
 8011e9c:	6878      	ldr	r0, [r7, #4]
 8011e9e:	f000 fd0d 	bl	80128bc <USBD_SetFeature>
          break;
 8011ea2:	e009      	b.n	8011eb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011ea4:	6839      	ldr	r1, [r7, #0]
 8011ea6:	6878      	ldr	r0, [r7, #4]
 8011ea8:	f000 fd31 	bl	801290e <USBD_ClrFeature>
          break;
 8011eac:	e004      	b.n	8011eb8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8011eae:	6839      	ldr	r1, [r7, #0]
 8011eb0:	6878      	ldr	r0, [r7, #4]
 8011eb2:	f000 fd88 	bl	80129c6 <USBD_CtlError>
          break;
 8011eb6:	bf00      	nop
      }
      break;
 8011eb8:	e004      	b.n	8011ec4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8011eba:	6839      	ldr	r1, [r7, #0]
 8011ebc:	6878      	ldr	r0, [r7, #4]
 8011ebe:	f000 fd82 	bl	80129c6 <USBD_CtlError>
      break;
 8011ec2:	bf00      	nop
  }

  return ret;
 8011ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	3710      	adds	r7, #16
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	bd80      	pop	{r7, pc}
 8011ece:	bf00      	nop

08011ed0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ed0:	b580      	push	{r7, lr}
 8011ed2:	b084      	sub	sp, #16
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	6078      	str	r0, [r7, #4]
 8011ed8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011eda:	2300      	movs	r3, #0
 8011edc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011ede:	683b      	ldr	r3, [r7, #0]
 8011ee0:	781b      	ldrb	r3, [r3, #0]
 8011ee2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011ee6:	2b40      	cmp	r3, #64	@ 0x40
 8011ee8:	d005      	beq.n	8011ef6 <USBD_StdItfReq+0x26>
 8011eea:	2b40      	cmp	r3, #64	@ 0x40
 8011eec:	d852      	bhi.n	8011f94 <USBD_StdItfReq+0xc4>
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d001      	beq.n	8011ef6 <USBD_StdItfReq+0x26>
 8011ef2:	2b20      	cmp	r3, #32
 8011ef4:	d14e      	bne.n	8011f94 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011efc:	b2db      	uxtb	r3, r3
 8011efe:	3b01      	subs	r3, #1
 8011f00:	2b02      	cmp	r3, #2
 8011f02:	d840      	bhi.n	8011f86 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011f04:	683b      	ldr	r3, [r7, #0]
 8011f06:	889b      	ldrh	r3, [r3, #4]
 8011f08:	b2db      	uxtb	r3, r3
 8011f0a:	2b01      	cmp	r3, #1
 8011f0c:	d836      	bhi.n	8011f7c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8011f0e:	683b      	ldr	r3, [r7, #0]
 8011f10:	889b      	ldrh	r3, [r3, #4]
 8011f12:	b2db      	uxtb	r3, r3
 8011f14:	4619      	mov	r1, r3
 8011f16:	6878      	ldr	r0, [r7, #4]
 8011f18:	f7ff fedb 	bl	8011cd2 <USBD_CoreFindIF>
 8011f1c:	4603      	mov	r3, r0
 8011f1e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011f20:	7bbb      	ldrb	r3, [r7, #14]
 8011f22:	2bff      	cmp	r3, #255	@ 0xff
 8011f24:	d01d      	beq.n	8011f62 <USBD_StdItfReq+0x92>
 8011f26:	7bbb      	ldrb	r3, [r7, #14]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d11a      	bne.n	8011f62 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8011f2c:	7bba      	ldrb	r2, [r7, #14]
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	32ae      	adds	r2, #174	@ 0xae
 8011f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f36:	689b      	ldr	r3, [r3, #8]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d00f      	beq.n	8011f5c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8011f3c:	7bba      	ldrb	r2, [r7, #14]
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011f44:	7bba      	ldrb	r2, [r7, #14]
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	32ae      	adds	r2, #174	@ 0xae
 8011f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f4e:	689b      	ldr	r3, [r3, #8]
 8011f50:	6839      	ldr	r1, [r7, #0]
 8011f52:	6878      	ldr	r0, [r7, #4]
 8011f54:	4798      	blx	r3
 8011f56:	4603      	mov	r3, r0
 8011f58:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011f5a:	e004      	b.n	8011f66 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8011f5c:	2303      	movs	r3, #3
 8011f5e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011f60:	e001      	b.n	8011f66 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8011f62:	2303      	movs	r3, #3
 8011f64:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011f66:	683b      	ldr	r3, [r7, #0]
 8011f68:	88db      	ldrh	r3, [r3, #6]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d110      	bne.n	8011f90 <USBD_StdItfReq+0xc0>
 8011f6e:	7bfb      	ldrb	r3, [r7, #15]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d10d      	bne.n	8011f90 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011f74:	6878      	ldr	r0, [r7, #4]
 8011f76:	f000 fdfd 	bl	8012b74 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011f7a:	e009      	b.n	8011f90 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8011f7c:	6839      	ldr	r1, [r7, #0]
 8011f7e:	6878      	ldr	r0, [r7, #4]
 8011f80:	f000 fd21 	bl	80129c6 <USBD_CtlError>
          break;
 8011f84:	e004      	b.n	8011f90 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8011f86:	6839      	ldr	r1, [r7, #0]
 8011f88:	6878      	ldr	r0, [r7, #4]
 8011f8a:	f000 fd1c 	bl	80129c6 <USBD_CtlError>
          break;
 8011f8e:	e000      	b.n	8011f92 <USBD_StdItfReq+0xc2>
          break;
 8011f90:	bf00      	nop
      }
      break;
 8011f92:	e004      	b.n	8011f9e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8011f94:	6839      	ldr	r1, [r7, #0]
 8011f96:	6878      	ldr	r0, [r7, #4]
 8011f98:	f000 fd15 	bl	80129c6 <USBD_CtlError>
      break;
 8011f9c:	bf00      	nop
  }

  return ret;
 8011f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	3710      	adds	r7, #16
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	bd80      	pop	{r7, pc}

08011fa8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b084      	sub	sp, #16
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
 8011fb0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8011fb6:	683b      	ldr	r3, [r7, #0]
 8011fb8:	889b      	ldrh	r3, [r3, #4]
 8011fba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011fbc:	683b      	ldr	r3, [r7, #0]
 8011fbe:	781b      	ldrb	r3, [r3, #0]
 8011fc0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011fc4:	2b40      	cmp	r3, #64	@ 0x40
 8011fc6:	d007      	beq.n	8011fd8 <USBD_StdEPReq+0x30>
 8011fc8:	2b40      	cmp	r3, #64	@ 0x40
 8011fca:	f200 817f 	bhi.w	80122cc <USBD_StdEPReq+0x324>
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d02a      	beq.n	8012028 <USBD_StdEPReq+0x80>
 8011fd2:	2b20      	cmp	r3, #32
 8011fd4:	f040 817a 	bne.w	80122cc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8011fd8:	7bbb      	ldrb	r3, [r7, #14]
 8011fda:	4619      	mov	r1, r3
 8011fdc:	6878      	ldr	r0, [r7, #4]
 8011fde:	f7ff fe85 	bl	8011cec <USBD_CoreFindEP>
 8011fe2:	4603      	mov	r3, r0
 8011fe4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011fe6:	7b7b      	ldrb	r3, [r7, #13]
 8011fe8:	2bff      	cmp	r3, #255	@ 0xff
 8011fea:	f000 8174 	beq.w	80122d6 <USBD_StdEPReq+0x32e>
 8011fee:	7b7b      	ldrb	r3, [r7, #13]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	f040 8170 	bne.w	80122d6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8011ff6:	7b7a      	ldrb	r2, [r7, #13]
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8011ffe:	7b7a      	ldrb	r2, [r7, #13]
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	32ae      	adds	r2, #174	@ 0xae
 8012004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012008:	689b      	ldr	r3, [r3, #8]
 801200a:	2b00      	cmp	r3, #0
 801200c:	f000 8163 	beq.w	80122d6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8012010:	7b7a      	ldrb	r2, [r7, #13]
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	32ae      	adds	r2, #174	@ 0xae
 8012016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801201a:	689b      	ldr	r3, [r3, #8]
 801201c:	6839      	ldr	r1, [r7, #0]
 801201e:	6878      	ldr	r0, [r7, #4]
 8012020:	4798      	blx	r3
 8012022:	4603      	mov	r3, r0
 8012024:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8012026:	e156      	b.n	80122d6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012028:	683b      	ldr	r3, [r7, #0]
 801202a:	785b      	ldrb	r3, [r3, #1]
 801202c:	2b03      	cmp	r3, #3
 801202e:	d008      	beq.n	8012042 <USBD_StdEPReq+0x9a>
 8012030:	2b03      	cmp	r3, #3
 8012032:	f300 8145 	bgt.w	80122c0 <USBD_StdEPReq+0x318>
 8012036:	2b00      	cmp	r3, #0
 8012038:	f000 809b 	beq.w	8012172 <USBD_StdEPReq+0x1ca>
 801203c:	2b01      	cmp	r3, #1
 801203e:	d03c      	beq.n	80120ba <USBD_StdEPReq+0x112>
 8012040:	e13e      	b.n	80122c0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012048:	b2db      	uxtb	r3, r3
 801204a:	2b02      	cmp	r3, #2
 801204c:	d002      	beq.n	8012054 <USBD_StdEPReq+0xac>
 801204e:	2b03      	cmp	r3, #3
 8012050:	d016      	beq.n	8012080 <USBD_StdEPReq+0xd8>
 8012052:	e02c      	b.n	80120ae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012054:	7bbb      	ldrb	r3, [r7, #14]
 8012056:	2b00      	cmp	r3, #0
 8012058:	d00d      	beq.n	8012076 <USBD_StdEPReq+0xce>
 801205a:	7bbb      	ldrb	r3, [r7, #14]
 801205c:	2b80      	cmp	r3, #128	@ 0x80
 801205e:	d00a      	beq.n	8012076 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012060:	7bbb      	ldrb	r3, [r7, #14]
 8012062:	4619      	mov	r1, r3
 8012064:	6878      	ldr	r0, [r7, #4]
 8012066:	f005 fbab 	bl	80177c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801206a:	2180      	movs	r1, #128	@ 0x80
 801206c:	6878      	ldr	r0, [r7, #4]
 801206e:	f005 fba7 	bl	80177c0 <USBD_LL_StallEP>
 8012072:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012074:	e020      	b.n	80120b8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8012076:	6839      	ldr	r1, [r7, #0]
 8012078:	6878      	ldr	r0, [r7, #4]
 801207a:	f000 fca4 	bl	80129c6 <USBD_CtlError>
              break;
 801207e:	e01b      	b.n	80120b8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012080:	683b      	ldr	r3, [r7, #0]
 8012082:	885b      	ldrh	r3, [r3, #2]
 8012084:	2b00      	cmp	r3, #0
 8012086:	d10e      	bne.n	80120a6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012088:	7bbb      	ldrb	r3, [r7, #14]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d00b      	beq.n	80120a6 <USBD_StdEPReq+0xfe>
 801208e:	7bbb      	ldrb	r3, [r7, #14]
 8012090:	2b80      	cmp	r3, #128	@ 0x80
 8012092:	d008      	beq.n	80120a6 <USBD_StdEPReq+0xfe>
 8012094:	683b      	ldr	r3, [r7, #0]
 8012096:	88db      	ldrh	r3, [r3, #6]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d104      	bne.n	80120a6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801209c:	7bbb      	ldrb	r3, [r7, #14]
 801209e:	4619      	mov	r1, r3
 80120a0:	6878      	ldr	r0, [r7, #4]
 80120a2:	f005 fb8d 	bl	80177c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80120a6:	6878      	ldr	r0, [r7, #4]
 80120a8:	f000 fd64 	bl	8012b74 <USBD_CtlSendStatus>

              break;
 80120ac:	e004      	b.n	80120b8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80120ae:	6839      	ldr	r1, [r7, #0]
 80120b0:	6878      	ldr	r0, [r7, #4]
 80120b2:	f000 fc88 	bl	80129c6 <USBD_CtlError>
              break;
 80120b6:	bf00      	nop
          }
          break;
 80120b8:	e107      	b.n	80122ca <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80120c0:	b2db      	uxtb	r3, r3
 80120c2:	2b02      	cmp	r3, #2
 80120c4:	d002      	beq.n	80120cc <USBD_StdEPReq+0x124>
 80120c6:	2b03      	cmp	r3, #3
 80120c8:	d016      	beq.n	80120f8 <USBD_StdEPReq+0x150>
 80120ca:	e04b      	b.n	8012164 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80120cc:	7bbb      	ldrb	r3, [r7, #14]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d00d      	beq.n	80120ee <USBD_StdEPReq+0x146>
 80120d2:	7bbb      	ldrb	r3, [r7, #14]
 80120d4:	2b80      	cmp	r3, #128	@ 0x80
 80120d6:	d00a      	beq.n	80120ee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80120d8:	7bbb      	ldrb	r3, [r7, #14]
 80120da:	4619      	mov	r1, r3
 80120dc:	6878      	ldr	r0, [r7, #4]
 80120de:	f005 fb6f 	bl	80177c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80120e2:	2180      	movs	r1, #128	@ 0x80
 80120e4:	6878      	ldr	r0, [r7, #4]
 80120e6:	f005 fb6b 	bl	80177c0 <USBD_LL_StallEP>
 80120ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80120ec:	e040      	b.n	8012170 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80120ee:	6839      	ldr	r1, [r7, #0]
 80120f0:	6878      	ldr	r0, [r7, #4]
 80120f2:	f000 fc68 	bl	80129c6 <USBD_CtlError>
              break;
 80120f6:	e03b      	b.n	8012170 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80120f8:	683b      	ldr	r3, [r7, #0]
 80120fa:	885b      	ldrh	r3, [r3, #2]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d136      	bne.n	801216e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012100:	7bbb      	ldrb	r3, [r7, #14]
 8012102:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012106:	2b00      	cmp	r3, #0
 8012108:	d004      	beq.n	8012114 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801210a:	7bbb      	ldrb	r3, [r7, #14]
 801210c:	4619      	mov	r1, r3
 801210e:	6878      	ldr	r0, [r7, #4]
 8012110:	f005 fb75 	bl	80177fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8012114:	6878      	ldr	r0, [r7, #4]
 8012116:	f000 fd2d 	bl	8012b74 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801211a:	7bbb      	ldrb	r3, [r7, #14]
 801211c:	4619      	mov	r1, r3
 801211e:	6878      	ldr	r0, [r7, #4]
 8012120:	f7ff fde4 	bl	8011cec <USBD_CoreFindEP>
 8012124:	4603      	mov	r3, r0
 8012126:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012128:	7b7b      	ldrb	r3, [r7, #13]
 801212a:	2bff      	cmp	r3, #255	@ 0xff
 801212c:	d01f      	beq.n	801216e <USBD_StdEPReq+0x1c6>
 801212e:	7b7b      	ldrb	r3, [r7, #13]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d11c      	bne.n	801216e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8012134:	7b7a      	ldrb	r2, [r7, #13]
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801213c:	7b7a      	ldrb	r2, [r7, #13]
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	32ae      	adds	r2, #174	@ 0xae
 8012142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012146:	689b      	ldr	r3, [r3, #8]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d010      	beq.n	801216e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801214c:	7b7a      	ldrb	r2, [r7, #13]
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	32ae      	adds	r2, #174	@ 0xae
 8012152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012156:	689b      	ldr	r3, [r3, #8]
 8012158:	6839      	ldr	r1, [r7, #0]
 801215a:	6878      	ldr	r0, [r7, #4]
 801215c:	4798      	blx	r3
 801215e:	4603      	mov	r3, r0
 8012160:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8012162:	e004      	b.n	801216e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8012164:	6839      	ldr	r1, [r7, #0]
 8012166:	6878      	ldr	r0, [r7, #4]
 8012168:	f000 fc2d 	bl	80129c6 <USBD_CtlError>
              break;
 801216c:	e000      	b.n	8012170 <USBD_StdEPReq+0x1c8>
              break;
 801216e:	bf00      	nop
          }
          break;
 8012170:	e0ab      	b.n	80122ca <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012178:	b2db      	uxtb	r3, r3
 801217a:	2b02      	cmp	r3, #2
 801217c:	d002      	beq.n	8012184 <USBD_StdEPReq+0x1dc>
 801217e:	2b03      	cmp	r3, #3
 8012180:	d032      	beq.n	80121e8 <USBD_StdEPReq+0x240>
 8012182:	e097      	b.n	80122b4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012184:	7bbb      	ldrb	r3, [r7, #14]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d007      	beq.n	801219a <USBD_StdEPReq+0x1f2>
 801218a:	7bbb      	ldrb	r3, [r7, #14]
 801218c:	2b80      	cmp	r3, #128	@ 0x80
 801218e:	d004      	beq.n	801219a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8012190:	6839      	ldr	r1, [r7, #0]
 8012192:	6878      	ldr	r0, [r7, #4]
 8012194:	f000 fc17 	bl	80129c6 <USBD_CtlError>
                break;
 8012198:	e091      	b.n	80122be <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801219a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	da0b      	bge.n	80121ba <USBD_StdEPReq+0x212>
 80121a2:	7bbb      	ldrb	r3, [r7, #14]
 80121a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80121a8:	4613      	mov	r3, r2
 80121aa:	009b      	lsls	r3, r3, #2
 80121ac:	4413      	add	r3, r2
 80121ae:	009b      	lsls	r3, r3, #2
 80121b0:	3310      	adds	r3, #16
 80121b2:	687a      	ldr	r2, [r7, #4]
 80121b4:	4413      	add	r3, r2
 80121b6:	3304      	adds	r3, #4
 80121b8:	e00b      	b.n	80121d2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80121ba:	7bbb      	ldrb	r3, [r7, #14]
 80121bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80121c0:	4613      	mov	r3, r2
 80121c2:	009b      	lsls	r3, r3, #2
 80121c4:	4413      	add	r3, r2
 80121c6:	009b      	lsls	r3, r3, #2
 80121c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80121cc:	687a      	ldr	r2, [r7, #4]
 80121ce:	4413      	add	r3, r2
 80121d0:	3304      	adds	r3, #4
 80121d2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80121d4:	68bb      	ldr	r3, [r7, #8]
 80121d6:	2200      	movs	r2, #0
 80121d8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80121da:	68bb      	ldr	r3, [r7, #8]
 80121dc:	2202      	movs	r2, #2
 80121de:	4619      	mov	r1, r3
 80121e0:	6878      	ldr	r0, [r7, #4]
 80121e2:	f000 fc6d 	bl	8012ac0 <USBD_CtlSendData>
              break;
 80121e6:	e06a      	b.n	80122be <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80121e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	da11      	bge.n	8012214 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80121f0:	7bbb      	ldrb	r3, [r7, #14]
 80121f2:	f003 020f 	and.w	r2, r3, #15
 80121f6:	6879      	ldr	r1, [r7, #4]
 80121f8:	4613      	mov	r3, r2
 80121fa:	009b      	lsls	r3, r3, #2
 80121fc:	4413      	add	r3, r2
 80121fe:	009b      	lsls	r3, r3, #2
 8012200:	440b      	add	r3, r1
 8012202:	3324      	adds	r3, #36	@ 0x24
 8012204:	881b      	ldrh	r3, [r3, #0]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d117      	bne.n	801223a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801220a:	6839      	ldr	r1, [r7, #0]
 801220c:	6878      	ldr	r0, [r7, #4]
 801220e:	f000 fbda 	bl	80129c6 <USBD_CtlError>
                  break;
 8012212:	e054      	b.n	80122be <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012214:	7bbb      	ldrb	r3, [r7, #14]
 8012216:	f003 020f 	and.w	r2, r3, #15
 801221a:	6879      	ldr	r1, [r7, #4]
 801221c:	4613      	mov	r3, r2
 801221e:	009b      	lsls	r3, r3, #2
 8012220:	4413      	add	r3, r2
 8012222:	009b      	lsls	r3, r3, #2
 8012224:	440b      	add	r3, r1
 8012226:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801222a:	881b      	ldrh	r3, [r3, #0]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d104      	bne.n	801223a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8012230:	6839      	ldr	r1, [r7, #0]
 8012232:	6878      	ldr	r0, [r7, #4]
 8012234:	f000 fbc7 	bl	80129c6 <USBD_CtlError>
                  break;
 8012238:	e041      	b.n	80122be <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801223a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801223e:	2b00      	cmp	r3, #0
 8012240:	da0b      	bge.n	801225a <USBD_StdEPReq+0x2b2>
 8012242:	7bbb      	ldrb	r3, [r7, #14]
 8012244:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012248:	4613      	mov	r3, r2
 801224a:	009b      	lsls	r3, r3, #2
 801224c:	4413      	add	r3, r2
 801224e:	009b      	lsls	r3, r3, #2
 8012250:	3310      	adds	r3, #16
 8012252:	687a      	ldr	r2, [r7, #4]
 8012254:	4413      	add	r3, r2
 8012256:	3304      	adds	r3, #4
 8012258:	e00b      	b.n	8012272 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801225a:	7bbb      	ldrb	r3, [r7, #14]
 801225c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012260:	4613      	mov	r3, r2
 8012262:	009b      	lsls	r3, r3, #2
 8012264:	4413      	add	r3, r2
 8012266:	009b      	lsls	r3, r3, #2
 8012268:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801226c:	687a      	ldr	r2, [r7, #4]
 801226e:	4413      	add	r3, r2
 8012270:	3304      	adds	r3, #4
 8012272:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012274:	7bbb      	ldrb	r3, [r7, #14]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d002      	beq.n	8012280 <USBD_StdEPReq+0x2d8>
 801227a:	7bbb      	ldrb	r3, [r7, #14]
 801227c:	2b80      	cmp	r3, #128	@ 0x80
 801227e:	d103      	bne.n	8012288 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8012280:	68bb      	ldr	r3, [r7, #8]
 8012282:	2200      	movs	r2, #0
 8012284:	601a      	str	r2, [r3, #0]
 8012286:	e00e      	b.n	80122a6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8012288:	7bbb      	ldrb	r3, [r7, #14]
 801228a:	4619      	mov	r1, r3
 801228c:	6878      	ldr	r0, [r7, #4]
 801228e:	f005 fad5 	bl	801783c <USBD_LL_IsStallEP>
 8012292:	4603      	mov	r3, r0
 8012294:	2b00      	cmp	r3, #0
 8012296:	d003      	beq.n	80122a0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8012298:	68bb      	ldr	r3, [r7, #8]
 801229a:	2201      	movs	r2, #1
 801229c:	601a      	str	r2, [r3, #0]
 801229e:	e002      	b.n	80122a6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80122a0:	68bb      	ldr	r3, [r7, #8]
 80122a2:	2200      	movs	r2, #0
 80122a4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80122a6:	68bb      	ldr	r3, [r7, #8]
 80122a8:	2202      	movs	r2, #2
 80122aa:	4619      	mov	r1, r3
 80122ac:	6878      	ldr	r0, [r7, #4]
 80122ae:	f000 fc07 	bl	8012ac0 <USBD_CtlSendData>
              break;
 80122b2:	e004      	b.n	80122be <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80122b4:	6839      	ldr	r1, [r7, #0]
 80122b6:	6878      	ldr	r0, [r7, #4]
 80122b8:	f000 fb85 	bl	80129c6 <USBD_CtlError>
              break;
 80122bc:	bf00      	nop
          }
          break;
 80122be:	e004      	b.n	80122ca <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80122c0:	6839      	ldr	r1, [r7, #0]
 80122c2:	6878      	ldr	r0, [r7, #4]
 80122c4:	f000 fb7f 	bl	80129c6 <USBD_CtlError>
          break;
 80122c8:	bf00      	nop
      }
      break;
 80122ca:	e005      	b.n	80122d8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80122cc:	6839      	ldr	r1, [r7, #0]
 80122ce:	6878      	ldr	r0, [r7, #4]
 80122d0:	f000 fb79 	bl	80129c6 <USBD_CtlError>
      break;
 80122d4:	e000      	b.n	80122d8 <USBD_StdEPReq+0x330>
      break;
 80122d6:	bf00      	nop
  }

  return ret;
 80122d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80122da:	4618      	mov	r0, r3
 80122dc:	3710      	adds	r7, #16
 80122de:	46bd      	mov	sp, r7
 80122e0:	bd80      	pop	{r7, pc}
	...

080122e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b084      	sub	sp, #16
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	6078      	str	r0, [r7, #4]
 80122ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80122ee:	2300      	movs	r3, #0
 80122f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80122f2:	2300      	movs	r3, #0
 80122f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80122f6:	2300      	movs	r3, #0
 80122f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80122fa:	683b      	ldr	r3, [r7, #0]
 80122fc:	885b      	ldrh	r3, [r3, #2]
 80122fe:	0a1b      	lsrs	r3, r3, #8
 8012300:	b29b      	uxth	r3, r3
 8012302:	3b01      	subs	r3, #1
 8012304:	2b0e      	cmp	r3, #14
 8012306:	f200 8152 	bhi.w	80125ae <USBD_GetDescriptor+0x2ca>
 801230a:	a201      	add	r2, pc, #4	@ (adr r2, 8012310 <USBD_GetDescriptor+0x2c>)
 801230c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012310:	08012381 	.word	0x08012381
 8012314:	08012399 	.word	0x08012399
 8012318:	080123d9 	.word	0x080123d9
 801231c:	080125af 	.word	0x080125af
 8012320:	080125af 	.word	0x080125af
 8012324:	0801254f 	.word	0x0801254f
 8012328:	0801257b 	.word	0x0801257b
 801232c:	080125af 	.word	0x080125af
 8012330:	080125af 	.word	0x080125af
 8012334:	080125af 	.word	0x080125af
 8012338:	080125af 	.word	0x080125af
 801233c:	080125af 	.word	0x080125af
 8012340:	080125af 	.word	0x080125af
 8012344:	080125af 	.word	0x080125af
 8012348:	0801234d 	.word	0x0801234d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012352:	69db      	ldr	r3, [r3, #28]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d00b      	beq.n	8012370 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801235e:	69db      	ldr	r3, [r3, #28]
 8012360:	687a      	ldr	r2, [r7, #4]
 8012362:	7c12      	ldrb	r2, [r2, #16]
 8012364:	f107 0108 	add.w	r1, r7, #8
 8012368:	4610      	mov	r0, r2
 801236a:	4798      	blx	r3
 801236c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801236e:	e126      	b.n	80125be <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012370:	6839      	ldr	r1, [r7, #0]
 8012372:	6878      	ldr	r0, [r7, #4]
 8012374:	f000 fb27 	bl	80129c6 <USBD_CtlError>
        err++;
 8012378:	7afb      	ldrb	r3, [r7, #11]
 801237a:	3301      	adds	r3, #1
 801237c:	72fb      	strb	r3, [r7, #11]
      break;
 801237e:	e11e      	b.n	80125be <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	687a      	ldr	r2, [r7, #4]
 801238a:	7c12      	ldrb	r2, [r2, #16]
 801238c:	f107 0108 	add.w	r1, r7, #8
 8012390:	4610      	mov	r0, r2
 8012392:	4798      	blx	r3
 8012394:	60f8      	str	r0, [r7, #12]
      break;
 8012396:	e112      	b.n	80125be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	7c1b      	ldrb	r3, [r3, #16]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d10d      	bne.n	80123bc <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80123a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80123a8:	f107 0208 	add.w	r2, r7, #8
 80123ac:	4610      	mov	r0, r2
 80123ae:	4798      	blx	r3
 80123b0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	3301      	adds	r3, #1
 80123b6:	2202      	movs	r2, #2
 80123b8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80123ba:	e100      	b.n	80125be <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80123c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80123c4:	f107 0208 	add.w	r2, r7, #8
 80123c8:	4610      	mov	r0, r2
 80123ca:	4798      	blx	r3
 80123cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	3301      	adds	r3, #1
 80123d2:	2202      	movs	r2, #2
 80123d4:	701a      	strb	r2, [r3, #0]
      break;
 80123d6:	e0f2      	b.n	80125be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80123d8:	683b      	ldr	r3, [r7, #0]
 80123da:	885b      	ldrh	r3, [r3, #2]
 80123dc:	b2db      	uxtb	r3, r3
 80123de:	2b05      	cmp	r3, #5
 80123e0:	f200 80ac 	bhi.w	801253c <USBD_GetDescriptor+0x258>
 80123e4:	a201      	add	r2, pc, #4	@ (adr r2, 80123ec <USBD_GetDescriptor+0x108>)
 80123e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123ea:	bf00      	nop
 80123ec:	08012405 	.word	0x08012405
 80123f0:	08012439 	.word	0x08012439
 80123f4:	0801246d 	.word	0x0801246d
 80123f8:	080124a1 	.word	0x080124a1
 80123fc:	080124d5 	.word	0x080124d5
 8012400:	08012509 	.word	0x08012509
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801240a:	685b      	ldr	r3, [r3, #4]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d00b      	beq.n	8012428 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012416:	685b      	ldr	r3, [r3, #4]
 8012418:	687a      	ldr	r2, [r7, #4]
 801241a:	7c12      	ldrb	r2, [r2, #16]
 801241c:	f107 0108 	add.w	r1, r7, #8
 8012420:	4610      	mov	r0, r2
 8012422:	4798      	blx	r3
 8012424:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012426:	e091      	b.n	801254c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012428:	6839      	ldr	r1, [r7, #0]
 801242a:	6878      	ldr	r0, [r7, #4]
 801242c:	f000 facb 	bl	80129c6 <USBD_CtlError>
            err++;
 8012430:	7afb      	ldrb	r3, [r7, #11]
 8012432:	3301      	adds	r3, #1
 8012434:	72fb      	strb	r3, [r7, #11]
          break;
 8012436:	e089      	b.n	801254c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801243e:	689b      	ldr	r3, [r3, #8]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d00b      	beq.n	801245c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801244a:	689b      	ldr	r3, [r3, #8]
 801244c:	687a      	ldr	r2, [r7, #4]
 801244e:	7c12      	ldrb	r2, [r2, #16]
 8012450:	f107 0108 	add.w	r1, r7, #8
 8012454:	4610      	mov	r0, r2
 8012456:	4798      	blx	r3
 8012458:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801245a:	e077      	b.n	801254c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801245c:	6839      	ldr	r1, [r7, #0]
 801245e:	6878      	ldr	r0, [r7, #4]
 8012460:	f000 fab1 	bl	80129c6 <USBD_CtlError>
            err++;
 8012464:	7afb      	ldrb	r3, [r7, #11]
 8012466:	3301      	adds	r3, #1
 8012468:	72fb      	strb	r3, [r7, #11]
          break;
 801246a:	e06f      	b.n	801254c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012472:	68db      	ldr	r3, [r3, #12]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d00b      	beq.n	8012490 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801247e:	68db      	ldr	r3, [r3, #12]
 8012480:	687a      	ldr	r2, [r7, #4]
 8012482:	7c12      	ldrb	r2, [r2, #16]
 8012484:	f107 0108 	add.w	r1, r7, #8
 8012488:	4610      	mov	r0, r2
 801248a:	4798      	blx	r3
 801248c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801248e:	e05d      	b.n	801254c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012490:	6839      	ldr	r1, [r7, #0]
 8012492:	6878      	ldr	r0, [r7, #4]
 8012494:	f000 fa97 	bl	80129c6 <USBD_CtlError>
            err++;
 8012498:	7afb      	ldrb	r3, [r7, #11]
 801249a:	3301      	adds	r3, #1
 801249c:	72fb      	strb	r3, [r7, #11]
          break;
 801249e:	e055      	b.n	801254c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80124a6:	691b      	ldr	r3, [r3, #16]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d00b      	beq.n	80124c4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80124b2:	691b      	ldr	r3, [r3, #16]
 80124b4:	687a      	ldr	r2, [r7, #4]
 80124b6:	7c12      	ldrb	r2, [r2, #16]
 80124b8:	f107 0108 	add.w	r1, r7, #8
 80124bc:	4610      	mov	r0, r2
 80124be:	4798      	blx	r3
 80124c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80124c2:	e043      	b.n	801254c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80124c4:	6839      	ldr	r1, [r7, #0]
 80124c6:	6878      	ldr	r0, [r7, #4]
 80124c8:	f000 fa7d 	bl	80129c6 <USBD_CtlError>
            err++;
 80124cc:	7afb      	ldrb	r3, [r7, #11]
 80124ce:	3301      	adds	r3, #1
 80124d0:	72fb      	strb	r3, [r7, #11]
          break;
 80124d2:	e03b      	b.n	801254c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80124da:	695b      	ldr	r3, [r3, #20]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d00b      	beq.n	80124f8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80124e6:	695b      	ldr	r3, [r3, #20]
 80124e8:	687a      	ldr	r2, [r7, #4]
 80124ea:	7c12      	ldrb	r2, [r2, #16]
 80124ec:	f107 0108 	add.w	r1, r7, #8
 80124f0:	4610      	mov	r0, r2
 80124f2:	4798      	blx	r3
 80124f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80124f6:	e029      	b.n	801254c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80124f8:	6839      	ldr	r1, [r7, #0]
 80124fa:	6878      	ldr	r0, [r7, #4]
 80124fc:	f000 fa63 	bl	80129c6 <USBD_CtlError>
            err++;
 8012500:	7afb      	ldrb	r3, [r7, #11]
 8012502:	3301      	adds	r3, #1
 8012504:	72fb      	strb	r3, [r7, #11]
          break;
 8012506:	e021      	b.n	801254c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801250e:	699b      	ldr	r3, [r3, #24]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d00b      	beq.n	801252c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801251a:	699b      	ldr	r3, [r3, #24]
 801251c:	687a      	ldr	r2, [r7, #4]
 801251e:	7c12      	ldrb	r2, [r2, #16]
 8012520:	f107 0108 	add.w	r1, r7, #8
 8012524:	4610      	mov	r0, r2
 8012526:	4798      	blx	r3
 8012528:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801252a:	e00f      	b.n	801254c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801252c:	6839      	ldr	r1, [r7, #0]
 801252e:	6878      	ldr	r0, [r7, #4]
 8012530:	f000 fa49 	bl	80129c6 <USBD_CtlError>
            err++;
 8012534:	7afb      	ldrb	r3, [r7, #11]
 8012536:	3301      	adds	r3, #1
 8012538:	72fb      	strb	r3, [r7, #11]
          break;
 801253a:	e007      	b.n	801254c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801253c:	6839      	ldr	r1, [r7, #0]
 801253e:	6878      	ldr	r0, [r7, #4]
 8012540:	f000 fa41 	bl	80129c6 <USBD_CtlError>
          err++;
 8012544:	7afb      	ldrb	r3, [r7, #11]
 8012546:	3301      	adds	r3, #1
 8012548:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801254a:	bf00      	nop
      }
      break;
 801254c:	e037      	b.n	80125be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	7c1b      	ldrb	r3, [r3, #16]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d109      	bne.n	801256a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801255c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801255e:	f107 0208 	add.w	r2, r7, #8
 8012562:	4610      	mov	r0, r2
 8012564:	4798      	blx	r3
 8012566:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012568:	e029      	b.n	80125be <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801256a:	6839      	ldr	r1, [r7, #0]
 801256c:	6878      	ldr	r0, [r7, #4]
 801256e:	f000 fa2a 	bl	80129c6 <USBD_CtlError>
        err++;
 8012572:	7afb      	ldrb	r3, [r7, #11]
 8012574:	3301      	adds	r3, #1
 8012576:	72fb      	strb	r3, [r7, #11]
      break;
 8012578:	e021      	b.n	80125be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	7c1b      	ldrb	r3, [r3, #16]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d10d      	bne.n	801259e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801258a:	f107 0208 	add.w	r2, r7, #8
 801258e:	4610      	mov	r0, r2
 8012590:	4798      	blx	r3
 8012592:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	3301      	adds	r3, #1
 8012598:	2207      	movs	r2, #7
 801259a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801259c:	e00f      	b.n	80125be <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801259e:	6839      	ldr	r1, [r7, #0]
 80125a0:	6878      	ldr	r0, [r7, #4]
 80125a2:	f000 fa10 	bl	80129c6 <USBD_CtlError>
        err++;
 80125a6:	7afb      	ldrb	r3, [r7, #11]
 80125a8:	3301      	adds	r3, #1
 80125aa:	72fb      	strb	r3, [r7, #11]
      break;
 80125ac:	e007      	b.n	80125be <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80125ae:	6839      	ldr	r1, [r7, #0]
 80125b0:	6878      	ldr	r0, [r7, #4]
 80125b2:	f000 fa08 	bl	80129c6 <USBD_CtlError>
      err++;
 80125b6:	7afb      	ldrb	r3, [r7, #11]
 80125b8:	3301      	adds	r3, #1
 80125ba:	72fb      	strb	r3, [r7, #11]
      break;
 80125bc:	bf00      	nop
  }

  if (err != 0U)
 80125be:	7afb      	ldrb	r3, [r7, #11]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d11e      	bne.n	8012602 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80125c4:	683b      	ldr	r3, [r7, #0]
 80125c6:	88db      	ldrh	r3, [r3, #6]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d016      	beq.n	80125fa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80125cc:	893b      	ldrh	r3, [r7, #8]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d00e      	beq.n	80125f0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80125d2:	683b      	ldr	r3, [r7, #0]
 80125d4:	88da      	ldrh	r2, [r3, #6]
 80125d6:	893b      	ldrh	r3, [r7, #8]
 80125d8:	4293      	cmp	r3, r2
 80125da:	bf28      	it	cs
 80125dc:	4613      	movcs	r3, r2
 80125de:	b29b      	uxth	r3, r3
 80125e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80125e2:	893b      	ldrh	r3, [r7, #8]
 80125e4:	461a      	mov	r2, r3
 80125e6:	68f9      	ldr	r1, [r7, #12]
 80125e8:	6878      	ldr	r0, [r7, #4]
 80125ea:	f000 fa69 	bl	8012ac0 <USBD_CtlSendData>
 80125ee:	e009      	b.n	8012604 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80125f0:	6839      	ldr	r1, [r7, #0]
 80125f2:	6878      	ldr	r0, [r7, #4]
 80125f4:	f000 f9e7 	bl	80129c6 <USBD_CtlError>
 80125f8:	e004      	b.n	8012604 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80125fa:	6878      	ldr	r0, [r7, #4]
 80125fc:	f000 faba 	bl	8012b74 <USBD_CtlSendStatus>
 8012600:	e000      	b.n	8012604 <USBD_GetDescriptor+0x320>
    return;
 8012602:	bf00      	nop
  }
}
 8012604:	3710      	adds	r7, #16
 8012606:	46bd      	mov	sp, r7
 8012608:	bd80      	pop	{r7, pc}
 801260a:	bf00      	nop

0801260c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b084      	sub	sp, #16
 8012610:	af00      	add	r7, sp, #0
 8012612:	6078      	str	r0, [r7, #4]
 8012614:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012616:	683b      	ldr	r3, [r7, #0]
 8012618:	889b      	ldrh	r3, [r3, #4]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d131      	bne.n	8012682 <USBD_SetAddress+0x76>
 801261e:	683b      	ldr	r3, [r7, #0]
 8012620:	88db      	ldrh	r3, [r3, #6]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d12d      	bne.n	8012682 <USBD_SetAddress+0x76>
 8012626:	683b      	ldr	r3, [r7, #0]
 8012628:	885b      	ldrh	r3, [r3, #2]
 801262a:	2b7f      	cmp	r3, #127	@ 0x7f
 801262c:	d829      	bhi.n	8012682 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801262e:	683b      	ldr	r3, [r7, #0]
 8012630:	885b      	ldrh	r3, [r3, #2]
 8012632:	b2db      	uxtb	r3, r3
 8012634:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012638:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012640:	b2db      	uxtb	r3, r3
 8012642:	2b03      	cmp	r3, #3
 8012644:	d104      	bne.n	8012650 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012646:	6839      	ldr	r1, [r7, #0]
 8012648:	6878      	ldr	r0, [r7, #4]
 801264a:	f000 f9bc 	bl	80129c6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801264e:	e01d      	b.n	801268c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	7bfa      	ldrb	r2, [r7, #15]
 8012654:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012658:	7bfb      	ldrb	r3, [r7, #15]
 801265a:	4619      	mov	r1, r3
 801265c:	6878      	ldr	r0, [r7, #4]
 801265e:	f005 f919 	bl	8017894 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012662:	6878      	ldr	r0, [r7, #4]
 8012664:	f000 fa86 	bl	8012b74 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012668:	7bfb      	ldrb	r3, [r7, #15]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d004      	beq.n	8012678 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	2202      	movs	r2, #2
 8012672:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012676:	e009      	b.n	801268c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	2201      	movs	r2, #1
 801267c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012680:	e004      	b.n	801268c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012682:	6839      	ldr	r1, [r7, #0]
 8012684:	6878      	ldr	r0, [r7, #4]
 8012686:	f000 f99e 	bl	80129c6 <USBD_CtlError>
  }
}
 801268a:	bf00      	nop
 801268c:	bf00      	nop
 801268e:	3710      	adds	r7, #16
 8012690:	46bd      	mov	sp, r7
 8012692:	bd80      	pop	{r7, pc}

08012694 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b084      	sub	sp, #16
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
 801269c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801269e:	2300      	movs	r3, #0
 80126a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80126a2:	683b      	ldr	r3, [r7, #0]
 80126a4:	885b      	ldrh	r3, [r3, #2]
 80126a6:	b2da      	uxtb	r2, r3
 80126a8:	4b4e      	ldr	r3, [pc, #312]	@ (80127e4 <USBD_SetConfig+0x150>)
 80126aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80126ac:	4b4d      	ldr	r3, [pc, #308]	@ (80127e4 <USBD_SetConfig+0x150>)
 80126ae:	781b      	ldrb	r3, [r3, #0]
 80126b0:	2b01      	cmp	r3, #1
 80126b2:	d905      	bls.n	80126c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80126b4:	6839      	ldr	r1, [r7, #0]
 80126b6:	6878      	ldr	r0, [r7, #4]
 80126b8:	f000 f985 	bl	80129c6 <USBD_CtlError>
    return USBD_FAIL;
 80126bc:	2303      	movs	r3, #3
 80126be:	e08c      	b.n	80127da <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80126c6:	b2db      	uxtb	r3, r3
 80126c8:	2b02      	cmp	r3, #2
 80126ca:	d002      	beq.n	80126d2 <USBD_SetConfig+0x3e>
 80126cc:	2b03      	cmp	r3, #3
 80126ce:	d029      	beq.n	8012724 <USBD_SetConfig+0x90>
 80126d0:	e075      	b.n	80127be <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80126d2:	4b44      	ldr	r3, [pc, #272]	@ (80127e4 <USBD_SetConfig+0x150>)
 80126d4:	781b      	ldrb	r3, [r3, #0]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d020      	beq.n	801271c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80126da:	4b42      	ldr	r3, [pc, #264]	@ (80127e4 <USBD_SetConfig+0x150>)
 80126dc:	781b      	ldrb	r3, [r3, #0]
 80126de:	461a      	mov	r2, r3
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80126e4:	4b3f      	ldr	r3, [pc, #252]	@ (80127e4 <USBD_SetConfig+0x150>)
 80126e6:	781b      	ldrb	r3, [r3, #0]
 80126e8:	4619      	mov	r1, r3
 80126ea:	6878      	ldr	r0, [r7, #4]
 80126ec:	f7ff f84b 	bl	8011786 <USBD_SetClassConfig>
 80126f0:	4603      	mov	r3, r0
 80126f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80126f4:	7bfb      	ldrb	r3, [r7, #15]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d008      	beq.n	801270c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80126fa:	6839      	ldr	r1, [r7, #0]
 80126fc:	6878      	ldr	r0, [r7, #4]
 80126fe:	f000 f962 	bl	80129c6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	2202      	movs	r2, #2
 8012706:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801270a:	e065      	b.n	80127d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801270c:	6878      	ldr	r0, [r7, #4]
 801270e:	f000 fa31 	bl	8012b74 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	2203      	movs	r2, #3
 8012716:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801271a:	e05d      	b.n	80127d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801271c:	6878      	ldr	r0, [r7, #4]
 801271e:	f000 fa29 	bl	8012b74 <USBD_CtlSendStatus>
      break;
 8012722:	e059      	b.n	80127d8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012724:	4b2f      	ldr	r3, [pc, #188]	@ (80127e4 <USBD_SetConfig+0x150>)
 8012726:	781b      	ldrb	r3, [r3, #0]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d112      	bne.n	8012752 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	2202      	movs	r2, #2
 8012730:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8012734:	4b2b      	ldr	r3, [pc, #172]	@ (80127e4 <USBD_SetConfig+0x150>)
 8012736:	781b      	ldrb	r3, [r3, #0]
 8012738:	461a      	mov	r2, r3
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801273e:	4b29      	ldr	r3, [pc, #164]	@ (80127e4 <USBD_SetConfig+0x150>)
 8012740:	781b      	ldrb	r3, [r3, #0]
 8012742:	4619      	mov	r1, r3
 8012744:	6878      	ldr	r0, [r7, #4]
 8012746:	f7ff f83a 	bl	80117be <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801274a:	6878      	ldr	r0, [r7, #4]
 801274c:	f000 fa12 	bl	8012b74 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012750:	e042      	b.n	80127d8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8012752:	4b24      	ldr	r3, [pc, #144]	@ (80127e4 <USBD_SetConfig+0x150>)
 8012754:	781b      	ldrb	r3, [r3, #0]
 8012756:	461a      	mov	r2, r3
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	685b      	ldr	r3, [r3, #4]
 801275c:	429a      	cmp	r2, r3
 801275e:	d02a      	beq.n	80127b6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	685b      	ldr	r3, [r3, #4]
 8012764:	b2db      	uxtb	r3, r3
 8012766:	4619      	mov	r1, r3
 8012768:	6878      	ldr	r0, [r7, #4]
 801276a:	f7ff f828 	bl	80117be <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801276e:	4b1d      	ldr	r3, [pc, #116]	@ (80127e4 <USBD_SetConfig+0x150>)
 8012770:	781b      	ldrb	r3, [r3, #0]
 8012772:	461a      	mov	r2, r3
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012778:	4b1a      	ldr	r3, [pc, #104]	@ (80127e4 <USBD_SetConfig+0x150>)
 801277a:	781b      	ldrb	r3, [r3, #0]
 801277c:	4619      	mov	r1, r3
 801277e:	6878      	ldr	r0, [r7, #4]
 8012780:	f7ff f801 	bl	8011786 <USBD_SetClassConfig>
 8012784:	4603      	mov	r3, r0
 8012786:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012788:	7bfb      	ldrb	r3, [r7, #15]
 801278a:	2b00      	cmp	r3, #0
 801278c:	d00f      	beq.n	80127ae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801278e:	6839      	ldr	r1, [r7, #0]
 8012790:	6878      	ldr	r0, [r7, #4]
 8012792:	f000 f918 	bl	80129c6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	685b      	ldr	r3, [r3, #4]
 801279a:	b2db      	uxtb	r3, r3
 801279c:	4619      	mov	r1, r3
 801279e:	6878      	ldr	r0, [r7, #4]
 80127a0:	f7ff f80d 	bl	80117be <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	2202      	movs	r2, #2
 80127a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80127ac:	e014      	b.n	80127d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80127ae:	6878      	ldr	r0, [r7, #4]
 80127b0:	f000 f9e0 	bl	8012b74 <USBD_CtlSendStatus>
      break;
 80127b4:	e010      	b.n	80127d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80127b6:	6878      	ldr	r0, [r7, #4]
 80127b8:	f000 f9dc 	bl	8012b74 <USBD_CtlSendStatus>
      break;
 80127bc:	e00c      	b.n	80127d8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80127be:	6839      	ldr	r1, [r7, #0]
 80127c0:	6878      	ldr	r0, [r7, #4]
 80127c2:	f000 f900 	bl	80129c6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80127c6:	4b07      	ldr	r3, [pc, #28]	@ (80127e4 <USBD_SetConfig+0x150>)
 80127c8:	781b      	ldrb	r3, [r3, #0]
 80127ca:	4619      	mov	r1, r3
 80127cc:	6878      	ldr	r0, [r7, #4]
 80127ce:	f7fe fff6 	bl	80117be <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80127d2:	2303      	movs	r3, #3
 80127d4:	73fb      	strb	r3, [r7, #15]
      break;
 80127d6:	bf00      	nop
  }

  return ret;
 80127d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80127da:	4618      	mov	r0, r3
 80127dc:	3710      	adds	r7, #16
 80127de:	46bd      	mov	sp, r7
 80127e0:	bd80      	pop	{r7, pc}
 80127e2:	bf00      	nop
 80127e4:	20000a44 	.word	0x20000a44

080127e8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b082      	sub	sp, #8
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
 80127f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80127f2:	683b      	ldr	r3, [r7, #0]
 80127f4:	88db      	ldrh	r3, [r3, #6]
 80127f6:	2b01      	cmp	r3, #1
 80127f8:	d004      	beq.n	8012804 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80127fa:	6839      	ldr	r1, [r7, #0]
 80127fc:	6878      	ldr	r0, [r7, #4]
 80127fe:	f000 f8e2 	bl	80129c6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012802:	e023      	b.n	801284c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801280a:	b2db      	uxtb	r3, r3
 801280c:	2b02      	cmp	r3, #2
 801280e:	dc02      	bgt.n	8012816 <USBD_GetConfig+0x2e>
 8012810:	2b00      	cmp	r3, #0
 8012812:	dc03      	bgt.n	801281c <USBD_GetConfig+0x34>
 8012814:	e015      	b.n	8012842 <USBD_GetConfig+0x5a>
 8012816:	2b03      	cmp	r3, #3
 8012818:	d00b      	beq.n	8012832 <USBD_GetConfig+0x4a>
 801281a:	e012      	b.n	8012842 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	2200      	movs	r2, #0
 8012820:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	3308      	adds	r3, #8
 8012826:	2201      	movs	r2, #1
 8012828:	4619      	mov	r1, r3
 801282a:	6878      	ldr	r0, [r7, #4]
 801282c:	f000 f948 	bl	8012ac0 <USBD_CtlSendData>
        break;
 8012830:	e00c      	b.n	801284c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	3304      	adds	r3, #4
 8012836:	2201      	movs	r2, #1
 8012838:	4619      	mov	r1, r3
 801283a:	6878      	ldr	r0, [r7, #4]
 801283c:	f000 f940 	bl	8012ac0 <USBD_CtlSendData>
        break;
 8012840:	e004      	b.n	801284c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012842:	6839      	ldr	r1, [r7, #0]
 8012844:	6878      	ldr	r0, [r7, #4]
 8012846:	f000 f8be 	bl	80129c6 <USBD_CtlError>
        break;
 801284a:	bf00      	nop
}
 801284c:	bf00      	nop
 801284e:	3708      	adds	r7, #8
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}

08012854 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012854:	b580      	push	{r7, lr}
 8012856:	b082      	sub	sp, #8
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]
 801285c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012864:	b2db      	uxtb	r3, r3
 8012866:	3b01      	subs	r3, #1
 8012868:	2b02      	cmp	r3, #2
 801286a:	d81e      	bhi.n	80128aa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801286c:	683b      	ldr	r3, [r7, #0]
 801286e:	88db      	ldrh	r3, [r3, #6]
 8012870:	2b02      	cmp	r3, #2
 8012872:	d004      	beq.n	801287e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012874:	6839      	ldr	r1, [r7, #0]
 8012876:	6878      	ldr	r0, [r7, #4]
 8012878:	f000 f8a5 	bl	80129c6 <USBD_CtlError>
        break;
 801287c:	e01a      	b.n	80128b4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	2201      	movs	r2, #1
 8012882:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801288a:	2b00      	cmp	r3, #0
 801288c:	d005      	beq.n	801289a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	68db      	ldr	r3, [r3, #12]
 8012892:	f043 0202 	orr.w	r2, r3, #2
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	330c      	adds	r3, #12
 801289e:	2202      	movs	r2, #2
 80128a0:	4619      	mov	r1, r3
 80128a2:	6878      	ldr	r0, [r7, #4]
 80128a4:	f000 f90c 	bl	8012ac0 <USBD_CtlSendData>
      break;
 80128a8:	e004      	b.n	80128b4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80128aa:	6839      	ldr	r1, [r7, #0]
 80128ac:	6878      	ldr	r0, [r7, #4]
 80128ae:	f000 f88a 	bl	80129c6 <USBD_CtlError>
      break;
 80128b2:	bf00      	nop
  }
}
 80128b4:	bf00      	nop
 80128b6:	3708      	adds	r7, #8
 80128b8:	46bd      	mov	sp, r7
 80128ba:	bd80      	pop	{r7, pc}

080128bc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b082      	sub	sp, #8
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
 80128c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80128c6:	683b      	ldr	r3, [r7, #0]
 80128c8:	885b      	ldrh	r3, [r3, #2]
 80128ca:	2b01      	cmp	r3, #1
 80128cc:	d107      	bne.n	80128de <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	2201      	movs	r2, #1
 80128d2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80128d6:	6878      	ldr	r0, [r7, #4]
 80128d8:	f000 f94c 	bl	8012b74 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80128dc:	e013      	b.n	8012906 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80128de:	683b      	ldr	r3, [r7, #0]
 80128e0:	885b      	ldrh	r3, [r3, #2]
 80128e2:	2b02      	cmp	r3, #2
 80128e4:	d10b      	bne.n	80128fe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80128e6:	683b      	ldr	r3, [r7, #0]
 80128e8:	889b      	ldrh	r3, [r3, #4]
 80128ea:	0a1b      	lsrs	r3, r3, #8
 80128ec:	b29b      	uxth	r3, r3
 80128ee:	b2da      	uxtb	r2, r3
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80128f6:	6878      	ldr	r0, [r7, #4]
 80128f8:	f000 f93c 	bl	8012b74 <USBD_CtlSendStatus>
}
 80128fc:	e003      	b.n	8012906 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80128fe:	6839      	ldr	r1, [r7, #0]
 8012900:	6878      	ldr	r0, [r7, #4]
 8012902:	f000 f860 	bl	80129c6 <USBD_CtlError>
}
 8012906:	bf00      	nop
 8012908:	3708      	adds	r7, #8
 801290a:	46bd      	mov	sp, r7
 801290c:	bd80      	pop	{r7, pc}

0801290e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801290e:	b580      	push	{r7, lr}
 8012910:	b082      	sub	sp, #8
 8012912:	af00      	add	r7, sp, #0
 8012914:	6078      	str	r0, [r7, #4]
 8012916:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801291e:	b2db      	uxtb	r3, r3
 8012920:	3b01      	subs	r3, #1
 8012922:	2b02      	cmp	r3, #2
 8012924:	d80b      	bhi.n	801293e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012926:	683b      	ldr	r3, [r7, #0]
 8012928:	885b      	ldrh	r3, [r3, #2]
 801292a:	2b01      	cmp	r3, #1
 801292c:	d10c      	bne.n	8012948 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	2200      	movs	r2, #0
 8012932:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012936:	6878      	ldr	r0, [r7, #4]
 8012938:	f000 f91c 	bl	8012b74 <USBD_CtlSendStatus>
      }
      break;
 801293c:	e004      	b.n	8012948 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801293e:	6839      	ldr	r1, [r7, #0]
 8012940:	6878      	ldr	r0, [r7, #4]
 8012942:	f000 f840 	bl	80129c6 <USBD_CtlError>
      break;
 8012946:	e000      	b.n	801294a <USBD_ClrFeature+0x3c>
      break;
 8012948:	bf00      	nop
  }
}
 801294a:	bf00      	nop
 801294c:	3708      	adds	r7, #8
 801294e:	46bd      	mov	sp, r7
 8012950:	bd80      	pop	{r7, pc}

08012952 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012952:	b580      	push	{r7, lr}
 8012954:	b084      	sub	sp, #16
 8012956:	af00      	add	r7, sp, #0
 8012958:	6078      	str	r0, [r7, #4]
 801295a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801295c:	683b      	ldr	r3, [r7, #0]
 801295e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	781a      	ldrb	r2, [r3, #0]
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	3301      	adds	r3, #1
 801296c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	781a      	ldrb	r2, [r3, #0]
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	3301      	adds	r3, #1
 801297a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801297c:	68f8      	ldr	r0, [r7, #12]
 801297e:	f7ff fa16 	bl	8011dae <SWAPBYTE>
 8012982:	4603      	mov	r3, r0
 8012984:	461a      	mov	r2, r3
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	3301      	adds	r3, #1
 801298e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	3301      	adds	r3, #1
 8012994:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012996:	68f8      	ldr	r0, [r7, #12]
 8012998:	f7ff fa09 	bl	8011dae <SWAPBYTE>
 801299c:	4603      	mov	r3, r0
 801299e:	461a      	mov	r2, r3
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	3301      	adds	r3, #1
 80129a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	3301      	adds	r3, #1
 80129ae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80129b0:	68f8      	ldr	r0, [r7, #12]
 80129b2:	f7ff f9fc 	bl	8011dae <SWAPBYTE>
 80129b6:	4603      	mov	r3, r0
 80129b8:	461a      	mov	r2, r3
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	80da      	strh	r2, [r3, #6]
}
 80129be:	bf00      	nop
 80129c0:	3710      	adds	r7, #16
 80129c2:	46bd      	mov	sp, r7
 80129c4:	bd80      	pop	{r7, pc}

080129c6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80129c6:	b580      	push	{r7, lr}
 80129c8:	b082      	sub	sp, #8
 80129ca:	af00      	add	r7, sp, #0
 80129cc:	6078      	str	r0, [r7, #4]
 80129ce:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80129d0:	2180      	movs	r1, #128	@ 0x80
 80129d2:	6878      	ldr	r0, [r7, #4]
 80129d4:	f004 fef4 	bl	80177c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80129d8:	2100      	movs	r1, #0
 80129da:	6878      	ldr	r0, [r7, #4]
 80129dc:	f004 fef0 	bl	80177c0 <USBD_LL_StallEP>
}
 80129e0:	bf00      	nop
 80129e2:	3708      	adds	r7, #8
 80129e4:	46bd      	mov	sp, r7
 80129e6:	bd80      	pop	{r7, pc}

080129e8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b086      	sub	sp, #24
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	60f8      	str	r0, [r7, #12]
 80129f0:	60b9      	str	r1, [r7, #8]
 80129f2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80129f4:	2300      	movs	r3, #0
 80129f6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d042      	beq.n	8012a84 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8012a02:	6938      	ldr	r0, [r7, #16]
 8012a04:	f000 f842 	bl	8012a8c <USBD_GetLen>
 8012a08:	4603      	mov	r3, r0
 8012a0a:	3301      	adds	r3, #1
 8012a0c:	005b      	lsls	r3, r3, #1
 8012a0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012a12:	d808      	bhi.n	8012a26 <USBD_GetString+0x3e>
 8012a14:	6938      	ldr	r0, [r7, #16]
 8012a16:	f000 f839 	bl	8012a8c <USBD_GetLen>
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	3301      	adds	r3, #1
 8012a1e:	b29b      	uxth	r3, r3
 8012a20:	005b      	lsls	r3, r3, #1
 8012a22:	b29a      	uxth	r2, r3
 8012a24:	e001      	b.n	8012a2a <USBD_GetString+0x42>
 8012a26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012a2e:	7dfb      	ldrb	r3, [r7, #23]
 8012a30:	68ba      	ldr	r2, [r7, #8]
 8012a32:	4413      	add	r3, r2
 8012a34:	687a      	ldr	r2, [r7, #4]
 8012a36:	7812      	ldrb	r2, [r2, #0]
 8012a38:	701a      	strb	r2, [r3, #0]
  idx++;
 8012a3a:	7dfb      	ldrb	r3, [r7, #23]
 8012a3c:	3301      	adds	r3, #1
 8012a3e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012a40:	7dfb      	ldrb	r3, [r7, #23]
 8012a42:	68ba      	ldr	r2, [r7, #8]
 8012a44:	4413      	add	r3, r2
 8012a46:	2203      	movs	r2, #3
 8012a48:	701a      	strb	r2, [r3, #0]
  idx++;
 8012a4a:	7dfb      	ldrb	r3, [r7, #23]
 8012a4c:	3301      	adds	r3, #1
 8012a4e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012a50:	e013      	b.n	8012a7a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8012a52:	7dfb      	ldrb	r3, [r7, #23]
 8012a54:	68ba      	ldr	r2, [r7, #8]
 8012a56:	4413      	add	r3, r2
 8012a58:	693a      	ldr	r2, [r7, #16]
 8012a5a:	7812      	ldrb	r2, [r2, #0]
 8012a5c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012a5e:	693b      	ldr	r3, [r7, #16]
 8012a60:	3301      	adds	r3, #1
 8012a62:	613b      	str	r3, [r7, #16]
    idx++;
 8012a64:	7dfb      	ldrb	r3, [r7, #23]
 8012a66:	3301      	adds	r3, #1
 8012a68:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012a6a:	7dfb      	ldrb	r3, [r7, #23]
 8012a6c:	68ba      	ldr	r2, [r7, #8]
 8012a6e:	4413      	add	r3, r2
 8012a70:	2200      	movs	r2, #0
 8012a72:	701a      	strb	r2, [r3, #0]
    idx++;
 8012a74:	7dfb      	ldrb	r3, [r7, #23]
 8012a76:	3301      	adds	r3, #1
 8012a78:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012a7a:	693b      	ldr	r3, [r7, #16]
 8012a7c:	781b      	ldrb	r3, [r3, #0]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d1e7      	bne.n	8012a52 <USBD_GetString+0x6a>
 8012a82:	e000      	b.n	8012a86 <USBD_GetString+0x9e>
    return;
 8012a84:	bf00      	nop
  }
}
 8012a86:	3718      	adds	r7, #24
 8012a88:	46bd      	mov	sp, r7
 8012a8a:	bd80      	pop	{r7, pc}

08012a8c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012a8c:	b480      	push	{r7}
 8012a8e:	b085      	sub	sp, #20
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012a94:	2300      	movs	r3, #0
 8012a96:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012a9c:	e005      	b.n	8012aaa <USBD_GetLen+0x1e>
  {
    len++;
 8012a9e:	7bfb      	ldrb	r3, [r7, #15]
 8012aa0:	3301      	adds	r3, #1
 8012aa2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012aa4:	68bb      	ldr	r3, [r7, #8]
 8012aa6:	3301      	adds	r3, #1
 8012aa8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012aaa:	68bb      	ldr	r3, [r7, #8]
 8012aac:	781b      	ldrb	r3, [r3, #0]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d1f5      	bne.n	8012a9e <USBD_GetLen+0x12>
  }

  return len;
 8012ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ab4:	4618      	mov	r0, r3
 8012ab6:	3714      	adds	r7, #20
 8012ab8:	46bd      	mov	sp, r7
 8012aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012abe:	4770      	bx	lr

08012ac0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012ac0:	b580      	push	{r7, lr}
 8012ac2:	b084      	sub	sp, #16
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	60f8      	str	r0, [r7, #12]
 8012ac8:	60b9      	str	r1, [r7, #8]
 8012aca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	2202      	movs	r2, #2
 8012ad0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	687a      	ldr	r2, [r7, #4]
 8012ad8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	687a      	ldr	r2, [r7, #4]
 8012ade:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	68ba      	ldr	r2, [r7, #8]
 8012ae4:	2100      	movs	r1, #0
 8012ae6:	68f8      	ldr	r0, [r7, #12]
 8012ae8:	f004 fef3 	bl	80178d2 <USBD_LL_Transmit>

  return USBD_OK;
 8012aec:	2300      	movs	r3, #0
}
 8012aee:	4618      	mov	r0, r3
 8012af0:	3710      	adds	r7, #16
 8012af2:	46bd      	mov	sp, r7
 8012af4:	bd80      	pop	{r7, pc}

08012af6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012af6:	b580      	push	{r7, lr}
 8012af8:	b084      	sub	sp, #16
 8012afa:	af00      	add	r7, sp, #0
 8012afc:	60f8      	str	r0, [r7, #12]
 8012afe:	60b9      	str	r1, [r7, #8]
 8012b00:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	68ba      	ldr	r2, [r7, #8]
 8012b06:	2100      	movs	r1, #0
 8012b08:	68f8      	ldr	r0, [r7, #12]
 8012b0a:	f004 fee2 	bl	80178d2 <USBD_LL_Transmit>

  return USBD_OK;
 8012b0e:	2300      	movs	r3, #0
}
 8012b10:	4618      	mov	r0, r3
 8012b12:	3710      	adds	r7, #16
 8012b14:	46bd      	mov	sp, r7
 8012b16:	bd80      	pop	{r7, pc}

08012b18 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b084      	sub	sp, #16
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	60f8      	str	r0, [r7, #12]
 8012b20:	60b9      	str	r1, [r7, #8]
 8012b22:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	2203      	movs	r2, #3
 8012b28:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	687a      	ldr	r2, [r7, #4]
 8012b30:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	687a      	ldr	r2, [r7, #4]
 8012b38:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	68ba      	ldr	r2, [r7, #8]
 8012b40:	2100      	movs	r1, #0
 8012b42:	68f8      	ldr	r0, [r7, #12]
 8012b44:	f004 fee6 	bl	8017914 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012b48:	2300      	movs	r3, #0
}
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	3710      	adds	r7, #16
 8012b4e:	46bd      	mov	sp, r7
 8012b50:	bd80      	pop	{r7, pc}

08012b52 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012b52:	b580      	push	{r7, lr}
 8012b54:	b084      	sub	sp, #16
 8012b56:	af00      	add	r7, sp, #0
 8012b58:	60f8      	str	r0, [r7, #12]
 8012b5a:	60b9      	str	r1, [r7, #8]
 8012b5c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	68ba      	ldr	r2, [r7, #8]
 8012b62:	2100      	movs	r1, #0
 8012b64:	68f8      	ldr	r0, [r7, #12]
 8012b66:	f004 fed5 	bl	8017914 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012b6a:	2300      	movs	r3, #0
}
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	3710      	adds	r7, #16
 8012b70:	46bd      	mov	sp, r7
 8012b72:	bd80      	pop	{r7, pc}

08012b74 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012b74:	b580      	push	{r7, lr}
 8012b76:	b082      	sub	sp, #8
 8012b78:	af00      	add	r7, sp, #0
 8012b7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	2204      	movs	r2, #4
 8012b80:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012b84:	2300      	movs	r3, #0
 8012b86:	2200      	movs	r2, #0
 8012b88:	2100      	movs	r1, #0
 8012b8a:	6878      	ldr	r0, [r7, #4]
 8012b8c:	f004 fea1 	bl	80178d2 <USBD_LL_Transmit>

  return USBD_OK;
 8012b90:	2300      	movs	r3, #0
}
 8012b92:	4618      	mov	r0, r3
 8012b94:	3708      	adds	r7, #8
 8012b96:	46bd      	mov	sp, r7
 8012b98:	bd80      	pop	{r7, pc}

08012b9a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012b9a:	b580      	push	{r7, lr}
 8012b9c:	b082      	sub	sp, #8
 8012b9e:	af00      	add	r7, sp, #0
 8012ba0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	2205      	movs	r2, #5
 8012ba6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012baa:	2300      	movs	r3, #0
 8012bac:	2200      	movs	r2, #0
 8012bae:	2100      	movs	r1, #0
 8012bb0:	6878      	ldr	r0, [r7, #4]
 8012bb2:	f004 feaf 	bl	8017914 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012bb6:	2300      	movs	r3, #0
}
 8012bb8:	4618      	mov	r0, r3
 8012bba:	3708      	adds	r7, #8
 8012bbc:	46bd      	mov	sp, r7
 8012bbe:	bd80      	pop	{r7, pc}

08012bc0 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b088      	sub	sp, #32
 8012bc4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8012bca:	f107 0308 	add.w	r3, r7, #8
 8012bce:	2218      	movs	r2, #24
 8012bd0:	2100      	movs	r1, #0
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	f001 f92d 	bl	8013e32 <Osal_MemSet>
  rq.ogf = 0x3f;
 8012bd8:	233f      	movs	r3, #63	@ 0x3f
 8012bda:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8012bdc:	2381      	movs	r3, #129	@ 0x81
 8012bde:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8012be0:	1dfb      	adds	r3, r7, #7
 8012be2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8012be4:	2301      	movs	r3, #1
 8012be6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8012be8:	f107 0308 	add.w	r3, r7, #8
 8012bec:	2100      	movs	r1, #0
 8012bee:	4618      	mov	r0, r3
 8012bf0:	f001 fba8 	bl	8014344 <hci_send_req>
 8012bf4:	4603      	mov	r3, r0
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	da01      	bge.n	8012bfe <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8012bfa:	23ff      	movs	r3, #255	@ 0xff
 8012bfc:	e000      	b.n	8012c00 <aci_gap_set_non_discoverable+0x40>
  return status;
 8012bfe:	79fb      	ldrb	r3, [r7, #7]
}
 8012c00:	4618      	mov	r0, r3
 8012c02:	3720      	adds	r7, #32
 8012c04:	46bd      	mov	sp, r7
 8012c06:	bd80      	pop	{r7, pc}

08012c08 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8012c08:	b5b0      	push	{r4, r5, r7, lr}
 8012c0a:	b0ce      	sub	sp, #312	@ 0x138
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	4605      	mov	r5, r0
 8012c10:	460c      	mov	r4, r1
 8012c12:	4610      	mov	r0, r2
 8012c14:	4619      	mov	r1, r3
 8012c16:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012c1a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8012c1e:	462a      	mov	r2, r5
 8012c20:	701a      	strb	r2, [r3, #0]
 8012c22:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012c26:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012c2a:	4622      	mov	r2, r4
 8012c2c:	801a      	strh	r2, [r3, #0]
 8012c2e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012c32:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8012c36:	4602      	mov	r2, r0
 8012c38:	801a      	strh	r2, [r3, #0]
 8012c3a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012c3e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8012c42:	460a      	mov	r2, r1
 8012c44:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8012c46:	f107 0310 	add.w	r3, r7, #16
 8012c4a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8012c4e:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8012c52:	3308      	adds	r3, #8
 8012c54:	f107 0210 	add.w	r2, r7, #16
 8012c58:	4413      	add	r3, r2
 8012c5a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8012c5e:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8012c62:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8012c66:	4413      	add	r3, r2
 8012c68:	3309      	adds	r3, #9
 8012c6a:	f107 0210 	add.w	r2, r7, #16
 8012c6e:	4413      	add	r3, r2
 8012c70:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8012c74:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012c78:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8012c7c:	2200      	movs	r2, #0
 8012c7e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8012c80:	2300      	movs	r3, #0
 8012c82:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8012c86:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012c8a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8012c8e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8012c92:	7812      	ldrb	r2, [r2, #0]
 8012c94:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8012c96:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012c9a:	3301      	adds	r3, #1
 8012c9c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8012ca0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012ca4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8012ca8:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8012cac:	8812      	ldrh	r2, [r2, #0]
 8012cae:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8012cb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012cb6:	3302      	adds	r3, #2
 8012cb8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8012cbc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012cc0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8012cc4:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8012cc8:	8812      	ldrh	r2, [r2, #0]
 8012cca:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8012cce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012cd2:	3302      	adds	r3, #2
 8012cd4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8012cd8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012cdc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8012ce0:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8012ce4:	7812      	ldrb	r2, [r2, #0]
 8012ce6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8012ce8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012cec:	3301      	adds	r3, #1
 8012cee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8012cf2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012cf6:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8012cfa:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8012cfc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012d00:	3301      	adds	r3, #1
 8012d02:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8012d06:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012d0a:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8012d0e:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8012d10:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012d14:	3301      	adds	r3, #1
 8012d16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8012d1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012d1e:	3308      	adds	r3, #8
 8012d20:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8012d24:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8012d28:	4618      	mov	r0, r3
 8012d2a:	f001 f872 	bl	8013e12 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8012d2e:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8012d32:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8012d36:	4413      	add	r3, r2
 8012d38:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8012d3c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012d40:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8012d44:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8012d46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012d4a:	3301      	adds	r3, #1
 8012d4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8012d50:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012d54:	3301      	adds	r3, #1
 8012d56:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8012d5a:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8012d5e:	4618      	mov	r0, r3
 8012d60:	f001 f857 	bl	8013e12 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8012d64:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8012d68:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8012d6c:	4413      	add	r3, r2
 8012d6e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8012d72:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012d76:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8012d7a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8012d7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012d80:	3302      	adds	r3, #2
 8012d82:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8012d86:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012d8a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8012d8e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8012d90:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012d94:	3302      	adds	r3, #2
 8012d96:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8012d9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012d9e:	2218      	movs	r2, #24
 8012da0:	2100      	movs	r1, #0
 8012da2:	4618      	mov	r0, r3
 8012da4:	f001 f845 	bl	8013e32 <Osal_MemSet>
  rq.ogf = 0x3f;
 8012da8:	233f      	movs	r3, #63	@ 0x3f
 8012daa:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8012dae:	2383      	movs	r3, #131	@ 0x83
 8012db0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8012db4:	f107 0310 	add.w	r3, r7, #16
 8012db8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8012dbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012dc0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8012dc4:	f107 030f 	add.w	r3, r7, #15
 8012dc8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8012dcc:	2301      	movs	r3, #1
 8012dce:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8012dd2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012dd6:	2100      	movs	r1, #0
 8012dd8:	4618      	mov	r0, r3
 8012dda:	f001 fab3 	bl	8014344 <hci_send_req>
 8012dde:	4603      	mov	r3, r0
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	da01      	bge.n	8012de8 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8012de4:	23ff      	movs	r3, #255	@ 0xff
 8012de6:	e004      	b.n	8012df2 <aci_gap_set_discoverable+0x1ea>
  return status;
 8012de8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012dec:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8012df0:	781b      	ldrb	r3, [r3, #0]
}
 8012df2:	4618      	mov	r0, r3
 8012df4:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8012df8:	46bd      	mov	sp, r7
 8012dfa:	bdb0      	pop	{r4, r5, r7, pc}

08012dfc <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	b0cc      	sub	sp, #304	@ 0x130
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	4602      	mov	r2, r0
 8012e04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012e08:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8012e0c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8012e0e:	f107 0310 	add.w	r3, r7, #16
 8012e12:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8012e16:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012e1a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8012e1e:	2200      	movs	r2, #0
 8012e20:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8012e22:	2300      	movs	r3, #0
 8012e24:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8012e28:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012e2c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8012e30:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8012e34:	7812      	ldrb	r2, [r2, #0]
 8012e36:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8012e38:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012e3c:	3301      	adds	r3, #1
 8012e3e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8012e42:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012e46:	2218      	movs	r2, #24
 8012e48:	2100      	movs	r1, #0
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	f000 fff1 	bl	8013e32 <Osal_MemSet>
  rq.ogf = 0x3f;
 8012e50:	233f      	movs	r3, #63	@ 0x3f
 8012e52:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8012e56:	2385      	movs	r3, #133	@ 0x85
 8012e58:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8012e5c:	f107 0310 	add.w	r3, r7, #16
 8012e60:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8012e64:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012e68:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8012e6c:	f107 030f 	add.w	r3, r7, #15
 8012e70:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8012e74:	2301      	movs	r3, #1
 8012e76:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8012e7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012e7e:	2100      	movs	r1, #0
 8012e80:	4618      	mov	r0, r3
 8012e82:	f001 fa5f 	bl	8014344 <hci_send_req>
 8012e86:	4603      	mov	r3, r0
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	da01      	bge.n	8012e90 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8012e8c:	23ff      	movs	r3, #255	@ 0xff
 8012e8e:	e004      	b.n	8012e9a <aci_gap_set_io_capability+0x9e>
  return status;
 8012e90:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012e94:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8012e98:	781b      	ldrb	r3, [r3, #0]
}
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	bd80      	pop	{r7, pc}

08012ea4 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8012ea4:	b5b0      	push	{r4, r5, r7, lr}
 8012ea6:	b0cc      	sub	sp, #304	@ 0x130
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	4605      	mov	r5, r0
 8012eac:	460c      	mov	r4, r1
 8012eae:	4610      	mov	r0, r2
 8012eb0:	4619      	mov	r1, r3
 8012eb2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012eb6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8012eba:	462a      	mov	r2, r5
 8012ebc:	701a      	strb	r2, [r3, #0]
 8012ebe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012ec2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8012ec6:	4622      	mov	r2, r4
 8012ec8:	701a      	strb	r2, [r3, #0]
 8012eca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012ece:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8012ed2:	4602      	mov	r2, r0
 8012ed4:	701a      	strb	r2, [r3, #0]
 8012ed6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012eda:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012ede:	460a      	mov	r2, r1
 8012ee0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8012ee2:	f107 0310 	add.w	r3, r7, #16
 8012ee6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8012eea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012eee:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8012ef2:	2200      	movs	r2, #0
 8012ef4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8012efc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012f00:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8012f04:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8012f08:	7812      	ldrb	r2, [r2, #0]
 8012f0a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8012f0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012f10:	3301      	adds	r3, #1
 8012f12:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8012f16:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012f1a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8012f1e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8012f22:	7812      	ldrb	r2, [r2, #0]
 8012f24:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8012f26:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012f2a:	3301      	adds	r3, #1
 8012f2c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8012f30:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012f34:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8012f38:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8012f3c:	7812      	ldrb	r2, [r2, #0]
 8012f3e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8012f40:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012f44:	3301      	adds	r3, #1
 8012f46:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8012f4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012f4e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8012f52:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8012f56:	7812      	ldrb	r2, [r2, #0]
 8012f58:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8012f5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012f5e:	3301      	adds	r3, #1
 8012f60:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8012f64:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012f68:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8012f6c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8012f6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012f72:	3301      	adds	r3, #1
 8012f74:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8012f78:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012f7c:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8012f80:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8012f82:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012f86:	3301      	adds	r3, #1
 8012f88:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8012f8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012f90:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8012f94:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8012f96:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012f9a:	3301      	adds	r3, #1
 8012f9c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8012fa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012fa4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8012fa8:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8012fac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012fb0:	3304      	adds	r3, #4
 8012fb2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8012fb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012fba:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8012fbe:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8012fc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012fc4:	3301      	adds	r3, #1
 8012fc6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8012fca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012fce:	2218      	movs	r2, #24
 8012fd0:	2100      	movs	r1, #0
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	f000 ff2d 	bl	8013e32 <Osal_MemSet>
  rq.ogf = 0x3f;
 8012fd8:	233f      	movs	r3, #63	@ 0x3f
 8012fda:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8012fde:	2386      	movs	r3, #134	@ 0x86
 8012fe0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8012fe4:	f107 0310 	add.w	r3, r7, #16
 8012fe8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8012fec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012ff0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8012ff4:	f107 030f 	add.w	r3, r7, #15
 8012ff8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8012ffc:	2301      	movs	r3, #1
 8012ffe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8013002:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013006:	2100      	movs	r1, #0
 8013008:	4618      	mov	r0, r3
 801300a:	f001 f99b 	bl	8014344 <hci_send_req>
 801300e:	4603      	mov	r3, r0
 8013010:	2b00      	cmp	r3, #0
 8013012:	da01      	bge.n	8013018 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8013014:	23ff      	movs	r3, #255	@ 0xff
 8013016:	e004      	b.n	8013022 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8013018:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801301c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8013020:	781b      	ldrb	r3, [r3, #0]
}
 8013022:	4618      	mov	r0, r3
 8013024:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8013028:	46bd      	mov	sp, r7
 801302a:	bdb0      	pop	{r4, r5, r7, pc}

0801302c <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 801302c:	b580      	push	{r7, lr}
 801302e:	b0cc      	sub	sp, #304	@ 0x130
 8013030:	af00      	add	r7, sp, #0
 8013032:	4602      	mov	r2, r0
 8013034:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013038:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801303c:	6019      	str	r1, [r3, #0]
 801303e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013042:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8013046:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8013048:	f107 0310 	add.w	r3, r7, #16
 801304c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8013050:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013054:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8013058:	2200      	movs	r2, #0
 801305a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801305c:	2300      	movs	r3, #0
 801305e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8013062:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013066:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801306a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801306e:	8812      	ldrh	r2, [r2, #0]
 8013070:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8013072:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013076:	3302      	adds	r3, #2
 8013078:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 801307c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013080:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8013084:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8013088:	6812      	ldr	r2, [r2, #0]
 801308a:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 801308e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013092:	3304      	adds	r3, #4
 8013094:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8013098:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801309c:	2218      	movs	r2, #24
 801309e:	2100      	movs	r1, #0
 80130a0:	4618      	mov	r0, r3
 80130a2:	f000 fec6 	bl	8013e32 <Osal_MemSet>
  rq.ogf = 0x3f;
 80130a6:	233f      	movs	r3, #63	@ 0x3f
 80130a8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 80130ac:	2388      	movs	r3, #136	@ 0x88
 80130ae:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80130b2:	f107 0310 	add.w	r3, r7, #16
 80130b6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80130ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80130be:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80130c2:	f107 030f 	add.w	r3, r7, #15
 80130c6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80130ca:	2301      	movs	r3, #1
 80130cc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80130d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80130d4:	2100      	movs	r1, #0
 80130d6:	4618      	mov	r0, r3
 80130d8:	f001 f934 	bl	8014344 <hci_send_req>
 80130dc:	4603      	mov	r3, r0
 80130de:	2b00      	cmp	r3, #0
 80130e0:	da01      	bge.n	80130e6 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 80130e2:	23ff      	movs	r3, #255	@ 0xff
 80130e4:	e004      	b.n	80130f0 <aci_gap_pass_key_resp+0xc4>
  return status;
 80130e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80130ea:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80130ee:	781b      	ldrb	r3, [r3, #0]
}
 80130f0:	4618      	mov	r0, r3
 80130f2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80130f6:	46bd      	mov	sp, r7
 80130f8:	bd80      	pop	{r7, pc}

080130fa <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80130fa:	b590      	push	{r4, r7, lr}
 80130fc:	b0cd      	sub	sp, #308	@ 0x134
 80130fe:	af00      	add	r7, sp, #0
 8013100:	4604      	mov	r4, r0
 8013102:	4608      	mov	r0, r1
 8013104:	4611      	mov	r1, r2
 8013106:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801310a:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 801310e:	6013      	str	r3, [r2, #0]
 8013110:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013114:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8013118:	4622      	mov	r2, r4
 801311a:	701a      	strb	r2, [r3, #0]
 801311c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013120:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8013124:	4602      	mov	r2, r0
 8013126:	701a      	strb	r2, [r3, #0]
 8013128:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801312c:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8013130:	460a      	mov	r2, r1
 8013132:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8013134:	f107 0310 	add.w	r3, r7, #16
 8013138:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 801313c:	f107 0308 	add.w	r3, r7, #8
 8013140:	2207      	movs	r2, #7
 8013142:	2100      	movs	r1, #0
 8013144:	4618      	mov	r0, r3
 8013146:	f000 fe74 	bl	8013e32 <Osal_MemSet>
  int index_input = 0;
 801314a:	2300      	movs	r3, #0
 801314c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8013150:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013154:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8013158:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 801315c:	7812      	ldrb	r2, [r2, #0]
 801315e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8013160:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013164:	3301      	adds	r3, #1
 8013166:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 801316a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801316e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8013172:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8013176:	7812      	ldrb	r2, [r2, #0]
 8013178:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 801317a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801317e:	3301      	adds	r3, #1
 8013180:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8013184:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013188:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801318c:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8013190:	7812      	ldrb	r2, [r2, #0]
 8013192:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8013194:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013198:	3301      	adds	r3, #1
 801319a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801319e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80131a2:	2218      	movs	r2, #24
 80131a4:	2100      	movs	r1, #0
 80131a6:	4618      	mov	r0, r3
 80131a8:	f000 fe43 	bl	8013e32 <Osal_MemSet>
  rq.ogf = 0x3f;
 80131ac:	233f      	movs	r3, #63	@ 0x3f
 80131ae:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 80131b2:	238a      	movs	r3, #138	@ 0x8a
 80131b4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80131b8:	f107 0310 	add.w	r3, r7, #16
 80131bc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80131c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80131c4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80131c8:	f107 0308 	add.w	r3, r7, #8
 80131cc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80131d0:	2307      	movs	r3, #7
 80131d2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80131d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80131da:	2100      	movs	r1, #0
 80131dc:	4618      	mov	r0, r3
 80131de:	f001 f8b1 	bl	8014344 <hci_send_req>
 80131e2:	4603      	mov	r3, r0
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	da01      	bge.n	80131ec <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80131e8:	23ff      	movs	r3, #255	@ 0xff
 80131ea:	e02e      	b.n	801324a <aci_gap_init+0x150>
  if ( resp.Status )
 80131ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80131f0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80131f4:	781b      	ldrb	r3, [r3, #0]
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d005      	beq.n	8013206 <aci_gap_init+0x10c>
    return resp.Status;
 80131fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80131fe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8013202:	781b      	ldrb	r3, [r3, #0]
 8013204:	e021      	b.n	801324a <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8013206:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801320a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801320e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8013212:	b29a      	uxth	r2, r3
 8013214:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013218:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8013220:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013224:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8013228:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 801322c:	b29a      	uxth	r2, r3
 801322e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8013232:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8013234:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013238:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801323c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8013240:	b29a      	uxth	r2, r3
 8013242:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8013246:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8013248:	2300      	movs	r3, #0
}
 801324a:	4618      	mov	r0, r3
 801324c:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8013250:	46bd      	mov	sp, r7
 8013252:	bd90      	pop	{r4, r7, pc}

08013254 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8013254:	b580      	push	{r7, lr}
 8013256:	b0cc      	sub	sp, #304	@ 0x130
 8013258:	af00      	add	r7, sp, #0
 801325a:	4602      	mov	r2, r0
 801325c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013260:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8013264:	6019      	str	r1, [r3, #0]
 8013266:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801326a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801326e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8013270:	f107 0310 	add.w	r3, r7, #16
 8013274:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8013278:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801327c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8013280:	2200      	movs	r2, #0
 8013282:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8013284:	2300      	movs	r3, #0
 8013286:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 801328a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801328e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8013292:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8013296:	7812      	ldrb	r2, [r2, #0]
 8013298:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801329a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801329e:	3301      	adds	r3, #1
 80132a0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80132a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80132a8:	1c58      	adds	r0, r3, #1
 80132aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80132ae:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80132b2:	781a      	ldrb	r2, [r3, #0]
 80132b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80132b8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80132bc:	6819      	ldr	r1, [r3, #0]
 80132be:	f000 fda8 	bl	8013e12 <Osal_MemCpy>
  index_input += AdvDataLen;
 80132c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80132c6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80132ca:	781b      	ldrb	r3, [r3, #0]
 80132cc:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80132d0:	4413      	add	r3, r2
 80132d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80132d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80132da:	2218      	movs	r2, #24
 80132dc:	2100      	movs	r1, #0
 80132de:	4618      	mov	r0, r3
 80132e0:	f000 fda7 	bl	8013e32 <Osal_MemSet>
  rq.ogf = 0x3f;
 80132e4:	233f      	movs	r3, #63	@ 0x3f
 80132e6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 80132ea:	238e      	movs	r3, #142	@ 0x8e
 80132ec:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80132f0:	f107 0310 	add.w	r3, r7, #16
 80132f4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80132f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80132fc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8013300:	f107 030f 	add.w	r3, r7, #15
 8013304:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8013308:	2301      	movs	r3, #1
 801330a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801330e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013312:	2100      	movs	r1, #0
 8013314:	4618      	mov	r0, r3
 8013316:	f001 f815 	bl	8014344 <hci_send_req>
 801331a:	4603      	mov	r3, r0
 801331c:	2b00      	cmp	r3, #0
 801331e:	da01      	bge.n	8013324 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8013320:	23ff      	movs	r3, #255	@ 0xff
 8013322:	e004      	b.n	801332e <aci_gap_update_adv_data+0xda>
  return status;
 8013324:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013328:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801332c:	781b      	ldrb	r3, [r3, #0]
}
 801332e:	4618      	mov	r0, r3
 8013330:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8013334:	46bd      	mov	sp, r7
 8013336:	bd80      	pop	{r7, pc}

08013338 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b088      	sub	sp, #32
 801333c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 801333e:	2300      	movs	r3, #0
 8013340:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8013342:	f107 0308 	add.w	r3, r7, #8
 8013346:	2218      	movs	r2, #24
 8013348:	2100      	movs	r1, #0
 801334a:	4618      	mov	r0, r3
 801334c:	f000 fd71 	bl	8013e32 <Osal_MemSet>
  rq.ogf = 0x3f;
 8013350:	233f      	movs	r3, #63	@ 0x3f
 8013352:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8013354:	2392      	movs	r3, #146	@ 0x92
 8013356:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8013358:	1dfb      	adds	r3, r7, #7
 801335a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 801335c:	2301      	movs	r3, #1
 801335e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8013360:	f107 0308 	add.w	r3, r7, #8
 8013364:	2100      	movs	r1, #0
 8013366:	4618      	mov	r0, r3
 8013368:	f000 ffec 	bl	8014344 <hci_send_req>
 801336c:	4603      	mov	r3, r0
 801336e:	2b00      	cmp	r3, #0
 8013370:	da01      	bge.n	8013376 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8013372:	23ff      	movs	r3, #255	@ 0xff
 8013374:	e000      	b.n	8013378 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8013376:	79fb      	ldrb	r3, [r7, #7]
}
 8013378:	4618      	mov	r0, r3
 801337a:	3720      	adds	r7, #32
 801337c:	46bd      	mov	sp, r7
 801337e:	bd80      	pop	{r7, pc}

08013380 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8013380:	b580      	push	{r7, lr}
 8013382:	b0cc      	sub	sp, #304	@ 0x130
 8013384:	af00      	add	r7, sp, #0
 8013386:	4602      	mov	r2, r0
 8013388:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801338c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8013390:	801a      	strh	r2, [r3, #0]
 8013392:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013396:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 801339a:	460a      	mov	r2, r1
 801339c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 801339e:	f107 0310 	add.w	r3, r7, #16
 80133a2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80133a6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80133aa:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80133ae:	2200      	movs	r2, #0
 80133b0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80133b2:	2300      	movs	r3, #0
 80133b4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80133b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80133bc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80133c0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80133c4:	8812      	ldrh	r2, [r2, #0]
 80133c6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80133c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80133cc:	3302      	adds	r3, #2
 80133ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 80133d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80133d6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80133da:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80133de:	7812      	ldrb	r2, [r2, #0]
 80133e0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80133e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80133e6:	3301      	adds	r3, #1
 80133e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80133ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80133f0:	2218      	movs	r2, #24
 80133f2:	2100      	movs	r1, #0
 80133f4:	4618      	mov	r0, r3
 80133f6:	f000 fd1c 	bl	8013e32 <Osal_MemSet>
  rq.ogf = 0x3f;
 80133fa:	233f      	movs	r3, #63	@ 0x3f
 80133fc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8013400:	23a5      	movs	r3, #165	@ 0xa5
 8013402:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8013406:	f107 0310 	add.w	r3, r7, #16
 801340a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801340e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013412:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8013416:	f107 030f 	add.w	r3, r7, #15
 801341a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801341e:	2301      	movs	r3, #1
 8013420:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8013424:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013428:	2100      	movs	r1, #0
 801342a:	4618      	mov	r0, r3
 801342c:	f000 ff8a 	bl	8014344 <hci_send_req>
 8013430:	4603      	mov	r3, r0
 8013432:	2b00      	cmp	r3, #0
 8013434:	da01      	bge.n	801343a <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8013436:	23ff      	movs	r3, #255	@ 0xff
 8013438:	e004      	b.n	8013444 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 801343a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801343e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8013442:	781b      	ldrb	r3, [r3, #0]
}
 8013444:	4618      	mov	r0, r3
 8013446:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 801344a:	46bd      	mov	sp, r7
 801344c:	bd80      	pop	{r7, pc}

0801344e <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 801344e:	b580      	push	{r7, lr}
 8013450:	b088      	sub	sp, #32
 8013452:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8013454:	2300      	movs	r3, #0
 8013456:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8013458:	f107 0308 	add.w	r3, r7, #8
 801345c:	2218      	movs	r2, #24
 801345e:	2100      	movs	r1, #0
 8013460:	4618      	mov	r0, r3
 8013462:	f000 fce6 	bl	8013e32 <Osal_MemSet>
  rq.ogf = 0x3f;
 8013466:	233f      	movs	r3, #63	@ 0x3f
 8013468:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 801346a:	f240 1301 	movw	r3, #257	@ 0x101
 801346e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8013470:	1dfb      	adds	r3, r7, #7
 8013472:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8013474:	2301      	movs	r3, #1
 8013476:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8013478:	f107 0308 	add.w	r3, r7, #8
 801347c:	2100      	movs	r1, #0
 801347e:	4618      	mov	r0, r3
 8013480:	f000 ff60 	bl	8014344 <hci_send_req>
 8013484:	4603      	mov	r3, r0
 8013486:	2b00      	cmp	r3, #0
 8013488:	da01      	bge.n	801348e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 801348a:	23ff      	movs	r3, #255	@ 0xff
 801348c:	e000      	b.n	8013490 <aci_gatt_init+0x42>
  return status;
 801348e:	79fb      	ldrb	r3, [r7, #7]
}
 8013490:	4618      	mov	r0, r3
 8013492:	3720      	adds	r7, #32
 8013494:	46bd      	mov	sp, r7
 8013496:	bd80      	pop	{r7, pc}

08013498 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8013498:	b590      	push	{r4, r7, lr}
 801349a:	b0cf      	sub	sp, #316	@ 0x13c
 801349c:	af00      	add	r7, sp, #0
 801349e:	4604      	mov	r4, r0
 80134a0:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 80134a4:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 80134a8:	6001      	str	r1, [r0, #0]
 80134aa:	4610      	mov	r0, r2
 80134ac:	4619      	mov	r1, r3
 80134ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80134b2:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80134b6:	4622      	mov	r2, r4
 80134b8:	701a      	strb	r2, [r3, #0]
 80134ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80134be:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80134c2:	4602      	mov	r2, r0
 80134c4:	701a      	strb	r2, [r3, #0]
 80134c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80134ca:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80134ce:	460a      	mov	r2, r1
 80134d0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80134d2:	f107 0310 	add.w	r3, r7, #16
 80134d6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80134da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80134de:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80134e2:	781b      	ldrb	r3, [r3, #0]
 80134e4:	2b01      	cmp	r3, #1
 80134e6:	d00a      	beq.n	80134fe <aci_gatt_add_service+0x66>
 80134e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80134ec:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80134f0:	781b      	ldrb	r3, [r3, #0]
 80134f2:	2b02      	cmp	r3, #2
 80134f4:	d101      	bne.n	80134fa <aci_gatt_add_service+0x62>
 80134f6:	2311      	movs	r3, #17
 80134f8:	e002      	b.n	8013500 <aci_gatt_add_service+0x68>
 80134fa:	2301      	movs	r3, #1
 80134fc:	e000      	b.n	8013500 <aci_gatt_add_service+0x68>
 80134fe:	2303      	movs	r3, #3
 8013500:	f107 0210 	add.w	r2, r7, #16
 8013504:	4413      	add	r3, r2
 8013506:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 801350a:	f107 030c 	add.w	r3, r7, #12
 801350e:	2203      	movs	r2, #3
 8013510:	2100      	movs	r1, #0
 8013512:	4618      	mov	r0, r3
 8013514:	f000 fc8d 	bl	8013e32 <Osal_MemSet>
  int index_input = 0;
 8013518:	2300      	movs	r3, #0
 801351a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 801351e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8013522:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8013526:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 801352a:	7812      	ldrb	r2, [r2, #0]
 801352c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801352e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013532:	3301      	adds	r3, #1
 8013534:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8013538:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801353c:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8013540:	781b      	ldrb	r3, [r3, #0]
 8013542:	2b01      	cmp	r3, #1
 8013544:	d002      	beq.n	801354c <aci_gatt_add_service+0xb4>
 8013546:	2b02      	cmp	r3, #2
 8013548:	d004      	beq.n	8013554 <aci_gatt_add_service+0xbc>
 801354a:	e007      	b.n	801355c <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 801354c:	2302      	movs	r3, #2
 801354e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8013552:	e005      	b.n	8013560 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8013554:	2310      	movs	r3, #16
 8013556:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 801355a:	e001      	b.n	8013560 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 801355c:	2397      	movs	r3, #151	@ 0x97
 801355e:	e06c      	b.n	801363a <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8013560:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8013564:	1c58      	adds	r0, r3, #1
 8013566:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 801356a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801356e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8013572:	6819      	ldr	r1, [r3, #0]
 8013574:	f000 fc4d 	bl	8013e12 <Osal_MemCpy>
    index_input += size;
 8013578:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 801357c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8013580:	4413      	add	r3, r2
 8013582:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8013586:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801358a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801358e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8013592:	7812      	ldrb	r2, [r2, #0]
 8013594:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8013596:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801359a:	3301      	adds	r3, #1
 801359c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80135a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80135a4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80135a8:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80135ac:	7812      	ldrb	r2, [r2, #0]
 80135ae:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80135b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80135b4:	3301      	adds	r3, #1
 80135b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80135ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80135be:	2218      	movs	r2, #24
 80135c0:	2100      	movs	r1, #0
 80135c2:	4618      	mov	r0, r3
 80135c4:	f000 fc35 	bl	8013e32 <Osal_MemSet>
  rq.ogf = 0x3f;
 80135c8:	233f      	movs	r3, #63	@ 0x3f
 80135ca:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 80135ce:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80135d2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80135d6:	f107 0310 	add.w	r3, r7, #16
 80135da:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80135de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80135e2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80135e6:	f107 030c 	add.w	r3, r7, #12
 80135ea:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80135ee:	2303      	movs	r3, #3
 80135f0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80135f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80135f8:	2100      	movs	r1, #0
 80135fa:	4618      	mov	r0, r3
 80135fc:	f000 fea2 	bl	8014344 <hci_send_req>
 8013600:	4603      	mov	r3, r0
 8013602:	2b00      	cmp	r3, #0
 8013604:	da01      	bge.n	801360a <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8013606:	23ff      	movs	r3, #255	@ 0xff
 8013608:	e017      	b.n	801363a <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 801360a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801360e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013612:	781b      	ldrb	r3, [r3, #0]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d005      	beq.n	8013624 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8013618:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801361c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013620:	781b      	ldrb	r3, [r3, #0]
 8013622:	e00a      	b.n	801363a <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8013624:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013628:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801362c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8013630:	b29a      	uxth	r2, r3
 8013632:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8013636:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8013638:	2300      	movs	r3, #0
}
 801363a:	4618      	mov	r0, r3
 801363c:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8013640:	46bd      	mov	sp, r7
 8013642:	bd90      	pop	{r4, r7, pc}

08013644 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8013644:	b590      	push	{r4, r7, lr}
 8013646:	b0d1      	sub	sp, #324	@ 0x144
 8013648:	af00      	add	r7, sp, #0
 801364a:	4604      	mov	r4, r0
 801364c:	4608      	mov	r0, r1
 801364e:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8013652:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8013656:	600a      	str	r2, [r1, #0]
 8013658:	4619      	mov	r1, r3
 801365a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801365e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8013662:	4622      	mov	r2, r4
 8013664:	801a      	strh	r2, [r3, #0]
 8013666:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801366a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 801366e:	4602      	mov	r2, r0
 8013670:	701a      	strb	r2, [r3, #0]
 8013672:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8013676:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 801367a:	460a      	mov	r2, r1
 801367c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 801367e:	f107 0318 	add.w	r3, r7, #24
 8013682:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8013686:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801368a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 801368e:	781b      	ldrb	r3, [r3, #0]
 8013690:	2b01      	cmp	r3, #1
 8013692:	d00a      	beq.n	80136aa <aci_gatt_add_char+0x66>
 8013694:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8013698:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 801369c:	781b      	ldrb	r3, [r3, #0]
 801369e:	2b02      	cmp	r3, #2
 80136a0:	d101      	bne.n	80136a6 <aci_gatt_add_char+0x62>
 80136a2:	2313      	movs	r3, #19
 80136a4:	e002      	b.n	80136ac <aci_gatt_add_char+0x68>
 80136a6:	2303      	movs	r3, #3
 80136a8:	e000      	b.n	80136ac <aci_gatt_add_char+0x68>
 80136aa:	2305      	movs	r3, #5
 80136ac:	f107 0218 	add.w	r2, r7, #24
 80136b0:	4413      	add	r3, r2
 80136b2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80136b6:	f107 0314 	add.w	r3, r7, #20
 80136ba:	2203      	movs	r2, #3
 80136bc:	2100      	movs	r1, #0
 80136be:	4618      	mov	r0, r3
 80136c0:	f000 fbb7 	bl	8013e32 <Osal_MemSet>
  int index_input = 0;
 80136c4:	2300      	movs	r3, #0
 80136c6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 80136ca:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80136ce:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80136d2:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80136d6:	8812      	ldrh	r2, [r2, #0]
 80136d8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80136da:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80136de:	3302      	adds	r3, #2
 80136e0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80136e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80136e8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80136ec:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80136f0:	7812      	ldrb	r2, [r2, #0]
 80136f2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80136f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80136f8:	3301      	adds	r3, #1
 80136fa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80136fe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8013702:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8013706:	781b      	ldrb	r3, [r3, #0]
 8013708:	2b01      	cmp	r3, #1
 801370a:	d002      	beq.n	8013712 <aci_gatt_add_char+0xce>
 801370c:	2b02      	cmp	r3, #2
 801370e:	d004      	beq.n	801371a <aci_gatt_add_char+0xd6>
 8013710:	e007      	b.n	8013722 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8013712:	2302      	movs	r3, #2
 8013714:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8013718:	e005      	b.n	8013726 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 801371a:	2310      	movs	r3, #16
 801371c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8013720:	e001      	b.n	8013726 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8013722:	2397      	movs	r3, #151	@ 0x97
 8013724:	e091      	b.n	801384a <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8013726:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801372a:	1cd8      	adds	r0, r3, #3
 801372c:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8013730:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8013734:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8013738:	6819      	ldr	r1, [r3, #0]
 801373a:	f000 fb6a 	bl	8013e12 <Osal_MemCpy>
    index_input += size;
 801373e:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8013742:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8013746:	4413      	add	r3, r2
 8013748:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 801374c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013750:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8013754:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8013758:	8812      	ldrh	r2, [r2, #0]
 801375a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 801375c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8013760:	3302      	adds	r3, #2
 8013762:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8013766:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801376a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 801376e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8013770:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8013774:	3301      	adds	r3, #1
 8013776:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 801377a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801377e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8013782:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8013784:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8013788:	3301      	adds	r3, #1
 801378a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 801378e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013792:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8013796:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8013798:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801379c:	3301      	adds	r3, #1
 801379e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80137a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80137a6:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 80137aa:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80137ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80137b0:	3301      	adds	r3, #1
 80137b2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 80137b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80137ba:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 80137be:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80137c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80137c4:	3301      	adds	r3, #1
 80137c6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80137ca:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80137ce:	2218      	movs	r2, #24
 80137d0:	2100      	movs	r1, #0
 80137d2:	4618      	mov	r0, r3
 80137d4:	f000 fb2d 	bl	8013e32 <Osal_MemSet>
  rq.ogf = 0x3f;
 80137d8:	233f      	movs	r3, #63	@ 0x3f
 80137da:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 80137de:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80137e2:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 80137e6:	f107 0318 	add.w	r3, r7, #24
 80137ea:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 80137ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80137f2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 80137f6:	f107 0314 	add.w	r3, r7, #20
 80137fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 80137fe:	2303      	movs	r3, #3
 8013800:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8013804:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8013808:	2100      	movs	r1, #0
 801380a:	4618      	mov	r0, r3
 801380c:	f000 fd9a 	bl	8014344 <hci_send_req>
 8013810:	4603      	mov	r3, r0
 8013812:	2b00      	cmp	r3, #0
 8013814:	da01      	bge.n	801381a <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8013816:	23ff      	movs	r3, #255	@ 0xff
 8013818:	e017      	b.n	801384a <aci_gatt_add_char+0x206>
  if ( resp.Status )
 801381a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801381e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013822:	781b      	ldrb	r3, [r3, #0]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d005      	beq.n	8013834 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8013828:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801382c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013830:	781b      	ldrb	r3, [r3, #0]
 8013832:	e00a      	b.n	801384a <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8013834:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8013838:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801383c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8013840:	b29a      	uxth	r2, r3
 8013842:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8013846:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8013848:	2300      	movs	r3, #0
}
 801384a:	4618      	mov	r0, r3
 801384c:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8013850:	46bd      	mov	sp, r7
 8013852:	bd90      	pop	{r4, r7, pc}

08013854 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8013854:	b5b0      	push	{r4, r5, r7, lr}
 8013856:	b0cc      	sub	sp, #304	@ 0x130
 8013858:	af00      	add	r7, sp, #0
 801385a:	4605      	mov	r5, r0
 801385c:	460c      	mov	r4, r1
 801385e:	4610      	mov	r0, r2
 8013860:	4619      	mov	r1, r3
 8013862:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013866:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801386a:	462a      	mov	r2, r5
 801386c:	801a      	strh	r2, [r3, #0]
 801386e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013872:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013876:	4622      	mov	r2, r4
 8013878:	801a      	strh	r2, [r3, #0]
 801387a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801387e:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8013882:	4602      	mov	r2, r0
 8013884:	701a      	strb	r2, [r3, #0]
 8013886:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801388a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 801388e:	460a      	mov	r2, r1
 8013890:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8013892:	f107 0310 	add.w	r3, r7, #16
 8013896:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801389a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801389e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80138a2:	2200      	movs	r2, #0
 80138a4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80138a6:	2300      	movs	r3, #0
 80138a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 80138ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80138b0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80138b4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80138b8:	8812      	ldrh	r2, [r2, #0]
 80138ba:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80138bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80138c0:	3302      	adds	r3, #2
 80138c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 80138c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80138ca:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80138ce:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80138d2:	8812      	ldrh	r2, [r2, #0]
 80138d4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80138d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80138da:	3302      	adds	r3, #2
 80138dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 80138e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80138e4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80138e8:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 80138ec:	7812      	ldrb	r2, [r2, #0]
 80138ee:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80138f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80138f4:	3301      	adds	r3, #1
 80138f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80138fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80138fe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8013902:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8013906:	7812      	ldrb	r2, [r2, #0]
 8013908:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 801390a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801390e:	3301      	adds	r3, #1
 8013910:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8013914:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013918:	1d98      	adds	r0, r3, #6
 801391a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801391e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8013922:	781b      	ldrb	r3, [r3, #0]
 8013924:	461a      	mov	r2, r3
 8013926:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 801392a:	f000 fa72 	bl	8013e12 <Osal_MemCpy>
  index_input += Char_Value_Length;
 801392e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013932:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8013936:	781b      	ldrb	r3, [r3, #0]
 8013938:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801393c:	4413      	add	r3, r2
 801393e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8013942:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013946:	2218      	movs	r2, #24
 8013948:	2100      	movs	r1, #0
 801394a:	4618      	mov	r0, r3
 801394c:	f000 fa71 	bl	8013e32 <Osal_MemSet>
  rq.ogf = 0x3f;
 8013950:	233f      	movs	r3, #63	@ 0x3f
 8013952:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8013956:	f44f 7383 	mov.w	r3, #262	@ 0x106
 801395a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801395e:	f107 0310 	add.w	r3, r7, #16
 8013962:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8013966:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801396a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801396e:	f107 030f 	add.w	r3, r7, #15
 8013972:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8013976:	2301      	movs	r3, #1
 8013978:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801397c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013980:	2100      	movs	r1, #0
 8013982:	4618      	mov	r0, r3
 8013984:	f000 fcde 	bl	8014344 <hci_send_req>
 8013988:	4603      	mov	r3, r0
 801398a:	2b00      	cmp	r3, #0
 801398c:	da01      	bge.n	8013992 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 801398e:	23ff      	movs	r3, #255	@ 0xff
 8013990:	e004      	b.n	801399c <aci_gatt_update_char_value+0x148>
  return status;
 8013992:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013996:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801399a:	781b      	ldrb	r3, [r3, #0]
}
 801399c:	4618      	mov	r0, r3
 801399e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80139a2:	46bd      	mov	sp, r7
 80139a4:	bdb0      	pop	{r4, r5, r7, pc}

080139a6 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 80139a6:	b580      	push	{r7, lr}
 80139a8:	b0cc      	sub	sp, #304	@ 0x130
 80139aa:	af00      	add	r7, sp, #0
 80139ac:	4602      	mov	r2, r0
 80139ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80139b2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80139b6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 80139b8:	f107 0310 	add.w	r3, r7, #16
 80139bc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80139c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80139c4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80139c8:	2200      	movs	r2, #0
 80139ca:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80139cc:	2300      	movs	r3, #0
 80139ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80139d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80139d6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80139da:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80139de:	8812      	ldrh	r2, [r2, #0]
 80139e0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80139e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80139e6:	3302      	adds	r3, #2
 80139e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80139ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80139f0:	2218      	movs	r2, #24
 80139f2:	2100      	movs	r1, #0
 80139f4:	4618      	mov	r0, r3
 80139f6:	f000 fa1c 	bl	8013e32 <Osal_MemSet>
  rq.ogf = 0x3f;
 80139fa:	233f      	movs	r3, #63	@ 0x3f
 80139fc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8013a00:	f240 1325 	movw	r3, #293	@ 0x125
 8013a04:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8013a08:	f107 0310 	add.w	r3, r7, #16
 8013a0c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8013a10:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013a14:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8013a18:	f107 030f 	add.w	r3, r7, #15
 8013a1c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8013a20:	2301      	movs	r3, #1
 8013a22:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8013a26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013a2a:	2100      	movs	r1, #0
 8013a2c:	4618      	mov	r0, r3
 8013a2e:	f000 fc89 	bl	8014344 <hci_send_req>
 8013a32:	4603      	mov	r3, r0
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	da01      	bge.n	8013a3c <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8013a38:	23ff      	movs	r3, #255	@ 0xff
 8013a3a:	e004      	b.n	8013a46 <aci_gatt_confirm_indication+0xa0>
  return status;
 8013a3c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013a40:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8013a44:	781b      	ldrb	r3, [r3, #0]
}
 8013a46:	4618      	mov	r0, r3
 8013a48:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8013a4c:	46bd      	mov	sp, r7
 8013a4e:	bd80      	pop	{r7, pc}

08013a50 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b0cc      	sub	sp, #304	@ 0x130
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013a5a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8013a5e:	601a      	str	r2, [r3, #0]
 8013a60:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013a64:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8013a68:	4602      	mov	r2, r0
 8013a6a:	701a      	strb	r2, [r3, #0]
 8013a6c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013a70:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8013a74:	460a      	mov	r2, r1
 8013a76:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8013a78:	f107 0310 	add.w	r3, r7, #16
 8013a7c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8013a80:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013a84:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8013a88:	2200      	movs	r2, #0
 8013a8a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8013a92:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013a96:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8013a9a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8013a9e:	7812      	ldrb	r2, [r2, #0]
 8013aa0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8013aa2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013aa6:	3301      	adds	r3, #1
 8013aa8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8013aac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013ab0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8013ab4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8013ab8:	7812      	ldrb	r2, [r2, #0]
 8013aba:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8013abc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013ac0:	3301      	adds	r3, #1
 8013ac2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8013ac6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013aca:	1c98      	adds	r0, r3, #2
 8013acc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013ad0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8013ad4:	781a      	ldrb	r2, [r3, #0]
 8013ad6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013ada:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8013ade:	6819      	ldr	r1, [r3, #0]
 8013ae0:	f000 f997 	bl	8013e12 <Osal_MemCpy>
  index_input += Length;
 8013ae4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013ae8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8013aec:	781b      	ldrb	r3, [r3, #0]
 8013aee:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8013af2:	4413      	add	r3, r2
 8013af4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8013af8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013afc:	2218      	movs	r2, #24
 8013afe:	2100      	movs	r1, #0
 8013b00:	4618      	mov	r0, r3
 8013b02:	f000 f996 	bl	8013e32 <Osal_MemSet>
  rq.ogf = 0x3f;
 8013b06:	233f      	movs	r3, #63	@ 0x3f
 8013b08:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8013b0c:	230c      	movs	r3, #12
 8013b0e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8013b12:	f107 0310 	add.w	r3, r7, #16
 8013b16:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8013b1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013b1e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8013b22:	f107 030f 	add.w	r3, r7, #15
 8013b26:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8013b2a:	2301      	movs	r3, #1
 8013b2c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8013b30:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013b34:	2100      	movs	r1, #0
 8013b36:	4618      	mov	r0, r3
 8013b38:	f000 fc04 	bl	8014344 <hci_send_req>
 8013b3c:	4603      	mov	r3, r0
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	da01      	bge.n	8013b46 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8013b42:	23ff      	movs	r3, #255	@ 0xff
 8013b44:	e004      	b.n	8013b50 <aci_hal_write_config_data+0x100>
  return status;
 8013b46:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013b4a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8013b4e:	781b      	ldrb	r3, [r3, #0]
}
 8013b50:	4618      	mov	r0, r3
 8013b52:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8013b56:	46bd      	mov	sp, r7
 8013b58:	bd80      	pop	{r7, pc}

08013b5a <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8013b5a:	b580      	push	{r7, lr}
 8013b5c:	b0cc      	sub	sp, #304	@ 0x130
 8013b5e:	af00      	add	r7, sp, #0
 8013b60:	4602      	mov	r2, r0
 8013b62:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013b66:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8013b6a:	701a      	strb	r2, [r3, #0]
 8013b6c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013b70:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8013b74:	460a      	mov	r2, r1
 8013b76:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8013b78:	f107 0310 	add.w	r3, r7, #16
 8013b7c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8013b80:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013b84:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8013b88:	2200      	movs	r2, #0
 8013b8a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8013b92:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013b96:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8013b9a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8013b9e:	7812      	ldrb	r2, [r2, #0]
 8013ba0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8013ba2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013ba6:	3301      	adds	r3, #1
 8013ba8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8013bac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013bb0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8013bb4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8013bb8:	7812      	ldrb	r2, [r2, #0]
 8013bba:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8013bbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013bc0:	3301      	adds	r3, #1
 8013bc2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8013bc6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013bca:	2218      	movs	r2, #24
 8013bcc:	2100      	movs	r1, #0
 8013bce:	4618      	mov	r0, r3
 8013bd0:	f000 f92f 	bl	8013e32 <Osal_MemSet>
  rq.ogf = 0x3f;
 8013bd4:	233f      	movs	r3, #63	@ 0x3f
 8013bd6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8013bda:	230f      	movs	r3, #15
 8013bdc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8013be0:	f107 0310 	add.w	r3, r7, #16
 8013be4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8013be8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013bec:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8013bf0:	f107 030f 	add.w	r3, r7, #15
 8013bf4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8013bf8:	2301      	movs	r3, #1
 8013bfa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8013bfe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013c02:	2100      	movs	r1, #0
 8013c04:	4618      	mov	r0, r3
 8013c06:	f000 fb9d 	bl	8014344 <hci_send_req>
 8013c0a:	4603      	mov	r3, r0
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	da01      	bge.n	8013c14 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8013c10:	23ff      	movs	r3, #255	@ 0xff
 8013c12:	e004      	b.n	8013c1e <aci_hal_set_tx_power_level+0xc4>
  return status;
 8013c14:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013c18:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8013c1c:	781b      	ldrb	r3, [r3, #0]
}
 8013c1e:	4618      	mov	r0, r3
 8013c20:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8013c24:	46bd      	mov	sp, r7
 8013c26:	bd80      	pop	{r7, pc}

08013c28 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8013c28:	b580      	push	{r7, lr}
 8013c2a:	b0cc      	sub	sp, #304	@ 0x130
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	4602      	mov	r2, r0
 8013c30:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013c34:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8013c38:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8013c3a:	f107 0310 	add.w	r3, r7, #16
 8013c3e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8013c42:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013c46:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8013c4a:	2200      	movs	r2, #0
 8013c4c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8013c4e:	2300      	movs	r3, #0
 8013c50:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8013c54:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013c58:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8013c5c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8013c60:	8812      	ldrh	r2, [r2, #0]
 8013c62:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8013c64:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013c68:	3302      	adds	r3, #2
 8013c6a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8013c6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013c72:	2218      	movs	r2, #24
 8013c74:	2100      	movs	r1, #0
 8013c76:	4618      	mov	r0, r3
 8013c78:	f000 f8db 	bl	8013e32 <Osal_MemSet>
  rq.ogf = 0x3f;
 8013c7c:	233f      	movs	r3, #63	@ 0x3f
 8013c7e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8013c82:	2318      	movs	r3, #24
 8013c84:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8013c88:	f107 0310 	add.w	r3, r7, #16
 8013c8c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8013c90:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013c94:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8013c98:	f107 030f 	add.w	r3, r7, #15
 8013c9c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8013ca0:	2301      	movs	r3, #1
 8013ca2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8013ca6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013caa:	2100      	movs	r1, #0
 8013cac:	4618      	mov	r0, r3
 8013cae:	f000 fb49 	bl	8014344 <hci_send_req>
 8013cb2:	4603      	mov	r3, r0
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	da01      	bge.n	8013cbc <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8013cb8:	23ff      	movs	r3, #255	@ 0xff
 8013cba:	e004      	b.n	8013cc6 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8013cbc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013cc0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8013cc4:	781b      	ldrb	r3, [r3, #0]
}
 8013cc6:	4618      	mov	r0, r3
 8013cc8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8013ccc:	46bd      	mov	sp, r7
 8013cce:	bd80      	pop	{r7, pc}

08013cd0 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	b088      	sub	sp, #32
 8013cd4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8013cd6:	2300      	movs	r3, #0
 8013cd8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8013cda:	f107 0308 	add.w	r3, r7, #8
 8013cde:	2218      	movs	r2, #24
 8013ce0:	2100      	movs	r1, #0
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	f000 f8a5 	bl	8013e32 <Osal_MemSet>
  rq.ogf = 0x03;
 8013ce8:	2303      	movs	r3, #3
 8013cea:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8013cec:	2303      	movs	r3, #3
 8013cee:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8013cf0:	1dfb      	adds	r3, r7, #7
 8013cf2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8013cf4:	2301      	movs	r3, #1
 8013cf6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8013cf8:	f107 0308 	add.w	r3, r7, #8
 8013cfc:	2100      	movs	r1, #0
 8013cfe:	4618      	mov	r0, r3
 8013d00:	f000 fb20 	bl	8014344 <hci_send_req>
 8013d04:	4603      	mov	r3, r0
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	da01      	bge.n	8013d0e <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8013d0a:	23ff      	movs	r3, #255	@ 0xff
 8013d0c:	e000      	b.n	8013d10 <hci_reset+0x40>
  return status;
 8013d0e:	79fb      	ldrb	r3, [r7, #7]
}
 8013d10:	4618      	mov	r0, r3
 8013d12:	3720      	adds	r7, #32
 8013d14:	46bd      	mov	sp, r7
 8013d16:	bd80      	pop	{r7, pc}

08013d18 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8013d18:	b590      	push	{r4, r7, lr}
 8013d1a:	b0cd      	sub	sp, #308	@ 0x134
 8013d1c:	af00      	add	r7, sp, #0
 8013d1e:	4604      	mov	r4, r0
 8013d20:	4608      	mov	r0, r1
 8013d22:	4611      	mov	r1, r2
 8013d24:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013d28:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8013d2c:	4622      	mov	r2, r4
 8013d2e:	701a      	strb	r2, [r3, #0]
 8013d30:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013d34:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8013d38:	4602      	mov	r2, r0
 8013d3a:	701a      	strb	r2, [r3, #0]
 8013d3c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013d40:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8013d44:	460a      	mov	r2, r1
 8013d46:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8013d48:	f107 0310 	add.w	r3, r7, #16
 8013d4c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8013d50:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013d54:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8013d58:	2200      	movs	r2, #0
 8013d5a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8013d5c:	2300      	movs	r3, #0
 8013d5e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8013d62:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013d66:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8013d6a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8013d6e:	7812      	ldrb	r2, [r2, #0]
 8013d70:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8013d72:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013d76:	3301      	adds	r3, #1
 8013d78:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8013d7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013d80:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8013d84:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8013d88:	7812      	ldrb	r2, [r2, #0]
 8013d8a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8013d8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013d90:	3301      	adds	r3, #1
 8013d92:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8013d96:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013d9a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8013d9e:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8013da2:	7812      	ldrb	r2, [r2, #0]
 8013da4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8013da6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013daa:	3301      	adds	r3, #1
 8013dac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8013db0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013db4:	2218      	movs	r2, #24
 8013db6:	2100      	movs	r1, #0
 8013db8:	4618      	mov	r0, r3
 8013dba:	f000 f83a 	bl	8013e32 <Osal_MemSet>
  rq.ogf = 0x08;
 8013dbe:	2308      	movs	r3, #8
 8013dc0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8013dc4:	2331      	movs	r3, #49	@ 0x31
 8013dc6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8013dca:	f107 0310 	add.w	r3, r7, #16
 8013dce:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8013dd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013dd6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8013dda:	f107 030f 	add.w	r3, r7, #15
 8013dde:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8013de2:	2301      	movs	r3, #1
 8013de4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8013de8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013dec:	2100      	movs	r1, #0
 8013dee:	4618      	mov	r0, r3
 8013df0:	f000 faa8 	bl	8014344 <hci_send_req>
 8013df4:	4603      	mov	r3, r0
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	da01      	bge.n	8013dfe <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8013dfa:	23ff      	movs	r3, #255	@ 0xff
 8013dfc:	e004      	b.n	8013e08 <hci_le_set_default_phy+0xf0>
  return status;
 8013dfe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013e02:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8013e06:	781b      	ldrb	r3, [r3, #0]
}
 8013e08:	4618      	mov	r0, r3
 8013e0a:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8013e0e:	46bd      	mov	sp, r7
 8013e10:	bd90      	pop	{r4, r7, pc}

08013e12 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8013e12:	b580      	push	{r7, lr}
 8013e14:	b084      	sub	sp, #16
 8013e16:	af00      	add	r7, sp, #0
 8013e18:	60f8      	str	r0, [r7, #12]
 8013e1a:	60b9      	str	r1, [r7, #8]
 8013e1c:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8013e1e:	687a      	ldr	r2, [r7, #4]
 8013e20:	68b9      	ldr	r1, [r7, #8]
 8013e22:	68f8      	ldr	r0, [r7, #12]
 8013e24:	f005 fd4d 	bl	80198c2 <memcpy>
 8013e28:	4603      	mov	r3, r0
}
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	3710      	adds	r7, #16
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	bd80      	pop	{r7, pc}

08013e32 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8013e32:	b580      	push	{r7, lr}
 8013e34:	b084      	sub	sp, #16
 8013e36:	af00      	add	r7, sp, #0
 8013e38:	60f8      	str	r0, [r7, #12]
 8013e3a:	60b9      	str	r1, [r7, #8]
 8013e3c:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8013e3e:	687a      	ldr	r2, [r7, #4]
 8013e40:	68b9      	ldr	r1, [r7, #8]
 8013e42:	68f8      	ldr	r0, [r7, #12]
 8013e44:	f005 fc69 	bl	801971a <memset>
 8013e48:	4603      	mov	r3, r0
}
 8013e4a:	4618      	mov	r0, r3
 8013e4c:	3710      	adds	r7, #16
 8013e4e:	46bd      	mov	sp, r7
 8013e50:	bd80      	pop	{r7, pc}

08013e52 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8013e52:	b480      	push	{r7}
 8013e54:	af00      	add	r7, sp, #0
  return;
 8013e56:	bf00      	nop
}
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e5e:	4770      	bx	lr

08013e60 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8013e60:	b480      	push	{r7}
 8013e62:	af00      	add	r7, sp, #0
  return;
 8013e64:	bf00      	nop
}
 8013e66:	46bd      	mov	sp, r7
 8013e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e6c:	4770      	bx	lr

08013e6e <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8013e6e:	b480      	push	{r7}
 8013e70:	af00      	add	r7, sp, #0
  return;
 8013e72:	bf00      	nop
}
 8013e74:	46bd      	mov	sp, r7
 8013e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e7a:	4770      	bx	lr

08013e7c <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8013e7c:	b480      	push	{r7}
 8013e7e:	af00      	add	r7, sp, #0
  return;
 8013e80:	bf00      	nop
}
 8013e82:	46bd      	mov	sp, r7
 8013e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e88:	4770      	bx	lr

08013e8a <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8013e8a:	b480      	push	{r7}
 8013e8c:	af00      	add	r7, sp, #0
  return;
 8013e8e:	bf00      	nop
}
 8013e90:	46bd      	mov	sp, r7
 8013e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e96:	4770      	bx	lr

08013e98 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8013e98:	b480      	push	{r7}
 8013e9a:	af00      	add	r7, sp, #0
  return;
 8013e9c:	bf00      	nop
}
 8013e9e:	46bd      	mov	sp, r7
 8013ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea4:	4770      	bx	lr

08013ea6 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8013ea6:	b480      	push	{r7}
 8013ea8:	af00      	add	r7, sp, #0
  return;
 8013eaa:	bf00      	nop
}
 8013eac:	46bd      	mov	sp, r7
 8013eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eb2:	4770      	bx	lr

08013eb4 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8013eb4:	b480      	push	{r7}
 8013eb6:	af00      	add	r7, sp, #0
  return;
 8013eb8:	bf00      	nop
}
 8013eba:	46bd      	mov	sp, r7
 8013ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ec0:	4770      	bx	lr

08013ec2 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8013ec2:	b480      	push	{r7}
 8013ec4:	af00      	add	r7, sp, #0
  return;
 8013ec6:	bf00      	nop
}
 8013ec8:	46bd      	mov	sp, r7
 8013eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ece:	4770      	bx	lr

08013ed0 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8013ed0:	b480      	push	{r7}
 8013ed2:	af00      	add	r7, sp, #0
  return;
 8013ed4:	bf00      	nop
}
 8013ed6:	46bd      	mov	sp, r7
 8013ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013edc:	4770      	bx	lr

08013ede <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8013ede:	b480      	push	{r7}
 8013ee0:	af00      	add	r7, sp, #0
  return;
 8013ee2:	bf00      	nop
}
 8013ee4:	46bd      	mov	sp, r7
 8013ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eea:	4770      	bx	lr

08013eec <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8013eec:	b480      	push	{r7}
 8013eee:	af00      	add	r7, sp, #0
  return;
 8013ef0:	bf00      	nop
}
 8013ef2:	46bd      	mov	sp, r7
 8013ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef8:	4770      	bx	lr

08013efa <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8013efa:	b480      	push	{r7}
 8013efc:	af00      	add	r7, sp, #0
  return;
 8013efe:	bf00      	nop
}
 8013f00:	46bd      	mov	sp, r7
 8013f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f06:	4770      	bx	lr

08013f08 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8013f08:	b480      	push	{r7}
 8013f0a:	af00      	add	r7, sp, #0
  return;
 8013f0c:	bf00      	nop
}
 8013f0e:	46bd      	mov	sp, r7
 8013f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f14:	4770      	bx	lr

08013f16 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8013f16:	b480      	push	{r7}
 8013f18:	af00      	add	r7, sp, #0
  return;
 8013f1a:	bf00      	nop
}
 8013f1c:	46bd      	mov	sp, r7
 8013f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f22:	4770      	bx	lr

08013f24 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8013f24:	b480      	push	{r7}
 8013f26:	af00      	add	r7, sp, #0
  return;
 8013f28:	bf00      	nop
}
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f30:	4770      	bx	lr

08013f32 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8013f32:	b480      	push	{r7}
 8013f34:	af00      	add	r7, sp, #0
  return;
 8013f36:	bf00      	nop
}
 8013f38:	46bd      	mov	sp, r7
 8013f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f3e:	4770      	bx	lr

08013f40 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8013f40:	b580      	push	{r7, lr}
 8013f42:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8013f44:	4b04      	ldr	r3, [pc, #16]	@ (8013f58 <SVCCTL_Init+0x18>)
 8013f46:	2200      	movs	r2, #0
 8013f48:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8013f4a:	4b04      	ldr	r3, [pc, #16]	@ (8013f5c <SVCCTL_Init+0x1c>)
 8013f4c:	2200      	movs	r2, #0
 8013f4e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8013f50:	f000 f806 	bl	8013f60 <SVCCTL_SvcInit>

  return;
 8013f54:	bf00      	nop
}
 8013f56:	bd80      	pop	{r7, pc}
 8013f58:	2000030c 	.word	0x2000030c
 8013f5c:	2000032c 	.word	0x2000032c

08013f60 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8013f60:	b580      	push	{r7, lr}
 8013f62:	af00      	add	r7, sp, #0
  BAS_Init();
 8013f64:	f7ff ff75 	bl	8013e52 <BAS_Init>

  BLS_Init();
 8013f68:	f7ff ff7a 	bl	8013e60 <BLS_Init>

  CRS_STM_Init();
 8013f6c:	f7ff ff7f 	bl	8013e6e <CRS_STM_Init>

  DIS_Init();
 8013f70:	f7ff ff84 	bl	8013e7c <DIS_Init>

  EDS_STM_Init();
 8013f74:	f7ff ff89 	bl	8013e8a <EDS_STM_Init>

  HIDS_Init();
 8013f78:	f7ff ff8e 	bl	8013e98 <HIDS_Init>

  HRS_Init();
 8013f7c:	f7ff ff93 	bl	8013ea6 <HRS_Init>

  HTS_Init();
 8013f80:	f7ff ff98 	bl	8013eb4 <HTS_Init>

  IAS_Init();
 8013f84:	f7ff ff9d 	bl	8013ec2 <IAS_Init>

  LLS_Init();
 8013f88:	f7ff ffa2 	bl	8013ed0 <LLS_Init>

  TPS_Init();
 8013f8c:	f7ff ffa7 	bl	8013ede <TPS_Init>

  MOTENV_STM_Init();
 8013f90:	f7ff ffac 	bl	8013eec <MOTENV_STM_Init>

  P2PS_STM_Init();
 8013f94:	f7ff ffb1 	bl	8013efa <P2PS_STM_Init>

  ZDD_STM_Init();
 8013f98:	f7ff ffb6 	bl	8013f08 <ZDD_STM_Init>

  OTAS_STM_Init();
 8013f9c:	f7ff ffbb 	bl	8013f16 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8013fa0:	f7ff ffc7 	bl	8013f32 <BVOPUS_STM_Init>

  MESH_Init();
 8013fa4:	f7ff ffbe 	bl	8013f24 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8013fa8:	f001 fb84 	bl	80156b4 <SVCCTL_InitCustomSvc>
  
  return;
 8013fac:	bf00      	nop
}
 8013fae:	bd80      	pop	{r7, pc}

08013fb0 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8013fb0:	b480      	push	{r7}
 8013fb2:	b083      	sub	sp, #12
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8013fb8:	4b09      	ldr	r3, [pc, #36]	@ (8013fe0 <SVCCTL_RegisterSvcHandler+0x30>)
 8013fba:	7f1b      	ldrb	r3, [r3, #28]
 8013fbc:	4619      	mov	r1, r3
 8013fbe:	4a08      	ldr	r2, [pc, #32]	@ (8013fe0 <SVCCTL_RegisterSvcHandler+0x30>)
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8013fc6:	4b06      	ldr	r3, [pc, #24]	@ (8013fe0 <SVCCTL_RegisterSvcHandler+0x30>)
 8013fc8:	7f1b      	ldrb	r3, [r3, #28]
 8013fca:	3301      	adds	r3, #1
 8013fcc:	b2da      	uxtb	r2, r3
 8013fce:	4b04      	ldr	r3, [pc, #16]	@ (8013fe0 <SVCCTL_RegisterSvcHandler+0x30>)
 8013fd0:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8013fd2:	bf00      	nop
}
 8013fd4:	370c      	adds	r7, #12
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fdc:	4770      	bx	lr
 8013fde:	bf00      	nop
 8013fe0:	2000030c 	.word	0x2000030c

08013fe4 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8013fe4:	b580      	push	{r7, lr}
 8013fe6:	b086      	sub	sp, #24
 8013fe8:	af00      	add	r7, sp, #0
 8013fea:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	3301      	adds	r3, #1
 8013ff0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8013ff6:	693b      	ldr	r3, [r7, #16]
 8013ff8:	781b      	ldrb	r3, [r3, #0]
 8013ffa:	2bff      	cmp	r3, #255	@ 0xff
 8013ffc:	d125      	bne.n	801404a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8013ffe:	693b      	ldr	r3, [r7, #16]
 8014000:	3302      	adds	r3, #2
 8014002:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	881b      	ldrh	r3, [r3, #0]
 8014008:	b29b      	uxth	r3, r3
 801400a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801400e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8014012:	d118      	bne.n	8014046 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8014014:	2300      	movs	r3, #0
 8014016:	757b      	strb	r3, [r7, #21]
 8014018:	e00d      	b.n	8014036 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 801401a:	7d7b      	ldrb	r3, [r7, #21]
 801401c:	4a1a      	ldr	r2, [pc, #104]	@ (8014088 <SVCCTL_UserEvtRx+0xa4>)
 801401e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014022:	6878      	ldr	r0, [r7, #4]
 8014024:	4798      	blx	r3
 8014026:	4603      	mov	r3, r0
 8014028:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 801402a:	7dfb      	ldrb	r3, [r7, #23]
 801402c:	2b00      	cmp	r3, #0
 801402e:	d108      	bne.n	8014042 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8014030:	7d7b      	ldrb	r3, [r7, #21]
 8014032:	3301      	adds	r3, #1
 8014034:	757b      	strb	r3, [r7, #21]
 8014036:	4b14      	ldr	r3, [pc, #80]	@ (8014088 <SVCCTL_UserEvtRx+0xa4>)
 8014038:	7f1b      	ldrb	r3, [r3, #28]
 801403a:	7d7a      	ldrb	r2, [r7, #21]
 801403c:	429a      	cmp	r2, r3
 801403e:	d3ec      	bcc.n	801401a <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8014040:	e002      	b.n	8014048 <SVCCTL_UserEvtRx+0x64>
              break;
 8014042:	bf00      	nop
          break;
 8014044:	e000      	b.n	8014048 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8014046:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8014048:	e000      	b.n	801404c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 801404a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 801404c:	7dfb      	ldrb	r3, [r7, #23]
 801404e:	2b02      	cmp	r3, #2
 8014050:	d00f      	beq.n	8014072 <SVCCTL_UserEvtRx+0x8e>
 8014052:	2b02      	cmp	r3, #2
 8014054:	dc10      	bgt.n	8014078 <SVCCTL_UserEvtRx+0x94>
 8014056:	2b00      	cmp	r3, #0
 8014058:	d002      	beq.n	8014060 <SVCCTL_UserEvtRx+0x7c>
 801405a:	2b01      	cmp	r3, #1
 801405c:	d006      	beq.n	801406c <SVCCTL_UserEvtRx+0x88>
 801405e:	e00b      	b.n	8014078 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8014060:	6878      	ldr	r0, [r7, #4]
 8014062:	f000 ff85 	bl	8014f70 <SVCCTL_App_Notification>
 8014066:	4603      	mov	r3, r0
 8014068:	75bb      	strb	r3, [r7, #22]
      break;
 801406a:	e008      	b.n	801407e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 801406c:	2301      	movs	r3, #1
 801406e:	75bb      	strb	r3, [r7, #22]
      break;
 8014070:	e005      	b.n	801407e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8014072:	2300      	movs	r3, #0
 8014074:	75bb      	strb	r3, [r7, #22]
      break;
 8014076:	e002      	b.n	801407e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8014078:	2301      	movs	r3, #1
 801407a:	75bb      	strb	r3, [r7, #22]
      break;
 801407c:	bf00      	nop
  }

  return (return_status);
 801407e:	7dbb      	ldrb	r3, [r7, #22]
}
 8014080:	4618      	mov	r0, r3
 8014082:	3718      	adds	r7, #24
 8014084:	46bd      	mov	sp, r7
 8014086:	bd80      	pop	{r7, pc}
 8014088:	2000030c 	.word	0x2000030c

0801408c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 801408c:	b580      	push	{r7, lr}
 801408e:	b088      	sub	sp, #32
 8014090:	af00      	add	r7, sp, #0
 8014092:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8014094:	f107 030c 	add.w	r3, r7, #12
 8014098:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80140a0:	69fb      	ldr	r3, [r7, #28]
 80140a2:	212e      	movs	r1, #46	@ 0x2e
 80140a4:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 80140a8:	f000 fae8 	bl	801467c <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80140ac:	69fb      	ldr	r3, [r7, #28]
 80140ae:	330b      	adds	r3, #11
 80140b0:	78db      	ldrb	r3, [r3, #3]
}
 80140b2:	4618      	mov	r0, r3
 80140b4:	3720      	adds	r7, #32
 80140b6:	46bd      	mov	sp, r7
 80140b8:	bd80      	pop	{r7, pc}

080140ba <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80140ba:	b580      	push	{r7, lr}
 80140bc:	b088      	sub	sp, #32
 80140be:	af00      	add	r7, sp, #0
 80140c0:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80140c2:	f107 030c 	add.w	r3, r7, #12
 80140c6:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80140ce:	69fb      	ldr	r3, [r7, #28]
 80140d0:	210f      	movs	r1, #15
 80140d2:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 80140d6:	f000 fad1 	bl	801467c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80140da:	69fb      	ldr	r3, [r7, #28]
 80140dc:	330b      	adds	r3, #11
 80140de:	78db      	ldrb	r3, [r3, #3]
}
 80140e0:	4618      	mov	r0, r3
 80140e2:	3720      	adds	r7, #32
 80140e4:	46bd      	mov	sp, r7
 80140e6:	bd80      	pop	{r7, pc}

080140e8 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80140e8:	b580      	push	{r7, lr}
 80140ea:	b088      	sub	sp, #32
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80140f0:	f107 030c 	add.w	r3, r7, #12
 80140f4:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 80140f6:	69fb      	ldr	r3, [r7, #28]
 80140f8:	687a      	ldr	r2, [r7, #4]
 80140fa:	2110      	movs	r1, #16
 80140fc:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8014100:	f000 fabc 	bl	801467c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8014104:	69fb      	ldr	r3, [r7, #28]
 8014106:	330b      	adds	r3, #11
 8014108:	78db      	ldrb	r3, [r3, #3]
}
 801410a:	4618      	mov	r0, r3
 801410c:	3720      	adds	r7, #32
 801410e:	46bd      	mov	sp, r7
 8014110:	bd80      	pop	{r7, pc}
	...

08014114 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8014114:	b480      	push	{r7}
 8014116:	b08b      	sub	sp, #44	@ 0x2c
 8014118:	af00      	add	r7, sp, #0
 801411a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 801411c:	2300      	movs	r3, #0
 801411e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8014120:	2300      	movs	r3, #0
 8014122:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8014124:	2300      	movs	r3, #0
 8014126:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8014128:	2300      	movs	r3, #0
 801412a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 801412c:	2300      	movs	r3, #0
 801412e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8014130:	2300      	movs	r3, #0
 8014132:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8014134:	2300      	movs	r3, #0
 8014136:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8014138:	2300      	movs	r3, #0
 801413a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 801413c:	4b4a      	ldr	r3, [pc, #296]	@ (8014268 <SHCI_GetWirelessFwInfo+0x154>)
 801413e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014140:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014144:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8014146:	693b      	ldr	r3, [r7, #16]
 8014148:	009b      	lsls	r3, r3, #2
 801414a:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 801414e:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8014156:	68bb      	ldr	r3, [r7, #8]
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	4a44      	ldr	r2, [pc, #272]	@ (801426c <SHCI_GetWirelessFwInfo+0x158>)
 801415c:	4293      	cmp	r3, r2
 801415e:	d10f      	bne.n	8014180 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8014160:	68bb      	ldr	r3, [r7, #8]
 8014162:	695b      	ldr	r3, [r3, #20]
 8014164:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8014166:	68bb      	ldr	r3, [r7, #8]
 8014168:	699b      	ldr	r3, [r3, #24]
 801416a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 801416c:	68bb      	ldr	r3, [r7, #8]
 801416e:	69db      	ldr	r3, [r3, #28]
 8014170:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8014172:	68bb      	ldr	r3, [r7, #8]
 8014174:	68db      	ldr	r3, [r3, #12]
 8014176:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8014178:	68bb      	ldr	r3, [r7, #8]
 801417a:	691b      	ldr	r3, [r3, #16]
 801417c:	617b      	str	r3, [r7, #20]
 801417e:	e01a      	b.n	80141b6 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8014180:	693b      	ldr	r3, [r7, #16]
 8014182:	009b      	lsls	r3, r3, #2
 8014184:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8014188:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 801418c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	691b      	ldr	r3, [r3, #16]
 8014194:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	695b      	ldr	r3, [r3, #20]
 801419c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	699b      	ldr	r3, [r3, #24]
 80141a4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	685b      	ldr	r3, [r3, #4]
 80141ac:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	689b      	ldr	r3, [r3, #8]
 80141b4:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80141b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141b8:	0e1b      	lsrs	r3, r3, #24
 80141ba:	b2da      	uxtb	r2, r3
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80141c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141c2:	0c1b      	lsrs	r3, r3, #16
 80141c4:	b2da      	uxtb	r2, r3
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80141ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141cc:	0a1b      	lsrs	r3, r3, #8
 80141ce:	b2da      	uxtb	r2, r3
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80141d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141d6:	091b      	lsrs	r3, r3, #4
 80141d8:	b2db      	uxtb	r3, r3
 80141da:	f003 030f 	and.w	r3, r3, #15
 80141de:	b2da      	uxtb	r2, r3
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80141e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141e6:	b2db      	uxtb	r3, r3
 80141e8:	f003 030f 	and.w	r3, r3, #15
 80141ec:	b2da      	uxtb	r2, r3
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80141f2:	6a3b      	ldr	r3, [r7, #32]
 80141f4:	0e1b      	lsrs	r3, r3, #24
 80141f6:	b2da      	uxtb	r2, r3
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80141fc:	6a3b      	ldr	r3, [r7, #32]
 80141fe:	0c1b      	lsrs	r3, r3, #16
 8014200:	b2da      	uxtb	r2, r3
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8014206:	6a3b      	ldr	r3, [r7, #32]
 8014208:	0a1b      	lsrs	r3, r3, #8
 801420a:	b2da      	uxtb	r2, r3
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8014210:	6a3b      	ldr	r3, [r7, #32]
 8014212:	b2da      	uxtb	r2, r3
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8014218:	69fb      	ldr	r3, [r7, #28]
 801421a:	b2da      	uxtb	r2, r3
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8014220:	69bb      	ldr	r3, [r7, #24]
 8014222:	0e1b      	lsrs	r3, r3, #24
 8014224:	b2da      	uxtb	r2, r3
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 801422a:	69bb      	ldr	r3, [r7, #24]
 801422c:	0c1b      	lsrs	r3, r3, #16
 801422e:	b2da      	uxtb	r2, r3
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8014234:	69bb      	ldr	r3, [r7, #24]
 8014236:	0a1b      	lsrs	r3, r3, #8
 8014238:	b2da      	uxtb	r2, r3
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 801423e:	697b      	ldr	r3, [r7, #20]
 8014240:	0e1b      	lsrs	r3, r3, #24
 8014242:	b2da      	uxtb	r2, r3
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8014248:	697b      	ldr	r3, [r7, #20]
 801424a:	0c1b      	lsrs	r3, r3, #16
 801424c:	b2da      	uxtb	r2, r3
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8014252:	697b      	ldr	r3, [r7, #20]
 8014254:	b2da      	uxtb	r2, r3
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 801425a:	2300      	movs	r3, #0
}
 801425c:	4618      	mov	r0, r3
 801425e:	372c      	adds	r7, #44	@ 0x2c
 8014260:	46bd      	mov	sp, r7
 8014262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014266:	4770      	bx	lr
 8014268:	58004000 	.word	0x58004000
 801426c:	a94656b9 	.word	0xa94656b9

08014270 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8014270:	b580      	push	{r7, lr}
 8014272:	b082      	sub	sp, #8
 8014274:	af00      	add	r7, sp, #0
 8014276:	6078      	str	r0, [r7, #4]
 8014278:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 801427a:	683b      	ldr	r3, [r7, #0]
 801427c:	685b      	ldr	r3, [r3, #4]
 801427e:	4a08      	ldr	r2, [pc, #32]	@ (80142a0 <hci_init+0x30>)
 8014280:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8014282:	4a08      	ldr	r2, [pc, #32]	@ (80142a4 <hci_init+0x34>)
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8014288:	4806      	ldr	r0, [pc, #24]	@ (80142a4 <hci_init+0x34>)
 801428a:	f000 f979 	bl	8014580 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 801428e:	683b      	ldr	r3, [r7, #0]
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	4618      	mov	r0, r3
 8014294:	f000 f8da 	bl	801444c <TlInit>

  return;
 8014298:	bf00      	nop
}
 801429a:	3708      	adds	r7, #8
 801429c:	46bd      	mov	sp, r7
 801429e:	bd80      	pop	{r7, pc}
 80142a0:	20000a70 	.word	0x20000a70
 80142a4:	20000a48 	.word	0x20000a48

080142a8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b084      	sub	sp, #16
 80142ac:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80142ae:	4822      	ldr	r0, [pc, #136]	@ (8014338 <hci_user_evt_proc+0x90>)
 80142b0:	f000 fd32 	bl	8014d18 <LST_is_empty>
 80142b4:	4603      	mov	r3, r0
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d12b      	bne.n	8014312 <hci_user_evt_proc+0x6a>
 80142ba:	4b20      	ldr	r3, [pc, #128]	@ (801433c <hci_user_evt_proc+0x94>)
 80142bc:	781b      	ldrb	r3, [r3, #0]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d027      	beq.n	8014312 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80142c2:	f107 030c 	add.w	r3, r7, #12
 80142c6:	4619      	mov	r1, r3
 80142c8:	481b      	ldr	r0, [pc, #108]	@ (8014338 <hci_user_evt_proc+0x90>)
 80142ca:	f000 fdb4 	bl	8014e36 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80142ce:	4b1c      	ldr	r3, [pc, #112]	@ (8014340 <hci_user_evt_proc+0x98>)
 80142d0:	69db      	ldr	r3, [r3, #28]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d00c      	beq.n	80142f0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80142da:	2301      	movs	r3, #1
 80142dc:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80142de:	4b18      	ldr	r3, [pc, #96]	@ (8014340 <hci_user_evt_proc+0x98>)
 80142e0:	69db      	ldr	r3, [r3, #28]
 80142e2:	1d3a      	adds	r2, r7, #4
 80142e4:	4610      	mov	r0, r2
 80142e6:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80142e8:	793a      	ldrb	r2, [r7, #4]
 80142ea:	4b14      	ldr	r3, [pc, #80]	@ (801433c <hci_user_evt_proc+0x94>)
 80142ec:	701a      	strb	r2, [r3, #0]
 80142ee:	e002      	b.n	80142f6 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80142f0:	4b12      	ldr	r3, [pc, #72]	@ (801433c <hci_user_evt_proc+0x94>)
 80142f2:	2201      	movs	r2, #1
 80142f4:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80142f6:	4b11      	ldr	r3, [pc, #68]	@ (801433c <hci_user_evt_proc+0x94>)
 80142f8:	781b      	ldrb	r3, [r3, #0]
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d004      	beq.n	8014308 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	4618      	mov	r0, r3
 8014302:	f000 fc0d 	bl	8014b20 <TL_MM_EvtDone>
 8014306:	e004      	b.n	8014312 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	4619      	mov	r1, r3
 801430c:	480a      	ldr	r0, [pc, #40]	@ (8014338 <hci_user_evt_proc+0x90>)
 801430e:	f000 fd25 	bl	8014d5c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8014312:	4809      	ldr	r0, [pc, #36]	@ (8014338 <hci_user_evt_proc+0x90>)
 8014314:	f000 fd00 	bl	8014d18 <LST_is_empty>
 8014318:	4603      	mov	r3, r0
 801431a:	2b00      	cmp	r3, #0
 801431c:	d107      	bne.n	801432e <hci_user_evt_proc+0x86>
 801431e:	4b07      	ldr	r3, [pc, #28]	@ (801433c <hci_user_evt_proc+0x94>)
 8014320:	781b      	ldrb	r3, [r3, #0]
 8014322:	2b00      	cmp	r3, #0
 8014324:	d003      	beq.n	801432e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8014326:	4804      	ldr	r0, [pc, #16]	@ (8014338 <hci_user_evt_proc+0x90>)
 8014328:	f001 f856 	bl	80153d8 <hci_notify_asynch_evt>
  }


  return;
 801432c:	bf00      	nop
 801432e:	bf00      	nop
}
 8014330:	3710      	adds	r7, #16
 8014332:	46bd      	mov	sp, r7
 8014334:	bd80      	pop	{r7, pc}
 8014336:	bf00      	nop
 8014338:	20000334 	.word	0x20000334
 801433c:	20000340 	.word	0x20000340
 8014340:	20000a48 	.word	0x20000a48

08014344 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8014344:	b580      	push	{r7, lr}
 8014346:	b088      	sub	sp, #32
 8014348:	af00      	add	r7, sp, #0
 801434a:	6078      	str	r0, [r7, #4]
 801434c:	460b      	mov	r3, r1
 801434e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8014350:	2000      	movs	r0, #0
 8014352:	f000 f8d1 	bl	80144f8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8014356:	2300      	movs	r3, #0
 8014358:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	885b      	ldrh	r3, [r3, #2]
 801435e:	b21b      	sxth	r3, r3
 8014360:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014364:	b21a      	sxth	r2, r3
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	881b      	ldrh	r3, [r3, #0]
 801436a:	b21b      	sxth	r3, r3
 801436c:	029b      	lsls	r3, r3, #10
 801436e:	b21b      	sxth	r3, r3
 8014370:	4313      	orrs	r3, r2
 8014372:	b21b      	sxth	r3, r3
 8014374:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8014376:	4b33      	ldr	r3, [pc, #204]	@ (8014444 <hci_send_req+0x100>)
 8014378:	2201      	movs	r2, #1
 801437a:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	68db      	ldr	r3, [r3, #12]
 8014380:	b2d9      	uxtb	r1, r3
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	689a      	ldr	r2, [r3, #8]
 8014386:	8bbb      	ldrh	r3, [r7, #28]
 8014388:	4618      	mov	r0, r3
 801438a:	f000 f88f 	bl	80144ac <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 801438e:	e04e      	b.n	801442e <hci_send_req+0xea>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8014390:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8014394:	f001 f837 	bl	8015406 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8014398:	e043      	b.n	8014422 <hci_send_req+0xde>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 801439a:	f107 030c 	add.w	r3, r7, #12
 801439e:	4619      	mov	r1, r3
 80143a0:	4829      	ldr	r0, [pc, #164]	@ (8014448 <hci_send_req+0x104>)
 80143a2:	f000 fd48 	bl	8014e36 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	7a5b      	ldrb	r3, [r3, #9]
 80143aa:	2b0f      	cmp	r3, #15
 80143ac:	d114      	bne.n	80143d8 <hci_send_req+0x94>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	330b      	adds	r3, #11
 80143b2:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80143b4:	693b      	ldr	r3, [r7, #16]
 80143b6:	885b      	ldrh	r3, [r3, #2]
 80143b8:	b29b      	uxth	r3, r3
 80143ba:	8bba      	ldrh	r2, [r7, #28]
 80143bc:	429a      	cmp	r2, r3
 80143be:	d104      	bne.n	80143ca <hci_send_req+0x86>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	691b      	ldr	r3, [r3, #16]
 80143c4:	693a      	ldr	r2, [r7, #16]
 80143c6:	7812      	ldrb	r2, [r2, #0]
 80143c8:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80143ca:	693b      	ldr	r3, [r7, #16]
 80143cc:	785b      	ldrb	r3, [r3, #1]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d027      	beq.n	8014422 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80143d2:	2301      	movs	r3, #1
 80143d4:	77fb      	strb	r3, [r7, #31]
 80143d6:	e024      	b.n	8014422 <hci_send_req+0xde>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	330b      	adds	r3, #11
 80143dc:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80143de:	69bb      	ldr	r3, [r7, #24]
 80143e0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80143e4:	b29b      	uxth	r3, r3
 80143e6:	8bba      	ldrh	r2, [r7, #28]
 80143e8:	429a      	cmp	r2, r3
 80143ea:	d114      	bne.n	8014416 <hci_send_req+0xd2>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	7a9b      	ldrb	r3, [r3, #10]
 80143f0:	3b03      	subs	r3, #3
 80143f2:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	695a      	ldr	r2, [r3, #20]
 80143f8:	7dfb      	ldrb	r3, [r7, #23]
 80143fa:	429a      	cmp	r2, r3
 80143fc:	bfa8      	it	ge
 80143fe:	461a      	movge	r2, r3
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	6918      	ldr	r0, [r3, #16]
 8014408:	69bb      	ldr	r3, [r7, #24]
 801440a:	1cd9      	adds	r1, r3, #3
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	695b      	ldr	r3, [r3, #20]
 8014410:	461a      	mov	r2, r3
 8014412:	f005 fa56 	bl	80198c2 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8014416:	69bb      	ldr	r3, [r7, #24]
 8014418:	781b      	ldrb	r3, [r3, #0]
 801441a:	2b00      	cmp	r3, #0
 801441c:	d001      	beq.n	8014422 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 801441e:	2301      	movs	r3, #1
 8014420:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8014422:	4809      	ldr	r0, [pc, #36]	@ (8014448 <hci_send_req+0x104>)
 8014424:	f000 fc78 	bl	8014d18 <LST_is_empty>
 8014428:	4603      	mov	r3, r0
 801442a:	2b00      	cmp	r3, #0
 801442c:	d0b5      	beq.n	801439a <hci_send_req+0x56>
  while(local_cmd_status == HCI_TL_CmdBusy)
 801442e:	7ffb      	ldrb	r3, [r7, #31]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d0ad      	beq.n	8014390 <hci_send_req+0x4c>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8014434:	2001      	movs	r0, #1
 8014436:	f000 f85f 	bl	80144f8 <NotifyCmdStatus>

  return 0;
 801443a:	2300      	movs	r3, #0
}
 801443c:	4618      	mov	r0, r3
 801443e:	3720      	adds	r7, #32
 8014440:	46bd      	mov	sp, r7
 8014442:	bd80      	pop	{r7, pc}
 8014444:	20000a74 	.word	0x20000a74
 8014448:	20000a68 	.word	0x20000a68

0801444c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 801444c:	b580      	push	{r7, lr}
 801444e:	b086      	sub	sp, #24
 8014450:	af00      	add	r7, sp, #0
 8014452:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8014454:	480f      	ldr	r0, [pc, #60]	@ (8014494 <TlInit+0x48>)
 8014456:	f000 fc4f 	bl	8014cf8 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 801445a:	4a0f      	ldr	r2, [pc, #60]	@ (8014498 <TlInit+0x4c>)
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8014460:	480e      	ldr	r0, [pc, #56]	@ (801449c <TlInit+0x50>)
 8014462:	f000 fc49 	bl	8014cf8 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8014466:	4b0e      	ldr	r3, [pc, #56]	@ (80144a0 <TlInit+0x54>)
 8014468:	2201      	movs	r2, #1
 801446a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 801446c:	4b0d      	ldr	r3, [pc, #52]	@ (80144a4 <TlInit+0x58>)
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	2b00      	cmp	r3, #0
 8014472:	d00a      	beq.n	801448a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8014478:	4b0b      	ldr	r3, [pc, #44]	@ (80144a8 <TlInit+0x5c>)
 801447a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 801447c:	4b09      	ldr	r3, [pc, #36]	@ (80144a4 <TlInit+0x58>)
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	f107 0208 	add.w	r2, r7, #8
 8014484:	4610      	mov	r0, r2
 8014486:	4798      	blx	r3
  }

  return;
 8014488:	bf00      	nop
 801448a:	bf00      	nop
}
 801448c:	3718      	adds	r7, #24
 801448e:	46bd      	mov	sp, r7
 8014490:	bd80      	pop	{r7, pc}
 8014492:	bf00      	nop
 8014494:	20000a68 	.word	0x20000a68
 8014498:	2000033c 	.word	0x2000033c
 801449c:	20000334 	.word	0x20000334
 80144a0:	20000340 	.word	0x20000340
 80144a4:	20000a48 	.word	0x20000a48
 80144a8:	08014539 	.word	0x08014539

080144ac <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80144ac:	b580      	push	{r7, lr}
 80144ae:	b082      	sub	sp, #8
 80144b0:	af00      	add	r7, sp, #0
 80144b2:	4603      	mov	r3, r0
 80144b4:	603a      	str	r2, [r7, #0]
 80144b6:	80fb      	strh	r3, [r7, #6]
 80144b8:	460b      	mov	r3, r1
 80144ba:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80144bc:	4b0c      	ldr	r3, [pc, #48]	@ (80144f0 <SendCmd+0x44>)
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	88fa      	ldrh	r2, [r7, #6]
 80144c2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80144c6:	4b0a      	ldr	r3, [pc, #40]	@ (80144f0 <SendCmd+0x44>)
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	797a      	ldrb	r2, [r7, #5]
 80144cc:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80144ce:	4b08      	ldr	r3, [pc, #32]	@ (80144f0 <SendCmd+0x44>)
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	330c      	adds	r3, #12
 80144d4:	797a      	ldrb	r2, [r7, #5]
 80144d6:	6839      	ldr	r1, [r7, #0]
 80144d8:	4618      	mov	r0, r3
 80144da:	f005 f9f2 	bl	80198c2 <memcpy>

  hciContext.io.Send(0,0);
 80144de:	4b05      	ldr	r3, [pc, #20]	@ (80144f4 <SendCmd+0x48>)
 80144e0:	691b      	ldr	r3, [r3, #16]
 80144e2:	2100      	movs	r1, #0
 80144e4:	2000      	movs	r0, #0
 80144e6:	4798      	blx	r3

  return;
 80144e8:	bf00      	nop
}
 80144ea:	3708      	adds	r7, #8
 80144ec:	46bd      	mov	sp, r7
 80144ee:	bd80      	pop	{r7, pc}
 80144f0:	2000033c 	.word	0x2000033c
 80144f4:	20000a48 	.word	0x20000a48

080144f8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80144f8:	b580      	push	{r7, lr}
 80144fa:	b082      	sub	sp, #8
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	4603      	mov	r3, r0
 8014500:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8014502:	79fb      	ldrb	r3, [r7, #7]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d108      	bne.n	801451a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8014508:	4b0a      	ldr	r3, [pc, #40]	@ (8014534 <NotifyCmdStatus+0x3c>)
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	2b00      	cmp	r3, #0
 801450e:	d00d      	beq.n	801452c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8014510:	4b08      	ldr	r3, [pc, #32]	@ (8014534 <NotifyCmdStatus+0x3c>)
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	2000      	movs	r0, #0
 8014516:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8014518:	e008      	b.n	801452c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 801451a:	4b06      	ldr	r3, [pc, #24]	@ (8014534 <NotifyCmdStatus+0x3c>)
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	2b00      	cmp	r3, #0
 8014520:	d004      	beq.n	801452c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8014522:	4b04      	ldr	r3, [pc, #16]	@ (8014534 <NotifyCmdStatus+0x3c>)
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	2001      	movs	r0, #1
 8014528:	4798      	blx	r3
  return;
 801452a:	bf00      	nop
 801452c:	bf00      	nop
}
 801452e:	3708      	adds	r7, #8
 8014530:	46bd      	mov	sp, r7
 8014532:	bd80      	pop	{r7, pc}
 8014534:	20000a70 	.word	0x20000a70

08014538 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8014538:	b580      	push	{r7, lr}
 801453a:	b082      	sub	sp, #8
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	7a5b      	ldrb	r3, [r3, #9]
 8014544:	2b0f      	cmp	r3, #15
 8014546:	d003      	beq.n	8014550 <TlEvtReceived+0x18>
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	7a5b      	ldrb	r3, [r3, #9]
 801454c:	2b0e      	cmp	r3, #14
 801454e:	d107      	bne.n	8014560 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8014550:	6879      	ldr	r1, [r7, #4]
 8014552:	4809      	ldr	r0, [pc, #36]	@ (8014578 <TlEvtReceived+0x40>)
 8014554:	f000 fc28 	bl	8014da8 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8014558:	2000      	movs	r0, #0
 801455a:	f000 ff49 	bl	80153f0 <hci_cmd_resp_release>
 801455e:	e006      	b.n	801456e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8014560:	6879      	ldr	r1, [r7, #4]
 8014562:	4806      	ldr	r0, [pc, #24]	@ (801457c <TlEvtReceived+0x44>)
 8014564:	f000 fc20 	bl	8014da8 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8014568:	4804      	ldr	r0, [pc, #16]	@ (801457c <TlEvtReceived+0x44>)
 801456a:	f000 ff35 	bl	80153d8 <hci_notify_asynch_evt>
  }

  return;
 801456e:	bf00      	nop
}
 8014570:	3708      	adds	r7, #8
 8014572:	46bd      	mov	sp, r7
 8014574:	bd80      	pop	{r7, pc}
 8014576:	bf00      	nop
 8014578:	20000a68 	.word	0x20000a68
 801457c:	20000334 	.word	0x20000334

08014580 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8014580:	b480      	push	{r7}
 8014582:	b083      	sub	sp, #12
 8014584:	af00      	add	r7, sp, #0
 8014586:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	4a05      	ldr	r2, [pc, #20]	@ (80145a0 <hci_register_io_bus+0x20>)
 801458c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	4a04      	ldr	r2, [pc, #16]	@ (80145a4 <hci_register_io_bus+0x24>)
 8014592:	611a      	str	r2, [r3, #16]

  return;
 8014594:	bf00      	nop
}
 8014596:	370c      	adds	r7, #12
 8014598:	46bd      	mov	sp, r7
 801459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801459e:	4770      	bx	lr
 80145a0:	08014899 	.word	0x08014899
 80145a4:	08014901 	.word	0x08014901

080145a8 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b082      	sub	sp, #8
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	6078      	str	r0, [r7, #4]
 80145b0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80145b2:	683b      	ldr	r3, [r7, #0]
 80145b4:	685b      	ldr	r3, [r3, #4]
 80145b6:	4a08      	ldr	r2, [pc, #32]	@ (80145d8 <shci_init+0x30>)
 80145b8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80145ba:	4a08      	ldr	r2, [pc, #32]	@ (80145dc <shci_init+0x34>)
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80145c0:	4806      	ldr	r0, [pc, #24]	@ (80145dc <shci_init+0x34>)
 80145c2:	f000 f915 	bl	80147f0 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80145c6:	683b      	ldr	r3, [r7, #0]
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	4618      	mov	r0, r3
 80145cc:	f000 f898 	bl	8014700 <TlInit>

  return;
 80145d0:	bf00      	nop
}
 80145d2:	3708      	adds	r7, #8
 80145d4:	46bd      	mov	sp, r7
 80145d6:	bd80      	pop	{r7, pc}
 80145d8:	20000a98 	.word	0x20000a98
 80145dc:	20000a78 	.word	0x20000a78

080145e0 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80145e0:	b580      	push	{r7, lr}
 80145e2:	b084      	sub	sp, #16
 80145e4:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80145e6:	4822      	ldr	r0, [pc, #136]	@ (8014670 <shci_user_evt_proc+0x90>)
 80145e8:	f000 fb96 	bl	8014d18 <LST_is_empty>
 80145ec:	4603      	mov	r3, r0
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d12b      	bne.n	801464a <shci_user_evt_proc+0x6a>
 80145f2:	4b20      	ldr	r3, [pc, #128]	@ (8014674 <shci_user_evt_proc+0x94>)
 80145f4:	781b      	ldrb	r3, [r3, #0]
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d027      	beq.n	801464a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80145fa:	f107 030c 	add.w	r3, r7, #12
 80145fe:	4619      	mov	r1, r3
 8014600:	481b      	ldr	r0, [pc, #108]	@ (8014670 <shci_user_evt_proc+0x90>)
 8014602:	f000 fc18 	bl	8014e36 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8014606:	4b1c      	ldr	r3, [pc, #112]	@ (8014678 <shci_user_evt_proc+0x98>)
 8014608:	69db      	ldr	r3, [r3, #28]
 801460a:	2b00      	cmp	r3, #0
 801460c:	d00c      	beq.n	8014628 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8014612:	2301      	movs	r3, #1
 8014614:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8014616:	4b18      	ldr	r3, [pc, #96]	@ (8014678 <shci_user_evt_proc+0x98>)
 8014618:	69db      	ldr	r3, [r3, #28]
 801461a:	1d3a      	adds	r2, r7, #4
 801461c:	4610      	mov	r0, r2
 801461e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8014620:	793a      	ldrb	r2, [r7, #4]
 8014622:	4b14      	ldr	r3, [pc, #80]	@ (8014674 <shci_user_evt_proc+0x94>)
 8014624:	701a      	strb	r2, [r3, #0]
 8014626:	e002      	b.n	801462e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8014628:	4b12      	ldr	r3, [pc, #72]	@ (8014674 <shci_user_evt_proc+0x94>)
 801462a:	2201      	movs	r2, #1
 801462c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 801462e:	4b11      	ldr	r3, [pc, #68]	@ (8014674 <shci_user_evt_proc+0x94>)
 8014630:	781b      	ldrb	r3, [r3, #0]
 8014632:	2b00      	cmp	r3, #0
 8014634:	d004      	beq.n	8014640 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	4618      	mov	r0, r3
 801463a:	f000 fa71 	bl	8014b20 <TL_MM_EvtDone>
 801463e:	e004      	b.n	801464a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	4619      	mov	r1, r3
 8014644:	480a      	ldr	r0, [pc, #40]	@ (8014670 <shci_user_evt_proc+0x90>)
 8014646:	f000 fb89 	bl	8014d5c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 801464a:	4809      	ldr	r0, [pc, #36]	@ (8014670 <shci_user_evt_proc+0x90>)
 801464c:	f000 fb64 	bl	8014d18 <LST_is_empty>
 8014650:	4603      	mov	r3, r0
 8014652:	2b00      	cmp	r3, #0
 8014654:	d107      	bne.n	8014666 <shci_user_evt_proc+0x86>
 8014656:	4b07      	ldr	r3, [pc, #28]	@ (8014674 <shci_user_evt_proc+0x94>)
 8014658:	781b      	ldrb	r3, [r3, #0]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d003      	beq.n	8014666 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 801465e:	4804      	ldr	r0, [pc, #16]	@ (8014670 <shci_user_evt_proc+0x90>)
 8014660:	f7f0 fba5 	bl	8004dae <shci_notify_asynch_evt>
  }


  return;
 8014664:	bf00      	nop
 8014666:	bf00      	nop
}
 8014668:	3710      	adds	r7, #16
 801466a:	46bd      	mov	sp, r7
 801466c:	bd80      	pop	{r7, pc}
 801466e:	bf00      	nop
 8014670:	20000344 	.word	0x20000344
 8014674:	20000354 	.word	0x20000354
 8014678:	20000a78 	.word	0x20000a78

0801467c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 801467c:	b580      	push	{r7, lr}
 801467e:	b084      	sub	sp, #16
 8014680:	af00      	add	r7, sp, #0
 8014682:	60ba      	str	r2, [r7, #8]
 8014684:	607b      	str	r3, [r7, #4]
 8014686:	4603      	mov	r3, r0
 8014688:	81fb      	strh	r3, [r7, #14]
 801468a:	460b      	mov	r3, r1
 801468c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 801468e:	2000      	movs	r0, #0
 8014690:	f000 f868 	bl	8014764 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8014694:	4b17      	ldr	r3, [pc, #92]	@ (80146f4 <shci_send+0x78>)
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	89fa      	ldrh	r2, [r7, #14]
 801469a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 801469e:	4b15      	ldr	r3, [pc, #84]	@ (80146f4 <shci_send+0x78>)
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	7b7a      	ldrb	r2, [r7, #13]
 80146a4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80146a6:	4b13      	ldr	r3, [pc, #76]	@ (80146f4 <shci_send+0x78>)
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	330c      	adds	r3, #12
 80146ac:	7b7a      	ldrb	r2, [r7, #13]
 80146ae:	68b9      	ldr	r1, [r7, #8]
 80146b0:	4618      	mov	r0, r3
 80146b2:	f005 f906 	bl	80198c2 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 80146b6:	4b10      	ldr	r3, [pc, #64]	@ (80146f8 <shci_send+0x7c>)
 80146b8:	2201      	movs	r2, #1
 80146ba:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 80146bc:	4b0f      	ldr	r3, [pc, #60]	@ (80146fc <shci_send+0x80>)
 80146be:	691b      	ldr	r3, [r3, #16]
 80146c0:	2100      	movs	r1, #0
 80146c2:	2000      	movs	r0, #0
 80146c4:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80146c6:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 80146ca:	f7f0 fb87 	bl	8004ddc <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	f103 0008 	add.w	r0, r3, #8
 80146d4:	4b07      	ldr	r3, [pc, #28]	@ (80146f4 <shci_send+0x78>)
 80146d6:	6819      	ldr	r1, [r3, #0]
 80146d8:	4b06      	ldr	r3, [pc, #24]	@ (80146f4 <shci_send+0x78>)
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	789b      	ldrb	r3, [r3, #2]
 80146de:	3303      	adds	r3, #3
 80146e0:	461a      	mov	r2, r3
 80146e2:	f005 f8ee 	bl	80198c2 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80146e6:	2001      	movs	r0, #1
 80146e8:	f000 f83c 	bl	8014764 <Cmd_SetStatus>

  return;
 80146ec:	bf00      	nop
}
 80146ee:	3710      	adds	r7, #16
 80146f0:	46bd      	mov	sp, r7
 80146f2:	bd80      	pop	{r7, pc}
 80146f4:	20000350 	.word	0x20000350
 80146f8:	20000a9c 	.word	0x20000a9c
 80146fc:	20000a78 	.word	0x20000a78

08014700 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8014700:	b580      	push	{r7, lr}
 8014702:	b086      	sub	sp, #24
 8014704:	af00      	add	r7, sp, #0
 8014706:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8014708:	4a10      	ldr	r2, [pc, #64]	@ (801474c <TlInit+0x4c>)
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 801470e:	4810      	ldr	r0, [pc, #64]	@ (8014750 <TlInit+0x50>)
 8014710:	f000 faf2 	bl	8014cf8 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8014714:	2001      	movs	r0, #1
 8014716:	f000 f825 	bl	8014764 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 801471a:	4b0e      	ldr	r3, [pc, #56]	@ (8014754 <TlInit+0x54>)
 801471c:	2201      	movs	r2, #1
 801471e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8014720:	4b0d      	ldr	r3, [pc, #52]	@ (8014758 <TlInit+0x58>)
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d00c      	beq.n	8014742 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 801472c:	4b0b      	ldr	r3, [pc, #44]	@ (801475c <TlInit+0x5c>)
 801472e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8014730:	4b0b      	ldr	r3, [pc, #44]	@ (8014760 <TlInit+0x60>)
 8014732:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8014734:	4b08      	ldr	r3, [pc, #32]	@ (8014758 <TlInit+0x58>)
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	f107 020c 	add.w	r2, r7, #12
 801473c:	4610      	mov	r0, r2
 801473e:	4798      	blx	r3
  }

  return;
 8014740:	bf00      	nop
 8014742:	bf00      	nop
}
 8014744:	3718      	adds	r7, #24
 8014746:	46bd      	mov	sp, r7
 8014748:	bd80      	pop	{r7, pc}
 801474a:	bf00      	nop
 801474c:	20000350 	.word	0x20000350
 8014750:	20000344 	.word	0x20000344
 8014754:	20000354 	.word	0x20000354
 8014758:	20000a78 	.word	0x20000a78
 801475c:	080147b5 	.word	0x080147b5
 8014760:	080147cd 	.word	0x080147cd

08014764 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8014764:	b580      	push	{r7, lr}
 8014766:	b082      	sub	sp, #8
 8014768:	af00      	add	r7, sp, #0
 801476a:	4603      	mov	r3, r0
 801476c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 801476e:	79fb      	ldrb	r3, [r7, #7]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d10b      	bne.n	801478c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8014774:	4b0d      	ldr	r3, [pc, #52]	@ (80147ac <Cmd_SetStatus+0x48>)
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	2b00      	cmp	r3, #0
 801477a:	d003      	beq.n	8014784 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 801477c:	4b0b      	ldr	r3, [pc, #44]	@ (80147ac <Cmd_SetStatus+0x48>)
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	2000      	movs	r0, #0
 8014782:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8014784:	4b0a      	ldr	r3, [pc, #40]	@ (80147b0 <Cmd_SetStatus+0x4c>)
 8014786:	2200      	movs	r2, #0
 8014788:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 801478a:	e00b      	b.n	80147a4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 801478c:	4b08      	ldr	r3, [pc, #32]	@ (80147b0 <Cmd_SetStatus+0x4c>)
 801478e:	2201      	movs	r2, #1
 8014790:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8014792:	4b06      	ldr	r3, [pc, #24]	@ (80147ac <Cmd_SetStatus+0x48>)
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d004      	beq.n	80147a4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 801479a:	4b04      	ldr	r3, [pc, #16]	@ (80147ac <Cmd_SetStatus+0x48>)
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	2001      	movs	r0, #1
 80147a0:	4798      	blx	r3
  return;
 80147a2:	bf00      	nop
 80147a4:	bf00      	nop
}
 80147a6:	3708      	adds	r7, #8
 80147a8:	46bd      	mov	sp, r7
 80147aa:	bd80      	pop	{r7, pc}
 80147ac:	20000a98 	.word	0x20000a98
 80147b0:	2000034c 	.word	0x2000034c

080147b4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80147b4:	b580      	push	{r7, lr}
 80147b6:	b082      	sub	sp, #8
 80147b8:	af00      	add	r7, sp, #0
 80147ba:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80147bc:	2000      	movs	r0, #0
 80147be:	f7f0 fb02 	bl	8004dc6 <shci_cmd_resp_release>

  return;
 80147c2:	bf00      	nop
}
 80147c4:	3708      	adds	r7, #8
 80147c6:	46bd      	mov	sp, r7
 80147c8:	bd80      	pop	{r7, pc}
	...

080147cc <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80147cc:	b580      	push	{r7, lr}
 80147ce:	b082      	sub	sp, #8
 80147d0:	af00      	add	r7, sp, #0
 80147d2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80147d4:	6879      	ldr	r1, [r7, #4]
 80147d6:	4805      	ldr	r0, [pc, #20]	@ (80147ec <TlUserEvtReceived+0x20>)
 80147d8:	f000 fae6 	bl	8014da8 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80147dc:	4803      	ldr	r0, [pc, #12]	@ (80147ec <TlUserEvtReceived+0x20>)
 80147de:	f7f0 fae6 	bl	8004dae <shci_notify_asynch_evt>

  return;
 80147e2:	bf00      	nop
}
 80147e4:	3708      	adds	r7, #8
 80147e6:	46bd      	mov	sp, r7
 80147e8:	bd80      	pop	{r7, pc}
 80147ea:	bf00      	nop
 80147ec:	20000344 	.word	0x20000344

080147f0 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80147f0:	b480      	push	{r7}
 80147f2:	b083      	sub	sp, #12
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	4a05      	ldr	r2, [pc, #20]	@ (8014810 <shci_register_io_bus+0x20>)
 80147fc:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	4a04      	ldr	r2, [pc, #16]	@ (8014814 <shci_register_io_bus+0x24>)
 8014802:	611a      	str	r2, [r3, #16]

  return;
 8014804:	bf00      	nop
}
 8014806:	370c      	adds	r7, #12
 8014808:	46bd      	mov	sp, r7
 801480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801480e:	4770      	bx	lr
 8014810:	080149ad 	.word	0x080149ad
 8014814:	08014a01 	.word	0x08014a01

08014818 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8014818:	b580      	push	{r7, lr}
 801481a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 801481c:	f001 f9e4 	bl	8015be8 <HW_IPCC_Enable>

  return;
 8014820:	bf00      	nop
}
 8014822:	bd80      	pop	{r7, pc}

08014824 <TL_Init>:


void TL_Init( void )
{
 8014824:	b580      	push	{r7, lr}
 8014826:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8014828:	4b10      	ldr	r3, [pc, #64]	@ (801486c <TL_Init+0x48>)
 801482a:	4a11      	ldr	r2, [pc, #68]	@ (8014870 <TL_Init+0x4c>)
 801482c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 801482e:	4b0f      	ldr	r3, [pc, #60]	@ (801486c <TL_Init+0x48>)
 8014830:	4a10      	ldr	r2, [pc, #64]	@ (8014874 <TL_Init+0x50>)
 8014832:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8014834:	4b0d      	ldr	r3, [pc, #52]	@ (801486c <TL_Init+0x48>)
 8014836:	4a10      	ldr	r2, [pc, #64]	@ (8014878 <TL_Init+0x54>)
 8014838:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 801483a:	4b0c      	ldr	r3, [pc, #48]	@ (801486c <TL_Init+0x48>)
 801483c:	4a0f      	ldr	r2, [pc, #60]	@ (801487c <TL_Init+0x58>)
 801483e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8014840:	4b0a      	ldr	r3, [pc, #40]	@ (801486c <TL_Init+0x48>)
 8014842:	4a0f      	ldr	r2, [pc, #60]	@ (8014880 <TL_Init+0x5c>)
 8014844:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8014846:	4b09      	ldr	r3, [pc, #36]	@ (801486c <TL_Init+0x48>)
 8014848:	4a0e      	ldr	r2, [pc, #56]	@ (8014884 <TL_Init+0x60>)
 801484a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 801484c:	4b07      	ldr	r3, [pc, #28]	@ (801486c <TL_Init+0x48>)
 801484e:	4a0e      	ldr	r2, [pc, #56]	@ (8014888 <TL_Init+0x64>)
 8014850:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8014852:	4b06      	ldr	r3, [pc, #24]	@ (801486c <TL_Init+0x48>)
 8014854:	4a0d      	ldr	r2, [pc, #52]	@ (801488c <TL_Init+0x68>)
 8014856:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8014858:	4b04      	ldr	r3, [pc, #16]	@ (801486c <TL_Init+0x48>)
 801485a:	4a0d      	ldr	r2, [pc, #52]	@ (8014890 <TL_Init+0x6c>)
 801485c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 801485e:	4b03      	ldr	r3, [pc, #12]	@ (801486c <TL_Init+0x48>)
 8014860:	4a0c      	ldr	r2, [pc, #48]	@ (8014894 <TL_Init+0x70>)
 8014862:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8014864:	f001 f9d4 	bl	8015c10 <HW_IPCC_Init>

  return;
 8014868:	bf00      	nop
}
 801486a:	bd80      	pop	{r7, pc}
 801486c:	20030000 	.word	0x20030000
 8014870:	20030028 	.word	0x20030028
 8014874:	20030048 	.word	0x20030048
 8014878:	20030058 	.word	0x20030058
 801487c:	20030068 	.word	0x20030068
 8014880:	20030070 	.word	0x20030070
 8014884:	20030078 	.word	0x20030078
 8014888:	20030080 	.word	0x20030080
 801488c:	2003009c 	.word	0x2003009c
 8014890:	200300a0 	.word	0x200300a0
 8014894:	200300ac 	.word	0x200300ac

08014898 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8014898:	b580      	push	{r7, lr}
 801489a:	b084      	sub	sp, #16
 801489c:	af00      	add	r7, sp, #0
 801489e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80148a4:	4811      	ldr	r0, [pc, #68]	@ (80148ec <TL_BLE_Init+0x54>)
 80148a6:	f000 fa27 	bl	8014cf8 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80148aa:	4b11      	ldr	r3, [pc, #68]	@ (80148f0 <TL_BLE_Init+0x58>)
 80148ac:	685b      	ldr	r3, [r3, #4]
 80148ae:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	689a      	ldr	r2, [r3, #8]
 80148b4:	68bb      	ldr	r3, [r7, #8]
 80148b6:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	68da      	ldr	r2, [r3, #12]
 80148bc:	68bb      	ldr	r3, [r7, #8]
 80148be:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80148c0:	68bb      	ldr	r3, [r7, #8]
 80148c2:	4a0c      	ldr	r2, [pc, #48]	@ (80148f4 <TL_BLE_Init+0x5c>)
 80148c4:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80148c6:	68bb      	ldr	r3, [r7, #8]
 80148c8:	4a08      	ldr	r2, [pc, #32]	@ (80148ec <TL_BLE_Init+0x54>)
 80148ca:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 80148cc:	f001 f9b6 	bl	8015c3c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	4a08      	ldr	r2, [pc, #32]	@ (80148f8 <TL_BLE_Init+0x60>)
 80148d6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	685b      	ldr	r3, [r3, #4]
 80148dc:	4a07      	ldr	r2, [pc, #28]	@ (80148fc <TL_BLE_Init+0x64>)
 80148de:	6013      	str	r3, [r2, #0]

  return 0;
 80148e0:	2300      	movs	r3, #0
}
 80148e2:	4618      	mov	r0, r3
 80148e4:	3710      	adds	r7, #16
 80148e6:	46bd      	mov	sp, r7
 80148e8:	bd80      	pop	{r7, pc}
 80148ea:	bf00      	nop
 80148ec:	200300c8 	.word	0x200300c8
 80148f0:	20030000 	.word	0x20030000
 80148f4:	20030a58 	.word	0x20030a58
 80148f8:	20000aa8 	.word	0x20000aa8
 80148fc:	20000aac 	.word	0x20000aac

08014900 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8014900:	b580      	push	{r7, lr}
 8014902:	b082      	sub	sp, #8
 8014904:	af00      	add	r7, sp, #0
 8014906:	6078      	str	r0, [r7, #4]
 8014908:	460b      	mov	r3, r1
 801490a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 801490c:	4b09      	ldr	r3, [pc, #36]	@ (8014934 <TL_BLE_SendCmd+0x34>)
 801490e:	685b      	ldr	r3, [r3, #4]
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	2201      	movs	r2, #1
 8014914:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8014916:	4b07      	ldr	r3, [pc, #28]	@ (8014934 <TL_BLE_SendCmd+0x34>)
 8014918:	685b      	ldr	r3, [r3, #4]
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	4619      	mov	r1, r3
 801491e:	2001      	movs	r0, #1
 8014920:	f000 f96c 	bl	8014bfc <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8014924:	f001 f9a4 	bl	8015c70 <HW_IPCC_BLE_SendCmd>

  return 0;
 8014928:	2300      	movs	r3, #0
}
 801492a:	4618      	mov	r0, r3
 801492c:	3708      	adds	r7, #8
 801492e:	46bd      	mov	sp, r7
 8014930:	bd80      	pop	{r7, pc}
 8014932:	bf00      	nop
 8014934:	20030000 	.word	0x20030000

08014938 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8014938:	b580      	push	{r7, lr}
 801493a:	b082      	sub	sp, #8
 801493c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 801493e:	e01c      	b.n	801497a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8014940:	1d3b      	adds	r3, r7, #4
 8014942:	4619      	mov	r1, r3
 8014944:	4812      	ldr	r0, [pc, #72]	@ (8014990 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8014946:	f000 fa76 	bl	8014e36 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	7a5b      	ldrb	r3, [r3, #9]
 801494e:	2b0f      	cmp	r3, #15
 8014950:	d003      	beq.n	801495a <HW_IPCC_BLE_RxEvtNot+0x22>
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	7a5b      	ldrb	r3, [r3, #9]
 8014956:	2b0e      	cmp	r3, #14
 8014958:	d105      	bne.n	8014966 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	4619      	mov	r1, r3
 801495e:	2002      	movs	r0, #2
 8014960:	f000 f94c 	bl	8014bfc <OutputDbgTrace>
 8014964:	e004      	b.n	8014970 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	4619      	mov	r1, r3
 801496a:	2003      	movs	r0, #3
 801496c:	f000 f946 	bl	8014bfc <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8014970:	4b08      	ldr	r3, [pc, #32]	@ (8014994 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	687a      	ldr	r2, [r7, #4]
 8014976:	4610      	mov	r0, r2
 8014978:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 801497a:	4805      	ldr	r0, [pc, #20]	@ (8014990 <HW_IPCC_BLE_RxEvtNot+0x58>)
 801497c:	f000 f9cc 	bl	8014d18 <LST_is_empty>
 8014980:	4603      	mov	r3, r0
 8014982:	2b00      	cmp	r3, #0
 8014984:	d0dc      	beq.n	8014940 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8014986:	bf00      	nop
}
 8014988:	3708      	adds	r7, #8
 801498a:	46bd      	mov	sp, r7
 801498c:	bd80      	pop	{r7, pc}
 801498e:	bf00      	nop
 8014990:	200300c8 	.word	0x200300c8
 8014994:	20000aa8 	.word	0x20000aa8

08014998 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8014998:	b580      	push	{r7, lr}
 801499a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 801499c:	4b02      	ldr	r3, [pc, #8]	@ (80149a8 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	4798      	blx	r3

  return;
 80149a2:	bf00      	nop
}
 80149a4:	bd80      	pop	{r7, pc}
 80149a6:	bf00      	nop
 80149a8:	20000aac 	.word	0x20000aac

080149ac <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80149ac:	b580      	push	{r7, lr}
 80149ae:	b084      	sub	sp, #16
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80149b8:	480d      	ldr	r0, [pc, #52]	@ (80149f0 <TL_SYS_Init+0x44>)
 80149ba:	f000 f99d 	bl	8014cf8 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80149be:	4b0d      	ldr	r3, [pc, #52]	@ (80149f4 <TL_SYS_Init+0x48>)
 80149c0:	68db      	ldr	r3, [r3, #12]
 80149c2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	689a      	ldr	r2, [r3, #8]
 80149c8:	68bb      	ldr	r3, [r7, #8]
 80149ca:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80149cc:	68bb      	ldr	r3, [r7, #8]
 80149ce:	4a08      	ldr	r2, [pc, #32]	@ (80149f0 <TL_SYS_Init+0x44>)
 80149d0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80149d2:	f001 f97f 	bl	8015cd4 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	4a07      	ldr	r2, [pc, #28]	@ (80149f8 <TL_SYS_Init+0x4c>)
 80149dc:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	685b      	ldr	r3, [r3, #4]
 80149e2:	4a06      	ldr	r2, [pc, #24]	@ (80149fc <TL_SYS_Init+0x50>)
 80149e4:	6013      	str	r3, [r2, #0]

  return 0;
 80149e6:	2300      	movs	r3, #0
}
 80149e8:	4618      	mov	r0, r3
 80149ea:	3710      	adds	r7, #16
 80149ec:	46bd      	mov	sp, r7
 80149ee:	bd80      	pop	{r7, pc}
 80149f0:	200300d0 	.word	0x200300d0
 80149f4:	20030000 	.word	0x20030000
 80149f8:	20000ab0 	.word	0x20000ab0
 80149fc:	20000ab4 	.word	0x20000ab4

08014a00 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8014a00:	b580      	push	{r7, lr}
 8014a02:	b082      	sub	sp, #8
 8014a04:	af00      	add	r7, sp, #0
 8014a06:	6078      	str	r0, [r7, #4]
 8014a08:	460b      	mov	r3, r1
 8014a0a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8014a0c:	4b09      	ldr	r3, [pc, #36]	@ (8014a34 <TL_SYS_SendCmd+0x34>)
 8014a0e:	68db      	ldr	r3, [r3, #12]
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	2210      	movs	r2, #16
 8014a14:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8014a16:	4b07      	ldr	r3, [pc, #28]	@ (8014a34 <TL_SYS_SendCmd+0x34>)
 8014a18:	68db      	ldr	r3, [r3, #12]
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	4619      	mov	r1, r3
 8014a1e:	2004      	movs	r0, #4
 8014a20:	f000 f8ec 	bl	8014bfc <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8014a24:	f001 f970 	bl	8015d08 <HW_IPCC_SYS_SendCmd>

  return 0;
 8014a28:	2300      	movs	r3, #0
}
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	3708      	adds	r7, #8
 8014a2e:	46bd      	mov	sp, r7
 8014a30:	bd80      	pop	{r7, pc}
 8014a32:	bf00      	nop
 8014a34:	20030000 	.word	0x20030000

08014a38 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8014a38:	b580      	push	{r7, lr}
 8014a3a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8014a3c:	4b07      	ldr	r3, [pc, #28]	@ (8014a5c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8014a3e:	68db      	ldr	r3, [r3, #12]
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	4619      	mov	r1, r3
 8014a44:	2005      	movs	r0, #5
 8014a46:	f000 f8d9 	bl	8014bfc <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8014a4a:	4b05      	ldr	r3, [pc, #20]	@ (8014a60 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	4a03      	ldr	r2, [pc, #12]	@ (8014a5c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8014a50:	68d2      	ldr	r2, [r2, #12]
 8014a52:	6812      	ldr	r2, [r2, #0]
 8014a54:	4610      	mov	r0, r2
 8014a56:	4798      	blx	r3

  return;
 8014a58:	bf00      	nop
}
 8014a5a:	bd80      	pop	{r7, pc}
 8014a5c:	20030000 	.word	0x20030000
 8014a60:	20000ab0 	.word	0x20000ab0

08014a64 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8014a64:	b580      	push	{r7, lr}
 8014a66:	b082      	sub	sp, #8
 8014a68:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8014a6a:	e00e      	b.n	8014a8a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8014a6c:	1d3b      	adds	r3, r7, #4
 8014a6e:	4619      	mov	r1, r3
 8014a70:	480b      	ldr	r0, [pc, #44]	@ (8014aa0 <HW_IPCC_SYS_EvtNot+0x3c>)
 8014a72:	f000 f9e0 	bl	8014e36 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	4619      	mov	r1, r3
 8014a7a:	2006      	movs	r0, #6
 8014a7c:	f000 f8be 	bl	8014bfc <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8014a80:	4b08      	ldr	r3, [pc, #32]	@ (8014aa4 <HW_IPCC_SYS_EvtNot+0x40>)
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	687a      	ldr	r2, [r7, #4]
 8014a86:	4610      	mov	r0, r2
 8014a88:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8014a8a:	4805      	ldr	r0, [pc, #20]	@ (8014aa0 <HW_IPCC_SYS_EvtNot+0x3c>)
 8014a8c:	f000 f944 	bl	8014d18 <LST_is_empty>
 8014a90:	4603      	mov	r3, r0
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d0ea      	beq.n	8014a6c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8014a96:	bf00      	nop
}
 8014a98:	3708      	adds	r7, #8
 8014a9a:	46bd      	mov	sp, r7
 8014a9c:	bd80      	pop	{r7, pc}
 8014a9e:	bf00      	nop
 8014aa0:	200300d0 	.word	0x200300d0
 8014aa4:	20000ab4 	.word	0x20000ab4

08014aa8 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8014aa8:	b580      	push	{r7, lr}
 8014aaa:	b082      	sub	sp, #8
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8014ab0:	4817      	ldr	r0, [pc, #92]	@ (8014b10 <TL_MM_Init+0x68>)
 8014ab2:	f000 f921 	bl	8014cf8 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8014ab6:	4817      	ldr	r0, [pc, #92]	@ (8014b14 <TL_MM_Init+0x6c>)
 8014ab8:	f000 f91e 	bl	8014cf8 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8014abc:	4b16      	ldr	r3, [pc, #88]	@ (8014b18 <TL_MM_Init+0x70>)
 8014abe:	691b      	ldr	r3, [r3, #16]
 8014ac0:	4a16      	ldr	r2, [pc, #88]	@ (8014b1c <TL_MM_Init+0x74>)
 8014ac2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8014ac4:	4b15      	ldr	r3, [pc, #84]	@ (8014b1c <TL_MM_Init+0x74>)
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	687a      	ldr	r2, [r7, #4]
 8014aca:	6892      	ldr	r2, [r2, #8]
 8014acc:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8014ace:	4b13      	ldr	r3, [pc, #76]	@ (8014b1c <TL_MM_Init+0x74>)
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	687a      	ldr	r2, [r7, #4]
 8014ad4:	68d2      	ldr	r2, [r2, #12]
 8014ad6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8014ad8:	4b10      	ldr	r3, [pc, #64]	@ (8014b1c <TL_MM_Init+0x74>)
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	4a0c      	ldr	r2, [pc, #48]	@ (8014b10 <TL_MM_Init+0x68>)
 8014ade:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8014ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8014b1c <TL_MM_Init+0x74>)
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	687a      	ldr	r2, [r7, #4]
 8014ae6:	6812      	ldr	r2, [r2, #0]
 8014ae8:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8014aea:	4b0c      	ldr	r3, [pc, #48]	@ (8014b1c <TL_MM_Init+0x74>)
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	687a      	ldr	r2, [r7, #4]
 8014af0:	6852      	ldr	r2, [r2, #4]
 8014af2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8014af4:	4b09      	ldr	r3, [pc, #36]	@ (8014b1c <TL_MM_Init+0x74>)
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	687a      	ldr	r2, [r7, #4]
 8014afa:	6912      	ldr	r2, [r2, #16]
 8014afc:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8014afe:	4b07      	ldr	r3, [pc, #28]	@ (8014b1c <TL_MM_Init+0x74>)
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	687a      	ldr	r2, [r7, #4]
 8014b04:	6952      	ldr	r2, [r2, #20]
 8014b06:	619a      	str	r2, [r3, #24]

  return;
 8014b08:	bf00      	nop
}
 8014b0a:	3708      	adds	r7, #8
 8014b0c:	46bd      	mov	sp, r7
 8014b0e:	bd80      	pop	{r7, pc}
 8014b10:	200300b8 	.word	0x200300b8
 8014b14:	20000aa0 	.word	0x20000aa0
 8014b18:	20030000 	.word	0x20030000
 8014b1c:	20000ab8 	.word	0x20000ab8

08014b20 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8014b20:	b580      	push	{r7, lr}
 8014b22:	b082      	sub	sp, #8
 8014b24:	af00      	add	r7, sp, #0
 8014b26:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8014b28:	6879      	ldr	r1, [r7, #4]
 8014b2a:	4807      	ldr	r0, [pc, #28]	@ (8014b48 <TL_MM_EvtDone+0x28>)
 8014b2c:	f000 f93c 	bl	8014da8 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8014b30:	6879      	ldr	r1, [r7, #4]
 8014b32:	2000      	movs	r0, #0
 8014b34:	f000 f862 	bl	8014bfc <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8014b38:	4804      	ldr	r0, [pc, #16]	@ (8014b4c <TL_MM_EvtDone+0x2c>)
 8014b3a:	f001 f92b 	bl	8015d94 <HW_IPCC_MM_SendFreeBuf>

  return;
 8014b3e:	bf00      	nop
}
 8014b40:	3708      	adds	r7, #8
 8014b42:	46bd      	mov	sp, r7
 8014b44:	bd80      	pop	{r7, pc}
 8014b46:	bf00      	nop
 8014b48:	20000aa0 	.word	0x20000aa0
 8014b4c:	08014b51 	.word	0x08014b51

08014b50 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8014b50:	b580      	push	{r7, lr}
 8014b52:	b082      	sub	sp, #8
 8014b54:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8014b56:	e00c      	b.n	8014b72 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8014b58:	1d3b      	adds	r3, r7, #4
 8014b5a:	4619      	mov	r1, r3
 8014b5c:	480a      	ldr	r0, [pc, #40]	@ (8014b88 <SendFreeBuf+0x38>)
 8014b5e:	f000 f96a 	bl	8014e36 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8014b62:	4b0a      	ldr	r3, [pc, #40]	@ (8014b8c <SendFreeBuf+0x3c>)
 8014b64:	691b      	ldr	r3, [r3, #16]
 8014b66:	691b      	ldr	r3, [r3, #16]
 8014b68:	687a      	ldr	r2, [r7, #4]
 8014b6a:	4611      	mov	r1, r2
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	f000 f91b 	bl	8014da8 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8014b72:	4805      	ldr	r0, [pc, #20]	@ (8014b88 <SendFreeBuf+0x38>)
 8014b74:	f000 f8d0 	bl	8014d18 <LST_is_empty>
 8014b78:	4603      	mov	r3, r0
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d0ec      	beq.n	8014b58 <SendFreeBuf+0x8>
  }

  return;
 8014b7e:	bf00      	nop
}
 8014b80:	3708      	adds	r7, #8
 8014b82:	46bd      	mov	sp, r7
 8014b84:	bd80      	pop	{r7, pc}
 8014b86:	bf00      	nop
 8014b88:	20000aa0 	.word	0x20000aa0
 8014b8c:	20030000 	.word	0x20030000

08014b90 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8014b90:	b580      	push	{r7, lr}
 8014b92:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8014b94:	4805      	ldr	r0, [pc, #20]	@ (8014bac <TL_TRACES_Init+0x1c>)
 8014b96:	f000 f8af 	bl	8014cf8 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8014b9a:	4b05      	ldr	r3, [pc, #20]	@ (8014bb0 <TL_TRACES_Init+0x20>)
 8014b9c:	695b      	ldr	r3, [r3, #20]
 8014b9e:	4a03      	ldr	r2, [pc, #12]	@ (8014bac <TL_TRACES_Init+0x1c>)
 8014ba0:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8014ba2:	f001 f949 	bl	8015e38 <HW_IPCC_TRACES_Init>

  return;
 8014ba6:	bf00      	nop
}
 8014ba8:	bd80      	pop	{r7, pc}
 8014baa:	bf00      	nop
 8014bac:	200300c0 	.word	0x200300c0
 8014bb0:	20030000 	.word	0x20030000

08014bb4 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8014bb4:	b580      	push	{r7, lr}
 8014bb6:	b082      	sub	sp, #8
 8014bb8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8014bba:	e008      	b.n	8014bce <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8014bbc:	1d3b      	adds	r3, r7, #4
 8014bbe:	4619      	mov	r1, r3
 8014bc0:	4808      	ldr	r0, [pc, #32]	@ (8014be4 <HW_IPCC_TRACES_EvtNot+0x30>)
 8014bc2:	f000 f938 	bl	8014e36 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	4618      	mov	r0, r3
 8014bca:	f000 f80d 	bl	8014be8 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8014bce:	4805      	ldr	r0, [pc, #20]	@ (8014be4 <HW_IPCC_TRACES_EvtNot+0x30>)
 8014bd0:	f000 f8a2 	bl	8014d18 <LST_is_empty>
 8014bd4:	4603      	mov	r3, r0
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d0f0      	beq.n	8014bbc <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8014bda:	bf00      	nop
}
 8014bdc:	3708      	adds	r7, #8
 8014bde:	46bd      	mov	sp, r7
 8014be0:	bd80      	pop	{r7, pc}
 8014be2:	bf00      	nop
 8014be4:	200300c0 	.word	0x200300c0

08014be8 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8014be8:	b480      	push	{r7}
 8014bea:	b083      	sub	sp, #12
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8014bf0:	bf00      	nop
 8014bf2:	370c      	adds	r7, #12
 8014bf4:	46bd      	mov	sp, r7
 8014bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bfa:	4770      	bx	lr

08014bfc <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8014bfc:	b480      	push	{r7}
 8014bfe:	b087      	sub	sp, #28
 8014c00:	af00      	add	r7, sp, #0
 8014c02:	4603      	mov	r3, r0
 8014c04:	6039      	str	r1, [r7, #0]
 8014c06:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 8014c08:	79fb      	ldrb	r3, [r7, #7]
 8014c0a:	2b06      	cmp	r3, #6
 8014c0c:	d845      	bhi.n	8014c9a <OutputDbgTrace+0x9e>
 8014c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8014c14 <OutputDbgTrace+0x18>)
 8014c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c14:	08014c31 	.word	0x08014c31
 8014c18:	08014c55 	.word	0x08014c55
 8014c1c:	08014c5b 	.word	0x08014c5b
 8014c20:	08014c6f 	.word	0x08014c6f
 8014c24:	08014c7b 	.word	0x08014c7b
 8014c28:	08014c81 	.word	0x08014c81
 8014c2c:	08014c8f 	.word	0x08014c8f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8014c30:	683b      	ldr	r3, [r7, #0]
 8014c32:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8014c34:	697b      	ldr	r3, [r7, #20]
 8014c36:	7a5b      	ldrb	r3, [r3, #9]
 8014c38:	2bff      	cmp	r3, #255	@ 0xff
 8014c3a:	d005      	beq.n	8014c48 <OutputDbgTrace+0x4c>
 8014c3c:	2bff      	cmp	r3, #255	@ 0xff
 8014c3e:	dc05      	bgt.n	8014c4c <OutputDbgTrace+0x50>
 8014c40:	2b0e      	cmp	r3, #14
 8014c42:	d005      	beq.n	8014c50 <OutputDbgTrace+0x54>
 8014c44:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8014c46:	e001      	b.n	8014c4c <OutputDbgTrace+0x50>
          break;
 8014c48:	bf00      	nop
 8014c4a:	e027      	b.n	8014c9c <OutputDbgTrace+0xa0>
          break;
 8014c4c:	bf00      	nop
 8014c4e:	e025      	b.n	8014c9c <OutputDbgTrace+0xa0>
          break;
 8014c50:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8014c52:	e023      	b.n	8014c9c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8014c54:	683b      	ldr	r3, [r7, #0]
 8014c56:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8014c58:	e020      	b.n	8014c9c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8014c5a:	683b      	ldr	r3, [r7, #0]
 8014c5c:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8014c5e:	697b      	ldr	r3, [r7, #20]
 8014c60:	7a5b      	ldrb	r3, [r3, #9]
 8014c62:	2b0e      	cmp	r3, #14
 8014c64:	d001      	beq.n	8014c6a <OutputDbgTrace+0x6e>
 8014c66:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8014c68:	e000      	b.n	8014c6c <OutputDbgTrace+0x70>
          break;
 8014c6a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8014c6c:	e016      	b.n	8014c9c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8014c6e:	683b      	ldr	r3, [r7, #0]
 8014c70:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8014c72:	697b      	ldr	r3, [r7, #20]
 8014c74:	7a5b      	ldrb	r3, [r3, #9]
 8014c76:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8014c78:	e010      	b.n	8014c9c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8014c7a:	683b      	ldr	r3, [r7, #0]
 8014c7c:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8014c7e:	e00d      	b.n	8014c9c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 8014c80:	683b      	ldr	r3, [r7, #0]
 8014c82:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 8014c84:	693b      	ldr	r3, [r7, #16]
 8014c86:	785b      	ldrb	r3, [r3, #1]
 8014c88:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 8014c8a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 8014c8c:	e006      	b.n	8014c9c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8014c8e:	683b      	ldr	r3, [r7, #0]
 8014c90:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8014c92:	697b      	ldr	r3, [r7, #20]
 8014c94:	7a5b      	ldrb	r3, [r3, #9]
 8014c96:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8014c98:	e000      	b.n	8014c9c <OutputDbgTrace+0xa0>

    default:
      break;
 8014c9a:	bf00      	nop
  }

  return;
 8014c9c:	bf00      	nop
}
 8014c9e:	371c      	adds	r7, #28
 8014ca0:	46bd      	mov	sp, r7
 8014ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ca6:	4770      	bx	lr

08014ca8 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8014ca8:	b480      	push	{r7}
 8014caa:	b085      	sub	sp, #20
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	4603      	mov	r3, r0
 8014cb0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8014cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8014cf0 <OTP_Read+0x48>)
 8014cb4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8014cb6:	e002      	b.n	8014cbe <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	3b08      	subs	r3, #8
 8014cbc:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	3307      	adds	r3, #7
 8014cc2:	781b      	ldrb	r3, [r3, #0]
 8014cc4:	79fa      	ldrb	r2, [r7, #7]
 8014cc6:	429a      	cmp	r2, r3
 8014cc8:	d003      	beq.n	8014cd2 <OTP_Read+0x2a>
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	4a09      	ldr	r2, [pc, #36]	@ (8014cf4 <OTP_Read+0x4c>)
 8014cce:	4293      	cmp	r3, r2
 8014cd0:	d1f2      	bne.n	8014cb8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	3307      	adds	r3, #7
 8014cd6:	781b      	ldrb	r3, [r3, #0]
 8014cd8:	79fa      	ldrb	r2, [r7, #7]
 8014cda:	429a      	cmp	r2, r3
 8014cdc:	d001      	beq.n	8014ce2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8014cde:	2300      	movs	r3, #0
 8014ce0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8014ce2:	68fb      	ldr	r3, [r7, #12]
}
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	3714      	adds	r7, #20
 8014ce8:	46bd      	mov	sp, r7
 8014cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cee:	4770      	bx	lr
 8014cf0:	1fff73f8 	.word	0x1fff73f8
 8014cf4:	1fff7000 	.word	0x1fff7000

08014cf8 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8014cf8:	b480      	push	{r7}
 8014cfa:	b083      	sub	sp, #12
 8014cfc:	af00      	add	r7, sp, #0
 8014cfe:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	687a      	ldr	r2, [r7, #4]
 8014d04:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	687a      	ldr	r2, [r7, #4]
 8014d0a:	605a      	str	r2, [r3, #4]
}
 8014d0c:	bf00      	nop
 8014d0e:	370c      	adds	r7, #12
 8014d10:	46bd      	mov	sp, r7
 8014d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d16:	4770      	bx	lr

08014d18 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8014d18:	b480      	push	{r7}
 8014d1a:	b087      	sub	sp, #28
 8014d1c:	af00      	add	r7, sp, #0
 8014d1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014d20:	f3ef 8310 	mrs	r3, PRIMASK
 8014d24:	60fb      	str	r3, [r7, #12]
  return(result);
 8014d26:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8014d28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8014d2a:	b672      	cpsid	i
}
 8014d2c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	687a      	ldr	r2, [r7, #4]
 8014d34:	429a      	cmp	r2, r3
 8014d36:	d102      	bne.n	8014d3e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8014d38:	2301      	movs	r3, #1
 8014d3a:	75fb      	strb	r3, [r7, #23]
 8014d3c:	e001      	b.n	8014d42 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8014d3e:	2300      	movs	r3, #0
 8014d40:	75fb      	strb	r3, [r7, #23]
 8014d42:	693b      	ldr	r3, [r7, #16]
 8014d44:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014d46:	68bb      	ldr	r3, [r7, #8]
 8014d48:	f383 8810 	msr	PRIMASK, r3
}
 8014d4c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8014d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014d50:	4618      	mov	r0, r3
 8014d52:	371c      	adds	r7, #28
 8014d54:	46bd      	mov	sp, r7
 8014d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d5a:	4770      	bx	lr

08014d5c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8014d5c:	b480      	push	{r7}
 8014d5e:	b087      	sub	sp, #28
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	6078      	str	r0, [r7, #4]
 8014d64:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014d66:	f3ef 8310 	mrs	r3, PRIMASK
 8014d6a:	60fb      	str	r3, [r7, #12]
  return(result);
 8014d6c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8014d6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8014d70:	b672      	cpsid	i
}
 8014d72:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	681a      	ldr	r2, [r3, #0]
 8014d78:	683b      	ldr	r3, [r7, #0]
 8014d7a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8014d7c:	683b      	ldr	r3, [r7, #0]
 8014d7e:	687a      	ldr	r2, [r7, #4]
 8014d80:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	683a      	ldr	r2, [r7, #0]
 8014d86:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8014d88:	683b      	ldr	r3, [r7, #0]
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	683a      	ldr	r2, [r7, #0]
 8014d8e:	605a      	str	r2, [r3, #4]
 8014d90:	697b      	ldr	r3, [r7, #20]
 8014d92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014d94:	693b      	ldr	r3, [r7, #16]
 8014d96:	f383 8810 	msr	PRIMASK, r3
}
 8014d9a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8014d9c:	bf00      	nop
 8014d9e:	371c      	adds	r7, #28
 8014da0:	46bd      	mov	sp, r7
 8014da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da6:	4770      	bx	lr

08014da8 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8014da8:	b480      	push	{r7}
 8014daa:	b087      	sub	sp, #28
 8014dac:	af00      	add	r7, sp, #0
 8014dae:	6078      	str	r0, [r7, #4]
 8014db0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014db2:	f3ef 8310 	mrs	r3, PRIMASK
 8014db6:	60fb      	str	r3, [r7, #12]
  return(result);
 8014db8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8014dba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8014dbc:	b672      	cpsid	i
}
 8014dbe:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8014dc0:	683b      	ldr	r3, [r7, #0]
 8014dc2:	687a      	ldr	r2, [r7, #4]
 8014dc4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	685a      	ldr	r2, [r3, #4]
 8014dca:	683b      	ldr	r3, [r7, #0]
 8014dcc:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	683a      	ldr	r2, [r7, #0]
 8014dd2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8014dd4:	683b      	ldr	r3, [r7, #0]
 8014dd6:	685b      	ldr	r3, [r3, #4]
 8014dd8:	683a      	ldr	r2, [r7, #0]
 8014dda:	601a      	str	r2, [r3, #0]
 8014ddc:	697b      	ldr	r3, [r7, #20]
 8014dde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014de0:	693b      	ldr	r3, [r7, #16]
 8014de2:	f383 8810 	msr	PRIMASK, r3
}
 8014de6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8014de8:	bf00      	nop
 8014dea:	371c      	adds	r7, #28
 8014dec:	46bd      	mov	sp, r7
 8014dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014df2:	4770      	bx	lr

08014df4 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8014df4:	b480      	push	{r7}
 8014df6:	b087      	sub	sp, #28
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014dfc:	f3ef 8310 	mrs	r3, PRIMASK
 8014e00:	60fb      	str	r3, [r7, #12]
  return(result);
 8014e02:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8014e04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8014e06:	b672      	cpsid	i
}
 8014e08:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	685b      	ldr	r3, [r3, #4]
 8014e0e:	687a      	ldr	r2, [r7, #4]
 8014e10:	6812      	ldr	r2, [r2, #0]
 8014e12:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	687a      	ldr	r2, [r7, #4]
 8014e1a:	6852      	ldr	r2, [r2, #4]
 8014e1c:	605a      	str	r2, [r3, #4]
 8014e1e:	697b      	ldr	r3, [r7, #20]
 8014e20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014e22:	693b      	ldr	r3, [r7, #16]
 8014e24:	f383 8810 	msr	PRIMASK, r3
}
 8014e28:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8014e2a:	bf00      	nop
 8014e2c:	371c      	adds	r7, #28
 8014e2e:	46bd      	mov	sp, r7
 8014e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e34:	4770      	bx	lr

08014e36 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8014e36:	b580      	push	{r7, lr}
 8014e38:	b086      	sub	sp, #24
 8014e3a:	af00      	add	r7, sp, #0
 8014e3c:	6078      	str	r0, [r7, #4]
 8014e3e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014e40:	f3ef 8310 	mrs	r3, PRIMASK
 8014e44:	60fb      	str	r3, [r7, #12]
  return(result);
 8014e46:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8014e48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8014e4a:	b672      	cpsid	i
}
 8014e4c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	681a      	ldr	r2, [r3, #0]
 8014e52:	683b      	ldr	r3, [r7, #0]
 8014e54:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	f7ff ffca 	bl	8014df4 <LST_remove_node>
 8014e60:	697b      	ldr	r3, [r7, #20]
 8014e62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014e64:	693b      	ldr	r3, [r7, #16]
 8014e66:	f383 8810 	msr	PRIMASK, r3
}
 8014e6a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8014e6c:	bf00      	nop
 8014e6e:	3718      	adds	r7, #24
 8014e70:	46bd      	mov	sp, r7
 8014e72:	bd80      	pop	{r7, pc}

08014e74 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8014e74:	b480      	push	{r7}
 8014e76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8014e78:	4b03      	ldr	r3, [pc, #12]	@ (8014e88 <LL_FLASH_GetUDN+0x14>)
 8014e7a:	681b      	ldr	r3, [r3, #0]
}
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	46bd      	mov	sp, r7
 8014e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e84:	4770      	bx	lr
 8014e86:	bf00      	nop
 8014e88:	1fff7580 	.word	0x1fff7580

08014e8c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8014e8c:	b480      	push	{r7}
 8014e8e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8014e90:	4b03      	ldr	r3, [pc, #12]	@ (8014ea0 <LL_FLASH_GetDeviceID+0x14>)
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	b2db      	uxtb	r3, r3
}
 8014e96:	4618      	mov	r0, r3
 8014e98:	46bd      	mov	sp, r7
 8014e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e9e:	4770      	bx	lr
 8014ea0:	1fff7584 	.word	0x1fff7584

08014ea4 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8014ea4:	b480      	push	{r7}
 8014ea6:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8014ea8:	4b03      	ldr	r3, [pc, #12]	@ (8014eb8 <LL_FLASH_GetSTCompanyID+0x14>)
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	0a1b      	lsrs	r3, r3, #8
}
 8014eae:	4618      	mov	r0, r3
 8014eb0:	46bd      	mov	sp, r7
 8014eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eb6:	4770      	bx	lr
 8014eb8:	1fff7584 	.word	0x1fff7584

08014ebc <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8014ebc:	b5b0      	push	{r4, r5, r7, lr}
 8014ebe:	b090      	sub	sp, #64	@ 0x40
 8014ec0:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8014ec2:	2392      	movs	r3, #146	@ 0x92
 8014ec4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8014ec8:	4b25      	ldr	r3, [pc, #148]	@ (8014f60 <APP_BLE_Init+0xa4>)
 8014eca:	1d3c      	adds	r4, r7, #4
 8014ecc:	461d      	mov	r5, r3
 8014ece:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ed0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ed2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ed4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ed6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ed8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014eda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8014ede:	c403      	stmia	r4!, {r0, r1}
 8014ee0:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8014ee2:	f000 f921 	bl	8015128 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8014ee6:	2101      	movs	r1, #1
 8014ee8:	2002      	movs	r0, #2
 8014eea:	f002 fdd9 	bl	8017aa0 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8014eee:	4a1d      	ldr	r2, [pc, #116]	@ (8014f64 <APP_BLE_Init+0xa8>)
 8014ef0:	2100      	movs	r1, #0
 8014ef2:	2002      	movs	r0, #2
 8014ef4:	f002 ff00 	bl	8017cf8 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8014ef8:	1d3b      	adds	r3, r7, #4
 8014efa:	4618      	mov	r0, r3
 8014efc:	f7ff f8c6 	bl	801408c <SHCI_C2_BLE_Init>
 8014f00:	4603      	mov	r3, r0
 8014f02:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8014f06:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d001      	beq.n	8014f12 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8014f0e:	f7f1 fb03 	bl	8006518 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8014f12:	f000 f91f 	bl	8015154 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8014f16:	f7ff f813 	bl	8013f40 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8014f1a:	4b13      	ldr	r3, [pc, #76]	@ (8014f68 <APP_BLE_Init+0xac>)
 8014f1c:	2200      	movs	r2, #0
 8014f1e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8014f22:	4b11      	ldr	r3, [pc, #68]	@ (8014f68 <APP_BLE_Init+0xac>)
 8014f24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014f28:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8014f2a:	4a10      	ldr	r2, [pc, #64]	@ (8014f6c <APP_BLE_Init+0xb0>)
 8014f2c:	2100      	movs	r1, #0
 8014f2e:	2001      	movs	r0, #1
 8014f30:	f002 fee2 	bl	8017cf8 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8014f34:	2006      	movs	r0, #6
 8014f36:	f7fe fe77 	bl	8013c28 <aci_hal_set_radio_activity_mask>
 8014f3a:	4603      	mov	r3, r0
 8014f3c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8014f40:	f000 fadc 	bl	80154fc <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8014f44:	4b08      	ldr	r3, [pc, #32]	@ (8014f68 <APP_BLE_Init+0xac>)
 8014f46:	2200      	movs	r2, #0
 8014f48:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8014f4a:	4b07      	ldr	r3, [pc, #28]	@ (8014f68 <APP_BLE_Init+0xac>)
 8014f4c:	2200      	movs	r2, #0
 8014f4e:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8014f50:	2001      	movs	r0, #1
 8014f52:	f000 f9b3 	bl	80152bc <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8014f56:	bf00      	nop
}
 8014f58:	3740      	adds	r7, #64	@ 0x40
 8014f5a:	46bd      	mov	sp, r7
 8014f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8014f5e:	bf00      	nop
 8014f60:	0801b790 	.word	0x0801b790
 8014f64:	080142a9 	.word	0x080142a9
 8014f68:	20000ac4 	.word	0x20000ac4
 8014f6c:	080153a5 	.word	0x080153a5

08014f70 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8014f70:	b580      	push	{r7, lr}
 8014f72:	b08c      	sub	sp, #48	@ 0x30
 8014f74:	af00      	add	r7, sp, #0
 8014f76:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8014f78:	2392      	movs	r3, #146	@ 0x92
 8014f7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	3301      	adds	r3, #1
 8014f82:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 8014f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f86:	781b      	ldrb	r3, [r3, #0]
 8014f88:	2bff      	cmp	r3, #255	@ 0xff
 8014f8a:	d05c      	beq.n	8015046 <SVCCTL_App_Notification+0xd6>
 8014f8c:	2bff      	cmp	r3, #255	@ 0xff
 8014f8e:	f300 80bd 	bgt.w	801510c <SVCCTL_App_Notification+0x19c>
 8014f92:	2b3e      	cmp	r3, #62	@ 0x3e
 8014f94:	d02b      	beq.n	8014fee <SVCCTL_App_Notification+0x7e>
 8014f96:	2b3e      	cmp	r3, #62	@ 0x3e
 8014f98:	f300 80b8 	bgt.w	801510c <SVCCTL_App_Notification+0x19c>
 8014f9c:	2b05      	cmp	r3, #5
 8014f9e:	d002      	beq.n	8014fa6 <SVCCTL_App_Notification+0x36>
 8014fa0:	2b10      	cmp	r3, #16
 8014fa2:	d020      	beq.n	8014fe6 <SVCCTL_App_Notification+0x76>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8014fa4:	e0b2      	b.n	801510c <SVCCTL_App_Notification+0x19c>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8014fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fa8:	3302      	adds	r3, #2
 8014faa:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8014fb2:	b29a      	uxth	r2, r3
 8014fb4:	4b59      	ldr	r3, [pc, #356]	@ (801511c <SVCCTL_App_Notification+0x1ac>)
 8014fb6:	8adb      	ldrh	r3, [r3, #22]
 8014fb8:	429a      	cmp	r2, r3
 8014fba:	d106      	bne.n	8014fca <SVCCTL_App_Notification+0x5a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8014fbc:	4b57      	ldr	r3, [pc, #348]	@ (801511c <SVCCTL_App_Notification+0x1ac>)
 8014fbe:	2200      	movs	r2, #0
 8014fc0:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8014fc2:	4b56      	ldr	r3, [pc, #344]	@ (801511c <SVCCTL_App_Notification+0x1ac>)
 8014fc4:	2200      	movs	r2, #0
 8014fc6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8014fca:	2001      	movs	r0, #1
 8014fcc:	f000 f976 	bl	80152bc <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8014fd0:	4b53      	ldr	r3, [pc, #332]	@ (8015120 <SVCCTL_App_Notification+0x1b0>)
 8014fd2:	2201      	movs	r2, #1
 8014fd4:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8014fd6:	4b51      	ldr	r3, [pc, #324]	@ (801511c <SVCCTL_App_Notification+0x1ac>)
 8014fd8:	8ada      	ldrh	r2, [r3, #22]
 8014fda:	4b51      	ldr	r3, [pc, #324]	@ (8015120 <SVCCTL_App_Notification+0x1b0>)
 8014fdc:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8014fde:	4850      	ldr	r0, [pc, #320]	@ (8015120 <SVCCTL_App_Notification+0x1b0>)
 8014fe0:	f000 fa78 	bl	80154d4 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8014fe4:	e095      	b.n	8015112 <SVCCTL_App_Notification+0x1a2>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 8014fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fe8:	3302      	adds	r3, #2
 8014fea:	613b      	str	r3, [r7, #16]
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 8014fec:	e091      	b.n	8015112 <SVCCTL_App_Notification+0x1a2>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8014fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ff0:	3302      	adds	r3, #2
 8014ff2:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 8014ff4:	69bb      	ldr	r3, [r7, #24]
 8014ff6:	781b      	ldrb	r3, [r3, #0]
 8014ff8:	2b01      	cmp	r3, #1
 8014ffa:	d001      	beq.n	8015000 <SVCCTL_App_Notification+0x90>
 8014ffc:	2b03      	cmp	r3, #3
          break;
 8014ffe:	e021      	b.n	8015044 <SVCCTL_App_Notification+0xd4>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8015000:	69bb      	ldr	r3, [r7, #24]
 8015002:	3301      	adds	r3, #1
 8015004:	617b      	str	r3, [r7, #20]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8015006:	4b45      	ldr	r3, [pc, #276]	@ (801511c <SVCCTL_App_Notification+0x1ac>)
 8015008:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 801500c:	2b04      	cmp	r3, #4
 801500e:	d104      	bne.n	801501a <SVCCTL_App_Notification+0xaa>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8015010:	4b42      	ldr	r3, [pc, #264]	@ (801511c <SVCCTL_App_Notification+0x1ac>)
 8015012:	2206      	movs	r2, #6
 8015014:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8015018:	e003      	b.n	8015022 <SVCCTL_App_Notification+0xb2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 801501a:	4b40      	ldr	r3, [pc, #256]	@ (801511c <SVCCTL_App_Notification+0x1ac>)
 801501c:	2205      	movs	r2, #5
 801501e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8015022:	697b      	ldr	r3, [r7, #20]
 8015024:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8015028:	b29a      	uxth	r2, r3
 801502a:	4b3c      	ldr	r3, [pc, #240]	@ (801511c <SVCCTL_App_Notification+0x1ac>)
 801502c:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 801502e:	4b3c      	ldr	r3, [pc, #240]	@ (8015120 <SVCCTL_App_Notification+0x1b0>)
 8015030:	2200      	movs	r2, #0
 8015032:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8015034:	4b39      	ldr	r3, [pc, #228]	@ (801511c <SVCCTL_App_Notification+0x1ac>)
 8015036:	8ada      	ldrh	r2, [r3, #22]
 8015038:	4b39      	ldr	r3, [pc, #228]	@ (8015120 <SVCCTL_App_Notification+0x1b0>)
 801503a:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 801503c:	4838      	ldr	r0, [pc, #224]	@ (8015120 <SVCCTL_App_Notification+0x1b0>)
 801503e:	f000 fa49 	bl	80154d4 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8015042:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8015044:	e065      	b.n	8015112 <SVCCTL_App_Notification+0x1a2>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8015046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015048:	3302      	adds	r3, #2
 801504a:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 801504c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801504e:	881b      	ldrh	r3, [r3, #0]
 8015050:	b29b      	uxth	r3, r3
 8015052:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8015056:	4293      	cmp	r3, r2
 8015058:	d048      	beq.n	80150ec <SVCCTL_App_Notification+0x17c>
 801505a:	f640 420e 	movw	r2, #3086	@ 0xc0e
 801505e:	4293      	cmp	r3, r2
 8015060:	dc56      	bgt.n	8015110 <SVCCTL_App_Notification+0x1a0>
 8015062:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015066:	d04b      	beq.n	8015100 <SVCCTL_App_Notification+0x190>
 8015068:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801506c:	dc50      	bgt.n	8015110 <SVCCTL_App_Notification+0x1a0>
 801506e:	f240 420a 	movw	r2, #1034	@ 0x40a
 8015072:	4293      	cmp	r3, r2
 8015074:	dc4c      	bgt.n	8015110 <SVCCTL_App_Notification+0x1a0>
 8015076:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801507a:	dc04      	bgt.n	8015086 <SVCCTL_App_Notification+0x116>
 801507c:	2b04      	cmp	r3, #4
 801507e:	d041      	beq.n	8015104 <SVCCTL_App_Notification+0x194>
 8015080:	2b06      	cmp	r3, #6
 8015082:	d039      	beq.n	80150f8 <SVCCTL_App_Notification+0x188>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8015084:	e044      	b.n	8015110 <SVCCTL_App_Notification+0x1a0>
      switch (p_blecore_evt->ecode)
 8015086:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 801508a:	2b09      	cmp	r3, #9
 801508c:	d840      	bhi.n	8015110 <SVCCTL_App_Notification+0x1a0>
 801508e:	a201      	add	r2, pc, #4	@ (adr r2, 8015094 <SVCCTL_App_Notification+0x124>)
 8015090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015094:	080150e5 	.word	0x080150e5
 8015098:	080150bd 	.word	0x080150bd
 801509c:	08015111 	.word	0x08015111
 80150a0:	08015111 	.word	0x08015111
 80150a4:	08015111 	.word	0x08015111
 80150a8:	08015111 	.word	0x08015111
 80150ac:	08015109 	.word	0x08015109
 80150b0:	08015111 	.word	0x08015111
 80150b4:	080150d1 	.word	0x080150d1
 80150b8:	08015109 	.word	0x08015109
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 80150bc:	4b17      	ldr	r3, [pc, #92]	@ (801511c <SVCCTL_App_Notification+0x1ac>)
 80150be:	8adb      	ldrh	r3, [r3, #22]
 80150c0:	4918      	ldr	r1, [pc, #96]	@ (8015124 <SVCCTL_App_Notification+0x1b4>)
 80150c2:	4618      	mov	r0, r3
 80150c4:	f7fd ffb2 	bl	801302c <aci_gap_pass_key_resp>
 80150c8:	4603      	mov	r3, r0
 80150ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 80150ce:	e01c      	b.n	801510a <SVCCTL_App_Notification+0x19a>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 80150d0:	4b12      	ldr	r3, [pc, #72]	@ (801511c <SVCCTL_App_Notification+0x1ac>)
 80150d2:	8adb      	ldrh	r3, [r3, #22]
 80150d4:	2101      	movs	r1, #1
 80150d6:	4618      	mov	r0, r3
 80150d8:	f7fe f952 	bl	8013380 <aci_gap_numeric_comparison_value_confirm_yesno>
 80150dc:	4603      	mov	r3, r0
 80150de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 80150e2:	e012      	b.n	801510a <SVCCTL_App_Notification+0x19a>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 80150e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150e6:	3302      	adds	r3, #2
 80150e8:	623b      	str	r3, [r7, #32]
          break;
 80150ea:	e00e      	b.n	801510a <SVCCTL_App_Notification+0x19a>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 80150ec:	4b0b      	ldr	r3, [pc, #44]	@ (801511c <SVCCTL_App_Notification+0x1ac>)
 80150ee:	8adb      	ldrh	r3, [r3, #22]
 80150f0:	4618      	mov	r0, r3
 80150f2:	f7fe fc58 	bl	80139a6 <aci_gatt_confirm_indication>
        break;
 80150f6:	e008      	b.n	801510a <SVCCTL_App_Notification+0x19a>
	      p_warning_event = (aci_hal_warning_event_rp0 *)p_blecore_evt->data;
 80150f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150fa:	3302      	adds	r3, #2
 80150fc:	61fb      	str	r3, [r7, #28]
          break;
 80150fe:	e004      	b.n	801510a <SVCCTL_App_Notification+0x19a>
          break;
 8015100:	bf00      	nop
 8015102:	e005      	b.n	8015110 <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8015104:	bf00      	nop
 8015106:	e003      	b.n	8015110 <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8015108:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 801510a:	e001      	b.n	8015110 <SVCCTL_App_Notification+0x1a0>
      break;
 801510c:	bf00      	nop
 801510e:	e000      	b.n	8015112 <SVCCTL_App_Notification+0x1a2>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8015110:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8015112:	2301      	movs	r3, #1
}
 8015114:	4618      	mov	r0, r3
 8015116:	3730      	adds	r7, #48	@ 0x30
 8015118:	46bd      	mov	sp, r7
 801511a:	bd80      	pop	{r7, pc}
 801511c:	20000ac4 	.word	0x20000ac4
 8015120:	20000b48 	.word	0x20000b48
 8015124:	0001b207 	.word	0x0001b207

08015128 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8015128:	b580      	push	{r7, lr}
 801512a:	b082      	sub	sp, #8
 801512c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 801512e:	4b06      	ldr	r3, [pc, #24]	@ (8015148 <Ble_Tl_Init+0x20>)
 8015130:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8015132:	4b06      	ldr	r3, [pc, #24]	@ (801514c <Ble_Tl_Init+0x24>)
 8015134:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8015136:	463b      	mov	r3, r7
 8015138:	4619      	mov	r1, r3
 801513a:	4805      	ldr	r0, [pc, #20]	@ (8015150 <Ble_Tl_Init+0x28>)
 801513c:	f7ff f898 	bl	8014270 <hci_init>

  return;
 8015140:	bf00      	nop
}
 8015142:	3708      	adds	r7, #8
 8015144:	46bd      	mov	sp, r7
 8015146:	bd80      	pop	{r7, pc}
 8015148:	200300d8 	.word	0x200300d8
 801514c:	08015455 	.word	0x08015455
 8015150:	0801541d 	.word	0x0801541d

08015154 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8015154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015156:	b08d      	sub	sp, #52	@ 0x34
 8015158:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 801515a:	2300      	movs	r3, #0
 801515c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801515e:	2392      	movs	r3, #146	@ 0x92
 8015160:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8015162:	f7fe fdb5 	bl	8013cd0 <hci_reset>
 8015166:	4603      	mov	r3, r0
 8015168:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 801516a:	f000 f8d7 	bl	801531c <BleGetBdAddress>
 801516e:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBLIC_ADDRESS_OFFSET, CONFIG_DATA_PUBLIC_ADDRESS_LEN, (uint8_t*) p_bd_addr);
 8015170:	693a      	ldr	r2, [r7, #16]
 8015172:	2106      	movs	r1, #6
 8015174:	2000      	movs	r0, #0
 8015176:	f7fe fc6b 	bl	8013a50 <aci_hal_write_config_data>
 801517a:	4603      	mov	r3, r0
 801517c:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 801517e:	4a4a      	ldr	r2, [pc, #296]	@ (80152a8 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8015180:	2110      	movs	r1, #16
 8015182:	2018      	movs	r0, #24
 8015184:	f7fe fc64 	bl	8013a50 <aci_hal_write_config_data>
 8015188:	4603      	mov	r3, r0
 801518a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 801518c:	4a47      	ldr	r2, [pc, #284]	@ (80152ac <Ble_Hci_Gap_Gatt_Init+0x158>)
 801518e:	2110      	movs	r1, #16
 8015190:	2008      	movs	r0, #8
 8015192:	f7fe fc5d 	bl	8013a50 <aci_hal_write_config_data>
 8015196:	4603      	mov	r3, r0
 8015198:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 801519a:	2118      	movs	r1, #24
 801519c:	2001      	movs	r0, #1
 801519e:	f7fe fcdc 	bl	8013b5a <aci_hal_set_tx_power_level>
 80151a2:	4603      	mov	r3, r0
 80151a4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 80151a6:	f7fe f952 	bl	801344e <aci_gatt_init>
 80151aa:	4603      	mov	r3, r0
 80151ac:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 80151ae:	2300      	movs	r3, #0
 80151b0:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80151b2:	7bfb      	ldrb	r3, [r7, #15]
 80151b4:	f043 0301 	orr.w	r3, r3, #1
 80151b8:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 80151ba:	7bfb      	ldrb	r3, [r7, #15]
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d01f      	beq.n	8015200 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 80151c0:	4b3b      	ldr	r3, [pc, #236]	@ (80152b0 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 80151c2:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 80151c4:	1dba      	adds	r2, r7, #6
 80151c6:	7bf8      	ldrb	r0, [r7, #15]
 80151c8:	1cbb      	adds	r3, r7, #2
 80151ca:	9301      	str	r3, [sp, #4]
 80151cc:	1d3b      	adds	r3, r7, #4
 80151ce:	9300      	str	r3, [sp, #0]
 80151d0:	4613      	mov	r3, r2
 80151d2:	2208      	movs	r2, #8
 80151d4:	2100      	movs	r1, #0
 80151d6:	f7fd ff90 	bl	80130fa <aci_gap_init>
 80151da:	4603      	mov	r3, r0
 80151dc:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 80151de:	88fc      	ldrh	r4, [r7, #6]
 80151e0:	88bd      	ldrh	r5, [r7, #4]
 80151e2:	68b8      	ldr	r0, [r7, #8]
 80151e4:	f7eb f81c 	bl	8000220 <strlen>
 80151e8:	4603      	mov	r3, r0
 80151ea:	b2da      	uxtb	r2, r3
 80151ec:	68bb      	ldr	r3, [r7, #8]
 80151ee:	9300      	str	r3, [sp, #0]
 80151f0:	4613      	mov	r3, r2
 80151f2:	2200      	movs	r2, #0
 80151f4:	4629      	mov	r1, r5
 80151f6:	4620      	mov	r0, r4
 80151f8:	f7fe fb2c 	bl	8013854 <aci_gatt_update_char_value>
 80151fc:	4603      	mov	r3, r0
 80151fe:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8015200:	88f8      	ldrh	r0, [r7, #6]
 8015202:	8879      	ldrh	r1, [r7, #2]
 8015204:	463b      	mov	r3, r7
 8015206:	9300      	str	r3, [sp, #0]
 8015208:	2302      	movs	r3, #2
 801520a:	2200      	movs	r2, #0
 801520c:	f7fe fb22 	bl	8013854 <aci_gatt_update_char_value>
 8015210:	4603      	mov	r3, r0
 8015212:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8015214:	2202      	movs	r2, #2
 8015216:	2102      	movs	r1, #2
 8015218:	2000      	movs	r0, #0
 801521a:	f7fe fd7d 	bl	8013d18 <hci_le_set_default_phy>
 801521e:	4603      	mov	r3, r0
 8015220:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8015222:	4b24      	ldr	r3, [pc, #144]	@ (80152b4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8015224:	2201      	movs	r2, #1
 8015226:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8015228:	4b22      	ldr	r3, [pc, #136]	@ (80152b4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801522a:	781b      	ldrb	r3, [r3, #0]
 801522c:	4618      	mov	r0, r3
 801522e:	f7fd fde5 	bl	8012dfc <aci_gap_set_io_capability>
 8015232:	4603      	mov	r3, r0
 8015234:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8015236:	4b1f      	ldr	r3, [pc, #124]	@ (80152b4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8015238:	2201      	movs	r2, #1
 801523a:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 801523c:	4b1d      	ldr	r3, [pc, #116]	@ (80152b4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801523e:	2208      	movs	r2, #8
 8015240:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8015242:	4b1c      	ldr	r3, [pc, #112]	@ (80152b4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8015244:	2210      	movs	r2, #16
 8015246:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8015248:	4b1a      	ldr	r3, [pc, #104]	@ (80152b4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801524a:	2200      	movs	r2, #0
 801524c:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 801524e:	4b19      	ldr	r3, [pc, #100]	@ (80152b4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8015250:	4a19      	ldr	r2, [pc, #100]	@ (80152b8 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8015252:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8015254:	4b17      	ldr	r3, [pc, #92]	@ (80152b4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8015256:	2200      	movs	r2, #0
 8015258:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 801525a:	4b16      	ldr	r3, [pc, #88]	@ (80152b4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801525c:	789c      	ldrb	r4, [r3, #2]
 801525e:	4b15      	ldr	r3, [pc, #84]	@ (80152b4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8015260:	785d      	ldrb	r5, [r3, #1]
 8015262:	4b14      	ldr	r3, [pc, #80]	@ (80152b4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8015264:	791b      	ldrb	r3, [r3, #4]
 8015266:	4a13      	ldr	r2, [pc, #76]	@ (80152b4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8015268:	7952      	ldrb	r2, [r2, #5]
 801526a:	4912      	ldr	r1, [pc, #72]	@ (80152b4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801526c:	78c9      	ldrb	r1, [r1, #3]
 801526e:	4811      	ldr	r0, [pc, #68]	@ (80152b4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8015270:	6880      	ldr	r0, [r0, #8]
 8015272:	2600      	movs	r6, #0
 8015274:	9604      	str	r6, [sp, #16]
 8015276:	9003      	str	r0, [sp, #12]
 8015278:	9102      	str	r1, [sp, #8]
 801527a:	9201      	str	r2, [sp, #4]
 801527c:	9300      	str	r3, [sp, #0]
 801527e:	2300      	movs	r3, #0
 8015280:	2201      	movs	r2, #1
 8015282:	4629      	mov	r1, r5
 8015284:	4620      	mov	r0, r4
 8015286:	f7fd fe0d 	bl	8012ea4 <aci_gap_set_authentication_requirement>
 801528a:	4603      	mov	r3, r0
 801528c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 801528e:	4b09      	ldr	r3, [pc, #36]	@ (80152b4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8015290:	789b      	ldrb	r3, [r3, #2]
 8015292:	2b00      	cmp	r3, #0
 8015294:	d003      	beq.n	801529e <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8015296:	f7fe f84f 	bl	8013338 <aci_gap_configure_filter_accept_list>
 801529a:	4603      	mov	r3, r0
 801529c:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 801529e:	bf00      	nop
 80152a0:	371c      	adds	r7, #28
 80152a2:	46bd      	mov	sp, r7
 80152a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80152a6:	bf00      	nop
 80152a8:	0801c0cc 	.word	0x0801c0cc
 80152ac:	0801c0dc 	.word	0x0801c0dc
 80152b0:	0801b7cc 	.word	0x0801b7cc
 80152b4:	20000ac4 	.word	0x20000ac4
 80152b8:	0001b207 	.word	0x0001b207

080152bc <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 80152bc:	b580      	push	{r7, lr}
 80152be:	b08c      	sub	sp, #48	@ 0x30
 80152c0:	af08      	add	r7, sp, #32
 80152c2:	4603      	mov	r3, r0
 80152c4:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80152c6:	2392      	movs	r3, #146	@ 0x92
 80152c8:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 80152ca:	4a12      	ldr	r2, [pc, #72]	@ (8015314 <Adv_Request+0x58>)
 80152cc:	79fb      	ldrb	r3, [r7, #7]
 80152ce:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 80152d2:	2300      	movs	r3, #0
 80152d4:	9306      	str	r3, [sp, #24]
 80152d6:	2300      	movs	r3, #0
 80152d8:	9305      	str	r3, [sp, #20]
 80152da:	2300      	movs	r3, #0
 80152dc:	9304      	str	r3, [sp, #16]
 80152de:	2300      	movs	r3, #0
 80152e0:	9303      	str	r3, [sp, #12]
 80152e2:	2300      	movs	r3, #0
 80152e4:	9302      	str	r3, [sp, #8]
 80152e6:	2300      	movs	r3, #0
 80152e8:	9301      	str	r3, [sp, #4]
 80152ea:	2300      	movs	r3, #0
 80152ec:	9300      	str	r3, [sp, #0]
 80152ee:	2300      	movs	r3, #0
 80152f0:	22a0      	movs	r2, #160	@ 0xa0
 80152f2:	2180      	movs	r1, #128	@ 0x80
 80152f4:	2000      	movs	r0, #0
 80152f6:	f7fd fc87 	bl	8012c08 <aci_gap_set_discoverable>
 80152fa:	4603      	mov	r3, r0
 80152fc:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 80152fe:	4906      	ldr	r1, [pc, #24]	@ (8015318 <Adv_Request+0x5c>)
 8015300:	200f      	movs	r0, #15
 8015302:	f7fd ffa7 	bl	8013254 <aci_gap_update_adv_data>
 8015306:	4603      	mov	r3, r0
 8015308:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 801530a:	bf00      	nop
}
 801530c:	3710      	adds	r7, #16
 801530e:	46bd      	mov	sp, r7
 8015310:	bd80      	pop	{r7, pc}
 8015312:	bf00      	nop
 8015314:	20000ac4 	.word	0x20000ac4
 8015318:	200000bc 	.word	0x200000bc

0801531c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 801531c:	b580      	push	{r7, lr}
 801531e:	b086      	sub	sp, #24
 8015320:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8015322:	f7ff fda7 	bl	8014e74 <LL_FLASH_GetUDN>
 8015326:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8015328:	693b      	ldr	r3, [r7, #16]
 801532a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801532e:	d023      	beq.n	8015378 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8015330:	f7ff fdb8 	bl	8014ea4 <LL_FLASH_GetSTCompanyID>
 8015334:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8015336:	f7ff fda9 	bl	8014e8c <LL_FLASH_GetDeviceID>
 801533a:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 801533c:	693b      	ldr	r3, [r7, #16]
 801533e:	b2da      	uxtb	r2, r3
 8015340:	4b16      	ldr	r3, [pc, #88]	@ (801539c <BleGetBdAddress+0x80>)
 8015342:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8015344:	693b      	ldr	r3, [r7, #16]
 8015346:	0a1b      	lsrs	r3, r3, #8
 8015348:	b2da      	uxtb	r2, r3
 801534a:	4b14      	ldr	r3, [pc, #80]	@ (801539c <BleGetBdAddress+0x80>)
 801534c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	b2da      	uxtb	r2, r3
 8015352:	4b12      	ldr	r3, [pc, #72]	@ (801539c <BleGetBdAddress+0x80>)
 8015354:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8015356:	68bb      	ldr	r3, [r7, #8]
 8015358:	b2da      	uxtb	r2, r3
 801535a:	4b10      	ldr	r3, [pc, #64]	@ (801539c <BleGetBdAddress+0x80>)
 801535c:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 801535e:	68bb      	ldr	r3, [r7, #8]
 8015360:	0a1b      	lsrs	r3, r3, #8
 8015362:	b2da      	uxtb	r2, r3
 8015364:	4b0d      	ldr	r3, [pc, #52]	@ (801539c <BleGetBdAddress+0x80>)
 8015366:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8015368:	68bb      	ldr	r3, [r7, #8]
 801536a:	0c1b      	lsrs	r3, r3, #16
 801536c:	b2da      	uxtb	r2, r3
 801536e:	4b0b      	ldr	r3, [pc, #44]	@ (801539c <BleGetBdAddress+0x80>)
 8015370:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8015372:	4b0a      	ldr	r3, [pc, #40]	@ (801539c <BleGetBdAddress+0x80>)
 8015374:	617b      	str	r3, [r7, #20]
 8015376:	e00b      	b.n	8015390 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8015378:	2000      	movs	r0, #0
 801537a:	f7ff fc95 	bl	8014ca8 <OTP_Read>
 801537e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	2b00      	cmp	r3, #0
 8015384:	d002      	beq.n	801538c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	617b      	str	r3, [r7, #20]
 801538a:	e001      	b.n	8015390 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 801538c:	4b04      	ldr	r3, [pc, #16]	@ (80153a0 <BleGetBdAddress+0x84>)
 801538e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8015390:	697b      	ldr	r3, [r7, #20]
}
 8015392:	4618      	mov	r0, r3
 8015394:	3718      	adds	r7, #24
 8015396:	46bd      	mov	sp, r7
 8015398:	bd80      	pop	{r7, pc}
 801539a:	bf00      	nop
 801539c:	20000abc 	.word	0x20000abc
 80153a0:	0801c0c4 	.word	0x0801c0c4

080153a4 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 80153a4:	b580      	push	{r7, lr}
 80153a6:	b082      	sub	sp, #8
 80153a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80153aa:	4b0a      	ldr	r3, [pc, #40]	@ (80153d4 <Adv_Cancel+0x30>)
 80153ac:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80153b0:	2b05      	cmp	r3, #5
 80153b2:	d00a      	beq.n	80153ca <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80153b4:	2392      	movs	r3, #146	@ 0x92
 80153b6:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 80153b8:	f7fd fc02 	bl	8012bc0 <aci_gap_set_non_discoverable>
 80153bc:	4603      	mov	r3, r0
 80153be:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80153c0:	4b04      	ldr	r3, [pc, #16]	@ (80153d4 <Adv_Cancel+0x30>)
 80153c2:	2200      	movs	r2, #0
 80153c4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 80153c8:	bf00      	nop
 80153ca:	bf00      	nop
}
 80153cc:	3708      	adds	r7, #8
 80153ce:	46bd      	mov	sp, r7
 80153d0:	bd80      	pop	{r7, pc}
 80153d2:	bf00      	nop
 80153d4:	20000ac4 	.word	0x20000ac4

080153d8 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80153d8:	b580      	push	{r7, lr}
 80153da:	b082      	sub	sp, #8
 80153dc:	af00      	add	r7, sp, #0
 80153de:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80153e0:	2100      	movs	r1, #0
 80153e2:	2002      	movs	r0, #2
 80153e4:	f002 fcaa 	bl	8017d3c <UTIL_SEQ_SetTask>

  return;
 80153e8:	bf00      	nop
}
 80153ea:	3708      	adds	r7, #8
 80153ec:	46bd      	mov	sp, r7
 80153ee:	bd80      	pop	{r7, pc}

080153f0 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80153f0:	b580      	push	{r7, lr}
 80153f2:	b082      	sub	sp, #8
 80153f4:	af00      	add	r7, sp, #0
 80153f6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80153f8:	2001      	movs	r0, #1
 80153fa:	f002 fd0b 	bl	8017e14 <UTIL_SEQ_SetEvt>

  return;
 80153fe:	bf00      	nop
}
 8015400:	3708      	adds	r7, #8
 8015402:	46bd      	mov	sp, r7
 8015404:	bd80      	pop	{r7, pc}

08015406 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8015406:	b580      	push	{r7, lr}
 8015408:	b082      	sub	sp, #8
 801540a:	af00      	add	r7, sp, #0
 801540c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 801540e:	2001      	movs	r0, #1
 8015410:	f002 fd20 	bl	8017e54 <UTIL_SEQ_WaitEvt>

  return;
 8015414:	bf00      	nop
}
 8015416:	3708      	adds	r7, #8
 8015418:	46bd      	mov	sp, r7
 801541a:	bd80      	pop	{r7, pc}

0801541c <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 801541c:	b580      	push	{r7, lr}
 801541e:	b084      	sub	sp, #16
 8015420:	af00      	add	r7, sp, #0
 8015422:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	685b      	ldr	r3, [r3, #4]
 801542c:	3308      	adds	r3, #8
 801542e:	4618      	mov	r0, r3
 8015430:	f7fe fdd8 	bl	8013fe4 <SVCCTL_UserEvtRx>
 8015434:	4603      	mov	r3, r0
 8015436:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8015438:	7afb      	ldrb	r3, [r7, #11]
 801543a:	2b00      	cmp	r3, #0
 801543c:	d003      	beq.n	8015446 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	2201      	movs	r2, #1
 8015442:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8015444:	e003      	b.n	801544e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	2200      	movs	r2, #0
 801544a:	701a      	strb	r2, [r3, #0]
  return;
 801544c:	bf00      	nop
}
 801544e:	3710      	adds	r7, #16
 8015450:	46bd      	mov	sp, r7
 8015452:	bd80      	pop	{r7, pc}

08015454 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8015454:	b580      	push	{r7, lr}
 8015456:	b084      	sub	sp, #16
 8015458:	af00      	add	r7, sp, #0
 801545a:	4603      	mov	r3, r0
 801545c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 801545e:	79fb      	ldrb	r3, [r7, #7]
 8015460:	2b00      	cmp	r3, #0
 8015462:	d002      	beq.n	801546a <BLE_StatusNot+0x16>
 8015464:	2b01      	cmp	r3, #1
 8015466:	d006      	beq.n	8015476 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8015468:	e00b      	b.n	8015482 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 801546a:	2307      	movs	r3, #7
 801546c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 801546e:	68f8      	ldr	r0, [r7, #12]
 8015470:	f002 fc90 	bl	8017d94 <UTIL_SEQ_PauseTask>
      break;
 8015474:	e005      	b.n	8015482 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8015476:	2307      	movs	r3, #7
 8015478:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 801547a:	68f8      	ldr	r0, [r7, #12]
 801547c:	f002 fcaa 	bl	8017dd4 <UTIL_SEQ_ResumeTask>
      break;
 8015480:	bf00      	nop
  }

  return;
 8015482:	bf00      	nop
}
 8015484:	3710      	adds	r7, #16
 8015486:	46bd      	mov	sp, r7
 8015488:	bd80      	pop	{r7, pc}
	...

0801548c <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 801548c:	b480      	push	{r7}
 801548e:	b083      	sub	sp, #12
 8015490:	af00      	add	r7, sp, #0
 8015492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	781b      	ldrb	r3, [r3, #0]
 8015498:	2b07      	cmp	r3, #7
 801549a:	d813      	bhi.n	80154c4 <Custom_STM_App_Notification+0x38>
 801549c:	a201      	add	r2, pc, #4	@ (adr r2, 80154a4 <Custom_STM_App_Notification+0x18>)
 801549e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80154a2:	bf00      	nop
 80154a4:	080154c5 	.word	0x080154c5
 80154a8:	080154c5 	.word	0x080154c5
 80154ac:	080154c5 	.word	0x080154c5
 80154b0:	080154c5 	.word	0x080154c5
 80154b4:	080154c5 	.word	0x080154c5
 80154b8:	080154c5 	.word	0x080154c5
 80154bc:	080154c5 	.word	0x080154c5
 80154c0:	080154c5 	.word	0x080154c5

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 80154c4:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 80154c6:	bf00      	nop
}
 80154c8:	370c      	adds	r7, #12
 80154ca:	46bd      	mov	sp, r7
 80154cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154d0:	4770      	bx	lr
 80154d2:	bf00      	nop

080154d4 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 80154d4:	b480      	push	{r7}
 80154d6:	b083      	sub	sp, #12
 80154d8:	af00      	add	r7, sp, #0
 80154da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	781b      	ldrb	r3, [r3, #0]
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d002      	beq.n	80154ea <Custom_APP_Notification+0x16>
 80154e4:	2b01      	cmp	r3, #1
 80154e6:	d002      	beq.n	80154ee <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 80154e8:	e002      	b.n	80154f0 <Custom_APP_Notification+0x1c>
      break;
 80154ea:	bf00      	nop
 80154ec:	e000      	b.n	80154f0 <Custom_APP_Notification+0x1c>
      break;
 80154ee:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 80154f0:	bf00      	nop
}
 80154f2:	370c      	adds	r7, #12
 80154f4:	46bd      	mov	sp, r7
 80154f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154fa:	4770      	bx	lr

080154fc <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 80154fc:	b480      	push	{r7}
 80154fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8015500:	bf00      	nop
}
 8015502:	46bd      	mov	sp, r7
 8015504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015508:	4770      	bx	lr
	...

0801550c <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 801550c:	b580      	push	{r7, lr}
 801550e:	b08c      	sub	sp, #48	@ 0x30
 8015510:	af00      	add	r7, sp, #0
 8015512:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8015514:	2300      	movs	r3, #0
 8015516:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	3301      	adds	r3, #1
 801551e:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 8015520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015522:	781b      	ldrb	r3, [r3, #0]
 8015524:	2bff      	cmp	r3, #255	@ 0xff
 8015526:	f040 80bc 	bne.w	80156a2 <Custom_STM_Event_Handler+0x196>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 801552a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801552c:	3302      	adds	r3, #2
 801552e:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 8015530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015532:	881b      	ldrh	r3, [r3, #0]
 8015534:	b29b      	uxth	r3, r3
 8015536:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 801553a:	2b1a      	cmp	r3, #26
 801553c:	f200 80ad 	bhi.w	801569a <Custom_STM_Event_Handler+0x18e>
 8015540:	a201      	add	r2, pc, #4	@ (adr r2, 8015548 <Custom_STM_Event_Handler+0x3c>)
 8015542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015546:	bf00      	nop
 8015548:	080155b5 	.word	0x080155b5
 801554c:	0801569b 	.word	0x0801569b
 8015550:	0801569b 	.word	0x0801569b
 8015554:	0801569b 	.word	0x0801569b
 8015558:	0801569b 	.word	0x0801569b
 801555c:	0801569b 	.word	0x0801569b
 8015560:	0801569b 	.word	0x0801569b
 8015564:	0801569b 	.word	0x0801569b
 8015568:	0801569b 	.word	0x0801569b
 801556c:	0801569b 	.word	0x0801569b
 8015570:	0801569b 	.word	0x0801569b
 8015574:	0801569b 	.word	0x0801569b
 8015578:	0801569b 	.word	0x0801569b
 801557c:	0801569b 	.word	0x0801569b
 8015580:	0801569b 	.word	0x0801569b
 8015584:	0801569b 	.word	0x0801569b
 8015588:	0801569b 	.word	0x0801569b
 801558c:	0801569b 	.word	0x0801569b
 8015590:	0801569b 	.word	0x0801569b
 8015594:	0801569b 	.word	0x0801569b
 8015598:	0801569b 	.word	0x0801569b
 801559c:	0801569b 	.word	0x0801569b
 80155a0:	0801569b 	.word	0x0801569b
 80155a4:	0801569b 	.word	0x0801569b
 80155a8:	0801569b 	.word	0x0801569b
 80155ac:	0801569b 	.word	0x0801569b
 80155b0:	0801567d 	.word	0x0801567d
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 80155b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155b6:	3302      	adds	r3, #2
 80155b8:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomSwitch_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 80155ba:	69fb      	ldr	r3, [r7, #28]
 80155bc:	885b      	ldrh	r3, [r3, #2]
 80155be:	b29b      	uxth	r3, r3
 80155c0:	461a      	mov	r2, r3
 80155c2:	4b3b      	ldr	r3, [pc, #236]	@ (80156b0 <Custom_STM_Event_Handler+0x1a4>)
 80155c4:	889b      	ldrh	r3, [r3, #4]
 80155c6:	3302      	adds	r3, #2
 80155c8:	429a      	cmp	r2, r3
 80155ca:	d119      	bne.n	8015600 <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80155cc:	2301      	movs	r3, #1
 80155ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 80155d2:	69fb      	ldr	r3, [r7, #28]
 80155d4:	7a1b      	ldrb	r3, [r3, #8]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d002      	beq.n	80155e0 <Custom_STM_Event_Handler+0xd4>
 80155da:	2b01      	cmp	r3, #1
 80155dc:	d008      	beq.n	80155f0 <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 80155de:	e04c      	b.n	801567a <Custom_STM_Event_Handler+0x16e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT;
 80155e0:	2303      	movs	r3, #3
 80155e2:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80155e4:	f107 0308 	add.w	r3, r7, #8
 80155e8:	4618      	mov	r0, r3
 80155ea:	f7ff ff4f 	bl	801548c <Custom_STM_App_Notification>
                break;
 80155ee:	e044      	b.n	801567a <Custom_STM_Event_Handler+0x16e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT;
 80155f0:	2302      	movs	r3, #2
 80155f2:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80155f4:	f107 0308 	add.w	r3, r7, #8
 80155f8:	4618      	mov	r0, r3
 80155fa:	f7ff ff47 	bl	801548c <Custom_STM_App_Notification>
                break;
 80155fe:	e03c      	b.n	801567a <Custom_STM_Event_Handler+0x16e>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomSwitch_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomDelta_T_ChHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8015600:	69fb      	ldr	r3, [r7, #28]
 8015602:	885b      	ldrh	r3, [r3, #2]
 8015604:	b29b      	uxth	r3, r3
 8015606:	461a      	mov	r2, r3
 8015608:	4b29      	ldr	r3, [pc, #164]	@ (80156b0 <Custom_STM_Event_Handler+0x1a4>)
 801560a:	891b      	ldrh	r3, [r3, #8]
 801560c:	3302      	adds	r3, #2
 801560e:	429a      	cmp	r2, r3
 8015610:	d119      	bne.n	8015646 <Custom_STM_Event_Handler+0x13a>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8015612:	2301      	movs	r3, #1
 8015614:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_4 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_4 */
            switch (attribute_modified->Attr_Data[0])
 8015618:	69fb      	ldr	r3, [r7, #28]
 801561a:	7a1b      	ldrb	r3, [r3, #8]
 801561c:	2b00      	cmp	r3, #0
 801561e:	d002      	beq.n	8015626 <Custom_STM_Event_Handler+0x11a>
 8015620:	2b01      	cmp	r3, #1
 8015622:	d008      	beq.n	8015636 <Custom_STM_Event_Handler+0x12a>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_4_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_4_default */
              break;
 8015624:	e029      	b.n	801567a <Custom_STM_Event_Handler+0x16e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_DELTA_T_CH_NOTIFY_DISABLED_EVT;
 8015626:	2306      	movs	r3, #6
 8015628:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 801562a:	f107 0308 	add.w	r3, r7, #8
 801562e:	4618      	mov	r0, r3
 8015630:	f7ff ff2c 	bl	801548c <Custom_STM_App_Notification>
                break;
 8015634:	e021      	b.n	801567a <Custom_STM_Event_Handler+0x16e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_DELTA_T_CH_NOTIFY_ENABLED_EVT;
 8015636:	2305      	movs	r3, #5
 8015638:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 801563a:	f107 0308 	add.w	r3, r7, #8
 801563e:	4618      	mov	r0, r3
 8015640:	f7ff ff24 	bl	801548c <Custom_STM_App_Notification>
                break;
 8015644:	e019      	b.n	801567a <Custom_STM_Event_Handler+0x16e>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomDelta_T_ChHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomLed_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8015646:	69fb      	ldr	r3, [r7, #28]
 8015648:	885b      	ldrh	r3, [r3, #2]
 801564a:	b29b      	uxth	r3, r3
 801564c:	461a      	mov	r2, r3
 801564e:	4b18      	ldr	r3, [pc, #96]	@ (80156b0 <Custom_STM_Event_Handler+0x1a4>)
 8015650:	885b      	ldrh	r3, [r3, #2]
 8015652:	3301      	adds	r3, #1
 8015654:	429a      	cmp	r2, r3
 8015656:	d103      	bne.n	8015660 <Custom_STM_Event_Handler+0x154>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8015658:	2301      	movs	r3, #1
 801565a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE END CUSTOM_STM_Service_1_Char_3_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomReboot_Request_ChHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 801565e:	e01e      	b.n	801569e <Custom_STM_Event_Handler+0x192>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomReboot_Request_ChHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8015660:	69fb      	ldr	r3, [r7, #28]
 8015662:	885b      	ldrh	r3, [r3, #2]
 8015664:	b29b      	uxth	r3, r3
 8015666:	461a      	mov	r2, r3
 8015668:	4b11      	ldr	r3, [pc, #68]	@ (80156b0 <Custom_STM_Event_Handler+0x1a4>)
 801566a:	88db      	ldrh	r3, [r3, #6]
 801566c:	3301      	adds	r3, #1
 801566e:	429a      	cmp	r2, r3
 8015670:	d115      	bne.n	801569e <Custom_STM_Event_Handler+0x192>
            return_value = SVCCTL_EvtAckFlowEnable;
 8015672:	2301      	movs	r3, #1
 8015674:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8015678:	e011      	b.n	801569e <Custom_STM_Event_Handler+0x192>
 801567a:	e010      	b.n	801569e <Custom_STM_Event_Handler+0x192>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 801567c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801567e:	3302      	adds	r3, #2
 8015680:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8015682:	2307      	movs	r3, #7
 8015684:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8015686:	6a3b      	ldr	r3, [r7, #32]
 8015688:	881b      	ldrh	r3, [r3, #0]
 801568a:	b29b      	uxth	r3, r3
 801568c:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 801568e:	f107 0308 	add.w	r3, r7, #8
 8015692:	4618      	mov	r0, r3
 8015694:	f7ff fefa 	bl	801548c <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8015698:	e002      	b.n	80156a0 <Custom_STM_Event_Handler+0x194>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 801569a:	bf00      	nop
 801569c:	e002      	b.n	80156a4 <Custom_STM_Event_Handler+0x198>
          break;
 801569e:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80156a0:	e000      	b.n	80156a4 <Custom_STM_Event_Handler+0x198>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 80156a2:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 80156a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 80156a8:	4618      	mov	r0, r3
 80156aa:	3730      	adds	r7, #48	@ 0x30
 80156ac:	46bd      	mov	sp, r7
 80156ae:	bd80      	pop	{r7, pc}
 80156b0:	20000b4c 	.word	0x20000b4c

080156b4 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 80156b4:	b580      	push	{r7, lr}
 80156b6:	b08c      	sub	sp, #48	@ 0x30
 80156b8:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80156ba:	2392      	movs	r3, #146	@ 0x92
 80156bc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 80156be:	4885      	ldr	r0, [pc, #532]	@ (80158d4 <SVCCTL_InitCustomSvc+0x220>)
 80156c0:	f7fe fc76 	bl	8013fb0 <SVCCTL_RegisterSvcHandler>
   *                              = 12
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 12;
 80156c4:	230c      	movs	r3, #12
 80156c6:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService1 */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService1 */

  COPY_MY_P2P_SERVER_UUID(uuid.Char_UUID_128);
 80156c8:	238f      	movs	r3, #143	@ 0x8f
 80156ca:	713b      	strb	r3, [r7, #4]
 80156cc:	23e5      	movs	r3, #229	@ 0xe5
 80156ce:	717b      	strb	r3, [r7, #5]
 80156d0:	23b3      	movs	r3, #179	@ 0xb3
 80156d2:	71bb      	strb	r3, [r7, #6]
 80156d4:	23d5      	movs	r3, #213	@ 0xd5
 80156d6:	71fb      	strb	r3, [r7, #7]
 80156d8:	232e      	movs	r3, #46	@ 0x2e
 80156da:	723b      	strb	r3, [r7, #8]
 80156dc:	237f      	movs	r3, #127	@ 0x7f
 80156de:	727b      	strb	r3, [r7, #9]
 80156e0:	234a      	movs	r3, #74	@ 0x4a
 80156e2:	72bb      	strb	r3, [r7, #10]
 80156e4:	2398      	movs	r3, #152	@ 0x98
 80156e6:	72fb      	strb	r3, [r7, #11]
 80156e8:	232a      	movs	r3, #42	@ 0x2a
 80156ea:	733b      	strb	r3, [r7, #12]
 80156ec:	2348      	movs	r3, #72	@ 0x48
 80156ee:	737b      	strb	r3, [r7, #13]
 80156f0:	237a      	movs	r3, #122	@ 0x7a
 80156f2:	73bb      	strb	r3, [r7, #14]
 80156f4:	23cc      	movs	r3, #204	@ 0xcc
 80156f6:	73fb      	strb	r3, [r7, #15]
 80156f8:	2340      	movs	r3, #64	@ 0x40
 80156fa:	743b      	strb	r3, [r7, #16]
 80156fc:	23fe      	movs	r3, #254	@ 0xfe
 80156fe:	747b      	strb	r3, [r7, #17]
 8015700:	2300      	movs	r3, #0
 8015702:	74bb      	strb	r3, [r7, #18]
 8015704:	2300      	movs	r3, #0
 8015706:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8015708:	7dbb      	ldrb	r3, [r7, #22]
 801570a:	1d39      	adds	r1, r7, #4
 801570c:	4a72      	ldr	r2, [pc, #456]	@ (80158d8 <SVCCTL_InitCustomSvc+0x224>)
 801570e:	9200      	str	r2, [sp, #0]
 8015710:	2201      	movs	r2, #1
 8015712:	2002      	movs	r0, #2
 8015714:	f7fd fec0 	bl	8013498 <aci_gatt_add_service>
 8015718:	4603      	mov	r3, r0
 801571a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  My_LED_Char
   */
  COPY_MY_LED_CHAR_UUID(uuid.Char_UUID_128);
 801571c:	2319      	movs	r3, #25
 801571e:	713b      	strb	r3, [r7, #4]
 8015720:	23ed      	movs	r3, #237	@ 0xed
 8015722:	717b      	strb	r3, [r7, #5]
 8015724:	2382      	movs	r3, #130	@ 0x82
 8015726:	71bb      	strb	r3, [r7, #6]
 8015728:	23ae      	movs	r3, #174	@ 0xae
 801572a:	71fb      	strb	r3, [r7, #7]
 801572c:	23ed      	movs	r3, #237	@ 0xed
 801572e:	723b      	strb	r3, [r7, #8]
 8015730:	2321      	movs	r3, #33	@ 0x21
 8015732:	727b      	strb	r3, [r7, #9]
 8015734:	234c      	movs	r3, #76	@ 0x4c
 8015736:	72bb      	strb	r3, [r7, #10]
 8015738:	239d      	movs	r3, #157	@ 0x9d
 801573a:	72fb      	strb	r3, [r7, #11]
 801573c:	2341      	movs	r3, #65	@ 0x41
 801573e:	733b      	strb	r3, [r7, #12]
 8015740:	2345      	movs	r3, #69	@ 0x45
 8015742:	737b      	strb	r3, [r7, #13]
 8015744:	2322      	movs	r3, #34	@ 0x22
 8015746:	73bb      	strb	r3, [r7, #14]
 8015748:	238e      	movs	r3, #142	@ 0x8e
 801574a:	73fb      	strb	r3, [r7, #15]
 801574c:	2341      	movs	r3, #65	@ 0x41
 801574e:	743b      	strb	r3, [r7, #16]
 8015750:	23fe      	movs	r3, #254	@ 0xfe
 8015752:	747b      	strb	r3, [r7, #17]
 8015754:	2300      	movs	r3, #0
 8015756:	74bb      	strb	r3, [r7, #18]
 8015758:	2300      	movs	r3, #0
 801575a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomP2PsHdle,
 801575c:	4b5e      	ldr	r3, [pc, #376]	@ (80158d8 <SVCCTL_InitCustomSvc+0x224>)
 801575e:	8818      	ldrh	r0, [r3, #0]
 8015760:	4b5e      	ldr	r3, [pc, #376]	@ (80158dc <SVCCTL_InitCustomSvc+0x228>)
 8015762:	881b      	ldrh	r3, [r3, #0]
 8015764:	1d3a      	adds	r2, r7, #4
 8015766:	495e      	ldr	r1, [pc, #376]	@ (80158e0 <SVCCTL_InitCustomSvc+0x22c>)
 8015768:	9105      	str	r1, [sp, #20]
 801576a:	2101      	movs	r1, #1
 801576c:	9104      	str	r1, [sp, #16]
 801576e:	2110      	movs	r1, #16
 8015770:	9103      	str	r1, [sp, #12]
 8015772:	2101      	movs	r1, #1
 8015774:	9102      	str	r1, [sp, #8]
 8015776:	2100      	movs	r1, #0
 8015778:	9101      	str	r1, [sp, #4]
 801577a:	2106      	movs	r1, #6
 801577c:	9100      	str	r1, [sp, #0]
 801577e:	2102      	movs	r1, #2
 8015780:	f7fd ff60 	bl	8013644 <aci_gatt_add_char>
 8015784:	4603      	mov	r3, r0
 8015786:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  My_Switch_Char
   */
  COPY_MY_SWITCH_CHAR_UUID(uuid.Char_UUID_128);
 8015788:	2319      	movs	r3, #25
 801578a:	713b      	strb	r3, [r7, #4]
 801578c:	23ed      	movs	r3, #237	@ 0xed
 801578e:	717b      	strb	r3, [r7, #5]
 8015790:	2382      	movs	r3, #130	@ 0x82
 8015792:	71bb      	strb	r3, [r7, #6]
 8015794:	23ae      	movs	r3, #174	@ 0xae
 8015796:	71fb      	strb	r3, [r7, #7]
 8015798:	23ed      	movs	r3, #237	@ 0xed
 801579a:	723b      	strb	r3, [r7, #8]
 801579c:	2321      	movs	r3, #33	@ 0x21
 801579e:	727b      	strb	r3, [r7, #9]
 80157a0:	234c      	movs	r3, #76	@ 0x4c
 80157a2:	72bb      	strb	r3, [r7, #10]
 80157a4:	239d      	movs	r3, #157	@ 0x9d
 80157a6:	72fb      	strb	r3, [r7, #11]
 80157a8:	2341      	movs	r3, #65	@ 0x41
 80157aa:	733b      	strb	r3, [r7, #12]
 80157ac:	2345      	movs	r3, #69	@ 0x45
 80157ae:	737b      	strb	r3, [r7, #13]
 80157b0:	2322      	movs	r3, #34	@ 0x22
 80157b2:	73bb      	strb	r3, [r7, #14]
 80157b4:	238e      	movs	r3, #142	@ 0x8e
 80157b6:	73fb      	strb	r3, [r7, #15]
 80157b8:	2342      	movs	r3, #66	@ 0x42
 80157ba:	743b      	strb	r3, [r7, #16]
 80157bc:	23fe      	movs	r3, #254	@ 0xfe
 80157be:	747b      	strb	r3, [r7, #17]
 80157c0:	2300      	movs	r3, #0
 80157c2:	74bb      	strb	r3, [r7, #18]
 80157c4:	2300      	movs	r3, #0
 80157c6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomP2PsHdle,
 80157c8:	4b43      	ldr	r3, [pc, #268]	@ (80158d8 <SVCCTL_InitCustomSvc+0x224>)
 80157ca:	8818      	ldrh	r0, [r3, #0]
 80157cc:	4b45      	ldr	r3, [pc, #276]	@ (80158e4 <SVCCTL_InitCustomSvc+0x230>)
 80157ce:	881b      	ldrh	r3, [r3, #0]
 80157d0:	1d3a      	adds	r2, r7, #4
 80157d2:	4945      	ldr	r1, [pc, #276]	@ (80158e8 <SVCCTL_InitCustomSvc+0x234>)
 80157d4:	9105      	str	r1, [sp, #20]
 80157d6:	2101      	movs	r1, #1
 80157d8:	9104      	str	r1, [sp, #16]
 80157da:	2110      	movs	r1, #16
 80157dc:	9103      	str	r1, [sp, #12]
 80157de:	2101      	movs	r1, #1
 80157e0:	9102      	str	r1, [sp, #8]
 80157e2:	2100      	movs	r1, #0
 80157e4:	9101      	str	r1, [sp, #4]
 80157e6:	2110      	movs	r1, #16
 80157e8:	9100      	str	r1, [sp, #0]
 80157ea:	2102      	movs	r1, #2
 80157ec:	f7fd ff2a 	bl	8013644 <aci_gatt_add_char>
 80157f0:	4603      	mov	r3, r0
 80157f2:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char2 */
  /**
   *  REBOOT_REQUEST_CHAR
   */
  COPY_REBOOT_REQUEST_CHAR_UUID(uuid.Char_UUID_128);
 80157f4:	2319      	movs	r3, #25
 80157f6:	713b      	strb	r3, [r7, #4]
 80157f8:	23ed      	movs	r3, #237	@ 0xed
 80157fa:	717b      	strb	r3, [r7, #5]
 80157fc:	2382      	movs	r3, #130	@ 0x82
 80157fe:	71bb      	strb	r3, [r7, #6]
 8015800:	23ae      	movs	r3, #174	@ 0xae
 8015802:	71fb      	strb	r3, [r7, #7]
 8015804:	23ed      	movs	r3, #237	@ 0xed
 8015806:	723b      	strb	r3, [r7, #8]
 8015808:	2321      	movs	r3, #33	@ 0x21
 801580a:	727b      	strb	r3, [r7, #9]
 801580c:	234c      	movs	r3, #76	@ 0x4c
 801580e:	72bb      	strb	r3, [r7, #10]
 8015810:	239d      	movs	r3, #157	@ 0x9d
 8015812:	72fb      	strb	r3, [r7, #11]
 8015814:	2341      	movs	r3, #65	@ 0x41
 8015816:	733b      	strb	r3, [r7, #12]
 8015818:	2345      	movs	r3, #69	@ 0x45
 801581a:	737b      	strb	r3, [r7, #13]
 801581c:	2322      	movs	r3, #34	@ 0x22
 801581e:	73bb      	strb	r3, [r7, #14]
 8015820:	238e      	movs	r3, #142	@ 0x8e
 8015822:	73fb      	strb	r3, [r7, #15]
 8015824:	2311      	movs	r3, #17
 8015826:	743b      	strb	r3, [r7, #16]
 8015828:	23fe      	movs	r3, #254	@ 0xfe
 801582a:	747b      	strb	r3, [r7, #17]
 801582c:	2300      	movs	r3, #0
 801582e:	74bb      	strb	r3, [r7, #18]
 8015830:	2300      	movs	r3, #0
 8015832:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomP2PsHdle,
 8015834:	4b28      	ldr	r3, [pc, #160]	@ (80158d8 <SVCCTL_InitCustomSvc+0x224>)
 8015836:	8818      	ldrh	r0, [r3, #0]
 8015838:	4b2c      	ldr	r3, [pc, #176]	@ (80158ec <SVCCTL_InitCustomSvc+0x238>)
 801583a:	881b      	ldrh	r3, [r3, #0]
 801583c:	1d3a      	adds	r2, r7, #4
 801583e:	492c      	ldr	r1, [pc, #176]	@ (80158f0 <SVCCTL_InitCustomSvc+0x23c>)
 8015840:	9105      	str	r1, [sp, #20]
 8015842:	2101      	movs	r1, #1
 8015844:	9104      	str	r1, [sp, #16]
 8015846:	2110      	movs	r1, #16
 8015848:	9103      	str	r1, [sp, #12]
 801584a:	2101      	movs	r1, #1
 801584c:	9102      	str	r1, [sp, #8]
 801584e:	2100      	movs	r1, #0
 8015850:	9101      	str	r1, [sp, #4]
 8015852:	2104      	movs	r1, #4
 8015854:	9100      	str	r1, [sp, #0]
 8015856:	2102      	movs	r1, #2
 8015858:	f7fd fef4 	bl	8013644 <aci_gatt_add_char>
 801585c:	4603      	mov	r3, r0
 801585e:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char3 */
  /**
   *  DELTA_T_CHAR
   */
  COPY_DELTA_T_CHAR_UUID(uuid.Char_UUID_128);
 8015860:	2319      	movs	r3, #25
 8015862:	713b      	strb	r3, [r7, #4]
 8015864:	23ed      	movs	r3, #237	@ 0xed
 8015866:	717b      	strb	r3, [r7, #5]
 8015868:	2382      	movs	r3, #130	@ 0x82
 801586a:	71bb      	strb	r3, [r7, #6]
 801586c:	23ae      	movs	r3, #174	@ 0xae
 801586e:	71fb      	strb	r3, [r7, #7]
 8015870:	23ed      	movs	r3, #237	@ 0xed
 8015872:	723b      	strb	r3, [r7, #8]
 8015874:	2321      	movs	r3, #33	@ 0x21
 8015876:	727b      	strb	r3, [r7, #9]
 8015878:	234c      	movs	r3, #76	@ 0x4c
 801587a:	72bb      	strb	r3, [r7, #10]
 801587c:	239d      	movs	r3, #157	@ 0x9d
 801587e:	72fb      	strb	r3, [r7, #11]
 8015880:	2341      	movs	r3, #65	@ 0x41
 8015882:	733b      	strb	r3, [r7, #12]
 8015884:	2345      	movs	r3, #69	@ 0x45
 8015886:	737b      	strb	r3, [r7, #13]
 8015888:	2322      	movs	r3, #34	@ 0x22
 801588a:	73bb      	strb	r3, [r7, #14]
 801588c:	238e      	movs	r3, #142	@ 0x8e
 801588e:	73fb      	strb	r3, [r7, #15]
 8015890:	2343      	movs	r3, #67	@ 0x43
 8015892:	743b      	strb	r3, [r7, #16]
 8015894:	23fe      	movs	r3, #254	@ 0xfe
 8015896:	747b      	strb	r3, [r7, #17]
 8015898:	2300      	movs	r3, #0
 801589a:	74bb      	strb	r3, [r7, #18]
 801589c:	2300      	movs	r3, #0
 801589e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomP2PsHdle,
 80158a0:	4b0d      	ldr	r3, [pc, #52]	@ (80158d8 <SVCCTL_InitCustomSvc+0x224>)
 80158a2:	8818      	ldrh	r0, [r3, #0]
 80158a4:	4b13      	ldr	r3, [pc, #76]	@ (80158f4 <SVCCTL_InitCustomSvc+0x240>)
 80158a6:	881b      	ldrh	r3, [r3, #0]
 80158a8:	1d3a      	adds	r2, r7, #4
 80158aa:	4913      	ldr	r1, [pc, #76]	@ (80158f8 <SVCCTL_InitCustomSvc+0x244>)
 80158ac:	9105      	str	r1, [sp, #20]
 80158ae:	2101      	movs	r1, #1
 80158b0:	9104      	str	r1, [sp, #16]
 80158b2:	2110      	movs	r1, #16
 80158b4:	9103      	str	r1, [sp, #12]
 80158b6:	2100      	movs	r1, #0
 80158b8:	9102      	str	r1, [sp, #8]
 80158ba:	2100      	movs	r1, #0
 80158bc:	9101      	str	r1, [sp, #4]
 80158be:	2111      	movs	r1, #17
 80158c0:	9100      	str	r1, [sp, #0]
 80158c2:	2102      	movs	r1, #2
 80158c4:	f7fd febe 	bl	8013644 <aci_gatt_add_char>
 80158c8:	4603      	mov	r3, r0
 80158ca:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 80158cc:	bf00      	nop
}
 80158ce:	3718      	adds	r7, #24
 80158d0:	46bd      	mov	sp, r7
 80158d2:	bd80      	pop	{r7, pc}
 80158d4:	0801550d 	.word	0x0801550d
 80158d8:	20000b4c 	.word	0x20000b4c
 80158dc:	200000cc 	.word	0x200000cc
 80158e0:	20000b4e 	.word	0x20000b4e
 80158e4:	200000ce 	.word	0x200000ce
 80158e8:	20000b50 	.word	0x20000b50
 80158ec:	200000d0 	.word	0x200000d0
 80158f0:	20000b52 	.word	0x20000b52
 80158f4:	200000d2 	.word	0x200000d2
 80158f8:	20000b54 	.word	0x20000b54

080158fc <LL_PWR_EnableBootC2>:
{
 80158fc:	b480      	push	{r7}
 80158fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8015900:	4b05      	ldr	r3, [pc, #20]	@ (8015918 <LL_PWR_EnableBootC2+0x1c>)
 8015902:	68db      	ldr	r3, [r3, #12]
 8015904:	4a04      	ldr	r2, [pc, #16]	@ (8015918 <LL_PWR_EnableBootC2+0x1c>)
 8015906:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801590a:	60d3      	str	r3, [r2, #12]
}
 801590c:	bf00      	nop
 801590e:	46bd      	mov	sp, r7
 8015910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015914:	4770      	bx	lr
 8015916:	bf00      	nop
 8015918:	58000400 	.word	0x58000400

0801591c <LL_C2_EXTI_EnableEvent_32_63>:
{
 801591c:	b480      	push	{r7}
 801591e:	b083      	sub	sp, #12
 8015920:	af00      	add	r7, sp, #0
 8015922:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8015924:	4b06      	ldr	r3, [pc, #24]	@ (8015940 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8015926:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 801592a:	4905      	ldr	r1, [pc, #20]	@ (8015940 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	4313      	orrs	r3, r2
 8015930:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8015934:	bf00      	nop
 8015936:	370c      	adds	r7, #12
 8015938:	46bd      	mov	sp, r7
 801593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801593e:	4770      	bx	lr
 8015940:	58000800 	.word	0x58000800

08015944 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8015944:	b480      	push	{r7}
 8015946:	b083      	sub	sp, #12
 8015948:	af00      	add	r7, sp, #0
 801594a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 801594c:	4b05      	ldr	r3, [pc, #20]	@ (8015964 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 801594e:	6a1a      	ldr	r2, [r3, #32]
 8015950:	4904      	ldr	r1, [pc, #16]	@ (8015964 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	4313      	orrs	r3, r2
 8015956:	620b      	str	r3, [r1, #32]
}
 8015958:	bf00      	nop
 801595a:	370c      	adds	r7, #12
 801595c:	46bd      	mov	sp, r7
 801595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015962:	4770      	bx	lr
 8015964:	58000800 	.word	0x58000800

08015968 <LL_AHB3_GRP1_EnableClock>:
{
 8015968:	b480      	push	{r7}
 801596a:	b085      	sub	sp, #20
 801596c:	af00      	add	r7, sp, #0
 801596e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8015970:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015974:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015976:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	4313      	orrs	r3, r2
 801597e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8015980:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015984:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	4013      	ands	r3, r2
 801598a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801598c:	68fb      	ldr	r3, [r7, #12]
}
 801598e:	bf00      	nop
 8015990:	3714      	adds	r7, #20
 8015992:	46bd      	mov	sp, r7
 8015994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015998:	4770      	bx	lr

0801599a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 801599a:	b480      	push	{r7}
 801599c:	b085      	sub	sp, #20
 801599e:	af00      	add	r7, sp, #0
 80159a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80159a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80159a6:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80159aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	4313      	orrs	r3, r2
 80159b2:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80159b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80159ba:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	4013      	ands	r3, r2
 80159c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80159c4:	68fb      	ldr	r3, [r7, #12]
}
 80159c6:	bf00      	nop
 80159c8:	3714      	adds	r7, #20
 80159ca:	46bd      	mov	sp, r7
 80159cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159d0:	4770      	bx	lr

080159d2 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 80159d2:	b480      	push	{r7}
 80159d4:	b083      	sub	sp, #12
 80159d6:	af00      	add	r7, sp, #0
 80159d8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	601a      	str	r2, [r3, #0]
}
 80159e6:	bf00      	nop
 80159e8:	370c      	adds	r7, #12
 80159ea:	46bd      	mov	sp, r7
 80159ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159f0:	4770      	bx	lr

080159f2 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 80159f2:	b480      	push	{r7}
 80159f4:	b083      	sub	sp, #12
 80159f6:	af00      	add	r7, sp, #0
 80159f8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	681b      	ldr	r3, [r3, #0]
 80159fe:	f043 0201 	orr.w	r2, r3, #1
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	601a      	str	r2, [r3, #0]
}
 8015a06:	bf00      	nop
 8015a08:	370c      	adds	r7, #12
 8015a0a:	46bd      	mov	sp, r7
 8015a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a10:	4770      	bx	lr

08015a12 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8015a12:	b480      	push	{r7}
 8015a14:	b083      	sub	sp, #12
 8015a16:	af00      	add	r7, sp, #0
 8015a18:	6078      	str	r0, [r7, #4]
 8015a1a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	685a      	ldr	r2, [r3, #4]
 8015a20:	683b      	ldr	r3, [r7, #0]
 8015a22:	041b      	lsls	r3, r3, #16
 8015a24:	43db      	mvns	r3, r3
 8015a26:	401a      	ands	r2, r3
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	605a      	str	r2, [r3, #4]
}
 8015a2c:	bf00      	nop
 8015a2e:	370c      	adds	r7, #12
 8015a30:	46bd      	mov	sp, r7
 8015a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a36:	4770      	bx	lr

08015a38 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8015a38:	b480      	push	{r7}
 8015a3a:	b083      	sub	sp, #12
 8015a3c:	af00      	add	r7, sp, #0
 8015a3e:	6078      	str	r0, [r7, #4]
 8015a40:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	685a      	ldr	r2, [r3, #4]
 8015a46:	683b      	ldr	r3, [r7, #0]
 8015a48:	041b      	lsls	r3, r3, #16
 8015a4a:	431a      	orrs	r2, r3
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	605a      	str	r2, [r3, #4]
}
 8015a50:	bf00      	nop
 8015a52:	370c      	adds	r7, #12
 8015a54:	46bd      	mov	sp, r7
 8015a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a5a:	4770      	bx	lr

08015a5c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8015a5c:	b480      	push	{r7}
 8015a5e:	b083      	sub	sp, #12
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	6078      	str	r0, [r7, #4]
 8015a64:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	685a      	ldr	r2, [r3, #4]
 8015a6a:	683b      	ldr	r3, [r7, #0]
 8015a6c:	43db      	mvns	r3, r3
 8015a6e:	401a      	ands	r2, r3
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	605a      	str	r2, [r3, #4]
}
 8015a74:	bf00      	nop
 8015a76:	370c      	adds	r7, #12
 8015a78:	46bd      	mov	sp, r7
 8015a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a7e:	4770      	bx	lr

08015a80 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8015a80:	b480      	push	{r7}
 8015a82:	b083      	sub	sp, #12
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	6078      	str	r0, [r7, #4]
 8015a88:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	683a      	ldr	r2, [r7, #0]
 8015a8e:	609a      	str	r2, [r3, #8]
}
 8015a90:	bf00      	nop
 8015a92:	370c      	adds	r7, #12
 8015a94:	46bd      	mov	sp, r7
 8015a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a9a:	4770      	bx	lr

08015a9c <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8015a9c:	b480      	push	{r7}
 8015a9e:	b083      	sub	sp, #12
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	6078      	str	r0, [r7, #4]
 8015aa4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8015aa6:	683b      	ldr	r3, [r7, #0]
 8015aa8:	041a      	lsls	r2, r3, #16
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	609a      	str	r2, [r3, #8]
}
 8015aae:	bf00      	nop
 8015ab0:	370c      	adds	r7, #12
 8015ab2:	46bd      	mov	sp, r7
 8015ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ab8:	4770      	bx	lr

08015aba <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8015aba:	b480      	push	{r7}
 8015abc:	b083      	sub	sp, #12
 8015abe:	af00      	add	r7, sp, #0
 8015ac0:	6078      	str	r0, [r7, #4]
 8015ac2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	68da      	ldr	r2, [r3, #12]
 8015ac8:	683b      	ldr	r3, [r7, #0]
 8015aca:	4013      	ands	r3, r2
 8015acc:	683a      	ldr	r2, [r7, #0]
 8015ace:	429a      	cmp	r2, r3
 8015ad0:	d101      	bne.n	8015ad6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8015ad2:	2301      	movs	r3, #1
 8015ad4:	e000      	b.n	8015ad8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8015ad6:	2300      	movs	r3, #0
}
 8015ad8:	4618      	mov	r0, r3
 8015ada:	370c      	adds	r7, #12
 8015adc:	46bd      	mov	sp, r7
 8015ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ae2:	4770      	bx	lr

08015ae4 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8015ae4:	b480      	push	{r7}
 8015ae6:	b083      	sub	sp, #12
 8015ae8:	af00      	add	r7, sp, #0
 8015aea:	6078      	str	r0, [r7, #4]
 8015aec:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	69da      	ldr	r2, [r3, #28]
 8015af2:	683b      	ldr	r3, [r7, #0]
 8015af4:	4013      	ands	r3, r2
 8015af6:	683a      	ldr	r2, [r7, #0]
 8015af8:	429a      	cmp	r2, r3
 8015afa:	d101      	bne.n	8015b00 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8015afc:	2301      	movs	r3, #1
 8015afe:	e000      	b.n	8015b02 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8015b00:	2300      	movs	r3, #0
}
 8015b02:	4618      	mov	r0, r3
 8015b04:	370c      	adds	r7, #12
 8015b06:	46bd      	mov	sp, r7
 8015b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b0c:	4770      	bx	lr
	...

08015b10 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8015b10:	b580      	push	{r7, lr}
 8015b12:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8015b14:	2102      	movs	r1, #2
 8015b16:	4818      	ldr	r0, [pc, #96]	@ (8015b78 <HW_IPCC_Rx_Handler+0x68>)
 8015b18:	f7ff ffe4 	bl	8015ae4 <LL_C2_IPCC_IsActiveFlag_CHx>
 8015b1c:	4603      	mov	r3, r0
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d008      	beq.n	8015b34 <HW_IPCC_Rx_Handler+0x24>
 8015b22:	4b15      	ldr	r3, [pc, #84]	@ (8015b78 <HW_IPCC_Rx_Handler+0x68>)
 8015b24:	685b      	ldr	r3, [r3, #4]
 8015b26:	f003 0302 	and.w	r3, r3, #2
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d102      	bne.n	8015b34 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8015b2e:	f000 f925 	bl	8015d7c <HW_IPCC_SYS_EvtHandler>
 8015b32:	e01e      	b.n	8015b72 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8015b34:	2101      	movs	r1, #1
 8015b36:	4810      	ldr	r0, [pc, #64]	@ (8015b78 <HW_IPCC_Rx_Handler+0x68>)
 8015b38:	f7ff ffd4 	bl	8015ae4 <LL_C2_IPCC_IsActiveFlag_CHx>
 8015b3c:	4603      	mov	r3, r0
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d008      	beq.n	8015b54 <HW_IPCC_Rx_Handler+0x44>
 8015b42:	4b0d      	ldr	r3, [pc, #52]	@ (8015b78 <HW_IPCC_Rx_Handler+0x68>)
 8015b44:	685b      	ldr	r3, [r3, #4]
 8015b46:	f003 0301 	and.w	r3, r3, #1
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d102      	bne.n	8015b54 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8015b4e:	f000 f899 	bl	8015c84 <HW_IPCC_BLE_EvtHandler>
 8015b52:	e00e      	b.n	8015b72 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8015b54:	2108      	movs	r1, #8
 8015b56:	4808      	ldr	r0, [pc, #32]	@ (8015b78 <HW_IPCC_Rx_Handler+0x68>)
 8015b58:	f7ff ffc4 	bl	8015ae4 <LL_C2_IPCC_IsActiveFlag_CHx>
 8015b5c:	4603      	mov	r3, r0
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d008      	beq.n	8015b74 <HW_IPCC_Rx_Handler+0x64>
 8015b62:	4b05      	ldr	r3, [pc, #20]	@ (8015b78 <HW_IPCC_Rx_Handler+0x68>)
 8015b64:	685b      	ldr	r3, [r3, #4]
 8015b66:	f003 0308 	and.w	r3, r3, #8
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d102      	bne.n	8015b74 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8015b6e:	f000 f97d 	bl	8015e6c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8015b72:	bf00      	nop
 8015b74:	bf00      	nop
}
 8015b76:	bd80      	pop	{r7, pc}
 8015b78:	58000c00 	.word	0x58000c00

08015b7c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8015b7c:	b580      	push	{r7, lr}
 8015b7e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8015b80:	2102      	movs	r1, #2
 8015b82:	4818      	ldr	r0, [pc, #96]	@ (8015be4 <HW_IPCC_Tx_Handler+0x68>)
 8015b84:	f7ff ff99 	bl	8015aba <LL_C1_IPCC_IsActiveFlag_CHx>
 8015b88:	4603      	mov	r3, r0
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d108      	bne.n	8015ba0 <HW_IPCC_Tx_Handler+0x24>
 8015b8e:	4b15      	ldr	r3, [pc, #84]	@ (8015be4 <HW_IPCC_Tx_Handler+0x68>)
 8015b90:	685b      	ldr	r3, [r3, #4]
 8015b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d102      	bne.n	8015ba0 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8015b9a:	f000 f8d3 	bl	8015d44 <HW_IPCC_SYS_CmdEvtHandler>
 8015b9e:	e01e      	b.n	8015bde <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8015ba0:	2108      	movs	r1, #8
 8015ba2:	4810      	ldr	r0, [pc, #64]	@ (8015be4 <HW_IPCC_Tx_Handler+0x68>)
 8015ba4:	f7ff ff89 	bl	8015aba <LL_C1_IPCC_IsActiveFlag_CHx>
 8015ba8:	4603      	mov	r3, r0
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d108      	bne.n	8015bc0 <HW_IPCC_Tx_Handler+0x44>
 8015bae:	4b0d      	ldr	r3, [pc, #52]	@ (8015be4 <HW_IPCC_Tx_Handler+0x68>)
 8015bb0:	685b      	ldr	r3, [r3, #4]
 8015bb2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d102      	bne.n	8015bc0 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8015bba:	f000 f919 	bl	8015df0 <HW_IPCC_MM_FreeBufHandler>
 8015bbe:	e00e      	b.n	8015bde <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8015bc0:	2120      	movs	r1, #32
 8015bc2:	4808      	ldr	r0, [pc, #32]	@ (8015be4 <HW_IPCC_Tx_Handler+0x68>)
 8015bc4:	f7ff ff79 	bl	8015aba <LL_C1_IPCC_IsActiveFlag_CHx>
 8015bc8:	4603      	mov	r3, r0
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d108      	bne.n	8015be0 <HW_IPCC_Tx_Handler+0x64>
 8015bce:	4b05      	ldr	r3, [pc, #20]	@ (8015be4 <HW_IPCC_Tx_Handler+0x68>)
 8015bd0:	685b      	ldr	r3, [r3, #4]
 8015bd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d102      	bne.n	8015be0 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8015bda:	f000 f85f 	bl	8015c9c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8015bde:	bf00      	nop
 8015be0:	bf00      	nop
}
 8015be2:	bd80      	pop	{r7, pc}
 8015be4:	58000c00 	.word	0x58000c00

08015be8 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8015be8:	b580      	push	{r7, lr}
 8015bea:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8015bec:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8015bf0:	f7ff fed3 	bl	801599a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8015bf4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8015bf8:	f7ff fea4 	bl	8015944 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8015bfc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8015c00:	f7ff fe8c 	bl	801591c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8015c04:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8015c06:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8015c08:	f7ff fe78 	bl	80158fc <LL_PWR_EnableBootC2>

  return;
 8015c0c:	bf00      	nop
}
 8015c0e:	bd80      	pop	{r7, pc}

08015c10 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8015c10:	b580      	push	{r7, lr}
 8015c12:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8015c14:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8015c18:	f7ff fea6 	bl	8015968 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8015c1c:	4806      	ldr	r0, [pc, #24]	@ (8015c38 <HW_IPCC_Init+0x28>)
 8015c1e:	f7ff fee8 	bl	80159f2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8015c22:	4805      	ldr	r0, [pc, #20]	@ (8015c38 <HW_IPCC_Init+0x28>)
 8015c24:	f7ff fed5 	bl	80159d2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8015c28:	202c      	movs	r0, #44	@ 0x2c
 8015c2a:	f7f1 fc1e 	bl	800746a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8015c2e:	202d      	movs	r0, #45	@ 0x2d
 8015c30:	f7f1 fc1b 	bl	800746a <HAL_NVIC_EnableIRQ>

  return;
 8015c34:	bf00      	nop
}
 8015c36:	bd80      	pop	{r7, pc}
 8015c38:	58000c00 	.word	0x58000c00

08015c3c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8015c3c:	b580      	push	{r7, lr}
 8015c3e:	b084      	sub	sp, #16
 8015c40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015c42:	f3ef 8310 	mrs	r3, PRIMASK
 8015c46:	607b      	str	r3, [r7, #4]
  return(result);
 8015c48:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8015c4a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8015c4c:	b672      	cpsid	i
}
 8015c4e:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8015c50:	2101      	movs	r1, #1
 8015c52:	4806      	ldr	r0, [pc, #24]	@ (8015c6c <HW_IPCC_BLE_Init+0x30>)
 8015c54:	f7ff ff02 	bl	8015a5c <LL_C1_IPCC_EnableReceiveChannel>
 8015c58:	68fb      	ldr	r3, [r7, #12]
 8015c5a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015c5c:	68bb      	ldr	r3, [r7, #8]
 8015c5e:	f383 8810 	msr	PRIMASK, r3
}
 8015c62:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 8015c64:	bf00      	nop
}
 8015c66:	3710      	adds	r7, #16
 8015c68:	46bd      	mov	sp, r7
 8015c6a:	bd80      	pop	{r7, pc}
 8015c6c:	58000c00 	.word	0x58000c00

08015c70 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8015c70:	b580      	push	{r7, lr}
 8015c72:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8015c74:	2101      	movs	r1, #1
 8015c76:	4802      	ldr	r0, [pc, #8]	@ (8015c80 <HW_IPCC_BLE_SendCmd+0x10>)
 8015c78:	f7ff ff10 	bl	8015a9c <LL_C1_IPCC_SetFlag_CHx>

  return;
 8015c7c:	bf00      	nop
}
 8015c7e:	bd80      	pop	{r7, pc}
 8015c80:	58000c00 	.word	0x58000c00

08015c84 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8015c84:	b580      	push	{r7, lr}
 8015c86:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8015c88:	f7fe fe56 	bl	8014938 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8015c8c:	2101      	movs	r1, #1
 8015c8e:	4802      	ldr	r0, [pc, #8]	@ (8015c98 <HW_IPCC_BLE_EvtHandler+0x14>)
 8015c90:	f7ff fef6 	bl	8015a80 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8015c94:	bf00      	nop
}
 8015c96:	bd80      	pop	{r7, pc}
 8015c98:	58000c00 	.word	0x58000c00

08015c9c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8015c9c:	b580      	push	{r7, lr}
 8015c9e:	b084      	sub	sp, #16
 8015ca0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015ca2:	f3ef 8310 	mrs	r3, PRIMASK
 8015ca6:	607b      	str	r3, [r7, #4]
  return(result);
 8015ca8:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8015caa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8015cac:	b672      	cpsid	i
}
 8015cae:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8015cb0:	2120      	movs	r1, #32
 8015cb2:	4807      	ldr	r0, [pc, #28]	@ (8015cd0 <HW_IPCC_BLE_AclDataEvtHandler+0x34>)
 8015cb4:	f7ff fec0 	bl	8015a38 <LL_C1_IPCC_DisableTransmitChannel>
 8015cb8:	68fb      	ldr	r3, [r7, #12]
 8015cba:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015cbc:	68bb      	ldr	r3, [r7, #8]
 8015cbe:	f383 8810 	msr	PRIMASK, r3
}
 8015cc2:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_BLE_AclDataAckNot();
 8015cc4:	f7fe fe68 	bl	8014998 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8015cc8:	bf00      	nop
}
 8015cca:	3710      	adds	r7, #16
 8015ccc:	46bd      	mov	sp, r7
 8015cce:	bd80      	pop	{r7, pc}
 8015cd0:	58000c00 	.word	0x58000c00

08015cd4 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8015cd4:	b580      	push	{r7, lr}
 8015cd6:	b084      	sub	sp, #16
 8015cd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015cda:	f3ef 8310 	mrs	r3, PRIMASK
 8015cde:	607b      	str	r3, [r7, #4]
  return(result);
 8015ce0:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8015ce2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8015ce4:	b672      	cpsid	i
}
 8015ce6:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8015ce8:	2102      	movs	r1, #2
 8015cea:	4806      	ldr	r0, [pc, #24]	@ (8015d04 <HW_IPCC_SYS_Init+0x30>)
 8015cec:	f7ff feb6 	bl	8015a5c <LL_C1_IPCC_EnableReceiveChannel>
 8015cf0:	68fb      	ldr	r3, [r7, #12]
 8015cf2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015cf4:	68bb      	ldr	r3, [r7, #8]
 8015cf6:	f383 8810 	msr	PRIMASK, r3
}
 8015cfa:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 8015cfc:	bf00      	nop
}
 8015cfe:	3710      	adds	r7, #16
 8015d00:	46bd      	mov	sp, r7
 8015d02:	bd80      	pop	{r7, pc}
 8015d04:	58000c00 	.word	0x58000c00

08015d08 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8015d08:	b580      	push	{r7, lr}
 8015d0a:	b084      	sub	sp, #16
 8015d0c:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8015d0e:	2102      	movs	r1, #2
 8015d10:	480b      	ldr	r0, [pc, #44]	@ (8015d40 <HW_IPCC_SYS_SendCmd+0x38>)
 8015d12:	f7ff fec3 	bl	8015a9c <LL_C1_IPCC_SetFlag_CHx>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015d16:	f3ef 8310 	mrs	r3, PRIMASK
 8015d1a:	607b      	str	r3, [r7, #4]
  return(result);
 8015d1c:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8015d1e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8015d20:	b672      	cpsid	i
}
 8015d22:	bf00      	nop
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8015d24:	2102      	movs	r1, #2
 8015d26:	4806      	ldr	r0, [pc, #24]	@ (8015d40 <HW_IPCC_SYS_SendCmd+0x38>)
 8015d28:	f7ff fe73 	bl	8015a12 <LL_C1_IPCC_EnableTransmitChannel>
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015d30:	68bb      	ldr	r3, [r7, #8]
 8015d32:	f383 8810 	msr	PRIMASK, r3
}
 8015d36:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 8015d38:	bf00      	nop
}
 8015d3a:	3710      	adds	r7, #16
 8015d3c:	46bd      	mov	sp, r7
 8015d3e:	bd80      	pop	{r7, pc}
 8015d40:	58000c00 	.word	0x58000c00

08015d44 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8015d44:	b580      	push	{r7, lr}
 8015d46:	b084      	sub	sp, #16
 8015d48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015d4a:	f3ef 8310 	mrs	r3, PRIMASK
 8015d4e:	607b      	str	r3, [r7, #4]
  return(result);
 8015d50:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8015d52:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8015d54:	b672      	cpsid	i
}
 8015d56:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8015d58:	2102      	movs	r1, #2
 8015d5a:	4807      	ldr	r0, [pc, #28]	@ (8015d78 <HW_IPCC_SYS_CmdEvtHandler+0x34>)
 8015d5c:	f7ff fe6c 	bl	8015a38 <LL_C1_IPCC_DisableTransmitChannel>
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015d64:	68bb      	ldr	r3, [r7, #8]
 8015d66:	f383 8810 	msr	PRIMASK, r3
}
 8015d6a:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_SYS_CmdEvtNot();
 8015d6c:	f7fe fe64 	bl	8014a38 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8015d70:	bf00      	nop
}
 8015d72:	3710      	adds	r7, #16
 8015d74:	46bd      	mov	sp, r7
 8015d76:	bd80      	pop	{r7, pc}
 8015d78:	58000c00 	.word	0x58000c00

08015d7c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8015d7c:	b580      	push	{r7, lr}
 8015d7e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8015d80:	f7fe fe70 	bl	8014a64 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8015d84:	2102      	movs	r1, #2
 8015d86:	4802      	ldr	r0, [pc, #8]	@ (8015d90 <HW_IPCC_SYS_EvtHandler+0x14>)
 8015d88:	f7ff fe7a 	bl	8015a80 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8015d8c:	bf00      	nop
}
 8015d8e:	bd80      	pop	{r7, pc}
 8015d90:	58000c00 	.word	0x58000c00

08015d94 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8015d94:	b580      	push	{r7, lr}
 8015d96:	b086      	sub	sp, #24
 8015d98:	af00      	add	r7, sp, #0
 8015d9a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8015d9c:	2108      	movs	r1, #8
 8015d9e:	4812      	ldr	r0, [pc, #72]	@ (8015de8 <HW_IPCC_MM_SendFreeBuf+0x54>)
 8015da0:	f7ff fe8b 	bl	8015aba <LL_C1_IPCC_IsActiveFlag_CHx>
 8015da4:	4603      	mov	r3, r0
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d013      	beq.n	8015dd2 <HW_IPCC_MM_SendFreeBuf+0x3e>
  {
    FreeBufCb = cb;
 8015daa:	4a10      	ldr	r2, [pc, #64]	@ (8015dec <HW_IPCC_MM_SendFreeBuf+0x58>)
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015db0:	f3ef 8310 	mrs	r3, PRIMASK
 8015db4:	60fb      	str	r3, [r7, #12]
  return(result);
 8015db6:	68fb      	ldr	r3, [r7, #12]
    UTILS_ENTER_CRITICAL_SECTION();
 8015db8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015dba:	b672      	cpsid	i
}
 8015dbc:	bf00      	nop
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8015dbe:	2108      	movs	r1, #8
 8015dc0:	4809      	ldr	r0, [pc, #36]	@ (8015de8 <HW_IPCC_MM_SendFreeBuf+0x54>)
 8015dc2:	f7ff fe26 	bl	8015a12 <LL_C1_IPCC_EnableTransmitChannel>
 8015dc6:	697b      	ldr	r3, [r7, #20]
 8015dc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015dca:	693b      	ldr	r3, [r7, #16]
 8015dcc:	f383 8810 	msr	PRIMASK, r3
}
 8015dd0:	e005      	b.n	8015dde <HW_IPCC_MM_SendFreeBuf+0x4a>
    UTILS_EXIT_CRITICAL_SECTION();
  }
  else
  {
    cb();
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	4798      	blx	r3

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8015dd6:	2108      	movs	r1, #8
 8015dd8:	4803      	ldr	r0, [pc, #12]	@ (8015de8 <HW_IPCC_MM_SendFreeBuf+0x54>)
 8015dda:	f7ff fe5f 	bl	8015a9c <LL_C1_IPCC_SetFlag_CHx>
  }

  return;
 8015dde:	bf00      	nop
}
 8015de0:	3718      	adds	r7, #24
 8015de2:	46bd      	mov	sp, r7
 8015de4:	bd80      	pop	{r7, pc}
 8015de6:	bf00      	nop
 8015de8:	58000c00 	.word	0x58000c00
 8015dec:	20000b58 	.word	0x20000b58

08015df0 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8015df0:	b580      	push	{r7, lr}
 8015df2:	b084      	sub	sp, #16
 8015df4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015df6:	f3ef 8310 	mrs	r3, PRIMASK
 8015dfa:	607b      	str	r3, [r7, #4]
  return(result);
 8015dfc:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8015dfe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8015e00:	b672      	cpsid	i
}
 8015e02:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8015e04:	2108      	movs	r1, #8
 8015e06:	480a      	ldr	r0, [pc, #40]	@ (8015e30 <HW_IPCC_MM_FreeBufHandler+0x40>)
 8015e08:	f7ff fe16 	bl	8015a38 <LL_C1_IPCC_DisableTransmitChannel>
 8015e0c:	68fb      	ldr	r3, [r7, #12]
 8015e0e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015e10:	68bb      	ldr	r3, [r7, #8]
 8015e12:	f383 8810 	msr	PRIMASK, r3
}
 8015e16:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  FreeBufCb();
 8015e18:	4b06      	ldr	r3, [pc, #24]	@ (8015e34 <HW_IPCC_MM_FreeBufHandler+0x44>)
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8015e1e:	2108      	movs	r1, #8
 8015e20:	4803      	ldr	r0, [pc, #12]	@ (8015e30 <HW_IPCC_MM_FreeBufHandler+0x40>)
 8015e22:	f7ff fe3b 	bl	8015a9c <LL_C1_IPCC_SetFlag_CHx>

  return;
 8015e26:	bf00      	nop
}
 8015e28:	3710      	adds	r7, #16
 8015e2a:	46bd      	mov	sp, r7
 8015e2c:	bd80      	pop	{r7, pc}
 8015e2e:	bf00      	nop
 8015e30:	58000c00 	.word	0x58000c00
 8015e34:	20000b58 	.word	0x20000b58

08015e38 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8015e38:	b580      	push	{r7, lr}
 8015e3a:	b084      	sub	sp, #16
 8015e3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8015e42:	607b      	str	r3, [r7, #4]
  return(result);
 8015e44:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8015e46:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8015e48:	b672      	cpsid	i
}
 8015e4a:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8015e4c:	2108      	movs	r1, #8
 8015e4e:	4806      	ldr	r0, [pc, #24]	@ (8015e68 <HW_IPCC_TRACES_Init+0x30>)
 8015e50:	f7ff fe04 	bl	8015a5c <LL_C1_IPCC_EnableReceiveChannel>
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015e58:	68bb      	ldr	r3, [r7, #8]
 8015e5a:	f383 8810 	msr	PRIMASK, r3
}
 8015e5e:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 8015e60:	bf00      	nop
}
 8015e62:	3710      	adds	r7, #16
 8015e64:	46bd      	mov	sp, r7
 8015e66:	bd80      	pop	{r7, pc}
 8015e68:	58000c00 	.word	0x58000c00

08015e6c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8015e6c:	b580      	push	{r7, lr}
 8015e6e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8015e70:	f7fe fea0 	bl	8014bb4 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8015e74:	2108      	movs	r1, #8
 8015e76:	4802      	ldr	r0, [pc, #8]	@ (8015e80 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8015e78:	f7ff fe02 	bl	8015a80 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8015e7c:	bf00      	nop
}
 8015e7e:	bd80      	pop	{r7, pc}
 8015e80:	58000c00 	.word	0x58000c00

08015e84 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8015e84:	b580      	push	{r7, lr}
 8015e86:	b082      	sub	sp, #8
 8015e88:	af00      	add	r7, sp, #0
 8015e8a:	ed87 0a01 	vstr	s0, [r7, #4]
 8015e8e:	ed97 0a01 	vldr	s0, [r7, #4]
 8015e92:	f002 f85d 	bl	8017f50 <cosf>
 8015e96:	eef0 7a40 	vmov.f32	s15, s0
 8015e9a:	eeb0 0a67 	vmov.f32	s0, s15
 8015e9e:	3708      	adds	r7, #8
 8015ea0:	46bd      	mov	sp, r7
 8015ea2:	bd80      	pop	{r7, pc}

08015ea4 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8015ea4:	b580      	push	{r7, lr}
 8015ea6:	b082      	sub	sp, #8
 8015ea8:	af00      	add	r7, sp, #0
 8015eaa:	ed87 0a01 	vstr	s0, [r7, #4]
 8015eae:	ed97 0a01 	vldr	s0, [r7, #4]
 8015eb2:	f002 f891 	bl	8017fd8 <sinf>
 8015eb6:	eef0 7a40 	vmov.f32	s15, s0
 8015eba:	eeb0 0a67 	vmov.f32	s0, s15
 8015ebe:	3708      	adds	r7, #8
 8015ec0:	46bd      	mov	sp, r7
 8015ec2:	bd80      	pop	{r7, pc}

08015ec4 <_ZN6Screen11renderMeterEv>:
}

void Screen::renderMeter()

// void Screen::renderMeter(GFXcanvas16 &canvas)
{
 8015ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ec6:	b089      	sub	sp, #36	@ 0x24
 8015ec8:	af04      	add	r7, sp, #16
 8015eca:	6078      	str	r0, [r7, #4]

    // background
    // canvas.fillRect(0, 0, canvas.width(), canvas.height(), BACKGROUND_COLOR);

    canvas.fillScreen(BACKGROUND_COLOR);
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	3358      	adds	r3, #88	@ 0x58
 8015ed0:	f64d 41ff 	movw	r1, #56575	@ 0xdcff
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	f7ec fec5 	bl	8002c64 <_ZN11GFXcanvas1610fillScreenEt>

    // border
    for (int i = 0; i < 3; i++)
 8015eda:	2300      	movs	r3, #0
 8015edc:	60fb      	str	r3, [r7, #12]
 8015ede:	e035      	b.n	8015f4c <_ZN6Screen11renderMeterEv+0x88>
    {
        canvas.drawRect(overallBorderX - i, overallBorderY - i, overallBorderWidth + 2 * i, overallBorderHeight + 2 * i, TEXT_COLOR);
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8015eec:	b29a      	uxth	r2, r3
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	b29b      	uxth	r3, r3
 8015ef2:	1ad3      	subs	r3, r2, r3
 8015ef4:	b29b      	uxth	r3, r3
 8015ef6:	b219      	sxth	r1, r3
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8015efe:	b29a      	uxth	r2, r3
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	b29b      	uxth	r3, r3
 8015f04:	1ad3      	subs	r3, r2, r3
 8015f06:	b29b      	uxth	r3, r3
 8015f08:	b21c      	sxth	r4, r3
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015f10:	b29a      	uxth	r2, r3
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	b29b      	uxth	r3, r3
 8015f16:	005b      	lsls	r3, r3, #1
 8015f18:	b29b      	uxth	r3, r3
 8015f1a:	4413      	add	r3, r2
 8015f1c:	b29b      	uxth	r3, r3
 8015f1e:	b21d      	sxth	r5, r3
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8015f26:	b29a      	uxth	r2, r3
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	b29b      	uxth	r3, r3
 8015f2c:	005b      	lsls	r3, r3, #1
 8015f2e:	b29b      	uxth	r3, r3
 8015f30:	4413      	add	r3, r2
 8015f32:	b29b      	uxth	r3, r3
 8015f34:	b21b      	sxth	r3, r3
 8015f36:	f24a 3229 	movw	r2, #41769	@ 0xa329
 8015f3a:	9201      	str	r2, [sp, #4]
 8015f3c:	9300      	str	r3, [sp, #0]
 8015f3e:	462b      	mov	r3, r5
 8015f40:	4622      	mov	r2, r4
 8015f42:	f7eb fe9b 	bl	8001c7c <_ZN12Adafruit_GFX8drawRectEsssst>
    for (int i = 0; i < 3; i++)
 8015f46:	68fb      	ldr	r3, [r7, #12]
 8015f48:	3301      	adds	r3, #1
 8015f4a:	60fb      	str	r3, [r7, #12]
 8015f4c:	68fb      	ldr	r3, [r7, #12]
 8015f4e:	2b02      	cmp	r3, #2
 8015f50:	ddc6      	ble.n	8015ee0 <_ZN6Screen11renderMeterEv+0x1c>
    }
    // yield();
    // status border
    canvas.drawRect(statusBorderX, statusBorderY, statusWidth, statusHeight, TEXT_COLOR);
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8015f5e:	b219      	sxth	r1, r3
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8015f66:	b21a      	sxth	r2, r3
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015f6e:	b21c      	sxth	r4, r3
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8015f76:	b21b      	sxth	r3, r3
 8015f78:	f24a 3529 	movw	r5, #41769	@ 0xa329
 8015f7c:	9501      	str	r5, [sp, #4]
 8015f7e:	9300      	str	r3, [sp, #0]
 8015f80:	4623      	mov	r3, r4
 8015f82:	f7eb fe7b 	bl	8001c7c <_ZN12Adafruit_GFX8drawRectEsssst>

    canvas.drawRect(meterX, meterY, meterWidth, meterHeight, TEXT_COLOR);
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8015f92:	b219      	sxth	r1, r3
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8015f9a:	b21a      	sxth	r2, r3
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8015fa2:	b21c      	sxth	r4, r3
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8015faa:	b21b      	sxth	r3, r3
 8015fac:	f24a 3529 	movw	r5, #41769	@ 0xa329
 8015fb0:	9501      	str	r5, [sp, #4]
 8015fb2:	9300      	str	r3, [sp, #0]
 8015fb4:	4623      	mov	r3, r4
 8015fb6:	f7eb fe61 	bl	8001c7c <_ZN12Adafruit_GFX8drawRectEsssst>
    canvas.drawRect(labelX, labelY, labelWidth, labelHeight, TEXT_COLOR);
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8015fc6:	b219      	sxth	r1, r3
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8015fce:	b21a      	sxth	r2, r3
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8015fd6:	b21c      	sxth	r4, r3
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8015fde:	b21b      	sxth	r3, r3
 8015fe0:	f24a 3529 	movw	r5, #41769	@ 0xa329
 8015fe4:	9501      	str	r5, [sp, #4]
 8015fe6:	9300      	str	r3, [sp, #0]
 8015fe8:	4623      	mov	r3, r4
 8015fea:	f7eb fe47 	bl	8001c7c <_ZN12Adafruit_GFX8drawRectEsssst>
    canvas.drawRect(buttonBorderX, buttonBorderY, buttonBorderWidth, buttonBorderHeight, TEXT_COLOR);
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8015ffa:	b219      	sxth	r1, r3
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8016002:	b21a      	sxth	r2, r3
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 801600a:	b21c      	sxth	r4, r3
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8016012:	b21b      	sxth	r3, r3
 8016014:	f24a 3529 	movw	r5, #41769	@ 0xa329
 8016018:	9501      	str	r5, [sp, #4]
 801601a:	9300      	str	r3, [sp, #0]
 801601c:	4623      	mov	r3, r4
 801601e:	f7eb fe2d 	bl	8001c7c <_ZN12Adafruit_GFX8drawRectEsssst>

    canvas.fillRoundRect(buttonX1, buttonY1, buttonWidth, buttonHeight, buttonRadius, ACCENT_COLOR);
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 801602e:	b219      	sxth	r1, r3
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8016036:	b21c      	sxth	r4, r3
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 801603e:	b21d      	sxth	r5, r3
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8016046:	b21b      	sxth	r3, r3
 8016048:	687a      	ldr	r2, [r7, #4]
 801604a:	f8d2 219c 	ldr.w	r2, [r2, #412]	@ 0x19c
 801604e:	b212      	sxth	r2, r2
 8016050:	f246 7663 	movw	r6, #26467	@ 0x6763
 8016054:	9602      	str	r6, [sp, #8]
 8016056:	9201      	str	r2, [sp, #4]
 8016058:	9300      	str	r3, [sp, #0]
 801605a:	462b      	mov	r3, r5
 801605c:	4622      	mov	r2, r4
 801605e:	f7eb fe70 	bl	8001d42 <_ZN12Adafruit_GFX13fillRoundRectEssssst>
    canvas.fillRoundRect(buttonX2, buttonY2, buttonWidth, buttonHeight, buttonRadius, ACCENT_COLOR);
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 801606e:	b219      	sxth	r1, r3
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8016076:	b21c      	sxth	r4, r3
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 801607e:	b21d      	sxth	r5, r3
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8016086:	b21b      	sxth	r3, r3
 8016088:	687a      	ldr	r2, [r7, #4]
 801608a:	f8d2 219c 	ldr.w	r2, [r2, #412]	@ 0x19c
 801608e:	b212      	sxth	r2, r2
 8016090:	f246 7663 	movw	r6, #26467	@ 0x6763
 8016094:	9602      	str	r6, [sp, #8]
 8016096:	9201      	str	r2, [sp, #4]
 8016098:	9300      	str	r3, [sp, #0]
 801609a:	462b      	mov	r3, r5
 801609c:	4622      	mov	r2, r4
 801609e:	f7eb fe50 	bl	8001d42 <_ZN12Adafruit_GFX13fillRoundRectEssssst>

    canvas.drawPixel(10, 10, ACCENT_COLOR);
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80160a8:	f246 7363 	movw	r3, #26467	@ 0x6763
 80160ac:	220a      	movs	r2, #10
 80160ae:	210a      	movs	r1, #10
 80160b0:	f7ec fd5c 	bl	8002b6c <_ZN11GFXcanvas169drawPixelEsst>
    canvas.drawPixel(11, 10, ACCENT_COLOR);
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80160ba:	f246 7363 	movw	r3, #26467	@ 0x6763
 80160be:	220a      	movs	r2, #10
 80160c0:	210b      	movs	r1, #11
 80160c2:	f7ec fd53 	bl	8002b6c <_ZN11GFXcanvas169drawPixelEsst>
    canvas.drawPixel(12, 10, ACCENT_COLOR);
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80160cc:	f246 7363 	movw	r3, #26467	@ 0x6763
 80160d0:	220a      	movs	r2, #10
 80160d2:	210c      	movs	r1, #12
 80160d4:	f7ec fd4a 	bl	8002b6c <_ZN11GFXcanvas169drawPixelEsst>
    canvas.drawPixel(13, 10, ACCENT_COLOR);
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80160de:	f246 7363 	movw	r3, #26467	@ 0x6763
 80160e2:	220a      	movs	r2, #10
 80160e4:	210d      	movs	r1, #13
 80160e6:	f7ec fd41 	bl	8002b6c <_ZN11GFXcanvas169drawPixelEsst>
    canvas.drawPixel(10, 11, ACCENT_COLOR);
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80160f0:	f246 7363 	movw	r3, #26467	@ 0x6763
 80160f4:	220b      	movs	r2, #11
 80160f6:	210a      	movs	r1, #10
 80160f8:	f7ec fd38 	bl	8002b6c <_ZN11GFXcanvas169drawPixelEsst>
    canvas.drawPixel(10, 12, ACCENT_COLOR);
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8016102:	f246 7363 	movw	r3, #26467	@ 0x6763
 8016106:	220c      	movs	r2, #12
 8016108:	210a      	movs	r1, #10
 801610a:	f7ec fd2f 	bl	8002b6c <_ZN11GFXcanvas169drawPixelEsst>
    canvas.drawPixel(10, 13, ACCENT_COLOR);
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8016114:	f246 7363 	movw	r3, #26467	@ 0x6763
 8016118:	220d      	movs	r2, #13
 801611a:	210a      	movs	r1, #10
 801611c:	f7ec fd26 	bl	8002b6c <_ZN11GFXcanvas169drawPixelEsst>

    // calculate the size of a few things....
    canvas.getTextBounds("40%", 0, 0, &batteryTextX, &batteryTextY, &batteryW, &batteryH);
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	f103 0458 	add.w	r4, r3, #88	@ 0x58
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	33b8      	adds	r3, #184	@ 0xb8
 801612a:	687a      	ldr	r2, [r7, #4]
 801612c:	32ba      	adds	r2, #186	@ 0xba
 801612e:	6879      	ldr	r1, [r7, #4]
 8016130:	31bc      	adds	r1, #188	@ 0xbc
 8016132:	6878      	ldr	r0, [r7, #4]
 8016134:	30be      	adds	r0, #190	@ 0xbe
 8016136:	9003      	str	r0, [sp, #12]
 8016138:	9102      	str	r1, [sp, #8]
 801613a:	9201      	str	r2, [sp, #4]
 801613c:	9300      	str	r3, [sp, #0]
 801613e:	2300      	movs	r3, #0
 8016140:	2200      	movs	r2, #0
 8016142:	49bc      	ldr	r1, [pc, #752]	@ (8016434 <_ZN6Screen11renderMeterEv+0x570>)
 8016144:	4620      	mov	r0, r4
 8016146:	f7ec fc2a 	bl	800299e <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>
    // origin of battery text based on its size...
    batteryX = overallBorderWidth - batteryW - 2 * batterySpacer;
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016150:	687a      	ldr	r2, [r7, #4]
 8016152:	f8b2 20bc 	ldrh.w	r2, [r2, #188]	@ 0xbc
 8016156:	1a9a      	subs	r2, r3, r2
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 801615e:	005b      	lsls	r3, r3, #1
 8016160:	1ad2      	subs	r2, r2, r3
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    batteryY = statusBorderY + statusHeight / 2 + batteryH / 2;
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8016174:	0fd9      	lsrs	r1, r3, #31
 8016176:	440b      	add	r3, r1
 8016178:	105b      	asrs	r3, r3, #1
 801617a:	4413      	add	r3, r2
 801617c:	687a      	ldr	r2, [r7, #4]
 801617e:	f8b2 20be 	ldrh.w	r2, [r2, #190]	@ 0xbe
 8016182:	0852      	lsrs	r2, r2, #1
 8016184:	b292      	uxth	r2, r2
 8016186:	441a      	add	r2, r3
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

    // // Serial.println(batteryX);
    // // Serial.println(batteryY);
    canvas.setTextColor(TEXT_COLOR);
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	3358      	adds	r3, #88	@ 0x58
 8016192:	f24a 3129 	movw	r1, #41769	@ 0xa329
 8016196:	4618      	mov	r0, r3
 8016198:	f7eb f927 	bl	80013ea <_ZN12Adafruit_GFX12setTextColorEt>
    canvas.setCursor(batteryX, batteryY);
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80161a8:	b219      	sxth	r1, r3
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80161b0:	b21b      	sxth	r3, r3
 80161b2:	461a      	mov	r2, r3
 80161b4:	f7eb f905 	bl	80013c2 <_ZN12Adafruit_GFX9setCursorEss>
    canvas.print("40%");
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	3358      	adds	r3, #88	@ 0x58
 80161bc:	499d      	ldr	r1, [pc, #628]	@ (8016434 <_ZN6Screen11renderMeterEv+0x570>)
 80161be:	4618      	mov	r0, r3
 80161c0:	f7ed f87f 	bl	80032c2 <_ZN5Print5printEPKc>

    // calculate size of charging:
    canvas.getTextBounds("+ ", 0, 0, &chargingTextX, &chargingTextY, &chargingW, &chargingH);
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	f103 0458 	add.w	r4, r3, #88	@ 0x58
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	33cc      	adds	r3, #204	@ 0xcc
 80161ce:	687a      	ldr	r2, [r7, #4]
 80161d0:	32ce      	adds	r2, #206	@ 0xce
 80161d2:	6879      	ldr	r1, [r7, #4]
 80161d4:	31d0      	adds	r1, #208	@ 0xd0
 80161d6:	6878      	ldr	r0, [r7, #4]
 80161d8:	30d2      	adds	r0, #210	@ 0xd2
 80161da:	9003      	str	r0, [sp, #12]
 80161dc:	9102      	str	r1, [sp, #8]
 80161de:	9201      	str	r2, [sp, #4]
 80161e0:	9300      	str	r3, [sp, #0]
 80161e2:	2300      	movs	r3, #0
 80161e4:	2200      	movs	r2, #0
 80161e6:	4994      	ldr	r1, [pc, #592]	@ (8016438 <_ZN6Screen11renderMeterEv+0x574>)
 80161e8:	4620      	mov	r0, r4
 80161ea:	f7ec fbd8 	bl	800299e <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>
    chargingX = overallBorderWidth - batteryW - chargingW - 2 * batterySpacer;
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80161f4:	687a      	ldr	r2, [r7, #4]
 80161f6:	f8b2 20bc 	ldrh.w	r2, [r2, #188]	@ 0xbc
 80161fa:	1a9b      	subs	r3, r3, r2
 80161fc:	687a      	ldr	r2, [r7, #4]
 80161fe:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	@ 0xd0
 8016202:	1a9a      	subs	r2, r3, r2
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 801620a:	005b      	lsls	r3, r3, #1
 801620c:	1ad2      	subs	r2, r2, r3
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    chargingY = statusBorderY + statusHeight / 2 + chargingH / 2;
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8016220:	0fd9      	lsrs	r1, r3, #31
 8016222:	440b      	add	r3, r1
 8016224:	105b      	asrs	r3, r3, #1
 8016226:	4413      	add	r3, r2
 8016228:	687a      	ldr	r2, [r7, #4]
 801622a:	f8b2 20d2 	ldrh.w	r2, [r2, #210]	@ 0xd2
 801622e:	0852      	lsrs	r2, r2, #1
 8016230:	b292      	uxth	r2, r2
 8016232:	441a      	add	r2, r3
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    canvas.setTextColor(TEXT_COLOR);
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	3358      	adds	r3, #88	@ 0x58
 801623e:	f24a 3129 	movw	r1, #41769	@ 0xa329
 8016242:	4618      	mov	r0, r3
 8016244:	f7eb f8d1 	bl	80013ea <_ZN12Adafruit_GFX12setTextColorEt>
    // // Serial.println(chargingX);
    // // Serial.println(chargingY);
    canvas.setCursor(chargingX, chargingY);
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8016254:	b219      	sxth	r1, r3
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 801625c:	b21b      	sxth	r3, r3
 801625e:	461a      	mov	r2, r3
 8016260:	f7eb f8af 	bl	80013c2 <_ZN12Adafruit_GFX9setCursorEss>
    canvas.print("+");
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	3358      	adds	r3, #88	@ 0x58
 8016268:	4974      	ldr	r1, [pc, #464]	@ (801643c <_ZN6Screen11renderMeterEv+0x578>)
 801626a:	4618      	mov	r0, r3
 801626c:	f7ed f829 	bl	80032c2 <_ZN5Print5printEPKc>

    // calculate size of settings:
    canvas.getTextBounds("Settings", 0, 0, &label1X, &label1Y, &label1W, &label1H);
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	f103 0458 	add.w	r4, r3, #88	@ 0x58
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 801627c:	687a      	ldr	r2, [r7, #4]
 801627e:	f502 72a1 	add.w	r2, r2, #322	@ 0x142
 8016282:	6879      	ldr	r1, [r7, #4]
 8016284:	f501 71a2 	add.w	r1, r1, #324	@ 0x144
 8016288:	6878      	ldr	r0, [r7, #4]
 801628a:	f500 70a3 	add.w	r0, r0, #326	@ 0x146
 801628e:	9003      	str	r0, [sp, #12]
 8016290:	9102      	str	r1, [sp, #8]
 8016292:	9201      	str	r2, [sp, #4]
 8016294:	9300      	str	r3, [sp, #0]
 8016296:	2300      	movs	r3, #0
 8016298:	2200      	movs	r2, #0
 801629a:	4969      	ldr	r1, [pc, #420]	@ (8016440 <_ZN6Screen11renderMeterEv+0x57c>)
 801629c:	4620      	mov	r0, r4
 801629e:	f7ec fb7e 	bl	800299e <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>
    label1X = buttonX1 + buttonWidth / 2 - label1W / 2;
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 80162a8:	b29a      	uxth	r2, r3
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 80162b0:	0fd9      	lsrs	r1, r3, #31
 80162b2:	440b      	add	r3, r1
 80162b4:	105b      	asrs	r3, r3, #1
 80162b6:	b29b      	uxth	r3, r3
 80162b8:	4413      	add	r3, r2
 80162ba:	b29a      	uxth	r2, r3
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 80162c2:	085b      	lsrs	r3, r3, #1
 80162c4:	b29b      	uxth	r3, r3
 80162c6:	1ad3      	subs	r3, r2, r3
 80162c8:	b29b      	uxth	r3, r3
 80162ca:	b21a      	sxth	r2, r3
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    label1Y = buttonY1 + buttonHeight - label1H;
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 80162d8:	b29a      	uxth	r2, r3
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 80162e0:	b29b      	uxth	r3, r3
 80162e2:	4413      	add	r3, r2
 80162e4:	b29a      	uxth	r2, r3
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 80162ec:	1ad3      	subs	r3, r2, r3
 80162ee:	b29b      	uxth	r3, r3
 80162f0:	b21a      	sxth	r2, r3
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142
    canvas.setTextColor(BACKGROUND_COLOR);
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	3358      	adds	r3, #88	@ 0x58
 80162fc:	f64d 41ff 	movw	r1, #56575	@ 0xdcff
 8016300:	4618      	mov	r0, r3
 8016302:	f7eb f872 	bl	80013ea <_ZN12Adafruit_GFX12setTextColorEt>
    // Serial.println(label1X);
    // Serial.println(label1Y);
    canvas.setCursor(label1X, label1Y);
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	f9b3 1140 	ldrsh.w	r1, [r3, #320]	@ 0x140
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	f9b3 3142 	ldrsh.w	r3, [r3, #322]	@ 0x142
 8016318:	461a      	mov	r2, r3
 801631a:	f7eb f852 	bl	80013c2 <_ZN12Adafruit_GFX9setCursorEss>
    canvas.print("Settings");
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	3358      	adds	r3, #88	@ 0x58
 8016322:	4947      	ldr	r1, [pc, #284]	@ (8016440 <_ZN6Screen11renderMeterEv+0x57c>)
 8016324:	4618      	mov	r0, r3
 8016326:	f7ec ffcc 	bl	80032c2 <_ZN5Print5printEPKc>

    canvas.getTextBounds("Sleep", 0, 0, &label2X, &label2Y, &label2W, &label2H);
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	f103 0458 	add.w	r4, r3, #88	@ 0x58
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8016336:	687a      	ldr	r2, [r7, #4]
 8016338:	f502 72a5 	add.w	r2, r2, #330	@ 0x14a
 801633c:	6879      	ldr	r1, [r7, #4]
 801633e:	f501 71a6 	add.w	r1, r1, #332	@ 0x14c
 8016342:	6878      	ldr	r0, [r7, #4]
 8016344:	f500 70a7 	add.w	r0, r0, #334	@ 0x14e
 8016348:	9003      	str	r0, [sp, #12]
 801634a:	9102      	str	r1, [sp, #8]
 801634c:	9201      	str	r2, [sp, #4]
 801634e:	9300      	str	r3, [sp, #0]
 8016350:	2300      	movs	r3, #0
 8016352:	2200      	movs	r2, #0
 8016354:	493b      	ldr	r1, [pc, #236]	@ (8016444 <_ZN6Screen11renderMeterEv+0x580>)
 8016356:	4620      	mov	r0, r4
 8016358:	f7ec fb21 	bl	800299e <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>
    label2X = buttonX2 + buttonWidth / 2 - label2W / 2;
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8016362:	b29a      	uxth	r2, r3
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 801636a:	0fd9      	lsrs	r1, r3, #31
 801636c:	440b      	add	r3, r1
 801636e:	105b      	asrs	r3, r3, #1
 8016370:	b29b      	uxth	r3, r3
 8016372:	4413      	add	r3, r2
 8016374:	b29a      	uxth	r2, r3
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	f8b3 314c 	ldrh.w	r3, [r3, #332]	@ 0x14c
 801637c:	085b      	lsrs	r3, r3, #1
 801637e:	b29b      	uxth	r3, r3
 8016380:	1ad3      	subs	r3, r2, r3
 8016382:	b29b      	uxth	r3, r3
 8016384:	b21a      	sxth	r2, r3
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
    label2Y = buttonY2 + buttonHeight - label2H;
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8016392:	b29a      	uxth	r2, r3
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 801639a:	b29b      	uxth	r3, r3
 801639c:	4413      	add	r3, r2
 801639e:	b29a      	uxth	r2, r3
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	f8b3 314e 	ldrh.w	r3, [r3, #334]	@ 0x14e
 80163a6:	1ad3      	subs	r3, r2, r3
 80163a8:	b29b      	uxth	r3, r3
 80163aa:	b21a      	sxth	r2, r3
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	f8a3 214a 	strh.w	r2, [r3, #330]	@ 0x14a
    canvas.setTextColor(BACKGROUND_COLOR);
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	3358      	adds	r3, #88	@ 0x58
 80163b6:	f64d 41ff 	movw	r1, #56575	@ 0xdcff
 80163ba:	4618      	mov	r0, r3
 80163bc:	f7eb f815 	bl	80013ea <_ZN12Adafruit_GFX12setTextColorEt>
    // Serial.println(label2X);
    // Serial.println(label2Y);
    canvas.setCursor(label2X, label2Y);
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	f9b3 1148 	ldrsh.w	r1, [r3, #328]	@ 0x148
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	f9b3 314a 	ldrsh.w	r3, [r3, #330]	@ 0x14a
 80163d2:	461a      	mov	r2, r3
 80163d4:	f7ea fff5 	bl	80013c2 <_ZN12Adafruit_GFX9setCursorEss>
    canvas.print("Sleep");
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	3358      	adds	r3, #88	@ 0x58
 80163dc:	4919      	ldr	r1, [pc, #100]	@ (8016444 <_ZN6Screen11renderMeterEv+0x580>)
 80163de:	4618      	mov	r0, r3
 80163e0:	f7ec ff6f 	bl	80032c2 <_ZN5Print5printEPKc>

    drawMeterLines(meterOriginX, meterOriginY, meterHeight - 40, -8, 8);
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80163f6:	3b28      	subs	r3, #40	@ 0x28
 80163f8:	2008      	movs	r0, #8
 80163fa:	9001      	str	r0, [sp, #4]
 80163fc:	f06f 0007 	mvn.w	r0, #7
 8016400:	9000      	str	r0, [sp, #0]
 8016402:	6878      	ldr	r0, [r7, #4]
 8016404:	f000 f91c 	bl	8016640 <_ZN6Screen14drawMeterLinesEiiiii>

    canvas.getTextBounds("DELTA T PROBE", 0, 0, &textOriginX, &textOriginY, &textWidth, &textHeight);
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	f103 0458 	add.w	r4, r3, #88	@ 0x58
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8016414:	687a      	ldr	r2, [r7, #4]
 8016416:	f502 72a9 	add.w	r2, r2, #338	@ 0x152
 801641a:	6879      	ldr	r1, [r7, #4]
 801641c:	f501 71aa 	add.w	r1, r1, #340	@ 0x154
 8016420:	6878      	ldr	r0, [r7, #4]
 8016422:	f500 70ab 	add.w	r0, r0, #342	@ 0x156
 8016426:	9003      	str	r0, [sp, #12]
 8016428:	9102      	str	r1, [sp, #8]
 801642a:	9201      	str	r2, [sp, #4]
 801642c:	9300      	str	r3, [sp, #0]
 801642e:	2300      	movs	r3, #0
 8016430:	2200      	movs	r2, #0
 8016432:	e009      	b.n	8016448 <_ZN6Screen11renderMeterEv+0x584>
 8016434:	0801b7d8 	.word	0x0801b7d8
 8016438:	0801b7dc 	.word	0x0801b7dc
 801643c:	0801b7e0 	.word	0x0801b7e0
 8016440:	0801b7e4 	.word	0x0801b7e4
 8016444:	0801b7f0 	.word	0x0801b7f0
 8016448:	4979      	ldr	r1, [pc, #484]	@ (8016630 <_ZN6Screen11renderMeterEv+0x76c>)
 801644a:	4620      	mov	r0, r4
 801644c:	f7ec faa7 	bl	800299e <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>
    textX = labelX + labelWidth / 2 - textWidth / 2;
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801645c:	0fd9      	lsrs	r1, r3, #31
 801645e:	440b      	add	r3, r1
 8016460:	105b      	asrs	r3, r3, #1
 8016462:	4413      	add	r3, r2
 8016464:	687a      	ldr	r2, [r7, #4]
 8016466:	f8b2 2154 	ldrh.w	r2, [r2, #340]	@ 0x154
 801646a:	0852      	lsrs	r2, r2, #1
 801646c:	b292      	uxth	r2, r2
 801646e:	1a9a      	subs	r2, r3, r2
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
    textY = labelY + textHeight + meterSpacer;
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 801647c:	687a      	ldr	r2, [r7, #4]
 801647e:	f8b2 2156 	ldrh.w	r2, [r2, #342]	@ 0x156
 8016482:	441a      	add	r2, r3
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801648a:	441a      	add	r2, r3
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
    canvas.setTextColor(TEXT_COLOR);
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	3358      	adds	r3, #88	@ 0x58
 8016496:	f24a 3129 	movw	r1, #41769	@ 0xa329
 801649a:	4618      	mov	r0, r3
 801649c:	f7ea ffa5 	bl	80013ea <_ZN12Adafruit_GFX12setTextColorEt>

    canvas.setCursor(textX, textY);
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 80164ac:	b219      	sxth	r1, r3
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 80164b4:	b21b      	sxth	r3, r3
 80164b6:	461a      	mov	r2, r3
 80164b8:	f7ea ff83 	bl	80013c2 <_ZN12Adafruit_GFX9setCursorEss>
    canvas.print("DELTA T PROBE");
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	3358      	adds	r3, #88	@ 0x58
 80164c0:	495b      	ldr	r1, [pc, #364]	@ (8016630 <_ZN6Screen11renderMeterEv+0x76c>)
 80164c2:	4618      	mov	r0, r3
 80164c4:	f7ec fefd 	bl	80032c2 <_ZN5Print5printEPKc>

    canvas.getTextBounds("The Instrument Company", 0, 0, &textOriginX, &textOriginY, &textWidth, &textHeight);
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	f103 0458 	add.w	r4, r3, #88	@ 0x58
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80164d4:	687a      	ldr	r2, [r7, #4]
 80164d6:	f502 72a9 	add.w	r2, r2, #338	@ 0x152
 80164da:	6879      	ldr	r1, [r7, #4]
 80164dc:	f501 71aa 	add.w	r1, r1, #340	@ 0x154
 80164e0:	6878      	ldr	r0, [r7, #4]
 80164e2:	f500 70ab 	add.w	r0, r0, #342	@ 0x156
 80164e6:	9003      	str	r0, [sp, #12]
 80164e8:	9102      	str	r1, [sp, #8]
 80164ea:	9201      	str	r2, [sp, #4]
 80164ec:	9300      	str	r3, [sp, #0]
 80164ee:	2300      	movs	r3, #0
 80164f0:	2200      	movs	r2, #0
 80164f2:	4950      	ldr	r1, [pc, #320]	@ (8016634 <_ZN6Screen11renderMeterEv+0x770>)
 80164f4:	4620      	mov	r0, r4
 80164f6:	f7ec fa52 	bl	800299e <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>
    textX = labelX + labelWidth / 2 - textWidth / 2;
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8016506:	0fd9      	lsrs	r1, r3, #31
 8016508:	440b      	add	r3, r1
 801650a:	105b      	asrs	r3, r3, #1
 801650c:	4413      	add	r3, r2
 801650e:	687a      	ldr	r2, [r7, #4]
 8016510:	f8b2 2154 	ldrh.w	r2, [r2, #340]	@ 0x154
 8016514:	0852      	lsrs	r2, r2, #1
 8016516:	b292      	uxth	r2, r2
 8016518:	1a9a      	subs	r2, r3, r2
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
    textY = labelY + textHeight * 2 + meterSpacer;
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	f8b3 3156 	ldrh.w	r3, [r3, #342]	@ 0x156
 801652c:	005b      	lsls	r3, r3, #1
 801652e:	441a      	add	r2, r3
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8016536:	441a      	add	r2, r3
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
    canvas.setTextColor(TEXT_COLOR);
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	3358      	adds	r3, #88	@ 0x58
 8016542:	f24a 3129 	movw	r1, #41769	@ 0xa329
 8016546:	4618      	mov	r0, r3
 8016548:	f7ea ff4f 	bl	80013ea <_ZN12Adafruit_GFX12setTextColorEt>

    canvas.setCursor(textX, textY);
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8016558:	b219      	sxth	r1, r3
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8016560:	b21b      	sxth	r3, r3
 8016562:	461a      	mov	r2, r3
 8016564:	f7ea ff2d 	bl	80013c2 <_ZN12Adafruit_GFX9setCursorEss>
    canvas.print("The Instrument Company");
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	3358      	adds	r3, #88	@ 0x58
 801656c:	4931      	ldr	r1, [pc, #196]	@ (8016634 <_ZN6Screen11renderMeterEv+0x770>)
 801656e:	4618      	mov	r0, r3
 8016570:	f7ec fea7 	bl	80032c2 <_ZN5Print5printEPKc>

    canvas.getTextBounds("Dr. Ed Carr, Fort Collins, CO", 0, 0, &textOriginX, &textOriginY, &textWidth, &textHeight);
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	f103 0458 	add.w	r4, r3, #88	@ 0x58
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8016580:	687a      	ldr	r2, [r7, #4]
 8016582:	f502 72a9 	add.w	r2, r2, #338	@ 0x152
 8016586:	6879      	ldr	r1, [r7, #4]
 8016588:	f501 71aa 	add.w	r1, r1, #340	@ 0x154
 801658c:	6878      	ldr	r0, [r7, #4]
 801658e:	f500 70ab 	add.w	r0, r0, #342	@ 0x156
 8016592:	9003      	str	r0, [sp, #12]
 8016594:	9102      	str	r1, [sp, #8]
 8016596:	9201      	str	r2, [sp, #4]
 8016598:	9300      	str	r3, [sp, #0]
 801659a:	2300      	movs	r3, #0
 801659c:	2200      	movs	r2, #0
 801659e:	4926      	ldr	r1, [pc, #152]	@ (8016638 <_ZN6Screen11renderMeterEv+0x774>)
 80165a0:	4620      	mov	r0, r4
 80165a2:	f7ec f9fc 	bl	800299e <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>
    textX = labelX + labelWidth / 2 - textWidth / 2;
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80165b2:	0fd9      	lsrs	r1, r3, #31
 80165b4:	440b      	add	r3, r1
 80165b6:	105b      	asrs	r3, r3, #1
 80165b8:	4413      	add	r3, r2
 80165ba:	687a      	ldr	r2, [r7, #4]
 80165bc:	f8b2 2154 	ldrh.w	r2, [r2, #340]	@ 0x154
 80165c0:	0852      	lsrs	r2, r2, #1
 80165c2:	b292      	uxth	r2, r2
 80165c4:	1a9a      	subs	r2, r3, r2
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
    textY = labelY + textHeight * 3 + meterSpacer * 2;
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	f8b3 3156 	ldrh.w	r3, [r3, #342]	@ 0x156
 80165d8:	4619      	mov	r1, r3
 80165da:	460b      	mov	r3, r1
 80165dc:	005b      	lsls	r3, r3, #1
 80165de:	440b      	add	r3, r1
 80165e0:	441a      	add	r2, r3
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80165e8:	005b      	lsls	r3, r3, #1
 80165ea:	441a      	add	r2, r3
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
    canvas.setTextColor(TEXT_COLOR);
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	3358      	adds	r3, #88	@ 0x58
 80165f6:	f24a 3129 	movw	r1, #41769	@ 0xa329
 80165fa:	4618      	mov	r0, r3
 80165fc:	f7ea fef5 	bl	80013ea <_ZN12Adafruit_GFX12setTextColorEt>

    canvas.setCursor(textX, textY);
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 801660c:	b219      	sxth	r1, r3
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8016614:	b21b      	sxth	r3, r3
 8016616:	461a      	mov	r2, r3
 8016618:	f7ea fed3 	bl	80013c2 <_ZN12Adafruit_GFX9setCursorEss>
    canvas.print("Dr. Ed Carr, Fort Collins, CO");
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	3358      	adds	r3, #88	@ 0x58
 8016620:	4905      	ldr	r1, [pc, #20]	@ (8016638 <_ZN6Screen11renderMeterEv+0x774>)
 8016622:	4618      	mov	r0, r3
 8016624:	f7ec fe4d 	bl	80032c2 <_ZN5Print5printEPKc>
    //
    // canvas.getTextBounds("Fort Collins, CO", 0, 0, &textOriginX, &textOriginY, &fccotextWidth, &fccotextHeight);
    // canvas.setCursor(width / 2 - fccotextWidth / 2, screenOffset + statusHeight + meterHeight + dttextHeight + tictextHeight + fccotextHeight + screenOffset);
    // canvas.print("Fort Collins, CO");
    //
}
 8016628:	bf00      	nop
 801662a:	3714      	adds	r7, #20
 801662c:	46bd      	mov	sp, r7
 801662e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016630:	0801b7f8 	.word	0x0801b7f8
 8016634:	0801b808 	.word	0x0801b808
 8016638:	0801b820 	.word	0x0801b820
 801663c:	00000000 	.word	0x00000000

08016640 <_ZN6Screen14drawMeterLinesEiiiii>:

void Screen::drawMeterLines(int centerX, int centerY, int radius, int lineStart, int lineEnd)
{ // points = 8 - - 8 = 16
 8016640:	b5b0      	push	{r4, r5, r7, lr}
 8016642:	ed2d 8b02 	vpush	{d8}
 8016646:	b098      	sub	sp, #96	@ 0x60
 8016648:	af04      	add	r7, sp, #16
 801664a:	60f8      	str	r0, [r7, #12]
 801664c:	60b9      	str	r1, [r7, #8]
 801664e:	607a      	str	r2, [r7, #4]
 8016650:	603b      	str	r3, [r7, #0]
    int points = lineEnd - lineStart;
 8016652:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8016654:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016656:	1ad3      	subs	r3, r2, r3
 8016658:	647b      	str	r3, [r7, #68]	@ 0x44
    //[0 1 2 ... 17 18]
    canvas.fillCircle(centerX, centerY, 3, ST7789V_BLACK);
 801665a:	68fb      	ldr	r3, [r7, #12]
 801665c:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8016660:	68bb      	ldr	r3, [r7, #8]
 8016662:	b219      	sxth	r1, r3
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	b21a      	sxth	r2, r3
 8016668:	2300      	movs	r3, #0
 801666a:	9300      	str	r3, [sp, #0]
 801666c:	2303      	movs	r3, #3
 801666e:	f7eb f9d6 	bl	8001a1e <_ZN12Adafruit_GFX10fillCircleEssst>

    // Loop to draw the lines
    for (int i = lineStart; i <= lineEnd; i++)
 8016672:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016674:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8016676:	e270      	b.n	8016b5a <_ZN6Screen14drawMeterLinesEiiiii+0x51a>
    {
        // Calculate angle for the line
        // float angle = (i * (90.0 / points)) + 235 - 90 / points;
        // goes from -8 * 90/16 + 270 = 225, to 8 * 90/18 + 270 = 315
        float angle = (i * (90.0 / points)) + 270; // distribute over 90 deg and shift by 270
 8016678:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801667a:	f7e9 ff2b 	bl	80004d4 <__aeabi_i2d>
 801667e:	4604      	mov	r4, r0
 8016680:	460d      	mov	r5, r1
 8016682:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8016684:	f7e9 ff26 	bl	80004d4 <__aeabi_i2d>
 8016688:	4602      	mov	r2, r0
 801668a:	460b      	mov	r3, r1
 801668c:	f04f 0000 	mov.w	r0, #0
 8016690:	49bd      	ldr	r1, [pc, #756]	@ (8016988 <_ZN6Screen14drawMeterLinesEiiiii+0x348>)
 8016692:	f7ea f8b3 	bl	80007fc <__aeabi_ddiv>
 8016696:	4602      	mov	r2, r0
 8016698:	460b      	mov	r3, r1
 801669a:	4620      	mov	r0, r4
 801669c:	4629      	mov	r1, r5
 801669e:	f7e9 ff83 	bl	80005a8 <__aeabi_dmul>
 80166a2:	4602      	mov	r2, r0
 80166a4:	460b      	mov	r3, r1
 80166a6:	4610      	mov	r0, r2
 80166a8:	4619      	mov	r1, r3
 80166aa:	a3b5      	add	r3, pc, #724	@ (adr r3, 8016980 <_ZN6Screen14drawMeterLinesEiiiii+0x340>)
 80166ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166b0:	f7e9 fdc4 	bl	800023c <__adddf3>
 80166b4:	4602      	mov	r2, r0
 80166b6:	460b      	mov	r3, r1
 80166b8:	4610      	mov	r0, r2
 80166ba:	4619      	mov	r1, r3
 80166bc:	f7ea fa4c 	bl	8000b58 <__aeabi_d2f>
 80166c0:	4603      	mov	r3, r0
 80166c2:	643b      	str	r3, [r7, #64]	@ 0x40

        // Convert angle to radians
        float rad = radians(angle);
 80166c4:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 80166c8:	68f8      	ldr	r0, [r7, #12]
 80166ca:	f000 fb01 	bl	8016cd0 <_ZN6Screen7radiansEf>
 80166ce:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c

        // Calculate the endpoint of the line (on the circle's perimeter) // outer ring i think
        int xEnd = centerX + radius * cos(rad);
 80166d2:	68bb      	ldr	r3, [r7, #8]
 80166d4:	ee07 3a90 	vmov	s15, r3
 80166d8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80166dc:	683b      	ldr	r3, [r7, #0]
 80166de:	ee07 3a90 	vmov	s15, r3
 80166e2:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 80166e6:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 80166ea:	f7ff fbcb 	bl	8015e84 <_ZSt3cosf>
 80166ee:	eef0 7a40 	vmov.f32	s15, s0
 80166f2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80166f6:	ee78 7a27 	vadd.f32	s15, s16, s15
 80166fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80166fe:	ee17 3a90 	vmov	r3, s15
 8016702:	63bb      	str	r3, [r7, #56]	@ 0x38
        int yEnd = centerY + radius * sin(rad);
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	ee07 3a90 	vmov	s15, r3
 801670a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 801670e:	683b      	ldr	r3, [r7, #0]
 8016710:	ee07 3a90 	vmov	s15, r3
 8016714:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8016718:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 801671c:	f7ff fbc2 	bl	8015ea4 <_ZSt3sinf>
 8016720:	eef0 7a40 	vmov.f32	s15, s0
 8016724:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8016728:	ee78 7a27 	vadd.f32	s15, s16, s15
 801672c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016730:	ee17 3a90 	vmov	r3, s15
 8016734:	637b      	str	r3, [r7, #52]	@ 0x34

        // Calculate the endpoint of the line (on the circle's perimeter)
        int xStart = centerX + (radius - 20) * cos(rad);
 8016736:	68bb      	ldr	r3, [r7, #8]
 8016738:	ee07 3a90 	vmov	s15, r3
 801673c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8016740:	683b      	ldr	r3, [r7, #0]
 8016742:	3b14      	subs	r3, #20
 8016744:	ee07 3a90 	vmov	s15, r3
 8016748:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 801674c:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8016750:	f7ff fb98 	bl	8015e84 <_ZSt3cosf>
 8016754:	eef0 7a40 	vmov.f32	s15, s0
 8016758:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801675c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8016760:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016764:	ee17 3a90 	vmov	r3, s15
 8016768:	633b      	str	r3, [r7, #48]	@ 0x30
        int yStart = centerY + (radius - 20) * sin(rad);
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	ee07 3a90 	vmov	s15, r3
 8016770:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8016774:	683b      	ldr	r3, [r7, #0]
 8016776:	3b14      	subs	r3, #20
 8016778:	ee07 3a90 	vmov	s15, r3
 801677c:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8016780:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8016784:	f7ff fb8e 	bl	8015ea4 <_ZSt3sinf>
 8016788:	eef0 7a40 	vmov.f32	s15, s0
 801678c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8016790:	ee78 7a27 	vadd.f32	s15, s16, s15
 8016794:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016798:	ee17 3a90 	vmov	r3, s15
 801679c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        // Draw a normal line
        canvas.drawLine(xStart, yStart, xEnd, yEnd, ST7789V_BLACK);
 801679e:	68fb      	ldr	r3, [r7, #12]
 80167a0:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80167a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167a6:	b219      	sxth	r1, r3
 80167a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167aa:	b21a      	sxth	r2, r3
 80167ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80167ae:	b21c      	sxth	r4, r3
 80167b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80167b2:	b21b      	sxth	r3, r3
 80167b4:	2500      	movs	r5, #0
 80167b6:	9501      	str	r5, [sp, #4]
 80167b8:	9300      	str	r3, [sp, #0]
 80167ba:	4623      	mov	r3, r4
 80167bc:	f7eb f8b2 	bl	8001924 <_ZN12Adafruit_GFX8drawLineEsssst>

        if (i == lineStart)
 80167c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80167c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80167c4:	429a      	cmp	r2, r3
 80167c6:	d122      	bne.n	801680e <_ZN6Screen14drawMeterLinesEiiiii+0x1ce>
        {

            canvas.setCursor(overallBorderX + meterSpacer, yEnd - 10);
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80167ce:	68fb      	ldr	r3, [r7, #12]
 80167d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80167d4:	b29a      	uxth	r2, r3
 80167d6:	68fb      	ldr	r3, [r7, #12]
 80167d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80167dc:	b29b      	uxth	r3, r3
 80167de:	4413      	add	r3, r2
 80167e0:	b29b      	uxth	r3, r3
 80167e2:	b219      	sxth	r1, r3
 80167e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80167e6:	b29b      	uxth	r3, r3
 80167e8:	3b0a      	subs	r3, #10
 80167ea:	b29b      	uxth	r3, r3
 80167ec:	b21b      	sxth	r3, r3
 80167ee:	461a      	mov	r2, r3
 80167f0:	f7ea fde7 	bl	80013c2 <_ZN12Adafruit_GFX9setCursorEss>
            canvas.setTextColor(TEXT_COLOR);
 80167f4:	68fb      	ldr	r3, [r7, #12]
 80167f6:	3358      	adds	r3, #88	@ 0x58
 80167f8:	f24a 3129 	movw	r1, #41769	@ 0xa329
 80167fc:	4618      	mov	r0, r3
 80167fe:	f7ea fdf4 	bl	80013ea <_ZN12Adafruit_GFX12setTextColorEt>
            canvas.print("25");
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	3358      	adds	r3, #88	@ 0x58
 8016806:	4961      	ldr	r1, [pc, #388]	@ (801698c <_ZN6Screen14drawMeterLinesEiiiii+0x34c>)
 8016808:	4618      	mov	r0, r3
 801680a:	f7ec fd5a 	bl	80032c2 <_ZN5Print5printEPKc>
        }

        if (i == -3)
 801680e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016810:	f113 0f03 	cmn.w	r3, #3
 8016814:	d151      	bne.n	80168ba <_ZN6Screen14drawMeterLinesEiiiii+0x27a>
        {
            canvas.setTextColor(TEXT_COLOR);
 8016816:	68fb      	ldr	r3, [r7, #12]
 8016818:	3358      	adds	r3, #88	@ 0x58
 801681a:	f24a 3129 	movw	r1, #41769	@ 0xa329
 801681e:	4618      	mov	r0, r3
 8016820:	f7ea fde3 	bl	80013ea <_ZN12Adafruit_GFX12setTextColorEt>

            canvas.setCursor(xEnd, yEnd - 20);
 8016824:	68fb      	ldr	r3, [r7, #12]
 8016826:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 801682a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801682c:	b219      	sxth	r1, r3
 801682e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016830:	b29b      	uxth	r3, r3
 8016832:	3b14      	subs	r3, #20
 8016834:	b29b      	uxth	r3, r3
 8016836:	b21b      	sxth	r3, r3
 8016838:	461a      	mov	r2, r3
 801683a:	f7ea fdc2 	bl	80013c2 <_ZN12Adafruit_GFX9setCursorEss>

            canvas.print("LO");
 801683e:	68fb      	ldr	r3, [r7, #12]
 8016840:	3358      	adds	r3, #88	@ 0x58
 8016842:	4953      	ldr	r1, [pc, #332]	@ (8016990 <_ZN6Screen14drawMeterLinesEiiiii+0x350>)
 8016844:	4618      	mov	r0, r3
 8016846:	f7ec fd3c 	bl	80032c2 <_ZN5Print5printEPKc>

            canvas.getTextBounds("HI", 0, 0, &textOriginX, &textOriginY, &textWidth, &textHeight);
 801684a:	68fb      	ldr	r3, [r7, #12]
 801684c:	f103 0458 	add.w	r4, r3, #88	@ 0x58
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8016856:	68fa      	ldr	r2, [r7, #12]
 8016858:	f502 72a9 	add.w	r2, r2, #338	@ 0x152
 801685c:	68f9      	ldr	r1, [r7, #12]
 801685e:	f501 71aa 	add.w	r1, r1, #340	@ 0x154
 8016862:	68f8      	ldr	r0, [r7, #12]
 8016864:	f500 70ab 	add.w	r0, r0, #342	@ 0x156
 8016868:	9003      	str	r0, [sp, #12]
 801686a:	9102      	str	r1, [sp, #8]
 801686c:	9201      	str	r2, [sp, #4]
 801686e:	9300      	str	r3, [sp, #0]
 8016870:	2300      	movs	r3, #0
 8016872:	2200      	movs	r2, #0
 8016874:	4947      	ldr	r1, [pc, #284]	@ (8016994 <_ZN6Screen14drawMeterLinesEiiiii+0x354>)
 8016876:	4620      	mov	r0, r4
 8016878:	f7ec f891 	bl	800299e <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>

            canvas.setCursor(overallBorderWidth - xEnd - textWidth, yEnd - 20);
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016888:	b29a      	uxth	r2, r3
 801688a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801688c:	b29b      	uxth	r3, r3
 801688e:	1ad3      	subs	r3, r2, r3
 8016890:	b29a      	uxth	r2, r3
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	f8b3 3154 	ldrh.w	r3, [r3, #340]	@ 0x154
 8016898:	1ad3      	subs	r3, r2, r3
 801689a:	b29b      	uxth	r3, r3
 801689c:	b219      	sxth	r1, r3
 801689e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80168a0:	b29b      	uxth	r3, r3
 80168a2:	3b14      	subs	r3, #20
 80168a4:	b29b      	uxth	r3, r3
 80168a6:	b21b      	sxth	r3, r3
 80168a8:	461a      	mov	r2, r3
 80168aa:	f7ea fd8a 	bl	80013c2 <_ZN12Adafruit_GFX9setCursorEss>

            canvas.print("HI");
 80168ae:	68fb      	ldr	r3, [r7, #12]
 80168b0:	3358      	adds	r3, #88	@ 0x58
 80168b2:	4938      	ldr	r1, [pc, #224]	@ (8016994 <_ZN6Screen14drawMeterLinesEiiiii+0x354>)
 80168b4:	4618      	mov	r0, r3
 80168b6:	f7ec fd04 	bl	80032c2 <_ZN5Print5printEPKc>
        }

        if (i == 0)
 80168ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d13a      	bne.n	8016936 <_ZN6Screen14drawMeterLinesEiiiii+0x2f6>
        {
            canvas.getTextBounds("0", 0, 0, &textOriginX, &textOriginY, &textWidth, &textHeight);
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	f103 0458 	add.w	r4, r3, #88	@ 0x58
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80168cc:	68fa      	ldr	r2, [r7, #12]
 80168ce:	f502 72a9 	add.w	r2, r2, #338	@ 0x152
 80168d2:	68f9      	ldr	r1, [r7, #12]
 80168d4:	f501 71aa 	add.w	r1, r1, #340	@ 0x154
 80168d8:	68f8      	ldr	r0, [r7, #12]
 80168da:	f500 70ab 	add.w	r0, r0, #342	@ 0x156
 80168de:	9003      	str	r0, [sp, #12]
 80168e0:	9102      	str	r1, [sp, #8]
 80168e2:	9201      	str	r2, [sp, #4]
 80168e4:	9300      	str	r3, [sp, #0]
 80168e6:	2300      	movs	r3, #0
 80168e8:	2200      	movs	r2, #0
 80168ea:	492b      	ldr	r1, [pc, #172]	@ (8016998 <_ZN6Screen14drawMeterLinesEiiiii+0x358>)
 80168ec:	4620      	mov	r0, r4
 80168ee:	f7ec f856 	bl	800299e <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>

            canvas.setCursor(xEnd - textWidth / 2, yEnd - 5);
 80168f2:	68fb      	ldr	r3, [r7, #12]
 80168f4:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80168f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80168fa:	b29a      	uxth	r2, r3
 80168fc:	68fb      	ldr	r3, [r7, #12]
 80168fe:	f8b3 3154 	ldrh.w	r3, [r3, #340]	@ 0x154
 8016902:	085b      	lsrs	r3, r3, #1
 8016904:	b29b      	uxth	r3, r3
 8016906:	1ad3      	subs	r3, r2, r3
 8016908:	b29b      	uxth	r3, r3
 801690a:	b219      	sxth	r1, r3
 801690c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801690e:	b29b      	uxth	r3, r3
 8016910:	3b05      	subs	r3, #5
 8016912:	b29b      	uxth	r3, r3
 8016914:	b21b      	sxth	r3, r3
 8016916:	461a      	mov	r2, r3
 8016918:	f7ea fd53 	bl	80013c2 <_ZN12Adafruit_GFX9setCursorEss>
            canvas.setTextColor(TEXT_COLOR);
 801691c:	68fb      	ldr	r3, [r7, #12]
 801691e:	3358      	adds	r3, #88	@ 0x58
 8016920:	f24a 3129 	movw	r1, #41769	@ 0xa329
 8016924:	4618      	mov	r0, r3
 8016926:	f7ea fd60 	bl	80013ea <_ZN12Adafruit_GFX12setTextColorEt>

            canvas.print("0");
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	3358      	adds	r3, #88	@ 0x58
 801692e:	491a      	ldr	r1, [pc, #104]	@ (8016998 <_ZN6Screen14drawMeterLinesEiiiii+0x358>)
 8016930:	4618      	mov	r0, r3
 8016932:	f7ec fcc6 	bl	80032c2 <_ZN5Print5printEPKc>
        }

        if (i == lineEnd)
 8016936:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8016938:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801693a:	429a      	cmp	r2, r3
 801693c:	d150      	bne.n	80169e0 <_ZN6Screen14drawMeterLinesEiiiii+0x3a0>
        {
            canvas.getTextBounds("25", 0, 0, &textOriginX, &textOriginY, &textWidth, &textHeight);
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	f103 0458 	add.w	r4, r3, #88	@ 0x58
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801694a:	68fa      	ldr	r2, [r7, #12]
 801694c:	f502 72a9 	add.w	r2, r2, #338	@ 0x152
 8016950:	68f9      	ldr	r1, [r7, #12]
 8016952:	f501 71aa 	add.w	r1, r1, #340	@ 0x154
 8016956:	68f8      	ldr	r0, [r7, #12]
 8016958:	f500 70ab 	add.w	r0, r0, #342	@ 0x156
 801695c:	9003      	str	r0, [sp, #12]
 801695e:	9102      	str	r1, [sp, #8]
 8016960:	9201      	str	r2, [sp, #4]
 8016962:	9300      	str	r3, [sp, #0]
 8016964:	2300      	movs	r3, #0
 8016966:	2200      	movs	r2, #0
 8016968:	4908      	ldr	r1, [pc, #32]	@ (801698c <_ZN6Screen14drawMeterLinesEiiiii+0x34c>)
 801696a:	4620      	mov	r0, r4
 801696c:	f7ec f817 	bl	800299e <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>

            canvas.setCursor(overallBorderWidth - textWidth - meterSpacer, yEnd - 10);
 8016970:	68fb      	ldr	r3, [r7, #12]
 8016972:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801697c:	e00e      	b.n	801699c <_ZN6Screen14drawMeterLinesEiiiii+0x35c>
 801697e:	bf00      	nop
 8016980:	00000000 	.word	0x00000000
 8016984:	4070e000 	.word	0x4070e000
 8016988:	40568000 	.word	0x40568000
 801698c:	0801b840 	.word	0x0801b840
 8016990:	0801b844 	.word	0x0801b844
 8016994:	0801b848 	.word	0x0801b848
 8016998:	0801b84c 	.word	0x0801b84c
 801699c:	b29a      	uxth	r2, r3
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	f8b3 3154 	ldrh.w	r3, [r3, #340]	@ 0x154
 80169a4:	1ad3      	subs	r3, r2, r3
 80169a6:	b29a      	uxth	r2, r3
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80169ae:	b29b      	uxth	r3, r3
 80169b0:	1ad3      	subs	r3, r2, r3
 80169b2:	b29b      	uxth	r3, r3
 80169b4:	b219      	sxth	r1, r3
 80169b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80169b8:	b29b      	uxth	r3, r3
 80169ba:	3b0a      	subs	r3, #10
 80169bc:	b29b      	uxth	r3, r3
 80169be:	b21b      	sxth	r3, r3
 80169c0:	461a      	mov	r2, r3
 80169c2:	f7ea fcfe 	bl	80013c2 <_ZN12Adafruit_GFX9setCursorEss>
            canvas.setTextColor(TEXT_COLOR);
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	3358      	adds	r3, #88	@ 0x58
 80169ca:	f24a 3129 	movw	r1, #41769	@ 0xa329
 80169ce:	4618      	mov	r0, r3
 80169d0:	f7ea fd0b 	bl	80013ea <_ZN12Adafruit_GFX12setTextColorEt>
            canvas.print("25");
 80169d4:	68fb      	ldr	r3, [r7, #12]
 80169d6:	3358      	adds	r3, #88	@ 0x58
 80169d8:	4969      	ldr	r1, [pc, #420]	@ (8016b80 <_ZN6Screen14drawMeterLinesEiiiii+0x540>)
 80169da:	4618      	mov	r0, r3
 80169dc:	f7ec fc71 	bl	80032c2 <_ZN5Print5printEPKc>
        }

        // draw all the little tick marks
        for (int i = lineStart * 4; i <= lineEnd * 4; i++)
 80169e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80169e2:	009b      	lsls	r3, r3, #2
 80169e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80169e6:	e0af      	b.n	8016b48 <_ZN6Screen14drawMeterLinesEiiiii+0x508>
        {
            float angle = (i * 0.25 * (90.0 / points)) + 270; // distribute over 90 deg and shift by 270
 80169e8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80169ea:	f7e9 fd73 	bl	80004d4 <__aeabi_i2d>
 80169ee:	f04f 0200 	mov.w	r2, #0
 80169f2:	4b64      	ldr	r3, [pc, #400]	@ (8016b84 <_ZN6Screen14drawMeterLinesEiiiii+0x544>)
 80169f4:	f7e9 fdd8 	bl	80005a8 <__aeabi_dmul>
 80169f8:	4602      	mov	r2, r0
 80169fa:	460b      	mov	r3, r1
 80169fc:	4614      	mov	r4, r2
 80169fe:	461d      	mov	r5, r3
 8016a00:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8016a02:	f7e9 fd67 	bl	80004d4 <__aeabi_i2d>
 8016a06:	4602      	mov	r2, r0
 8016a08:	460b      	mov	r3, r1
 8016a0a:	f04f 0000 	mov.w	r0, #0
 8016a0e:	495e      	ldr	r1, [pc, #376]	@ (8016b88 <_ZN6Screen14drawMeterLinesEiiiii+0x548>)
 8016a10:	f7e9 fef4 	bl	80007fc <__aeabi_ddiv>
 8016a14:	4602      	mov	r2, r0
 8016a16:	460b      	mov	r3, r1
 8016a18:	4620      	mov	r0, r4
 8016a1a:	4629      	mov	r1, r5
 8016a1c:	f7e9 fdc4 	bl	80005a8 <__aeabi_dmul>
 8016a20:	4602      	mov	r2, r0
 8016a22:	460b      	mov	r3, r1
 8016a24:	4610      	mov	r0, r2
 8016a26:	4619      	mov	r1, r3
 8016a28:	a353      	add	r3, pc, #332	@ (adr r3, 8016b78 <_ZN6Screen14drawMeterLinesEiiiii+0x538>)
 8016a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a2e:	f7e9 fc05 	bl	800023c <__adddf3>
 8016a32:	4602      	mov	r2, r0
 8016a34:	460b      	mov	r3, r1
 8016a36:	4610      	mov	r0, r2
 8016a38:	4619      	mov	r1, r3
 8016a3a:	f7ea f88d 	bl	8000b58 <__aeabi_d2f>
 8016a3e:	4603      	mov	r3, r0
 8016a40:	62bb      	str	r3, [r7, #40]	@ 0x28

            // Convert angle to radians
            float rad = radians(angle);
 8016a42:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8016a46:	68f8      	ldr	r0, [r7, #12]
 8016a48:	f000 f942 	bl	8016cd0 <_ZN6Screen7radiansEf>
 8016a4c:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

            // Calculate the endpoint of the line (on the circle's perimeter) // outer ring i think
            int xEnd = centerX + (radius - 10) * cos(rad);
 8016a50:	68bb      	ldr	r3, [r7, #8]
 8016a52:	ee07 3a90 	vmov	s15, r3
 8016a56:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8016a5a:	683b      	ldr	r3, [r7, #0]
 8016a5c:	3b0a      	subs	r3, #10
 8016a5e:	ee07 3a90 	vmov	s15, r3
 8016a62:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8016a66:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8016a6a:	f7ff fa0b 	bl	8015e84 <_ZSt3cosf>
 8016a6e:	eef0 7a40 	vmov.f32	s15, s0
 8016a72:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8016a76:	ee78 7a27 	vadd.f32	s15, s16, s15
 8016a7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016a7e:	ee17 3a90 	vmov	r3, s15
 8016a82:	623b      	str	r3, [r7, #32]
            int yEnd = centerY + (radius - 10) * sin(rad);
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	ee07 3a90 	vmov	s15, r3
 8016a8a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8016a8e:	683b      	ldr	r3, [r7, #0]
 8016a90:	3b0a      	subs	r3, #10
 8016a92:	ee07 3a90 	vmov	s15, r3
 8016a96:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8016a9a:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8016a9e:	f7ff fa01 	bl	8015ea4 <_ZSt3sinf>
 8016aa2:	eef0 7a40 	vmov.f32	s15, s0
 8016aa6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8016aaa:	ee78 7a27 	vadd.f32	s15, s16, s15
 8016aae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016ab2:	ee17 3a90 	vmov	r3, s15
 8016ab6:	61fb      	str	r3, [r7, #28]

            // Calculate the endpoint of the line (on the circle's perimeter)
            int xStart = centerX + (radius - 20) * cos(rad);
 8016ab8:	68bb      	ldr	r3, [r7, #8]
 8016aba:	ee07 3a90 	vmov	s15, r3
 8016abe:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8016ac2:	683b      	ldr	r3, [r7, #0]
 8016ac4:	3b14      	subs	r3, #20
 8016ac6:	ee07 3a90 	vmov	s15, r3
 8016aca:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8016ace:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8016ad2:	f7ff f9d7 	bl	8015e84 <_ZSt3cosf>
 8016ad6:	eef0 7a40 	vmov.f32	s15, s0
 8016ada:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8016ade:	ee78 7a27 	vadd.f32	s15, s16, s15
 8016ae2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016ae6:	ee17 3a90 	vmov	r3, s15
 8016aea:	61bb      	str	r3, [r7, #24]
            int yStart = centerY + (radius - 20) * sin(rad);
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	ee07 3a90 	vmov	s15, r3
 8016af2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8016af6:	683b      	ldr	r3, [r7, #0]
 8016af8:	3b14      	subs	r3, #20
 8016afa:	ee07 3a90 	vmov	s15, r3
 8016afe:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8016b02:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8016b06:	f7ff f9cd 	bl	8015ea4 <_ZSt3sinf>
 8016b0a:	eef0 7a40 	vmov.f32	s15, s0
 8016b0e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8016b12:	ee78 7a27 	vadd.f32	s15, s16, s15
 8016b16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016b1a:	ee17 3a90 	vmov	r3, s15
 8016b1e:	617b      	str	r3, [r7, #20]

            // Draw a normal line
            canvas.drawLine(xStart, yStart, xEnd, yEnd, ST7789V_BLACK);
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8016b26:	69bb      	ldr	r3, [r7, #24]
 8016b28:	b219      	sxth	r1, r3
 8016b2a:	697b      	ldr	r3, [r7, #20]
 8016b2c:	b21a      	sxth	r2, r3
 8016b2e:	6a3b      	ldr	r3, [r7, #32]
 8016b30:	b21c      	sxth	r4, r3
 8016b32:	69fb      	ldr	r3, [r7, #28]
 8016b34:	b21b      	sxth	r3, r3
 8016b36:	2500      	movs	r5, #0
 8016b38:	9501      	str	r5, [sp, #4]
 8016b3a:	9300      	str	r3, [sp, #0]
 8016b3c:	4623      	mov	r3, r4
 8016b3e:	f7ea fef1 	bl	8001924 <_ZN12Adafruit_GFX8drawLineEsssst>
        for (int i = lineStart * 4; i <= lineEnd * 4; i++)
 8016b42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016b44:	3301      	adds	r3, #1
 8016b46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016b48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016b4a:	009b      	lsls	r3, r3, #2
 8016b4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8016b4e:	429a      	cmp	r2, r3
 8016b50:	f77f af4a 	ble.w	80169e8 <_ZN6Screen14drawMeterLinesEiiiii+0x3a8>
    for (int i = lineStart; i <= lineEnd; i++)
 8016b54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016b56:	3301      	adds	r3, #1
 8016b58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8016b5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8016b5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016b5e:	429a      	cmp	r2, r3
 8016b60:	f77f ad8a 	ble.w	8016678 <_ZN6Screen14drawMeterLinesEiiiii+0x38>
        }
    }
}
 8016b64:	bf00      	nop
 8016b66:	bf00      	nop
 8016b68:	3750      	adds	r7, #80	@ 0x50
 8016b6a:	46bd      	mov	sp, r7
 8016b6c:	ecbd 8b02 	vpop	{d8}
 8016b70:	bdb0      	pop	{r4, r5, r7, pc}
 8016b72:	bf00      	nop
 8016b74:	f3af 8000 	nop.w
 8016b78:	00000000 	.word	0x00000000
 8016b7c:	4070e000 	.word	0x4070e000
 8016b80:	0801b840 	.word	0x0801b840
 8016b84:	3fd00000 	.word	0x3fd00000
 8016b88:	40568000 	.word	0x40568000

08016b8c <_ZN12Adafruit_GFX11setTextWrapEb>:
  @brief  Set whether text that is too long for the screen width should
          automatically wrap around to the next line (else clip right).
  @param  w  true for wrapping, false for clipping
  */
  /**********************************************************************/
  void setTextWrap(bool w) { wrap = w; }
 8016b8c:	b480      	push	{r7}
 8016b8e:	b083      	sub	sp, #12
 8016b90:	af00      	add	r7, sp, #0
 8016b92:	6078      	str	r0, [r7, #4]
 8016b94:	460b      	mov	r3, r1
 8016b96:	70fb      	strb	r3, [r7, #3]
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	78fa      	ldrb	r2, [r7, #3]
 8016b9c:	76da      	strb	r2, [r3, #27]
 8016b9e:	bf00      	nop
 8016ba0:	370c      	adds	r7, #12
 8016ba2:	46bd      	mov	sp, r7
 8016ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ba8:	4770      	bx	lr

08016baa <_ZNK11GFXcanvas169getBufferEv>:
  /*!
    @brief    Get a pointer to the internal buffer memory
    @returns  A pointer to the allocated buffer
  */
  /**********************************************************************/
  uint16_t *getBuffer(void) const { return buffer; }
 8016baa:	b480      	push	{r7}
 8016bac:	b083      	sub	sp, #12
 8016bae:	af00      	add	r7, sp, #0
 8016bb0:	6078      	str	r0, [r7, #4]
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016bb6:	4618      	mov	r0, r3
 8016bb8:	370c      	adds	r7, #12
 8016bba:	46bd      	mov	sp, r7
 8016bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bc0:	4770      	bx	lr
	...

08016bc4 <_ZN6Screen5setupEv>:
#include "Screen.hpp"

void Screen::setup(void)
{
 8016bc4:	b5b0      	push	{r4, r5, r7, lr}
 8016bc6:	b084      	sub	sp, #16
 8016bc8:	af02      	add	r7, sp, #8
 8016bca:	6078      	str	r0, [r7, #4]

    needleBuffer[32] = {0};
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	2200      	movs	r2, #0
 8016bd0:	f883 2225 	strb.w	r2, [r3, #549]	@ 0x225

    // SPI_Set_Mode(0);

    totalPixels = canvas.width() * canvas.height();
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	3358      	adds	r3, #88	@ 0x58
 8016bd8:	4618      	mov	r0, r3
 8016bda:	f7ea fc19 	bl	8001410 <_ZNK12Adafruit_GFX5widthEv>
 8016bde:	4603      	mov	r3, r0
 8016be0:	461c      	mov	r4, r3
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	3358      	adds	r3, #88	@ 0x58
 8016be6:	4618      	mov	r0, r3
 8016be8:	f7ea fc1f 	bl	800142a <_ZNK12Adafruit_GFX6heightEv>
 8016bec:	4603      	mov	r3, r0
 8016bee:	fb04 f303 	mul.w	r3, r4, r3
 8016bf2:	461a      	mov	r2, r3
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	655a      	str	r2, [r3, #84]	@ 0x54

    tft.begin();
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	4618      	mov	r0, r3
 8016bfc:	f7ec fbb0 	bl	8003360 <_ZN13ST7789V_STM325beginEv>
    tft.setRotation(2); // places the screen connector further away from the probe tubes
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	2102      	movs	r1, #2
 8016c04:	4618      	mov	r0, r3
 8016c06:	f7ec ff11 	bl	8003a2c <_ZN13ST7789V_STM3211setRotationEh>
    tft.setFont(&FreeSans9pt7b);
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	491a      	ldr	r1, [pc, #104]	@ (8016c78 <_ZN6Screen5setupEv+0xb4>)
 8016c0e:	4618      	mov	r0, r3
 8016c10:	f7eb fcf8 	bl	8002604 <_ZN12Adafruit_GFX7setFontEPK7GFXfont>
    tft.setTextWrap(true);
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	2101      	movs	r1, #1
 8016c18:	4618      	mov	r0, r3
 8016c1a:	f7ff ffb7 	bl	8016b8c <_ZN12Adafruit_GFX11setTextWrapEb>
    tft.setTextSize(1);
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	2101      	movs	r1, #1
 8016c22:	4618      	mov	r0, r3
 8016c24:	f7eb fc87 	bl	8002536 <_ZN12Adafruit_GFX11setTextSizeEh>
    tft.setWindow(0, 0, canvas.width() - 1, canvas.height() - 1);
 8016c28:	687c      	ldr	r4, [r7, #4]
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	3358      	adds	r3, #88	@ 0x58
 8016c2e:	4618      	mov	r0, r3
 8016c30:	f7ea fbee 	bl	8001410 <_ZNK12Adafruit_GFX5widthEv>
 8016c34:	4603      	mov	r3, r0
 8016c36:	b29b      	uxth	r3, r3
 8016c38:	3b01      	subs	r3, #1
 8016c3a:	b29d      	uxth	r5, r3
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	3358      	adds	r3, #88	@ 0x58
 8016c40:	4618      	mov	r0, r3
 8016c42:	f7ea fbf2 	bl	800142a <_ZNK12Adafruit_GFX6heightEv>
 8016c46:	4603      	mov	r3, r0
 8016c48:	b29b      	uxth	r3, r3
 8016c4a:	3b01      	subs	r3, #1
 8016c4c:	b29b      	uxth	r3, r3
 8016c4e:	9300      	str	r3, [sp, #0]
 8016c50:	462b      	mov	r3, r5
 8016c52:	2200      	movs	r2, #0
 8016c54:	2100      	movs	r1, #0
 8016c56:	4620      	mov	r0, r4
 8016c58:	f7ec ffc7 	bl	8003bea <_ZN13ST7789V_STM329setWindowEtttt>

    // initial state: meter
    page = METER;
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	2200      	movs	r2, #0
 8016c60:	f883 2225 	strb.w	r2, [r3, #549]	@ 0x225
    renderMeter();
 8016c64:	6878      	ldr	r0, [r7, #4]
 8016c66:	f7ff f92d 	bl	8015ec4 <_ZN6Screen11renderMeterEv>
    // canvas.byteSwap();

    writeCanvas();
 8016c6a:	6878      	ldr	r0, [r7, #4]
 8016c6c:	f000 f811 	bl	8016c92 <_ZN6Screen11writeCanvasEv>
    // renderMeter(canvas);

    // fadeIn();
}
 8016c70:	bf00      	nop
 8016c72:	3708      	adds	r7, #8
 8016c74:	46bd      	mov	sp, r7
 8016c76:	bdb0      	pop	{r4, r5, r7, pc}
 8016c78:	0801c864 	.word	0x0801c864

08016c7c <_ZN6Screen12stateMachineEv>:

void Screen::stateMachine(void)

{
 8016c7c:	b580      	push	{r7, lr}
 8016c7e:	b082      	sub	sp, #8
 8016c80:	af00      	add	r7, sp, #0
 8016c82:	6078      	str	r0, [r7, #4]

    // switch (page)
    // {
    // case METER:
    //
    updateMeter();
 8016c84:	6878      	ldr	r0, [r7, #4]
 8016c86:	f000 f851 	bl	8016d2c <_ZN6Screen11updateMeterEv>
    //     break;
    //
    // default:
    //     break;
    // }
}
 8016c8a:	bf00      	nop
 8016c8c:	3708      	adds	r7, #8
 8016c8e:	46bd      	mov	sp, r7
 8016c90:	bd80      	pop	{r7, pc}

08016c92 <_ZN6Screen11writeCanvasEv>:

void Screen::writeCanvas(void)
{
 8016c92:	b580      	push	{r7, lr}
 8016c94:	b084      	sub	sp, #16
 8016c96:	af00      	add	r7, sp, #0
 8016c98:	6078      	str	r0, [r7, #4]

    // SPI_Set_Mode(0);
    uint16_t *buffer = canvas.getBuffer();
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	3358      	adds	r3, #88	@ 0x58
 8016c9e:	4618      	mov	r0, r3
 8016ca0:	f7ff ff83 	bl	8016baa <_ZNK11GFXcanvas169getBufferEv>
 8016ca4:	60f8      	str	r0, [r7, #12]
    tft.startWrite();
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	4618      	mov	r0, r3
 8016caa:	f7ec fced 	bl	8003688 <_ZN13ST7789V_STM3210startWriteEv>
    tft.writeBuffer(buffer, totalPixels);
 8016cae:	6878      	ldr	r0, [r7, #4]
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016cb4:	461a      	mov	r2, r3
 8016cb6:	68f9      	ldr	r1, [r7, #12]
 8016cb8:	f7ed f87f 	bl	8003dba <_ZN13ST7789V_STM3211writeBufferEPtm>
    // tft.writeBufferDMA(buffer, totalPixels);
    tft.endWrite();
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	4618      	mov	r0, r3
 8016cc0:	f7ec fcf9 	bl	80036b6 <_ZN13ST7789V_STM328endWriteEv>
    // SPI_Set_Mode(1);
}
 8016cc4:	bf00      	nop
 8016cc6:	3710      	adds	r7, #16
 8016cc8:	46bd      	mov	sp, r7
 8016cca:	bd80      	pop	{r7, pc}
 8016ccc:	0000      	movs	r0, r0
	...

08016cd0 <_ZN6Screen7radiansEf>:
//     tft.endWrite();
//     SPI_Set_Mode(1);
// }

float Screen::radians(float degrees)
{
 8016cd0:	b580      	push	{r7, lr}
 8016cd2:	b082      	sub	sp, #8
 8016cd4:	af00      	add	r7, sp, #0
 8016cd6:	6078      	str	r0, [r7, #4]
 8016cd8:	ed87 0a00 	vstr	s0, [r7]
    return degrees * M_PI / 180.0f;
 8016cdc:	6838      	ldr	r0, [r7, #0]
 8016cde:	f7e9 fc0b 	bl	80004f8 <__aeabi_f2d>
 8016ce2:	a310      	add	r3, pc, #64	@ (adr r3, 8016d24 <_ZN6Screen7radiansEf+0x54>)
 8016ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ce8:	f7e9 fc5e 	bl	80005a8 <__aeabi_dmul>
 8016cec:	4602      	mov	r2, r0
 8016cee:	460b      	mov	r3, r1
 8016cf0:	4610      	mov	r0, r2
 8016cf2:	4619      	mov	r1, r3
 8016cf4:	f04f 0200 	mov.w	r2, #0
 8016cf8:	4b09      	ldr	r3, [pc, #36]	@ (8016d20 <_ZN6Screen7radiansEf+0x50>)
 8016cfa:	f7e9 fd7f 	bl	80007fc <__aeabi_ddiv>
 8016cfe:	4602      	mov	r2, r0
 8016d00:	460b      	mov	r3, r1
 8016d02:	4610      	mov	r0, r2
 8016d04:	4619      	mov	r1, r3
 8016d06:	f7e9 ff27 	bl	8000b58 <__aeabi_d2f>
 8016d0a:	4603      	mov	r3, r0
 8016d0c:	ee07 3a90 	vmov	s15, r3
}
 8016d10:	eeb0 0a67 	vmov.f32	s0, s15
 8016d14:	3708      	adds	r7, #8
 8016d16:	46bd      	mov	sp, r7
 8016d18:	bd80      	pop	{r7, pc}
 8016d1a:	bf00      	nop
 8016d1c:	f3af 8000 	nop.w
 8016d20:	40668000 	.word	0x40668000
 8016d24:	54442d18 	.word	0x54442d18
 8016d28:	400921fb 	.word	0x400921fb

08016d2c <_ZN6Screen11updateMeterEv>:
#include "Screen.hpp"
#include "BatteryMonitor.hpp"
#include "Thermocouples.hpp"
#include <stdlib.h>
void Screen::updateMeter(void)
{
 8016d2c:	b5b0      	push	{r4, r5, r7, lr}
 8016d2e:	ed2d 8b02 	vpush	{d8}
 8016d32:	b084      	sub	sp, #16
 8016d34:	af02      	add	r7, sp, #8
 8016d36:	6078      	str	r0, [r7, #4]
    //
    // //{
    // //  Serial.println(Thermocouples::deltaTemp);
    // //  Serial.println();

    needleAngle = Thermocouples::deltaTemp - 90;
 8016d38:	4baa      	ldr	r3, [pc, #680]	@ (8016fe4 <_ZN6Screen11updateMeterEv+0x2b8>)
 8016d3a:	edd3 7a00 	vldr	s15, [r3]
 8016d3e:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 8016fe8 <_ZN6Screen11updateMeterEv+0x2bc>
 8016d42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	edc3 7a45 	vstr	s15, [r3, #276]	@ 0x114

    canvas.setCursor(batteryX * 6, batteryY * 6);
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8016d58:	b29b      	uxth	r3, r3
 8016d5a:	461a      	mov	r2, r3
 8016d5c:	0052      	lsls	r2, r2, #1
 8016d5e:	4413      	add	r3, r2
 8016d60:	005b      	lsls	r3, r3, #1
 8016d62:	b29b      	uxth	r3, r3
 8016d64:	b219      	sxth	r1, r3
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8016d6c:	b29b      	uxth	r3, r3
 8016d6e:	461a      	mov	r2, r3
 8016d70:	0052      	lsls	r2, r2, #1
 8016d72:	4413      	add	r3, r2
 8016d74:	005b      	lsls	r3, r3, #1
 8016d76:	b29b      	uxth	r3, r3
 8016d78:	b21b      	sxth	r3, r3
 8016d7a:	461a      	mov	r2, r3
 8016d7c:	f7ea fb21 	bl	80013c2 <_ZN12Adafruit_GFX9setCursorEss>

    snprintf(needleBuffer, sizeof(needleBuffer), "needleAngle: %f\r\n", needleAngle);
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	f203 2405 	addw	r4, r3, #517	@ 0x205
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8016d8c:	4618      	mov	r0, r3
 8016d8e:	f7e9 fbb3 	bl	80004f8 <__aeabi_f2d>
 8016d92:	4602      	mov	r2, r0
 8016d94:	460b      	mov	r3, r1
 8016d96:	e9cd 2300 	strd	r2, r3, [sp]
 8016d9a:	4a94      	ldr	r2, [pc, #592]	@ (8016fec <_ZN6Screen11updateMeterEv+0x2c0>)
 8016d9c:	2120      	movs	r1, #32
 8016d9e:	4620      	mov	r0, r4
 8016da0:	f002 fc28 	bl	80195f4 <sniprintf>

    canvas.print(needleBuffer);
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	f203 2305 	addw	r3, r3, #517	@ 0x205
 8016db0:	4619      	mov	r1, r3
 8016db2:	4610      	mov	r0, r2
 8016db4:	f7ec fa85 	bl	80032c2 <_ZN5Print5printEPKc>

    if (needleAngle > -45)
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	edd3 7a45 	vldr	s15, [r3, #276]	@ 0x114
 8016dbe:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8016ff0 <_ZN6Screen11updateMeterEv+0x2c4>
 8016dc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dca:	dd03      	ble.n	8016dd4 <_ZN6Screen11updateMeterEv+0xa8>
    {
        needleAngle = -45;
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	4a89      	ldr	r2, [pc, #548]	@ (8016ff4 <_ZN6Screen11updateMeterEv+0x2c8>)
 8016dd0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    }

    if (needleAngle < -135)
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	edd3 7a45 	vldr	s15, [r3, #276]	@ 0x114
 8016dda:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 8016ff8 <_ZN6Screen11updateMeterEv+0x2cc>
 8016dde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016de6:	d503      	bpl.n	8016df0 <_ZN6Screen11updateMeterEv+0xc4>
    {
        needleAngle = -135;
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	4a84      	ldr	r2, [pc, #528]	@ (8016ffc <_ZN6Screen11updateMeterEv+0x2d0>)
 8016dec:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    //       needleAngle = needleAngle - 1.0; // decrease by 1 deg
    //   }

    // 90 / 2 is degs per point
    // Convert angle to radians
    needleRad = radians(needleAngle);
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	edd3 7a45 	vldr	s15, [r3, #276]	@ 0x114
 8016df6:	eeb0 0a67 	vmov.f32	s0, s15
 8016dfa:	6878      	ldr	r0, [r7, #4]
 8016dfc:	f7ff ff68 	bl	8016cd0 <_ZN6Screen7radiansEf>
 8016e00:	eef0 7a40 	vmov.f32	s15, s0
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	edc3 7a44 	vstr	s15, [r3, #272]	@ 0x110
    // Serial.println(needleAngle);

    // Calculate the endpoint of the line (on the circle's perimeter)
    needleX1 = float(meterOriginX) + (float(meterHeight) - 80) * std::cos(needleRad);
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8016e10:	ee07 3a90 	vmov	s15, r3
 8016e14:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8016e1e:	ee07 3a90 	vmov	s15, r3
 8016e22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016e26:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8017000 <_ZN6Screen11updateMeterEv+0x2d4>
 8016e2a:	ee77 8ac7 	vsub.f32	s17, s15, s14
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	edd3 7a44 	vldr	s15, [r3, #272]	@ 0x110
 8016e34:	eeb0 0a67 	vmov.f32	s0, s15
 8016e38:	f7ff f824 	bl	8015e84 <_ZSt3cosf>
 8016e3c:	eef0 7a40 	vmov.f32	s15, s0
 8016e40:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8016e44:	ee78 7a27 	vadd.f32	s15, s16, s15
 8016e48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016e4c:	ee17 2a90 	vmov	r2, s15
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
    needleY1 = float(meterOriginY) + (float(meterHeight) - 80) * std::sin(needleRad);
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8016e5c:	ee07 3a90 	vmov	s15, r3
 8016e60:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8016e6a:	ee07 3a90 	vmov	s15, r3
 8016e6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016e72:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8017000 <_ZN6Screen11updateMeterEv+0x2d4>
 8016e76:	ee77 8ac7 	vsub.f32	s17, s15, s14
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	edd3 7a44 	vldr	s15, [r3, #272]	@ 0x110
 8016e80:	eeb0 0a67 	vmov.f32	s0, s15
 8016e84:	f7ff f80e 	bl	8015ea4 <_ZSt3sinf>
 8016e88:	eef0 7a40 	vmov.f32	s15, s0
 8016e8c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8016e90:	ee78 7a27 	vadd.f32	s15, s16, s15
 8016e94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016e98:	ee17 2a90 	vmov	r2, s15
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    // Serial.println(needleX1);
    // Serial.println(needleY1);
    //  Calculate the endpoint of the line (on the circle's perimeter)
    needleX2 = float(meterOriginX) + (float(meterHeight) - 170) * std::cos(needleRad);
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8016ea8:	ee07 3a90 	vmov	s15, r3
 8016eac:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8016eb6:	ee07 3a90 	vmov	s15, r3
 8016eba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016ebe:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8017004 <_ZN6Screen11updateMeterEv+0x2d8>
 8016ec2:	ee77 8ac7 	vsub.f32	s17, s15, s14
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	edd3 7a44 	vldr	s15, [r3, #272]	@ 0x110
 8016ecc:	eeb0 0a67 	vmov.f32	s0, s15
 8016ed0:	f7fe ffd8 	bl	8015e84 <_ZSt3cosf>
 8016ed4:	eef0 7a40 	vmov.f32	s15, s0
 8016ed8:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8016edc:	ee78 7a27 	vadd.f32	s15, s16, s15
 8016ee0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016ee4:	ee17 2a90 	vmov	r2, s15
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
    needleY2 = float(meterOriginY) + (float(meterHeight) - 170) * std::sin(needleRad);
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8016ef4:	ee07 3a90 	vmov	s15, r3
 8016ef8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8016f02:	ee07 3a90 	vmov	s15, r3
 8016f06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016f0a:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8017004 <_ZN6Screen11updateMeterEv+0x2d8>
 8016f0e:	ee77 8ac7 	vsub.f32	s17, s15, s14
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	edd3 7a44 	vldr	s15, [r3, #272]	@ 0x110
 8016f18:	eeb0 0a67 	vmov.f32	s0, s15
 8016f1c:	f7fe ffc2 	bl	8015ea4 <_ZSt3sinf>
 8016f20:	eef0 7a40 	vmov.f32	s15, s0
 8016f24:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8016f28:	ee78 7a27 	vadd.f32	s15, s16, s15
 8016f2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016f30:	ee17 2a90 	vmov	r2, s15
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc

    canvas.drawLine(lastNeedleX1, lastNeedleY1, lastNeedleX2, lastNeedleY2, BACKGROUND_COLOR);
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8016f46:	b219      	sxth	r1, r3
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8016f4e:	b21a      	sxth	r2, r3
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8016f56:	b21c      	sxth	r4, r3
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8016f5e:	b21b      	sxth	r3, r3
 8016f60:	f64d 45ff 	movw	r5, #56575	@ 0xdcff
 8016f64:	9501      	str	r5, [sp, #4]
 8016f66:	9300      	str	r3, [sp, #0]
 8016f68:	4623      	mov	r3, r4
 8016f6a:	f7ea fcdb 	bl	8001924 <_ZN12Adafruit_GFX8drawLineEsssst>
    // writeNeedleFromCanvas(x0, y0, x1, y1, color);

    // Draw a normal line
    canvas.drawLine(needleX1, needleY1, needleX2, needleY2, ST7789V_BLACK);
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8016f7a:	b219      	sxth	r1, r3
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8016f82:	b21a      	sxth	r2, r3
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8016f8a:	b21c      	sxth	r4, r3
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8016f92:	b21b      	sxth	r3, r3
 8016f94:	2500      	movs	r5, #0
 8016f96:	9501      	str	r5, [sp, #4]
 8016f98:	9300      	str	r3, [sp, #0]
 8016f9a:	4623      	mov	r3, r4
 8016f9c:	f7ea fcc2 	bl	8001924 <_ZN12Adafruit_GFX8drawLineEsssst>
    // writeNeedleFromCanvas(x0, y0, x1, y1, color);

    lastNeedleX1 = needleX1;
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    lastNeedleX2 = needleX2;
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
    lastNeedleY1 = needleY1;
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    lastNeedleY2 = needleY2;
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
    // renderDelay = 15; // about a 60hz refresh rate
    writeCanvas();
 8016fd0:	6878      	ldr	r0, [r7, #4]
 8016fd2:	f7ff fe5e 	bl	8016c92 <_ZN6Screen11writeCanvasEv>
    //     ledcWrite(backlightChannel, 0);
    //     esp_sleep_enable_timer_wakeup(1000000);
    //     esp_light_sleep_start();
    //     fadeIn();
    // }
} // update meter f(x)
 8016fd6:	bf00      	nop
 8016fd8:	3708      	adds	r7, #8
 8016fda:	46bd      	mov	sp, r7
 8016fdc:	ecbd 8b02 	vpop	{d8}
 8016fe0:	bdb0      	pop	{r4, r5, r7, pc}
 8016fe2:	bf00      	nop
 8016fe4:	20000378 	.word	0x20000378
 8016fe8:	42b40000 	.word	0x42b40000
 8016fec:	0801b850 	.word	0x0801b850
 8016ff0:	c2340000 	.word	0xc2340000
 8016ff4:	c2340000 	.word	0xc2340000
 8016ff8:	c3070000 	.word	0xc3070000
 8016ffc:	c3070000 	.word	0xc3070000
 8017000:	42a00000 	.word	0x42a00000
 8017004:	432a0000 	.word	0x432a0000

08017008 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8017008:	b580      	push	{r7, lr}
 801700a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 801700c:	2200      	movs	r2, #0
 801700e:	4912      	ldr	r1, [pc, #72]	@ (8017058 <MX_USB_Device_Init+0x50>)
 8017010:	4812      	ldr	r0, [pc, #72]	@ (801705c <MX_USB_Device_Init+0x54>)
 8017012:	f7fa fb3b 	bl	801168c <USBD_Init>
 8017016:	4603      	mov	r3, r0
 8017018:	2b00      	cmp	r3, #0
 801701a:	d001      	beq.n	8017020 <MX_USB_Device_Init+0x18>
    Error_Handler();
 801701c:	f7ef fa7c 	bl	8006518 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8017020:	490f      	ldr	r1, [pc, #60]	@ (8017060 <MX_USB_Device_Init+0x58>)
 8017022:	480e      	ldr	r0, [pc, #56]	@ (801705c <MX_USB_Device_Init+0x54>)
 8017024:	f7fa fb62 	bl	80116ec <USBD_RegisterClass>
 8017028:	4603      	mov	r3, r0
 801702a:	2b00      	cmp	r3, #0
 801702c:	d001      	beq.n	8017032 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 801702e:	f7ef fa73 	bl	8006518 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8017032:	490c      	ldr	r1, [pc, #48]	@ (8017064 <MX_USB_Device_Init+0x5c>)
 8017034:	4809      	ldr	r0, [pc, #36]	@ (801705c <MX_USB_Device_Init+0x54>)
 8017036:	f7fa fa99 	bl	801156c <USBD_CDC_RegisterInterface>
 801703a:	4603      	mov	r3, r0
 801703c:	2b00      	cmp	r3, #0
 801703e:	d001      	beq.n	8017044 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8017040:	f7ef fa6a 	bl	8006518 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8017044:	4805      	ldr	r0, [pc, #20]	@ (801705c <MX_USB_Device_Init+0x54>)
 8017046:	f7fa fb87 	bl	8011758 <USBD_Start>
 801704a:	4603      	mov	r3, r0
 801704c:	2b00      	cmp	r3, #0
 801704e:	d001      	beq.n	8017054 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8017050:	f7ef fa62 	bl	8006518 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8017054:	bf00      	nop
 8017056:	bd80      	pop	{r7, pc}
 8017058:	200000e8 	.word	0x200000e8
 801705c:	20000b5c 	.word	0x20000b5c
 8017060:	2000003c 	.word	0x2000003c
 8017064:	200000d4 	.word	0x200000d4

08017068 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8017068:	b580      	push	{r7, lr}
 801706a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801706c:	2200      	movs	r2, #0
 801706e:	4905      	ldr	r1, [pc, #20]	@ (8017084 <CDC_Init_FS+0x1c>)
 8017070:	4805      	ldr	r0, [pc, #20]	@ (8017088 <CDC_Init_FS+0x20>)
 8017072:	f7fa fa95 	bl	80115a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8017076:	4905      	ldr	r1, [pc, #20]	@ (801708c <CDC_Init_FS+0x24>)
 8017078:	4803      	ldr	r0, [pc, #12]	@ (8017088 <CDC_Init_FS+0x20>)
 801707a:	f7fa fab3 	bl	80115e4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801707e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017080:	4618      	mov	r0, r3
 8017082:	bd80      	pop	{r7, pc}
 8017084:	20001638 	.word	0x20001638
 8017088:	20000b5c 	.word	0x20000b5c
 801708c:	20000e38 	.word	0x20000e38

08017090 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017090:	b480      	push	{r7}
 8017092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017094:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8017096:	4618      	mov	r0, r3
 8017098:	46bd      	mov	sp, r7
 801709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801709e:	4770      	bx	lr

080170a0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80170a0:	b480      	push	{r7}
 80170a2:	b083      	sub	sp, #12
 80170a4:	af00      	add	r7, sp, #0
 80170a6:	4603      	mov	r3, r0
 80170a8:	6039      	str	r1, [r7, #0]
 80170aa:	71fb      	strb	r3, [r7, #7]
 80170ac:	4613      	mov	r3, r2
 80170ae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80170b0:	79fb      	ldrb	r3, [r7, #7]
 80170b2:	2b23      	cmp	r3, #35	@ 0x23
 80170b4:	d84a      	bhi.n	801714c <CDC_Control_FS+0xac>
 80170b6:	a201      	add	r2, pc, #4	@ (adr r2, 80170bc <CDC_Control_FS+0x1c>)
 80170b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80170bc:	0801714d 	.word	0x0801714d
 80170c0:	0801714d 	.word	0x0801714d
 80170c4:	0801714d 	.word	0x0801714d
 80170c8:	0801714d 	.word	0x0801714d
 80170cc:	0801714d 	.word	0x0801714d
 80170d0:	0801714d 	.word	0x0801714d
 80170d4:	0801714d 	.word	0x0801714d
 80170d8:	0801714d 	.word	0x0801714d
 80170dc:	0801714d 	.word	0x0801714d
 80170e0:	0801714d 	.word	0x0801714d
 80170e4:	0801714d 	.word	0x0801714d
 80170e8:	0801714d 	.word	0x0801714d
 80170ec:	0801714d 	.word	0x0801714d
 80170f0:	0801714d 	.word	0x0801714d
 80170f4:	0801714d 	.word	0x0801714d
 80170f8:	0801714d 	.word	0x0801714d
 80170fc:	0801714d 	.word	0x0801714d
 8017100:	0801714d 	.word	0x0801714d
 8017104:	0801714d 	.word	0x0801714d
 8017108:	0801714d 	.word	0x0801714d
 801710c:	0801714d 	.word	0x0801714d
 8017110:	0801714d 	.word	0x0801714d
 8017114:	0801714d 	.word	0x0801714d
 8017118:	0801714d 	.word	0x0801714d
 801711c:	0801714d 	.word	0x0801714d
 8017120:	0801714d 	.word	0x0801714d
 8017124:	0801714d 	.word	0x0801714d
 8017128:	0801714d 	.word	0x0801714d
 801712c:	0801714d 	.word	0x0801714d
 8017130:	0801714d 	.word	0x0801714d
 8017134:	0801714d 	.word	0x0801714d
 8017138:	0801714d 	.word	0x0801714d
 801713c:	0801714d 	.word	0x0801714d
 8017140:	0801714d 	.word	0x0801714d
 8017144:	0801714d 	.word	0x0801714d
 8017148:	0801714d 	.word	0x0801714d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801714c:	bf00      	nop
  }

  return (USBD_OK);
 801714e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017150:	4618      	mov	r0, r3
 8017152:	370c      	adds	r7, #12
 8017154:	46bd      	mov	sp, r7
 8017156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801715a:	4770      	bx	lr

0801715c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801715c:	b580      	push	{r7, lr}
 801715e:	b082      	sub	sp, #8
 8017160:	af00      	add	r7, sp, #0
 8017162:	6078      	str	r0, [r7, #4]
 8017164:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8017166:	6879      	ldr	r1, [r7, #4]
 8017168:	4805      	ldr	r0, [pc, #20]	@ (8017180 <CDC_Receive_FS+0x24>)
 801716a:	f7fa fa3b 	bl	80115e4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801716e:	4804      	ldr	r0, [pc, #16]	@ (8017180 <CDC_Receive_FS+0x24>)
 8017170:	f7fa fa56 	bl	8011620 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8017174:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8017176:	4618      	mov	r0, r3
 8017178:	3708      	adds	r7, #8
 801717a:	46bd      	mov	sp, r7
 801717c:	bd80      	pop	{r7, pc}
 801717e:	bf00      	nop
 8017180:	20000b5c 	.word	0x20000b5c

08017184 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8017184:	b480      	push	{r7}
 8017186:	b087      	sub	sp, #28
 8017188:	af00      	add	r7, sp, #0
 801718a:	60f8      	str	r0, [r7, #12]
 801718c:	60b9      	str	r1, [r7, #8]
 801718e:	4613      	mov	r3, r2
 8017190:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8017192:	2300      	movs	r3, #0
 8017194:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8017196:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801719a:	4618      	mov	r0, r3
 801719c:	371c      	adds	r7, #28
 801719e:	46bd      	mov	sp, r7
 80171a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171a4:	4770      	bx	lr
	...

080171a8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80171a8:	b480      	push	{r7}
 80171aa:	b083      	sub	sp, #12
 80171ac:	af00      	add	r7, sp, #0
 80171ae:	4603      	mov	r3, r0
 80171b0:	6039      	str	r1, [r7, #0]
 80171b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80171b4:	683b      	ldr	r3, [r7, #0]
 80171b6:	2212      	movs	r2, #18
 80171b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80171ba:	4b03      	ldr	r3, [pc, #12]	@ (80171c8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80171bc:	4618      	mov	r0, r3
 80171be:	370c      	adds	r7, #12
 80171c0:	46bd      	mov	sp, r7
 80171c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171c6:	4770      	bx	lr
 80171c8:	20000108 	.word	0x20000108

080171cc <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80171cc:	b480      	push	{r7}
 80171ce:	b083      	sub	sp, #12
 80171d0:	af00      	add	r7, sp, #0
 80171d2:	4603      	mov	r3, r0
 80171d4:	6039      	str	r1, [r7, #0]
 80171d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80171d8:	683b      	ldr	r3, [r7, #0]
 80171da:	2204      	movs	r2, #4
 80171dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80171de:	4b03      	ldr	r3, [pc, #12]	@ (80171ec <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80171e0:	4618      	mov	r0, r3
 80171e2:	370c      	adds	r7, #12
 80171e4:	46bd      	mov	sp, r7
 80171e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ea:	4770      	bx	lr
 80171ec:	2000011c 	.word	0x2000011c

080171f0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80171f0:	b580      	push	{r7, lr}
 80171f2:	b082      	sub	sp, #8
 80171f4:	af00      	add	r7, sp, #0
 80171f6:	4603      	mov	r3, r0
 80171f8:	6039      	str	r1, [r7, #0]
 80171fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80171fc:	79fb      	ldrb	r3, [r7, #7]
 80171fe:	2b00      	cmp	r3, #0
 8017200:	d105      	bne.n	801720e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8017202:	683a      	ldr	r2, [r7, #0]
 8017204:	4907      	ldr	r1, [pc, #28]	@ (8017224 <USBD_CDC_ProductStrDescriptor+0x34>)
 8017206:	4808      	ldr	r0, [pc, #32]	@ (8017228 <USBD_CDC_ProductStrDescriptor+0x38>)
 8017208:	f7fb fbee 	bl	80129e8 <USBD_GetString>
 801720c:	e004      	b.n	8017218 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801720e:	683a      	ldr	r2, [r7, #0]
 8017210:	4904      	ldr	r1, [pc, #16]	@ (8017224 <USBD_CDC_ProductStrDescriptor+0x34>)
 8017212:	4805      	ldr	r0, [pc, #20]	@ (8017228 <USBD_CDC_ProductStrDescriptor+0x38>)
 8017214:	f7fb fbe8 	bl	80129e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017218:	4b02      	ldr	r3, [pc, #8]	@ (8017224 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801721a:	4618      	mov	r0, r3
 801721c:	3708      	adds	r7, #8
 801721e:	46bd      	mov	sp, r7
 8017220:	bd80      	pop	{r7, pc}
 8017222:	bf00      	nop
 8017224:	20001e38 	.word	0x20001e38
 8017228:	0801b864 	.word	0x0801b864

0801722c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801722c:	b580      	push	{r7, lr}
 801722e:	b082      	sub	sp, #8
 8017230:	af00      	add	r7, sp, #0
 8017232:	4603      	mov	r3, r0
 8017234:	6039      	str	r1, [r7, #0]
 8017236:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017238:	683a      	ldr	r2, [r7, #0]
 801723a:	4904      	ldr	r1, [pc, #16]	@ (801724c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 801723c:	4804      	ldr	r0, [pc, #16]	@ (8017250 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801723e:	f7fb fbd3 	bl	80129e8 <USBD_GetString>
  return USBD_StrDesc;
 8017242:	4b02      	ldr	r3, [pc, #8]	@ (801724c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8017244:	4618      	mov	r0, r3
 8017246:	3708      	adds	r7, #8
 8017248:	46bd      	mov	sp, r7
 801724a:	bd80      	pop	{r7, pc}
 801724c:	20001e38 	.word	0x20001e38
 8017250:	0801b87c 	.word	0x0801b87c

08017254 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017254:	b580      	push	{r7, lr}
 8017256:	b082      	sub	sp, #8
 8017258:	af00      	add	r7, sp, #0
 801725a:	4603      	mov	r3, r0
 801725c:	6039      	str	r1, [r7, #0]
 801725e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017260:	683b      	ldr	r3, [r7, #0]
 8017262:	221a      	movs	r2, #26
 8017264:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017266:	f000 f843 	bl	80172f0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801726a:	4b02      	ldr	r3, [pc, #8]	@ (8017274 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 801726c:	4618      	mov	r0, r3
 801726e:	3708      	adds	r7, #8
 8017270:	46bd      	mov	sp, r7
 8017272:	bd80      	pop	{r7, pc}
 8017274:	20000120 	.word	0x20000120

08017278 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017278:	b580      	push	{r7, lr}
 801727a:	b082      	sub	sp, #8
 801727c:	af00      	add	r7, sp, #0
 801727e:	4603      	mov	r3, r0
 8017280:	6039      	str	r1, [r7, #0]
 8017282:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017284:	79fb      	ldrb	r3, [r7, #7]
 8017286:	2b00      	cmp	r3, #0
 8017288:	d105      	bne.n	8017296 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801728a:	683a      	ldr	r2, [r7, #0]
 801728c:	4907      	ldr	r1, [pc, #28]	@ (80172ac <USBD_CDC_ConfigStrDescriptor+0x34>)
 801728e:	4808      	ldr	r0, [pc, #32]	@ (80172b0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8017290:	f7fb fbaa 	bl	80129e8 <USBD_GetString>
 8017294:	e004      	b.n	80172a0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8017296:	683a      	ldr	r2, [r7, #0]
 8017298:	4904      	ldr	r1, [pc, #16]	@ (80172ac <USBD_CDC_ConfigStrDescriptor+0x34>)
 801729a:	4805      	ldr	r0, [pc, #20]	@ (80172b0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 801729c:	f7fb fba4 	bl	80129e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80172a0:	4b02      	ldr	r3, [pc, #8]	@ (80172ac <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80172a2:	4618      	mov	r0, r3
 80172a4:	3708      	adds	r7, #8
 80172a6:	46bd      	mov	sp, r7
 80172a8:	bd80      	pop	{r7, pc}
 80172aa:	bf00      	nop
 80172ac:	20001e38 	.word	0x20001e38
 80172b0:	0801b890 	.word	0x0801b890

080172b4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80172b4:	b580      	push	{r7, lr}
 80172b6:	b082      	sub	sp, #8
 80172b8:	af00      	add	r7, sp, #0
 80172ba:	4603      	mov	r3, r0
 80172bc:	6039      	str	r1, [r7, #0]
 80172be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80172c0:	79fb      	ldrb	r3, [r7, #7]
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d105      	bne.n	80172d2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80172c6:	683a      	ldr	r2, [r7, #0]
 80172c8:	4907      	ldr	r1, [pc, #28]	@ (80172e8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80172ca:	4808      	ldr	r0, [pc, #32]	@ (80172ec <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80172cc:	f7fb fb8c 	bl	80129e8 <USBD_GetString>
 80172d0:	e004      	b.n	80172dc <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80172d2:	683a      	ldr	r2, [r7, #0]
 80172d4:	4904      	ldr	r1, [pc, #16]	@ (80172e8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80172d6:	4805      	ldr	r0, [pc, #20]	@ (80172ec <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80172d8:	f7fb fb86 	bl	80129e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80172dc:	4b02      	ldr	r3, [pc, #8]	@ (80172e8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80172de:	4618      	mov	r0, r3
 80172e0:	3708      	adds	r7, #8
 80172e2:	46bd      	mov	sp, r7
 80172e4:	bd80      	pop	{r7, pc}
 80172e6:	bf00      	nop
 80172e8:	20001e38 	.word	0x20001e38
 80172ec:	0801b89c 	.word	0x0801b89c

080172f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80172f0:	b580      	push	{r7, lr}
 80172f2:	b084      	sub	sp, #16
 80172f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80172f6:	4b0f      	ldr	r3, [pc, #60]	@ (8017334 <Get_SerialNum+0x44>)
 80172f8:	681b      	ldr	r3, [r3, #0]
 80172fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80172fc:	4b0e      	ldr	r3, [pc, #56]	@ (8017338 <Get_SerialNum+0x48>)
 80172fe:	681b      	ldr	r3, [r3, #0]
 8017300:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017302:	4b0e      	ldr	r3, [pc, #56]	@ (801733c <Get_SerialNum+0x4c>)
 8017304:	681b      	ldr	r3, [r3, #0]
 8017306:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017308:	68fa      	ldr	r2, [r7, #12]
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	4413      	add	r3, r2
 801730e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	2b00      	cmp	r3, #0
 8017314:	d009      	beq.n	801732a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017316:	2208      	movs	r2, #8
 8017318:	4909      	ldr	r1, [pc, #36]	@ (8017340 <Get_SerialNum+0x50>)
 801731a:	68f8      	ldr	r0, [r7, #12]
 801731c:	f000 f814 	bl	8017348 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017320:	2204      	movs	r2, #4
 8017322:	4908      	ldr	r1, [pc, #32]	@ (8017344 <Get_SerialNum+0x54>)
 8017324:	68b8      	ldr	r0, [r7, #8]
 8017326:	f000 f80f 	bl	8017348 <IntToUnicode>
  }
}
 801732a:	bf00      	nop
 801732c:	3710      	adds	r7, #16
 801732e:	46bd      	mov	sp, r7
 8017330:	bd80      	pop	{r7, pc}
 8017332:	bf00      	nop
 8017334:	1fff7590 	.word	0x1fff7590
 8017338:	1fff7594 	.word	0x1fff7594
 801733c:	1fff7598 	.word	0x1fff7598
 8017340:	20000122 	.word	0x20000122
 8017344:	20000132 	.word	0x20000132

08017348 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017348:	b480      	push	{r7}
 801734a:	b087      	sub	sp, #28
 801734c:	af00      	add	r7, sp, #0
 801734e:	60f8      	str	r0, [r7, #12]
 8017350:	60b9      	str	r1, [r7, #8]
 8017352:	4613      	mov	r3, r2
 8017354:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017356:	2300      	movs	r3, #0
 8017358:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801735a:	2300      	movs	r3, #0
 801735c:	75fb      	strb	r3, [r7, #23]
 801735e:	e027      	b.n	80173b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017360:	68fb      	ldr	r3, [r7, #12]
 8017362:	0f1b      	lsrs	r3, r3, #28
 8017364:	2b09      	cmp	r3, #9
 8017366:	d80b      	bhi.n	8017380 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017368:	68fb      	ldr	r3, [r7, #12]
 801736a:	0f1b      	lsrs	r3, r3, #28
 801736c:	b2da      	uxtb	r2, r3
 801736e:	7dfb      	ldrb	r3, [r7, #23]
 8017370:	005b      	lsls	r3, r3, #1
 8017372:	4619      	mov	r1, r3
 8017374:	68bb      	ldr	r3, [r7, #8]
 8017376:	440b      	add	r3, r1
 8017378:	3230      	adds	r2, #48	@ 0x30
 801737a:	b2d2      	uxtb	r2, r2
 801737c:	701a      	strb	r2, [r3, #0]
 801737e:	e00a      	b.n	8017396 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017380:	68fb      	ldr	r3, [r7, #12]
 8017382:	0f1b      	lsrs	r3, r3, #28
 8017384:	b2da      	uxtb	r2, r3
 8017386:	7dfb      	ldrb	r3, [r7, #23]
 8017388:	005b      	lsls	r3, r3, #1
 801738a:	4619      	mov	r1, r3
 801738c:	68bb      	ldr	r3, [r7, #8]
 801738e:	440b      	add	r3, r1
 8017390:	3237      	adds	r2, #55	@ 0x37
 8017392:	b2d2      	uxtb	r2, r2
 8017394:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017396:	68fb      	ldr	r3, [r7, #12]
 8017398:	011b      	lsls	r3, r3, #4
 801739a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801739c:	7dfb      	ldrb	r3, [r7, #23]
 801739e:	005b      	lsls	r3, r3, #1
 80173a0:	3301      	adds	r3, #1
 80173a2:	68ba      	ldr	r2, [r7, #8]
 80173a4:	4413      	add	r3, r2
 80173a6:	2200      	movs	r2, #0
 80173a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80173aa:	7dfb      	ldrb	r3, [r7, #23]
 80173ac:	3301      	adds	r3, #1
 80173ae:	75fb      	strb	r3, [r7, #23]
 80173b0:	7dfa      	ldrb	r2, [r7, #23]
 80173b2:	79fb      	ldrb	r3, [r7, #7]
 80173b4:	429a      	cmp	r2, r3
 80173b6:	d3d3      	bcc.n	8017360 <IntToUnicode+0x18>
  }
}
 80173b8:	bf00      	nop
 80173ba:	bf00      	nop
 80173bc:	371c      	adds	r7, #28
 80173be:	46bd      	mov	sp, r7
 80173c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173c4:	4770      	bx	lr

080173c6 <LL_AHB2_GRP1_EnableClock>:
{
 80173c6:	b480      	push	{r7}
 80173c8:	b085      	sub	sp, #20
 80173ca:	af00      	add	r7, sp, #0
 80173cc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80173ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80173d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80173d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	4313      	orrs	r3, r2
 80173dc:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80173de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80173e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	4013      	ands	r3, r2
 80173e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80173ea:	68fb      	ldr	r3, [r7, #12]
}
 80173ec:	bf00      	nop
 80173ee:	3714      	adds	r7, #20
 80173f0:	46bd      	mov	sp, r7
 80173f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173f6:	4770      	bx	lr

080173f8 <LL_APB1_GRP1_EnableClock>:
{
 80173f8:	b480      	push	{r7}
 80173fa:	b085      	sub	sp, #20
 80173fc:	af00      	add	r7, sp, #0
 80173fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8017400:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8017404:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017406:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	4313      	orrs	r3, r2
 801740e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8017410:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8017414:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	4013      	ands	r3, r2
 801741a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801741c:	68fb      	ldr	r3, [r7, #12]
}
 801741e:	bf00      	nop
 8017420:	3714      	adds	r7, #20
 8017422:	46bd      	mov	sp, r7
 8017424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017428:	4770      	bx	lr
	...

0801742c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801742c:	b580      	push	{r7, lr}
 801742e:	b09c      	sub	sp, #112	@ 0x70
 8017430:	af00      	add	r7, sp, #0
 8017432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017434:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8017438:	2200      	movs	r2, #0
 801743a:	601a      	str	r2, [r3, #0]
 801743c:	605a      	str	r2, [r3, #4]
 801743e:	609a      	str	r2, [r3, #8]
 8017440:	60da      	str	r2, [r3, #12]
 8017442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017444:	f107 030c 	add.w	r3, r7, #12
 8017448:	2250      	movs	r2, #80	@ 0x50
 801744a:	2100      	movs	r1, #0
 801744c:	4618      	mov	r0, r3
 801744e:	f002 f964 	bl	801971a <memset>
  if(pcdHandle->Instance==USB)
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	681b      	ldr	r3, [r3, #0]
 8017456:	4a23      	ldr	r2, [pc, #140]	@ (80174e4 <HAL_PCD_MspInit+0xb8>)
 8017458:	4293      	cmp	r3, r2
 801745a:	d13e      	bne.n	80174da <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801745c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8017460:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8017462:	2318      	movs	r3, #24
 8017464:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8017466:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 801746a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 801746c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8017470:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8017472:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8017476:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8017478:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801747c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 801747e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8017482:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017484:	f107 030c 	add.w	r3, r7, #12
 8017488:	4618      	mov	r0, r3
 801748a:	f7f4 fbe7 	bl	800bc5c <HAL_RCCEx_PeriphCLKConfig>
 801748e:	4603      	mov	r3, r0
 8017490:	2b00      	cmp	r3, #0
 8017492:	d001      	beq.n	8017498 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8017494:	f7ef f840 	bl	8006518 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017498:	2001      	movs	r0, #1
 801749a:	f7ff ff94 	bl	80173c6 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801749e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80174a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80174a4:	2302      	movs	r3, #2
 80174a6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80174a8:	2300      	movs	r3, #0
 80174aa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80174ac:	2300      	movs	r3, #0
 80174ae:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80174b0:	230a      	movs	r3, #10
 80174b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80174b4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80174b8:	4619      	mov	r1, r3
 80174ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80174be:	f7f0 f877 	bl	80075b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80174c2:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80174c6:	f7ff ff97 	bl	80173f8 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80174ca:	2200      	movs	r2, #0
 80174cc:	2100      	movs	r1, #0
 80174ce:	2014      	movs	r0, #20
 80174d0:	f7ef ffb1 	bl	8007436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80174d4:	2014      	movs	r0, #20
 80174d6:	f7ef ffc8 	bl	800746a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80174da:	bf00      	nop
 80174dc:	3770      	adds	r7, #112	@ 0x70
 80174de:	46bd      	mov	sp, r7
 80174e0:	bd80      	pop	{r7, pc}
 80174e2:	bf00      	nop
 80174e4:	40006800 	.word	0x40006800

080174e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80174e8:	b580      	push	{r7, lr}
 80174ea:	b082      	sub	sp, #8
 80174ec:	af00      	add	r7, sp, #0
 80174ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80174fc:	4619      	mov	r1, r3
 80174fe:	4610      	mov	r0, r2
 8017500:	f7fa f977 	bl	80117f2 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8017504:	bf00      	nop
 8017506:	3708      	adds	r7, #8
 8017508:	46bd      	mov	sp, r7
 801750a:	bd80      	pop	{r7, pc}

0801750c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801750c:	b580      	push	{r7, lr}
 801750e:	b082      	sub	sp, #8
 8017510:	af00      	add	r7, sp, #0
 8017512:	6078      	str	r0, [r7, #4]
 8017514:	460b      	mov	r3, r1
 8017516:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 801751e:	78fa      	ldrb	r2, [r7, #3]
 8017520:	6879      	ldr	r1, [r7, #4]
 8017522:	4613      	mov	r3, r2
 8017524:	009b      	lsls	r3, r3, #2
 8017526:	4413      	add	r3, r2
 8017528:	00db      	lsls	r3, r3, #3
 801752a:	440b      	add	r3, r1
 801752c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8017530:	681a      	ldr	r2, [r3, #0]
 8017532:	78fb      	ldrb	r3, [r7, #3]
 8017534:	4619      	mov	r1, r3
 8017536:	f7fa f9b1 	bl	801189c <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801753a:	bf00      	nop
 801753c:	3708      	adds	r7, #8
 801753e:	46bd      	mov	sp, r7
 8017540:	bd80      	pop	{r7, pc}

08017542 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017542:	b580      	push	{r7, lr}
 8017544:	b082      	sub	sp, #8
 8017546:	af00      	add	r7, sp, #0
 8017548:	6078      	str	r0, [r7, #4]
 801754a:	460b      	mov	r3, r1
 801754c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8017554:	78fa      	ldrb	r2, [r7, #3]
 8017556:	6879      	ldr	r1, [r7, #4]
 8017558:	4613      	mov	r3, r2
 801755a:	009b      	lsls	r3, r3, #2
 801755c:	4413      	add	r3, r2
 801755e:	00db      	lsls	r3, r3, #3
 8017560:	440b      	add	r3, r1
 8017562:	3324      	adds	r3, #36	@ 0x24
 8017564:	681a      	ldr	r2, [r3, #0]
 8017566:	78fb      	ldrb	r3, [r7, #3]
 8017568:	4619      	mov	r1, r3
 801756a:	f7fa fa4a 	bl	8011a02 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801756e:	bf00      	nop
 8017570:	3708      	adds	r7, #8
 8017572:	46bd      	mov	sp, r7
 8017574:	bd80      	pop	{r7, pc}

08017576 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017576:	b580      	push	{r7, lr}
 8017578:	b082      	sub	sp, #8
 801757a:	af00      	add	r7, sp, #0
 801757c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8017584:	4618      	mov	r0, r3
 8017586:	f7fa fb84 	bl	8011c92 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801758a:	bf00      	nop
 801758c:	3708      	adds	r7, #8
 801758e:	46bd      	mov	sp, r7
 8017590:	bd80      	pop	{r7, pc}

08017592 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017592:	b580      	push	{r7, lr}
 8017594:	b084      	sub	sp, #16
 8017596:	af00      	add	r7, sp, #0
 8017598:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801759a:	2301      	movs	r3, #1
 801759c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	795b      	ldrb	r3, [r3, #5]
 80175a2:	2b02      	cmp	r3, #2
 80175a4:	d001      	beq.n	80175aa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80175a6:	f7ee ffb7 	bl	8006518 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80175b0:	7bfa      	ldrb	r2, [r7, #15]
 80175b2:	4611      	mov	r1, r2
 80175b4:	4618      	mov	r0, r3
 80175b6:	f7fa fb28 	bl	8011c0a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80175c0:	4618      	mov	r0, r3
 80175c2:	f7fa fad0 	bl	8011b66 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80175c6:	bf00      	nop
 80175c8:	3710      	adds	r7, #16
 80175ca:	46bd      	mov	sp, r7
 80175cc:	bd80      	pop	{r7, pc}
	...

080175d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80175d0:	b580      	push	{r7, lr}
 80175d2:	b082      	sub	sp, #8
 80175d4:	af00      	add	r7, sp, #0
 80175d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80175de:	4618      	mov	r0, r3
 80175e0:	f7fa fb23 	bl	8011c2a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	7a5b      	ldrb	r3, [r3, #9]
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d005      	beq.n	80175f8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80175ec:	4b04      	ldr	r3, [pc, #16]	@ (8017600 <HAL_PCD_SuspendCallback+0x30>)
 80175ee:	691b      	ldr	r3, [r3, #16]
 80175f0:	4a03      	ldr	r2, [pc, #12]	@ (8017600 <HAL_PCD_SuspendCallback+0x30>)
 80175f2:	f043 0306 	orr.w	r3, r3, #6
 80175f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80175f8:	bf00      	nop
 80175fa:	3708      	adds	r7, #8
 80175fc:	46bd      	mov	sp, r7
 80175fe:	bd80      	pop	{r7, pc}
 8017600:	e000ed00 	.word	0xe000ed00

08017604 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017604:	b580      	push	{r7, lr}
 8017606:	b082      	sub	sp, #8
 8017608:	af00      	add	r7, sp, #0
 801760a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	7a5b      	ldrb	r3, [r3, #9]
 8017610:	2b00      	cmp	r3, #0
 8017612:	d007      	beq.n	8017624 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017614:	4b08      	ldr	r3, [pc, #32]	@ (8017638 <HAL_PCD_ResumeCallback+0x34>)
 8017616:	691b      	ldr	r3, [r3, #16]
 8017618:	4a07      	ldr	r2, [pc, #28]	@ (8017638 <HAL_PCD_ResumeCallback+0x34>)
 801761a:	f023 0306 	bic.w	r3, r3, #6
 801761e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8017620:	f000 f9fa 	bl	8017a18 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801762a:	4618      	mov	r0, r3
 801762c:	f7fa fb19 	bl	8011c62 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8017630:	bf00      	nop
 8017632:	3708      	adds	r7, #8
 8017634:	46bd      	mov	sp, r7
 8017636:	bd80      	pop	{r7, pc}
 8017638:	e000ed00 	.word	0xe000ed00

0801763c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801763c:	b580      	push	{r7, lr}
 801763e:	b082      	sub	sp, #8
 8017640:	af00      	add	r7, sp, #0
 8017642:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8017644:	4a2c      	ldr	r2, [pc, #176]	@ (80176f8 <USBD_LL_Init+0xbc>)
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	4a2a      	ldr	r2, [pc, #168]	@ (80176f8 <USBD_LL_Init+0xbc>)
 8017650:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8017654:	f7f2 ffbc 	bl	800a5d0 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8017658:	4b27      	ldr	r3, [pc, #156]	@ (80176f8 <USBD_LL_Init+0xbc>)
 801765a:	4a28      	ldr	r2, [pc, #160]	@ (80176fc <USBD_LL_Init+0xc0>)
 801765c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801765e:	4b26      	ldr	r3, [pc, #152]	@ (80176f8 <USBD_LL_Init+0xbc>)
 8017660:	2208      	movs	r2, #8
 8017662:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8017664:	4b24      	ldr	r3, [pc, #144]	@ (80176f8 <USBD_LL_Init+0xbc>)
 8017666:	2202      	movs	r2, #2
 8017668:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801766a:	4b23      	ldr	r3, [pc, #140]	@ (80176f8 <USBD_LL_Init+0xbc>)
 801766c:	2202      	movs	r2, #2
 801766e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8017670:	4b21      	ldr	r3, [pc, #132]	@ (80176f8 <USBD_LL_Init+0xbc>)
 8017672:	2200      	movs	r2, #0
 8017674:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8017676:	4b20      	ldr	r3, [pc, #128]	@ (80176f8 <USBD_LL_Init+0xbc>)
 8017678:	2200      	movs	r2, #0
 801767a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801767c:	4b1e      	ldr	r3, [pc, #120]	@ (80176f8 <USBD_LL_Init+0xbc>)
 801767e:	2200      	movs	r2, #0
 8017680:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8017682:	4b1d      	ldr	r3, [pc, #116]	@ (80176f8 <USBD_LL_Init+0xbc>)
 8017684:	2200      	movs	r2, #0
 8017686:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8017688:	481b      	ldr	r0, [pc, #108]	@ (80176f8 <USBD_LL_Init+0xbc>)
 801768a:	f7f1 fa81 	bl	8008b90 <HAL_PCD_Init>
 801768e:	4603      	mov	r3, r0
 8017690:	2b00      	cmp	r3, #0
 8017692:	d001      	beq.n	8017698 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8017694:	f7ee ff40 	bl	8006518 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801769e:	2318      	movs	r3, #24
 80176a0:	2200      	movs	r2, #0
 80176a2:	2100      	movs	r1, #0
 80176a4:	f7f2 ff08 	bl	800a4b8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80176ae:	2358      	movs	r3, #88	@ 0x58
 80176b0:	2200      	movs	r2, #0
 80176b2:	2180      	movs	r1, #128	@ 0x80
 80176b4:	f7f2 ff00 	bl	800a4b8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80176be:	23c0      	movs	r3, #192	@ 0xc0
 80176c0:	2200      	movs	r2, #0
 80176c2:	2181      	movs	r1, #129	@ 0x81
 80176c4:	f7f2 fef8 	bl	800a4b8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80176ce:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80176d2:	2200      	movs	r2, #0
 80176d4:	2101      	movs	r1, #1
 80176d6:	f7f2 feef 	bl	800a4b8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80176e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80176e4:	2200      	movs	r2, #0
 80176e6:	2182      	movs	r1, #130	@ 0x82
 80176e8:	f7f2 fee6 	bl	800a4b8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80176ec:	2300      	movs	r3, #0
}
 80176ee:	4618      	mov	r0, r3
 80176f0:	3708      	adds	r7, #8
 80176f2:	46bd      	mov	sp, r7
 80176f4:	bd80      	pop	{r7, pc}
 80176f6:	bf00      	nop
 80176f8:	20002038 	.word	0x20002038
 80176fc:	40006800 	.word	0x40006800

08017700 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017700:	b580      	push	{r7, lr}
 8017702:	b084      	sub	sp, #16
 8017704:	af00      	add	r7, sp, #0
 8017706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017708:	2300      	movs	r3, #0
 801770a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801770c:	2300      	movs	r3, #0
 801770e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017716:	4618      	mov	r0, r3
 8017718:	f7f1 fb08 	bl	8008d2c <HAL_PCD_Start>
 801771c:	4603      	mov	r3, r0
 801771e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017720:	7bfb      	ldrb	r3, [r7, #15]
 8017722:	4618      	mov	r0, r3
 8017724:	f000 f97e 	bl	8017a24 <USBD_Get_USB_Status>
 8017728:	4603      	mov	r3, r0
 801772a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801772c:	7bbb      	ldrb	r3, [r7, #14]
}
 801772e:	4618      	mov	r0, r3
 8017730:	3710      	adds	r7, #16
 8017732:	46bd      	mov	sp, r7
 8017734:	bd80      	pop	{r7, pc}

08017736 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017736:	b580      	push	{r7, lr}
 8017738:	b084      	sub	sp, #16
 801773a:	af00      	add	r7, sp, #0
 801773c:	6078      	str	r0, [r7, #4]
 801773e:	4608      	mov	r0, r1
 8017740:	4611      	mov	r1, r2
 8017742:	461a      	mov	r2, r3
 8017744:	4603      	mov	r3, r0
 8017746:	70fb      	strb	r3, [r7, #3]
 8017748:	460b      	mov	r3, r1
 801774a:	70bb      	strb	r3, [r7, #2]
 801774c:	4613      	mov	r3, r2
 801774e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017750:	2300      	movs	r3, #0
 8017752:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017754:	2300      	movs	r3, #0
 8017756:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801775e:	78bb      	ldrb	r3, [r7, #2]
 8017760:	883a      	ldrh	r2, [r7, #0]
 8017762:	78f9      	ldrb	r1, [r7, #3]
 8017764:	f7f1 fc4f 	bl	8009006 <HAL_PCD_EP_Open>
 8017768:	4603      	mov	r3, r0
 801776a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801776c:	7bfb      	ldrb	r3, [r7, #15]
 801776e:	4618      	mov	r0, r3
 8017770:	f000 f958 	bl	8017a24 <USBD_Get_USB_Status>
 8017774:	4603      	mov	r3, r0
 8017776:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017778:	7bbb      	ldrb	r3, [r7, #14]
}
 801777a:	4618      	mov	r0, r3
 801777c:	3710      	adds	r7, #16
 801777e:	46bd      	mov	sp, r7
 8017780:	bd80      	pop	{r7, pc}

08017782 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017782:	b580      	push	{r7, lr}
 8017784:	b084      	sub	sp, #16
 8017786:	af00      	add	r7, sp, #0
 8017788:	6078      	str	r0, [r7, #4]
 801778a:	460b      	mov	r3, r1
 801778c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801778e:	2300      	movs	r3, #0
 8017790:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017792:	2300      	movs	r3, #0
 8017794:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801779c:	78fa      	ldrb	r2, [r7, #3]
 801779e:	4611      	mov	r1, r2
 80177a0:	4618      	mov	r0, r3
 80177a2:	f7f1 fc8f 	bl	80090c4 <HAL_PCD_EP_Close>
 80177a6:	4603      	mov	r3, r0
 80177a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80177aa:	7bfb      	ldrb	r3, [r7, #15]
 80177ac:	4618      	mov	r0, r3
 80177ae:	f000 f939 	bl	8017a24 <USBD_Get_USB_Status>
 80177b2:	4603      	mov	r3, r0
 80177b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80177b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80177b8:	4618      	mov	r0, r3
 80177ba:	3710      	adds	r7, #16
 80177bc:	46bd      	mov	sp, r7
 80177be:	bd80      	pop	{r7, pc}

080177c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80177c0:	b580      	push	{r7, lr}
 80177c2:	b084      	sub	sp, #16
 80177c4:	af00      	add	r7, sp, #0
 80177c6:	6078      	str	r0, [r7, #4]
 80177c8:	460b      	mov	r3, r1
 80177ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80177cc:	2300      	movs	r3, #0
 80177ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80177d0:	2300      	movs	r3, #0
 80177d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80177da:	78fa      	ldrb	r2, [r7, #3]
 80177dc:	4611      	mov	r1, r2
 80177de:	4618      	mov	r0, r3
 80177e0:	f7f1 fd38 	bl	8009254 <HAL_PCD_EP_SetStall>
 80177e4:	4603      	mov	r3, r0
 80177e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80177e8:	7bfb      	ldrb	r3, [r7, #15]
 80177ea:	4618      	mov	r0, r3
 80177ec:	f000 f91a 	bl	8017a24 <USBD_Get_USB_Status>
 80177f0:	4603      	mov	r3, r0
 80177f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80177f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80177f6:	4618      	mov	r0, r3
 80177f8:	3710      	adds	r7, #16
 80177fa:	46bd      	mov	sp, r7
 80177fc:	bd80      	pop	{r7, pc}

080177fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80177fe:	b580      	push	{r7, lr}
 8017800:	b084      	sub	sp, #16
 8017802:	af00      	add	r7, sp, #0
 8017804:	6078      	str	r0, [r7, #4]
 8017806:	460b      	mov	r3, r1
 8017808:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801780a:	2300      	movs	r3, #0
 801780c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801780e:	2300      	movs	r3, #0
 8017810:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017818:	78fa      	ldrb	r2, [r7, #3]
 801781a:	4611      	mov	r1, r2
 801781c:	4618      	mov	r0, r3
 801781e:	f7f1 fd6b 	bl	80092f8 <HAL_PCD_EP_ClrStall>
 8017822:	4603      	mov	r3, r0
 8017824:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017826:	7bfb      	ldrb	r3, [r7, #15]
 8017828:	4618      	mov	r0, r3
 801782a:	f000 f8fb 	bl	8017a24 <USBD_Get_USB_Status>
 801782e:	4603      	mov	r3, r0
 8017830:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017832:	7bbb      	ldrb	r3, [r7, #14]
}
 8017834:	4618      	mov	r0, r3
 8017836:	3710      	adds	r7, #16
 8017838:	46bd      	mov	sp, r7
 801783a:	bd80      	pop	{r7, pc}

0801783c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801783c:	b480      	push	{r7}
 801783e:	b085      	sub	sp, #20
 8017840:	af00      	add	r7, sp, #0
 8017842:	6078      	str	r0, [r7, #4]
 8017844:	460b      	mov	r3, r1
 8017846:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801784e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017850:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017854:	2b00      	cmp	r3, #0
 8017856:	da0b      	bge.n	8017870 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017858:	78fb      	ldrb	r3, [r7, #3]
 801785a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801785e:	68f9      	ldr	r1, [r7, #12]
 8017860:	4613      	mov	r3, r2
 8017862:	009b      	lsls	r3, r3, #2
 8017864:	4413      	add	r3, r2
 8017866:	00db      	lsls	r3, r3, #3
 8017868:	440b      	add	r3, r1
 801786a:	3312      	adds	r3, #18
 801786c:	781b      	ldrb	r3, [r3, #0]
 801786e:	e00b      	b.n	8017888 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017870:	78fb      	ldrb	r3, [r7, #3]
 8017872:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017876:	68f9      	ldr	r1, [r7, #12]
 8017878:	4613      	mov	r3, r2
 801787a:	009b      	lsls	r3, r3, #2
 801787c:	4413      	add	r3, r2
 801787e:	00db      	lsls	r3, r3, #3
 8017880:	440b      	add	r3, r1
 8017882:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8017886:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017888:	4618      	mov	r0, r3
 801788a:	3714      	adds	r7, #20
 801788c:	46bd      	mov	sp, r7
 801788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017892:	4770      	bx	lr

08017894 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017894:	b580      	push	{r7, lr}
 8017896:	b084      	sub	sp, #16
 8017898:	af00      	add	r7, sp, #0
 801789a:	6078      	str	r0, [r7, #4]
 801789c:	460b      	mov	r3, r1
 801789e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80178a0:	2300      	movs	r3, #0
 80178a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80178a4:	2300      	movs	r3, #0
 80178a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80178ae:	78fa      	ldrb	r2, [r7, #3]
 80178b0:	4611      	mov	r1, r2
 80178b2:	4618      	mov	r0, r3
 80178b4:	f7f1 fb83 	bl	8008fbe <HAL_PCD_SetAddress>
 80178b8:	4603      	mov	r3, r0
 80178ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80178bc:	7bfb      	ldrb	r3, [r7, #15]
 80178be:	4618      	mov	r0, r3
 80178c0:	f000 f8b0 	bl	8017a24 <USBD_Get_USB_Status>
 80178c4:	4603      	mov	r3, r0
 80178c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80178c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80178ca:	4618      	mov	r0, r3
 80178cc:	3710      	adds	r7, #16
 80178ce:	46bd      	mov	sp, r7
 80178d0:	bd80      	pop	{r7, pc}

080178d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80178d2:	b580      	push	{r7, lr}
 80178d4:	b086      	sub	sp, #24
 80178d6:	af00      	add	r7, sp, #0
 80178d8:	60f8      	str	r0, [r7, #12]
 80178da:	607a      	str	r2, [r7, #4]
 80178dc:	603b      	str	r3, [r7, #0]
 80178de:	460b      	mov	r3, r1
 80178e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80178e2:	2300      	movs	r3, #0
 80178e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80178e6:	2300      	movs	r3, #0
 80178e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80178ea:	68fb      	ldr	r3, [r7, #12]
 80178ec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80178f0:	7af9      	ldrb	r1, [r7, #11]
 80178f2:	683b      	ldr	r3, [r7, #0]
 80178f4:	687a      	ldr	r2, [r7, #4]
 80178f6:	f7f1 fc76 	bl	80091e6 <HAL_PCD_EP_Transmit>
 80178fa:	4603      	mov	r3, r0
 80178fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80178fe:	7dfb      	ldrb	r3, [r7, #23]
 8017900:	4618      	mov	r0, r3
 8017902:	f000 f88f 	bl	8017a24 <USBD_Get_USB_Status>
 8017906:	4603      	mov	r3, r0
 8017908:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801790a:	7dbb      	ldrb	r3, [r7, #22]
}
 801790c:	4618      	mov	r0, r3
 801790e:	3718      	adds	r7, #24
 8017910:	46bd      	mov	sp, r7
 8017912:	bd80      	pop	{r7, pc}

08017914 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017914:	b580      	push	{r7, lr}
 8017916:	b086      	sub	sp, #24
 8017918:	af00      	add	r7, sp, #0
 801791a:	60f8      	str	r0, [r7, #12]
 801791c:	607a      	str	r2, [r7, #4]
 801791e:	603b      	str	r3, [r7, #0]
 8017920:	460b      	mov	r3, r1
 8017922:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017924:	2300      	movs	r3, #0
 8017926:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017928:	2300      	movs	r3, #0
 801792a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801792c:	68fb      	ldr	r3, [r7, #12]
 801792e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017932:	7af9      	ldrb	r1, [r7, #11]
 8017934:	683b      	ldr	r3, [r7, #0]
 8017936:	687a      	ldr	r2, [r7, #4]
 8017938:	f7f1 fc0c 	bl	8009154 <HAL_PCD_EP_Receive>
 801793c:	4603      	mov	r3, r0
 801793e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017940:	7dfb      	ldrb	r3, [r7, #23]
 8017942:	4618      	mov	r0, r3
 8017944:	f000 f86e 	bl	8017a24 <USBD_Get_USB_Status>
 8017948:	4603      	mov	r3, r0
 801794a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801794c:	7dbb      	ldrb	r3, [r7, #22]
}
 801794e:	4618      	mov	r0, r3
 8017950:	3718      	adds	r7, #24
 8017952:	46bd      	mov	sp, r7
 8017954:	bd80      	pop	{r7, pc}

08017956 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017956:	b580      	push	{r7, lr}
 8017958:	b082      	sub	sp, #8
 801795a:	af00      	add	r7, sp, #0
 801795c:	6078      	str	r0, [r7, #4]
 801795e:	460b      	mov	r3, r1
 8017960:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017968:	78fa      	ldrb	r2, [r7, #3]
 801796a:	4611      	mov	r1, r2
 801796c:	4618      	mov	r0, r3
 801796e:	f7f1 fc22 	bl	80091b6 <HAL_PCD_EP_GetRxCount>
 8017972:	4603      	mov	r3, r0
}
 8017974:	4618      	mov	r0, r3
 8017976:	3708      	adds	r7, #8
 8017978:	46bd      	mov	sp, r7
 801797a:	bd80      	pop	{r7, pc}

0801797c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801797c:	b580      	push	{r7, lr}
 801797e:	b082      	sub	sp, #8
 8017980:	af00      	add	r7, sp, #0
 8017982:	6078      	str	r0, [r7, #4]
 8017984:	460b      	mov	r3, r1
 8017986:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8017988:	78fb      	ldrb	r3, [r7, #3]
 801798a:	2b00      	cmp	r3, #0
 801798c:	d002      	beq.n	8017994 <HAL_PCDEx_LPM_Callback+0x18>
 801798e:	2b01      	cmp	r3, #1
 8017990:	d013      	beq.n	80179ba <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8017992:	e023      	b.n	80179dc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	7a5b      	ldrb	r3, [r3, #9]
 8017998:	2b00      	cmp	r3, #0
 801799a:	d007      	beq.n	80179ac <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801799c:	f000 f83c 	bl	8017a18 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80179a0:	4b10      	ldr	r3, [pc, #64]	@ (80179e4 <HAL_PCDEx_LPM_Callback+0x68>)
 80179a2:	691b      	ldr	r3, [r3, #16]
 80179a4:	4a0f      	ldr	r2, [pc, #60]	@ (80179e4 <HAL_PCDEx_LPM_Callback+0x68>)
 80179a6:	f023 0306 	bic.w	r3, r3, #6
 80179aa:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80179b2:	4618      	mov	r0, r3
 80179b4:	f7fa f955 	bl	8011c62 <USBD_LL_Resume>
    break;
 80179b8:	e010      	b.n	80179dc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80179c0:	4618      	mov	r0, r3
 80179c2:	f7fa f932 	bl	8011c2a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	7a5b      	ldrb	r3, [r3, #9]
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	d005      	beq.n	80179da <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80179ce:	4b05      	ldr	r3, [pc, #20]	@ (80179e4 <HAL_PCDEx_LPM_Callback+0x68>)
 80179d0:	691b      	ldr	r3, [r3, #16]
 80179d2:	4a04      	ldr	r2, [pc, #16]	@ (80179e4 <HAL_PCDEx_LPM_Callback+0x68>)
 80179d4:	f043 0306 	orr.w	r3, r3, #6
 80179d8:	6113      	str	r3, [r2, #16]
    break;
 80179da:	bf00      	nop
}
 80179dc:	bf00      	nop
 80179de:	3708      	adds	r7, #8
 80179e0:	46bd      	mov	sp, r7
 80179e2:	bd80      	pop	{r7, pc}
 80179e4:	e000ed00 	.word	0xe000ed00

080179e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80179e8:	b480      	push	{r7}
 80179ea:	b083      	sub	sp, #12
 80179ec:	af00      	add	r7, sp, #0
 80179ee:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80179f0:	4b03      	ldr	r3, [pc, #12]	@ (8017a00 <USBD_static_malloc+0x18>)
}
 80179f2:	4618      	mov	r0, r3
 80179f4:	370c      	adds	r7, #12
 80179f6:	46bd      	mov	sp, r7
 80179f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179fc:	4770      	bx	lr
 80179fe:	bf00      	nop
 8017a00:	20002314 	.word	0x20002314

08017a04 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017a04:	b480      	push	{r7}
 8017a06:	b083      	sub	sp, #12
 8017a08:	af00      	add	r7, sp, #0
 8017a0a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8017a0c:	bf00      	nop
 8017a0e:	370c      	adds	r7, #12
 8017a10:	46bd      	mov	sp, r7
 8017a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a16:	4770      	bx	lr

08017a18 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8017a18:	b580      	push	{r7, lr}
 8017a1a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8017a1c:	f7ee fcd0 	bl	80063c0 <SystemClock_Config>
}
 8017a20:	bf00      	nop
 8017a22:	bd80      	pop	{r7, pc}

08017a24 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017a24:	b480      	push	{r7}
 8017a26:	b085      	sub	sp, #20
 8017a28:	af00      	add	r7, sp, #0
 8017a2a:	4603      	mov	r3, r0
 8017a2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017a2e:	2300      	movs	r3, #0
 8017a30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017a32:	79fb      	ldrb	r3, [r7, #7]
 8017a34:	2b03      	cmp	r3, #3
 8017a36:	d817      	bhi.n	8017a68 <USBD_Get_USB_Status+0x44>
 8017a38:	a201      	add	r2, pc, #4	@ (adr r2, 8017a40 <USBD_Get_USB_Status+0x1c>)
 8017a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a3e:	bf00      	nop
 8017a40:	08017a51 	.word	0x08017a51
 8017a44:	08017a57 	.word	0x08017a57
 8017a48:	08017a5d 	.word	0x08017a5d
 8017a4c:	08017a63 	.word	0x08017a63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017a50:	2300      	movs	r3, #0
 8017a52:	73fb      	strb	r3, [r7, #15]
    break;
 8017a54:	e00b      	b.n	8017a6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017a56:	2303      	movs	r3, #3
 8017a58:	73fb      	strb	r3, [r7, #15]
    break;
 8017a5a:	e008      	b.n	8017a6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017a5c:	2301      	movs	r3, #1
 8017a5e:	73fb      	strb	r3, [r7, #15]
    break;
 8017a60:	e005      	b.n	8017a6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017a62:	2303      	movs	r3, #3
 8017a64:	73fb      	strb	r3, [r7, #15]
    break;
 8017a66:	e002      	b.n	8017a6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017a68:	2303      	movs	r3, #3
 8017a6a:	73fb      	strb	r3, [r7, #15]
    break;
 8017a6c:	bf00      	nop
  }
  return usb_status;
 8017a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017a70:	4618      	mov	r0, r3
 8017a72:	3714      	adds	r7, #20
 8017a74:	46bd      	mov	sp, r7
 8017a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a7a:	4770      	bx	lr

08017a7c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8017a7c:	b480      	push	{r7}
 8017a7e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8017a80:	4b05      	ldr	r3, [pc, #20]	@ (8017a98 <UTIL_LPM_Init+0x1c>)
 8017a82:	2200      	movs	r2, #0
 8017a84:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8017a86:	4b05      	ldr	r3, [pc, #20]	@ (8017a9c <UTIL_LPM_Init+0x20>)
 8017a88:	2200      	movs	r2, #0
 8017a8a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8017a8c:	bf00      	nop
 8017a8e:	46bd      	mov	sp, r7
 8017a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a94:	4770      	bx	lr
 8017a96:	bf00      	nop
 8017a98:	20002534 	.word	0x20002534
 8017a9c:	20002538 	.word	0x20002538

08017aa0 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8017aa0:	b480      	push	{r7}
 8017aa2:	b087      	sub	sp, #28
 8017aa4:	af00      	add	r7, sp, #0
 8017aa6:	6078      	str	r0, [r7, #4]
 8017aa8:	460b      	mov	r3, r1
 8017aaa:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017aac:	f3ef 8310 	mrs	r3, PRIMASK
 8017ab0:	613b      	str	r3, [r7, #16]
  return(result);
 8017ab2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8017ab4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8017ab6:	b672      	cpsid	i
}
 8017ab8:	bf00      	nop
  
  switch(state)
 8017aba:	78fb      	ldrb	r3, [r7, #3]
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d008      	beq.n	8017ad2 <UTIL_LPM_SetOffMode+0x32>
 8017ac0:	2b01      	cmp	r3, #1
 8017ac2:	d10e      	bne.n	8017ae2 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8017ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8017afc <UTIL_LPM_SetOffMode+0x5c>)
 8017ac6:	681a      	ldr	r2, [r3, #0]
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	4313      	orrs	r3, r2
 8017acc:	4a0b      	ldr	r2, [pc, #44]	@ (8017afc <UTIL_LPM_SetOffMode+0x5c>)
 8017ace:	6013      	str	r3, [r2, #0]
      break;
 8017ad0:	e008      	b.n	8017ae4 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	43da      	mvns	r2, r3
 8017ad6:	4b09      	ldr	r3, [pc, #36]	@ (8017afc <UTIL_LPM_SetOffMode+0x5c>)
 8017ad8:	681b      	ldr	r3, [r3, #0]
 8017ada:	4013      	ands	r3, r2
 8017adc:	4a07      	ldr	r2, [pc, #28]	@ (8017afc <UTIL_LPM_SetOffMode+0x5c>)
 8017ade:	6013      	str	r3, [r2, #0]
      break;
 8017ae0:	e000      	b.n	8017ae4 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8017ae2:	bf00      	nop
 8017ae4:	697b      	ldr	r3, [r7, #20]
 8017ae6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ae8:	68fb      	ldr	r3, [r7, #12]
 8017aea:	f383 8810 	msr	PRIMASK, r3
}
 8017aee:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8017af0:	bf00      	nop
 8017af2:	371c      	adds	r7, #28
 8017af4:	46bd      	mov	sp, r7
 8017af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017afa:	4770      	bx	lr
 8017afc:	20002538 	.word	0x20002538

08017b00 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8017b00:	b580      	push	{r7, lr}
 8017b02:	b090      	sub	sp, #64	@ 0x40
 8017b04:	af00      	add	r7, sp, #0
 8017b06:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8017b08:	4b73      	ldr	r3, [pc, #460]	@ (8017cd8 <UTIL_SEQ_Run+0x1d8>)
 8017b0a:	681b      	ldr	r3, [r3, #0]
 8017b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8017b0e:	4b72      	ldr	r3, [pc, #456]	@ (8017cd8 <UTIL_SEQ_Run+0x1d8>)
 8017b10:	681a      	ldr	r2, [r3, #0]
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	4013      	ands	r3, r2
 8017b16:	4a70      	ldr	r2, [pc, #448]	@ (8017cd8 <UTIL_SEQ_Run+0x1d8>)
 8017b18:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8017b1a:	4b70      	ldr	r3, [pc, #448]	@ (8017cdc <UTIL_SEQ_Run+0x1dc>)
 8017b1c:	681b      	ldr	r3, [r3, #0]
 8017b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8017b20:	4b6f      	ldr	r3, [pc, #444]	@ (8017ce0 <UTIL_SEQ_Run+0x1e0>)
 8017b22:	681b      	ldr	r3, [r3, #0]
 8017b24:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8017b26:	4b6f      	ldr	r3, [pc, #444]	@ (8017ce4 <UTIL_SEQ_Run+0x1e4>)
 8017b28:	681b      	ldr	r3, [r3, #0]
 8017b2a:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8017b2c:	4b6e      	ldr	r3, [pc, #440]	@ (8017ce8 <UTIL_SEQ_Run+0x1e8>)
 8017b2e:	681b      	ldr	r3, [r3, #0]
 8017b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8017b32:	e08d      	b.n	8017c50 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8017b34:	2300      	movs	r3, #0
 8017b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8017b38:	e002      	b.n	8017b40 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8017b3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017b3c:	3301      	adds	r3, #1
 8017b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8017b40:	4a6a      	ldr	r2, [pc, #424]	@ (8017cec <UTIL_SEQ_Run+0x1ec>)
 8017b42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017b44:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8017b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b4a:	401a      	ands	r2, r3
 8017b4c:	4b62      	ldr	r3, [pc, #392]	@ (8017cd8 <UTIL_SEQ_Run+0x1d8>)
 8017b4e:	681b      	ldr	r3, [r3, #0]
 8017b50:	4013      	ands	r3, r2
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d0f1      	beq.n	8017b3a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8017b56:	4a65      	ldr	r2, [pc, #404]	@ (8017cec <UTIL_SEQ_Run+0x1ec>)
 8017b58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017b5a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8017b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b60:	401a      	ands	r2, r3
 8017b62:	4b5d      	ldr	r3, [pc, #372]	@ (8017cd8 <UTIL_SEQ_Run+0x1d8>)
 8017b64:	681b      	ldr	r3, [r3, #0]
 8017b66:	4013      	ands	r3, r2
 8017b68:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8017b6a:	4a60      	ldr	r2, [pc, #384]	@ (8017cec <UTIL_SEQ_Run+0x1ec>)
 8017b6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017b6e:	00db      	lsls	r3, r3, #3
 8017b70:	4413      	add	r3, r2
 8017b72:	685a      	ldr	r2, [r3, #4]
 8017b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b76:	4013      	ands	r3, r2
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	d106      	bne.n	8017b8a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8017b7c:	4a5b      	ldr	r2, [pc, #364]	@ (8017cec <UTIL_SEQ_Run+0x1ec>)
 8017b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017b80:	00db      	lsls	r3, r3, #3
 8017b82:	4413      	add	r3, r2
 8017b84:	f04f 32ff 	mov.w	r2, #4294967295
 8017b88:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8017b8a:	4a58      	ldr	r2, [pc, #352]	@ (8017cec <UTIL_SEQ_Run+0x1ec>)
 8017b8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017b8e:	00db      	lsls	r3, r3, #3
 8017b90:	4413      	add	r3, r2
 8017b92:	685a      	ldr	r2, [r3, #4]
 8017b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b96:	4013      	ands	r3, r2
 8017b98:	4618      	mov	r0, r3
 8017b9a:	f000 f9c1 	bl	8017f20 <SEQ_BitPosition>
 8017b9e:	4603      	mov	r3, r0
 8017ba0:	461a      	mov	r2, r3
 8017ba2:	4b53      	ldr	r3, [pc, #332]	@ (8017cf0 <UTIL_SEQ_Run+0x1f0>)
 8017ba4:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8017ba6:	4a51      	ldr	r2, [pc, #324]	@ (8017cec <UTIL_SEQ_Run+0x1ec>)
 8017ba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017baa:	00db      	lsls	r3, r3, #3
 8017bac:	4413      	add	r3, r2
 8017bae:	685a      	ldr	r2, [r3, #4]
 8017bb0:	4b4f      	ldr	r3, [pc, #316]	@ (8017cf0 <UTIL_SEQ_Run+0x1f0>)
 8017bb2:	681b      	ldr	r3, [r3, #0]
 8017bb4:	2101      	movs	r1, #1
 8017bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8017bba:	43db      	mvns	r3, r3
 8017bbc:	401a      	ands	r2, r3
 8017bbe:	494b      	ldr	r1, [pc, #300]	@ (8017cec <UTIL_SEQ_Run+0x1ec>)
 8017bc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017bc2:	00db      	lsls	r3, r3, #3
 8017bc4:	440b      	add	r3, r1
 8017bc6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017bc8:	f3ef 8310 	mrs	r3, PRIMASK
 8017bcc:	61bb      	str	r3, [r7, #24]
  return(result);
 8017bce:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8017bd0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8017bd2:	b672      	cpsid	i
}
 8017bd4:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8017bd6:	4b46      	ldr	r3, [pc, #280]	@ (8017cf0 <UTIL_SEQ_Run+0x1f0>)
 8017bd8:	681b      	ldr	r3, [r3, #0]
 8017bda:	2201      	movs	r2, #1
 8017bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8017be0:	43da      	mvns	r2, r3
 8017be2:	4b3e      	ldr	r3, [pc, #248]	@ (8017cdc <UTIL_SEQ_Run+0x1dc>)
 8017be4:	681b      	ldr	r3, [r3, #0]
 8017be6:	4013      	ands	r3, r2
 8017be8:	4a3c      	ldr	r2, [pc, #240]	@ (8017cdc <UTIL_SEQ_Run+0x1dc>)
 8017bea:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8017bec:	2301      	movs	r3, #1
 8017bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017bf0:	e013      	b.n	8017c1a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8017bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017bf4:	3b01      	subs	r3, #1
 8017bf6:	4a3d      	ldr	r2, [pc, #244]	@ (8017cec <UTIL_SEQ_Run+0x1ec>)
 8017bf8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8017bfc:	4b3c      	ldr	r3, [pc, #240]	@ (8017cf0 <UTIL_SEQ_Run+0x1f0>)
 8017bfe:	681b      	ldr	r3, [r3, #0]
 8017c00:	2201      	movs	r2, #1
 8017c02:	fa02 f303 	lsl.w	r3, r2, r3
 8017c06:	43da      	mvns	r2, r3
 8017c08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017c0a:	3b01      	subs	r3, #1
 8017c0c:	400a      	ands	r2, r1
 8017c0e:	4937      	ldr	r1, [pc, #220]	@ (8017cec <UTIL_SEQ_Run+0x1ec>)
 8017c10:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8017c14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017c16:	3b01      	subs	r3, #1
 8017c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017c1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	d1e8      	bne.n	8017bf2 <UTIL_SEQ_Run+0xf2>
 8017c20:	6a3b      	ldr	r3, [r7, #32]
 8017c22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017c24:	697b      	ldr	r3, [r7, #20]
 8017c26:	f383 8810 	msr	PRIMASK, r3
}
 8017c2a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8017c2c:	4b30      	ldr	r3, [pc, #192]	@ (8017cf0 <UTIL_SEQ_Run+0x1f0>)
 8017c2e:	681b      	ldr	r3, [r3, #0]
 8017c30:	4a30      	ldr	r2, [pc, #192]	@ (8017cf4 <UTIL_SEQ_Run+0x1f4>)
 8017c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017c36:	4798      	blx	r3

    local_taskset = TaskSet;
 8017c38:	4b28      	ldr	r3, [pc, #160]	@ (8017cdc <UTIL_SEQ_Run+0x1dc>)
 8017c3a:	681b      	ldr	r3, [r3, #0]
 8017c3c:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8017c3e:	4b28      	ldr	r3, [pc, #160]	@ (8017ce0 <UTIL_SEQ_Run+0x1e0>)
 8017c40:	681b      	ldr	r3, [r3, #0]
 8017c42:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8017c44:	4b27      	ldr	r3, [pc, #156]	@ (8017ce4 <UTIL_SEQ_Run+0x1e4>)
 8017c46:	681b      	ldr	r3, [r3, #0]
 8017c48:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8017c4a:	4b27      	ldr	r3, [pc, #156]	@ (8017ce8 <UTIL_SEQ_Run+0x1e8>)
 8017c4c:	681b      	ldr	r3, [r3, #0]
 8017c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8017c50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8017c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c54:	401a      	ands	r2, r3
 8017c56:	4b20      	ldr	r3, [pc, #128]	@ (8017cd8 <UTIL_SEQ_Run+0x1d8>)
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	4013      	ands	r3, r2
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d005      	beq.n	8017c6c <UTIL_SEQ_Run+0x16c>
 8017c60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c64:	4013      	ands	r3, r2
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	f43f af64 	beq.w	8017b34 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8017c6c:	4b20      	ldr	r3, [pc, #128]	@ (8017cf0 <UTIL_SEQ_Run+0x1f0>)
 8017c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8017c72:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8017c74:	f000 f946 	bl	8017f04 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017c78:	f3ef 8310 	mrs	r3, PRIMASK
 8017c7c:	613b      	str	r3, [r7, #16]
  return(result);
 8017c7e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8017c80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8017c82:	b672      	cpsid	i
}
 8017c84:	bf00      	nop
  local_taskset = TaskSet;
 8017c86:	4b15      	ldr	r3, [pc, #84]	@ (8017cdc <UTIL_SEQ_Run+0x1dc>)
 8017c88:	681b      	ldr	r3, [r3, #0]
 8017c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8017c8c:	4b14      	ldr	r3, [pc, #80]	@ (8017ce0 <UTIL_SEQ_Run+0x1e0>)
 8017c8e:	681b      	ldr	r3, [r3, #0]
 8017c90:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8017c92:	4b14      	ldr	r3, [pc, #80]	@ (8017ce4 <UTIL_SEQ_Run+0x1e4>)
 8017c94:	681b      	ldr	r3, [r3, #0]
 8017c96:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8017c98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8017c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c9c:	401a      	ands	r2, r3
 8017c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8017cd8 <UTIL_SEQ_Run+0x1d8>)
 8017ca0:	681b      	ldr	r3, [r3, #0]
 8017ca2:	4013      	ands	r3, r2
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d107      	bne.n	8017cb8 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8017ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8017ce8 <UTIL_SEQ_Run+0x1e8>)
 8017caa:	681a      	ldr	r2, [r3, #0]
 8017cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017cae:	4013      	ands	r3, r2
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d101      	bne.n	8017cb8 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8017cb4:	f7ed f874 	bl	8004da0 <UTIL_SEQ_Idle>
 8017cb8:	69fb      	ldr	r3, [r7, #28]
 8017cba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017cbc:	68fb      	ldr	r3, [r7, #12]
 8017cbe:	f383 8810 	msr	PRIMASK, r3
}
 8017cc2:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8017cc4:	f000 f925 	bl	8017f12 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8017cc8:	4a03      	ldr	r2, [pc, #12]	@ (8017cd8 <UTIL_SEQ_Run+0x1d8>)
 8017cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ccc:	6013      	str	r3, [r2, #0]

  return;
 8017cce:	bf00      	nop
}
 8017cd0:	3740      	adds	r7, #64	@ 0x40
 8017cd2:	46bd      	mov	sp, r7
 8017cd4:	bd80      	pop	{r7, pc}
 8017cd6:	bf00      	nop
 8017cd8:	20000140 	.word	0x20000140
 8017cdc:	2000253c 	.word	0x2000253c
 8017ce0:	20002540 	.word	0x20002540
 8017ce4:	2000013c 	.word	0x2000013c
 8017ce8:	20002544 	.word	0x20002544
 8017cec:	200025cc 	.word	0x200025cc
 8017cf0:	20002548 	.word	0x20002548
 8017cf4:	2000254c 	.word	0x2000254c

08017cf8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8017cf8:	b580      	push	{r7, lr}
 8017cfa:	b088      	sub	sp, #32
 8017cfc:	af00      	add	r7, sp, #0
 8017cfe:	60f8      	str	r0, [r7, #12]
 8017d00:	60b9      	str	r1, [r7, #8]
 8017d02:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017d04:	f3ef 8310 	mrs	r3, PRIMASK
 8017d08:	617b      	str	r3, [r7, #20]
  return(result);
 8017d0a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8017d0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8017d0e:	b672      	cpsid	i
}
 8017d10:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8017d12:	68f8      	ldr	r0, [r7, #12]
 8017d14:	f000 f904 	bl	8017f20 <SEQ_BitPosition>
 8017d18:	4603      	mov	r3, r0
 8017d1a:	4619      	mov	r1, r3
 8017d1c:	4a06      	ldr	r2, [pc, #24]	@ (8017d38 <UTIL_SEQ_RegTask+0x40>)
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8017d24:	69fb      	ldr	r3, [r7, #28]
 8017d26:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d28:	69bb      	ldr	r3, [r7, #24]
 8017d2a:	f383 8810 	msr	PRIMASK, r3
}
 8017d2e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8017d30:	bf00      	nop
}
 8017d32:	3720      	adds	r7, #32
 8017d34:	46bd      	mov	sp, r7
 8017d36:	bd80      	pop	{r7, pc}
 8017d38:	2000254c 	.word	0x2000254c

08017d3c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8017d3c:	b480      	push	{r7}
 8017d3e:	b087      	sub	sp, #28
 8017d40:	af00      	add	r7, sp, #0
 8017d42:	6078      	str	r0, [r7, #4]
 8017d44:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017d46:	f3ef 8310 	mrs	r3, PRIMASK
 8017d4a:	60fb      	str	r3, [r7, #12]
  return(result);
 8017d4c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8017d4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8017d50:	b672      	cpsid	i
}
 8017d52:	bf00      	nop

  TaskSet |= TaskId_bm;
 8017d54:	4b0d      	ldr	r3, [pc, #52]	@ (8017d8c <UTIL_SEQ_SetTask+0x50>)
 8017d56:	681a      	ldr	r2, [r3, #0]
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	4313      	orrs	r3, r2
 8017d5c:	4a0b      	ldr	r2, [pc, #44]	@ (8017d8c <UTIL_SEQ_SetTask+0x50>)
 8017d5e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8017d60:	4a0b      	ldr	r2, [pc, #44]	@ (8017d90 <UTIL_SEQ_SetTask+0x54>)
 8017d62:	683b      	ldr	r3, [r7, #0]
 8017d64:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	431a      	orrs	r2, r3
 8017d6c:	4908      	ldr	r1, [pc, #32]	@ (8017d90 <UTIL_SEQ_SetTask+0x54>)
 8017d6e:	683b      	ldr	r3, [r7, #0]
 8017d70:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8017d74:	697b      	ldr	r3, [r7, #20]
 8017d76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d78:	693b      	ldr	r3, [r7, #16]
 8017d7a:	f383 8810 	msr	PRIMASK, r3
}
 8017d7e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8017d80:	bf00      	nop
}
 8017d82:	371c      	adds	r7, #28
 8017d84:	46bd      	mov	sp, r7
 8017d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d8a:	4770      	bx	lr
 8017d8c:	2000253c 	.word	0x2000253c
 8017d90:	200025cc 	.word	0x200025cc

08017d94 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8017d94:	b480      	push	{r7}
 8017d96:	b087      	sub	sp, #28
 8017d98:	af00      	add	r7, sp, #0
 8017d9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017d9c:	f3ef 8310 	mrs	r3, PRIMASK
 8017da0:	60fb      	str	r3, [r7, #12]
  return(result);
 8017da2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8017da4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8017da6:	b672      	cpsid	i
}
 8017da8:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	43da      	mvns	r2, r3
 8017dae:	4b08      	ldr	r3, [pc, #32]	@ (8017dd0 <UTIL_SEQ_PauseTask+0x3c>)
 8017db0:	681b      	ldr	r3, [r3, #0]
 8017db2:	4013      	ands	r3, r2
 8017db4:	4a06      	ldr	r2, [pc, #24]	@ (8017dd0 <UTIL_SEQ_PauseTask+0x3c>)
 8017db6:	6013      	str	r3, [r2, #0]
 8017db8:	697b      	ldr	r3, [r7, #20]
 8017dba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017dbc:	693b      	ldr	r3, [r7, #16]
 8017dbe:	f383 8810 	msr	PRIMASK, r3
}
 8017dc2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8017dc4:	bf00      	nop
}
 8017dc6:	371c      	adds	r7, #28
 8017dc8:	46bd      	mov	sp, r7
 8017dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dce:	4770      	bx	lr
 8017dd0:	2000013c 	.word	0x2000013c

08017dd4 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8017dd4:	b480      	push	{r7}
 8017dd6:	b087      	sub	sp, #28
 8017dd8:	af00      	add	r7, sp, #0
 8017dda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8017de0:	60fb      	str	r3, [r7, #12]
  return(result);
 8017de2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8017de4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8017de6:	b672      	cpsid	i
}
 8017de8:	bf00      	nop

  TaskMask |= TaskId_bm;
 8017dea:	4b09      	ldr	r3, [pc, #36]	@ (8017e10 <UTIL_SEQ_ResumeTask+0x3c>)
 8017dec:	681a      	ldr	r2, [r3, #0]
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	4313      	orrs	r3, r2
 8017df2:	4a07      	ldr	r2, [pc, #28]	@ (8017e10 <UTIL_SEQ_ResumeTask+0x3c>)
 8017df4:	6013      	str	r3, [r2, #0]
 8017df6:	697b      	ldr	r3, [r7, #20]
 8017df8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017dfa:	693b      	ldr	r3, [r7, #16]
 8017dfc:	f383 8810 	msr	PRIMASK, r3
}
 8017e00:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8017e02:	bf00      	nop
}
 8017e04:	371c      	adds	r7, #28
 8017e06:	46bd      	mov	sp, r7
 8017e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e0c:	4770      	bx	lr
 8017e0e:	bf00      	nop
 8017e10:	2000013c 	.word	0x2000013c

08017e14 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8017e14:	b480      	push	{r7}
 8017e16:	b087      	sub	sp, #28
 8017e18:	af00      	add	r7, sp, #0
 8017e1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8017e20:	60fb      	str	r3, [r7, #12]
  return(result);
 8017e22:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8017e24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8017e26:	b672      	cpsid	i
}
 8017e28:	bf00      	nop

  EvtSet |= EvtId_bm;
 8017e2a:	4b09      	ldr	r3, [pc, #36]	@ (8017e50 <UTIL_SEQ_SetEvt+0x3c>)
 8017e2c:	681a      	ldr	r2, [r3, #0]
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	4313      	orrs	r3, r2
 8017e32:	4a07      	ldr	r2, [pc, #28]	@ (8017e50 <UTIL_SEQ_SetEvt+0x3c>)
 8017e34:	6013      	str	r3, [r2, #0]
 8017e36:	697b      	ldr	r3, [r7, #20]
 8017e38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e3a:	693b      	ldr	r3, [r7, #16]
 8017e3c:	f383 8810 	msr	PRIMASK, r3
}
 8017e40:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8017e42:	bf00      	nop
}
 8017e44:	371c      	adds	r7, #28
 8017e46:	46bd      	mov	sp, r7
 8017e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e4c:	4770      	bx	lr
 8017e4e:	bf00      	nop
 8017e50:	20002540 	.word	0x20002540

08017e54 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8017e54:	b580      	push	{r7, lr}
 8017e56:	b088      	sub	sp, #32
 8017e58:	af00      	add	r7, sp, #0
 8017e5a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8017e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8017edc <UTIL_SEQ_WaitEvt+0x88>)
 8017e5e:	681b      	ldr	r3, [r3, #0]
 8017e60:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8017e62:	4b1e      	ldr	r3, [pc, #120]	@ (8017edc <UTIL_SEQ_WaitEvt+0x88>)
 8017e64:	681b      	ldr	r3, [r3, #0]
 8017e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e6a:	d102      	bne.n	8017e72 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8017e6c:	2300      	movs	r3, #0
 8017e6e:	61fb      	str	r3, [r7, #28]
 8017e70:	e005      	b.n	8017e7e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8017e72:	4b1a      	ldr	r3, [pc, #104]	@ (8017edc <UTIL_SEQ_WaitEvt+0x88>)
 8017e74:	681b      	ldr	r3, [r3, #0]
 8017e76:	2201      	movs	r2, #1
 8017e78:	fa02 f303 	lsl.w	r3, r2, r3
 8017e7c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8017e7e:	4b18      	ldr	r3, [pc, #96]	@ (8017ee0 <UTIL_SEQ_WaitEvt+0x8c>)
 8017e80:	681b      	ldr	r3, [r3, #0]
 8017e82:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8017e84:	4a16      	ldr	r2, [pc, #88]	@ (8017ee0 <UTIL_SEQ_WaitEvt+0x8c>)
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8017e8a:	e003      	b.n	8017e94 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8017e8c:	6879      	ldr	r1, [r7, #4]
 8017e8e:	69f8      	ldr	r0, [r7, #28]
 8017e90:	f000 f82a 	bl	8017ee8 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8017e94:	4b13      	ldr	r3, [pc, #76]	@ (8017ee4 <UTIL_SEQ_WaitEvt+0x90>)
 8017e96:	681a      	ldr	r2, [r3, #0]
 8017e98:	687b      	ldr	r3, [r7, #4]
 8017e9a:	4013      	ands	r3, r2
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d0f5      	beq.n	8017e8c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8017ea0:	4a0e      	ldr	r2, [pc, #56]	@ (8017edc <UTIL_SEQ_WaitEvt+0x88>)
 8017ea2:	69bb      	ldr	r3, [r7, #24]
 8017ea4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017ea6:	f3ef 8310 	mrs	r3, PRIMASK
 8017eaa:	60bb      	str	r3, [r7, #8]
  return(result);
 8017eac:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8017eae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8017eb0:	b672      	cpsid	i
}
 8017eb2:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8017eb4:	687b      	ldr	r3, [r7, #4]
 8017eb6:	43da      	mvns	r2, r3
 8017eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8017ee4 <UTIL_SEQ_WaitEvt+0x90>)
 8017eba:	681b      	ldr	r3, [r3, #0]
 8017ebc:	4013      	ands	r3, r2
 8017ebe:	4a09      	ldr	r2, [pc, #36]	@ (8017ee4 <UTIL_SEQ_WaitEvt+0x90>)
 8017ec0:	6013      	str	r3, [r2, #0]
 8017ec2:	693b      	ldr	r3, [r7, #16]
 8017ec4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ec6:	68fb      	ldr	r3, [r7, #12]
 8017ec8:	f383 8810 	msr	PRIMASK, r3
}
 8017ecc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8017ece:	4a04      	ldr	r2, [pc, #16]	@ (8017ee0 <UTIL_SEQ_WaitEvt+0x8c>)
 8017ed0:	697b      	ldr	r3, [r7, #20]
 8017ed2:	6013      	str	r3, [r2, #0]
  return;
 8017ed4:	bf00      	nop
}
 8017ed6:	3720      	adds	r7, #32
 8017ed8:	46bd      	mov	sp, r7
 8017eda:	bd80      	pop	{r7, pc}
 8017edc:	20002548 	.word	0x20002548
 8017ee0:	20002544 	.word	0x20002544
 8017ee4:	20002540 	.word	0x20002540

08017ee8 <UTIL_SEQ_EvtIdle>:
  UTIL_SEQ_bm_t local_evtwaited = EvtWaited;
  return (EvtSet & local_evtwaited);
}

__WEAK void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t TaskId_bm, UTIL_SEQ_bm_t EvtWaited_bm )
{
 8017ee8:	b580      	push	{r7, lr}
 8017eea:	b082      	sub	sp, #8
 8017eec:	af00      	add	r7, sp, #0
 8017eee:	6078      	str	r0, [r7, #4]
 8017ef0:	6039      	str	r1, [r7, #0]
  (void)EvtWaited_bm;
  UTIL_SEQ_Run(~TaskId_bm);
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	43db      	mvns	r3, r3
 8017ef6:	4618      	mov	r0, r3
 8017ef8:	f7ff fe02 	bl	8017b00 <UTIL_SEQ_Run>
  return;
 8017efc:	bf00      	nop
}
 8017efe:	3708      	adds	r7, #8
 8017f00:	46bd      	mov	sp, r7
 8017f02:	bd80      	pop	{r7, pc}

08017f04 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8017f04:	b480      	push	{r7}
 8017f06:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8017f08:	bf00      	nop
}
 8017f0a:	46bd      	mov	sp, r7
 8017f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f10:	4770      	bx	lr

08017f12 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8017f12:	b480      	push	{r7}
 8017f14:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8017f16:	bf00      	nop
}
 8017f18:	46bd      	mov	sp, r7
 8017f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f1e:	4770      	bx	lr

08017f20 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8017f20:	b480      	push	{r7}
 8017f22:	b085      	sub	sp, #20
 8017f24:	af00      	add	r7, sp, #0
 8017f26:	6078      	str	r0, [r7, #4]
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 8017f2c:	68fb      	ldr	r3, [r7, #12]
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	d101      	bne.n	8017f36 <SEQ_BitPosition+0x16>
    return 32U;
 8017f32:	2320      	movs	r3, #32
 8017f34:	e003      	b.n	8017f3e <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 8017f36:	68fb      	ldr	r3, [r7, #12]
 8017f38:	fab3 f383 	clz	r3, r3
 8017f3c:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 8017f3e:	f1c3 031f 	rsb	r3, r3, #31
 8017f42:	b2db      	uxtb	r3, r3
}
 8017f44:	4618      	mov	r0, r3
 8017f46:	3714      	adds	r7, #20
 8017f48:	46bd      	mov	sp, r7
 8017f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f4e:	4770      	bx	lr

08017f50 <cosf>:
 8017f50:	ee10 3a10 	vmov	r3, s0
 8017f54:	b507      	push	{r0, r1, r2, lr}
 8017f56:	4a1e      	ldr	r2, [pc, #120]	@ (8017fd0 <cosf+0x80>)
 8017f58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017f5c:	4293      	cmp	r3, r2
 8017f5e:	d806      	bhi.n	8017f6e <cosf+0x1e>
 8017f60:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8017fd4 <cosf+0x84>
 8017f64:	b003      	add	sp, #12
 8017f66:	f85d eb04 	ldr.w	lr, [sp], #4
 8017f6a:	f000 b87b 	b.w	8018064 <__kernel_cosf>
 8017f6e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8017f72:	d304      	bcc.n	8017f7e <cosf+0x2e>
 8017f74:	ee30 0a40 	vsub.f32	s0, s0, s0
 8017f78:	b003      	add	sp, #12
 8017f7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8017f7e:	4668      	mov	r0, sp
 8017f80:	f000 f910 	bl	80181a4 <__ieee754_rem_pio2f>
 8017f84:	f000 0003 	and.w	r0, r0, #3
 8017f88:	2801      	cmp	r0, #1
 8017f8a:	d009      	beq.n	8017fa0 <cosf+0x50>
 8017f8c:	2802      	cmp	r0, #2
 8017f8e:	d010      	beq.n	8017fb2 <cosf+0x62>
 8017f90:	b9b0      	cbnz	r0, 8017fc0 <cosf+0x70>
 8017f92:	eddd 0a01 	vldr	s1, [sp, #4]
 8017f96:	ed9d 0a00 	vldr	s0, [sp]
 8017f9a:	f000 f863 	bl	8018064 <__kernel_cosf>
 8017f9e:	e7eb      	b.n	8017f78 <cosf+0x28>
 8017fa0:	eddd 0a01 	vldr	s1, [sp, #4]
 8017fa4:	ed9d 0a00 	vldr	s0, [sp]
 8017fa8:	f000 f8b4 	bl	8018114 <__kernel_sinf>
 8017fac:	eeb1 0a40 	vneg.f32	s0, s0
 8017fb0:	e7e2      	b.n	8017f78 <cosf+0x28>
 8017fb2:	eddd 0a01 	vldr	s1, [sp, #4]
 8017fb6:	ed9d 0a00 	vldr	s0, [sp]
 8017fba:	f000 f853 	bl	8018064 <__kernel_cosf>
 8017fbe:	e7f5      	b.n	8017fac <cosf+0x5c>
 8017fc0:	eddd 0a01 	vldr	s1, [sp, #4]
 8017fc4:	ed9d 0a00 	vldr	s0, [sp]
 8017fc8:	2001      	movs	r0, #1
 8017fca:	f000 f8a3 	bl	8018114 <__kernel_sinf>
 8017fce:	e7d3      	b.n	8017f78 <cosf+0x28>
 8017fd0:	3f490fd8 	.word	0x3f490fd8
 8017fd4:	00000000 	.word	0x00000000

08017fd8 <sinf>:
 8017fd8:	ee10 3a10 	vmov	r3, s0
 8017fdc:	b507      	push	{r0, r1, r2, lr}
 8017fde:	4a1f      	ldr	r2, [pc, #124]	@ (801805c <sinf+0x84>)
 8017fe0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017fe4:	4293      	cmp	r3, r2
 8017fe6:	d807      	bhi.n	8017ff8 <sinf+0x20>
 8017fe8:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8018060 <sinf+0x88>
 8017fec:	2000      	movs	r0, #0
 8017fee:	b003      	add	sp, #12
 8017ff0:	f85d eb04 	ldr.w	lr, [sp], #4
 8017ff4:	f000 b88e 	b.w	8018114 <__kernel_sinf>
 8017ff8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8017ffc:	d304      	bcc.n	8018008 <sinf+0x30>
 8017ffe:	ee30 0a40 	vsub.f32	s0, s0, s0
 8018002:	b003      	add	sp, #12
 8018004:	f85d fb04 	ldr.w	pc, [sp], #4
 8018008:	4668      	mov	r0, sp
 801800a:	f000 f8cb 	bl	80181a4 <__ieee754_rem_pio2f>
 801800e:	f000 0003 	and.w	r0, r0, #3
 8018012:	2801      	cmp	r0, #1
 8018014:	d00a      	beq.n	801802c <sinf+0x54>
 8018016:	2802      	cmp	r0, #2
 8018018:	d00f      	beq.n	801803a <sinf+0x62>
 801801a:	b9c0      	cbnz	r0, 801804e <sinf+0x76>
 801801c:	eddd 0a01 	vldr	s1, [sp, #4]
 8018020:	ed9d 0a00 	vldr	s0, [sp]
 8018024:	2001      	movs	r0, #1
 8018026:	f000 f875 	bl	8018114 <__kernel_sinf>
 801802a:	e7ea      	b.n	8018002 <sinf+0x2a>
 801802c:	eddd 0a01 	vldr	s1, [sp, #4]
 8018030:	ed9d 0a00 	vldr	s0, [sp]
 8018034:	f000 f816 	bl	8018064 <__kernel_cosf>
 8018038:	e7e3      	b.n	8018002 <sinf+0x2a>
 801803a:	eddd 0a01 	vldr	s1, [sp, #4]
 801803e:	ed9d 0a00 	vldr	s0, [sp]
 8018042:	2001      	movs	r0, #1
 8018044:	f000 f866 	bl	8018114 <__kernel_sinf>
 8018048:	eeb1 0a40 	vneg.f32	s0, s0
 801804c:	e7d9      	b.n	8018002 <sinf+0x2a>
 801804e:	eddd 0a01 	vldr	s1, [sp, #4]
 8018052:	ed9d 0a00 	vldr	s0, [sp]
 8018056:	f000 f805 	bl	8018064 <__kernel_cosf>
 801805a:	e7f5      	b.n	8018048 <sinf+0x70>
 801805c:	3f490fd8 	.word	0x3f490fd8
 8018060:	00000000 	.word	0x00000000

08018064 <__kernel_cosf>:
 8018064:	ee10 3a10 	vmov	r3, s0
 8018068:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801806c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8018070:	eef0 6a40 	vmov.f32	s13, s0
 8018074:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8018078:	d204      	bcs.n	8018084 <__kernel_cosf+0x20>
 801807a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801807e:	ee17 2a90 	vmov	r2, s15
 8018082:	b342      	cbz	r2, 80180d6 <__kernel_cosf+0x72>
 8018084:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8018088:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80180f4 <__kernel_cosf+0x90>
 801808c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80180f8 <__kernel_cosf+0x94>
 8018090:	4a1a      	ldr	r2, [pc, #104]	@ (80180fc <__kernel_cosf+0x98>)
 8018092:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018096:	4293      	cmp	r3, r2
 8018098:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8018100 <__kernel_cosf+0x9c>
 801809c:	eee6 7a07 	vfma.f32	s15, s12, s14
 80180a0:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8018104 <__kernel_cosf+0xa0>
 80180a4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80180a8:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8018108 <__kernel_cosf+0xa4>
 80180ac:	eee6 7a07 	vfma.f32	s15, s12, s14
 80180b0:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 801810c <__kernel_cosf+0xa8>
 80180b4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80180b8:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80180bc:	ee26 6a07 	vmul.f32	s12, s12, s14
 80180c0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80180c4:	eee7 0a06 	vfma.f32	s1, s14, s12
 80180c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80180cc:	d804      	bhi.n	80180d8 <__kernel_cosf+0x74>
 80180ce:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80180d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80180d6:	4770      	bx	lr
 80180d8:	4a0d      	ldr	r2, [pc, #52]	@ (8018110 <__kernel_cosf+0xac>)
 80180da:	4293      	cmp	r3, r2
 80180dc:	bf9a      	itte	ls
 80180de:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80180e2:	ee07 3a10 	vmovls	s14, r3
 80180e6:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80180ea:	ee30 0a47 	vsub.f32	s0, s0, s14
 80180ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80180f2:	e7ec      	b.n	80180ce <__kernel_cosf+0x6a>
 80180f4:	ad47d74e 	.word	0xad47d74e
 80180f8:	310f74f6 	.word	0x310f74f6
 80180fc:	3e999999 	.word	0x3e999999
 8018100:	b493f27c 	.word	0xb493f27c
 8018104:	37d00d01 	.word	0x37d00d01
 8018108:	bab60b61 	.word	0xbab60b61
 801810c:	3d2aaaab 	.word	0x3d2aaaab
 8018110:	3f480000 	.word	0x3f480000

08018114 <__kernel_sinf>:
 8018114:	ee10 3a10 	vmov	r3, s0
 8018118:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801811c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8018120:	d204      	bcs.n	801812c <__kernel_sinf+0x18>
 8018122:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8018126:	ee17 3a90 	vmov	r3, s15
 801812a:	b35b      	cbz	r3, 8018184 <__kernel_sinf+0x70>
 801812c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8018130:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8018188 <__kernel_sinf+0x74>
 8018134:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 801818c <__kernel_sinf+0x78>
 8018138:	eea7 6a27 	vfma.f32	s12, s14, s15
 801813c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8018190 <__kernel_sinf+0x7c>
 8018140:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018144:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8018194 <__kernel_sinf+0x80>
 8018148:	eea7 6a87 	vfma.f32	s12, s15, s14
 801814c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8018198 <__kernel_sinf+0x84>
 8018150:	ee60 6a07 	vmul.f32	s13, s0, s14
 8018154:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018158:	b930      	cbnz	r0, 8018168 <__kernel_sinf+0x54>
 801815a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 801819c <__kernel_sinf+0x88>
 801815e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018162:	eea6 0a26 	vfma.f32	s0, s12, s13
 8018166:	4770      	bx	lr
 8018168:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801816c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8018170:	eee0 7a86 	vfma.f32	s15, s1, s12
 8018174:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8018178:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80181a0 <__kernel_sinf+0x8c>
 801817c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8018180:	ee30 0a60 	vsub.f32	s0, s0, s1
 8018184:	4770      	bx	lr
 8018186:	bf00      	nop
 8018188:	2f2ec9d3 	.word	0x2f2ec9d3
 801818c:	b2d72f34 	.word	0xb2d72f34
 8018190:	3638ef1b 	.word	0x3638ef1b
 8018194:	b9500d01 	.word	0xb9500d01
 8018198:	3c088889 	.word	0x3c088889
 801819c:	be2aaaab 	.word	0xbe2aaaab
 80181a0:	3e2aaaab 	.word	0x3e2aaaab

080181a4 <__ieee754_rem_pio2f>:
 80181a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80181a6:	ee10 6a10 	vmov	r6, s0
 80181aa:	4b88      	ldr	r3, [pc, #544]	@ (80183cc <__ieee754_rem_pio2f+0x228>)
 80181ac:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80181b0:	429d      	cmp	r5, r3
 80181b2:	b087      	sub	sp, #28
 80181b4:	4604      	mov	r4, r0
 80181b6:	d805      	bhi.n	80181c4 <__ieee754_rem_pio2f+0x20>
 80181b8:	2300      	movs	r3, #0
 80181ba:	ed80 0a00 	vstr	s0, [r0]
 80181be:	6043      	str	r3, [r0, #4]
 80181c0:	2000      	movs	r0, #0
 80181c2:	e022      	b.n	801820a <__ieee754_rem_pio2f+0x66>
 80181c4:	4b82      	ldr	r3, [pc, #520]	@ (80183d0 <__ieee754_rem_pio2f+0x22c>)
 80181c6:	429d      	cmp	r5, r3
 80181c8:	d83a      	bhi.n	8018240 <__ieee754_rem_pio2f+0x9c>
 80181ca:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80181ce:	2e00      	cmp	r6, #0
 80181d0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80183d4 <__ieee754_rem_pio2f+0x230>
 80181d4:	4a80      	ldr	r2, [pc, #512]	@ (80183d8 <__ieee754_rem_pio2f+0x234>)
 80181d6:	f023 030f 	bic.w	r3, r3, #15
 80181da:	dd18      	ble.n	801820e <__ieee754_rem_pio2f+0x6a>
 80181dc:	4293      	cmp	r3, r2
 80181de:	ee70 7a47 	vsub.f32	s15, s0, s14
 80181e2:	bf09      	itett	eq
 80181e4:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80183dc <__ieee754_rem_pio2f+0x238>
 80181e8:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80183e0 <__ieee754_rem_pio2f+0x23c>
 80181ec:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80183e4 <__ieee754_rem_pio2f+0x240>
 80181f0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80181f4:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80181f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80181fc:	ed80 7a00 	vstr	s14, [r0]
 8018200:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018204:	edc0 7a01 	vstr	s15, [r0, #4]
 8018208:	2001      	movs	r0, #1
 801820a:	b007      	add	sp, #28
 801820c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801820e:	4293      	cmp	r3, r2
 8018210:	ee70 7a07 	vadd.f32	s15, s0, s14
 8018214:	bf09      	itett	eq
 8018216:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80183dc <__ieee754_rem_pio2f+0x238>
 801821a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80183e0 <__ieee754_rem_pio2f+0x23c>
 801821e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80183e4 <__ieee754_rem_pio2f+0x240>
 8018222:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8018226:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801822a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801822e:	ed80 7a00 	vstr	s14, [r0]
 8018232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018236:	edc0 7a01 	vstr	s15, [r0, #4]
 801823a:	f04f 30ff 	mov.w	r0, #4294967295
 801823e:	e7e4      	b.n	801820a <__ieee754_rem_pio2f+0x66>
 8018240:	4b69      	ldr	r3, [pc, #420]	@ (80183e8 <__ieee754_rem_pio2f+0x244>)
 8018242:	429d      	cmp	r5, r3
 8018244:	d873      	bhi.n	801832e <__ieee754_rem_pio2f+0x18a>
 8018246:	f000 f8dd 	bl	8018404 <fabsf>
 801824a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80183ec <__ieee754_rem_pio2f+0x248>
 801824e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018252:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018256:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801825a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801825e:	ee17 0a90 	vmov	r0, s15
 8018262:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80183d4 <__ieee754_rem_pio2f+0x230>
 8018266:	eea7 0a67 	vfms.f32	s0, s14, s15
 801826a:	281f      	cmp	r0, #31
 801826c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80183e0 <__ieee754_rem_pio2f+0x23c>
 8018270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018274:	eeb1 6a47 	vneg.f32	s12, s14
 8018278:	ee70 6a67 	vsub.f32	s13, s0, s15
 801827c:	ee16 1a90 	vmov	r1, s13
 8018280:	dc09      	bgt.n	8018296 <__ieee754_rem_pio2f+0xf2>
 8018282:	4a5b      	ldr	r2, [pc, #364]	@ (80183f0 <__ieee754_rem_pio2f+0x24c>)
 8018284:	1e47      	subs	r7, r0, #1
 8018286:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801828a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801828e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8018292:	4293      	cmp	r3, r2
 8018294:	d107      	bne.n	80182a6 <__ieee754_rem_pio2f+0x102>
 8018296:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801829a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 801829e:	2a08      	cmp	r2, #8
 80182a0:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80182a4:	dc14      	bgt.n	80182d0 <__ieee754_rem_pio2f+0x12c>
 80182a6:	6021      	str	r1, [r4, #0]
 80182a8:	ed94 7a00 	vldr	s14, [r4]
 80182ac:	ee30 0a47 	vsub.f32	s0, s0, s14
 80182b0:	2e00      	cmp	r6, #0
 80182b2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80182b6:	ed84 0a01 	vstr	s0, [r4, #4]
 80182ba:	daa6      	bge.n	801820a <__ieee754_rem_pio2f+0x66>
 80182bc:	eeb1 7a47 	vneg.f32	s14, s14
 80182c0:	eeb1 0a40 	vneg.f32	s0, s0
 80182c4:	ed84 7a00 	vstr	s14, [r4]
 80182c8:	ed84 0a01 	vstr	s0, [r4, #4]
 80182cc:	4240      	negs	r0, r0
 80182ce:	e79c      	b.n	801820a <__ieee754_rem_pio2f+0x66>
 80182d0:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80183dc <__ieee754_rem_pio2f+0x238>
 80182d4:	eef0 6a40 	vmov.f32	s13, s0
 80182d8:	eee6 6a25 	vfma.f32	s13, s12, s11
 80182dc:	ee70 7a66 	vsub.f32	s15, s0, s13
 80182e0:	eee6 7a25 	vfma.f32	s15, s12, s11
 80182e4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80183e4 <__ieee754_rem_pio2f+0x240>
 80182e8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80182ec:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80182f0:	ee15 2a90 	vmov	r2, s11
 80182f4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80182f8:	1a5b      	subs	r3, r3, r1
 80182fa:	2b19      	cmp	r3, #25
 80182fc:	dc04      	bgt.n	8018308 <__ieee754_rem_pio2f+0x164>
 80182fe:	edc4 5a00 	vstr	s11, [r4]
 8018302:	eeb0 0a66 	vmov.f32	s0, s13
 8018306:	e7cf      	b.n	80182a8 <__ieee754_rem_pio2f+0x104>
 8018308:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80183f4 <__ieee754_rem_pio2f+0x250>
 801830c:	eeb0 0a66 	vmov.f32	s0, s13
 8018310:	eea6 0a25 	vfma.f32	s0, s12, s11
 8018314:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8018318:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80183f8 <__ieee754_rem_pio2f+0x254>
 801831c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8018320:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8018324:	ee30 7a67 	vsub.f32	s14, s0, s15
 8018328:	ed84 7a00 	vstr	s14, [r4]
 801832c:	e7bc      	b.n	80182a8 <__ieee754_rem_pio2f+0x104>
 801832e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8018332:	d306      	bcc.n	8018342 <__ieee754_rem_pio2f+0x19e>
 8018334:	ee70 7a40 	vsub.f32	s15, s0, s0
 8018338:	edc0 7a01 	vstr	s15, [r0, #4]
 801833c:	edc0 7a00 	vstr	s15, [r0]
 8018340:	e73e      	b.n	80181c0 <__ieee754_rem_pio2f+0x1c>
 8018342:	15ea      	asrs	r2, r5, #23
 8018344:	3a86      	subs	r2, #134	@ 0x86
 8018346:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801834a:	ee07 3a90 	vmov	s15, r3
 801834e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8018352:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80183fc <__ieee754_rem_pio2f+0x258>
 8018356:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801835a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801835e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8018362:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018366:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801836a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801836e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018372:	ed8d 7a04 	vstr	s14, [sp, #16]
 8018376:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801837a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801837e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018382:	edcd 7a05 	vstr	s15, [sp, #20]
 8018386:	d11e      	bne.n	80183c6 <__ieee754_rem_pio2f+0x222>
 8018388:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801838c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018390:	bf0c      	ite	eq
 8018392:	2301      	moveq	r3, #1
 8018394:	2302      	movne	r3, #2
 8018396:	491a      	ldr	r1, [pc, #104]	@ (8018400 <__ieee754_rem_pio2f+0x25c>)
 8018398:	9101      	str	r1, [sp, #4]
 801839a:	2102      	movs	r1, #2
 801839c:	9100      	str	r1, [sp, #0]
 801839e:	a803      	add	r0, sp, #12
 80183a0:	4621      	mov	r1, r4
 80183a2:	f000 f837 	bl	8018414 <__kernel_rem_pio2f>
 80183a6:	2e00      	cmp	r6, #0
 80183a8:	f6bf af2f 	bge.w	801820a <__ieee754_rem_pio2f+0x66>
 80183ac:	edd4 7a00 	vldr	s15, [r4]
 80183b0:	eef1 7a67 	vneg.f32	s15, s15
 80183b4:	edc4 7a00 	vstr	s15, [r4]
 80183b8:	edd4 7a01 	vldr	s15, [r4, #4]
 80183bc:	eef1 7a67 	vneg.f32	s15, s15
 80183c0:	edc4 7a01 	vstr	s15, [r4, #4]
 80183c4:	e782      	b.n	80182cc <__ieee754_rem_pio2f+0x128>
 80183c6:	2303      	movs	r3, #3
 80183c8:	e7e5      	b.n	8018396 <__ieee754_rem_pio2f+0x1f2>
 80183ca:	bf00      	nop
 80183cc:	3f490fd8 	.word	0x3f490fd8
 80183d0:	4016cbe3 	.word	0x4016cbe3
 80183d4:	3fc90f80 	.word	0x3fc90f80
 80183d8:	3fc90fd0 	.word	0x3fc90fd0
 80183dc:	37354400 	.word	0x37354400
 80183e0:	37354443 	.word	0x37354443
 80183e4:	2e85a308 	.word	0x2e85a308
 80183e8:	43490f80 	.word	0x43490f80
 80183ec:	3f22f984 	.word	0x3f22f984
 80183f0:	0801c874 	.word	0x0801c874
 80183f4:	2e85a300 	.word	0x2e85a300
 80183f8:	248d3132 	.word	0x248d3132
 80183fc:	43800000 	.word	0x43800000
 8018400:	0801c8f4 	.word	0x0801c8f4

08018404 <fabsf>:
 8018404:	ee10 3a10 	vmov	r3, s0
 8018408:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801840c:	ee00 3a10 	vmov	s0, r3
 8018410:	4770      	bx	lr
	...

08018414 <__kernel_rem_pio2f>:
 8018414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018418:	ed2d 8b04 	vpush	{d8-d9}
 801841c:	b0d9      	sub	sp, #356	@ 0x164
 801841e:	4690      	mov	r8, r2
 8018420:	9001      	str	r0, [sp, #4]
 8018422:	4ab6      	ldr	r2, [pc, #728]	@ (80186fc <__kernel_rem_pio2f+0x2e8>)
 8018424:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8018426:	f118 0f04 	cmn.w	r8, #4
 801842a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801842e:	460f      	mov	r7, r1
 8018430:	f103 3bff 	add.w	fp, r3, #4294967295
 8018434:	db26      	blt.n	8018484 <__kernel_rem_pio2f+0x70>
 8018436:	f1b8 0203 	subs.w	r2, r8, #3
 801843a:	bf48      	it	mi
 801843c:	f108 0204 	addmi.w	r2, r8, #4
 8018440:	10d2      	asrs	r2, r2, #3
 8018442:	1c55      	adds	r5, r2, #1
 8018444:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8018446:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 801870c <__kernel_rem_pio2f+0x2f8>
 801844a:	00e8      	lsls	r0, r5, #3
 801844c:	eba2 060b 	sub.w	r6, r2, fp
 8018450:	9002      	str	r0, [sp, #8]
 8018452:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8018456:	eb0a 0c0b 	add.w	ip, sl, fp
 801845a:	ac1c      	add	r4, sp, #112	@ 0x70
 801845c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8018460:	2000      	movs	r0, #0
 8018462:	4560      	cmp	r0, ip
 8018464:	dd10      	ble.n	8018488 <__kernel_rem_pio2f+0x74>
 8018466:	a91c      	add	r1, sp, #112	@ 0x70
 8018468:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801846c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8018470:	2600      	movs	r6, #0
 8018472:	4556      	cmp	r6, sl
 8018474:	dc24      	bgt.n	80184c0 <__kernel_rem_pio2f+0xac>
 8018476:	f8dd e004 	ldr.w	lr, [sp, #4]
 801847a:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 801870c <__kernel_rem_pio2f+0x2f8>
 801847e:	4684      	mov	ip, r0
 8018480:	2400      	movs	r4, #0
 8018482:	e016      	b.n	80184b2 <__kernel_rem_pio2f+0x9e>
 8018484:	2200      	movs	r2, #0
 8018486:	e7dc      	b.n	8018442 <__kernel_rem_pio2f+0x2e>
 8018488:	42c6      	cmn	r6, r0
 801848a:	bf5d      	ittte	pl
 801848c:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8018490:	ee07 1a90 	vmovpl	s15, r1
 8018494:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8018498:	eef0 7a47 	vmovmi.f32	s15, s14
 801849c:	ece4 7a01 	vstmia	r4!, {s15}
 80184a0:	3001      	adds	r0, #1
 80184a2:	e7de      	b.n	8018462 <__kernel_rem_pio2f+0x4e>
 80184a4:	ecfe 6a01 	vldmia	lr!, {s13}
 80184a8:	ed3c 7a01 	vldmdb	ip!, {s14}
 80184ac:	eee6 7a87 	vfma.f32	s15, s13, s14
 80184b0:	3401      	adds	r4, #1
 80184b2:	455c      	cmp	r4, fp
 80184b4:	ddf6      	ble.n	80184a4 <__kernel_rem_pio2f+0x90>
 80184b6:	ece9 7a01 	vstmia	r9!, {s15}
 80184ba:	3601      	adds	r6, #1
 80184bc:	3004      	adds	r0, #4
 80184be:	e7d8      	b.n	8018472 <__kernel_rem_pio2f+0x5e>
 80184c0:	a908      	add	r1, sp, #32
 80184c2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80184c6:	9104      	str	r1, [sp, #16]
 80184c8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80184ca:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8018708 <__kernel_rem_pio2f+0x2f4>
 80184ce:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8018704 <__kernel_rem_pio2f+0x2f0>
 80184d2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80184d6:	9203      	str	r2, [sp, #12]
 80184d8:	4654      	mov	r4, sl
 80184da:	00a2      	lsls	r2, r4, #2
 80184dc:	9205      	str	r2, [sp, #20]
 80184de:	aa58      	add	r2, sp, #352	@ 0x160
 80184e0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80184e4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 80184e8:	a944      	add	r1, sp, #272	@ 0x110
 80184ea:	aa08      	add	r2, sp, #32
 80184ec:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80184f0:	4694      	mov	ip, r2
 80184f2:	4626      	mov	r6, r4
 80184f4:	2e00      	cmp	r6, #0
 80184f6:	dc4c      	bgt.n	8018592 <__kernel_rem_pio2f+0x17e>
 80184f8:	4628      	mov	r0, r5
 80184fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80184fe:	f000 f9f1 	bl	80188e4 <scalbnf>
 8018502:	eeb0 8a40 	vmov.f32	s16, s0
 8018506:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801850a:	ee28 0a00 	vmul.f32	s0, s16, s0
 801850e:	f000 fa4f 	bl	80189b0 <floorf>
 8018512:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8018516:	eea0 8a67 	vfms.f32	s16, s0, s15
 801851a:	2d00      	cmp	r5, #0
 801851c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018520:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8018524:	ee17 9a90 	vmov	r9, s15
 8018528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801852c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8018530:	dd41      	ble.n	80185b6 <__kernel_rem_pio2f+0x1a2>
 8018532:	f104 3cff 	add.w	ip, r4, #4294967295
 8018536:	a908      	add	r1, sp, #32
 8018538:	f1c5 0e08 	rsb	lr, r5, #8
 801853c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8018540:	fa46 f00e 	asr.w	r0, r6, lr
 8018544:	4481      	add	r9, r0
 8018546:	fa00 f00e 	lsl.w	r0, r0, lr
 801854a:	1a36      	subs	r6, r6, r0
 801854c:	f1c5 0007 	rsb	r0, r5, #7
 8018550:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8018554:	4106      	asrs	r6, r0
 8018556:	2e00      	cmp	r6, #0
 8018558:	dd3c      	ble.n	80185d4 <__kernel_rem_pio2f+0x1c0>
 801855a:	f04f 0e00 	mov.w	lr, #0
 801855e:	f109 0901 	add.w	r9, r9, #1
 8018562:	4670      	mov	r0, lr
 8018564:	4574      	cmp	r4, lr
 8018566:	dc68      	bgt.n	801863a <__kernel_rem_pio2f+0x226>
 8018568:	2d00      	cmp	r5, #0
 801856a:	dd03      	ble.n	8018574 <__kernel_rem_pio2f+0x160>
 801856c:	2d01      	cmp	r5, #1
 801856e:	d074      	beq.n	801865a <__kernel_rem_pio2f+0x246>
 8018570:	2d02      	cmp	r5, #2
 8018572:	d07d      	beq.n	8018670 <__kernel_rem_pio2f+0x25c>
 8018574:	2e02      	cmp	r6, #2
 8018576:	d12d      	bne.n	80185d4 <__kernel_rem_pio2f+0x1c0>
 8018578:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801857c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8018580:	b340      	cbz	r0, 80185d4 <__kernel_rem_pio2f+0x1c0>
 8018582:	4628      	mov	r0, r5
 8018584:	9306      	str	r3, [sp, #24]
 8018586:	f000 f9ad 	bl	80188e4 <scalbnf>
 801858a:	9b06      	ldr	r3, [sp, #24]
 801858c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8018590:	e020      	b.n	80185d4 <__kernel_rem_pio2f+0x1c0>
 8018592:	ee60 7a28 	vmul.f32	s15, s0, s17
 8018596:	3e01      	subs	r6, #1
 8018598:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801859c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80185a0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80185a4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80185a8:	ecac 0a01 	vstmia	ip!, {s0}
 80185ac:	ed30 0a01 	vldmdb	r0!, {s0}
 80185b0:	ee37 0a80 	vadd.f32	s0, s15, s0
 80185b4:	e79e      	b.n	80184f4 <__kernel_rem_pio2f+0xe0>
 80185b6:	d105      	bne.n	80185c4 <__kernel_rem_pio2f+0x1b0>
 80185b8:	1e60      	subs	r0, r4, #1
 80185ba:	a908      	add	r1, sp, #32
 80185bc:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80185c0:	11f6      	asrs	r6, r6, #7
 80185c2:	e7c8      	b.n	8018556 <__kernel_rem_pio2f+0x142>
 80185c4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80185c8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80185cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185d0:	da31      	bge.n	8018636 <__kernel_rem_pio2f+0x222>
 80185d2:	2600      	movs	r6, #0
 80185d4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80185d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185dc:	f040 8098 	bne.w	8018710 <__kernel_rem_pio2f+0x2fc>
 80185e0:	1e60      	subs	r0, r4, #1
 80185e2:	2200      	movs	r2, #0
 80185e4:	4550      	cmp	r0, sl
 80185e6:	da4b      	bge.n	8018680 <__kernel_rem_pio2f+0x26c>
 80185e8:	2a00      	cmp	r2, #0
 80185ea:	d065      	beq.n	80186b8 <__kernel_rem_pio2f+0x2a4>
 80185ec:	3c01      	subs	r4, #1
 80185ee:	ab08      	add	r3, sp, #32
 80185f0:	3d08      	subs	r5, #8
 80185f2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d0f8      	beq.n	80185ec <__kernel_rem_pio2f+0x1d8>
 80185fa:	4628      	mov	r0, r5
 80185fc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8018600:	f000 f970 	bl	80188e4 <scalbnf>
 8018604:	1c63      	adds	r3, r4, #1
 8018606:	aa44      	add	r2, sp, #272	@ 0x110
 8018608:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8018708 <__kernel_rem_pio2f+0x2f4>
 801860c:	0099      	lsls	r1, r3, #2
 801860e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8018612:	4623      	mov	r3, r4
 8018614:	2b00      	cmp	r3, #0
 8018616:	f280 80a9 	bge.w	801876c <__kernel_rem_pio2f+0x358>
 801861a:	4623      	mov	r3, r4
 801861c:	2b00      	cmp	r3, #0
 801861e:	f2c0 80c7 	blt.w	80187b0 <__kernel_rem_pio2f+0x39c>
 8018622:	aa44      	add	r2, sp, #272	@ 0x110
 8018624:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8018628:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8018700 <__kernel_rem_pio2f+0x2ec>
 801862c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801870c <__kernel_rem_pio2f+0x2f8>
 8018630:	2000      	movs	r0, #0
 8018632:	1ae2      	subs	r2, r4, r3
 8018634:	e0b1      	b.n	801879a <__kernel_rem_pio2f+0x386>
 8018636:	2602      	movs	r6, #2
 8018638:	e78f      	b.n	801855a <__kernel_rem_pio2f+0x146>
 801863a:	f852 1b04 	ldr.w	r1, [r2], #4
 801863e:	b948      	cbnz	r0, 8018654 <__kernel_rem_pio2f+0x240>
 8018640:	b121      	cbz	r1, 801864c <__kernel_rem_pio2f+0x238>
 8018642:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8018646:	f842 1c04 	str.w	r1, [r2, #-4]
 801864a:	2101      	movs	r1, #1
 801864c:	f10e 0e01 	add.w	lr, lr, #1
 8018650:	4608      	mov	r0, r1
 8018652:	e787      	b.n	8018564 <__kernel_rem_pio2f+0x150>
 8018654:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8018658:	e7f5      	b.n	8018646 <__kernel_rem_pio2f+0x232>
 801865a:	f104 3cff 	add.w	ip, r4, #4294967295
 801865e:	aa08      	add	r2, sp, #32
 8018660:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8018664:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8018668:	a908      	add	r1, sp, #32
 801866a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801866e:	e781      	b.n	8018574 <__kernel_rem_pio2f+0x160>
 8018670:	f104 3cff 	add.w	ip, r4, #4294967295
 8018674:	aa08      	add	r2, sp, #32
 8018676:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801867a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801867e:	e7f3      	b.n	8018668 <__kernel_rem_pio2f+0x254>
 8018680:	a908      	add	r1, sp, #32
 8018682:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8018686:	3801      	subs	r0, #1
 8018688:	430a      	orrs	r2, r1
 801868a:	e7ab      	b.n	80185e4 <__kernel_rem_pio2f+0x1d0>
 801868c:	3201      	adds	r2, #1
 801868e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8018692:	2e00      	cmp	r6, #0
 8018694:	d0fa      	beq.n	801868c <__kernel_rem_pio2f+0x278>
 8018696:	9905      	ldr	r1, [sp, #20]
 8018698:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 801869c:	eb0d 0001 	add.w	r0, sp, r1
 80186a0:	18e6      	adds	r6, r4, r3
 80186a2:	a91c      	add	r1, sp, #112	@ 0x70
 80186a4:	f104 0c01 	add.w	ip, r4, #1
 80186a8:	384c      	subs	r0, #76	@ 0x4c
 80186aa:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80186ae:	4422      	add	r2, r4
 80186b0:	4562      	cmp	r2, ip
 80186b2:	da04      	bge.n	80186be <__kernel_rem_pio2f+0x2aa>
 80186b4:	4614      	mov	r4, r2
 80186b6:	e710      	b.n	80184da <__kernel_rem_pio2f+0xc6>
 80186b8:	9804      	ldr	r0, [sp, #16]
 80186ba:	2201      	movs	r2, #1
 80186bc:	e7e7      	b.n	801868e <__kernel_rem_pio2f+0x27a>
 80186be:	9903      	ldr	r1, [sp, #12]
 80186c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80186c4:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80186c8:	9105      	str	r1, [sp, #20]
 80186ca:	ee07 1a90 	vmov	s15, r1
 80186ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80186d2:	2400      	movs	r4, #0
 80186d4:	ece6 7a01 	vstmia	r6!, {s15}
 80186d8:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801870c <__kernel_rem_pio2f+0x2f8>
 80186dc:	46b1      	mov	r9, r6
 80186de:	455c      	cmp	r4, fp
 80186e0:	dd04      	ble.n	80186ec <__kernel_rem_pio2f+0x2d8>
 80186e2:	ece0 7a01 	vstmia	r0!, {s15}
 80186e6:	f10c 0c01 	add.w	ip, ip, #1
 80186ea:	e7e1      	b.n	80186b0 <__kernel_rem_pio2f+0x29c>
 80186ec:	ecfe 6a01 	vldmia	lr!, {s13}
 80186f0:	ed39 7a01 	vldmdb	r9!, {s14}
 80186f4:	3401      	adds	r4, #1
 80186f6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80186fa:	e7f0      	b.n	80186de <__kernel_rem_pio2f+0x2ca>
 80186fc:	0801cc38 	.word	0x0801cc38
 8018700:	0801cc0c 	.word	0x0801cc0c
 8018704:	43800000 	.word	0x43800000
 8018708:	3b800000 	.word	0x3b800000
 801870c:	00000000 	.word	0x00000000
 8018710:	9b02      	ldr	r3, [sp, #8]
 8018712:	eeb0 0a48 	vmov.f32	s0, s16
 8018716:	eba3 0008 	sub.w	r0, r3, r8
 801871a:	f000 f8e3 	bl	80188e4 <scalbnf>
 801871e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8018704 <__kernel_rem_pio2f+0x2f0>
 8018722:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8018726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801872a:	db19      	blt.n	8018760 <__kernel_rem_pio2f+0x34c>
 801872c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8018708 <__kernel_rem_pio2f+0x2f4>
 8018730:	ee60 7a27 	vmul.f32	s15, s0, s15
 8018734:	aa08      	add	r2, sp, #32
 8018736:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801873a:	3508      	adds	r5, #8
 801873c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018740:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8018744:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018748:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801874c:	ee10 3a10 	vmov	r3, s0
 8018750:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8018754:	ee17 3a90 	vmov	r3, s15
 8018758:	3401      	adds	r4, #1
 801875a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801875e:	e74c      	b.n	80185fa <__kernel_rem_pio2f+0x1e6>
 8018760:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8018764:	aa08      	add	r2, sp, #32
 8018766:	ee10 3a10 	vmov	r3, s0
 801876a:	e7f6      	b.n	801875a <__kernel_rem_pio2f+0x346>
 801876c:	a808      	add	r0, sp, #32
 801876e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8018772:	9001      	str	r0, [sp, #4]
 8018774:	ee07 0a90 	vmov	s15, r0
 8018778:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801877c:	3b01      	subs	r3, #1
 801877e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8018782:	ee20 0a07 	vmul.f32	s0, s0, s14
 8018786:	ed62 7a01 	vstmdb	r2!, {s15}
 801878a:	e743      	b.n	8018614 <__kernel_rem_pio2f+0x200>
 801878c:	ecfc 6a01 	vldmia	ip!, {s13}
 8018790:	ecb5 7a01 	vldmia	r5!, {s14}
 8018794:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018798:	3001      	adds	r0, #1
 801879a:	4550      	cmp	r0, sl
 801879c:	dc01      	bgt.n	80187a2 <__kernel_rem_pio2f+0x38e>
 801879e:	4290      	cmp	r0, r2
 80187a0:	ddf4      	ble.n	801878c <__kernel_rem_pio2f+0x378>
 80187a2:	a858      	add	r0, sp, #352	@ 0x160
 80187a4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80187a8:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80187ac:	3b01      	subs	r3, #1
 80187ae:	e735      	b.n	801861c <__kernel_rem_pio2f+0x208>
 80187b0:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80187b2:	2b02      	cmp	r3, #2
 80187b4:	dc09      	bgt.n	80187ca <__kernel_rem_pio2f+0x3b6>
 80187b6:	2b00      	cmp	r3, #0
 80187b8:	dc27      	bgt.n	801880a <__kernel_rem_pio2f+0x3f6>
 80187ba:	d040      	beq.n	801883e <__kernel_rem_pio2f+0x42a>
 80187bc:	f009 0007 	and.w	r0, r9, #7
 80187c0:	b059      	add	sp, #356	@ 0x164
 80187c2:	ecbd 8b04 	vpop	{d8-d9}
 80187c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187ca:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80187cc:	2b03      	cmp	r3, #3
 80187ce:	d1f5      	bne.n	80187bc <__kernel_rem_pio2f+0x3a8>
 80187d0:	aa30      	add	r2, sp, #192	@ 0xc0
 80187d2:	1f0b      	subs	r3, r1, #4
 80187d4:	4413      	add	r3, r2
 80187d6:	461a      	mov	r2, r3
 80187d8:	4620      	mov	r0, r4
 80187da:	2800      	cmp	r0, #0
 80187dc:	dc50      	bgt.n	8018880 <__kernel_rem_pio2f+0x46c>
 80187de:	4622      	mov	r2, r4
 80187e0:	2a01      	cmp	r2, #1
 80187e2:	dc5d      	bgt.n	80188a0 <__kernel_rem_pio2f+0x48c>
 80187e4:	ab30      	add	r3, sp, #192	@ 0xc0
 80187e6:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 801870c <__kernel_rem_pio2f+0x2f8>
 80187ea:	440b      	add	r3, r1
 80187ec:	2c01      	cmp	r4, #1
 80187ee:	dc67      	bgt.n	80188c0 <__kernel_rem_pio2f+0x4ac>
 80187f0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80187f4:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80187f8:	2e00      	cmp	r6, #0
 80187fa:	d167      	bne.n	80188cc <__kernel_rem_pio2f+0x4b8>
 80187fc:	edc7 6a00 	vstr	s13, [r7]
 8018800:	ed87 7a01 	vstr	s14, [r7, #4]
 8018804:	edc7 7a02 	vstr	s15, [r7, #8]
 8018808:	e7d8      	b.n	80187bc <__kernel_rem_pio2f+0x3a8>
 801880a:	ab30      	add	r3, sp, #192	@ 0xc0
 801880c:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 801870c <__kernel_rem_pio2f+0x2f8>
 8018810:	440b      	add	r3, r1
 8018812:	4622      	mov	r2, r4
 8018814:	2a00      	cmp	r2, #0
 8018816:	da24      	bge.n	8018862 <__kernel_rem_pio2f+0x44e>
 8018818:	b34e      	cbz	r6, 801886e <__kernel_rem_pio2f+0x45a>
 801881a:	eef1 7a47 	vneg.f32	s15, s14
 801881e:	edc7 7a00 	vstr	s15, [r7]
 8018822:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8018826:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801882a:	aa31      	add	r2, sp, #196	@ 0xc4
 801882c:	2301      	movs	r3, #1
 801882e:	429c      	cmp	r4, r3
 8018830:	da20      	bge.n	8018874 <__kernel_rem_pio2f+0x460>
 8018832:	b10e      	cbz	r6, 8018838 <__kernel_rem_pio2f+0x424>
 8018834:	eef1 7a67 	vneg.f32	s15, s15
 8018838:	edc7 7a01 	vstr	s15, [r7, #4]
 801883c:	e7be      	b.n	80187bc <__kernel_rem_pio2f+0x3a8>
 801883e:	ab30      	add	r3, sp, #192	@ 0xc0
 8018840:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 801870c <__kernel_rem_pio2f+0x2f8>
 8018844:	440b      	add	r3, r1
 8018846:	2c00      	cmp	r4, #0
 8018848:	da05      	bge.n	8018856 <__kernel_rem_pio2f+0x442>
 801884a:	b10e      	cbz	r6, 8018850 <__kernel_rem_pio2f+0x43c>
 801884c:	eef1 7a67 	vneg.f32	s15, s15
 8018850:	edc7 7a00 	vstr	s15, [r7]
 8018854:	e7b2      	b.n	80187bc <__kernel_rem_pio2f+0x3a8>
 8018856:	ed33 7a01 	vldmdb	r3!, {s14}
 801885a:	3c01      	subs	r4, #1
 801885c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018860:	e7f1      	b.n	8018846 <__kernel_rem_pio2f+0x432>
 8018862:	ed73 7a01 	vldmdb	r3!, {s15}
 8018866:	3a01      	subs	r2, #1
 8018868:	ee37 7a27 	vadd.f32	s14, s14, s15
 801886c:	e7d2      	b.n	8018814 <__kernel_rem_pio2f+0x400>
 801886e:	eef0 7a47 	vmov.f32	s15, s14
 8018872:	e7d4      	b.n	801881e <__kernel_rem_pio2f+0x40a>
 8018874:	ecb2 7a01 	vldmia	r2!, {s14}
 8018878:	3301      	adds	r3, #1
 801887a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801887e:	e7d6      	b.n	801882e <__kernel_rem_pio2f+0x41a>
 8018880:	ed72 7a01 	vldmdb	r2!, {s15}
 8018884:	edd2 6a01 	vldr	s13, [r2, #4]
 8018888:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801888c:	3801      	subs	r0, #1
 801888e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018892:	ed82 7a00 	vstr	s14, [r2]
 8018896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801889a:	edc2 7a01 	vstr	s15, [r2, #4]
 801889e:	e79c      	b.n	80187da <__kernel_rem_pio2f+0x3c6>
 80188a0:	ed73 7a01 	vldmdb	r3!, {s15}
 80188a4:	edd3 6a01 	vldr	s13, [r3, #4]
 80188a8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80188ac:	3a01      	subs	r2, #1
 80188ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80188b2:	ed83 7a00 	vstr	s14, [r3]
 80188b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80188ba:	edc3 7a01 	vstr	s15, [r3, #4]
 80188be:	e78f      	b.n	80187e0 <__kernel_rem_pio2f+0x3cc>
 80188c0:	ed33 7a01 	vldmdb	r3!, {s14}
 80188c4:	3c01      	subs	r4, #1
 80188c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80188ca:	e78f      	b.n	80187ec <__kernel_rem_pio2f+0x3d8>
 80188cc:	eef1 6a66 	vneg.f32	s13, s13
 80188d0:	eeb1 7a47 	vneg.f32	s14, s14
 80188d4:	edc7 6a00 	vstr	s13, [r7]
 80188d8:	ed87 7a01 	vstr	s14, [r7, #4]
 80188dc:	eef1 7a67 	vneg.f32	s15, s15
 80188e0:	e790      	b.n	8018804 <__kernel_rem_pio2f+0x3f0>
 80188e2:	bf00      	nop

080188e4 <scalbnf>:
 80188e4:	ee10 3a10 	vmov	r3, s0
 80188e8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80188ec:	d02b      	beq.n	8018946 <scalbnf+0x62>
 80188ee:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80188f2:	d302      	bcc.n	80188fa <scalbnf+0x16>
 80188f4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80188f8:	4770      	bx	lr
 80188fa:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80188fe:	d123      	bne.n	8018948 <scalbnf+0x64>
 8018900:	4b24      	ldr	r3, [pc, #144]	@ (8018994 <scalbnf+0xb0>)
 8018902:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8018998 <scalbnf+0xb4>
 8018906:	4298      	cmp	r0, r3
 8018908:	ee20 0a27 	vmul.f32	s0, s0, s15
 801890c:	db17      	blt.n	801893e <scalbnf+0x5a>
 801890e:	ee10 3a10 	vmov	r3, s0
 8018912:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8018916:	3a19      	subs	r2, #25
 8018918:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801891c:	4288      	cmp	r0, r1
 801891e:	dd15      	ble.n	801894c <scalbnf+0x68>
 8018920:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801899c <scalbnf+0xb8>
 8018924:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80189a0 <scalbnf+0xbc>
 8018928:	ee10 3a10 	vmov	r3, s0
 801892c:	eeb0 7a67 	vmov.f32	s14, s15
 8018930:	2b00      	cmp	r3, #0
 8018932:	bfb8      	it	lt
 8018934:	eef0 7a66 	vmovlt.f32	s15, s13
 8018938:	ee27 0a87 	vmul.f32	s0, s15, s14
 801893c:	4770      	bx	lr
 801893e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80189a4 <scalbnf+0xc0>
 8018942:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018946:	4770      	bx	lr
 8018948:	0dd2      	lsrs	r2, r2, #23
 801894a:	e7e5      	b.n	8018918 <scalbnf+0x34>
 801894c:	4410      	add	r0, r2
 801894e:	28fe      	cmp	r0, #254	@ 0xfe
 8018950:	dce6      	bgt.n	8018920 <scalbnf+0x3c>
 8018952:	2800      	cmp	r0, #0
 8018954:	dd06      	ble.n	8018964 <scalbnf+0x80>
 8018956:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801895a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801895e:	ee00 3a10 	vmov	s0, r3
 8018962:	4770      	bx	lr
 8018964:	f110 0f16 	cmn.w	r0, #22
 8018968:	da09      	bge.n	801897e <scalbnf+0x9a>
 801896a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80189a4 <scalbnf+0xc0>
 801896e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80189a8 <scalbnf+0xc4>
 8018972:	ee10 3a10 	vmov	r3, s0
 8018976:	eeb0 7a67 	vmov.f32	s14, s15
 801897a:	2b00      	cmp	r3, #0
 801897c:	e7d9      	b.n	8018932 <scalbnf+0x4e>
 801897e:	3019      	adds	r0, #25
 8018980:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8018984:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8018988:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80189ac <scalbnf+0xc8>
 801898c:	ee07 3a90 	vmov	s15, r3
 8018990:	e7d7      	b.n	8018942 <scalbnf+0x5e>
 8018992:	bf00      	nop
 8018994:	ffff3cb0 	.word	0xffff3cb0
 8018998:	4c000000 	.word	0x4c000000
 801899c:	7149f2ca 	.word	0x7149f2ca
 80189a0:	f149f2ca 	.word	0xf149f2ca
 80189a4:	0da24260 	.word	0x0da24260
 80189a8:	8da24260 	.word	0x8da24260
 80189ac:	33000000 	.word	0x33000000

080189b0 <floorf>:
 80189b0:	ee10 3a10 	vmov	r3, s0
 80189b4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80189b8:	3a7f      	subs	r2, #127	@ 0x7f
 80189ba:	2a16      	cmp	r2, #22
 80189bc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80189c0:	dc2b      	bgt.n	8018a1a <floorf+0x6a>
 80189c2:	2a00      	cmp	r2, #0
 80189c4:	da12      	bge.n	80189ec <floorf+0x3c>
 80189c6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8018a2c <floorf+0x7c>
 80189ca:	ee30 0a27 	vadd.f32	s0, s0, s15
 80189ce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80189d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189d6:	dd06      	ble.n	80189e6 <floorf+0x36>
 80189d8:	2b00      	cmp	r3, #0
 80189da:	da24      	bge.n	8018a26 <floorf+0x76>
 80189dc:	2900      	cmp	r1, #0
 80189de:	4b14      	ldr	r3, [pc, #80]	@ (8018a30 <floorf+0x80>)
 80189e0:	bf08      	it	eq
 80189e2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80189e6:	ee00 3a10 	vmov	s0, r3
 80189ea:	4770      	bx	lr
 80189ec:	4911      	ldr	r1, [pc, #68]	@ (8018a34 <floorf+0x84>)
 80189ee:	4111      	asrs	r1, r2
 80189f0:	420b      	tst	r3, r1
 80189f2:	d0fa      	beq.n	80189ea <floorf+0x3a>
 80189f4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8018a2c <floorf+0x7c>
 80189f8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80189fc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a04:	ddef      	ble.n	80189e6 <floorf+0x36>
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	bfbe      	ittt	lt
 8018a0a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8018a0e:	fa40 f202 	asrlt.w	r2, r0, r2
 8018a12:	189b      	addlt	r3, r3, r2
 8018a14:	ea23 0301 	bic.w	r3, r3, r1
 8018a18:	e7e5      	b.n	80189e6 <floorf+0x36>
 8018a1a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8018a1e:	d3e4      	bcc.n	80189ea <floorf+0x3a>
 8018a20:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018a24:	4770      	bx	lr
 8018a26:	2300      	movs	r3, #0
 8018a28:	e7dd      	b.n	80189e6 <floorf+0x36>
 8018a2a:	bf00      	nop
 8018a2c:	7149f2ca 	.word	0x7149f2ca
 8018a30:	bf800000 	.word	0xbf800000
 8018a34:	007fffff 	.word	0x007fffff

08018a38 <abort>:
 8018a38:	b508      	push	{r3, lr}
 8018a3a:	2006      	movs	r0, #6
 8018a3c:	f000 fe9e 	bl	801977c <raise>
 8018a40:	2001      	movs	r0, #1
 8018a42:	f7ee f80b 	bl	8006a5c <_exit>
	...

08018a48 <malloc>:
 8018a48:	4b02      	ldr	r3, [pc, #8]	@ (8018a54 <malloc+0xc>)
 8018a4a:	4601      	mov	r1, r0
 8018a4c:	6818      	ldr	r0, [r3, #0]
 8018a4e:	f000 b82d 	b.w	8018aac <_malloc_r>
 8018a52:	bf00      	nop
 8018a54:	20000150 	.word	0x20000150

08018a58 <free>:
 8018a58:	4b02      	ldr	r3, [pc, #8]	@ (8018a64 <free+0xc>)
 8018a5a:	4601      	mov	r1, r0
 8018a5c:	6818      	ldr	r0, [r3, #0]
 8018a5e:	f001 bd97 	b.w	801a590 <_free_r>
 8018a62:	bf00      	nop
 8018a64:	20000150 	.word	0x20000150

08018a68 <sbrk_aligned>:
 8018a68:	b570      	push	{r4, r5, r6, lr}
 8018a6a:	4e0f      	ldr	r6, [pc, #60]	@ (8018aa8 <sbrk_aligned+0x40>)
 8018a6c:	460c      	mov	r4, r1
 8018a6e:	6831      	ldr	r1, [r6, #0]
 8018a70:	4605      	mov	r5, r0
 8018a72:	b911      	cbnz	r1, 8018a7a <sbrk_aligned+0x12>
 8018a74:	f000 fed6 	bl	8019824 <_sbrk_r>
 8018a78:	6030      	str	r0, [r6, #0]
 8018a7a:	4621      	mov	r1, r4
 8018a7c:	4628      	mov	r0, r5
 8018a7e:	f000 fed1 	bl	8019824 <_sbrk_r>
 8018a82:	1c43      	adds	r3, r0, #1
 8018a84:	d103      	bne.n	8018a8e <sbrk_aligned+0x26>
 8018a86:	f04f 34ff 	mov.w	r4, #4294967295
 8018a8a:	4620      	mov	r0, r4
 8018a8c:	bd70      	pop	{r4, r5, r6, pc}
 8018a8e:	1cc4      	adds	r4, r0, #3
 8018a90:	f024 0403 	bic.w	r4, r4, #3
 8018a94:	42a0      	cmp	r0, r4
 8018a96:	d0f8      	beq.n	8018a8a <sbrk_aligned+0x22>
 8018a98:	1a21      	subs	r1, r4, r0
 8018a9a:	4628      	mov	r0, r5
 8018a9c:	f000 fec2 	bl	8019824 <_sbrk_r>
 8018aa0:	3001      	adds	r0, #1
 8018aa2:	d1f2      	bne.n	8018a8a <sbrk_aligned+0x22>
 8018aa4:	e7ef      	b.n	8018a86 <sbrk_aligned+0x1e>
 8018aa6:	bf00      	nop
 8018aa8:	200025d4 	.word	0x200025d4

08018aac <_malloc_r>:
 8018aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018ab0:	1ccd      	adds	r5, r1, #3
 8018ab2:	f025 0503 	bic.w	r5, r5, #3
 8018ab6:	3508      	adds	r5, #8
 8018ab8:	2d0c      	cmp	r5, #12
 8018aba:	bf38      	it	cc
 8018abc:	250c      	movcc	r5, #12
 8018abe:	2d00      	cmp	r5, #0
 8018ac0:	4606      	mov	r6, r0
 8018ac2:	db01      	blt.n	8018ac8 <_malloc_r+0x1c>
 8018ac4:	42a9      	cmp	r1, r5
 8018ac6:	d904      	bls.n	8018ad2 <_malloc_r+0x26>
 8018ac8:	230c      	movs	r3, #12
 8018aca:	6033      	str	r3, [r6, #0]
 8018acc:	2000      	movs	r0, #0
 8018ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018ad2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018ba8 <_malloc_r+0xfc>
 8018ad6:	f000 f869 	bl	8018bac <__malloc_lock>
 8018ada:	f8d8 3000 	ldr.w	r3, [r8]
 8018ade:	461c      	mov	r4, r3
 8018ae0:	bb44      	cbnz	r4, 8018b34 <_malloc_r+0x88>
 8018ae2:	4629      	mov	r1, r5
 8018ae4:	4630      	mov	r0, r6
 8018ae6:	f7ff ffbf 	bl	8018a68 <sbrk_aligned>
 8018aea:	1c43      	adds	r3, r0, #1
 8018aec:	4604      	mov	r4, r0
 8018aee:	d158      	bne.n	8018ba2 <_malloc_r+0xf6>
 8018af0:	f8d8 4000 	ldr.w	r4, [r8]
 8018af4:	4627      	mov	r7, r4
 8018af6:	2f00      	cmp	r7, #0
 8018af8:	d143      	bne.n	8018b82 <_malloc_r+0xd6>
 8018afa:	2c00      	cmp	r4, #0
 8018afc:	d04b      	beq.n	8018b96 <_malloc_r+0xea>
 8018afe:	6823      	ldr	r3, [r4, #0]
 8018b00:	4639      	mov	r1, r7
 8018b02:	4630      	mov	r0, r6
 8018b04:	eb04 0903 	add.w	r9, r4, r3
 8018b08:	f000 fe8c 	bl	8019824 <_sbrk_r>
 8018b0c:	4581      	cmp	r9, r0
 8018b0e:	d142      	bne.n	8018b96 <_malloc_r+0xea>
 8018b10:	6821      	ldr	r1, [r4, #0]
 8018b12:	1a6d      	subs	r5, r5, r1
 8018b14:	4629      	mov	r1, r5
 8018b16:	4630      	mov	r0, r6
 8018b18:	f7ff ffa6 	bl	8018a68 <sbrk_aligned>
 8018b1c:	3001      	adds	r0, #1
 8018b1e:	d03a      	beq.n	8018b96 <_malloc_r+0xea>
 8018b20:	6823      	ldr	r3, [r4, #0]
 8018b22:	442b      	add	r3, r5
 8018b24:	6023      	str	r3, [r4, #0]
 8018b26:	f8d8 3000 	ldr.w	r3, [r8]
 8018b2a:	685a      	ldr	r2, [r3, #4]
 8018b2c:	bb62      	cbnz	r2, 8018b88 <_malloc_r+0xdc>
 8018b2e:	f8c8 7000 	str.w	r7, [r8]
 8018b32:	e00f      	b.n	8018b54 <_malloc_r+0xa8>
 8018b34:	6822      	ldr	r2, [r4, #0]
 8018b36:	1b52      	subs	r2, r2, r5
 8018b38:	d420      	bmi.n	8018b7c <_malloc_r+0xd0>
 8018b3a:	2a0b      	cmp	r2, #11
 8018b3c:	d917      	bls.n	8018b6e <_malloc_r+0xc2>
 8018b3e:	1961      	adds	r1, r4, r5
 8018b40:	42a3      	cmp	r3, r4
 8018b42:	6025      	str	r5, [r4, #0]
 8018b44:	bf18      	it	ne
 8018b46:	6059      	strne	r1, [r3, #4]
 8018b48:	6863      	ldr	r3, [r4, #4]
 8018b4a:	bf08      	it	eq
 8018b4c:	f8c8 1000 	streq.w	r1, [r8]
 8018b50:	5162      	str	r2, [r4, r5]
 8018b52:	604b      	str	r3, [r1, #4]
 8018b54:	4630      	mov	r0, r6
 8018b56:	f000 f82f 	bl	8018bb8 <__malloc_unlock>
 8018b5a:	f104 000b 	add.w	r0, r4, #11
 8018b5e:	1d23      	adds	r3, r4, #4
 8018b60:	f020 0007 	bic.w	r0, r0, #7
 8018b64:	1ac2      	subs	r2, r0, r3
 8018b66:	bf1c      	itt	ne
 8018b68:	1a1b      	subne	r3, r3, r0
 8018b6a:	50a3      	strne	r3, [r4, r2]
 8018b6c:	e7af      	b.n	8018ace <_malloc_r+0x22>
 8018b6e:	6862      	ldr	r2, [r4, #4]
 8018b70:	42a3      	cmp	r3, r4
 8018b72:	bf0c      	ite	eq
 8018b74:	f8c8 2000 	streq.w	r2, [r8]
 8018b78:	605a      	strne	r2, [r3, #4]
 8018b7a:	e7eb      	b.n	8018b54 <_malloc_r+0xa8>
 8018b7c:	4623      	mov	r3, r4
 8018b7e:	6864      	ldr	r4, [r4, #4]
 8018b80:	e7ae      	b.n	8018ae0 <_malloc_r+0x34>
 8018b82:	463c      	mov	r4, r7
 8018b84:	687f      	ldr	r7, [r7, #4]
 8018b86:	e7b6      	b.n	8018af6 <_malloc_r+0x4a>
 8018b88:	461a      	mov	r2, r3
 8018b8a:	685b      	ldr	r3, [r3, #4]
 8018b8c:	42a3      	cmp	r3, r4
 8018b8e:	d1fb      	bne.n	8018b88 <_malloc_r+0xdc>
 8018b90:	2300      	movs	r3, #0
 8018b92:	6053      	str	r3, [r2, #4]
 8018b94:	e7de      	b.n	8018b54 <_malloc_r+0xa8>
 8018b96:	230c      	movs	r3, #12
 8018b98:	6033      	str	r3, [r6, #0]
 8018b9a:	4630      	mov	r0, r6
 8018b9c:	f000 f80c 	bl	8018bb8 <__malloc_unlock>
 8018ba0:	e794      	b.n	8018acc <_malloc_r+0x20>
 8018ba2:	6005      	str	r5, [r0, #0]
 8018ba4:	e7d6      	b.n	8018b54 <_malloc_r+0xa8>
 8018ba6:	bf00      	nop
 8018ba8:	200025d8 	.word	0x200025d8

08018bac <__malloc_lock>:
 8018bac:	4801      	ldr	r0, [pc, #4]	@ (8018bb4 <__malloc_lock+0x8>)
 8018bae:	f000 be86 	b.w	80198be <__retarget_lock_acquire_recursive>
 8018bb2:	bf00      	nop
 8018bb4:	2000271c 	.word	0x2000271c

08018bb8 <__malloc_unlock>:
 8018bb8:	4801      	ldr	r0, [pc, #4]	@ (8018bc0 <__malloc_unlock+0x8>)
 8018bba:	f000 be81 	b.w	80198c0 <__retarget_lock_release_recursive>
 8018bbe:	bf00      	nop
 8018bc0:	2000271c 	.word	0x2000271c

08018bc4 <__cvt>:
 8018bc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018bc8:	ec57 6b10 	vmov	r6, r7, d0
 8018bcc:	2f00      	cmp	r7, #0
 8018bce:	460c      	mov	r4, r1
 8018bd0:	4619      	mov	r1, r3
 8018bd2:	463b      	mov	r3, r7
 8018bd4:	bfbb      	ittet	lt
 8018bd6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8018bda:	461f      	movlt	r7, r3
 8018bdc:	2300      	movge	r3, #0
 8018bde:	232d      	movlt	r3, #45	@ 0x2d
 8018be0:	700b      	strb	r3, [r1, #0]
 8018be2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018be4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8018be8:	4691      	mov	r9, r2
 8018bea:	f023 0820 	bic.w	r8, r3, #32
 8018bee:	bfbc      	itt	lt
 8018bf0:	4632      	movlt	r2, r6
 8018bf2:	4616      	movlt	r6, r2
 8018bf4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8018bf8:	d005      	beq.n	8018c06 <__cvt+0x42>
 8018bfa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8018bfe:	d100      	bne.n	8018c02 <__cvt+0x3e>
 8018c00:	3401      	adds	r4, #1
 8018c02:	2102      	movs	r1, #2
 8018c04:	e000      	b.n	8018c08 <__cvt+0x44>
 8018c06:	2103      	movs	r1, #3
 8018c08:	ab03      	add	r3, sp, #12
 8018c0a:	9301      	str	r3, [sp, #4]
 8018c0c:	ab02      	add	r3, sp, #8
 8018c0e:	9300      	str	r3, [sp, #0]
 8018c10:	ec47 6b10 	vmov	d0, r6, r7
 8018c14:	4653      	mov	r3, sl
 8018c16:	4622      	mov	r2, r4
 8018c18:	f000 feea 	bl	80199f0 <_dtoa_r>
 8018c1c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8018c20:	4605      	mov	r5, r0
 8018c22:	d119      	bne.n	8018c58 <__cvt+0x94>
 8018c24:	f019 0f01 	tst.w	r9, #1
 8018c28:	d00e      	beq.n	8018c48 <__cvt+0x84>
 8018c2a:	eb00 0904 	add.w	r9, r0, r4
 8018c2e:	2200      	movs	r2, #0
 8018c30:	2300      	movs	r3, #0
 8018c32:	4630      	mov	r0, r6
 8018c34:	4639      	mov	r1, r7
 8018c36:	f7e7 ff1f 	bl	8000a78 <__aeabi_dcmpeq>
 8018c3a:	b108      	cbz	r0, 8018c40 <__cvt+0x7c>
 8018c3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8018c40:	2230      	movs	r2, #48	@ 0x30
 8018c42:	9b03      	ldr	r3, [sp, #12]
 8018c44:	454b      	cmp	r3, r9
 8018c46:	d31e      	bcc.n	8018c86 <__cvt+0xc2>
 8018c48:	9b03      	ldr	r3, [sp, #12]
 8018c4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018c4c:	1b5b      	subs	r3, r3, r5
 8018c4e:	4628      	mov	r0, r5
 8018c50:	6013      	str	r3, [r2, #0]
 8018c52:	b004      	add	sp, #16
 8018c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8018c5c:	eb00 0904 	add.w	r9, r0, r4
 8018c60:	d1e5      	bne.n	8018c2e <__cvt+0x6a>
 8018c62:	7803      	ldrb	r3, [r0, #0]
 8018c64:	2b30      	cmp	r3, #48	@ 0x30
 8018c66:	d10a      	bne.n	8018c7e <__cvt+0xba>
 8018c68:	2200      	movs	r2, #0
 8018c6a:	2300      	movs	r3, #0
 8018c6c:	4630      	mov	r0, r6
 8018c6e:	4639      	mov	r1, r7
 8018c70:	f7e7 ff02 	bl	8000a78 <__aeabi_dcmpeq>
 8018c74:	b918      	cbnz	r0, 8018c7e <__cvt+0xba>
 8018c76:	f1c4 0401 	rsb	r4, r4, #1
 8018c7a:	f8ca 4000 	str.w	r4, [sl]
 8018c7e:	f8da 3000 	ldr.w	r3, [sl]
 8018c82:	4499      	add	r9, r3
 8018c84:	e7d3      	b.n	8018c2e <__cvt+0x6a>
 8018c86:	1c59      	adds	r1, r3, #1
 8018c88:	9103      	str	r1, [sp, #12]
 8018c8a:	701a      	strb	r2, [r3, #0]
 8018c8c:	e7d9      	b.n	8018c42 <__cvt+0x7e>

08018c8e <__exponent>:
 8018c8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018c90:	2900      	cmp	r1, #0
 8018c92:	bfba      	itte	lt
 8018c94:	4249      	neglt	r1, r1
 8018c96:	232d      	movlt	r3, #45	@ 0x2d
 8018c98:	232b      	movge	r3, #43	@ 0x2b
 8018c9a:	2909      	cmp	r1, #9
 8018c9c:	7002      	strb	r2, [r0, #0]
 8018c9e:	7043      	strb	r3, [r0, #1]
 8018ca0:	dd29      	ble.n	8018cf6 <__exponent+0x68>
 8018ca2:	f10d 0307 	add.w	r3, sp, #7
 8018ca6:	461d      	mov	r5, r3
 8018ca8:	270a      	movs	r7, #10
 8018caa:	461a      	mov	r2, r3
 8018cac:	fbb1 f6f7 	udiv	r6, r1, r7
 8018cb0:	fb07 1416 	mls	r4, r7, r6, r1
 8018cb4:	3430      	adds	r4, #48	@ 0x30
 8018cb6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8018cba:	460c      	mov	r4, r1
 8018cbc:	2c63      	cmp	r4, #99	@ 0x63
 8018cbe:	f103 33ff 	add.w	r3, r3, #4294967295
 8018cc2:	4631      	mov	r1, r6
 8018cc4:	dcf1      	bgt.n	8018caa <__exponent+0x1c>
 8018cc6:	3130      	adds	r1, #48	@ 0x30
 8018cc8:	1e94      	subs	r4, r2, #2
 8018cca:	f803 1c01 	strb.w	r1, [r3, #-1]
 8018cce:	1c41      	adds	r1, r0, #1
 8018cd0:	4623      	mov	r3, r4
 8018cd2:	42ab      	cmp	r3, r5
 8018cd4:	d30a      	bcc.n	8018cec <__exponent+0x5e>
 8018cd6:	f10d 0309 	add.w	r3, sp, #9
 8018cda:	1a9b      	subs	r3, r3, r2
 8018cdc:	42ac      	cmp	r4, r5
 8018cde:	bf88      	it	hi
 8018ce0:	2300      	movhi	r3, #0
 8018ce2:	3302      	adds	r3, #2
 8018ce4:	4403      	add	r3, r0
 8018ce6:	1a18      	subs	r0, r3, r0
 8018ce8:	b003      	add	sp, #12
 8018cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018cec:	f813 6b01 	ldrb.w	r6, [r3], #1
 8018cf0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8018cf4:	e7ed      	b.n	8018cd2 <__exponent+0x44>
 8018cf6:	2330      	movs	r3, #48	@ 0x30
 8018cf8:	3130      	adds	r1, #48	@ 0x30
 8018cfa:	7083      	strb	r3, [r0, #2]
 8018cfc:	70c1      	strb	r1, [r0, #3]
 8018cfe:	1d03      	adds	r3, r0, #4
 8018d00:	e7f1      	b.n	8018ce6 <__exponent+0x58>
	...

08018d04 <_printf_float>:
 8018d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d08:	b08d      	sub	sp, #52	@ 0x34
 8018d0a:	460c      	mov	r4, r1
 8018d0c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8018d10:	4616      	mov	r6, r2
 8018d12:	461f      	mov	r7, r3
 8018d14:	4605      	mov	r5, r0
 8018d16:	f000 fd39 	bl	801978c <_localeconv_r>
 8018d1a:	6803      	ldr	r3, [r0, #0]
 8018d1c:	9304      	str	r3, [sp, #16]
 8018d1e:	4618      	mov	r0, r3
 8018d20:	f7e7 fa7e 	bl	8000220 <strlen>
 8018d24:	2300      	movs	r3, #0
 8018d26:	930a      	str	r3, [sp, #40]	@ 0x28
 8018d28:	f8d8 3000 	ldr.w	r3, [r8]
 8018d2c:	9005      	str	r0, [sp, #20]
 8018d2e:	3307      	adds	r3, #7
 8018d30:	f023 0307 	bic.w	r3, r3, #7
 8018d34:	f103 0208 	add.w	r2, r3, #8
 8018d38:	f894 a018 	ldrb.w	sl, [r4, #24]
 8018d3c:	f8d4 b000 	ldr.w	fp, [r4]
 8018d40:	f8c8 2000 	str.w	r2, [r8]
 8018d44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018d48:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8018d4c:	9307      	str	r3, [sp, #28]
 8018d4e:	f8cd 8018 	str.w	r8, [sp, #24]
 8018d52:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8018d56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018d5a:	4b9c      	ldr	r3, [pc, #624]	@ (8018fcc <_printf_float+0x2c8>)
 8018d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8018d60:	f7e7 febc 	bl	8000adc <__aeabi_dcmpun>
 8018d64:	bb70      	cbnz	r0, 8018dc4 <_printf_float+0xc0>
 8018d66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018d6a:	4b98      	ldr	r3, [pc, #608]	@ (8018fcc <_printf_float+0x2c8>)
 8018d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8018d70:	f7e7 fe96 	bl	8000aa0 <__aeabi_dcmple>
 8018d74:	bb30      	cbnz	r0, 8018dc4 <_printf_float+0xc0>
 8018d76:	2200      	movs	r2, #0
 8018d78:	2300      	movs	r3, #0
 8018d7a:	4640      	mov	r0, r8
 8018d7c:	4649      	mov	r1, r9
 8018d7e:	f7e7 fe85 	bl	8000a8c <__aeabi_dcmplt>
 8018d82:	b110      	cbz	r0, 8018d8a <_printf_float+0x86>
 8018d84:	232d      	movs	r3, #45	@ 0x2d
 8018d86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018d8a:	4a91      	ldr	r2, [pc, #580]	@ (8018fd0 <_printf_float+0x2cc>)
 8018d8c:	4b91      	ldr	r3, [pc, #580]	@ (8018fd4 <_printf_float+0x2d0>)
 8018d8e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8018d92:	bf8c      	ite	hi
 8018d94:	4690      	movhi	r8, r2
 8018d96:	4698      	movls	r8, r3
 8018d98:	2303      	movs	r3, #3
 8018d9a:	6123      	str	r3, [r4, #16]
 8018d9c:	f02b 0304 	bic.w	r3, fp, #4
 8018da0:	6023      	str	r3, [r4, #0]
 8018da2:	f04f 0900 	mov.w	r9, #0
 8018da6:	9700      	str	r7, [sp, #0]
 8018da8:	4633      	mov	r3, r6
 8018daa:	aa0b      	add	r2, sp, #44	@ 0x2c
 8018dac:	4621      	mov	r1, r4
 8018dae:	4628      	mov	r0, r5
 8018db0:	f000 f9d2 	bl	8019158 <_printf_common>
 8018db4:	3001      	adds	r0, #1
 8018db6:	f040 808d 	bne.w	8018ed4 <_printf_float+0x1d0>
 8018dba:	f04f 30ff 	mov.w	r0, #4294967295
 8018dbe:	b00d      	add	sp, #52	@ 0x34
 8018dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018dc4:	4642      	mov	r2, r8
 8018dc6:	464b      	mov	r3, r9
 8018dc8:	4640      	mov	r0, r8
 8018dca:	4649      	mov	r1, r9
 8018dcc:	f7e7 fe86 	bl	8000adc <__aeabi_dcmpun>
 8018dd0:	b140      	cbz	r0, 8018de4 <_printf_float+0xe0>
 8018dd2:	464b      	mov	r3, r9
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	bfbc      	itt	lt
 8018dd8:	232d      	movlt	r3, #45	@ 0x2d
 8018dda:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8018dde:	4a7e      	ldr	r2, [pc, #504]	@ (8018fd8 <_printf_float+0x2d4>)
 8018de0:	4b7e      	ldr	r3, [pc, #504]	@ (8018fdc <_printf_float+0x2d8>)
 8018de2:	e7d4      	b.n	8018d8e <_printf_float+0x8a>
 8018de4:	6863      	ldr	r3, [r4, #4]
 8018de6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8018dea:	9206      	str	r2, [sp, #24]
 8018dec:	1c5a      	adds	r2, r3, #1
 8018dee:	d13b      	bne.n	8018e68 <_printf_float+0x164>
 8018df0:	2306      	movs	r3, #6
 8018df2:	6063      	str	r3, [r4, #4]
 8018df4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8018df8:	2300      	movs	r3, #0
 8018dfa:	6022      	str	r2, [r4, #0]
 8018dfc:	9303      	str	r3, [sp, #12]
 8018dfe:	ab0a      	add	r3, sp, #40	@ 0x28
 8018e00:	e9cd a301 	strd	sl, r3, [sp, #4]
 8018e04:	ab09      	add	r3, sp, #36	@ 0x24
 8018e06:	9300      	str	r3, [sp, #0]
 8018e08:	6861      	ldr	r1, [r4, #4]
 8018e0a:	ec49 8b10 	vmov	d0, r8, r9
 8018e0e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8018e12:	4628      	mov	r0, r5
 8018e14:	f7ff fed6 	bl	8018bc4 <__cvt>
 8018e18:	9b06      	ldr	r3, [sp, #24]
 8018e1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018e1c:	2b47      	cmp	r3, #71	@ 0x47
 8018e1e:	4680      	mov	r8, r0
 8018e20:	d129      	bne.n	8018e76 <_printf_float+0x172>
 8018e22:	1cc8      	adds	r0, r1, #3
 8018e24:	db02      	blt.n	8018e2c <_printf_float+0x128>
 8018e26:	6863      	ldr	r3, [r4, #4]
 8018e28:	4299      	cmp	r1, r3
 8018e2a:	dd41      	ble.n	8018eb0 <_printf_float+0x1ac>
 8018e2c:	f1aa 0a02 	sub.w	sl, sl, #2
 8018e30:	fa5f fa8a 	uxtb.w	sl, sl
 8018e34:	3901      	subs	r1, #1
 8018e36:	4652      	mov	r2, sl
 8018e38:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8018e3c:	9109      	str	r1, [sp, #36]	@ 0x24
 8018e3e:	f7ff ff26 	bl	8018c8e <__exponent>
 8018e42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018e44:	1813      	adds	r3, r2, r0
 8018e46:	2a01      	cmp	r2, #1
 8018e48:	4681      	mov	r9, r0
 8018e4a:	6123      	str	r3, [r4, #16]
 8018e4c:	dc02      	bgt.n	8018e54 <_printf_float+0x150>
 8018e4e:	6822      	ldr	r2, [r4, #0]
 8018e50:	07d2      	lsls	r2, r2, #31
 8018e52:	d501      	bpl.n	8018e58 <_printf_float+0x154>
 8018e54:	3301      	adds	r3, #1
 8018e56:	6123      	str	r3, [r4, #16]
 8018e58:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	d0a2      	beq.n	8018da6 <_printf_float+0xa2>
 8018e60:	232d      	movs	r3, #45	@ 0x2d
 8018e62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018e66:	e79e      	b.n	8018da6 <_printf_float+0xa2>
 8018e68:	9a06      	ldr	r2, [sp, #24]
 8018e6a:	2a47      	cmp	r2, #71	@ 0x47
 8018e6c:	d1c2      	bne.n	8018df4 <_printf_float+0xf0>
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	d1c0      	bne.n	8018df4 <_printf_float+0xf0>
 8018e72:	2301      	movs	r3, #1
 8018e74:	e7bd      	b.n	8018df2 <_printf_float+0xee>
 8018e76:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8018e7a:	d9db      	bls.n	8018e34 <_printf_float+0x130>
 8018e7c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8018e80:	d118      	bne.n	8018eb4 <_printf_float+0x1b0>
 8018e82:	2900      	cmp	r1, #0
 8018e84:	6863      	ldr	r3, [r4, #4]
 8018e86:	dd0b      	ble.n	8018ea0 <_printf_float+0x19c>
 8018e88:	6121      	str	r1, [r4, #16]
 8018e8a:	b913      	cbnz	r3, 8018e92 <_printf_float+0x18e>
 8018e8c:	6822      	ldr	r2, [r4, #0]
 8018e8e:	07d0      	lsls	r0, r2, #31
 8018e90:	d502      	bpl.n	8018e98 <_printf_float+0x194>
 8018e92:	3301      	adds	r3, #1
 8018e94:	440b      	add	r3, r1
 8018e96:	6123      	str	r3, [r4, #16]
 8018e98:	65a1      	str	r1, [r4, #88]	@ 0x58
 8018e9a:	f04f 0900 	mov.w	r9, #0
 8018e9e:	e7db      	b.n	8018e58 <_printf_float+0x154>
 8018ea0:	b913      	cbnz	r3, 8018ea8 <_printf_float+0x1a4>
 8018ea2:	6822      	ldr	r2, [r4, #0]
 8018ea4:	07d2      	lsls	r2, r2, #31
 8018ea6:	d501      	bpl.n	8018eac <_printf_float+0x1a8>
 8018ea8:	3302      	adds	r3, #2
 8018eaa:	e7f4      	b.n	8018e96 <_printf_float+0x192>
 8018eac:	2301      	movs	r3, #1
 8018eae:	e7f2      	b.n	8018e96 <_printf_float+0x192>
 8018eb0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8018eb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018eb6:	4299      	cmp	r1, r3
 8018eb8:	db05      	blt.n	8018ec6 <_printf_float+0x1c2>
 8018eba:	6823      	ldr	r3, [r4, #0]
 8018ebc:	6121      	str	r1, [r4, #16]
 8018ebe:	07d8      	lsls	r0, r3, #31
 8018ec0:	d5ea      	bpl.n	8018e98 <_printf_float+0x194>
 8018ec2:	1c4b      	adds	r3, r1, #1
 8018ec4:	e7e7      	b.n	8018e96 <_printf_float+0x192>
 8018ec6:	2900      	cmp	r1, #0
 8018ec8:	bfd4      	ite	le
 8018eca:	f1c1 0202 	rsble	r2, r1, #2
 8018ece:	2201      	movgt	r2, #1
 8018ed0:	4413      	add	r3, r2
 8018ed2:	e7e0      	b.n	8018e96 <_printf_float+0x192>
 8018ed4:	6823      	ldr	r3, [r4, #0]
 8018ed6:	055a      	lsls	r2, r3, #21
 8018ed8:	d407      	bmi.n	8018eea <_printf_float+0x1e6>
 8018eda:	6923      	ldr	r3, [r4, #16]
 8018edc:	4642      	mov	r2, r8
 8018ede:	4631      	mov	r1, r6
 8018ee0:	4628      	mov	r0, r5
 8018ee2:	47b8      	blx	r7
 8018ee4:	3001      	adds	r0, #1
 8018ee6:	d12b      	bne.n	8018f40 <_printf_float+0x23c>
 8018ee8:	e767      	b.n	8018dba <_printf_float+0xb6>
 8018eea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8018eee:	f240 80dd 	bls.w	80190ac <_printf_float+0x3a8>
 8018ef2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8018ef6:	2200      	movs	r2, #0
 8018ef8:	2300      	movs	r3, #0
 8018efa:	f7e7 fdbd 	bl	8000a78 <__aeabi_dcmpeq>
 8018efe:	2800      	cmp	r0, #0
 8018f00:	d033      	beq.n	8018f6a <_printf_float+0x266>
 8018f02:	4a37      	ldr	r2, [pc, #220]	@ (8018fe0 <_printf_float+0x2dc>)
 8018f04:	2301      	movs	r3, #1
 8018f06:	4631      	mov	r1, r6
 8018f08:	4628      	mov	r0, r5
 8018f0a:	47b8      	blx	r7
 8018f0c:	3001      	adds	r0, #1
 8018f0e:	f43f af54 	beq.w	8018dba <_printf_float+0xb6>
 8018f12:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8018f16:	4543      	cmp	r3, r8
 8018f18:	db02      	blt.n	8018f20 <_printf_float+0x21c>
 8018f1a:	6823      	ldr	r3, [r4, #0]
 8018f1c:	07d8      	lsls	r0, r3, #31
 8018f1e:	d50f      	bpl.n	8018f40 <_printf_float+0x23c>
 8018f20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018f24:	4631      	mov	r1, r6
 8018f26:	4628      	mov	r0, r5
 8018f28:	47b8      	blx	r7
 8018f2a:	3001      	adds	r0, #1
 8018f2c:	f43f af45 	beq.w	8018dba <_printf_float+0xb6>
 8018f30:	f04f 0900 	mov.w	r9, #0
 8018f34:	f108 38ff 	add.w	r8, r8, #4294967295
 8018f38:	f104 0a1a 	add.w	sl, r4, #26
 8018f3c:	45c8      	cmp	r8, r9
 8018f3e:	dc09      	bgt.n	8018f54 <_printf_float+0x250>
 8018f40:	6823      	ldr	r3, [r4, #0]
 8018f42:	079b      	lsls	r3, r3, #30
 8018f44:	f100 8103 	bmi.w	801914e <_printf_float+0x44a>
 8018f48:	68e0      	ldr	r0, [r4, #12]
 8018f4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018f4c:	4298      	cmp	r0, r3
 8018f4e:	bfb8      	it	lt
 8018f50:	4618      	movlt	r0, r3
 8018f52:	e734      	b.n	8018dbe <_printf_float+0xba>
 8018f54:	2301      	movs	r3, #1
 8018f56:	4652      	mov	r2, sl
 8018f58:	4631      	mov	r1, r6
 8018f5a:	4628      	mov	r0, r5
 8018f5c:	47b8      	blx	r7
 8018f5e:	3001      	adds	r0, #1
 8018f60:	f43f af2b 	beq.w	8018dba <_printf_float+0xb6>
 8018f64:	f109 0901 	add.w	r9, r9, #1
 8018f68:	e7e8      	b.n	8018f3c <_printf_float+0x238>
 8018f6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	dc39      	bgt.n	8018fe4 <_printf_float+0x2e0>
 8018f70:	4a1b      	ldr	r2, [pc, #108]	@ (8018fe0 <_printf_float+0x2dc>)
 8018f72:	2301      	movs	r3, #1
 8018f74:	4631      	mov	r1, r6
 8018f76:	4628      	mov	r0, r5
 8018f78:	47b8      	blx	r7
 8018f7a:	3001      	adds	r0, #1
 8018f7c:	f43f af1d 	beq.w	8018dba <_printf_float+0xb6>
 8018f80:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8018f84:	ea59 0303 	orrs.w	r3, r9, r3
 8018f88:	d102      	bne.n	8018f90 <_printf_float+0x28c>
 8018f8a:	6823      	ldr	r3, [r4, #0]
 8018f8c:	07d9      	lsls	r1, r3, #31
 8018f8e:	d5d7      	bpl.n	8018f40 <_printf_float+0x23c>
 8018f90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018f94:	4631      	mov	r1, r6
 8018f96:	4628      	mov	r0, r5
 8018f98:	47b8      	blx	r7
 8018f9a:	3001      	adds	r0, #1
 8018f9c:	f43f af0d 	beq.w	8018dba <_printf_float+0xb6>
 8018fa0:	f04f 0a00 	mov.w	sl, #0
 8018fa4:	f104 0b1a 	add.w	fp, r4, #26
 8018fa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018faa:	425b      	negs	r3, r3
 8018fac:	4553      	cmp	r3, sl
 8018fae:	dc01      	bgt.n	8018fb4 <_printf_float+0x2b0>
 8018fb0:	464b      	mov	r3, r9
 8018fb2:	e793      	b.n	8018edc <_printf_float+0x1d8>
 8018fb4:	2301      	movs	r3, #1
 8018fb6:	465a      	mov	r2, fp
 8018fb8:	4631      	mov	r1, r6
 8018fba:	4628      	mov	r0, r5
 8018fbc:	47b8      	blx	r7
 8018fbe:	3001      	adds	r0, #1
 8018fc0:	f43f aefb 	beq.w	8018dba <_printf_float+0xb6>
 8018fc4:	f10a 0a01 	add.w	sl, sl, #1
 8018fc8:	e7ee      	b.n	8018fa8 <_printf_float+0x2a4>
 8018fca:	bf00      	nop
 8018fcc:	7fefffff 	.word	0x7fefffff
 8018fd0:	0801cc48 	.word	0x0801cc48
 8018fd4:	0801cc44 	.word	0x0801cc44
 8018fd8:	0801cc50 	.word	0x0801cc50
 8018fdc:	0801cc4c 	.word	0x0801cc4c
 8018fe0:	0801cc54 	.word	0x0801cc54
 8018fe4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8018fe6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8018fea:	4553      	cmp	r3, sl
 8018fec:	bfa8      	it	ge
 8018fee:	4653      	movge	r3, sl
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	4699      	mov	r9, r3
 8018ff4:	dc36      	bgt.n	8019064 <_printf_float+0x360>
 8018ff6:	f04f 0b00 	mov.w	fp, #0
 8018ffa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018ffe:	f104 021a 	add.w	r2, r4, #26
 8019002:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8019004:	9306      	str	r3, [sp, #24]
 8019006:	eba3 0309 	sub.w	r3, r3, r9
 801900a:	455b      	cmp	r3, fp
 801900c:	dc31      	bgt.n	8019072 <_printf_float+0x36e>
 801900e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019010:	459a      	cmp	sl, r3
 8019012:	dc3a      	bgt.n	801908a <_printf_float+0x386>
 8019014:	6823      	ldr	r3, [r4, #0]
 8019016:	07da      	lsls	r2, r3, #31
 8019018:	d437      	bmi.n	801908a <_printf_float+0x386>
 801901a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801901c:	ebaa 0903 	sub.w	r9, sl, r3
 8019020:	9b06      	ldr	r3, [sp, #24]
 8019022:	ebaa 0303 	sub.w	r3, sl, r3
 8019026:	4599      	cmp	r9, r3
 8019028:	bfa8      	it	ge
 801902a:	4699      	movge	r9, r3
 801902c:	f1b9 0f00 	cmp.w	r9, #0
 8019030:	dc33      	bgt.n	801909a <_printf_float+0x396>
 8019032:	f04f 0800 	mov.w	r8, #0
 8019036:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801903a:	f104 0b1a 	add.w	fp, r4, #26
 801903e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019040:	ebaa 0303 	sub.w	r3, sl, r3
 8019044:	eba3 0309 	sub.w	r3, r3, r9
 8019048:	4543      	cmp	r3, r8
 801904a:	f77f af79 	ble.w	8018f40 <_printf_float+0x23c>
 801904e:	2301      	movs	r3, #1
 8019050:	465a      	mov	r2, fp
 8019052:	4631      	mov	r1, r6
 8019054:	4628      	mov	r0, r5
 8019056:	47b8      	blx	r7
 8019058:	3001      	adds	r0, #1
 801905a:	f43f aeae 	beq.w	8018dba <_printf_float+0xb6>
 801905e:	f108 0801 	add.w	r8, r8, #1
 8019062:	e7ec      	b.n	801903e <_printf_float+0x33a>
 8019064:	4642      	mov	r2, r8
 8019066:	4631      	mov	r1, r6
 8019068:	4628      	mov	r0, r5
 801906a:	47b8      	blx	r7
 801906c:	3001      	adds	r0, #1
 801906e:	d1c2      	bne.n	8018ff6 <_printf_float+0x2f2>
 8019070:	e6a3      	b.n	8018dba <_printf_float+0xb6>
 8019072:	2301      	movs	r3, #1
 8019074:	4631      	mov	r1, r6
 8019076:	4628      	mov	r0, r5
 8019078:	9206      	str	r2, [sp, #24]
 801907a:	47b8      	blx	r7
 801907c:	3001      	adds	r0, #1
 801907e:	f43f ae9c 	beq.w	8018dba <_printf_float+0xb6>
 8019082:	9a06      	ldr	r2, [sp, #24]
 8019084:	f10b 0b01 	add.w	fp, fp, #1
 8019088:	e7bb      	b.n	8019002 <_printf_float+0x2fe>
 801908a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801908e:	4631      	mov	r1, r6
 8019090:	4628      	mov	r0, r5
 8019092:	47b8      	blx	r7
 8019094:	3001      	adds	r0, #1
 8019096:	d1c0      	bne.n	801901a <_printf_float+0x316>
 8019098:	e68f      	b.n	8018dba <_printf_float+0xb6>
 801909a:	9a06      	ldr	r2, [sp, #24]
 801909c:	464b      	mov	r3, r9
 801909e:	4442      	add	r2, r8
 80190a0:	4631      	mov	r1, r6
 80190a2:	4628      	mov	r0, r5
 80190a4:	47b8      	blx	r7
 80190a6:	3001      	adds	r0, #1
 80190a8:	d1c3      	bne.n	8019032 <_printf_float+0x32e>
 80190aa:	e686      	b.n	8018dba <_printf_float+0xb6>
 80190ac:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80190b0:	f1ba 0f01 	cmp.w	sl, #1
 80190b4:	dc01      	bgt.n	80190ba <_printf_float+0x3b6>
 80190b6:	07db      	lsls	r3, r3, #31
 80190b8:	d536      	bpl.n	8019128 <_printf_float+0x424>
 80190ba:	2301      	movs	r3, #1
 80190bc:	4642      	mov	r2, r8
 80190be:	4631      	mov	r1, r6
 80190c0:	4628      	mov	r0, r5
 80190c2:	47b8      	blx	r7
 80190c4:	3001      	adds	r0, #1
 80190c6:	f43f ae78 	beq.w	8018dba <_printf_float+0xb6>
 80190ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80190ce:	4631      	mov	r1, r6
 80190d0:	4628      	mov	r0, r5
 80190d2:	47b8      	blx	r7
 80190d4:	3001      	adds	r0, #1
 80190d6:	f43f ae70 	beq.w	8018dba <_printf_float+0xb6>
 80190da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80190de:	2200      	movs	r2, #0
 80190e0:	2300      	movs	r3, #0
 80190e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80190e6:	f7e7 fcc7 	bl	8000a78 <__aeabi_dcmpeq>
 80190ea:	b9c0      	cbnz	r0, 801911e <_printf_float+0x41a>
 80190ec:	4653      	mov	r3, sl
 80190ee:	f108 0201 	add.w	r2, r8, #1
 80190f2:	4631      	mov	r1, r6
 80190f4:	4628      	mov	r0, r5
 80190f6:	47b8      	blx	r7
 80190f8:	3001      	adds	r0, #1
 80190fa:	d10c      	bne.n	8019116 <_printf_float+0x412>
 80190fc:	e65d      	b.n	8018dba <_printf_float+0xb6>
 80190fe:	2301      	movs	r3, #1
 8019100:	465a      	mov	r2, fp
 8019102:	4631      	mov	r1, r6
 8019104:	4628      	mov	r0, r5
 8019106:	47b8      	blx	r7
 8019108:	3001      	adds	r0, #1
 801910a:	f43f ae56 	beq.w	8018dba <_printf_float+0xb6>
 801910e:	f108 0801 	add.w	r8, r8, #1
 8019112:	45d0      	cmp	r8, sl
 8019114:	dbf3      	blt.n	80190fe <_printf_float+0x3fa>
 8019116:	464b      	mov	r3, r9
 8019118:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801911c:	e6df      	b.n	8018ede <_printf_float+0x1da>
 801911e:	f04f 0800 	mov.w	r8, #0
 8019122:	f104 0b1a 	add.w	fp, r4, #26
 8019126:	e7f4      	b.n	8019112 <_printf_float+0x40e>
 8019128:	2301      	movs	r3, #1
 801912a:	4642      	mov	r2, r8
 801912c:	e7e1      	b.n	80190f2 <_printf_float+0x3ee>
 801912e:	2301      	movs	r3, #1
 8019130:	464a      	mov	r2, r9
 8019132:	4631      	mov	r1, r6
 8019134:	4628      	mov	r0, r5
 8019136:	47b8      	blx	r7
 8019138:	3001      	adds	r0, #1
 801913a:	f43f ae3e 	beq.w	8018dba <_printf_float+0xb6>
 801913e:	f108 0801 	add.w	r8, r8, #1
 8019142:	68e3      	ldr	r3, [r4, #12]
 8019144:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8019146:	1a5b      	subs	r3, r3, r1
 8019148:	4543      	cmp	r3, r8
 801914a:	dcf0      	bgt.n	801912e <_printf_float+0x42a>
 801914c:	e6fc      	b.n	8018f48 <_printf_float+0x244>
 801914e:	f04f 0800 	mov.w	r8, #0
 8019152:	f104 0919 	add.w	r9, r4, #25
 8019156:	e7f4      	b.n	8019142 <_printf_float+0x43e>

08019158 <_printf_common>:
 8019158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801915c:	4616      	mov	r6, r2
 801915e:	4698      	mov	r8, r3
 8019160:	688a      	ldr	r2, [r1, #8]
 8019162:	690b      	ldr	r3, [r1, #16]
 8019164:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019168:	4293      	cmp	r3, r2
 801916a:	bfb8      	it	lt
 801916c:	4613      	movlt	r3, r2
 801916e:	6033      	str	r3, [r6, #0]
 8019170:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019174:	4607      	mov	r7, r0
 8019176:	460c      	mov	r4, r1
 8019178:	b10a      	cbz	r2, 801917e <_printf_common+0x26>
 801917a:	3301      	adds	r3, #1
 801917c:	6033      	str	r3, [r6, #0]
 801917e:	6823      	ldr	r3, [r4, #0]
 8019180:	0699      	lsls	r1, r3, #26
 8019182:	bf42      	ittt	mi
 8019184:	6833      	ldrmi	r3, [r6, #0]
 8019186:	3302      	addmi	r3, #2
 8019188:	6033      	strmi	r3, [r6, #0]
 801918a:	6825      	ldr	r5, [r4, #0]
 801918c:	f015 0506 	ands.w	r5, r5, #6
 8019190:	d106      	bne.n	80191a0 <_printf_common+0x48>
 8019192:	f104 0a19 	add.w	sl, r4, #25
 8019196:	68e3      	ldr	r3, [r4, #12]
 8019198:	6832      	ldr	r2, [r6, #0]
 801919a:	1a9b      	subs	r3, r3, r2
 801919c:	42ab      	cmp	r3, r5
 801919e:	dc26      	bgt.n	80191ee <_printf_common+0x96>
 80191a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80191a4:	6822      	ldr	r2, [r4, #0]
 80191a6:	3b00      	subs	r3, #0
 80191a8:	bf18      	it	ne
 80191aa:	2301      	movne	r3, #1
 80191ac:	0692      	lsls	r2, r2, #26
 80191ae:	d42b      	bmi.n	8019208 <_printf_common+0xb0>
 80191b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80191b4:	4641      	mov	r1, r8
 80191b6:	4638      	mov	r0, r7
 80191b8:	47c8      	blx	r9
 80191ba:	3001      	adds	r0, #1
 80191bc:	d01e      	beq.n	80191fc <_printf_common+0xa4>
 80191be:	6823      	ldr	r3, [r4, #0]
 80191c0:	6922      	ldr	r2, [r4, #16]
 80191c2:	f003 0306 	and.w	r3, r3, #6
 80191c6:	2b04      	cmp	r3, #4
 80191c8:	bf02      	ittt	eq
 80191ca:	68e5      	ldreq	r5, [r4, #12]
 80191cc:	6833      	ldreq	r3, [r6, #0]
 80191ce:	1aed      	subeq	r5, r5, r3
 80191d0:	68a3      	ldr	r3, [r4, #8]
 80191d2:	bf0c      	ite	eq
 80191d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80191d8:	2500      	movne	r5, #0
 80191da:	4293      	cmp	r3, r2
 80191dc:	bfc4      	itt	gt
 80191de:	1a9b      	subgt	r3, r3, r2
 80191e0:	18ed      	addgt	r5, r5, r3
 80191e2:	2600      	movs	r6, #0
 80191e4:	341a      	adds	r4, #26
 80191e6:	42b5      	cmp	r5, r6
 80191e8:	d11a      	bne.n	8019220 <_printf_common+0xc8>
 80191ea:	2000      	movs	r0, #0
 80191ec:	e008      	b.n	8019200 <_printf_common+0xa8>
 80191ee:	2301      	movs	r3, #1
 80191f0:	4652      	mov	r2, sl
 80191f2:	4641      	mov	r1, r8
 80191f4:	4638      	mov	r0, r7
 80191f6:	47c8      	blx	r9
 80191f8:	3001      	adds	r0, #1
 80191fa:	d103      	bne.n	8019204 <_printf_common+0xac>
 80191fc:	f04f 30ff 	mov.w	r0, #4294967295
 8019200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019204:	3501      	adds	r5, #1
 8019206:	e7c6      	b.n	8019196 <_printf_common+0x3e>
 8019208:	18e1      	adds	r1, r4, r3
 801920a:	1c5a      	adds	r2, r3, #1
 801920c:	2030      	movs	r0, #48	@ 0x30
 801920e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019212:	4422      	add	r2, r4
 8019214:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019218:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801921c:	3302      	adds	r3, #2
 801921e:	e7c7      	b.n	80191b0 <_printf_common+0x58>
 8019220:	2301      	movs	r3, #1
 8019222:	4622      	mov	r2, r4
 8019224:	4641      	mov	r1, r8
 8019226:	4638      	mov	r0, r7
 8019228:	47c8      	blx	r9
 801922a:	3001      	adds	r0, #1
 801922c:	d0e6      	beq.n	80191fc <_printf_common+0xa4>
 801922e:	3601      	adds	r6, #1
 8019230:	e7d9      	b.n	80191e6 <_printf_common+0x8e>
	...

08019234 <_printf_i>:
 8019234:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019238:	7e0f      	ldrb	r7, [r1, #24]
 801923a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801923c:	2f78      	cmp	r7, #120	@ 0x78
 801923e:	4691      	mov	r9, r2
 8019240:	4680      	mov	r8, r0
 8019242:	460c      	mov	r4, r1
 8019244:	469a      	mov	sl, r3
 8019246:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801924a:	d807      	bhi.n	801925c <_printf_i+0x28>
 801924c:	2f62      	cmp	r7, #98	@ 0x62
 801924e:	d80a      	bhi.n	8019266 <_printf_i+0x32>
 8019250:	2f00      	cmp	r7, #0
 8019252:	f000 80d1 	beq.w	80193f8 <_printf_i+0x1c4>
 8019256:	2f58      	cmp	r7, #88	@ 0x58
 8019258:	f000 80b8 	beq.w	80193cc <_printf_i+0x198>
 801925c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019260:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019264:	e03a      	b.n	80192dc <_printf_i+0xa8>
 8019266:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801926a:	2b15      	cmp	r3, #21
 801926c:	d8f6      	bhi.n	801925c <_printf_i+0x28>
 801926e:	a101      	add	r1, pc, #4	@ (adr r1, 8019274 <_printf_i+0x40>)
 8019270:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019274:	080192cd 	.word	0x080192cd
 8019278:	080192e1 	.word	0x080192e1
 801927c:	0801925d 	.word	0x0801925d
 8019280:	0801925d 	.word	0x0801925d
 8019284:	0801925d 	.word	0x0801925d
 8019288:	0801925d 	.word	0x0801925d
 801928c:	080192e1 	.word	0x080192e1
 8019290:	0801925d 	.word	0x0801925d
 8019294:	0801925d 	.word	0x0801925d
 8019298:	0801925d 	.word	0x0801925d
 801929c:	0801925d 	.word	0x0801925d
 80192a0:	080193df 	.word	0x080193df
 80192a4:	0801930b 	.word	0x0801930b
 80192a8:	08019399 	.word	0x08019399
 80192ac:	0801925d 	.word	0x0801925d
 80192b0:	0801925d 	.word	0x0801925d
 80192b4:	08019401 	.word	0x08019401
 80192b8:	0801925d 	.word	0x0801925d
 80192bc:	0801930b 	.word	0x0801930b
 80192c0:	0801925d 	.word	0x0801925d
 80192c4:	0801925d 	.word	0x0801925d
 80192c8:	080193a1 	.word	0x080193a1
 80192cc:	6833      	ldr	r3, [r6, #0]
 80192ce:	1d1a      	adds	r2, r3, #4
 80192d0:	681b      	ldr	r3, [r3, #0]
 80192d2:	6032      	str	r2, [r6, #0]
 80192d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80192d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80192dc:	2301      	movs	r3, #1
 80192de:	e09c      	b.n	801941a <_printf_i+0x1e6>
 80192e0:	6833      	ldr	r3, [r6, #0]
 80192e2:	6820      	ldr	r0, [r4, #0]
 80192e4:	1d19      	adds	r1, r3, #4
 80192e6:	6031      	str	r1, [r6, #0]
 80192e8:	0606      	lsls	r6, r0, #24
 80192ea:	d501      	bpl.n	80192f0 <_printf_i+0xbc>
 80192ec:	681d      	ldr	r5, [r3, #0]
 80192ee:	e003      	b.n	80192f8 <_printf_i+0xc4>
 80192f0:	0645      	lsls	r5, r0, #25
 80192f2:	d5fb      	bpl.n	80192ec <_printf_i+0xb8>
 80192f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80192f8:	2d00      	cmp	r5, #0
 80192fa:	da03      	bge.n	8019304 <_printf_i+0xd0>
 80192fc:	232d      	movs	r3, #45	@ 0x2d
 80192fe:	426d      	negs	r5, r5
 8019300:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019304:	4858      	ldr	r0, [pc, #352]	@ (8019468 <_printf_i+0x234>)
 8019306:	230a      	movs	r3, #10
 8019308:	e011      	b.n	801932e <_printf_i+0xfa>
 801930a:	6821      	ldr	r1, [r4, #0]
 801930c:	6833      	ldr	r3, [r6, #0]
 801930e:	0608      	lsls	r0, r1, #24
 8019310:	f853 5b04 	ldr.w	r5, [r3], #4
 8019314:	d402      	bmi.n	801931c <_printf_i+0xe8>
 8019316:	0649      	lsls	r1, r1, #25
 8019318:	bf48      	it	mi
 801931a:	b2ad      	uxthmi	r5, r5
 801931c:	2f6f      	cmp	r7, #111	@ 0x6f
 801931e:	4852      	ldr	r0, [pc, #328]	@ (8019468 <_printf_i+0x234>)
 8019320:	6033      	str	r3, [r6, #0]
 8019322:	bf14      	ite	ne
 8019324:	230a      	movne	r3, #10
 8019326:	2308      	moveq	r3, #8
 8019328:	2100      	movs	r1, #0
 801932a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801932e:	6866      	ldr	r6, [r4, #4]
 8019330:	60a6      	str	r6, [r4, #8]
 8019332:	2e00      	cmp	r6, #0
 8019334:	db05      	blt.n	8019342 <_printf_i+0x10e>
 8019336:	6821      	ldr	r1, [r4, #0]
 8019338:	432e      	orrs	r6, r5
 801933a:	f021 0104 	bic.w	r1, r1, #4
 801933e:	6021      	str	r1, [r4, #0]
 8019340:	d04b      	beq.n	80193da <_printf_i+0x1a6>
 8019342:	4616      	mov	r6, r2
 8019344:	fbb5 f1f3 	udiv	r1, r5, r3
 8019348:	fb03 5711 	mls	r7, r3, r1, r5
 801934c:	5dc7      	ldrb	r7, [r0, r7]
 801934e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019352:	462f      	mov	r7, r5
 8019354:	42bb      	cmp	r3, r7
 8019356:	460d      	mov	r5, r1
 8019358:	d9f4      	bls.n	8019344 <_printf_i+0x110>
 801935a:	2b08      	cmp	r3, #8
 801935c:	d10b      	bne.n	8019376 <_printf_i+0x142>
 801935e:	6823      	ldr	r3, [r4, #0]
 8019360:	07df      	lsls	r7, r3, #31
 8019362:	d508      	bpl.n	8019376 <_printf_i+0x142>
 8019364:	6923      	ldr	r3, [r4, #16]
 8019366:	6861      	ldr	r1, [r4, #4]
 8019368:	4299      	cmp	r1, r3
 801936a:	bfde      	ittt	le
 801936c:	2330      	movle	r3, #48	@ 0x30
 801936e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019372:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019376:	1b92      	subs	r2, r2, r6
 8019378:	6122      	str	r2, [r4, #16]
 801937a:	f8cd a000 	str.w	sl, [sp]
 801937e:	464b      	mov	r3, r9
 8019380:	aa03      	add	r2, sp, #12
 8019382:	4621      	mov	r1, r4
 8019384:	4640      	mov	r0, r8
 8019386:	f7ff fee7 	bl	8019158 <_printf_common>
 801938a:	3001      	adds	r0, #1
 801938c:	d14a      	bne.n	8019424 <_printf_i+0x1f0>
 801938e:	f04f 30ff 	mov.w	r0, #4294967295
 8019392:	b004      	add	sp, #16
 8019394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019398:	6823      	ldr	r3, [r4, #0]
 801939a:	f043 0320 	orr.w	r3, r3, #32
 801939e:	6023      	str	r3, [r4, #0]
 80193a0:	4832      	ldr	r0, [pc, #200]	@ (801946c <_printf_i+0x238>)
 80193a2:	2778      	movs	r7, #120	@ 0x78
 80193a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80193a8:	6823      	ldr	r3, [r4, #0]
 80193aa:	6831      	ldr	r1, [r6, #0]
 80193ac:	061f      	lsls	r7, r3, #24
 80193ae:	f851 5b04 	ldr.w	r5, [r1], #4
 80193b2:	d402      	bmi.n	80193ba <_printf_i+0x186>
 80193b4:	065f      	lsls	r7, r3, #25
 80193b6:	bf48      	it	mi
 80193b8:	b2ad      	uxthmi	r5, r5
 80193ba:	6031      	str	r1, [r6, #0]
 80193bc:	07d9      	lsls	r1, r3, #31
 80193be:	bf44      	itt	mi
 80193c0:	f043 0320 	orrmi.w	r3, r3, #32
 80193c4:	6023      	strmi	r3, [r4, #0]
 80193c6:	b11d      	cbz	r5, 80193d0 <_printf_i+0x19c>
 80193c8:	2310      	movs	r3, #16
 80193ca:	e7ad      	b.n	8019328 <_printf_i+0xf4>
 80193cc:	4826      	ldr	r0, [pc, #152]	@ (8019468 <_printf_i+0x234>)
 80193ce:	e7e9      	b.n	80193a4 <_printf_i+0x170>
 80193d0:	6823      	ldr	r3, [r4, #0]
 80193d2:	f023 0320 	bic.w	r3, r3, #32
 80193d6:	6023      	str	r3, [r4, #0]
 80193d8:	e7f6      	b.n	80193c8 <_printf_i+0x194>
 80193da:	4616      	mov	r6, r2
 80193dc:	e7bd      	b.n	801935a <_printf_i+0x126>
 80193de:	6833      	ldr	r3, [r6, #0]
 80193e0:	6825      	ldr	r5, [r4, #0]
 80193e2:	6961      	ldr	r1, [r4, #20]
 80193e4:	1d18      	adds	r0, r3, #4
 80193e6:	6030      	str	r0, [r6, #0]
 80193e8:	062e      	lsls	r6, r5, #24
 80193ea:	681b      	ldr	r3, [r3, #0]
 80193ec:	d501      	bpl.n	80193f2 <_printf_i+0x1be>
 80193ee:	6019      	str	r1, [r3, #0]
 80193f0:	e002      	b.n	80193f8 <_printf_i+0x1c4>
 80193f2:	0668      	lsls	r0, r5, #25
 80193f4:	d5fb      	bpl.n	80193ee <_printf_i+0x1ba>
 80193f6:	8019      	strh	r1, [r3, #0]
 80193f8:	2300      	movs	r3, #0
 80193fa:	6123      	str	r3, [r4, #16]
 80193fc:	4616      	mov	r6, r2
 80193fe:	e7bc      	b.n	801937a <_printf_i+0x146>
 8019400:	6833      	ldr	r3, [r6, #0]
 8019402:	1d1a      	adds	r2, r3, #4
 8019404:	6032      	str	r2, [r6, #0]
 8019406:	681e      	ldr	r6, [r3, #0]
 8019408:	6862      	ldr	r2, [r4, #4]
 801940a:	2100      	movs	r1, #0
 801940c:	4630      	mov	r0, r6
 801940e:	f7e6 feb7 	bl	8000180 <memchr>
 8019412:	b108      	cbz	r0, 8019418 <_printf_i+0x1e4>
 8019414:	1b80      	subs	r0, r0, r6
 8019416:	6060      	str	r0, [r4, #4]
 8019418:	6863      	ldr	r3, [r4, #4]
 801941a:	6123      	str	r3, [r4, #16]
 801941c:	2300      	movs	r3, #0
 801941e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019422:	e7aa      	b.n	801937a <_printf_i+0x146>
 8019424:	6923      	ldr	r3, [r4, #16]
 8019426:	4632      	mov	r2, r6
 8019428:	4649      	mov	r1, r9
 801942a:	4640      	mov	r0, r8
 801942c:	47d0      	blx	sl
 801942e:	3001      	adds	r0, #1
 8019430:	d0ad      	beq.n	801938e <_printf_i+0x15a>
 8019432:	6823      	ldr	r3, [r4, #0]
 8019434:	079b      	lsls	r3, r3, #30
 8019436:	d413      	bmi.n	8019460 <_printf_i+0x22c>
 8019438:	68e0      	ldr	r0, [r4, #12]
 801943a:	9b03      	ldr	r3, [sp, #12]
 801943c:	4298      	cmp	r0, r3
 801943e:	bfb8      	it	lt
 8019440:	4618      	movlt	r0, r3
 8019442:	e7a6      	b.n	8019392 <_printf_i+0x15e>
 8019444:	2301      	movs	r3, #1
 8019446:	4632      	mov	r2, r6
 8019448:	4649      	mov	r1, r9
 801944a:	4640      	mov	r0, r8
 801944c:	47d0      	blx	sl
 801944e:	3001      	adds	r0, #1
 8019450:	d09d      	beq.n	801938e <_printf_i+0x15a>
 8019452:	3501      	adds	r5, #1
 8019454:	68e3      	ldr	r3, [r4, #12]
 8019456:	9903      	ldr	r1, [sp, #12]
 8019458:	1a5b      	subs	r3, r3, r1
 801945a:	42ab      	cmp	r3, r5
 801945c:	dcf2      	bgt.n	8019444 <_printf_i+0x210>
 801945e:	e7eb      	b.n	8019438 <_printf_i+0x204>
 8019460:	2500      	movs	r5, #0
 8019462:	f104 0619 	add.w	r6, r4, #25
 8019466:	e7f5      	b.n	8019454 <_printf_i+0x220>
 8019468:	0801cc56 	.word	0x0801cc56
 801946c:	0801cc67 	.word	0x0801cc67

08019470 <std>:
 8019470:	2300      	movs	r3, #0
 8019472:	b510      	push	{r4, lr}
 8019474:	4604      	mov	r4, r0
 8019476:	e9c0 3300 	strd	r3, r3, [r0]
 801947a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801947e:	6083      	str	r3, [r0, #8]
 8019480:	8181      	strh	r1, [r0, #12]
 8019482:	6643      	str	r3, [r0, #100]	@ 0x64
 8019484:	81c2      	strh	r2, [r0, #14]
 8019486:	6183      	str	r3, [r0, #24]
 8019488:	4619      	mov	r1, r3
 801948a:	2208      	movs	r2, #8
 801948c:	305c      	adds	r0, #92	@ 0x5c
 801948e:	f000 f944 	bl	801971a <memset>
 8019492:	4b0d      	ldr	r3, [pc, #52]	@ (80194c8 <std+0x58>)
 8019494:	6263      	str	r3, [r4, #36]	@ 0x24
 8019496:	4b0d      	ldr	r3, [pc, #52]	@ (80194cc <std+0x5c>)
 8019498:	62a3      	str	r3, [r4, #40]	@ 0x28
 801949a:	4b0d      	ldr	r3, [pc, #52]	@ (80194d0 <std+0x60>)
 801949c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801949e:	4b0d      	ldr	r3, [pc, #52]	@ (80194d4 <std+0x64>)
 80194a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80194a2:	4b0d      	ldr	r3, [pc, #52]	@ (80194d8 <std+0x68>)
 80194a4:	6224      	str	r4, [r4, #32]
 80194a6:	429c      	cmp	r4, r3
 80194a8:	d006      	beq.n	80194b8 <std+0x48>
 80194aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80194ae:	4294      	cmp	r4, r2
 80194b0:	d002      	beq.n	80194b8 <std+0x48>
 80194b2:	33d0      	adds	r3, #208	@ 0xd0
 80194b4:	429c      	cmp	r4, r3
 80194b6:	d105      	bne.n	80194c4 <std+0x54>
 80194b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80194bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80194c0:	f000 b9fc 	b.w	80198bc <__retarget_lock_init_recursive>
 80194c4:	bd10      	pop	{r4, pc}
 80194c6:	bf00      	nop
 80194c8:	08019661 	.word	0x08019661
 80194cc:	08019683 	.word	0x08019683
 80194d0:	080196bb 	.word	0x080196bb
 80194d4:	080196df 	.word	0x080196df
 80194d8:	200025dc 	.word	0x200025dc

080194dc <stdio_exit_handler>:
 80194dc:	4a02      	ldr	r2, [pc, #8]	@ (80194e8 <stdio_exit_handler+0xc>)
 80194de:	4903      	ldr	r1, [pc, #12]	@ (80194ec <stdio_exit_handler+0x10>)
 80194e0:	4803      	ldr	r0, [pc, #12]	@ (80194f0 <stdio_exit_handler+0x14>)
 80194e2:	f000 b869 	b.w	80195b8 <_fwalk_sglue>
 80194e6:	bf00      	nop
 80194e8:	20000144 	.word	0x20000144
 80194ec:	0801b355 	.word	0x0801b355
 80194f0:	20000154 	.word	0x20000154

080194f4 <cleanup_stdio>:
 80194f4:	6841      	ldr	r1, [r0, #4]
 80194f6:	4b0c      	ldr	r3, [pc, #48]	@ (8019528 <cleanup_stdio+0x34>)
 80194f8:	4299      	cmp	r1, r3
 80194fa:	b510      	push	{r4, lr}
 80194fc:	4604      	mov	r4, r0
 80194fe:	d001      	beq.n	8019504 <cleanup_stdio+0x10>
 8019500:	f001 ff28 	bl	801b354 <_fflush_r>
 8019504:	68a1      	ldr	r1, [r4, #8]
 8019506:	4b09      	ldr	r3, [pc, #36]	@ (801952c <cleanup_stdio+0x38>)
 8019508:	4299      	cmp	r1, r3
 801950a:	d002      	beq.n	8019512 <cleanup_stdio+0x1e>
 801950c:	4620      	mov	r0, r4
 801950e:	f001 ff21 	bl	801b354 <_fflush_r>
 8019512:	68e1      	ldr	r1, [r4, #12]
 8019514:	4b06      	ldr	r3, [pc, #24]	@ (8019530 <cleanup_stdio+0x3c>)
 8019516:	4299      	cmp	r1, r3
 8019518:	d004      	beq.n	8019524 <cleanup_stdio+0x30>
 801951a:	4620      	mov	r0, r4
 801951c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019520:	f001 bf18 	b.w	801b354 <_fflush_r>
 8019524:	bd10      	pop	{r4, pc}
 8019526:	bf00      	nop
 8019528:	200025dc 	.word	0x200025dc
 801952c:	20002644 	.word	0x20002644
 8019530:	200026ac 	.word	0x200026ac

08019534 <global_stdio_init.part.0>:
 8019534:	b510      	push	{r4, lr}
 8019536:	4b0b      	ldr	r3, [pc, #44]	@ (8019564 <global_stdio_init.part.0+0x30>)
 8019538:	4c0b      	ldr	r4, [pc, #44]	@ (8019568 <global_stdio_init.part.0+0x34>)
 801953a:	4a0c      	ldr	r2, [pc, #48]	@ (801956c <global_stdio_init.part.0+0x38>)
 801953c:	601a      	str	r2, [r3, #0]
 801953e:	4620      	mov	r0, r4
 8019540:	2200      	movs	r2, #0
 8019542:	2104      	movs	r1, #4
 8019544:	f7ff ff94 	bl	8019470 <std>
 8019548:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801954c:	2201      	movs	r2, #1
 801954e:	2109      	movs	r1, #9
 8019550:	f7ff ff8e 	bl	8019470 <std>
 8019554:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8019558:	2202      	movs	r2, #2
 801955a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801955e:	2112      	movs	r1, #18
 8019560:	f7ff bf86 	b.w	8019470 <std>
 8019564:	20002714 	.word	0x20002714
 8019568:	200025dc 	.word	0x200025dc
 801956c:	080194dd 	.word	0x080194dd

08019570 <__sfp_lock_acquire>:
 8019570:	4801      	ldr	r0, [pc, #4]	@ (8019578 <__sfp_lock_acquire+0x8>)
 8019572:	f000 b9a4 	b.w	80198be <__retarget_lock_acquire_recursive>
 8019576:	bf00      	nop
 8019578:	2000271d 	.word	0x2000271d

0801957c <__sfp_lock_release>:
 801957c:	4801      	ldr	r0, [pc, #4]	@ (8019584 <__sfp_lock_release+0x8>)
 801957e:	f000 b99f 	b.w	80198c0 <__retarget_lock_release_recursive>
 8019582:	bf00      	nop
 8019584:	2000271d 	.word	0x2000271d

08019588 <__sinit>:
 8019588:	b510      	push	{r4, lr}
 801958a:	4604      	mov	r4, r0
 801958c:	f7ff fff0 	bl	8019570 <__sfp_lock_acquire>
 8019590:	6a23      	ldr	r3, [r4, #32]
 8019592:	b11b      	cbz	r3, 801959c <__sinit+0x14>
 8019594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019598:	f7ff bff0 	b.w	801957c <__sfp_lock_release>
 801959c:	4b04      	ldr	r3, [pc, #16]	@ (80195b0 <__sinit+0x28>)
 801959e:	6223      	str	r3, [r4, #32]
 80195a0:	4b04      	ldr	r3, [pc, #16]	@ (80195b4 <__sinit+0x2c>)
 80195a2:	681b      	ldr	r3, [r3, #0]
 80195a4:	2b00      	cmp	r3, #0
 80195a6:	d1f5      	bne.n	8019594 <__sinit+0xc>
 80195a8:	f7ff ffc4 	bl	8019534 <global_stdio_init.part.0>
 80195ac:	e7f2      	b.n	8019594 <__sinit+0xc>
 80195ae:	bf00      	nop
 80195b0:	080194f5 	.word	0x080194f5
 80195b4:	20002714 	.word	0x20002714

080195b8 <_fwalk_sglue>:
 80195b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80195bc:	4607      	mov	r7, r0
 80195be:	4688      	mov	r8, r1
 80195c0:	4614      	mov	r4, r2
 80195c2:	2600      	movs	r6, #0
 80195c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80195c8:	f1b9 0901 	subs.w	r9, r9, #1
 80195cc:	d505      	bpl.n	80195da <_fwalk_sglue+0x22>
 80195ce:	6824      	ldr	r4, [r4, #0]
 80195d0:	2c00      	cmp	r4, #0
 80195d2:	d1f7      	bne.n	80195c4 <_fwalk_sglue+0xc>
 80195d4:	4630      	mov	r0, r6
 80195d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80195da:	89ab      	ldrh	r3, [r5, #12]
 80195dc:	2b01      	cmp	r3, #1
 80195de:	d907      	bls.n	80195f0 <_fwalk_sglue+0x38>
 80195e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80195e4:	3301      	adds	r3, #1
 80195e6:	d003      	beq.n	80195f0 <_fwalk_sglue+0x38>
 80195e8:	4629      	mov	r1, r5
 80195ea:	4638      	mov	r0, r7
 80195ec:	47c0      	blx	r8
 80195ee:	4306      	orrs	r6, r0
 80195f0:	3568      	adds	r5, #104	@ 0x68
 80195f2:	e7e9      	b.n	80195c8 <_fwalk_sglue+0x10>

080195f4 <sniprintf>:
 80195f4:	b40c      	push	{r2, r3}
 80195f6:	b530      	push	{r4, r5, lr}
 80195f8:	4b18      	ldr	r3, [pc, #96]	@ (801965c <sniprintf+0x68>)
 80195fa:	1e0c      	subs	r4, r1, #0
 80195fc:	681d      	ldr	r5, [r3, #0]
 80195fe:	b09d      	sub	sp, #116	@ 0x74
 8019600:	da08      	bge.n	8019614 <sniprintf+0x20>
 8019602:	238b      	movs	r3, #139	@ 0x8b
 8019604:	602b      	str	r3, [r5, #0]
 8019606:	f04f 30ff 	mov.w	r0, #4294967295
 801960a:	b01d      	add	sp, #116	@ 0x74
 801960c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019610:	b002      	add	sp, #8
 8019612:	4770      	bx	lr
 8019614:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019618:	f8ad 3014 	strh.w	r3, [sp, #20]
 801961c:	f04f 0300 	mov.w	r3, #0
 8019620:	931b      	str	r3, [sp, #108]	@ 0x6c
 8019622:	bf14      	ite	ne
 8019624:	f104 33ff 	addne.w	r3, r4, #4294967295
 8019628:	4623      	moveq	r3, r4
 801962a:	9304      	str	r3, [sp, #16]
 801962c:	9307      	str	r3, [sp, #28]
 801962e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019632:	9002      	str	r0, [sp, #8]
 8019634:	9006      	str	r0, [sp, #24]
 8019636:	f8ad 3016 	strh.w	r3, [sp, #22]
 801963a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801963c:	ab21      	add	r3, sp, #132	@ 0x84
 801963e:	a902      	add	r1, sp, #8
 8019640:	4628      	mov	r0, r5
 8019642:	9301      	str	r3, [sp, #4]
 8019644:	f001 fbc4 	bl	801add0 <_svfiprintf_r>
 8019648:	1c43      	adds	r3, r0, #1
 801964a:	bfbc      	itt	lt
 801964c:	238b      	movlt	r3, #139	@ 0x8b
 801964e:	602b      	strlt	r3, [r5, #0]
 8019650:	2c00      	cmp	r4, #0
 8019652:	d0da      	beq.n	801960a <sniprintf+0x16>
 8019654:	9b02      	ldr	r3, [sp, #8]
 8019656:	2200      	movs	r2, #0
 8019658:	701a      	strb	r2, [r3, #0]
 801965a:	e7d6      	b.n	801960a <sniprintf+0x16>
 801965c:	20000150 	.word	0x20000150

08019660 <__sread>:
 8019660:	b510      	push	{r4, lr}
 8019662:	460c      	mov	r4, r1
 8019664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019668:	f000 f8b6 	bl	80197d8 <_read_r>
 801966c:	2800      	cmp	r0, #0
 801966e:	bfab      	itete	ge
 8019670:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8019672:	89a3      	ldrhlt	r3, [r4, #12]
 8019674:	181b      	addge	r3, r3, r0
 8019676:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801967a:	bfac      	ite	ge
 801967c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801967e:	81a3      	strhlt	r3, [r4, #12]
 8019680:	bd10      	pop	{r4, pc}

08019682 <__swrite>:
 8019682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019686:	461f      	mov	r7, r3
 8019688:	898b      	ldrh	r3, [r1, #12]
 801968a:	05db      	lsls	r3, r3, #23
 801968c:	4605      	mov	r5, r0
 801968e:	460c      	mov	r4, r1
 8019690:	4616      	mov	r6, r2
 8019692:	d505      	bpl.n	80196a0 <__swrite+0x1e>
 8019694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019698:	2302      	movs	r3, #2
 801969a:	2200      	movs	r2, #0
 801969c:	f000 f88a 	bl	80197b4 <_lseek_r>
 80196a0:	89a3      	ldrh	r3, [r4, #12]
 80196a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80196a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80196aa:	81a3      	strh	r3, [r4, #12]
 80196ac:	4632      	mov	r2, r6
 80196ae:	463b      	mov	r3, r7
 80196b0:	4628      	mov	r0, r5
 80196b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80196b6:	f000 b8c5 	b.w	8019844 <_write_r>

080196ba <__sseek>:
 80196ba:	b510      	push	{r4, lr}
 80196bc:	460c      	mov	r4, r1
 80196be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80196c2:	f000 f877 	bl	80197b4 <_lseek_r>
 80196c6:	1c43      	adds	r3, r0, #1
 80196c8:	89a3      	ldrh	r3, [r4, #12]
 80196ca:	bf15      	itete	ne
 80196cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80196ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80196d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80196d6:	81a3      	strheq	r3, [r4, #12]
 80196d8:	bf18      	it	ne
 80196da:	81a3      	strhne	r3, [r4, #12]
 80196dc:	bd10      	pop	{r4, pc}

080196de <__sclose>:
 80196de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80196e2:	f000 b857 	b.w	8019794 <_close_r>

080196e6 <memmove>:
 80196e6:	4288      	cmp	r0, r1
 80196e8:	b510      	push	{r4, lr}
 80196ea:	eb01 0402 	add.w	r4, r1, r2
 80196ee:	d902      	bls.n	80196f6 <memmove+0x10>
 80196f0:	4284      	cmp	r4, r0
 80196f2:	4623      	mov	r3, r4
 80196f4:	d807      	bhi.n	8019706 <memmove+0x20>
 80196f6:	1e43      	subs	r3, r0, #1
 80196f8:	42a1      	cmp	r1, r4
 80196fa:	d008      	beq.n	801970e <memmove+0x28>
 80196fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019700:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019704:	e7f8      	b.n	80196f8 <memmove+0x12>
 8019706:	4402      	add	r2, r0
 8019708:	4601      	mov	r1, r0
 801970a:	428a      	cmp	r2, r1
 801970c:	d100      	bne.n	8019710 <memmove+0x2a>
 801970e:	bd10      	pop	{r4, pc}
 8019710:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019714:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019718:	e7f7      	b.n	801970a <memmove+0x24>

0801971a <memset>:
 801971a:	4402      	add	r2, r0
 801971c:	4603      	mov	r3, r0
 801971e:	4293      	cmp	r3, r2
 8019720:	d100      	bne.n	8019724 <memset+0xa>
 8019722:	4770      	bx	lr
 8019724:	f803 1b01 	strb.w	r1, [r3], #1
 8019728:	e7f9      	b.n	801971e <memset+0x4>

0801972a <_raise_r>:
 801972a:	291f      	cmp	r1, #31
 801972c:	b538      	push	{r3, r4, r5, lr}
 801972e:	4605      	mov	r5, r0
 8019730:	460c      	mov	r4, r1
 8019732:	d904      	bls.n	801973e <_raise_r+0x14>
 8019734:	2316      	movs	r3, #22
 8019736:	6003      	str	r3, [r0, #0]
 8019738:	f04f 30ff 	mov.w	r0, #4294967295
 801973c:	bd38      	pop	{r3, r4, r5, pc}
 801973e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019740:	b112      	cbz	r2, 8019748 <_raise_r+0x1e>
 8019742:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019746:	b94b      	cbnz	r3, 801975c <_raise_r+0x32>
 8019748:	4628      	mov	r0, r5
 801974a:	f000 f869 	bl	8019820 <_getpid_r>
 801974e:	4622      	mov	r2, r4
 8019750:	4601      	mov	r1, r0
 8019752:	4628      	mov	r0, r5
 8019754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019758:	f000 b850 	b.w	80197fc <_kill_r>
 801975c:	2b01      	cmp	r3, #1
 801975e:	d00a      	beq.n	8019776 <_raise_r+0x4c>
 8019760:	1c59      	adds	r1, r3, #1
 8019762:	d103      	bne.n	801976c <_raise_r+0x42>
 8019764:	2316      	movs	r3, #22
 8019766:	6003      	str	r3, [r0, #0]
 8019768:	2001      	movs	r0, #1
 801976a:	e7e7      	b.n	801973c <_raise_r+0x12>
 801976c:	2100      	movs	r1, #0
 801976e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019772:	4620      	mov	r0, r4
 8019774:	4798      	blx	r3
 8019776:	2000      	movs	r0, #0
 8019778:	e7e0      	b.n	801973c <_raise_r+0x12>
	...

0801977c <raise>:
 801977c:	4b02      	ldr	r3, [pc, #8]	@ (8019788 <raise+0xc>)
 801977e:	4601      	mov	r1, r0
 8019780:	6818      	ldr	r0, [r3, #0]
 8019782:	f7ff bfd2 	b.w	801972a <_raise_r>
 8019786:	bf00      	nop
 8019788:	20000150 	.word	0x20000150

0801978c <_localeconv_r>:
 801978c:	4800      	ldr	r0, [pc, #0]	@ (8019790 <_localeconv_r+0x4>)
 801978e:	4770      	bx	lr
 8019790:	20000290 	.word	0x20000290

08019794 <_close_r>:
 8019794:	b538      	push	{r3, r4, r5, lr}
 8019796:	4d06      	ldr	r5, [pc, #24]	@ (80197b0 <_close_r+0x1c>)
 8019798:	2300      	movs	r3, #0
 801979a:	4604      	mov	r4, r0
 801979c:	4608      	mov	r0, r1
 801979e:	602b      	str	r3, [r5, #0]
 80197a0:	f7ed f9a0 	bl	8006ae4 <_close>
 80197a4:	1c43      	adds	r3, r0, #1
 80197a6:	d102      	bne.n	80197ae <_close_r+0x1a>
 80197a8:	682b      	ldr	r3, [r5, #0]
 80197aa:	b103      	cbz	r3, 80197ae <_close_r+0x1a>
 80197ac:	6023      	str	r3, [r4, #0]
 80197ae:	bd38      	pop	{r3, r4, r5, pc}
 80197b0:	20002718 	.word	0x20002718

080197b4 <_lseek_r>:
 80197b4:	b538      	push	{r3, r4, r5, lr}
 80197b6:	4d07      	ldr	r5, [pc, #28]	@ (80197d4 <_lseek_r+0x20>)
 80197b8:	4604      	mov	r4, r0
 80197ba:	4608      	mov	r0, r1
 80197bc:	4611      	mov	r1, r2
 80197be:	2200      	movs	r2, #0
 80197c0:	602a      	str	r2, [r5, #0]
 80197c2:	461a      	mov	r2, r3
 80197c4:	f7ed f9b5 	bl	8006b32 <_lseek>
 80197c8:	1c43      	adds	r3, r0, #1
 80197ca:	d102      	bne.n	80197d2 <_lseek_r+0x1e>
 80197cc:	682b      	ldr	r3, [r5, #0]
 80197ce:	b103      	cbz	r3, 80197d2 <_lseek_r+0x1e>
 80197d0:	6023      	str	r3, [r4, #0]
 80197d2:	bd38      	pop	{r3, r4, r5, pc}
 80197d4:	20002718 	.word	0x20002718

080197d8 <_read_r>:
 80197d8:	b538      	push	{r3, r4, r5, lr}
 80197da:	4d07      	ldr	r5, [pc, #28]	@ (80197f8 <_read_r+0x20>)
 80197dc:	4604      	mov	r4, r0
 80197de:	4608      	mov	r0, r1
 80197e0:	4611      	mov	r1, r2
 80197e2:	2200      	movs	r2, #0
 80197e4:	602a      	str	r2, [r5, #0]
 80197e6:	461a      	mov	r2, r3
 80197e8:	f7ed f943 	bl	8006a72 <_read>
 80197ec:	1c43      	adds	r3, r0, #1
 80197ee:	d102      	bne.n	80197f6 <_read_r+0x1e>
 80197f0:	682b      	ldr	r3, [r5, #0]
 80197f2:	b103      	cbz	r3, 80197f6 <_read_r+0x1e>
 80197f4:	6023      	str	r3, [r4, #0]
 80197f6:	bd38      	pop	{r3, r4, r5, pc}
 80197f8:	20002718 	.word	0x20002718

080197fc <_kill_r>:
 80197fc:	b538      	push	{r3, r4, r5, lr}
 80197fe:	4d07      	ldr	r5, [pc, #28]	@ (801981c <_kill_r+0x20>)
 8019800:	2300      	movs	r3, #0
 8019802:	4604      	mov	r4, r0
 8019804:	4608      	mov	r0, r1
 8019806:	4611      	mov	r1, r2
 8019808:	602b      	str	r3, [r5, #0]
 801980a:	f7ed f917 	bl	8006a3c <_kill>
 801980e:	1c43      	adds	r3, r0, #1
 8019810:	d102      	bne.n	8019818 <_kill_r+0x1c>
 8019812:	682b      	ldr	r3, [r5, #0]
 8019814:	b103      	cbz	r3, 8019818 <_kill_r+0x1c>
 8019816:	6023      	str	r3, [r4, #0]
 8019818:	bd38      	pop	{r3, r4, r5, pc}
 801981a:	bf00      	nop
 801981c:	20002718 	.word	0x20002718

08019820 <_getpid_r>:
 8019820:	f7ed b904 	b.w	8006a2c <_getpid>

08019824 <_sbrk_r>:
 8019824:	b538      	push	{r3, r4, r5, lr}
 8019826:	4d06      	ldr	r5, [pc, #24]	@ (8019840 <_sbrk_r+0x1c>)
 8019828:	2300      	movs	r3, #0
 801982a:	4604      	mov	r4, r0
 801982c:	4608      	mov	r0, r1
 801982e:	602b      	str	r3, [r5, #0]
 8019830:	f7ed f98c 	bl	8006b4c <_sbrk>
 8019834:	1c43      	adds	r3, r0, #1
 8019836:	d102      	bne.n	801983e <_sbrk_r+0x1a>
 8019838:	682b      	ldr	r3, [r5, #0]
 801983a:	b103      	cbz	r3, 801983e <_sbrk_r+0x1a>
 801983c:	6023      	str	r3, [r4, #0]
 801983e:	bd38      	pop	{r3, r4, r5, pc}
 8019840:	20002718 	.word	0x20002718

08019844 <_write_r>:
 8019844:	b538      	push	{r3, r4, r5, lr}
 8019846:	4d07      	ldr	r5, [pc, #28]	@ (8019864 <_write_r+0x20>)
 8019848:	4604      	mov	r4, r0
 801984a:	4608      	mov	r0, r1
 801984c:	4611      	mov	r1, r2
 801984e:	2200      	movs	r2, #0
 8019850:	602a      	str	r2, [r5, #0]
 8019852:	461a      	mov	r2, r3
 8019854:	f7ed f92a 	bl	8006aac <_write>
 8019858:	1c43      	adds	r3, r0, #1
 801985a:	d102      	bne.n	8019862 <_write_r+0x1e>
 801985c:	682b      	ldr	r3, [r5, #0]
 801985e:	b103      	cbz	r3, 8019862 <_write_r+0x1e>
 8019860:	6023      	str	r3, [r4, #0]
 8019862:	bd38      	pop	{r3, r4, r5, pc}
 8019864:	20002718 	.word	0x20002718

08019868 <__errno>:
 8019868:	4b01      	ldr	r3, [pc, #4]	@ (8019870 <__errno+0x8>)
 801986a:	6818      	ldr	r0, [r3, #0]
 801986c:	4770      	bx	lr
 801986e:	bf00      	nop
 8019870:	20000150 	.word	0x20000150

08019874 <__libc_init_array>:
 8019874:	b570      	push	{r4, r5, r6, lr}
 8019876:	4d0d      	ldr	r5, [pc, #52]	@ (80198ac <__libc_init_array+0x38>)
 8019878:	4c0d      	ldr	r4, [pc, #52]	@ (80198b0 <__libc_init_array+0x3c>)
 801987a:	1b64      	subs	r4, r4, r5
 801987c:	10a4      	asrs	r4, r4, #2
 801987e:	2600      	movs	r6, #0
 8019880:	42a6      	cmp	r6, r4
 8019882:	d109      	bne.n	8019898 <__libc_init_array+0x24>
 8019884:	4d0b      	ldr	r5, [pc, #44]	@ (80198b4 <__libc_init_array+0x40>)
 8019886:	4c0c      	ldr	r4, [pc, #48]	@ (80198b8 <__libc_init_array+0x44>)
 8019888:	f001 ff3e 	bl	801b708 <_init>
 801988c:	1b64      	subs	r4, r4, r5
 801988e:	10a4      	asrs	r4, r4, #2
 8019890:	2600      	movs	r6, #0
 8019892:	42a6      	cmp	r6, r4
 8019894:	d105      	bne.n	80198a2 <__libc_init_array+0x2e>
 8019896:	bd70      	pop	{r4, r5, r6, pc}
 8019898:	f855 3b04 	ldr.w	r3, [r5], #4
 801989c:	4798      	blx	r3
 801989e:	3601      	adds	r6, #1
 80198a0:	e7ee      	b.n	8019880 <__libc_init_array+0xc>
 80198a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80198a6:	4798      	blx	r3
 80198a8:	3601      	adds	r6, #1
 80198aa:	e7f2      	b.n	8019892 <__libc_init_array+0x1e>
 80198ac:	0801cfc4 	.word	0x0801cfc4
 80198b0:	0801cfc4 	.word	0x0801cfc4
 80198b4:	0801cfc4 	.word	0x0801cfc4
 80198b8:	0801cfcc 	.word	0x0801cfcc

080198bc <__retarget_lock_init_recursive>:
 80198bc:	4770      	bx	lr

080198be <__retarget_lock_acquire_recursive>:
 80198be:	4770      	bx	lr

080198c0 <__retarget_lock_release_recursive>:
 80198c0:	4770      	bx	lr

080198c2 <memcpy>:
 80198c2:	440a      	add	r2, r1
 80198c4:	4291      	cmp	r1, r2
 80198c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80198ca:	d100      	bne.n	80198ce <memcpy+0xc>
 80198cc:	4770      	bx	lr
 80198ce:	b510      	push	{r4, lr}
 80198d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80198d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80198d8:	4291      	cmp	r1, r2
 80198da:	d1f9      	bne.n	80198d0 <memcpy+0xe>
 80198dc:	bd10      	pop	{r4, pc}

080198de <quorem>:
 80198de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198e2:	6903      	ldr	r3, [r0, #16]
 80198e4:	690c      	ldr	r4, [r1, #16]
 80198e6:	42a3      	cmp	r3, r4
 80198e8:	4607      	mov	r7, r0
 80198ea:	db7e      	blt.n	80199ea <quorem+0x10c>
 80198ec:	3c01      	subs	r4, #1
 80198ee:	f101 0814 	add.w	r8, r1, #20
 80198f2:	00a3      	lsls	r3, r4, #2
 80198f4:	f100 0514 	add.w	r5, r0, #20
 80198f8:	9300      	str	r3, [sp, #0]
 80198fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80198fe:	9301      	str	r3, [sp, #4]
 8019900:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8019904:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019908:	3301      	adds	r3, #1
 801990a:	429a      	cmp	r2, r3
 801990c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8019910:	fbb2 f6f3 	udiv	r6, r2, r3
 8019914:	d32e      	bcc.n	8019974 <quorem+0x96>
 8019916:	f04f 0a00 	mov.w	sl, #0
 801991a:	46c4      	mov	ip, r8
 801991c:	46ae      	mov	lr, r5
 801991e:	46d3      	mov	fp, sl
 8019920:	f85c 3b04 	ldr.w	r3, [ip], #4
 8019924:	b298      	uxth	r0, r3
 8019926:	fb06 a000 	mla	r0, r6, r0, sl
 801992a:	0c02      	lsrs	r2, r0, #16
 801992c:	0c1b      	lsrs	r3, r3, #16
 801992e:	fb06 2303 	mla	r3, r6, r3, r2
 8019932:	f8de 2000 	ldr.w	r2, [lr]
 8019936:	b280      	uxth	r0, r0
 8019938:	b292      	uxth	r2, r2
 801993a:	1a12      	subs	r2, r2, r0
 801993c:	445a      	add	r2, fp
 801993e:	f8de 0000 	ldr.w	r0, [lr]
 8019942:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8019946:	b29b      	uxth	r3, r3
 8019948:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801994c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8019950:	b292      	uxth	r2, r2
 8019952:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8019956:	45e1      	cmp	r9, ip
 8019958:	f84e 2b04 	str.w	r2, [lr], #4
 801995c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8019960:	d2de      	bcs.n	8019920 <quorem+0x42>
 8019962:	9b00      	ldr	r3, [sp, #0]
 8019964:	58eb      	ldr	r3, [r5, r3]
 8019966:	b92b      	cbnz	r3, 8019974 <quorem+0x96>
 8019968:	9b01      	ldr	r3, [sp, #4]
 801996a:	3b04      	subs	r3, #4
 801996c:	429d      	cmp	r5, r3
 801996e:	461a      	mov	r2, r3
 8019970:	d32f      	bcc.n	80199d2 <quorem+0xf4>
 8019972:	613c      	str	r4, [r7, #16]
 8019974:	4638      	mov	r0, r7
 8019976:	f001 f8c7 	bl	801ab08 <__mcmp>
 801997a:	2800      	cmp	r0, #0
 801997c:	db25      	blt.n	80199ca <quorem+0xec>
 801997e:	4629      	mov	r1, r5
 8019980:	2000      	movs	r0, #0
 8019982:	f858 2b04 	ldr.w	r2, [r8], #4
 8019986:	f8d1 c000 	ldr.w	ip, [r1]
 801998a:	fa1f fe82 	uxth.w	lr, r2
 801998e:	fa1f f38c 	uxth.w	r3, ip
 8019992:	eba3 030e 	sub.w	r3, r3, lr
 8019996:	4403      	add	r3, r0
 8019998:	0c12      	lsrs	r2, r2, #16
 801999a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801999e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80199a2:	b29b      	uxth	r3, r3
 80199a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80199a8:	45c1      	cmp	r9, r8
 80199aa:	f841 3b04 	str.w	r3, [r1], #4
 80199ae:	ea4f 4022 	mov.w	r0, r2, asr #16
 80199b2:	d2e6      	bcs.n	8019982 <quorem+0xa4>
 80199b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80199b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80199bc:	b922      	cbnz	r2, 80199c8 <quorem+0xea>
 80199be:	3b04      	subs	r3, #4
 80199c0:	429d      	cmp	r5, r3
 80199c2:	461a      	mov	r2, r3
 80199c4:	d30b      	bcc.n	80199de <quorem+0x100>
 80199c6:	613c      	str	r4, [r7, #16]
 80199c8:	3601      	adds	r6, #1
 80199ca:	4630      	mov	r0, r6
 80199cc:	b003      	add	sp, #12
 80199ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199d2:	6812      	ldr	r2, [r2, #0]
 80199d4:	3b04      	subs	r3, #4
 80199d6:	2a00      	cmp	r2, #0
 80199d8:	d1cb      	bne.n	8019972 <quorem+0x94>
 80199da:	3c01      	subs	r4, #1
 80199dc:	e7c6      	b.n	801996c <quorem+0x8e>
 80199de:	6812      	ldr	r2, [r2, #0]
 80199e0:	3b04      	subs	r3, #4
 80199e2:	2a00      	cmp	r2, #0
 80199e4:	d1ef      	bne.n	80199c6 <quorem+0xe8>
 80199e6:	3c01      	subs	r4, #1
 80199e8:	e7ea      	b.n	80199c0 <quorem+0xe2>
 80199ea:	2000      	movs	r0, #0
 80199ec:	e7ee      	b.n	80199cc <quorem+0xee>
	...

080199f0 <_dtoa_r>:
 80199f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199f4:	69c7      	ldr	r7, [r0, #28]
 80199f6:	b097      	sub	sp, #92	@ 0x5c
 80199f8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80199fc:	ec55 4b10 	vmov	r4, r5, d0
 8019a00:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8019a02:	9107      	str	r1, [sp, #28]
 8019a04:	4681      	mov	r9, r0
 8019a06:	920c      	str	r2, [sp, #48]	@ 0x30
 8019a08:	9311      	str	r3, [sp, #68]	@ 0x44
 8019a0a:	b97f      	cbnz	r7, 8019a2c <_dtoa_r+0x3c>
 8019a0c:	2010      	movs	r0, #16
 8019a0e:	f7ff f81b 	bl	8018a48 <malloc>
 8019a12:	4602      	mov	r2, r0
 8019a14:	f8c9 001c 	str.w	r0, [r9, #28]
 8019a18:	b920      	cbnz	r0, 8019a24 <_dtoa_r+0x34>
 8019a1a:	4ba9      	ldr	r3, [pc, #676]	@ (8019cc0 <_dtoa_r+0x2d0>)
 8019a1c:	21ef      	movs	r1, #239	@ 0xef
 8019a1e:	48a9      	ldr	r0, [pc, #676]	@ (8019cc4 <_dtoa_r+0x2d4>)
 8019a20:	f001 fd54 	bl	801b4cc <__assert_func>
 8019a24:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8019a28:	6007      	str	r7, [r0, #0]
 8019a2a:	60c7      	str	r7, [r0, #12]
 8019a2c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8019a30:	6819      	ldr	r1, [r3, #0]
 8019a32:	b159      	cbz	r1, 8019a4c <_dtoa_r+0x5c>
 8019a34:	685a      	ldr	r2, [r3, #4]
 8019a36:	604a      	str	r2, [r1, #4]
 8019a38:	2301      	movs	r3, #1
 8019a3a:	4093      	lsls	r3, r2
 8019a3c:	608b      	str	r3, [r1, #8]
 8019a3e:	4648      	mov	r0, r9
 8019a40:	f000 fe30 	bl	801a6a4 <_Bfree>
 8019a44:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8019a48:	2200      	movs	r2, #0
 8019a4a:	601a      	str	r2, [r3, #0]
 8019a4c:	1e2b      	subs	r3, r5, #0
 8019a4e:	bfb9      	ittee	lt
 8019a50:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8019a54:	9305      	strlt	r3, [sp, #20]
 8019a56:	2300      	movge	r3, #0
 8019a58:	6033      	strge	r3, [r6, #0]
 8019a5a:	9f05      	ldr	r7, [sp, #20]
 8019a5c:	4b9a      	ldr	r3, [pc, #616]	@ (8019cc8 <_dtoa_r+0x2d8>)
 8019a5e:	bfbc      	itt	lt
 8019a60:	2201      	movlt	r2, #1
 8019a62:	6032      	strlt	r2, [r6, #0]
 8019a64:	43bb      	bics	r3, r7
 8019a66:	d112      	bne.n	8019a8e <_dtoa_r+0x9e>
 8019a68:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019a6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8019a6e:	6013      	str	r3, [r2, #0]
 8019a70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019a74:	4323      	orrs	r3, r4
 8019a76:	f000 855a 	beq.w	801a52e <_dtoa_r+0xb3e>
 8019a7a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8019a7c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8019cdc <_dtoa_r+0x2ec>
 8019a80:	2b00      	cmp	r3, #0
 8019a82:	f000 855c 	beq.w	801a53e <_dtoa_r+0xb4e>
 8019a86:	f10a 0303 	add.w	r3, sl, #3
 8019a8a:	f000 bd56 	b.w	801a53a <_dtoa_r+0xb4a>
 8019a8e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8019a92:	2200      	movs	r2, #0
 8019a94:	ec51 0b17 	vmov	r0, r1, d7
 8019a98:	2300      	movs	r3, #0
 8019a9a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8019a9e:	f7e6 ffeb 	bl	8000a78 <__aeabi_dcmpeq>
 8019aa2:	4680      	mov	r8, r0
 8019aa4:	b158      	cbz	r0, 8019abe <_dtoa_r+0xce>
 8019aa6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019aa8:	2301      	movs	r3, #1
 8019aaa:	6013      	str	r3, [r2, #0]
 8019aac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8019aae:	b113      	cbz	r3, 8019ab6 <_dtoa_r+0xc6>
 8019ab0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8019ab2:	4b86      	ldr	r3, [pc, #536]	@ (8019ccc <_dtoa_r+0x2dc>)
 8019ab4:	6013      	str	r3, [r2, #0]
 8019ab6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8019ce0 <_dtoa_r+0x2f0>
 8019aba:	f000 bd40 	b.w	801a53e <_dtoa_r+0xb4e>
 8019abe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8019ac2:	aa14      	add	r2, sp, #80	@ 0x50
 8019ac4:	a915      	add	r1, sp, #84	@ 0x54
 8019ac6:	4648      	mov	r0, r9
 8019ac8:	f001 f8ce 	bl	801ac68 <__d2b>
 8019acc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8019ad0:	9002      	str	r0, [sp, #8]
 8019ad2:	2e00      	cmp	r6, #0
 8019ad4:	d078      	beq.n	8019bc8 <_dtoa_r+0x1d8>
 8019ad6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019ad8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8019adc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019ae0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8019ae4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8019ae8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8019aec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8019af0:	4619      	mov	r1, r3
 8019af2:	2200      	movs	r2, #0
 8019af4:	4b76      	ldr	r3, [pc, #472]	@ (8019cd0 <_dtoa_r+0x2e0>)
 8019af6:	f7e6 fb9f 	bl	8000238 <__aeabi_dsub>
 8019afa:	a36b      	add	r3, pc, #428	@ (adr r3, 8019ca8 <_dtoa_r+0x2b8>)
 8019afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b00:	f7e6 fd52 	bl	80005a8 <__aeabi_dmul>
 8019b04:	a36a      	add	r3, pc, #424	@ (adr r3, 8019cb0 <_dtoa_r+0x2c0>)
 8019b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b0a:	f7e6 fb97 	bl	800023c <__adddf3>
 8019b0e:	4604      	mov	r4, r0
 8019b10:	4630      	mov	r0, r6
 8019b12:	460d      	mov	r5, r1
 8019b14:	f7e6 fcde 	bl	80004d4 <__aeabi_i2d>
 8019b18:	a367      	add	r3, pc, #412	@ (adr r3, 8019cb8 <_dtoa_r+0x2c8>)
 8019b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b1e:	f7e6 fd43 	bl	80005a8 <__aeabi_dmul>
 8019b22:	4602      	mov	r2, r0
 8019b24:	460b      	mov	r3, r1
 8019b26:	4620      	mov	r0, r4
 8019b28:	4629      	mov	r1, r5
 8019b2a:	f7e6 fb87 	bl	800023c <__adddf3>
 8019b2e:	4604      	mov	r4, r0
 8019b30:	460d      	mov	r5, r1
 8019b32:	f7e6 ffe9 	bl	8000b08 <__aeabi_d2iz>
 8019b36:	2200      	movs	r2, #0
 8019b38:	4607      	mov	r7, r0
 8019b3a:	2300      	movs	r3, #0
 8019b3c:	4620      	mov	r0, r4
 8019b3e:	4629      	mov	r1, r5
 8019b40:	f7e6 ffa4 	bl	8000a8c <__aeabi_dcmplt>
 8019b44:	b140      	cbz	r0, 8019b58 <_dtoa_r+0x168>
 8019b46:	4638      	mov	r0, r7
 8019b48:	f7e6 fcc4 	bl	80004d4 <__aeabi_i2d>
 8019b4c:	4622      	mov	r2, r4
 8019b4e:	462b      	mov	r3, r5
 8019b50:	f7e6 ff92 	bl	8000a78 <__aeabi_dcmpeq>
 8019b54:	b900      	cbnz	r0, 8019b58 <_dtoa_r+0x168>
 8019b56:	3f01      	subs	r7, #1
 8019b58:	2f16      	cmp	r7, #22
 8019b5a:	d852      	bhi.n	8019c02 <_dtoa_r+0x212>
 8019b5c:	4b5d      	ldr	r3, [pc, #372]	@ (8019cd4 <_dtoa_r+0x2e4>)
 8019b5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8019b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8019b6a:	f7e6 ff8f 	bl	8000a8c <__aeabi_dcmplt>
 8019b6e:	2800      	cmp	r0, #0
 8019b70:	d049      	beq.n	8019c06 <_dtoa_r+0x216>
 8019b72:	3f01      	subs	r7, #1
 8019b74:	2300      	movs	r3, #0
 8019b76:	9310      	str	r3, [sp, #64]	@ 0x40
 8019b78:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8019b7a:	1b9b      	subs	r3, r3, r6
 8019b7c:	1e5a      	subs	r2, r3, #1
 8019b7e:	bf45      	ittet	mi
 8019b80:	f1c3 0301 	rsbmi	r3, r3, #1
 8019b84:	9300      	strmi	r3, [sp, #0]
 8019b86:	2300      	movpl	r3, #0
 8019b88:	2300      	movmi	r3, #0
 8019b8a:	9206      	str	r2, [sp, #24]
 8019b8c:	bf54      	ite	pl
 8019b8e:	9300      	strpl	r3, [sp, #0]
 8019b90:	9306      	strmi	r3, [sp, #24]
 8019b92:	2f00      	cmp	r7, #0
 8019b94:	db39      	blt.n	8019c0a <_dtoa_r+0x21a>
 8019b96:	9b06      	ldr	r3, [sp, #24]
 8019b98:	970d      	str	r7, [sp, #52]	@ 0x34
 8019b9a:	443b      	add	r3, r7
 8019b9c:	9306      	str	r3, [sp, #24]
 8019b9e:	2300      	movs	r3, #0
 8019ba0:	9308      	str	r3, [sp, #32]
 8019ba2:	9b07      	ldr	r3, [sp, #28]
 8019ba4:	2b09      	cmp	r3, #9
 8019ba6:	d863      	bhi.n	8019c70 <_dtoa_r+0x280>
 8019ba8:	2b05      	cmp	r3, #5
 8019baa:	bfc4      	itt	gt
 8019bac:	3b04      	subgt	r3, #4
 8019bae:	9307      	strgt	r3, [sp, #28]
 8019bb0:	9b07      	ldr	r3, [sp, #28]
 8019bb2:	f1a3 0302 	sub.w	r3, r3, #2
 8019bb6:	bfcc      	ite	gt
 8019bb8:	2400      	movgt	r4, #0
 8019bba:	2401      	movle	r4, #1
 8019bbc:	2b03      	cmp	r3, #3
 8019bbe:	d863      	bhi.n	8019c88 <_dtoa_r+0x298>
 8019bc0:	e8df f003 	tbb	[pc, r3]
 8019bc4:	2b375452 	.word	0x2b375452
 8019bc8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8019bcc:	441e      	add	r6, r3
 8019bce:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8019bd2:	2b20      	cmp	r3, #32
 8019bd4:	bfc1      	itttt	gt
 8019bd6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8019bda:	409f      	lslgt	r7, r3
 8019bdc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8019be0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8019be4:	bfd6      	itet	le
 8019be6:	f1c3 0320 	rsble	r3, r3, #32
 8019bea:	ea47 0003 	orrgt.w	r0, r7, r3
 8019bee:	fa04 f003 	lslle.w	r0, r4, r3
 8019bf2:	f7e6 fc5f 	bl	80004b4 <__aeabi_ui2d>
 8019bf6:	2201      	movs	r2, #1
 8019bf8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8019bfc:	3e01      	subs	r6, #1
 8019bfe:	9212      	str	r2, [sp, #72]	@ 0x48
 8019c00:	e776      	b.n	8019af0 <_dtoa_r+0x100>
 8019c02:	2301      	movs	r3, #1
 8019c04:	e7b7      	b.n	8019b76 <_dtoa_r+0x186>
 8019c06:	9010      	str	r0, [sp, #64]	@ 0x40
 8019c08:	e7b6      	b.n	8019b78 <_dtoa_r+0x188>
 8019c0a:	9b00      	ldr	r3, [sp, #0]
 8019c0c:	1bdb      	subs	r3, r3, r7
 8019c0e:	9300      	str	r3, [sp, #0]
 8019c10:	427b      	negs	r3, r7
 8019c12:	9308      	str	r3, [sp, #32]
 8019c14:	2300      	movs	r3, #0
 8019c16:	930d      	str	r3, [sp, #52]	@ 0x34
 8019c18:	e7c3      	b.n	8019ba2 <_dtoa_r+0x1b2>
 8019c1a:	2301      	movs	r3, #1
 8019c1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8019c1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019c20:	eb07 0b03 	add.w	fp, r7, r3
 8019c24:	f10b 0301 	add.w	r3, fp, #1
 8019c28:	2b01      	cmp	r3, #1
 8019c2a:	9303      	str	r3, [sp, #12]
 8019c2c:	bfb8      	it	lt
 8019c2e:	2301      	movlt	r3, #1
 8019c30:	e006      	b.n	8019c40 <_dtoa_r+0x250>
 8019c32:	2301      	movs	r3, #1
 8019c34:	9309      	str	r3, [sp, #36]	@ 0x24
 8019c36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	dd28      	ble.n	8019c8e <_dtoa_r+0x29e>
 8019c3c:	469b      	mov	fp, r3
 8019c3e:	9303      	str	r3, [sp, #12]
 8019c40:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8019c44:	2100      	movs	r1, #0
 8019c46:	2204      	movs	r2, #4
 8019c48:	f102 0514 	add.w	r5, r2, #20
 8019c4c:	429d      	cmp	r5, r3
 8019c4e:	d926      	bls.n	8019c9e <_dtoa_r+0x2ae>
 8019c50:	6041      	str	r1, [r0, #4]
 8019c52:	4648      	mov	r0, r9
 8019c54:	f000 fce6 	bl	801a624 <_Balloc>
 8019c58:	4682      	mov	sl, r0
 8019c5a:	2800      	cmp	r0, #0
 8019c5c:	d142      	bne.n	8019ce4 <_dtoa_r+0x2f4>
 8019c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8019cd8 <_dtoa_r+0x2e8>)
 8019c60:	4602      	mov	r2, r0
 8019c62:	f240 11af 	movw	r1, #431	@ 0x1af
 8019c66:	e6da      	b.n	8019a1e <_dtoa_r+0x2e>
 8019c68:	2300      	movs	r3, #0
 8019c6a:	e7e3      	b.n	8019c34 <_dtoa_r+0x244>
 8019c6c:	2300      	movs	r3, #0
 8019c6e:	e7d5      	b.n	8019c1c <_dtoa_r+0x22c>
 8019c70:	2401      	movs	r4, #1
 8019c72:	2300      	movs	r3, #0
 8019c74:	9307      	str	r3, [sp, #28]
 8019c76:	9409      	str	r4, [sp, #36]	@ 0x24
 8019c78:	f04f 3bff 	mov.w	fp, #4294967295
 8019c7c:	2200      	movs	r2, #0
 8019c7e:	f8cd b00c 	str.w	fp, [sp, #12]
 8019c82:	2312      	movs	r3, #18
 8019c84:	920c      	str	r2, [sp, #48]	@ 0x30
 8019c86:	e7db      	b.n	8019c40 <_dtoa_r+0x250>
 8019c88:	2301      	movs	r3, #1
 8019c8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8019c8c:	e7f4      	b.n	8019c78 <_dtoa_r+0x288>
 8019c8e:	f04f 0b01 	mov.w	fp, #1
 8019c92:	f8cd b00c 	str.w	fp, [sp, #12]
 8019c96:	465b      	mov	r3, fp
 8019c98:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8019c9c:	e7d0      	b.n	8019c40 <_dtoa_r+0x250>
 8019c9e:	3101      	adds	r1, #1
 8019ca0:	0052      	lsls	r2, r2, #1
 8019ca2:	e7d1      	b.n	8019c48 <_dtoa_r+0x258>
 8019ca4:	f3af 8000 	nop.w
 8019ca8:	636f4361 	.word	0x636f4361
 8019cac:	3fd287a7 	.word	0x3fd287a7
 8019cb0:	8b60c8b3 	.word	0x8b60c8b3
 8019cb4:	3fc68a28 	.word	0x3fc68a28
 8019cb8:	509f79fb 	.word	0x509f79fb
 8019cbc:	3fd34413 	.word	0x3fd34413
 8019cc0:	0801cc85 	.word	0x0801cc85
 8019cc4:	0801cc9c 	.word	0x0801cc9c
 8019cc8:	7ff00000 	.word	0x7ff00000
 8019ccc:	0801cc55 	.word	0x0801cc55
 8019cd0:	3ff80000 	.word	0x3ff80000
 8019cd4:	0801cdf0 	.word	0x0801cdf0
 8019cd8:	0801ccf4 	.word	0x0801ccf4
 8019cdc:	0801cc81 	.word	0x0801cc81
 8019ce0:	0801cc54 	.word	0x0801cc54
 8019ce4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8019ce8:	6018      	str	r0, [r3, #0]
 8019cea:	9b03      	ldr	r3, [sp, #12]
 8019cec:	2b0e      	cmp	r3, #14
 8019cee:	f200 80a1 	bhi.w	8019e34 <_dtoa_r+0x444>
 8019cf2:	2c00      	cmp	r4, #0
 8019cf4:	f000 809e 	beq.w	8019e34 <_dtoa_r+0x444>
 8019cf8:	2f00      	cmp	r7, #0
 8019cfa:	dd33      	ble.n	8019d64 <_dtoa_r+0x374>
 8019cfc:	4b9c      	ldr	r3, [pc, #624]	@ (8019f70 <_dtoa_r+0x580>)
 8019cfe:	f007 020f 	and.w	r2, r7, #15
 8019d02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019d06:	ed93 7b00 	vldr	d7, [r3]
 8019d0a:	05f8      	lsls	r0, r7, #23
 8019d0c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8019d10:	ea4f 1427 	mov.w	r4, r7, asr #4
 8019d14:	d516      	bpl.n	8019d44 <_dtoa_r+0x354>
 8019d16:	4b97      	ldr	r3, [pc, #604]	@ (8019f74 <_dtoa_r+0x584>)
 8019d18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8019d1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8019d20:	f7e6 fd6c 	bl	80007fc <__aeabi_ddiv>
 8019d24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019d28:	f004 040f 	and.w	r4, r4, #15
 8019d2c:	2603      	movs	r6, #3
 8019d2e:	4d91      	ldr	r5, [pc, #580]	@ (8019f74 <_dtoa_r+0x584>)
 8019d30:	b954      	cbnz	r4, 8019d48 <_dtoa_r+0x358>
 8019d32:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8019d36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019d3a:	f7e6 fd5f 	bl	80007fc <__aeabi_ddiv>
 8019d3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019d42:	e028      	b.n	8019d96 <_dtoa_r+0x3a6>
 8019d44:	2602      	movs	r6, #2
 8019d46:	e7f2      	b.n	8019d2e <_dtoa_r+0x33e>
 8019d48:	07e1      	lsls	r1, r4, #31
 8019d4a:	d508      	bpl.n	8019d5e <_dtoa_r+0x36e>
 8019d4c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8019d50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019d54:	f7e6 fc28 	bl	80005a8 <__aeabi_dmul>
 8019d58:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8019d5c:	3601      	adds	r6, #1
 8019d5e:	1064      	asrs	r4, r4, #1
 8019d60:	3508      	adds	r5, #8
 8019d62:	e7e5      	b.n	8019d30 <_dtoa_r+0x340>
 8019d64:	f000 80af 	beq.w	8019ec6 <_dtoa_r+0x4d6>
 8019d68:	427c      	negs	r4, r7
 8019d6a:	4b81      	ldr	r3, [pc, #516]	@ (8019f70 <_dtoa_r+0x580>)
 8019d6c:	4d81      	ldr	r5, [pc, #516]	@ (8019f74 <_dtoa_r+0x584>)
 8019d6e:	f004 020f 	and.w	r2, r4, #15
 8019d72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8019d7e:	f7e6 fc13 	bl	80005a8 <__aeabi_dmul>
 8019d82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019d86:	1124      	asrs	r4, r4, #4
 8019d88:	2300      	movs	r3, #0
 8019d8a:	2602      	movs	r6, #2
 8019d8c:	2c00      	cmp	r4, #0
 8019d8e:	f040 808f 	bne.w	8019eb0 <_dtoa_r+0x4c0>
 8019d92:	2b00      	cmp	r3, #0
 8019d94:	d1d3      	bne.n	8019d3e <_dtoa_r+0x34e>
 8019d96:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019d98:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8019d9c:	2b00      	cmp	r3, #0
 8019d9e:	f000 8094 	beq.w	8019eca <_dtoa_r+0x4da>
 8019da2:	4b75      	ldr	r3, [pc, #468]	@ (8019f78 <_dtoa_r+0x588>)
 8019da4:	2200      	movs	r2, #0
 8019da6:	4620      	mov	r0, r4
 8019da8:	4629      	mov	r1, r5
 8019daa:	f7e6 fe6f 	bl	8000a8c <__aeabi_dcmplt>
 8019dae:	2800      	cmp	r0, #0
 8019db0:	f000 808b 	beq.w	8019eca <_dtoa_r+0x4da>
 8019db4:	9b03      	ldr	r3, [sp, #12]
 8019db6:	2b00      	cmp	r3, #0
 8019db8:	f000 8087 	beq.w	8019eca <_dtoa_r+0x4da>
 8019dbc:	f1bb 0f00 	cmp.w	fp, #0
 8019dc0:	dd34      	ble.n	8019e2c <_dtoa_r+0x43c>
 8019dc2:	4620      	mov	r0, r4
 8019dc4:	4b6d      	ldr	r3, [pc, #436]	@ (8019f7c <_dtoa_r+0x58c>)
 8019dc6:	2200      	movs	r2, #0
 8019dc8:	4629      	mov	r1, r5
 8019dca:	f7e6 fbed 	bl	80005a8 <__aeabi_dmul>
 8019dce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019dd2:	f107 38ff 	add.w	r8, r7, #4294967295
 8019dd6:	3601      	adds	r6, #1
 8019dd8:	465c      	mov	r4, fp
 8019dda:	4630      	mov	r0, r6
 8019ddc:	f7e6 fb7a 	bl	80004d4 <__aeabi_i2d>
 8019de0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019de4:	f7e6 fbe0 	bl	80005a8 <__aeabi_dmul>
 8019de8:	4b65      	ldr	r3, [pc, #404]	@ (8019f80 <_dtoa_r+0x590>)
 8019dea:	2200      	movs	r2, #0
 8019dec:	f7e6 fa26 	bl	800023c <__adddf3>
 8019df0:	4605      	mov	r5, r0
 8019df2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8019df6:	2c00      	cmp	r4, #0
 8019df8:	d16a      	bne.n	8019ed0 <_dtoa_r+0x4e0>
 8019dfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019dfe:	4b61      	ldr	r3, [pc, #388]	@ (8019f84 <_dtoa_r+0x594>)
 8019e00:	2200      	movs	r2, #0
 8019e02:	f7e6 fa19 	bl	8000238 <__aeabi_dsub>
 8019e06:	4602      	mov	r2, r0
 8019e08:	460b      	mov	r3, r1
 8019e0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8019e0e:	462a      	mov	r2, r5
 8019e10:	4633      	mov	r3, r6
 8019e12:	f7e6 fe59 	bl	8000ac8 <__aeabi_dcmpgt>
 8019e16:	2800      	cmp	r0, #0
 8019e18:	f040 8298 	bne.w	801a34c <_dtoa_r+0x95c>
 8019e1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019e20:	462a      	mov	r2, r5
 8019e22:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8019e26:	f7e6 fe31 	bl	8000a8c <__aeabi_dcmplt>
 8019e2a:	bb38      	cbnz	r0, 8019e7c <_dtoa_r+0x48c>
 8019e2c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8019e30:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8019e34:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019e36:	2b00      	cmp	r3, #0
 8019e38:	f2c0 8157 	blt.w	801a0ea <_dtoa_r+0x6fa>
 8019e3c:	2f0e      	cmp	r7, #14
 8019e3e:	f300 8154 	bgt.w	801a0ea <_dtoa_r+0x6fa>
 8019e42:	4b4b      	ldr	r3, [pc, #300]	@ (8019f70 <_dtoa_r+0x580>)
 8019e44:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8019e48:	ed93 7b00 	vldr	d7, [r3]
 8019e4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019e4e:	2b00      	cmp	r3, #0
 8019e50:	ed8d 7b00 	vstr	d7, [sp]
 8019e54:	f280 80e5 	bge.w	801a022 <_dtoa_r+0x632>
 8019e58:	9b03      	ldr	r3, [sp, #12]
 8019e5a:	2b00      	cmp	r3, #0
 8019e5c:	f300 80e1 	bgt.w	801a022 <_dtoa_r+0x632>
 8019e60:	d10c      	bne.n	8019e7c <_dtoa_r+0x48c>
 8019e62:	4b48      	ldr	r3, [pc, #288]	@ (8019f84 <_dtoa_r+0x594>)
 8019e64:	2200      	movs	r2, #0
 8019e66:	ec51 0b17 	vmov	r0, r1, d7
 8019e6a:	f7e6 fb9d 	bl	80005a8 <__aeabi_dmul>
 8019e6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019e72:	f7e6 fe1f 	bl	8000ab4 <__aeabi_dcmpge>
 8019e76:	2800      	cmp	r0, #0
 8019e78:	f000 8266 	beq.w	801a348 <_dtoa_r+0x958>
 8019e7c:	2400      	movs	r4, #0
 8019e7e:	4625      	mov	r5, r4
 8019e80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019e82:	4656      	mov	r6, sl
 8019e84:	ea6f 0803 	mvn.w	r8, r3
 8019e88:	2700      	movs	r7, #0
 8019e8a:	4621      	mov	r1, r4
 8019e8c:	4648      	mov	r0, r9
 8019e8e:	f000 fc09 	bl	801a6a4 <_Bfree>
 8019e92:	2d00      	cmp	r5, #0
 8019e94:	f000 80bd 	beq.w	801a012 <_dtoa_r+0x622>
 8019e98:	b12f      	cbz	r7, 8019ea6 <_dtoa_r+0x4b6>
 8019e9a:	42af      	cmp	r7, r5
 8019e9c:	d003      	beq.n	8019ea6 <_dtoa_r+0x4b6>
 8019e9e:	4639      	mov	r1, r7
 8019ea0:	4648      	mov	r0, r9
 8019ea2:	f000 fbff 	bl	801a6a4 <_Bfree>
 8019ea6:	4629      	mov	r1, r5
 8019ea8:	4648      	mov	r0, r9
 8019eaa:	f000 fbfb 	bl	801a6a4 <_Bfree>
 8019eae:	e0b0      	b.n	801a012 <_dtoa_r+0x622>
 8019eb0:	07e2      	lsls	r2, r4, #31
 8019eb2:	d505      	bpl.n	8019ec0 <_dtoa_r+0x4d0>
 8019eb4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019eb8:	f7e6 fb76 	bl	80005a8 <__aeabi_dmul>
 8019ebc:	3601      	adds	r6, #1
 8019ebe:	2301      	movs	r3, #1
 8019ec0:	1064      	asrs	r4, r4, #1
 8019ec2:	3508      	adds	r5, #8
 8019ec4:	e762      	b.n	8019d8c <_dtoa_r+0x39c>
 8019ec6:	2602      	movs	r6, #2
 8019ec8:	e765      	b.n	8019d96 <_dtoa_r+0x3a6>
 8019eca:	9c03      	ldr	r4, [sp, #12]
 8019ecc:	46b8      	mov	r8, r7
 8019ece:	e784      	b.n	8019dda <_dtoa_r+0x3ea>
 8019ed0:	4b27      	ldr	r3, [pc, #156]	@ (8019f70 <_dtoa_r+0x580>)
 8019ed2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019ed4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019ed8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8019edc:	4454      	add	r4, sl
 8019ede:	2900      	cmp	r1, #0
 8019ee0:	d054      	beq.n	8019f8c <_dtoa_r+0x59c>
 8019ee2:	4929      	ldr	r1, [pc, #164]	@ (8019f88 <_dtoa_r+0x598>)
 8019ee4:	2000      	movs	r0, #0
 8019ee6:	f7e6 fc89 	bl	80007fc <__aeabi_ddiv>
 8019eea:	4633      	mov	r3, r6
 8019eec:	462a      	mov	r2, r5
 8019eee:	f7e6 f9a3 	bl	8000238 <__aeabi_dsub>
 8019ef2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8019ef6:	4656      	mov	r6, sl
 8019ef8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019efc:	f7e6 fe04 	bl	8000b08 <__aeabi_d2iz>
 8019f00:	4605      	mov	r5, r0
 8019f02:	f7e6 fae7 	bl	80004d4 <__aeabi_i2d>
 8019f06:	4602      	mov	r2, r0
 8019f08:	460b      	mov	r3, r1
 8019f0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019f0e:	f7e6 f993 	bl	8000238 <__aeabi_dsub>
 8019f12:	3530      	adds	r5, #48	@ 0x30
 8019f14:	4602      	mov	r2, r0
 8019f16:	460b      	mov	r3, r1
 8019f18:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8019f1c:	f806 5b01 	strb.w	r5, [r6], #1
 8019f20:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8019f24:	f7e6 fdb2 	bl	8000a8c <__aeabi_dcmplt>
 8019f28:	2800      	cmp	r0, #0
 8019f2a:	d172      	bne.n	801a012 <_dtoa_r+0x622>
 8019f2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019f30:	4911      	ldr	r1, [pc, #68]	@ (8019f78 <_dtoa_r+0x588>)
 8019f32:	2000      	movs	r0, #0
 8019f34:	f7e6 f980 	bl	8000238 <__aeabi_dsub>
 8019f38:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8019f3c:	f7e6 fda6 	bl	8000a8c <__aeabi_dcmplt>
 8019f40:	2800      	cmp	r0, #0
 8019f42:	f040 80b4 	bne.w	801a0ae <_dtoa_r+0x6be>
 8019f46:	42a6      	cmp	r6, r4
 8019f48:	f43f af70 	beq.w	8019e2c <_dtoa_r+0x43c>
 8019f4c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8019f50:	4b0a      	ldr	r3, [pc, #40]	@ (8019f7c <_dtoa_r+0x58c>)
 8019f52:	2200      	movs	r2, #0
 8019f54:	f7e6 fb28 	bl	80005a8 <__aeabi_dmul>
 8019f58:	4b08      	ldr	r3, [pc, #32]	@ (8019f7c <_dtoa_r+0x58c>)
 8019f5a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8019f5e:	2200      	movs	r2, #0
 8019f60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019f64:	f7e6 fb20 	bl	80005a8 <__aeabi_dmul>
 8019f68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019f6c:	e7c4      	b.n	8019ef8 <_dtoa_r+0x508>
 8019f6e:	bf00      	nop
 8019f70:	0801cdf0 	.word	0x0801cdf0
 8019f74:	0801cdc8 	.word	0x0801cdc8
 8019f78:	3ff00000 	.word	0x3ff00000
 8019f7c:	40240000 	.word	0x40240000
 8019f80:	401c0000 	.word	0x401c0000
 8019f84:	40140000 	.word	0x40140000
 8019f88:	3fe00000 	.word	0x3fe00000
 8019f8c:	4631      	mov	r1, r6
 8019f8e:	4628      	mov	r0, r5
 8019f90:	f7e6 fb0a 	bl	80005a8 <__aeabi_dmul>
 8019f94:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8019f98:	9413      	str	r4, [sp, #76]	@ 0x4c
 8019f9a:	4656      	mov	r6, sl
 8019f9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019fa0:	f7e6 fdb2 	bl	8000b08 <__aeabi_d2iz>
 8019fa4:	4605      	mov	r5, r0
 8019fa6:	f7e6 fa95 	bl	80004d4 <__aeabi_i2d>
 8019faa:	4602      	mov	r2, r0
 8019fac:	460b      	mov	r3, r1
 8019fae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019fb2:	f7e6 f941 	bl	8000238 <__aeabi_dsub>
 8019fb6:	3530      	adds	r5, #48	@ 0x30
 8019fb8:	f806 5b01 	strb.w	r5, [r6], #1
 8019fbc:	4602      	mov	r2, r0
 8019fbe:	460b      	mov	r3, r1
 8019fc0:	42a6      	cmp	r6, r4
 8019fc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8019fc6:	f04f 0200 	mov.w	r2, #0
 8019fca:	d124      	bne.n	801a016 <_dtoa_r+0x626>
 8019fcc:	4baf      	ldr	r3, [pc, #700]	@ (801a28c <_dtoa_r+0x89c>)
 8019fce:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8019fd2:	f7e6 f933 	bl	800023c <__adddf3>
 8019fd6:	4602      	mov	r2, r0
 8019fd8:	460b      	mov	r3, r1
 8019fda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019fde:	f7e6 fd73 	bl	8000ac8 <__aeabi_dcmpgt>
 8019fe2:	2800      	cmp	r0, #0
 8019fe4:	d163      	bne.n	801a0ae <_dtoa_r+0x6be>
 8019fe6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8019fea:	49a8      	ldr	r1, [pc, #672]	@ (801a28c <_dtoa_r+0x89c>)
 8019fec:	2000      	movs	r0, #0
 8019fee:	f7e6 f923 	bl	8000238 <__aeabi_dsub>
 8019ff2:	4602      	mov	r2, r0
 8019ff4:	460b      	mov	r3, r1
 8019ff6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019ffa:	f7e6 fd47 	bl	8000a8c <__aeabi_dcmplt>
 8019ffe:	2800      	cmp	r0, #0
 801a000:	f43f af14 	beq.w	8019e2c <_dtoa_r+0x43c>
 801a004:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801a006:	1e73      	subs	r3, r6, #1
 801a008:	9313      	str	r3, [sp, #76]	@ 0x4c
 801a00a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801a00e:	2b30      	cmp	r3, #48	@ 0x30
 801a010:	d0f8      	beq.n	801a004 <_dtoa_r+0x614>
 801a012:	4647      	mov	r7, r8
 801a014:	e03b      	b.n	801a08e <_dtoa_r+0x69e>
 801a016:	4b9e      	ldr	r3, [pc, #632]	@ (801a290 <_dtoa_r+0x8a0>)
 801a018:	f7e6 fac6 	bl	80005a8 <__aeabi_dmul>
 801a01c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a020:	e7bc      	b.n	8019f9c <_dtoa_r+0x5ac>
 801a022:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801a026:	4656      	mov	r6, sl
 801a028:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a02c:	4620      	mov	r0, r4
 801a02e:	4629      	mov	r1, r5
 801a030:	f7e6 fbe4 	bl	80007fc <__aeabi_ddiv>
 801a034:	f7e6 fd68 	bl	8000b08 <__aeabi_d2iz>
 801a038:	4680      	mov	r8, r0
 801a03a:	f7e6 fa4b 	bl	80004d4 <__aeabi_i2d>
 801a03e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a042:	f7e6 fab1 	bl	80005a8 <__aeabi_dmul>
 801a046:	4602      	mov	r2, r0
 801a048:	460b      	mov	r3, r1
 801a04a:	4620      	mov	r0, r4
 801a04c:	4629      	mov	r1, r5
 801a04e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801a052:	f7e6 f8f1 	bl	8000238 <__aeabi_dsub>
 801a056:	f806 4b01 	strb.w	r4, [r6], #1
 801a05a:	9d03      	ldr	r5, [sp, #12]
 801a05c:	eba6 040a 	sub.w	r4, r6, sl
 801a060:	42a5      	cmp	r5, r4
 801a062:	4602      	mov	r2, r0
 801a064:	460b      	mov	r3, r1
 801a066:	d133      	bne.n	801a0d0 <_dtoa_r+0x6e0>
 801a068:	f7e6 f8e8 	bl	800023c <__adddf3>
 801a06c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a070:	4604      	mov	r4, r0
 801a072:	460d      	mov	r5, r1
 801a074:	f7e6 fd28 	bl	8000ac8 <__aeabi_dcmpgt>
 801a078:	b9c0      	cbnz	r0, 801a0ac <_dtoa_r+0x6bc>
 801a07a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a07e:	4620      	mov	r0, r4
 801a080:	4629      	mov	r1, r5
 801a082:	f7e6 fcf9 	bl	8000a78 <__aeabi_dcmpeq>
 801a086:	b110      	cbz	r0, 801a08e <_dtoa_r+0x69e>
 801a088:	f018 0f01 	tst.w	r8, #1
 801a08c:	d10e      	bne.n	801a0ac <_dtoa_r+0x6bc>
 801a08e:	9902      	ldr	r1, [sp, #8]
 801a090:	4648      	mov	r0, r9
 801a092:	f000 fb07 	bl	801a6a4 <_Bfree>
 801a096:	2300      	movs	r3, #0
 801a098:	7033      	strb	r3, [r6, #0]
 801a09a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a09c:	3701      	adds	r7, #1
 801a09e:	601f      	str	r7, [r3, #0]
 801a0a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801a0a2:	2b00      	cmp	r3, #0
 801a0a4:	f000 824b 	beq.w	801a53e <_dtoa_r+0xb4e>
 801a0a8:	601e      	str	r6, [r3, #0]
 801a0aa:	e248      	b.n	801a53e <_dtoa_r+0xb4e>
 801a0ac:	46b8      	mov	r8, r7
 801a0ae:	4633      	mov	r3, r6
 801a0b0:	461e      	mov	r6, r3
 801a0b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a0b6:	2a39      	cmp	r2, #57	@ 0x39
 801a0b8:	d106      	bne.n	801a0c8 <_dtoa_r+0x6d8>
 801a0ba:	459a      	cmp	sl, r3
 801a0bc:	d1f8      	bne.n	801a0b0 <_dtoa_r+0x6c0>
 801a0be:	2230      	movs	r2, #48	@ 0x30
 801a0c0:	f108 0801 	add.w	r8, r8, #1
 801a0c4:	f88a 2000 	strb.w	r2, [sl]
 801a0c8:	781a      	ldrb	r2, [r3, #0]
 801a0ca:	3201      	adds	r2, #1
 801a0cc:	701a      	strb	r2, [r3, #0]
 801a0ce:	e7a0      	b.n	801a012 <_dtoa_r+0x622>
 801a0d0:	4b6f      	ldr	r3, [pc, #444]	@ (801a290 <_dtoa_r+0x8a0>)
 801a0d2:	2200      	movs	r2, #0
 801a0d4:	f7e6 fa68 	bl	80005a8 <__aeabi_dmul>
 801a0d8:	2200      	movs	r2, #0
 801a0da:	2300      	movs	r3, #0
 801a0dc:	4604      	mov	r4, r0
 801a0de:	460d      	mov	r5, r1
 801a0e0:	f7e6 fcca 	bl	8000a78 <__aeabi_dcmpeq>
 801a0e4:	2800      	cmp	r0, #0
 801a0e6:	d09f      	beq.n	801a028 <_dtoa_r+0x638>
 801a0e8:	e7d1      	b.n	801a08e <_dtoa_r+0x69e>
 801a0ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a0ec:	2a00      	cmp	r2, #0
 801a0ee:	f000 80ea 	beq.w	801a2c6 <_dtoa_r+0x8d6>
 801a0f2:	9a07      	ldr	r2, [sp, #28]
 801a0f4:	2a01      	cmp	r2, #1
 801a0f6:	f300 80cd 	bgt.w	801a294 <_dtoa_r+0x8a4>
 801a0fa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a0fc:	2a00      	cmp	r2, #0
 801a0fe:	f000 80c1 	beq.w	801a284 <_dtoa_r+0x894>
 801a102:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801a106:	9c08      	ldr	r4, [sp, #32]
 801a108:	9e00      	ldr	r6, [sp, #0]
 801a10a:	9a00      	ldr	r2, [sp, #0]
 801a10c:	441a      	add	r2, r3
 801a10e:	9200      	str	r2, [sp, #0]
 801a110:	9a06      	ldr	r2, [sp, #24]
 801a112:	2101      	movs	r1, #1
 801a114:	441a      	add	r2, r3
 801a116:	4648      	mov	r0, r9
 801a118:	9206      	str	r2, [sp, #24]
 801a11a:	f000 fb77 	bl	801a80c <__i2b>
 801a11e:	4605      	mov	r5, r0
 801a120:	b166      	cbz	r6, 801a13c <_dtoa_r+0x74c>
 801a122:	9b06      	ldr	r3, [sp, #24]
 801a124:	2b00      	cmp	r3, #0
 801a126:	dd09      	ble.n	801a13c <_dtoa_r+0x74c>
 801a128:	42b3      	cmp	r3, r6
 801a12a:	9a00      	ldr	r2, [sp, #0]
 801a12c:	bfa8      	it	ge
 801a12e:	4633      	movge	r3, r6
 801a130:	1ad2      	subs	r2, r2, r3
 801a132:	9200      	str	r2, [sp, #0]
 801a134:	9a06      	ldr	r2, [sp, #24]
 801a136:	1af6      	subs	r6, r6, r3
 801a138:	1ad3      	subs	r3, r2, r3
 801a13a:	9306      	str	r3, [sp, #24]
 801a13c:	9b08      	ldr	r3, [sp, #32]
 801a13e:	b30b      	cbz	r3, 801a184 <_dtoa_r+0x794>
 801a140:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a142:	2b00      	cmp	r3, #0
 801a144:	f000 80c6 	beq.w	801a2d4 <_dtoa_r+0x8e4>
 801a148:	2c00      	cmp	r4, #0
 801a14a:	f000 80c0 	beq.w	801a2ce <_dtoa_r+0x8de>
 801a14e:	4629      	mov	r1, r5
 801a150:	4622      	mov	r2, r4
 801a152:	4648      	mov	r0, r9
 801a154:	f000 fc12 	bl	801a97c <__pow5mult>
 801a158:	9a02      	ldr	r2, [sp, #8]
 801a15a:	4601      	mov	r1, r0
 801a15c:	4605      	mov	r5, r0
 801a15e:	4648      	mov	r0, r9
 801a160:	f000 fb6a 	bl	801a838 <__multiply>
 801a164:	9902      	ldr	r1, [sp, #8]
 801a166:	4680      	mov	r8, r0
 801a168:	4648      	mov	r0, r9
 801a16a:	f000 fa9b 	bl	801a6a4 <_Bfree>
 801a16e:	9b08      	ldr	r3, [sp, #32]
 801a170:	1b1b      	subs	r3, r3, r4
 801a172:	9308      	str	r3, [sp, #32]
 801a174:	f000 80b1 	beq.w	801a2da <_dtoa_r+0x8ea>
 801a178:	9a08      	ldr	r2, [sp, #32]
 801a17a:	4641      	mov	r1, r8
 801a17c:	4648      	mov	r0, r9
 801a17e:	f000 fbfd 	bl	801a97c <__pow5mult>
 801a182:	9002      	str	r0, [sp, #8]
 801a184:	2101      	movs	r1, #1
 801a186:	4648      	mov	r0, r9
 801a188:	f000 fb40 	bl	801a80c <__i2b>
 801a18c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a18e:	4604      	mov	r4, r0
 801a190:	2b00      	cmp	r3, #0
 801a192:	f000 81d8 	beq.w	801a546 <_dtoa_r+0xb56>
 801a196:	461a      	mov	r2, r3
 801a198:	4601      	mov	r1, r0
 801a19a:	4648      	mov	r0, r9
 801a19c:	f000 fbee 	bl	801a97c <__pow5mult>
 801a1a0:	9b07      	ldr	r3, [sp, #28]
 801a1a2:	2b01      	cmp	r3, #1
 801a1a4:	4604      	mov	r4, r0
 801a1a6:	f300 809f 	bgt.w	801a2e8 <_dtoa_r+0x8f8>
 801a1aa:	9b04      	ldr	r3, [sp, #16]
 801a1ac:	2b00      	cmp	r3, #0
 801a1ae:	f040 8097 	bne.w	801a2e0 <_dtoa_r+0x8f0>
 801a1b2:	9b05      	ldr	r3, [sp, #20]
 801a1b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a1b8:	2b00      	cmp	r3, #0
 801a1ba:	f040 8093 	bne.w	801a2e4 <_dtoa_r+0x8f4>
 801a1be:	9b05      	ldr	r3, [sp, #20]
 801a1c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801a1c4:	0d1b      	lsrs	r3, r3, #20
 801a1c6:	051b      	lsls	r3, r3, #20
 801a1c8:	b133      	cbz	r3, 801a1d8 <_dtoa_r+0x7e8>
 801a1ca:	9b00      	ldr	r3, [sp, #0]
 801a1cc:	3301      	adds	r3, #1
 801a1ce:	9300      	str	r3, [sp, #0]
 801a1d0:	9b06      	ldr	r3, [sp, #24]
 801a1d2:	3301      	adds	r3, #1
 801a1d4:	9306      	str	r3, [sp, #24]
 801a1d6:	2301      	movs	r3, #1
 801a1d8:	9308      	str	r3, [sp, #32]
 801a1da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a1dc:	2b00      	cmp	r3, #0
 801a1de:	f000 81b8 	beq.w	801a552 <_dtoa_r+0xb62>
 801a1e2:	6923      	ldr	r3, [r4, #16]
 801a1e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801a1e8:	6918      	ldr	r0, [r3, #16]
 801a1ea:	f000 fac3 	bl	801a774 <__hi0bits>
 801a1ee:	f1c0 0020 	rsb	r0, r0, #32
 801a1f2:	9b06      	ldr	r3, [sp, #24]
 801a1f4:	4418      	add	r0, r3
 801a1f6:	f010 001f 	ands.w	r0, r0, #31
 801a1fa:	f000 8082 	beq.w	801a302 <_dtoa_r+0x912>
 801a1fe:	f1c0 0320 	rsb	r3, r0, #32
 801a202:	2b04      	cmp	r3, #4
 801a204:	dd73      	ble.n	801a2ee <_dtoa_r+0x8fe>
 801a206:	9b00      	ldr	r3, [sp, #0]
 801a208:	f1c0 001c 	rsb	r0, r0, #28
 801a20c:	4403      	add	r3, r0
 801a20e:	9300      	str	r3, [sp, #0]
 801a210:	9b06      	ldr	r3, [sp, #24]
 801a212:	4403      	add	r3, r0
 801a214:	4406      	add	r6, r0
 801a216:	9306      	str	r3, [sp, #24]
 801a218:	9b00      	ldr	r3, [sp, #0]
 801a21a:	2b00      	cmp	r3, #0
 801a21c:	dd05      	ble.n	801a22a <_dtoa_r+0x83a>
 801a21e:	9902      	ldr	r1, [sp, #8]
 801a220:	461a      	mov	r2, r3
 801a222:	4648      	mov	r0, r9
 801a224:	f000 fc04 	bl	801aa30 <__lshift>
 801a228:	9002      	str	r0, [sp, #8]
 801a22a:	9b06      	ldr	r3, [sp, #24]
 801a22c:	2b00      	cmp	r3, #0
 801a22e:	dd05      	ble.n	801a23c <_dtoa_r+0x84c>
 801a230:	4621      	mov	r1, r4
 801a232:	461a      	mov	r2, r3
 801a234:	4648      	mov	r0, r9
 801a236:	f000 fbfb 	bl	801aa30 <__lshift>
 801a23a:	4604      	mov	r4, r0
 801a23c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a23e:	2b00      	cmp	r3, #0
 801a240:	d061      	beq.n	801a306 <_dtoa_r+0x916>
 801a242:	9802      	ldr	r0, [sp, #8]
 801a244:	4621      	mov	r1, r4
 801a246:	f000 fc5f 	bl	801ab08 <__mcmp>
 801a24a:	2800      	cmp	r0, #0
 801a24c:	da5b      	bge.n	801a306 <_dtoa_r+0x916>
 801a24e:	2300      	movs	r3, #0
 801a250:	9902      	ldr	r1, [sp, #8]
 801a252:	220a      	movs	r2, #10
 801a254:	4648      	mov	r0, r9
 801a256:	f000 fa47 	bl	801a6e8 <__multadd>
 801a25a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a25c:	9002      	str	r0, [sp, #8]
 801a25e:	f107 38ff 	add.w	r8, r7, #4294967295
 801a262:	2b00      	cmp	r3, #0
 801a264:	f000 8177 	beq.w	801a556 <_dtoa_r+0xb66>
 801a268:	4629      	mov	r1, r5
 801a26a:	2300      	movs	r3, #0
 801a26c:	220a      	movs	r2, #10
 801a26e:	4648      	mov	r0, r9
 801a270:	f000 fa3a 	bl	801a6e8 <__multadd>
 801a274:	f1bb 0f00 	cmp.w	fp, #0
 801a278:	4605      	mov	r5, r0
 801a27a:	dc6f      	bgt.n	801a35c <_dtoa_r+0x96c>
 801a27c:	9b07      	ldr	r3, [sp, #28]
 801a27e:	2b02      	cmp	r3, #2
 801a280:	dc49      	bgt.n	801a316 <_dtoa_r+0x926>
 801a282:	e06b      	b.n	801a35c <_dtoa_r+0x96c>
 801a284:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801a286:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801a28a:	e73c      	b.n	801a106 <_dtoa_r+0x716>
 801a28c:	3fe00000 	.word	0x3fe00000
 801a290:	40240000 	.word	0x40240000
 801a294:	9b03      	ldr	r3, [sp, #12]
 801a296:	1e5c      	subs	r4, r3, #1
 801a298:	9b08      	ldr	r3, [sp, #32]
 801a29a:	42a3      	cmp	r3, r4
 801a29c:	db09      	blt.n	801a2b2 <_dtoa_r+0x8c2>
 801a29e:	1b1c      	subs	r4, r3, r4
 801a2a0:	9b03      	ldr	r3, [sp, #12]
 801a2a2:	2b00      	cmp	r3, #0
 801a2a4:	f6bf af30 	bge.w	801a108 <_dtoa_r+0x718>
 801a2a8:	9b00      	ldr	r3, [sp, #0]
 801a2aa:	9a03      	ldr	r2, [sp, #12]
 801a2ac:	1a9e      	subs	r6, r3, r2
 801a2ae:	2300      	movs	r3, #0
 801a2b0:	e72b      	b.n	801a10a <_dtoa_r+0x71a>
 801a2b2:	9b08      	ldr	r3, [sp, #32]
 801a2b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a2b6:	9408      	str	r4, [sp, #32]
 801a2b8:	1ae3      	subs	r3, r4, r3
 801a2ba:	441a      	add	r2, r3
 801a2bc:	9e00      	ldr	r6, [sp, #0]
 801a2be:	9b03      	ldr	r3, [sp, #12]
 801a2c0:	920d      	str	r2, [sp, #52]	@ 0x34
 801a2c2:	2400      	movs	r4, #0
 801a2c4:	e721      	b.n	801a10a <_dtoa_r+0x71a>
 801a2c6:	9c08      	ldr	r4, [sp, #32]
 801a2c8:	9e00      	ldr	r6, [sp, #0]
 801a2ca:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801a2cc:	e728      	b.n	801a120 <_dtoa_r+0x730>
 801a2ce:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801a2d2:	e751      	b.n	801a178 <_dtoa_r+0x788>
 801a2d4:	9a08      	ldr	r2, [sp, #32]
 801a2d6:	9902      	ldr	r1, [sp, #8]
 801a2d8:	e750      	b.n	801a17c <_dtoa_r+0x78c>
 801a2da:	f8cd 8008 	str.w	r8, [sp, #8]
 801a2de:	e751      	b.n	801a184 <_dtoa_r+0x794>
 801a2e0:	2300      	movs	r3, #0
 801a2e2:	e779      	b.n	801a1d8 <_dtoa_r+0x7e8>
 801a2e4:	9b04      	ldr	r3, [sp, #16]
 801a2e6:	e777      	b.n	801a1d8 <_dtoa_r+0x7e8>
 801a2e8:	2300      	movs	r3, #0
 801a2ea:	9308      	str	r3, [sp, #32]
 801a2ec:	e779      	b.n	801a1e2 <_dtoa_r+0x7f2>
 801a2ee:	d093      	beq.n	801a218 <_dtoa_r+0x828>
 801a2f0:	9a00      	ldr	r2, [sp, #0]
 801a2f2:	331c      	adds	r3, #28
 801a2f4:	441a      	add	r2, r3
 801a2f6:	9200      	str	r2, [sp, #0]
 801a2f8:	9a06      	ldr	r2, [sp, #24]
 801a2fa:	441a      	add	r2, r3
 801a2fc:	441e      	add	r6, r3
 801a2fe:	9206      	str	r2, [sp, #24]
 801a300:	e78a      	b.n	801a218 <_dtoa_r+0x828>
 801a302:	4603      	mov	r3, r0
 801a304:	e7f4      	b.n	801a2f0 <_dtoa_r+0x900>
 801a306:	9b03      	ldr	r3, [sp, #12]
 801a308:	2b00      	cmp	r3, #0
 801a30a:	46b8      	mov	r8, r7
 801a30c:	dc20      	bgt.n	801a350 <_dtoa_r+0x960>
 801a30e:	469b      	mov	fp, r3
 801a310:	9b07      	ldr	r3, [sp, #28]
 801a312:	2b02      	cmp	r3, #2
 801a314:	dd1e      	ble.n	801a354 <_dtoa_r+0x964>
 801a316:	f1bb 0f00 	cmp.w	fp, #0
 801a31a:	f47f adb1 	bne.w	8019e80 <_dtoa_r+0x490>
 801a31e:	4621      	mov	r1, r4
 801a320:	465b      	mov	r3, fp
 801a322:	2205      	movs	r2, #5
 801a324:	4648      	mov	r0, r9
 801a326:	f000 f9df 	bl	801a6e8 <__multadd>
 801a32a:	4601      	mov	r1, r0
 801a32c:	4604      	mov	r4, r0
 801a32e:	9802      	ldr	r0, [sp, #8]
 801a330:	f000 fbea 	bl	801ab08 <__mcmp>
 801a334:	2800      	cmp	r0, #0
 801a336:	f77f ada3 	ble.w	8019e80 <_dtoa_r+0x490>
 801a33a:	4656      	mov	r6, sl
 801a33c:	2331      	movs	r3, #49	@ 0x31
 801a33e:	f806 3b01 	strb.w	r3, [r6], #1
 801a342:	f108 0801 	add.w	r8, r8, #1
 801a346:	e59f      	b.n	8019e88 <_dtoa_r+0x498>
 801a348:	9c03      	ldr	r4, [sp, #12]
 801a34a:	46b8      	mov	r8, r7
 801a34c:	4625      	mov	r5, r4
 801a34e:	e7f4      	b.n	801a33a <_dtoa_r+0x94a>
 801a350:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801a354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a356:	2b00      	cmp	r3, #0
 801a358:	f000 8101 	beq.w	801a55e <_dtoa_r+0xb6e>
 801a35c:	2e00      	cmp	r6, #0
 801a35e:	dd05      	ble.n	801a36c <_dtoa_r+0x97c>
 801a360:	4629      	mov	r1, r5
 801a362:	4632      	mov	r2, r6
 801a364:	4648      	mov	r0, r9
 801a366:	f000 fb63 	bl	801aa30 <__lshift>
 801a36a:	4605      	mov	r5, r0
 801a36c:	9b08      	ldr	r3, [sp, #32]
 801a36e:	2b00      	cmp	r3, #0
 801a370:	d05c      	beq.n	801a42c <_dtoa_r+0xa3c>
 801a372:	6869      	ldr	r1, [r5, #4]
 801a374:	4648      	mov	r0, r9
 801a376:	f000 f955 	bl	801a624 <_Balloc>
 801a37a:	4606      	mov	r6, r0
 801a37c:	b928      	cbnz	r0, 801a38a <_dtoa_r+0x99a>
 801a37e:	4b82      	ldr	r3, [pc, #520]	@ (801a588 <_dtoa_r+0xb98>)
 801a380:	4602      	mov	r2, r0
 801a382:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801a386:	f7ff bb4a 	b.w	8019a1e <_dtoa_r+0x2e>
 801a38a:	692a      	ldr	r2, [r5, #16]
 801a38c:	3202      	adds	r2, #2
 801a38e:	0092      	lsls	r2, r2, #2
 801a390:	f105 010c 	add.w	r1, r5, #12
 801a394:	300c      	adds	r0, #12
 801a396:	f7ff fa94 	bl	80198c2 <memcpy>
 801a39a:	2201      	movs	r2, #1
 801a39c:	4631      	mov	r1, r6
 801a39e:	4648      	mov	r0, r9
 801a3a0:	f000 fb46 	bl	801aa30 <__lshift>
 801a3a4:	f10a 0301 	add.w	r3, sl, #1
 801a3a8:	9300      	str	r3, [sp, #0]
 801a3aa:	eb0a 030b 	add.w	r3, sl, fp
 801a3ae:	9308      	str	r3, [sp, #32]
 801a3b0:	9b04      	ldr	r3, [sp, #16]
 801a3b2:	f003 0301 	and.w	r3, r3, #1
 801a3b6:	462f      	mov	r7, r5
 801a3b8:	9306      	str	r3, [sp, #24]
 801a3ba:	4605      	mov	r5, r0
 801a3bc:	9b00      	ldr	r3, [sp, #0]
 801a3be:	9802      	ldr	r0, [sp, #8]
 801a3c0:	4621      	mov	r1, r4
 801a3c2:	f103 3bff 	add.w	fp, r3, #4294967295
 801a3c6:	f7ff fa8a 	bl	80198de <quorem>
 801a3ca:	4603      	mov	r3, r0
 801a3cc:	3330      	adds	r3, #48	@ 0x30
 801a3ce:	9003      	str	r0, [sp, #12]
 801a3d0:	4639      	mov	r1, r7
 801a3d2:	9802      	ldr	r0, [sp, #8]
 801a3d4:	9309      	str	r3, [sp, #36]	@ 0x24
 801a3d6:	f000 fb97 	bl	801ab08 <__mcmp>
 801a3da:	462a      	mov	r2, r5
 801a3dc:	9004      	str	r0, [sp, #16]
 801a3de:	4621      	mov	r1, r4
 801a3e0:	4648      	mov	r0, r9
 801a3e2:	f000 fbad 	bl	801ab40 <__mdiff>
 801a3e6:	68c2      	ldr	r2, [r0, #12]
 801a3e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a3ea:	4606      	mov	r6, r0
 801a3ec:	bb02      	cbnz	r2, 801a430 <_dtoa_r+0xa40>
 801a3ee:	4601      	mov	r1, r0
 801a3f0:	9802      	ldr	r0, [sp, #8]
 801a3f2:	f000 fb89 	bl	801ab08 <__mcmp>
 801a3f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a3f8:	4602      	mov	r2, r0
 801a3fa:	4631      	mov	r1, r6
 801a3fc:	4648      	mov	r0, r9
 801a3fe:	920c      	str	r2, [sp, #48]	@ 0x30
 801a400:	9309      	str	r3, [sp, #36]	@ 0x24
 801a402:	f000 f94f 	bl	801a6a4 <_Bfree>
 801a406:	9b07      	ldr	r3, [sp, #28]
 801a408:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801a40a:	9e00      	ldr	r6, [sp, #0]
 801a40c:	ea42 0103 	orr.w	r1, r2, r3
 801a410:	9b06      	ldr	r3, [sp, #24]
 801a412:	4319      	orrs	r1, r3
 801a414:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a416:	d10d      	bne.n	801a434 <_dtoa_r+0xa44>
 801a418:	2b39      	cmp	r3, #57	@ 0x39
 801a41a:	d027      	beq.n	801a46c <_dtoa_r+0xa7c>
 801a41c:	9a04      	ldr	r2, [sp, #16]
 801a41e:	2a00      	cmp	r2, #0
 801a420:	dd01      	ble.n	801a426 <_dtoa_r+0xa36>
 801a422:	9b03      	ldr	r3, [sp, #12]
 801a424:	3331      	adds	r3, #49	@ 0x31
 801a426:	f88b 3000 	strb.w	r3, [fp]
 801a42a:	e52e      	b.n	8019e8a <_dtoa_r+0x49a>
 801a42c:	4628      	mov	r0, r5
 801a42e:	e7b9      	b.n	801a3a4 <_dtoa_r+0x9b4>
 801a430:	2201      	movs	r2, #1
 801a432:	e7e2      	b.n	801a3fa <_dtoa_r+0xa0a>
 801a434:	9904      	ldr	r1, [sp, #16]
 801a436:	2900      	cmp	r1, #0
 801a438:	db04      	blt.n	801a444 <_dtoa_r+0xa54>
 801a43a:	9807      	ldr	r0, [sp, #28]
 801a43c:	4301      	orrs	r1, r0
 801a43e:	9806      	ldr	r0, [sp, #24]
 801a440:	4301      	orrs	r1, r0
 801a442:	d120      	bne.n	801a486 <_dtoa_r+0xa96>
 801a444:	2a00      	cmp	r2, #0
 801a446:	ddee      	ble.n	801a426 <_dtoa_r+0xa36>
 801a448:	9902      	ldr	r1, [sp, #8]
 801a44a:	9300      	str	r3, [sp, #0]
 801a44c:	2201      	movs	r2, #1
 801a44e:	4648      	mov	r0, r9
 801a450:	f000 faee 	bl	801aa30 <__lshift>
 801a454:	4621      	mov	r1, r4
 801a456:	9002      	str	r0, [sp, #8]
 801a458:	f000 fb56 	bl	801ab08 <__mcmp>
 801a45c:	2800      	cmp	r0, #0
 801a45e:	9b00      	ldr	r3, [sp, #0]
 801a460:	dc02      	bgt.n	801a468 <_dtoa_r+0xa78>
 801a462:	d1e0      	bne.n	801a426 <_dtoa_r+0xa36>
 801a464:	07da      	lsls	r2, r3, #31
 801a466:	d5de      	bpl.n	801a426 <_dtoa_r+0xa36>
 801a468:	2b39      	cmp	r3, #57	@ 0x39
 801a46a:	d1da      	bne.n	801a422 <_dtoa_r+0xa32>
 801a46c:	2339      	movs	r3, #57	@ 0x39
 801a46e:	f88b 3000 	strb.w	r3, [fp]
 801a472:	4633      	mov	r3, r6
 801a474:	461e      	mov	r6, r3
 801a476:	3b01      	subs	r3, #1
 801a478:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801a47c:	2a39      	cmp	r2, #57	@ 0x39
 801a47e:	d04e      	beq.n	801a51e <_dtoa_r+0xb2e>
 801a480:	3201      	adds	r2, #1
 801a482:	701a      	strb	r2, [r3, #0]
 801a484:	e501      	b.n	8019e8a <_dtoa_r+0x49a>
 801a486:	2a00      	cmp	r2, #0
 801a488:	dd03      	ble.n	801a492 <_dtoa_r+0xaa2>
 801a48a:	2b39      	cmp	r3, #57	@ 0x39
 801a48c:	d0ee      	beq.n	801a46c <_dtoa_r+0xa7c>
 801a48e:	3301      	adds	r3, #1
 801a490:	e7c9      	b.n	801a426 <_dtoa_r+0xa36>
 801a492:	9a00      	ldr	r2, [sp, #0]
 801a494:	9908      	ldr	r1, [sp, #32]
 801a496:	f802 3c01 	strb.w	r3, [r2, #-1]
 801a49a:	428a      	cmp	r2, r1
 801a49c:	d028      	beq.n	801a4f0 <_dtoa_r+0xb00>
 801a49e:	9902      	ldr	r1, [sp, #8]
 801a4a0:	2300      	movs	r3, #0
 801a4a2:	220a      	movs	r2, #10
 801a4a4:	4648      	mov	r0, r9
 801a4a6:	f000 f91f 	bl	801a6e8 <__multadd>
 801a4aa:	42af      	cmp	r7, r5
 801a4ac:	9002      	str	r0, [sp, #8]
 801a4ae:	f04f 0300 	mov.w	r3, #0
 801a4b2:	f04f 020a 	mov.w	r2, #10
 801a4b6:	4639      	mov	r1, r7
 801a4b8:	4648      	mov	r0, r9
 801a4ba:	d107      	bne.n	801a4cc <_dtoa_r+0xadc>
 801a4bc:	f000 f914 	bl	801a6e8 <__multadd>
 801a4c0:	4607      	mov	r7, r0
 801a4c2:	4605      	mov	r5, r0
 801a4c4:	9b00      	ldr	r3, [sp, #0]
 801a4c6:	3301      	adds	r3, #1
 801a4c8:	9300      	str	r3, [sp, #0]
 801a4ca:	e777      	b.n	801a3bc <_dtoa_r+0x9cc>
 801a4cc:	f000 f90c 	bl	801a6e8 <__multadd>
 801a4d0:	4629      	mov	r1, r5
 801a4d2:	4607      	mov	r7, r0
 801a4d4:	2300      	movs	r3, #0
 801a4d6:	220a      	movs	r2, #10
 801a4d8:	4648      	mov	r0, r9
 801a4da:	f000 f905 	bl	801a6e8 <__multadd>
 801a4de:	4605      	mov	r5, r0
 801a4e0:	e7f0      	b.n	801a4c4 <_dtoa_r+0xad4>
 801a4e2:	f1bb 0f00 	cmp.w	fp, #0
 801a4e6:	bfcc      	ite	gt
 801a4e8:	465e      	movgt	r6, fp
 801a4ea:	2601      	movle	r6, #1
 801a4ec:	4456      	add	r6, sl
 801a4ee:	2700      	movs	r7, #0
 801a4f0:	9902      	ldr	r1, [sp, #8]
 801a4f2:	9300      	str	r3, [sp, #0]
 801a4f4:	2201      	movs	r2, #1
 801a4f6:	4648      	mov	r0, r9
 801a4f8:	f000 fa9a 	bl	801aa30 <__lshift>
 801a4fc:	4621      	mov	r1, r4
 801a4fe:	9002      	str	r0, [sp, #8]
 801a500:	f000 fb02 	bl	801ab08 <__mcmp>
 801a504:	2800      	cmp	r0, #0
 801a506:	dcb4      	bgt.n	801a472 <_dtoa_r+0xa82>
 801a508:	d102      	bne.n	801a510 <_dtoa_r+0xb20>
 801a50a:	9b00      	ldr	r3, [sp, #0]
 801a50c:	07db      	lsls	r3, r3, #31
 801a50e:	d4b0      	bmi.n	801a472 <_dtoa_r+0xa82>
 801a510:	4633      	mov	r3, r6
 801a512:	461e      	mov	r6, r3
 801a514:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a518:	2a30      	cmp	r2, #48	@ 0x30
 801a51a:	d0fa      	beq.n	801a512 <_dtoa_r+0xb22>
 801a51c:	e4b5      	b.n	8019e8a <_dtoa_r+0x49a>
 801a51e:	459a      	cmp	sl, r3
 801a520:	d1a8      	bne.n	801a474 <_dtoa_r+0xa84>
 801a522:	2331      	movs	r3, #49	@ 0x31
 801a524:	f108 0801 	add.w	r8, r8, #1
 801a528:	f88a 3000 	strb.w	r3, [sl]
 801a52c:	e4ad      	b.n	8019e8a <_dtoa_r+0x49a>
 801a52e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801a530:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801a58c <_dtoa_r+0xb9c>
 801a534:	b11b      	cbz	r3, 801a53e <_dtoa_r+0xb4e>
 801a536:	f10a 0308 	add.w	r3, sl, #8
 801a53a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801a53c:	6013      	str	r3, [r2, #0]
 801a53e:	4650      	mov	r0, sl
 801a540:	b017      	add	sp, #92	@ 0x5c
 801a542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a546:	9b07      	ldr	r3, [sp, #28]
 801a548:	2b01      	cmp	r3, #1
 801a54a:	f77f ae2e 	ble.w	801a1aa <_dtoa_r+0x7ba>
 801a54e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a550:	9308      	str	r3, [sp, #32]
 801a552:	2001      	movs	r0, #1
 801a554:	e64d      	b.n	801a1f2 <_dtoa_r+0x802>
 801a556:	f1bb 0f00 	cmp.w	fp, #0
 801a55a:	f77f aed9 	ble.w	801a310 <_dtoa_r+0x920>
 801a55e:	4656      	mov	r6, sl
 801a560:	9802      	ldr	r0, [sp, #8]
 801a562:	4621      	mov	r1, r4
 801a564:	f7ff f9bb 	bl	80198de <quorem>
 801a568:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801a56c:	f806 3b01 	strb.w	r3, [r6], #1
 801a570:	eba6 020a 	sub.w	r2, r6, sl
 801a574:	4593      	cmp	fp, r2
 801a576:	ddb4      	ble.n	801a4e2 <_dtoa_r+0xaf2>
 801a578:	9902      	ldr	r1, [sp, #8]
 801a57a:	2300      	movs	r3, #0
 801a57c:	220a      	movs	r2, #10
 801a57e:	4648      	mov	r0, r9
 801a580:	f000 f8b2 	bl	801a6e8 <__multadd>
 801a584:	9002      	str	r0, [sp, #8]
 801a586:	e7eb      	b.n	801a560 <_dtoa_r+0xb70>
 801a588:	0801ccf4 	.word	0x0801ccf4
 801a58c:	0801cc78 	.word	0x0801cc78

0801a590 <_free_r>:
 801a590:	b538      	push	{r3, r4, r5, lr}
 801a592:	4605      	mov	r5, r0
 801a594:	2900      	cmp	r1, #0
 801a596:	d041      	beq.n	801a61c <_free_r+0x8c>
 801a598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a59c:	1f0c      	subs	r4, r1, #4
 801a59e:	2b00      	cmp	r3, #0
 801a5a0:	bfb8      	it	lt
 801a5a2:	18e4      	addlt	r4, r4, r3
 801a5a4:	f7fe fb02 	bl	8018bac <__malloc_lock>
 801a5a8:	4a1d      	ldr	r2, [pc, #116]	@ (801a620 <_free_r+0x90>)
 801a5aa:	6813      	ldr	r3, [r2, #0]
 801a5ac:	b933      	cbnz	r3, 801a5bc <_free_r+0x2c>
 801a5ae:	6063      	str	r3, [r4, #4]
 801a5b0:	6014      	str	r4, [r2, #0]
 801a5b2:	4628      	mov	r0, r5
 801a5b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a5b8:	f7fe bafe 	b.w	8018bb8 <__malloc_unlock>
 801a5bc:	42a3      	cmp	r3, r4
 801a5be:	d908      	bls.n	801a5d2 <_free_r+0x42>
 801a5c0:	6820      	ldr	r0, [r4, #0]
 801a5c2:	1821      	adds	r1, r4, r0
 801a5c4:	428b      	cmp	r3, r1
 801a5c6:	bf01      	itttt	eq
 801a5c8:	6819      	ldreq	r1, [r3, #0]
 801a5ca:	685b      	ldreq	r3, [r3, #4]
 801a5cc:	1809      	addeq	r1, r1, r0
 801a5ce:	6021      	streq	r1, [r4, #0]
 801a5d0:	e7ed      	b.n	801a5ae <_free_r+0x1e>
 801a5d2:	461a      	mov	r2, r3
 801a5d4:	685b      	ldr	r3, [r3, #4]
 801a5d6:	b10b      	cbz	r3, 801a5dc <_free_r+0x4c>
 801a5d8:	42a3      	cmp	r3, r4
 801a5da:	d9fa      	bls.n	801a5d2 <_free_r+0x42>
 801a5dc:	6811      	ldr	r1, [r2, #0]
 801a5de:	1850      	adds	r0, r2, r1
 801a5e0:	42a0      	cmp	r0, r4
 801a5e2:	d10b      	bne.n	801a5fc <_free_r+0x6c>
 801a5e4:	6820      	ldr	r0, [r4, #0]
 801a5e6:	4401      	add	r1, r0
 801a5e8:	1850      	adds	r0, r2, r1
 801a5ea:	4283      	cmp	r3, r0
 801a5ec:	6011      	str	r1, [r2, #0]
 801a5ee:	d1e0      	bne.n	801a5b2 <_free_r+0x22>
 801a5f0:	6818      	ldr	r0, [r3, #0]
 801a5f2:	685b      	ldr	r3, [r3, #4]
 801a5f4:	6053      	str	r3, [r2, #4]
 801a5f6:	4408      	add	r0, r1
 801a5f8:	6010      	str	r0, [r2, #0]
 801a5fa:	e7da      	b.n	801a5b2 <_free_r+0x22>
 801a5fc:	d902      	bls.n	801a604 <_free_r+0x74>
 801a5fe:	230c      	movs	r3, #12
 801a600:	602b      	str	r3, [r5, #0]
 801a602:	e7d6      	b.n	801a5b2 <_free_r+0x22>
 801a604:	6820      	ldr	r0, [r4, #0]
 801a606:	1821      	adds	r1, r4, r0
 801a608:	428b      	cmp	r3, r1
 801a60a:	bf04      	itt	eq
 801a60c:	6819      	ldreq	r1, [r3, #0]
 801a60e:	685b      	ldreq	r3, [r3, #4]
 801a610:	6063      	str	r3, [r4, #4]
 801a612:	bf04      	itt	eq
 801a614:	1809      	addeq	r1, r1, r0
 801a616:	6021      	streq	r1, [r4, #0]
 801a618:	6054      	str	r4, [r2, #4]
 801a61a:	e7ca      	b.n	801a5b2 <_free_r+0x22>
 801a61c:	bd38      	pop	{r3, r4, r5, pc}
 801a61e:	bf00      	nop
 801a620:	200025d8 	.word	0x200025d8

0801a624 <_Balloc>:
 801a624:	b570      	push	{r4, r5, r6, lr}
 801a626:	69c6      	ldr	r6, [r0, #28]
 801a628:	4604      	mov	r4, r0
 801a62a:	460d      	mov	r5, r1
 801a62c:	b976      	cbnz	r6, 801a64c <_Balloc+0x28>
 801a62e:	2010      	movs	r0, #16
 801a630:	f7fe fa0a 	bl	8018a48 <malloc>
 801a634:	4602      	mov	r2, r0
 801a636:	61e0      	str	r0, [r4, #28]
 801a638:	b920      	cbnz	r0, 801a644 <_Balloc+0x20>
 801a63a:	4b18      	ldr	r3, [pc, #96]	@ (801a69c <_Balloc+0x78>)
 801a63c:	4818      	ldr	r0, [pc, #96]	@ (801a6a0 <_Balloc+0x7c>)
 801a63e:	216b      	movs	r1, #107	@ 0x6b
 801a640:	f000 ff44 	bl	801b4cc <__assert_func>
 801a644:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a648:	6006      	str	r6, [r0, #0]
 801a64a:	60c6      	str	r6, [r0, #12]
 801a64c:	69e6      	ldr	r6, [r4, #28]
 801a64e:	68f3      	ldr	r3, [r6, #12]
 801a650:	b183      	cbz	r3, 801a674 <_Balloc+0x50>
 801a652:	69e3      	ldr	r3, [r4, #28]
 801a654:	68db      	ldr	r3, [r3, #12]
 801a656:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a65a:	b9b8      	cbnz	r0, 801a68c <_Balloc+0x68>
 801a65c:	2101      	movs	r1, #1
 801a65e:	fa01 f605 	lsl.w	r6, r1, r5
 801a662:	1d72      	adds	r2, r6, #5
 801a664:	0092      	lsls	r2, r2, #2
 801a666:	4620      	mov	r0, r4
 801a668:	f000 ff4e 	bl	801b508 <_calloc_r>
 801a66c:	b160      	cbz	r0, 801a688 <_Balloc+0x64>
 801a66e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801a672:	e00e      	b.n	801a692 <_Balloc+0x6e>
 801a674:	2221      	movs	r2, #33	@ 0x21
 801a676:	2104      	movs	r1, #4
 801a678:	4620      	mov	r0, r4
 801a67a:	f000 ff45 	bl	801b508 <_calloc_r>
 801a67e:	69e3      	ldr	r3, [r4, #28]
 801a680:	60f0      	str	r0, [r6, #12]
 801a682:	68db      	ldr	r3, [r3, #12]
 801a684:	2b00      	cmp	r3, #0
 801a686:	d1e4      	bne.n	801a652 <_Balloc+0x2e>
 801a688:	2000      	movs	r0, #0
 801a68a:	bd70      	pop	{r4, r5, r6, pc}
 801a68c:	6802      	ldr	r2, [r0, #0]
 801a68e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a692:	2300      	movs	r3, #0
 801a694:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a698:	e7f7      	b.n	801a68a <_Balloc+0x66>
 801a69a:	bf00      	nop
 801a69c:	0801cc85 	.word	0x0801cc85
 801a6a0:	0801cd05 	.word	0x0801cd05

0801a6a4 <_Bfree>:
 801a6a4:	b570      	push	{r4, r5, r6, lr}
 801a6a6:	69c6      	ldr	r6, [r0, #28]
 801a6a8:	4605      	mov	r5, r0
 801a6aa:	460c      	mov	r4, r1
 801a6ac:	b976      	cbnz	r6, 801a6cc <_Bfree+0x28>
 801a6ae:	2010      	movs	r0, #16
 801a6b0:	f7fe f9ca 	bl	8018a48 <malloc>
 801a6b4:	4602      	mov	r2, r0
 801a6b6:	61e8      	str	r0, [r5, #28]
 801a6b8:	b920      	cbnz	r0, 801a6c4 <_Bfree+0x20>
 801a6ba:	4b09      	ldr	r3, [pc, #36]	@ (801a6e0 <_Bfree+0x3c>)
 801a6bc:	4809      	ldr	r0, [pc, #36]	@ (801a6e4 <_Bfree+0x40>)
 801a6be:	218f      	movs	r1, #143	@ 0x8f
 801a6c0:	f000 ff04 	bl	801b4cc <__assert_func>
 801a6c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a6c8:	6006      	str	r6, [r0, #0]
 801a6ca:	60c6      	str	r6, [r0, #12]
 801a6cc:	b13c      	cbz	r4, 801a6de <_Bfree+0x3a>
 801a6ce:	69eb      	ldr	r3, [r5, #28]
 801a6d0:	6862      	ldr	r2, [r4, #4]
 801a6d2:	68db      	ldr	r3, [r3, #12]
 801a6d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a6d8:	6021      	str	r1, [r4, #0]
 801a6da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801a6de:	bd70      	pop	{r4, r5, r6, pc}
 801a6e0:	0801cc85 	.word	0x0801cc85
 801a6e4:	0801cd05 	.word	0x0801cd05

0801a6e8 <__multadd>:
 801a6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6ec:	690d      	ldr	r5, [r1, #16]
 801a6ee:	4607      	mov	r7, r0
 801a6f0:	460c      	mov	r4, r1
 801a6f2:	461e      	mov	r6, r3
 801a6f4:	f101 0c14 	add.w	ip, r1, #20
 801a6f8:	2000      	movs	r0, #0
 801a6fa:	f8dc 3000 	ldr.w	r3, [ip]
 801a6fe:	b299      	uxth	r1, r3
 801a700:	fb02 6101 	mla	r1, r2, r1, r6
 801a704:	0c1e      	lsrs	r6, r3, #16
 801a706:	0c0b      	lsrs	r3, r1, #16
 801a708:	fb02 3306 	mla	r3, r2, r6, r3
 801a70c:	b289      	uxth	r1, r1
 801a70e:	3001      	adds	r0, #1
 801a710:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801a714:	4285      	cmp	r5, r0
 801a716:	f84c 1b04 	str.w	r1, [ip], #4
 801a71a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801a71e:	dcec      	bgt.n	801a6fa <__multadd+0x12>
 801a720:	b30e      	cbz	r6, 801a766 <__multadd+0x7e>
 801a722:	68a3      	ldr	r3, [r4, #8]
 801a724:	42ab      	cmp	r3, r5
 801a726:	dc19      	bgt.n	801a75c <__multadd+0x74>
 801a728:	6861      	ldr	r1, [r4, #4]
 801a72a:	4638      	mov	r0, r7
 801a72c:	3101      	adds	r1, #1
 801a72e:	f7ff ff79 	bl	801a624 <_Balloc>
 801a732:	4680      	mov	r8, r0
 801a734:	b928      	cbnz	r0, 801a742 <__multadd+0x5a>
 801a736:	4602      	mov	r2, r0
 801a738:	4b0c      	ldr	r3, [pc, #48]	@ (801a76c <__multadd+0x84>)
 801a73a:	480d      	ldr	r0, [pc, #52]	@ (801a770 <__multadd+0x88>)
 801a73c:	21ba      	movs	r1, #186	@ 0xba
 801a73e:	f000 fec5 	bl	801b4cc <__assert_func>
 801a742:	6922      	ldr	r2, [r4, #16]
 801a744:	3202      	adds	r2, #2
 801a746:	f104 010c 	add.w	r1, r4, #12
 801a74a:	0092      	lsls	r2, r2, #2
 801a74c:	300c      	adds	r0, #12
 801a74e:	f7ff f8b8 	bl	80198c2 <memcpy>
 801a752:	4621      	mov	r1, r4
 801a754:	4638      	mov	r0, r7
 801a756:	f7ff ffa5 	bl	801a6a4 <_Bfree>
 801a75a:	4644      	mov	r4, r8
 801a75c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801a760:	3501      	adds	r5, #1
 801a762:	615e      	str	r6, [r3, #20]
 801a764:	6125      	str	r5, [r4, #16]
 801a766:	4620      	mov	r0, r4
 801a768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a76c:	0801ccf4 	.word	0x0801ccf4
 801a770:	0801cd05 	.word	0x0801cd05

0801a774 <__hi0bits>:
 801a774:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801a778:	4603      	mov	r3, r0
 801a77a:	bf36      	itet	cc
 801a77c:	0403      	lslcc	r3, r0, #16
 801a77e:	2000      	movcs	r0, #0
 801a780:	2010      	movcc	r0, #16
 801a782:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801a786:	bf3c      	itt	cc
 801a788:	021b      	lslcc	r3, r3, #8
 801a78a:	3008      	addcc	r0, #8
 801a78c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801a790:	bf3c      	itt	cc
 801a792:	011b      	lslcc	r3, r3, #4
 801a794:	3004      	addcc	r0, #4
 801a796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801a79a:	bf3c      	itt	cc
 801a79c:	009b      	lslcc	r3, r3, #2
 801a79e:	3002      	addcc	r0, #2
 801a7a0:	2b00      	cmp	r3, #0
 801a7a2:	db05      	blt.n	801a7b0 <__hi0bits+0x3c>
 801a7a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801a7a8:	f100 0001 	add.w	r0, r0, #1
 801a7ac:	bf08      	it	eq
 801a7ae:	2020      	moveq	r0, #32
 801a7b0:	4770      	bx	lr

0801a7b2 <__lo0bits>:
 801a7b2:	6803      	ldr	r3, [r0, #0]
 801a7b4:	4602      	mov	r2, r0
 801a7b6:	f013 0007 	ands.w	r0, r3, #7
 801a7ba:	d00b      	beq.n	801a7d4 <__lo0bits+0x22>
 801a7bc:	07d9      	lsls	r1, r3, #31
 801a7be:	d421      	bmi.n	801a804 <__lo0bits+0x52>
 801a7c0:	0798      	lsls	r0, r3, #30
 801a7c2:	bf49      	itett	mi
 801a7c4:	085b      	lsrmi	r3, r3, #1
 801a7c6:	089b      	lsrpl	r3, r3, #2
 801a7c8:	2001      	movmi	r0, #1
 801a7ca:	6013      	strmi	r3, [r2, #0]
 801a7cc:	bf5c      	itt	pl
 801a7ce:	6013      	strpl	r3, [r2, #0]
 801a7d0:	2002      	movpl	r0, #2
 801a7d2:	4770      	bx	lr
 801a7d4:	b299      	uxth	r1, r3
 801a7d6:	b909      	cbnz	r1, 801a7dc <__lo0bits+0x2a>
 801a7d8:	0c1b      	lsrs	r3, r3, #16
 801a7da:	2010      	movs	r0, #16
 801a7dc:	b2d9      	uxtb	r1, r3
 801a7de:	b909      	cbnz	r1, 801a7e4 <__lo0bits+0x32>
 801a7e0:	3008      	adds	r0, #8
 801a7e2:	0a1b      	lsrs	r3, r3, #8
 801a7e4:	0719      	lsls	r1, r3, #28
 801a7e6:	bf04      	itt	eq
 801a7e8:	091b      	lsreq	r3, r3, #4
 801a7ea:	3004      	addeq	r0, #4
 801a7ec:	0799      	lsls	r1, r3, #30
 801a7ee:	bf04      	itt	eq
 801a7f0:	089b      	lsreq	r3, r3, #2
 801a7f2:	3002      	addeq	r0, #2
 801a7f4:	07d9      	lsls	r1, r3, #31
 801a7f6:	d403      	bmi.n	801a800 <__lo0bits+0x4e>
 801a7f8:	085b      	lsrs	r3, r3, #1
 801a7fa:	f100 0001 	add.w	r0, r0, #1
 801a7fe:	d003      	beq.n	801a808 <__lo0bits+0x56>
 801a800:	6013      	str	r3, [r2, #0]
 801a802:	4770      	bx	lr
 801a804:	2000      	movs	r0, #0
 801a806:	4770      	bx	lr
 801a808:	2020      	movs	r0, #32
 801a80a:	4770      	bx	lr

0801a80c <__i2b>:
 801a80c:	b510      	push	{r4, lr}
 801a80e:	460c      	mov	r4, r1
 801a810:	2101      	movs	r1, #1
 801a812:	f7ff ff07 	bl	801a624 <_Balloc>
 801a816:	4602      	mov	r2, r0
 801a818:	b928      	cbnz	r0, 801a826 <__i2b+0x1a>
 801a81a:	4b05      	ldr	r3, [pc, #20]	@ (801a830 <__i2b+0x24>)
 801a81c:	4805      	ldr	r0, [pc, #20]	@ (801a834 <__i2b+0x28>)
 801a81e:	f240 1145 	movw	r1, #325	@ 0x145
 801a822:	f000 fe53 	bl	801b4cc <__assert_func>
 801a826:	2301      	movs	r3, #1
 801a828:	6144      	str	r4, [r0, #20]
 801a82a:	6103      	str	r3, [r0, #16]
 801a82c:	bd10      	pop	{r4, pc}
 801a82e:	bf00      	nop
 801a830:	0801ccf4 	.word	0x0801ccf4
 801a834:	0801cd05 	.word	0x0801cd05

0801a838 <__multiply>:
 801a838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a83c:	4617      	mov	r7, r2
 801a83e:	690a      	ldr	r2, [r1, #16]
 801a840:	693b      	ldr	r3, [r7, #16]
 801a842:	429a      	cmp	r2, r3
 801a844:	bfa8      	it	ge
 801a846:	463b      	movge	r3, r7
 801a848:	4689      	mov	r9, r1
 801a84a:	bfa4      	itt	ge
 801a84c:	460f      	movge	r7, r1
 801a84e:	4699      	movge	r9, r3
 801a850:	693d      	ldr	r5, [r7, #16]
 801a852:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801a856:	68bb      	ldr	r3, [r7, #8]
 801a858:	6879      	ldr	r1, [r7, #4]
 801a85a:	eb05 060a 	add.w	r6, r5, sl
 801a85e:	42b3      	cmp	r3, r6
 801a860:	b085      	sub	sp, #20
 801a862:	bfb8      	it	lt
 801a864:	3101      	addlt	r1, #1
 801a866:	f7ff fedd 	bl	801a624 <_Balloc>
 801a86a:	b930      	cbnz	r0, 801a87a <__multiply+0x42>
 801a86c:	4602      	mov	r2, r0
 801a86e:	4b41      	ldr	r3, [pc, #260]	@ (801a974 <__multiply+0x13c>)
 801a870:	4841      	ldr	r0, [pc, #260]	@ (801a978 <__multiply+0x140>)
 801a872:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801a876:	f000 fe29 	bl	801b4cc <__assert_func>
 801a87a:	f100 0414 	add.w	r4, r0, #20
 801a87e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801a882:	4623      	mov	r3, r4
 801a884:	2200      	movs	r2, #0
 801a886:	4573      	cmp	r3, lr
 801a888:	d320      	bcc.n	801a8cc <__multiply+0x94>
 801a88a:	f107 0814 	add.w	r8, r7, #20
 801a88e:	f109 0114 	add.w	r1, r9, #20
 801a892:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801a896:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801a89a:	9302      	str	r3, [sp, #8]
 801a89c:	1beb      	subs	r3, r5, r7
 801a89e:	3b15      	subs	r3, #21
 801a8a0:	f023 0303 	bic.w	r3, r3, #3
 801a8a4:	3304      	adds	r3, #4
 801a8a6:	3715      	adds	r7, #21
 801a8a8:	42bd      	cmp	r5, r7
 801a8aa:	bf38      	it	cc
 801a8ac:	2304      	movcc	r3, #4
 801a8ae:	9301      	str	r3, [sp, #4]
 801a8b0:	9b02      	ldr	r3, [sp, #8]
 801a8b2:	9103      	str	r1, [sp, #12]
 801a8b4:	428b      	cmp	r3, r1
 801a8b6:	d80c      	bhi.n	801a8d2 <__multiply+0x9a>
 801a8b8:	2e00      	cmp	r6, #0
 801a8ba:	dd03      	ble.n	801a8c4 <__multiply+0x8c>
 801a8bc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801a8c0:	2b00      	cmp	r3, #0
 801a8c2:	d055      	beq.n	801a970 <__multiply+0x138>
 801a8c4:	6106      	str	r6, [r0, #16]
 801a8c6:	b005      	add	sp, #20
 801a8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8cc:	f843 2b04 	str.w	r2, [r3], #4
 801a8d0:	e7d9      	b.n	801a886 <__multiply+0x4e>
 801a8d2:	f8b1 a000 	ldrh.w	sl, [r1]
 801a8d6:	f1ba 0f00 	cmp.w	sl, #0
 801a8da:	d01f      	beq.n	801a91c <__multiply+0xe4>
 801a8dc:	46c4      	mov	ip, r8
 801a8de:	46a1      	mov	r9, r4
 801a8e0:	2700      	movs	r7, #0
 801a8e2:	f85c 2b04 	ldr.w	r2, [ip], #4
 801a8e6:	f8d9 3000 	ldr.w	r3, [r9]
 801a8ea:	fa1f fb82 	uxth.w	fp, r2
 801a8ee:	b29b      	uxth	r3, r3
 801a8f0:	fb0a 330b 	mla	r3, sl, fp, r3
 801a8f4:	443b      	add	r3, r7
 801a8f6:	f8d9 7000 	ldr.w	r7, [r9]
 801a8fa:	0c12      	lsrs	r2, r2, #16
 801a8fc:	0c3f      	lsrs	r7, r7, #16
 801a8fe:	fb0a 7202 	mla	r2, sl, r2, r7
 801a902:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801a906:	b29b      	uxth	r3, r3
 801a908:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a90c:	4565      	cmp	r5, ip
 801a90e:	f849 3b04 	str.w	r3, [r9], #4
 801a912:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801a916:	d8e4      	bhi.n	801a8e2 <__multiply+0xaa>
 801a918:	9b01      	ldr	r3, [sp, #4]
 801a91a:	50e7      	str	r7, [r4, r3]
 801a91c:	9b03      	ldr	r3, [sp, #12]
 801a91e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801a922:	3104      	adds	r1, #4
 801a924:	f1b9 0f00 	cmp.w	r9, #0
 801a928:	d020      	beq.n	801a96c <__multiply+0x134>
 801a92a:	6823      	ldr	r3, [r4, #0]
 801a92c:	4647      	mov	r7, r8
 801a92e:	46a4      	mov	ip, r4
 801a930:	f04f 0a00 	mov.w	sl, #0
 801a934:	f8b7 b000 	ldrh.w	fp, [r7]
 801a938:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801a93c:	fb09 220b 	mla	r2, r9, fp, r2
 801a940:	4452      	add	r2, sl
 801a942:	b29b      	uxth	r3, r3
 801a944:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a948:	f84c 3b04 	str.w	r3, [ip], #4
 801a94c:	f857 3b04 	ldr.w	r3, [r7], #4
 801a950:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a954:	f8bc 3000 	ldrh.w	r3, [ip]
 801a958:	fb09 330a 	mla	r3, r9, sl, r3
 801a95c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801a960:	42bd      	cmp	r5, r7
 801a962:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a966:	d8e5      	bhi.n	801a934 <__multiply+0xfc>
 801a968:	9a01      	ldr	r2, [sp, #4]
 801a96a:	50a3      	str	r3, [r4, r2]
 801a96c:	3404      	adds	r4, #4
 801a96e:	e79f      	b.n	801a8b0 <__multiply+0x78>
 801a970:	3e01      	subs	r6, #1
 801a972:	e7a1      	b.n	801a8b8 <__multiply+0x80>
 801a974:	0801ccf4 	.word	0x0801ccf4
 801a978:	0801cd05 	.word	0x0801cd05

0801a97c <__pow5mult>:
 801a97c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a980:	4615      	mov	r5, r2
 801a982:	f012 0203 	ands.w	r2, r2, #3
 801a986:	4607      	mov	r7, r0
 801a988:	460e      	mov	r6, r1
 801a98a:	d007      	beq.n	801a99c <__pow5mult+0x20>
 801a98c:	4c25      	ldr	r4, [pc, #148]	@ (801aa24 <__pow5mult+0xa8>)
 801a98e:	3a01      	subs	r2, #1
 801a990:	2300      	movs	r3, #0
 801a992:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a996:	f7ff fea7 	bl	801a6e8 <__multadd>
 801a99a:	4606      	mov	r6, r0
 801a99c:	10ad      	asrs	r5, r5, #2
 801a99e:	d03d      	beq.n	801aa1c <__pow5mult+0xa0>
 801a9a0:	69fc      	ldr	r4, [r7, #28]
 801a9a2:	b97c      	cbnz	r4, 801a9c4 <__pow5mult+0x48>
 801a9a4:	2010      	movs	r0, #16
 801a9a6:	f7fe f84f 	bl	8018a48 <malloc>
 801a9aa:	4602      	mov	r2, r0
 801a9ac:	61f8      	str	r0, [r7, #28]
 801a9ae:	b928      	cbnz	r0, 801a9bc <__pow5mult+0x40>
 801a9b0:	4b1d      	ldr	r3, [pc, #116]	@ (801aa28 <__pow5mult+0xac>)
 801a9b2:	481e      	ldr	r0, [pc, #120]	@ (801aa2c <__pow5mult+0xb0>)
 801a9b4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801a9b8:	f000 fd88 	bl	801b4cc <__assert_func>
 801a9bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a9c0:	6004      	str	r4, [r0, #0]
 801a9c2:	60c4      	str	r4, [r0, #12]
 801a9c4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801a9c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a9cc:	b94c      	cbnz	r4, 801a9e2 <__pow5mult+0x66>
 801a9ce:	f240 2171 	movw	r1, #625	@ 0x271
 801a9d2:	4638      	mov	r0, r7
 801a9d4:	f7ff ff1a 	bl	801a80c <__i2b>
 801a9d8:	2300      	movs	r3, #0
 801a9da:	f8c8 0008 	str.w	r0, [r8, #8]
 801a9de:	4604      	mov	r4, r0
 801a9e0:	6003      	str	r3, [r0, #0]
 801a9e2:	f04f 0900 	mov.w	r9, #0
 801a9e6:	07eb      	lsls	r3, r5, #31
 801a9e8:	d50a      	bpl.n	801aa00 <__pow5mult+0x84>
 801a9ea:	4631      	mov	r1, r6
 801a9ec:	4622      	mov	r2, r4
 801a9ee:	4638      	mov	r0, r7
 801a9f0:	f7ff ff22 	bl	801a838 <__multiply>
 801a9f4:	4631      	mov	r1, r6
 801a9f6:	4680      	mov	r8, r0
 801a9f8:	4638      	mov	r0, r7
 801a9fa:	f7ff fe53 	bl	801a6a4 <_Bfree>
 801a9fe:	4646      	mov	r6, r8
 801aa00:	106d      	asrs	r5, r5, #1
 801aa02:	d00b      	beq.n	801aa1c <__pow5mult+0xa0>
 801aa04:	6820      	ldr	r0, [r4, #0]
 801aa06:	b938      	cbnz	r0, 801aa18 <__pow5mult+0x9c>
 801aa08:	4622      	mov	r2, r4
 801aa0a:	4621      	mov	r1, r4
 801aa0c:	4638      	mov	r0, r7
 801aa0e:	f7ff ff13 	bl	801a838 <__multiply>
 801aa12:	6020      	str	r0, [r4, #0]
 801aa14:	f8c0 9000 	str.w	r9, [r0]
 801aa18:	4604      	mov	r4, r0
 801aa1a:	e7e4      	b.n	801a9e6 <__pow5mult+0x6a>
 801aa1c:	4630      	mov	r0, r6
 801aa1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aa22:	bf00      	nop
 801aa24:	0801cdb8 	.word	0x0801cdb8
 801aa28:	0801cc85 	.word	0x0801cc85
 801aa2c:	0801cd05 	.word	0x0801cd05

0801aa30 <__lshift>:
 801aa30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aa34:	460c      	mov	r4, r1
 801aa36:	6849      	ldr	r1, [r1, #4]
 801aa38:	6923      	ldr	r3, [r4, #16]
 801aa3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801aa3e:	68a3      	ldr	r3, [r4, #8]
 801aa40:	4607      	mov	r7, r0
 801aa42:	4691      	mov	r9, r2
 801aa44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801aa48:	f108 0601 	add.w	r6, r8, #1
 801aa4c:	42b3      	cmp	r3, r6
 801aa4e:	db0b      	blt.n	801aa68 <__lshift+0x38>
 801aa50:	4638      	mov	r0, r7
 801aa52:	f7ff fde7 	bl	801a624 <_Balloc>
 801aa56:	4605      	mov	r5, r0
 801aa58:	b948      	cbnz	r0, 801aa6e <__lshift+0x3e>
 801aa5a:	4602      	mov	r2, r0
 801aa5c:	4b28      	ldr	r3, [pc, #160]	@ (801ab00 <__lshift+0xd0>)
 801aa5e:	4829      	ldr	r0, [pc, #164]	@ (801ab04 <__lshift+0xd4>)
 801aa60:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801aa64:	f000 fd32 	bl	801b4cc <__assert_func>
 801aa68:	3101      	adds	r1, #1
 801aa6a:	005b      	lsls	r3, r3, #1
 801aa6c:	e7ee      	b.n	801aa4c <__lshift+0x1c>
 801aa6e:	2300      	movs	r3, #0
 801aa70:	f100 0114 	add.w	r1, r0, #20
 801aa74:	f100 0210 	add.w	r2, r0, #16
 801aa78:	4618      	mov	r0, r3
 801aa7a:	4553      	cmp	r3, sl
 801aa7c:	db33      	blt.n	801aae6 <__lshift+0xb6>
 801aa7e:	6920      	ldr	r0, [r4, #16]
 801aa80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801aa84:	f104 0314 	add.w	r3, r4, #20
 801aa88:	f019 091f 	ands.w	r9, r9, #31
 801aa8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801aa90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801aa94:	d02b      	beq.n	801aaee <__lshift+0xbe>
 801aa96:	f1c9 0e20 	rsb	lr, r9, #32
 801aa9a:	468a      	mov	sl, r1
 801aa9c:	2200      	movs	r2, #0
 801aa9e:	6818      	ldr	r0, [r3, #0]
 801aaa0:	fa00 f009 	lsl.w	r0, r0, r9
 801aaa4:	4310      	orrs	r0, r2
 801aaa6:	f84a 0b04 	str.w	r0, [sl], #4
 801aaaa:	f853 2b04 	ldr.w	r2, [r3], #4
 801aaae:	459c      	cmp	ip, r3
 801aab0:	fa22 f20e 	lsr.w	r2, r2, lr
 801aab4:	d8f3      	bhi.n	801aa9e <__lshift+0x6e>
 801aab6:	ebac 0304 	sub.w	r3, ip, r4
 801aaba:	3b15      	subs	r3, #21
 801aabc:	f023 0303 	bic.w	r3, r3, #3
 801aac0:	3304      	adds	r3, #4
 801aac2:	f104 0015 	add.w	r0, r4, #21
 801aac6:	4560      	cmp	r0, ip
 801aac8:	bf88      	it	hi
 801aaca:	2304      	movhi	r3, #4
 801aacc:	50ca      	str	r2, [r1, r3]
 801aace:	b10a      	cbz	r2, 801aad4 <__lshift+0xa4>
 801aad0:	f108 0602 	add.w	r6, r8, #2
 801aad4:	3e01      	subs	r6, #1
 801aad6:	4638      	mov	r0, r7
 801aad8:	612e      	str	r6, [r5, #16]
 801aada:	4621      	mov	r1, r4
 801aadc:	f7ff fde2 	bl	801a6a4 <_Bfree>
 801aae0:	4628      	mov	r0, r5
 801aae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aae6:	f842 0f04 	str.w	r0, [r2, #4]!
 801aaea:	3301      	adds	r3, #1
 801aaec:	e7c5      	b.n	801aa7a <__lshift+0x4a>
 801aaee:	3904      	subs	r1, #4
 801aaf0:	f853 2b04 	ldr.w	r2, [r3], #4
 801aaf4:	f841 2f04 	str.w	r2, [r1, #4]!
 801aaf8:	459c      	cmp	ip, r3
 801aafa:	d8f9      	bhi.n	801aaf0 <__lshift+0xc0>
 801aafc:	e7ea      	b.n	801aad4 <__lshift+0xa4>
 801aafe:	bf00      	nop
 801ab00:	0801ccf4 	.word	0x0801ccf4
 801ab04:	0801cd05 	.word	0x0801cd05

0801ab08 <__mcmp>:
 801ab08:	690a      	ldr	r2, [r1, #16]
 801ab0a:	4603      	mov	r3, r0
 801ab0c:	6900      	ldr	r0, [r0, #16]
 801ab0e:	1a80      	subs	r0, r0, r2
 801ab10:	b530      	push	{r4, r5, lr}
 801ab12:	d10e      	bne.n	801ab32 <__mcmp+0x2a>
 801ab14:	3314      	adds	r3, #20
 801ab16:	3114      	adds	r1, #20
 801ab18:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801ab1c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801ab20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801ab24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801ab28:	4295      	cmp	r5, r2
 801ab2a:	d003      	beq.n	801ab34 <__mcmp+0x2c>
 801ab2c:	d205      	bcs.n	801ab3a <__mcmp+0x32>
 801ab2e:	f04f 30ff 	mov.w	r0, #4294967295
 801ab32:	bd30      	pop	{r4, r5, pc}
 801ab34:	42a3      	cmp	r3, r4
 801ab36:	d3f3      	bcc.n	801ab20 <__mcmp+0x18>
 801ab38:	e7fb      	b.n	801ab32 <__mcmp+0x2a>
 801ab3a:	2001      	movs	r0, #1
 801ab3c:	e7f9      	b.n	801ab32 <__mcmp+0x2a>
	...

0801ab40 <__mdiff>:
 801ab40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab44:	4689      	mov	r9, r1
 801ab46:	4606      	mov	r6, r0
 801ab48:	4611      	mov	r1, r2
 801ab4a:	4648      	mov	r0, r9
 801ab4c:	4614      	mov	r4, r2
 801ab4e:	f7ff ffdb 	bl	801ab08 <__mcmp>
 801ab52:	1e05      	subs	r5, r0, #0
 801ab54:	d112      	bne.n	801ab7c <__mdiff+0x3c>
 801ab56:	4629      	mov	r1, r5
 801ab58:	4630      	mov	r0, r6
 801ab5a:	f7ff fd63 	bl	801a624 <_Balloc>
 801ab5e:	4602      	mov	r2, r0
 801ab60:	b928      	cbnz	r0, 801ab6e <__mdiff+0x2e>
 801ab62:	4b3f      	ldr	r3, [pc, #252]	@ (801ac60 <__mdiff+0x120>)
 801ab64:	f240 2137 	movw	r1, #567	@ 0x237
 801ab68:	483e      	ldr	r0, [pc, #248]	@ (801ac64 <__mdiff+0x124>)
 801ab6a:	f000 fcaf 	bl	801b4cc <__assert_func>
 801ab6e:	2301      	movs	r3, #1
 801ab70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801ab74:	4610      	mov	r0, r2
 801ab76:	b003      	add	sp, #12
 801ab78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab7c:	bfbc      	itt	lt
 801ab7e:	464b      	movlt	r3, r9
 801ab80:	46a1      	movlt	r9, r4
 801ab82:	4630      	mov	r0, r6
 801ab84:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801ab88:	bfba      	itte	lt
 801ab8a:	461c      	movlt	r4, r3
 801ab8c:	2501      	movlt	r5, #1
 801ab8e:	2500      	movge	r5, #0
 801ab90:	f7ff fd48 	bl	801a624 <_Balloc>
 801ab94:	4602      	mov	r2, r0
 801ab96:	b918      	cbnz	r0, 801aba0 <__mdiff+0x60>
 801ab98:	4b31      	ldr	r3, [pc, #196]	@ (801ac60 <__mdiff+0x120>)
 801ab9a:	f240 2145 	movw	r1, #581	@ 0x245
 801ab9e:	e7e3      	b.n	801ab68 <__mdiff+0x28>
 801aba0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801aba4:	6926      	ldr	r6, [r4, #16]
 801aba6:	60c5      	str	r5, [r0, #12]
 801aba8:	f109 0310 	add.w	r3, r9, #16
 801abac:	f109 0514 	add.w	r5, r9, #20
 801abb0:	f104 0e14 	add.w	lr, r4, #20
 801abb4:	f100 0b14 	add.w	fp, r0, #20
 801abb8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801abbc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801abc0:	9301      	str	r3, [sp, #4]
 801abc2:	46d9      	mov	r9, fp
 801abc4:	f04f 0c00 	mov.w	ip, #0
 801abc8:	9b01      	ldr	r3, [sp, #4]
 801abca:	f85e 0b04 	ldr.w	r0, [lr], #4
 801abce:	f853 af04 	ldr.w	sl, [r3, #4]!
 801abd2:	9301      	str	r3, [sp, #4]
 801abd4:	fa1f f38a 	uxth.w	r3, sl
 801abd8:	4619      	mov	r1, r3
 801abda:	b283      	uxth	r3, r0
 801abdc:	1acb      	subs	r3, r1, r3
 801abde:	0c00      	lsrs	r0, r0, #16
 801abe0:	4463      	add	r3, ip
 801abe2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801abe6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801abea:	b29b      	uxth	r3, r3
 801abec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801abf0:	4576      	cmp	r6, lr
 801abf2:	f849 3b04 	str.w	r3, [r9], #4
 801abf6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801abfa:	d8e5      	bhi.n	801abc8 <__mdiff+0x88>
 801abfc:	1b33      	subs	r3, r6, r4
 801abfe:	3b15      	subs	r3, #21
 801ac00:	f023 0303 	bic.w	r3, r3, #3
 801ac04:	3415      	adds	r4, #21
 801ac06:	3304      	adds	r3, #4
 801ac08:	42a6      	cmp	r6, r4
 801ac0a:	bf38      	it	cc
 801ac0c:	2304      	movcc	r3, #4
 801ac0e:	441d      	add	r5, r3
 801ac10:	445b      	add	r3, fp
 801ac12:	461e      	mov	r6, r3
 801ac14:	462c      	mov	r4, r5
 801ac16:	4544      	cmp	r4, r8
 801ac18:	d30e      	bcc.n	801ac38 <__mdiff+0xf8>
 801ac1a:	f108 0103 	add.w	r1, r8, #3
 801ac1e:	1b49      	subs	r1, r1, r5
 801ac20:	f021 0103 	bic.w	r1, r1, #3
 801ac24:	3d03      	subs	r5, #3
 801ac26:	45a8      	cmp	r8, r5
 801ac28:	bf38      	it	cc
 801ac2a:	2100      	movcc	r1, #0
 801ac2c:	440b      	add	r3, r1
 801ac2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801ac32:	b191      	cbz	r1, 801ac5a <__mdiff+0x11a>
 801ac34:	6117      	str	r7, [r2, #16]
 801ac36:	e79d      	b.n	801ab74 <__mdiff+0x34>
 801ac38:	f854 1b04 	ldr.w	r1, [r4], #4
 801ac3c:	46e6      	mov	lr, ip
 801ac3e:	0c08      	lsrs	r0, r1, #16
 801ac40:	fa1c fc81 	uxtah	ip, ip, r1
 801ac44:	4471      	add	r1, lr
 801ac46:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801ac4a:	b289      	uxth	r1, r1
 801ac4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801ac50:	f846 1b04 	str.w	r1, [r6], #4
 801ac54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801ac58:	e7dd      	b.n	801ac16 <__mdiff+0xd6>
 801ac5a:	3f01      	subs	r7, #1
 801ac5c:	e7e7      	b.n	801ac2e <__mdiff+0xee>
 801ac5e:	bf00      	nop
 801ac60:	0801ccf4 	.word	0x0801ccf4
 801ac64:	0801cd05 	.word	0x0801cd05

0801ac68 <__d2b>:
 801ac68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801ac6c:	460f      	mov	r7, r1
 801ac6e:	2101      	movs	r1, #1
 801ac70:	ec59 8b10 	vmov	r8, r9, d0
 801ac74:	4616      	mov	r6, r2
 801ac76:	f7ff fcd5 	bl	801a624 <_Balloc>
 801ac7a:	4604      	mov	r4, r0
 801ac7c:	b930      	cbnz	r0, 801ac8c <__d2b+0x24>
 801ac7e:	4602      	mov	r2, r0
 801ac80:	4b23      	ldr	r3, [pc, #140]	@ (801ad10 <__d2b+0xa8>)
 801ac82:	4824      	ldr	r0, [pc, #144]	@ (801ad14 <__d2b+0xac>)
 801ac84:	f240 310f 	movw	r1, #783	@ 0x30f
 801ac88:	f000 fc20 	bl	801b4cc <__assert_func>
 801ac8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801ac90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ac94:	b10d      	cbz	r5, 801ac9a <__d2b+0x32>
 801ac96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801ac9a:	9301      	str	r3, [sp, #4]
 801ac9c:	f1b8 0300 	subs.w	r3, r8, #0
 801aca0:	d023      	beq.n	801acea <__d2b+0x82>
 801aca2:	4668      	mov	r0, sp
 801aca4:	9300      	str	r3, [sp, #0]
 801aca6:	f7ff fd84 	bl	801a7b2 <__lo0bits>
 801acaa:	e9dd 1200 	ldrd	r1, r2, [sp]
 801acae:	b1d0      	cbz	r0, 801ace6 <__d2b+0x7e>
 801acb0:	f1c0 0320 	rsb	r3, r0, #32
 801acb4:	fa02 f303 	lsl.w	r3, r2, r3
 801acb8:	430b      	orrs	r3, r1
 801acba:	40c2      	lsrs	r2, r0
 801acbc:	6163      	str	r3, [r4, #20]
 801acbe:	9201      	str	r2, [sp, #4]
 801acc0:	9b01      	ldr	r3, [sp, #4]
 801acc2:	61a3      	str	r3, [r4, #24]
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	bf0c      	ite	eq
 801acc8:	2201      	moveq	r2, #1
 801acca:	2202      	movne	r2, #2
 801accc:	6122      	str	r2, [r4, #16]
 801acce:	b1a5      	cbz	r5, 801acfa <__d2b+0x92>
 801acd0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801acd4:	4405      	add	r5, r0
 801acd6:	603d      	str	r5, [r7, #0]
 801acd8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801acdc:	6030      	str	r0, [r6, #0]
 801acde:	4620      	mov	r0, r4
 801ace0:	b003      	add	sp, #12
 801ace2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ace6:	6161      	str	r1, [r4, #20]
 801ace8:	e7ea      	b.n	801acc0 <__d2b+0x58>
 801acea:	a801      	add	r0, sp, #4
 801acec:	f7ff fd61 	bl	801a7b2 <__lo0bits>
 801acf0:	9b01      	ldr	r3, [sp, #4]
 801acf2:	6163      	str	r3, [r4, #20]
 801acf4:	3020      	adds	r0, #32
 801acf6:	2201      	movs	r2, #1
 801acf8:	e7e8      	b.n	801accc <__d2b+0x64>
 801acfa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801acfe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801ad02:	6038      	str	r0, [r7, #0]
 801ad04:	6918      	ldr	r0, [r3, #16]
 801ad06:	f7ff fd35 	bl	801a774 <__hi0bits>
 801ad0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ad0e:	e7e5      	b.n	801acdc <__d2b+0x74>
 801ad10:	0801ccf4 	.word	0x0801ccf4
 801ad14:	0801cd05 	.word	0x0801cd05

0801ad18 <__ssputs_r>:
 801ad18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ad1c:	688e      	ldr	r6, [r1, #8]
 801ad1e:	461f      	mov	r7, r3
 801ad20:	42be      	cmp	r6, r7
 801ad22:	680b      	ldr	r3, [r1, #0]
 801ad24:	4682      	mov	sl, r0
 801ad26:	460c      	mov	r4, r1
 801ad28:	4690      	mov	r8, r2
 801ad2a:	d82d      	bhi.n	801ad88 <__ssputs_r+0x70>
 801ad2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ad30:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801ad34:	d026      	beq.n	801ad84 <__ssputs_r+0x6c>
 801ad36:	6965      	ldr	r5, [r4, #20]
 801ad38:	6909      	ldr	r1, [r1, #16]
 801ad3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ad3e:	eba3 0901 	sub.w	r9, r3, r1
 801ad42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ad46:	1c7b      	adds	r3, r7, #1
 801ad48:	444b      	add	r3, r9
 801ad4a:	106d      	asrs	r5, r5, #1
 801ad4c:	429d      	cmp	r5, r3
 801ad4e:	bf38      	it	cc
 801ad50:	461d      	movcc	r5, r3
 801ad52:	0553      	lsls	r3, r2, #21
 801ad54:	d527      	bpl.n	801ada6 <__ssputs_r+0x8e>
 801ad56:	4629      	mov	r1, r5
 801ad58:	f7fd fea8 	bl	8018aac <_malloc_r>
 801ad5c:	4606      	mov	r6, r0
 801ad5e:	b360      	cbz	r0, 801adba <__ssputs_r+0xa2>
 801ad60:	6921      	ldr	r1, [r4, #16]
 801ad62:	464a      	mov	r2, r9
 801ad64:	f7fe fdad 	bl	80198c2 <memcpy>
 801ad68:	89a3      	ldrh	r3, [r4, #12]
 801ad6a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801ad6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ad72:	81a3      	strh	r3, [r4, #12]
 801ad74:	6126      	str	r6, [r4, #16]
 801ad76:	6165      	str	r5, [r4, #20]
 801ad78:	444e      	add	r6, r9
 801ad7a:	eba5 0509 	sub.w	r5, r5, r9
 801ad7e:	6026      	str	r6, [r4, #0]
 801ad80:	60a5      	str	r5, [r4, #8]
 801ad82:	463e      	mov	r6, r7
 801ad84:	42be      	cmp	r6, r7
 801ad86:	d900      	bls.n	801ad8a <__ssputs_r+0x72>
 801ad88:	463e      	mov	r6, r7
 801ad8a:	6820      	ldr	r0, [r4, #0]
 801ad8c:	4632      	mov	r2, r6
 801ad8e:	4641      	mov	r1, r8
 801ad90:	f7fe fca9 	bl	80196e6 <memmove>
 801ad94:	68a3      	ldr	r3, [r4, #8]
 801ad96:	1b9b      	subs	r3, r3, r6
 801ad98:	60a3      	str	r3, [r4, #8]
 801ad9a:	6823      	ldr	r3, [r4, #0]
 801ad9c:	4433      	add	r3, r6
 801ad9e:	6023      	str	r3, [r4, #0]
 801ada0:	2000      	movs	r0, #0
 801ada2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ada6:	462a      	mov	r2, r5
 801ada8:	f000 fbd4 	bl	801b554 <_realloc_r>
 801adac:	4606      	mov	r6, r0
 801adae:	2800      	cmp	r0, #0
 801adb0:	d1e0      	bne.n	801ad74 <__ssputs_r+0x5c>
 801adb2:	6921      	ldr	r1, [r4, #16]
 801adb4:	4650      	mov	r0, sl
 801adb6:	f7ff fbeb 	bl	801a590 <_free_r>
 801adba:	230c      	movs	r3, #12
 801adbc:	f8ca 3000 	str.w	r3, [sl]
 801adc0:	89a3      	ldrh	r3, [r4, #12]
 801adc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801adc6:	81a3      	strh	r3, [r4, #12]
 801adc8:	f04f 30ff 	mov.w	r0, #4294967295
 801adcc:	e7e9      	b.n	801ada2 <__ssputs_r+0x8a>
	...

0801add0 <_svfiprintf_r>:
 801add0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801add4:	4698      	mov	r8, r3
 801add6:	898b      	ldrh	r3, [r1, #12]
 801add8:	061b      	lsls	r3, r3, #24
 801adda:	b09d      	sub	sp, #116	@ 0x74
 801addc:	4607      	mov	r7, r0
 801adde:	460d      	mov	r5, r1
 801ade0:	4614      	mov	r4, r2
 801ade2:	d510      	bpl.n	801ae06 <_svfiprintf_r+0x36>
 801ade4:	690b      	ldr	r3, [r1, #16]
 801ade6:	b973      	cbnz	r3, 801ae06 <_svfiprintf_r+0x36>
 801ade8:	2140      	movs	r1, #64	@ 0x40
 801adea:	f7fd fe5f 	bl	8018aac <_malloc_r>
 801adee:	6028      	str	r0, [r5, #0]
 801adf0:	6128      	str	r0, [r5, #16]
 801adf2:	b930      	cbnz	r0, 801ae02 <_svfiprintf_r+0x32>
 801adf4:	230c      	movs	r3, #12
 801adf6:	603b      	str	r3, [r7, #0]
 801adf8:	f04f 30ff 	mov.w	r0, #4294967295
 801adfc:	b01d      	add	sp, #116	@ 0x74
 801adfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae02:	2340      	movs	r3, #64	@ 0x40
 801ae04:	616b      	str	r3, [r5, #20]
 801ae06:	2300      	movs	r3, #0
 801ae08:	9309      	str	r3, [sp, #36]	@ 0x24
 801ae0a:	2320      	movs	r3, #32
 801ae0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ae10:	f8cd 800c 	str.w	r8, [sp, #12]
 801ae14:	2330      	movs	r3, #48	@ 0x30
 801ae16:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801afb4 <_svfiprintf_r+0x1e4>
 801ae1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801ae1e:	f04f 0901 	mov.w	r9, #1
 801ae22:	4623      	mov	r3, r4
 801ae24:	469a      	mov	sl, r3
 801ae26:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ae2a:	b10a      	cbz	r2, 801ae30 <_svfiprintf_r+0x60>
 801ae2c:	2a25      	cmp	r2, #37	@ 0x25
 801ae2e:	d1f9      	bne.n	801ae24 <_svfiprintf_r+0x54>
 801ae30:	ebba 0b04 	subs.w	fp, sl, r4
 801ae34:	d00b      	beq.n	801ae4e <_svfiprintf_r+0x7e>
 801ae36:	465b      	mov	r3, fp
 801ae38:	4622      	mov	r2, r4
 801ae3a:	4629      	mov	r1, r5
 801ae3c:	4638      	mov	r0, r7
 801ae3e:	f7ff ff6b 	bl	801ad18 <__ssputs_r>
 801ae42:	3001      	adds	r0, #1
 801ae44:	f000 80a7 	beq.w	801af96 <_svfiprintf_r+0x1c6>
 801ae48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ae4a:	445a      	add	r2, fp
 801ae4c:	9209      	str	r2, [sp, #36]	@ 0x24
 801ae4e:	f89a 3000 	ldrb.w	r3, [sl]
 801ae52:	2b00      	cmp	r3, #0
 801ae54:	f000 809f 	beq.w	801af96 <_svfiprintf_r+0x1c6>
 801ae58:	2300      	movs	r3, #0
 801ae5a:	f04f 32ff 	mov.w	r2, #4294967295
 801ae5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ae62:	f10a 0a01 	add.w	sl, sl, #1
 801ae66:	9304      	str	r3, [sp, #16]
 801ae68:	9307      	str	r3, [sp, #28]
 801ae6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ae6e:	931a      	str	r3, [sp, #104]	@ 0x68
 801ae70:	4654      	mov	r4, sl
 801ae72:	2205      	movs	r2, #5
 801ae74:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ae78:	484e      	ldr	r0, [pc, #312]	@ (801afb4 <_svfiprintf_r+0x1e4>)
 801ae7a:	f7e5 f981 	bl	8000180 <memchr>
 801ae7e:	9a04      	ldr	r2, [sp, #16]
 801ae80:	b9d8      	cbnz	r0, 801aeba <_svfiprintf_r+0xea>
 801ae82:	06d0      	lsls	r0, r2, #27
 801ae84:	bf44      	itt	mi
 801ae86:	2320      	movmi	r3, #32
 801ae88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ae8c:	0711      	lsls	r1, r2, #28
 801ae8e:	bf44      	itt	mi
 801ae90:	232b      	movmi	r3, #43	@ 0x2b
 801ae92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ae96:	f89a 3000 	ldrb.w	r3, [sl]
 801ae9a:	2b2a      	cmp	r3, #42	@ 0x2a
 801ae9c:	d015      	beq.n	801aeca <_svfiprintf_r+0xfa>
 801ae9e:	9a07      	ldr	r2, [sp, #28]
 801aea0:	4654      	mov	r4, sl
 801aea2:	2000      	movs	r0, #0
 801aea4:	f04f 0c0a 	mov.w	ip, #10
 801aea8:	4621      	mov	r1, r4
 801aeaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 801aeae:	3b30      	subs	r3, #48	@ 0x30
 801aeb0:	2b09      	cmp	r3, #9
 801aeb2:	d94b      	bls.n	801af4c <_svfiprintf_r+0x17c>
 801aeb4:	b1b0      	cbz	r0, 801aee4 <_svfiprintf_r+0x114>
 801aeb6:	9207      	str	r2, [sp, #28]
 801aeb8:	e014      	b.n	801aee4 <_svfiprintf_r+0x114>
 801aeba:	eba0 0308 	sub.w	r3, r0, r8
 801aebe:	fa09 f303 	lsl.w	r3, r9, r3
 801aec2:	4313      	orrs	r3, r2
 801aec4:	9304      	str	r3, [sp, #16]
 801aec6:	46a2      	mov	sl, r4
 801aec8:	e7d2      	b.n	801ae70 <_svfiprintf_r+0xa0>
 801aeca:	9b03      	ldr	r3, [sp, #12]
 801aecc:	1d19      	adds	r1, r3, #4
 801aece:	681b      	ldr	r3, [r3, #0]
 801aed0:	9103      	str	r1, [sp, #12]
 801aed2:	2b00      	cmp	r3, #0
 801aed4:	bfbb      	ittet	lt
 801aed6:	425b      	neglt	r3, r3
 801aed8:	f042 0202 	orrlt.w	r2, r2, #2
 801aedc:	9307      	strge	r3, [sp, #28]
 801aede:	9307      	strlt	r3, [sp, #28]
 801aee0:	bfb8      	it	lt
 801aee2:	9204      	strlt	r2, [sp, #16]
 801aee4:	7823      	ldrb	r3, [r4, #0]
 801aee6:	2b2e      	cmp	r3, #46	@ 0x2e
 801aee8:	d10a      	bne.n	801af00 <_svfiprintf_r+0x130>
 801aeea:	7863      	ldrb	r3, [r4, #1]
 801aeec:	2b2a      	cmp	r3, #42	@ 0x2a
 801aeee:	d132      	bne.n	801af56 <_svfiprintf_r+0x186>
 801aef0:	9b03      	ldr	r3, [sp, #12]
 801aef2:	1d1a      	adds	r2, r3, #4
 801aef4:	681b      	ldr	r3, [r3, #0]
 801aef6:	9203      	str	r2, [sp, #12]
 801aef8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801aefc:	3402      	adds	r4, #2
 801aefe:	9305      	str	r3, [sp, #20]
 801af00:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801afc4 <_svfiprintf_r+0x1f4>
 801af04:	7821      	ldrb	r1, [r4, #0]
 801af06:	2203      	movs	r2, #3
 801af08:	4650      	mov	r0, sl
 801af0a:	f7e5 f939 	bl	8000180 <memchr>
 801af0e:	b138      	cbz	r0, 801af20 <_svfiprintf_r+0x150>
 801af10:	9b04      	ldr	r3, [sp, #16]
 801af12:	eba0 000a 	sub.w	r0, r0, sl
 801af16:	2240      	movs	r2, #64	@ 0x40
 801af18:	4082      	lsls	r2, r0
 801af1a:	4313      	orrs	r3, r2
 801af1c:	3401      	adds	r4, #1
 801af1e:	9304      	str	r3, [sp, #16]
 801af20:	f814 1b01 	ldrb.w	r1, [r4], #1
 801af24:	4824      	ldr	r0, [pc, #144]	@ (801afb8 <_svfiprintf_r+0x1e8>)
 801af26:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801af2a:	2206      	movs	r2, #6
 801af2c:	f7e5 f928 	bl	8000180 <memchr>
 801af30:	2800      	cmp	r0, #0
 801af32:	d036      	beq.n	801afa2 <_svfiprintf_r+0x1d2>
 801af34:	4b21      	ldr	r3, [pc, #132]	@ (801afbc <_svfiprintf_r+0x1ec>)
 801af36:	bb1b      	cbnz	r3, 801af80 <_svfiprintf_r+0x1b0>
 801af38:	9b03      	ldr	r3, [sp, #12]
 801af3a:	3307      	adds	r3, #7
 801af3c:	f023 0307 	bic.w	r3, r3, #7
 801af40:	3308      	adds	r3, #8
 801af42:	9303      	str	r3, [sp, #12]
 801af44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801af46:	4433      	add	r3, r6
 801af48:	9309      	str	r3, [sp, #36]	@ 0x24
 801af4a:	e76a      	b.n	801ae22 <_svfiprintf_r+0x52>
 801af4c:	fb0c 3202 	mla	r2, ip, r2, r3
 801af50:	460c      	mov	r4, r1
 801af52:	2001      	movs	r0, #1
 801af54:	e7a8      	b.n	801aea8 <_svfiprintf_r+0xd8>
 801af56:	2300      	movs	r3, #0
 801af58:	3401      	adds	r4, #1
 801af5a:	9305      	str	r3, [sp, #20]
 801af5c:	4619      	mov	r1, r3
 801af5e:	f04f 0c0a 	mov.w	ip, #10
 801af62:	4620      	mov	r0, r4
 801af64:	f810 2b01 	ldrb.w	r2, [r0], #1
 801af68:	3a30      	subs	r2, #48	@ 0x30
 801af6a:	2a09      	cmp	r2, #9
 801af6c:	d903      	bls.n	801af76 <_svfiprintf_r+0x1a6>
 801af6e:	2b00      	cmp	r3, #0
 801af70:	d0c6      	beq.n	801af00 <_svfiprintf_r+0x130>
 801af72:	9105      	str	r1, [sp, #20]
 801af74:	e7c4      	b.n	801af00 <_svfiprintf_r+0x130>
 801af76:	fb0c 2101 	mla	r1, ip, r1, r2
 801af7a:	4604      	mov	r4, r0
 801af7c:	2301      	movs	r3, #1
 801af7e:	e7f0      	b.n	801af62 <_svfiprintf_r+0x192>
 801af80:	ab03      	add	r3, sp, #12
 801af82:	9300      	str	r3, [sp, #0]
 801af84:	462a      	mov	r2, r5
 801af86:	4b0e      	ldr	r3, [pc, #56]	@ (801afc0 <_svfiprintf_r+0x1f0>)
 801af88:	a904      	add	r1, sp, #16
 801af8a:	4638      	mov	r0, r7
 801af8c:	f7fd feba 	bl	8018d04 <_printf_float>
 801af90:	1c42      	adds	r2, r0, #1
 801af92:	4606      	mov	r6, r0
 801af94:	d1d6      	bne.n	801af44 <_svfiprintf_r+0x174>
 801af96:	89ab      	ldrh	r3, [r5, #12]
 801af98:	065b      	lsls	r3, r3, #25
 801af9a:	f53f af2d 	bmi.w	801adf8 <_svfiprintf_r+0x28>
 801af9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801afa0:	e72c      	b.n	801adfc <_svfiprintf_r+0x2c>
 801afa2:	ab03      	add	r3, sp, #12
 801afa4:	9300      	str	r3, [sp, #0]
 801afa6:	462a      	mov	r2, r5
 801afa8:	4b05      	ldr	r3, [pc, #20]	@ (801afc0 <_svfiprintf_r+0x1f0>)
 801afaa:	a904      	add	r1, sp, #16
 801afac:	4638      	mov	r0, r7
 801afae:	f7fe f941 	bl	8019234 <_printf_i>
 801afb2:	e7ed      	b.n	801af90 <_svfiprintf_r+0x1c0>
 801afb4:	0801cd5e 	.word	0x0801cd5e
 801afb8:	0801cd68 	.word	0x0801cd68
 801afbc:	08018d05 	.word	0x08018d05
 801afc0:	0801ad19 	.word	0x0801ad19
 801afc4:	0801cd64 	.word	0x0801cd64

0801afc8 <__sfputc_r>:
 801afc8:	6893      	ldr	r3, [r2, #8]
 801afca:	3b01      	subs	r3, #1
 801afcc:	2b00      	cmp	r3, #0
 801afce:	b410      	push	{r4}
 801afd0:	6093      	str	r3, [r2, #8]
 801afd2:	da08      	bge.n	801afe6 <__sfputc_r+0x1e>
 801afd4:	6994      	ldr	r4, [r2, #24]
 801afd6:	42a3      	cmp	r3, r4
 801afd8:	db01      	blt.n	801afde <__sfputc_r+0x16>
 801afda:	290a      	cmp	r1, #10
 801afdc:	d103      	bne.n	801afe6 <__sfputc_r+0x1e>
 801afde:	f85d 4b04 	ldr.w	r4, [sp], #4
 801afe2:	f000 b9df 	b.w	801b3a4 <__swbuf_r>
 801afe6:	6813      	ldr	r3, [r2, #0]
 801afe8:	1c58      	adds	r0, r3, #1
 801afea:	6010      	str	r0, [r2, #0]
 801afec:	7019      	strb	r1, [r3, #0]
 801afee:	4608      	mov	r0, r1
 801aff0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aff4:	4770      	bx	lr

0801aff6 <__sfputs_r>:
 801aff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aff8:	4606      	mov	r6, r0
 801affa:	460f      	mov	r7, r1
 801affc:	4614      	mov	r4, r2
 801affe:	18d5      	adds	r5, r2, r3
 801b000:	42ac      	cmp	r4, r5
 801b002:	d101      	bne.n	801b008 <__sfputs_r+0x12>
 801b004:	2000      	movs	r0, #0
 801b006:	e007      	b.n	801b018 <__sfputs_r+0x22>
 801b008:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b00c:	463a      	mov	r2, r7
 801b00e:	4630      	mov	r0, r6
 801b010:	f7ff ffda 	bl	801afc8 <__sfputc_r>
 801b014:	1c43      	adds	r3, r0, #1
 801b016:	d1f3      	bne.n	801b000 <__sfputs_r+0xa>
 801b018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b01c <_vfiprintf_r>:
 801b01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b020:	460d      	mov	r5, r1
 801b022:	b09d      	sub	sp, #116	@ 0x74
 801b024:	4614      	mov	r4, r2
 801b026:	4698      	mov	r8, r3
 801b028:	4606      	mov	r6, r0
 801b02a:	b118      	cbz	r0, 801b034 <_vfiprintf_r+0x18>
 801b02c:	6a03      	ldr	r3, [r0, #32]
 801b02e:	b90b      	cbnz	r3, 801b034 <_vfiprintf_r+0x18>
 801b030:	f7fe faaa 	bl	8019588 <__sinit>
 801b034:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b036:	07d9      	lsls	r1, r3, #31
 801b038:	d405      	bmi.n	801b046 <_vfiprintf_r+0x2a>
 801b03a:	89ab      	ldrh	r3, [r5, #12]
 801b03c:	059a      	lsls	r2, r3, #22
 801b03e:	d402      	bmi.n	801b046 <_vfiprintf_r+0x2a>
 801b040:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b042:	f7fe fc3c 	bl	80198be <__retarget_lock_acquire_recursive>
 801b046:	89ab      	ldrh	r3, [r5, #12]
 801b048:	071b      	lsls	r3, r3, #28
 801b04a:	d501      	bpl.n	801b050 <_vfiprintf_r+0x34>
 801b04c:	692b      	ldr	r3, [r5, #16]
 801b04e:	b99b      	cbnz	r3, 801b078 <_vfiprintf_r+0x5c>
 801b050:	4629      	mov	r1, r5
 801b052:	4630      	mov	r0, r6
 801b054:	f000 f9e4 	bl	801b420 <__swsetup_r>
 801b058:	b170      	cbz	r0, 801b078 <_vfiprintf_r+0x5c>
 801b05a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b05c:	07dc      	lsls	r4, r3, #31
 801b05e:	d504      	bpl.n	801b06a <_vfiprintf_r+0x4e>
 801b060:	f04f 30ff 	mov.w	r0, #4294967295
 801b064:	b01d      	add	sp, #116	@ 0x74
 801b066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b06a:	89ab      	ldrh	r3, [r5, #12]
 801b06c:	0598      	lsls	r0, r3, #22
 801b06e:	d4f7      	bmi.n	801b060 <_vfiprintf_r+0x44>
 801b070:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b072:	f7fe fc25 	bl	80198c0 <__retarget_lock_release_recursive>
 801b076:	e7f3      	b.n	801b060 <_vfiprintf_r+0x44>
 801b078:	2300      	movs	r3, #0
 801b07a:	9309      	str	r3, [sp, #36]	@ 0x24
 801b07c:	2320      	movs	r3, #32
 801b07e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b082:	f8cd 800c 	str.w	r8, [sp, #12]
 801b086:	2330      	movs	r3, #48	@ 0x30
 801b088:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801b238 <_vfiprintf_r+0x21c>
 801b08c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b090:	f04f 0901 	mov.w	r9, #1
 801b094:	4623      	mov	r3, r4
 801b096:	469a      	mov	sl, r3
 801b098:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b09c:	b10a      	cbz	r2, 801b0a2 <_vfiprintf_r+0x86>
 801b09e:	2a25      	cmp	r2, #37	@ 0x25
 801b0a0:	d1f9      	bne.n	801b096 <_vfiprintf_r+0x7a>
 801b0a2:	ebba 0b04 	subs.w	fp, sl, r4
 801b0a6:	d00b      	beq.n	801b0c0 <_vfiprintf_r+0xa4>
 801b0a8:	465b      	mov	r3, fp
 801b0aa:	4622      	mov	r2, r4
 801b0ac:	4629      	mov	r1, r5
 801b0ae:	4630      	mov	r0, r6
 801b0b0:	f7ff ffa1 	bl	801aff6 <__sfputs_r>
 801b0b4:	3001      	adds	r0, #1
 801b0b6:	f000 80a7 	beq.w	801b208 <_vfiprintf_r+0x1ec>
 801b0ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b0bc:	445a      	add	r2, fp
 801b0be:	9209      	str	r2, [sp, #36]	@ 0x24
 801b0c0:	f89a 3000 	ldrb.w	r3, [sl]
 801b0c4:	2b00      	cmp	r3, #0
 801b0c6:	f000 809f 	beq.w	801b208 <_vfiprintf_r+0x1ec>
 801b0ca:	2300      	movs	r3, #0
 801b0cc:	f04f 32ff 	mov.w	r2, #4294967295
 801b0d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b0d4:	f10a 0a01 	add.w	sl, sl, #1
 801b0d8:	9304      	str	r3, [sp, #16]
 801b0da:	9307      	str	r3, [sp, #28]
 801b0dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b0e0:	931a      	str	r3, [sp, #104]	@ 0x68
 801b0e2:	4654      	mov	r4, sl
 801b0e4:	2205      	movs	r2, #5
 801b0e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b0ea:	4853      	ldr	r0, [pc, #332]	@ (801b238 <_vfiprintf_r+0x21c>)
 801b0ec:	f7e5 f848 	bl	8000180 <memchr>
 801b0f0:	9a04      	ldr	r2, [sp, #16]
 801b0f2:	b9d8      	cbnz	r0, 801b12c <_vfiprintf_r+0x110>
 801b0f4:	06d1      	lsls	r1, r2, #27
 801b0f6:	bf44      	itt	mi
 801b0f8:	2320      	movmi	r3, #32
 801b0fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b0fe:	0713      	lsls	r3, r2, #28
 801b100:	bf44      	itt	mi
 801b102:	232b      	movmi	r3, #43	@ 0x2b
 801b104:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b108:	f89a 3000 	ldrb.w	r3, [sl]
 801b10c:	2b2a      	cmp	r3, #42	@ 0x2a
 801b10e:	d015      	beq.n	801b13c <_vfiprintf_r+0x120>
 801b110:	9a07      	ldr	r2, [sp, #28]
 801b112:	4654      	mov	r4, sl
 801b114:	2000      	movs	r0, #0
 801b116:	f04f 0c0a 	mov.w	ip, #10
 801b11a:	4621      	mov	r1, r4
 801b11c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b120:	3b30      	subs	r3, #48	@ 0x30
 801b122:	2b09      	cmp	r3, #9
 801b124:	d94b      	bls.n	801b1be <_vfiprintf_r+0x1a2>
 801b126:	b1b0      	cbz	r0, 801b156 <_vfiprintf_r+0x13a>
 801b128:	9207      	str	r2, [sp, #28]
 801b12a:	e014      	b.n	801b156 <_vfiprintf_r+0x13a>
 801b12c:	eba0 0308 	sub.w	r3, r0, r8
 801b130:	fa09 f303 	lsl.w	r3, r9, r3
 801b134:	4313      	orrs	r3, r2
 801b136:	9304      	str	r3, [sp, #16]
 801b138:	46a2      	mov	sl, r4
 801b13a:	e7d2      	b.n	801b0e2 <_vfiprintf_r+0xc6>
 801b13c:	9b03      	ldr	r3, [sp, #12]
 801b13e:	1d19      	adds	r1, r3, #4
 801b140:	681b      	ldr	r3, [r3, #0]
 801b142:	9103      	str	r1, [sp, #12]
 801b144:	2b00      	cmp	r3, #0
 801b146:	bfbb      	ittet	lt
 801b148:	425b      	neglt	r3, r3
 801b14a:	f042 0202 	orrlt.w	r2, r2, #2
 801b14e:	9307      	strge	r3, [sp, #28]
 801b150:	9307      	strlt	r3, [sp, #28]
 801b152:	bfb8      	it	lt
 801b154:	9204      	strlt	r2, [sp, #16]
 801b156:	7823      	ldrb	r3, [r4, #0]
 801b158:	2b2e      	cmp	r3, #46	@ 0x2e
 801b15a:	d10a      	bne.n	801b172 <_vfiprintf_r+0x156>
 801b15c:	7863      	ldrb	r3, [r4, #1]
 801b15e:	2b2a      	cmp	r3, #42	@ 0x2a
 801b160:	d132      	bne.n	801b1c8 <_vfiprintf_r+0x1ac>
 801b162:	9b03      	ldr	r3, [sp, #12]
 801b164:	1d1a      	adds	r2, r3, #4
 801b166:	681b      	ldr	r3, [r3, #0]
 801b168:	9203      	str	r2, [sp, #12]
 801b16a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b16e:	3402      	adds	r4, #2
 801b170:	9305      	str	r3, [sp, #20]
 801b172:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801b248 <_vfiprintf_r+0x22c>
 801b176:	7821      	ldrb	r1, [r4, #0]
 801b178:	2203      	movs	r2, #3
 801b17a:	4650      	mov	r0, sl
 801b17c:	f7e5 f800 	bl	8000180 <memchr>
 801b180:	b138      	cbz	r0, 801b192 <_vfiprintf_r+0x176>
 801b182:	9b04      	ldr	r3, [sp, #16]
 801b184:	eba0 000a 	sub.w	r0, r0, sl
 801b188:	2240      	movs	r2, #64	@ 0x40
 801b18a:	4082      	lsls	r2, r0
 801b18c:	4313      	orrs	r3, r2
 801b18e:	3401      	adds	r4, #1
 801b190:	9304      	str	r3, [sp, #16]
 801b192:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b196:	4829      	ldr	r0, [pc, #164]	@ (801b23c <_vfiprintf_r+0x220>)
 801b198:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b19c:	2206      	movs	r2, #6
 801b19e:	f7e4 ffef 	bl	8000180 <memchr>
 801b1a2:	2800      	cmp	r0, #0
 801b1a4:	d03f      	beq.n	801b226 <_vfiprintf_r+0x20a>
 801b1a6:	4b26      	ldr	r3, [pc, #152]	@ (801b240 <_vfiprintf_r+0x224>)
 801b1a8:	bb1b      	cbnz	r3, 801b1f2 <_vfiprintf_r+0x1d6>
 801b1aa:	9b03      	ldr	r3, [sp, #12]
 801b1ac:	3307      	adds	r3, #7
 801b1ae:	f023 0307 	bic.w	r3, r3, #7
 801b1b2:	3308      	adds	r3, #8
 801b1b4:	9303      	str	r3, [sp, #12]
 801b1b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b1b8:	443b      	add	r3, r7
 801b1ba:	9309      	str	r3, [sp, #36]	@ 0x24
 801b1bc:	e76a      	b.n	801b094 <_vfiprintf_r+0x78>
 801b1be:	fb0c 3202 	mla	r2, ip, r2, r3
 801b1c2:	460c      	mov	r4, r1
 801b1c4:	2001      	movs	r0, #1
 801b1c6:	e7a8      	b.n	801b11a <_vfiprintf_r+0xfe>
 801b1c8:	2300      	movs	r3, #0
 801b1ca:	3401      	adds	r4, #1
 801b1cc:	9305      	str	r3, [sp, #20]
 801b1ce:	4619      	mov	r1, r3
 801b1d0:	f04f 0c0a 	mov.w	ip, #10
 801b1d4:	4620      	mov	r0, r4
 801b1d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b1da:	3a30      	subs	r2, #48	@ 0x30
 801b1dc:	2a09      	cmp	r2, #9
 801b1de:	d903      	bls.n	801b1e8 <_vfiprintf_r+0x1cc>
 801b1e0:	2b00      	cmp	r3, #0
 801b1e2:	d0c6      	beq.n	801b172 <_vfiprintf_r+0x156>
 801b1e4:	9105      	str	r1, [sp, #20]
 801b1e6:	e7c4      	b.n	801b172 <_vfiprintf_r+0x156>
 801b1e8:	fb0c 2101 	mla	r1, ip, r1, r2
 801b1ec:	4604      	mov	r4, r0
 801b1ee:	2301      	movs	r3, #1
 801b1f0:	e7f0      	b.n	801b1d4 <_vfiprintf_r+0x1b8>
 801b1f2:	ab03      	add	r3, sp, #12
 801b1f4:	9300      	str	r3, [sp, #0]
 801b1f6:	462a      	mov	r2, r5
 801b1f8:	4b12      	ldr	r3, [pc, #72]	@ (801b244 <_vfiprintf_r+0x228>)
 801b1fa:	a904      	add	r1, sp, #16
 801b1fc:	4630      	mov	r0, r6
 801b1fe:	f7fd fd81 	bl	8018d04 <_printf_float>
 801b202:	4607      	mov	r7, r0
 801b204:	1c78      	adds	r0, r7, #1
 801b206:	d1d6      	bne.n	801b1b6 <_vfiprintf_r+0x19a>
 801b208:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b20a:	07d9      	lsls	r1, r3, #31
 801b20c:	d405      	bmi.n	801b21a <_vfiprintf_r+0x1fe>
 801b20e:	89ab      	ldrh	r3, [r5, #12]
 801b210:	059a      	lsls	r2, r3, #22
 801b212:	d402      	bmi.n	801b21a <_vfiprintf_r+0x1fe>
 801b214:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b216:	f7fe fb53 	bl	80198c0 <__retarget_lock_release_recursive>
 801b21a:	89ab      	ldrh	r3, [r5, #12]
 801b21c:	065b      	lsls	r3, r3, #25
 801b21e:	f53f af1f 	bmi.w	801b060 <_vfiprintf_r+0x44>
 801b222:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b224:	e71e      	b.n	801b064 <_vfiprintf_r+0x48>
 801b226:	ab03      	add	r3, sp, #12
 801b228:	9300      	str	r3, [sp, #0]
 801b22a:	462a      	mov	r2, r5
 801b22c:	4b05      	ldr	r3, [pc, #20]	@ (801b244 <_vfiprintf_r+0x228>)
 801b22e:	a904      	add	r1, sp, #16
 801b230:	4630      	mov	r0, r6
 801b232:	f7fd ffff 	bl	8019234 <_printf_i>
 801b236:	e7e4      	b.n	801b202 <_vfiprintf_r+0x1e6>
 801b238:	0801cd5e 	.word	0x0801cd5e
 801b23c:	0801cd68 	.word	0x0801cd68
 801b240:	08018d05 	.word	0x08018d05
 801b244:	0801aff7 	.word	0x0801aff7
 801b248:	0801cd64 	.word	0x0801cd64

0801b24c <__sflush_r>:
 801b24c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b254:	0716      	lsls	r6, r2, #28
 801b256:	4605      	mov	r5, r0
 801b258:	460c      	mov	r4, r1
 801b25a:	d454      	bmi.n	801b306 <__sflush_r+0xba>
 801b25c:	684b      	ldr	r3, [r1, #4]
 801b25e:	2b00      	cmp	r3, #0
 801b260:	dc02      	bgt.n	801b268 <__sflush_r+0x1c>
 801b262:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801b264:	2b00      	cmp	r3, #0
 801b266:	dd48      	ble.n	801b2fa <__sflush_r+0xae>
 801b268:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b26a:	2e00      	cmp	r6, #0
 801b26c:	d045      	beq.n	801b2fa <__sflush_r+0xae>
 801b26e:	2300      	movs	r3, #0
 801b270:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801b274:	682f      	ldr	r7, [r5, #0]
 801b276:	6a21      	ldr	r1, [r4, #32]
 801b278:	602b      	str	r3, [r5, #0]
 801b27a:	d030      	beq.n	801b2de <__sflush_r+0x92>
 801b27c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801b27e:	89a3      	ldrh	r3, [r4, #12]
 801b280:	0759      	lsls	r1, r3, #29
 801b282:	d505      	bpl.n	801b290 <__sflush_r+0x44>
 801b284:	6863      	ldr	r3, [r4, #4]
 801b286:	1ad2      	subs	r2, r2, r3
 801b288:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b28a:	b10b      	cbz	r3, 801b290 <__sflush_r+0x44>
 801b28c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801b28e:	1ad2      	subs	r2, r2, r3
 801b290:	2300      	movs	r3, #0
 801b292:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b294:	6a21      	ldr	r1, [r4, #32]
 801b296:	4628      	mov	r0, r5
 801b298:	47b0      	blx	r6
 801b29a:	1c43      	adds	r3, r0, #1
 801b29c:	89a3      	ldrh	r3, [r4, #12]
 801b29e:	d106      	bne.n	801b2ae <__sflush_r+0x62>
 801b2a0:	6829      	ldr	r1, [r5, #0]
 801b2a2:	291d      	cmp	r1, #29
 801b2a4:	d82b      	bhi.n	801b2fe <__sflush_r+0xb2>
 801b2a6:	4a2a      	ldr	r2, [pc, #168]	@ (801b350 <__sflush_r+0x104>)
 801b2a8:	40ca      	lsrs	r2, r1
 801b2aa:	07d6      	lsls	r6, r2, #31
 801b2ac:	d527      	bpl.n	801b2fe <__sflush_r+0xb2>
 801b2ae:	2200      	movs	r2, #0
 801b2b0:	6062      	str	r2, [r4, #4]
 801b2b2:	04d9      	lsls	r1, r3, #19
 801b2b4:	6922      	ldr	r2, [r4, #16]
 801b2b6:	6022      	str	r2, [r4, #0]
 801b2b8:	d504      	bpl.n	801b2c4 <__sflush_r+0x78>
 801b2ba:	1c42      	adds	r2, r0, #1
 801b2bc:	d101      	bne.n	801b2c2 <__sflush_r+0x76>
 801b2be:	682b      	ldr	r3, [r5, #0]
 801b2c0:	b903      	cbnz	r3, 801b2c4 <__sflush_r+0x78>
 801b2c2:	6560      	str	r0, [r4, #84]	@ 0x54
 801b2c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b2c6:	602f      	str	r7, [r5, #0]
 801b2c8:	b1b9      	cbz	r1, 801b2fa <__sflush_r+0xae>
 801b2ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b2ce:	4299      	cmp	r1, r3
 801b2d0:	d002      	beq.n	801b2d8 <__sflush_r+0x8c>
 801b2d2:	4628      	mov	r0, r5
 801b2d4:	f7ff f95c 	bl	801a590 <_free_r>
 801b2d8:	2300      	movs	r3, #0
 801b2da:	6363      	str	r3, [r4, #52]	@ 0x34
 801b2dc:	e00d      	b.n	801b2fa <__sflush_r+0xae>
 801b2de:	2301      	movs	r3, #1
 801b2e0:	4628      	mov	r0, r5
 801b2e2:	47b0      	blx	r6
 801b2e4:	4602      	mov	r2, r0
 801b2e6:	1c50      	adds	r0, r2, #1
 801b2e8:	d1c9      	bne.n	801b27e <__sflush_r+0x32>
 801b2ea:	682b      	ldr	r3, [r5, #0]
 801b2ec:	2b00      	cmp	r3, #0
 801b2ee:	d0c6      	beq.n	801b27e <__sflush_r+0x32>
 801b2f0:	2b1d      	cmp	r3, #29
 801b2f2:	d001      	beq.n	801b2f8 <__sflush_r+0xac>
 801b2f4:	2b16      	cmp	r3, #22
 801b2f6:	d11e      	bne.n	801b336 <__sflush_r+0xea>
 801b2f8:	602f      	str	r7, [r5, #0]
 801b2fa:	2000      	movs	r0, #0
 801b2fc:	e022      	b.n	801b344 <__sflush_r+0xf8>
 801b2fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b302:	b21b      	sxth	r3, r3
 801b304:	e01b      	b.n	801b33e <__sflush_r+0xf2>
 801b306:	690f      	ldr	r7, [r1, #16]
 801b308:	2f00      	cmp	r7, #0
 801b30a:	d0f6      	beq.n	801b2fa <__sflush_r+0xae>
 801b30c:	0793      	lsls	r3, r2, #30
 801b30e:	680e      	ldr	r6, [r1, #0]
 801b310:	bf08      	it	eq
 801b312:	694b      	ldreq	r3, [r1, #20]
 801b314:	600f      	str	r7, [r1, #0]
 801b316:	bf18      	it	ne
 801b318:	2300      	movne	r3, #0
 801b31a:	eba6 0807 	sub.w	r8, r6, r7
 801b31e:	608b      	str	r3, [r1, #8]
 801b320:	f1b8 0f00 	cmp.w	r8, #0
 801b324:	dde9      	ble.n	801b2fa <__sflush_r+0xae>
 801b326:	6a21      	ldr	r1, [r4, #32]
 801b328:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801b32a:	4643      	mov	r3, r8
 801b32c:	463a      	mov	r2, r7
 801b32e:	4628      	mov	r0, r5
 801b330:	47b0      	blx	r6
 801b332:	2800      	cmp	r0, #0
 801b334:	dc08      	bgt.n	801b348 <__sflush_r+0xfc>
 801b336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b33a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b33e:	81a3      	strh	r3, [r4, #12]
 801b340:	f04f 30ff 	mov.w	r0, #4294967295
 801b344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b348:	4407      	add	r7, r0
 801b34a:	eba8 0800 	sub.w	r8, r8, r0
 801b34e:	e7e7      	b.n	801b320 <__sflush_r+0xd4>
 801b350:	20400001 	.word	0x20400001

0801b354 <_fflush_r>:
 801b354:	b538      	push	{r3, r4, r5, lr}
 801b356:	690b      	ldr	r3, [r1, #16]
 801b358:	4605      	mov	r5, r0
 801b35a:	460c      	mov	r4, r1
 801b35c:	b913      	cbnz	r3, 801b364 <_fflush_r+0x10>
 801b35e:	2500      	movs	r5, #0
 801b360:	4628      	mov	r0, r5
 801b362:	bd38      	pop	{r3, r4, r5, pc}
 801b364:	b118      	cbz	r0, 801b36e <_fflush_r+0x1a>
 801b366:	6a03      	ldr	r3, [r0, #32]
 801b368:	b90b      	cbnz	r3, 801b36e <_fflush_r+0x1a>
 801b36a:	f7fe f90d 	bl	8019588 <__sinit>
 801b36e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b372:	2b00      	cmp	r3, #0
 801b374:	d0f3      	beq.n	801b35e <_fflush_r+0xa>
 801b376:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801b378:	07d0      	lsls	r0, r2, #31
 801b37a:	d404      	bmi.n	801b386 <_fflush_r+0x32>
 801b37c:	0599      	lsls	r1, r3, #22
 801b37e:	d402      	bmi.n	801b386 <_fflush_r+0x32>
 801b380:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b382:	f7fe fa9c 	bl	80198be <__retarget_lock_acquire_recursive>
 801b386:	4628      	mov	r0, r5
 801b388:	4621      	mov	r1, r4
 801b38a:	f7ff ff5f 	bl	801b24c <__sflush_r>
 801b38e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b390:	07da      	lsls	r2, r3, #31
 801b392:	4605      	mov	r5, r0
 801b394:	d4e4      	bmi.n	801b360 <_fflush_r+0xc>
 801b396:	89a3      	ldrh	r3, [r4, #12]
 801b398:	059b      	lsls	r3, r3, #22
 801b39a:	d4e1      	bmi.n	801b360 <_fflush_r+0xc>
 801b39c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b39e:	f7fe fa8f 	bl	80198c0 <__retarget_lock_release_recursive>
 801b3a2:	e7dd      	b.n	801b360 <_fflush_r+0xc>

0801b3a4 <__swbuf_r>:
 801b3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b3a6:	460e      	mov	r6, r1
 801b3a8:	4614      	mov	r4, r2
 801b3aa:	4605      	mov	r5, r0
 801b3ac:	b118      	cbz	r0, 801b3b6 <__swbuf_r+0x12>
 801b3ae:	6a03      	ldr	r3, [r0, #32]
 801b3b0:	b90b      	cbnz	r3, 801b3b6 <__swbuf_r+0x12>
 801b3b2:	f7fe f8e9 	bl	8019588 <__sinit>
 801b3b6:	69a3      	ldr	r3, [r4, #24]
 801b3b8:	60a3      	str	r3, [r4, #8]
 801b3ba:	89a3      	ldrh	r3, [r4, #12]
 801b3bc:	071a      	lsls	r2, r3, #28
 801b3be:	d501      	bpl.n	801b3c4 <__swbuf_r+0x20>
 801b3c0:	6923      	ldr	r3, [r4, #16]
 801b3c2:	b943      	cbnz	r3, 801b3d6 <__swbuf_r+0x32>
 801b3c4:	4621      	mov	r1, r4
 801b3c6:	4628      	mov	r0, r5
 801b3c8:	f000 f82a 	bl	801b420 <__swsetup_r>
 801b3cc:	b118      	cbz	r0, 801b3d6 <__swbuf_r+0x32>
 801b3ce:	f04f 37ff 	mov.w	r7, #4294967295
 801b3d2:	4638      	mov	r0, r7
 801b3d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b3d6:	6823      	ldr	r3, [r4, #0]
 801b3d8:	6922      	ldr	r2, [r4, #16]
 801b3da:	1a98      	subs	r0, r3, r2
 801b3dc:	6963      	ldr	r3, [r4, #20]
 801b3de:	b2f6      	uxtb	r6, r6
 801b3e0:	4283      	cmp	r3, r0
 801b3e2:	4637      	mov	r7, r6
 801b3e4:	dc05      	bgt.n	801b3f2 <__swbuf_r+0x4e>
 801b3e6:	4621      	mov	r1, r4
 801b3e8:	4628      	mov	r0, r5
 801b3ea:	f7ff ffb3 	bl	801b354 <_fflush_r>
 801b3ee:	2800      	cmp	r0, #0
 801b3f0:	d1ed      	bne.n	801b3ce <__swbuf_r+0x2a>
 801b3f2:	68a3      	ldr	r3, [r4, #8]
 801b3f4:	3b01      	subs	r3, #1
 801b3f6:	60a3      	str	r3, [r4, #8]
 801b3f8:	6823      	ldr	r3, [r4, #0]
 801b3fa:	1c5a      	adds	r2, r3, #1
 801b3fc:	6022      	str	r2, [r4, #0]
 801b3fe:	701e      	strb	r6, [r3, #0]
 801b400:	6962      	ldr	r2, [r4, #20]
 801b402:	1c43      	adds	r3, r0, #1
 801b404:	429a      	cmp	r2, r3
 801b406:	d004      	beq.n	801b412 <__swbuf_r+0x6e>
 801b408:	89a3      	ldrh	r3, [r4, #12]
 801b40a:	07db      	lsls	r3, r3, #31
 801b40c:	d5e1      	bpl.n	801b3d2 <__swbuf_r+0x2e>
 801b40e:	2e0a      	cmp	r6, #10
 801b410:	d1df      	bne.n	801b3d2 <__swbuf_r+0x2e>
 801b412:	4621      	mov	r1, r4
 801b414:	4628      	mov	r0, r5
 801b416:	f7ff ff9d 	bl	801b354 <_fflush_r>
 801b41a:	2800      	cmp	r0, #0
 801b41c:	d0d9      	beq.n	801b3d2 <__swbuf_r+0x2e>
 801b41e:	e7d6      	b.n	801b3ce <__swbuf_r+0x2a>

0801b420 <__swsetup_r>:
 801b420:	b538      	push	{r3, r4, r5, lr}
 801b422:	4b29      	ldr	r3, [pc, #164]	@ (801b4c8 <__swsetup_r+0xa8>)
 801b424:	4605      	mov	r5, r0
 801b426:	6818      	ldr	r0, [r3, #0]
 801b428:	460c      	mov	r4, r1
 801b42a:	b118      	cbz	r0, 801b434 <__swsetup_r+0x14>
 801b42c:	6a03      	ldr	r3, [r0, #32]
 801b42e:	b90b      	cbnz	r3, 801b434 <__swsetup_r+0x14>
 801b430:	f7fe f8aa 	bl	8019588 <__sinit>
 801b434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b438:	0719      	lsls	r1, r3, #28
 801b43a:	d422      	bmi.n	801b482 <__swsetup_r+0x62>
 801b43c:	06da      	lsls	r2, r3, #27
 801b43e:	d407      	bmi.n	801b450 <__swsetup_r+0x30>
 801b440:	2209      	movs	r2, #9
 801b442:	602a      	str	r2, [r5, #0]
 801b444:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b448:	81a3      	strh	r3, [r4, #12]
 801b44a:	f04f 30ff 	mov.w	r0, #4294967295
 801b44e:	e033      	b.n	801b4b8 <__swsetup_r+0x98>
 801b450:	0758      	lsls	r0, r3, #29
 801b452:	d512      	bpl.n	801b47a <__swsetup_r+0x5a>
 801b454:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b456:	b141      	cbz	r1, 801b46a <__swsetup_r+0x4a>
 801b458:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b45c:	4299      	cmp	r1, r3
 801b45e:	d002      	beq.n	801b466 <__swsetup_r+0x46>
 801b460:	4628      	mov	r0, r5
 801b462:	f7ff f895 	bl	801a590 <_free_r>
 801b466:	2300      	movs	r3, #0
 801b468:	6363      	str	r3, [r4, #52]	@ 0x34
 801b46a:	89a3      	ldrh	r3, [r4, #12]
 801b46c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801b470:	81a3      	strh	r3, [r4, #12]
 801b472:	2300      	movs	r3, #0
 801b474:	6063      	str	r3, [r4, #4]
 801b476:	6923      	ldr	r3, [r4, #16]
 801b478:	6023      	str	r3, [r4, #0]
 801b47a:	89a3      	ldrh	r3, [r4, #12]
 801b47c:	f043 0308 	orr.w	r3, r3, #8
 801b480:	81a3      	strh	r3, [r4, #12]
 801b482:	6923      	ldr	r3, [r4, #16]
 801b484:	b94b      	cbnz	r3, 801b49a <__swsetup_r+0x7a>
 801b486:	89a3      	ldrh	r3, [r4, #12]
 801b488:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801b48c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b490:	d003      	beq.n	801b49a <__swsetup_r+0x7a>
 801b492:	4621      	mov	r1, r4
 801b494:	4628      	mov	r0, r5
 801b496:	f000 f8d1 	bl	801b63c <__smakebuf_r>
 801b49a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b49e:	f013 0201 	ands.w	r2, r3, #1
 801b4a2:	d00a      	beq.n	801b4ba <__swsetup_r+0x9a>
 801b4a4:	2200      	movs	r2, #0
 801b4a6:	60a2      	str	r2, [r4, #8]
 801b4a8:	6962      	ldr	r2, [r4, #20]
 801b4aa:	4252      	negs	r2, r2
 801b4ac:	61a2      	str	r2, [r4, #24]
 801b4ae:	6922      	ldr	r2, [r4, #16]
 801b4b0:	b942      	cbnz	r2, 801b4c4 <__swsetup_r+0xa4>
 801b4b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801b4b6:	d1c5      	bne.n	801b444 <__swsetup_r+0x24>
 801b4b8:	bd38      	pop	{r3, r4, r5, pc}
 801b4ba:	0799      	lsls	r1, r3, #30
 801b4bc:	bf58      	it	pl
 801b4be:	6962      	ldrpl	r2, [r4, #20]
 801b4c0:	60a2      	str	r2, [r4, #8]
 801b4c2:	e7f4      	b.n	801b4ae <__swsetup_r+0x8e>
 801b4c4:	2000      	movs	r0, #0
 801b4c6:	e7f7      	b.n	801b4b8 <__swsetup_r+0x98>
 801b4c8:	20000150 	.word	0x20000150

0801b4cc <__assert_func>:
 801b4cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b4ce:	4614      	mov	r4, r2
 801b4d0:	461a      	mov	r2, r3
 801b4d2:	4b09      	ldr	r3, [pc, #36]	@ (801b4f8 <__assert_func+0x2c>)
 801b4d4:	681b      	ldr	r3, [r3, #0]
 801b4d6:	4605      	mov	r5, r0
 801b4d8:	68d8      	ldr	r0, [r3, #12]
 801b4da:	b14c      	cbz	r4, 801b4f0 <__assert_func+0x24>
 801b4dc:	4b07      	ldr	r3, [pc, #28]	@ (801b4fc <__assert_func+0x30>)
 801b4de:	9100      	str	r1, [sp, #0]
 801b4e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b4e4:	4906      	ldr	r1, [pc, #24]	@ (801b500 <__assert_func+0x34>)
 801b4e6:	462b      	mov	r3, r5
 801b4e8:	f000 f870 	bl	801b5cc <fiprintf>
 801b4ec:	f7fd faa4 	bl	8018a38 <abort>
 801b4f0:	4b04      	ldr	r3, [pc, #16]	@ (801b504 <__assert_func+0x38>)
 801b4f2:	461c      	mov	r4, r3
 801b4f4:	e7f3      	b.n	801b4de <__assert_func+0x12>
 801b4f6:	bf00      	nop
 801b4f8:	20000150 	.word	0x20000150
 801b4fc:	0801cd79 	.word	0x0801cd79
 801b500:	0801cd86 	.word	0x0801cd86
 801b504:	0801cdb4 	.word	0x0801cdb4

0801b508 <_calloc_r>:
 801b508:	b570      	push	{r4, r5, r6, lr}
 801b50a:	fba1 5402 	umull	r5, r4, r1, r2
 801b50e:	b934      	cbnz	r4, 801b51e <_calloc_r+0x16>
 801b510:	4629      	mov	r1, r5
 801b512:	f7fd facb 	bl	8018aac <_malloc_r>
 801b516:	4606      	mov	r6, r0
 801b518:	b928      	cbnz	r0, 801b526 <_calloc_r+0x1e>
 801b51a:	4630      	mov	r0, r6
 801b51c:	bd70      	pop	{r4, r5, r6, pc}
 801b51e:	220c      	movs	r2, #12
 801b520:	6002      	str	r2, [r0, #0]
 801b522:	2600      	movs	r6, #0
 801b524:	e7f9      	b.n	801b51a <_calloc_r+0x12>
 801b526:	462a      	mov	r2, r5
 801b528:	4621      	mov	r1, r4
 801b52a:	f7fe f8f6 	bl	801971a <memset>
 801b52e:	e7f4      	b.n	801b51a <_calloc_r+0x12>

0801b530 <__ascii_mbtowc>:
 801b530:	b082      	sub	sp, #8
 801b532:	b901      	cbnz	r1, 801b536 <__ascii_mbtowc+0x6>
 801b534:	a901      	add	r1, sp, #4
 801b536:	b142      	cbz	r2, 801b54a <__ascii_mbtowc+0x1a>
 801b538:	b14b      	cbz	r3, 801b54e <__ascii_mbtowc+0x1e>
 801b53a:	7813      	ldrb	r3, [r2, #0]
 801b53c:	600b      	str	r3, [r1, #0]
 801b53e:	7812      	ldrb	r2, [r2, #0]
 801b540:	1e10      	subs	r0, r2, #0
 801b542:	bf18      	it	ne
 801b544:	2001      	movne	r0, #1
 801b546:	b002      	add	sp, #8
 801b548:	4770      	bx	lr
 801b54a:	4610      	mov	r0, r2
 801b54c:	e7fb      	b.n	801b546 <__ascii_mbtowc+0x16>
 801b54e:	f06f 0001 	mvn.w	r0, #1
 801b552:	e7f8      	b.n	801b546 <__ascii_mbtowc+0x16>

0801b554 <_realloc_r>:
 801b554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b558:	4607      	mov	r7, r0
 801b55a:	4614      	mov	r4, r2
 801b55c:	460d      	mov	r5, r1
 801b55e:	b921      	cbnz	r1, 801b56a <_realloc_r+0x16>
 801b560:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b564:	4611      	mov	r1, r2
 801b566:	f7fd baa1 	b.w	8018aac <_malloc_r>
 801b56a:	b92a      	cbnz	r2, 801b578 <_realloc_r+0x24>
 801b56c:	f7ff f810 	bl	801a590 <_free_r>
 801b570:	4625      	mov	r5, r4
 801b572:	4628      	mov	r0, r5
 801b574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b578:	f000 f8be 	bl	801b6f8 <_malloc_usable_size_r>
 801b57c:	4284      	cmp	r4, r0
 801b57e:	4606      	mov	r6, r0
 801b580:	d802      	bhi.n	801b588 <_realloc_r+0x34>
 801b582:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801b586:	d8f4      	bhi.n	801b572 <_realloc_r+0x1e>
 801b588:	4621      	mov	r1, r4
 801b58a:	4638      	mov	r0, r7
 801b58c:	f7fd fa8e 	bl	8018aac <_malloc_r>
 801b590:	4680      	mov	r8, r0
 801b592:	b908      	cbnz	r0, 801b598 <_realloc_r+0x44>
 801b594:	4645      	mov	r5, r8
 801b596:	e7ec      	b.n	801b572 <_realloc_r+0x1e>
 801b598:	42b4      	cmp	r4, r6
 801b59a:	4622      	mov	r2, r4
 801b59c:	4629      	mov	r1, r5
 801b59e:	bf28      	it	cs
 801b5a0:	4632      	movcs	r2, r6
 801b5a2:	f7fe f98e 	bl	80198c2 <memcpy>
 801b5a6:	4629      	mov	r1, r5
 801b5a8:	4638      	mov	r0, r7
 801b5aa:	f7fe fff1 	bl	801a590 <_free_r>
 801b5ae:	e7f1      	b.n	801b594 <_realloc_r+0x40>

0801b5b0 <__ascii_wctomb>:
 801b5b0:	4603      	mov	r3, r0
 801b5b2:	4608      	mov	r0, r1
 801b5b4:	b141      	cbz	r1, 801b5c8 <__ascii_wctomb+0x18>
 801b5b6:	2aff      	cmp	r2, #255	@ 0xff
 801b5b8:	d904      	bls.n	801b5c4 <__ascii_wctomb+0x14>
 801b5ba:	228a      	movs	r2, #138	@ 0x8a
 801b5bc:	601a      	str	r2, [r3, #0]
 801b5be:	f04f 30ff 	mov.w	r0, #4294967295
 801b5c2:	4770      	bx	lr
 801b5c4:	700a      	strb	r2, [r1, #0]
 801b5c6:	2001      	movs	r0, #1
 801b5c8:	4770      	bx	lr
	...

0801b5cc <fiprintf>:
 801b5cc:	b40e      	push	{r1, r2, r3}
 801b5ce:	b503      	push	{r0, r1, lr}
 801b5d0:	4601      	mov	r1, r0
 801b5d2:	ab03      	add	r3, sp, #12
 801b5d4:	4805      	ldr	r0, [pc, #20]	@ (801b5ec <fiprintf+0x20>)
 801b5d6:	f853 2b04 	ldr.w	r2, [r3], #4
 801b5da:	6800      	ldr	r0, [r0, #0]
 801b5dc:	9301      	str	r3, [sp, #4]
 801b5de:	f7ff fd1d 	bl	801b01c <_vfiprintf_r>
 801b5e2:	b002      	add	sp, #8
 801b5e4:	f85d eb04 	ldr.w	lr, [sp], #4
 801b5e8:	b003      	add	sp, #12
 801b5ea:	4770      	bx	lr
 801b5ec:	20000150 	.word	0x20000150

0801b5f0 <__swhatbuf_r>:
 801b5f0:	b570      	push	{r4, r5, r6, lr}
 801b5f2:	460c      	mov	r4, r1
 801b5f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b5f8:	2900      	cmp	r1, #0
 801b5fa:	b096      	sub	sp, #88	@ 0x58
 801b5fc:	4615      	mov	r5, r2
 801b5fe:	461e      	mov	r6, r3
 801b600:	da0d      	bge.n	801b61e <__swhatbuf_r+0x2e>
 801b602:	89a3      	ldrh	r3, [r4, #12]
 801b604:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801b608:	f04f 0100 	mov.w	r1, #0
 801b60c:	bf14      	ite	ne
 801b60e:	2340      	movne	r3, #64	@ 0x40
 801b610:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801b614:	2000      	movs	r0, #0
 801b616:	6031      	str	r1, [r6, #0]
 801b618:	602b      	str	r3, [r5, #0]
 801b61a:	b016      	add	sp, #88	@ 0x58
 801b61c:	bd70      	pop	{r4, r5, r6, pc}
 801b61e:	466a      	mov	r2, sp
 801b620:	f000 f848 	bl	801b6b4 <_fstat_r>
 801b624:	2800      	cmp	r0, #0
 801b626:	dbec      	blt.n	801b602 <__swhatbuf_r+0x12>
 801b628:	9901      	ldr	r1, [sp, #4]
 801b62a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801b62e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801b632:	4259      	negs	r1, r3
 801b634:	4159      	adcs	r1, r3
 801b636:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b63a:	e7eb      	b.n	801b614 <__swhatbuf_r+0x24>

0801b63c <__smakebuf_r>:
 801b63c:	898b      	ldrh	r3, [r1, #12]
 801b63e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b640:	079d      	lsls	r5, r3, #30
 801b642:	4606      	mov	r6, r0
 801b644:	460c      	mov	r4, r1
 801b646:	d507      	bpl.n	801b658 <__smakebuf_r+0x1c>
 801b648:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801b64c:	6023      	str	r3, [r4, #0]
 801b64e:	6123      	str	r3, [r4, #16]
 801b650:	2301      	movs	r3, #1
 801b652:	6163      	str	r3, [r4, #20]
 801b654:	b003      	add	sp, #12
 801b656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b658:	ab01      	add	r3, sp, #4
 801b65a:	466a      	mov	r2, sp
 801b65c:	f7ff ffc8 	bl	801b5f0 <__swhatbuf_r>
 801b660:	9f00      	ldr	r7, [sp, #0]
 801b662:	4605      	mov	r5, r0
 801b664:	4639      	mov	r1, r7
 801b666:	4630      	mov	r0, r6
 801b668:	f7fd fa20 	bl	8018aac <_malloc_r>
 801b66c:	b948      	cbnz	r0, 801b682 <__smakebuf_r+0x46>
 801b66e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b672:	059a      	lsls	r2, r3, #22
 801b674:	d4ee      	bmi.n	801b654 <__smakebuf_r+0x18>
 801b676:	f023 0303 	bic.w	r3, r3, #3
 801b67a:	f043 0302 	orr.w	r3, r3, #2
 801b67e:	81a3      	strh	r3, [r4, #12]
 801b680:	e7e2      	b.n	801b648 <__smakebuf_r+0xc>
 801b682:	89a3      	ldrh	r3, [r4, #12]
 801b684:	6020      	str	r0, [r4, #0]
 801b686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b68a:	81a3      	strh	r3, [r4, #12]
 801b68c:	9b01      	ldr	r3, [sp, #4]
 801b68e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801b692:	b15b      	cbz	r3, 801b6ac <__smakebuf_r+0x70>
 801b694:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b698:	4630      	mov	r0, r6
 801b69a:	f000 f81d 	bl	801b6d8 <_isatty_r>
 801b69e:	b128      	cbz	r0, 801b6ac <__smakebuf_r+0x70>
 801b6a0:	89a3      	ldrh	r3, [r4, #12]
 801b6a2:	f023 0303 	bic.w	r3, r3, #3
 801b6a6:	f043 0301 	orr.w	r3, r3, #1
 801b6aa:	81a3      	strh	r3, [r4, #12]
 801b6ac:	89a3      	ldrh	r3, [r4, #12]
 801b6ae:	431d      	orrs	r5, r3
 801b6b0:	81a5      	strh	r5, [r4, #12]
 801b6b2:	e7cf      	b.n	801b654 <__smakebuf_r+0x18>

0801b6b4 <_fstat_r>:
 801b6b4:	b538      	push	{r3, r4, r5, lr}
 801b6b6:	4d07      	ldr	r5, [pc, #28]	@ (801b6d4 <_fstat_r+0x20>)
 801b6b8:	2300      	movs	r3, #0
 801b6ba:	4604      	mov	r4, r0
 801b6bc:	4608      	mov	r0, r1
 801b6be:	4611      	mov	r1, r2
 801b6c0:	602b      	str	r3, [r5, #0]
 801b6c2:	f7eb fa1b 	bl	8006afc <_fstat>
 801b6c6:	1c43      	adds	r3, r0, #1
 801b6c8:	d102      	bne.n	801b6d0 <_fstat_r+0x1c>
 801b6ca:	682b      	ldr	r3, [r5, #0]
 801b6cc:	b103      	cbz	r3, 801b6d0 <_fstat_r+0x1c>
 801b6ce:	6023      	str	r3, [r4, #0]
 801b6d0:	bd38      	pop	{r3, r4, r5, pc}
 801b6d2:	bf00      	nop
 801b6d4:	20002718 	.word	0x20002718

0801b6d8 <_isatty_r>:
 801b6d8:	b538      	push	{r3, r4, r5, lr}
 801b6da:	4d06      	ldr	r5, [pc, #24]	@ (801b6f4 <_isatty_r+0x1c>)
 801b6dc:	2300      	movs	r3, #0
 801b6de:	4604      	mov	r4, r0
 801b6e0:	4608      	mov	r0, r1
 801b6e2:	602b      	str	r3, [r5, #0]
 801b6e4:	f7eb fa1a 	bl	8006b1c <_isatty>
 801b6e8:	1c43      	adds	r3, r0, #1
 801b6ea:	d102      	bne.n	801b6f2 <_isatty_r+0x1a>
 801b6ec:	682b      	ldr	r3, [r5, #0]
 801b6ee:	b103      	cbz	r3, 801b6f2 <_isatty_r+0x1a>
 801b6f0:	6023      	str	r3, [r4, #0]
 801b6f2:	bd38      	pop	{r3, r4, r5, pc}
 801b6f4:	20002718 	.word	0x20002718

0801b6f8 <_malloc_usable_size_r>:
 801b6f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b6fc:	1f18      	subs	r0, r3, #4
 801b6fe:	2b00      	cmp	r3, #0
 801b700:	bfbc      	itt	lt
 801b702:	580b      	ldrlt	r3, [r1, r0]
 801b704:	18c0      	addlt	r0, r0, r3
 801b706:	4770      	bx	lr

0801b708 <_init>:
 801b708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b70a:	bf00      	nop
 801b70c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b70e:	bc08      	pop	{r3}
 801b710:	469e      	mov	lr, r3
 801b712:	4770      	bx	lr

0801b714 <_fini>:
 801b714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b716:	bf00      	nop
 801b718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b71a:	bc08      	pop	{r3}
 801b71c:	469e      	mov	lr, r3
 801b71e:	4770      	bx	lr
